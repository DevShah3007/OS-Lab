Binary files xv6-public/bio.o and xv6-public-with-hybrid/bio.o differ
Binary files xv6-public/bootasm.o and xv6-public-with-hybrid/bootasm.o differ
Binary files xv6-public/bootblock.o and xv6-public-with-hybrid/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public-with-hybrid/bootblockother.o differ
Binary files xv6-public/bootmain.o and xv6-public-with-hybrid/bootmain.o differ
Binary files xv6-public/_cat and xv6-public-with-hybrid/_cat differ
diff -ruN xv6-public/cat.asm xv6-public-with-hybrid/cat.asm
--- xv6-public/cat.asm	2022-09-06 09:47:09.378109000 +0530
+++ xv6-public-with-hybrid/cat.asm	2022-10-07 18:49:58.920957800 +0530
@@ -70,9 +70,9 @@
       printf(1, "cat: cannot open %s\n", argv[i]);
   69:	50                   	push   %eax
   6a:	ff 33                	push   (%ebx)
-  6c:	68 2b 08 00 00       	push   $0x82b
+  6c:	68 8b 0a 00 00       	push   $0xa8b
   71:	6a 01                	push   $0x1
-  73:	e8 68 04 00 00       	call   4e0 <printf>
+  73:	e8 98 04 00 00       	call   510 <printf>
       exit();
   78:	e8 e6 02 00 00       	call   363 <exit>
     cat(0);
@@ -97,7 +97,7 @@
     if (write(1, buf, n) != n) {
   a0:	83 ec 04             	sub    $0x4,%esp
   a3:	53                   	push   %ebx
-  a4:	68 a0 0b 00 00       	push   $0xba0
+  a4:	68 80 0e 00 00       	push   $0xe80
   a9:	6a 01                	push   $0x1
   ab:	e8 d3 02 00 00       	call   383 <write>
   b0:	83 c4 10             	add    $0x10,%esp
@@ -106,7 +106,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   b7:	83 ec 04             	sub    $0x4,%esp
   ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 a0 0b 00 00       	push   $0xba0
+  bf:	68 80 0e 00 00       	push   $0xe80
   c4:	56                   	push   %esi
   c5:	e8 b1 02 00 00       	call   37b <read>
   ca:	83 c4 10             	add    $0x10,%esp
@@ -123,17 +123,17 @@
   db:	c3                   	ret    
       printf(1, "cat: write error\n");
   dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 08 08 00 00       	push   $0x808
+  df:	68 68 0a 00 00       	push   $0xa68
   e4:	6a 01                	push   $0x1
-  e6:	e8 f5 03 00 00       	call   4e0 <printf>
+  e6:	e8 25 04 00 00       	call   510 <printf>
       exit();
   eb:	e8 73 02 00 00       	call   363 <exit>
     printf(1, "cat: read error\n");
   f0:	50                   	push   %eax
   f1:	50                   	push   %eax
-  f2:	68 1a 08 00 00       	push   $0x81a
+  f2:	68 7a 0a 00 00       	push   $0xa7a
   f7:	6a 01                	push   $0x1
-  f9:	e8 e2 03 00 00       	call   4e0 <printf>
+  f9:	e8 12 04 00 00       	call   510 <printf>
     exit();
   fe:	e8 60 02 00 00       	call   363 <exit>
  103:	66 90                	xchg   %ax,%ax
@@ -688,572 +688,887 @@
  41a:	c3                   	ret    
 
 0000041b <draw>:
+SYSCALL(draw)
  41b:	b8 19 00 00 00       	mov    $0x19,%eax
  420:	cd 40                	int    $0x40
  422:	c3                   	ret    
- 423:	66 90                	xchg   %ax,%ax
- 425:	66 90                	xchg   %ax,%ax
- 427:	66 90                	xchg   %ax,%ax
- 429:	66 90                	xchg   %ax,%ax
- 42b:	66 90                	xchg   %ax,%ax
- 42d:	66 90                	xchg   %ax,%ax
- 42f:	90                   	nop
 
-00000430 <printint>:
+00000423 <getNumProc>:
+SYSCALL(getNumProc)
+ 423:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 42b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 433:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 43b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 443:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 44b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 453:	b8 20 00 00 00       	mov    $0x20,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+ 45b:	66 90                	xchg   %ax,%ax
+ 45d:	66 90                	xchg   %ax,%ax
+ 45f:	90                   	nop
+
+00000460 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 3c             	sub    $0x3c,%esp
- 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+ 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 43c:	89 d1                	mov    %edx,%ecx
+ 46c:	89 d1                	mov    %edx,%ecx
 {
- 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 441:	85 d2                	test   %edx,%edx
- 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
- 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 44d:	74 79                	je     4c8 <printint+0x98>
+ 471:	85 d2                	test   %edx,%edx
+ 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
+ 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 47d:	74 79                	je     4f8 <printint+0x98>
     neg = 1;
- 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 456:	f7 d9                	neg    %ecx
+ 486:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 458:	31 db                	xor    %ebx,%ebx
- 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 488:	31 db                	xor    %ebx,%ebx
+ 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 460:	89 c8                	mov    %ecx,%eax
- 462:	31 d2                	xor    %edx,%edx
- 464:	89 cf                	mov    %ecx,%edi
- 466:	f7 75 c4             	divl   -0x3c(%ebp)
- 469:	0f b6 92 a0 08 00 00 	movzbl 0x8a0(%edx),%edx
- 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 473:	89 d8                	mov    %ebx,%eax
- 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 490:	89 c8                	mov    %ecx,%eax
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	89 cf                	mov    %ecx,%edi
+ 496:	f7 75 c4             	divl   -0x3c(%ebp)
+ 499:	0f b6 92 00 0b 00 00 	movzbl 0xb00(%edx),%edx
+ 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4a3:	89 d8                	mov    %ebx,%eax
+ 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 481:	76 dd                	jbe    460 <printint+0x30>
+ 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4b1:	76 dd                	jbe    490 <printint+0x30>
   if(neg)
- 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 486:	85 c9                	test   %ecx,%ecx
- 488:	74 0c                	je     496 <printint+0x66>
+ 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4b6:	85 c9                	test   %ecx,%ecx
+ 4b8:	74 0c                	je     4c6 <printint+0x66>
     buf[i++] = '-';
- 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 48f:	89 d8                	mov    %ebx,%eax
+ 4bf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 49d:	eb 07                	jmp    4a6 <printint+0x76>
- 49f:	90                   	nop
+ 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4cd:	eb 07                	jmp    4d6 <printint+0x76>
+ 4cf:	90                   	nop
     putc(fd, buf[i]);
- 4a0:	0f b6 13             	movzbl (%ebx),%edx
- 4a3:	83 eb 01             	sub    $0x1,%ebx
+ 4d0:	0f b6 13             	movzbl (%ebx),%edx
+ 4d3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 4a6:	83 ec 04             	sub    $0x4,%esp
- 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4ac:	6a 01                	push   $0x1
- 4ae:	56                   	push   %esi
- 4af:	57                   	push   %edi
- 4b0:	e8 ce fe ff ff       	call   383 <write>
+ 4d6:	83 ec 04             	sub    $0x4,%esp
+ 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4dc:	6a 01                	push   $0x1
+ 4de:	56                   	push   %esi
+ 4df:	57                   	push   %edi
+ 4e0:	e8 9e fe ff ff       	call   383 <write>
   while(--i >= 0)
- 4b5:	83 c4 10             	add    $0x10,%esp
- 4b8:	39 de                	cmp    %ebx,%esi
- 4ba:	75 e4                	jne    4a0 <printint+0x70>
-}
- 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4bf:	5b                   	pop    %ebx
- 4c0:	5e                   	pop    %esi
- 4c1:	5f                   	pop    %edi
- 4c2:	5d                   	pop    %ebp
- 4c3:	c3                   	ret    
- 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x70>
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4cf:	eb 87                	jmp    458 <printint+0x28>
- 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4df:	90                   	nop
+ 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ff:	eb 87                	jmp    488 <printint+0x28>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
 
-000004e0 <printf>:
+00000510 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4e0:	55                   	push   %ebp
- 4e1:	89 e5                	mov    %esp,%ebp
- 4e3:	57                   	push   %edi
- 4e4:	56                   	push   %esi
- 4e5:	53                   	push   %ebx
- 4e6:	83 ec 2c             	sub    $0x2c,%esp
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 519:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 4ec:	8b 75 08             	mov    0x8(%ebp),%esi
+ 51c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 4ef:	0f b6 13             	movzbl (%ebx),%edx
- 4f2:	84 d2                	test   %dl,%dl
- 4f4:	74 6a                	je     560 <printf+0x80>
+ 51f:	0f b6 13             	movzbl (%ebx),%edx
+ 522:	84 d2                	test   %dl,%dl
+ 524:	74 6a                	je     590 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 4f6:	8d 45 10             	lea    0x10(%ebp),%eax
- 4f9:	83 c3 01             	add    $0x1,%ebx
+ 526:	8d 45 10             	lea    0x10(%ebp),%eax
+ 529:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 4fc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 52c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4ff:	31 c9                	xor    %ecx,%ecx
+ 52f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 501:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 504:	eb 36                	jmp    53c <printf+0x5c>
- 506:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 50d:	8d 76 00             	lea    0x0(%esi),%esi
- 510:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	eb 36                	jmp    56c <printf+0x5c>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 540:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 513:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 543:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 518:	83 f8 25             	cmp    $0x25,%eax
- 51b:	74 15                	je     532 <printf+0x52>
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	74 15                	je     562 <printf+0x52>
   write(fd, &c, 1);
- 51d:	83 ec 04             	sub    $0x4,%esp
- 520:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 523:	6a 01                	push   $0x1
- 525:	57                   	push   %edi
- 526:	56                   	push   %esi
- 527:	e8 57 fe ff ff       	call   383 <write>
- 52c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	56                   	push   %esi
+ 557:	e8 27 fe ff ff       	call   383 <write>
+ 55c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 52f:	83 c4 10             	add    $0x10,%esp
+ 55f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 532:	0f b6 13             	movzbl (%ebx),%edx
- 535:	83 c3 01             	add    $0x1,%ebx
- 538:	84 d2                	test   %dl,%dl
- 53a:	74 24                	je     560 <printf+0x80>
+ 562:	0f b6 13             	movzbl (%ebx),%edx
+ 565:	83 c3 01             	add    $0x1,%ebx
+ 568:	84 d2                	test   %dl,%dl
+ 56a:	74 24                	je     590 <printf+0x80>
     c = fmt[i] & 0xff;
- 53c:	0f b6 c2             	movzbl %dl,%eax
+ 56c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 53f:	85 c9                	test   %ecx,%ecx
- 541:	74 cd                	je     510 <printf+0x30>
+ 56f:	85 c9                	test   %ecx,%ecx
+ 571:	74 cd                	je     540 <printf+0x30>
       }
     } else if(state == '%'){
- 543:	83 f9 25             	cmp    $0x25,%ecx
- 546:	75 ea                	jne    532 <printf+0x52>
+ 573:	83 f9 25             	cmp    $0x25,%ecx
+ 576:	75 ea                	jne    562 <printf+0x52>
       if(c == 'd'){
- 548:	83 f8 25             	cmp    $0x25,%eax
- 54b:	0f 84 07 01 00 00    	je     658 <printf+0x178>
- 551:	83 e8 63             	sub    $0x63,%eax
- 554:	83 f8 15             	cmp    $0x15,%eax
- 557:	77 17                	ja     570 <printf+0x90>
- 559:	ff 24 85 48 08 00 00 	jmp    *0x848(,%eax,4)
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	0f 84 07 01 00 00    	je     688 <printf+0x178>
+ 581:	83 e8 63             	sub    $0x63,%eax
+ 584:	83 f8 15             	cmp    $0x15,%eax
+ 587:	77 17                	ja     5a0 <printf+0x90>
+ 589:	ff 24 85 a8 0a 00 00 	jmp    *0xaa8(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 560:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 563:	5b                   	pop    %ebx
- 564:	5e                   	pop    %esi
- 565:	5f                   	pop    %edi
- 566:	5d                   	pop    %ebp
- 567:	c3                   	ret    
- 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56f:	90                   	nop
+ 590:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 593:	5b                   	pop    %ebx
+ 594:	5e                   	pop    %esi
+ 595:	5f                   	pop    %edi
+ 596:	5d                   	pop    %ebp
+ 597:	c3                   	ret    
+ 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
   write(fd, &c, 1);
- 570:	83 ec 04             	sub    $0x4,%esp
- 573:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 576:	6a 01                	push   $0x1
- 578:	57                   	push   %edi
- 579:	56                   	push   %esi
- 57a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 57e:	e8 00 fe ff ff       	call   383 <write>
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5a6:	6a 01                	push   $0x1
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ae:	e8 d0 fd ff ff       	call   383 <write>
         putc(fd, c);
- 583:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 5b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 587:	83 c4 0c             	add    $0xc,%esp
- 58a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 58d:	6a 01                	push   $0x1
- 58f:	57                   	push   %edi
- 590:	56                   	push   %esi
- 591:	e8 ed fd ff ff       	call   383 <write>
+ 5b7:	83 c4 0c             	add    $0xc,%esp
+ 5ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5bd:	6a 01                	push   $0x1
+ 5bf:	57                   	push   %edi
+ 5c0:	56                   	push   %esi
+ 5c1:	e8 bd fd ff ff       	call   383 <write>
         putc(fd, c);
- 596:	83 c4 10             	add    $0x10,%esp
+ 5c6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 599:	31 c9                	xor    %ecx,%ecx
- 59b:	eb 95                	jmp    532 <printf+0x52>
- 59d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5c9:	31 c9                	xor    %ecx,%ecx
+ 5cb:	eb 95                	jmp    562 <printf+0x52>
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5a0:	83 ec 0c             	sub    $0xc,%esp
- 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5a8:	6a 00                	push   $0x0
- 5aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5ad:	8b 10                	mov    (%eax),%edx
- 5af:	89 f0                	mov    %esi,%eax
- 5b1:	e8 7a fe ff ff       	call   430 <printint>
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d8:	6a 00                	push   $0x0
+ 5da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5dd:	8b 10                	mov    (%eax),%edx
+ 5df:	89 f0                	mov    %esi,%eax
+ 5e1:	e8 7a fe ff ff       	call   460 <printint>
         ap++;
- 5b6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 5ba:	83 c4 10             	add    $0x10,%esp
+ 5e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ea:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5bd:	31 c9                	xor    %ecx,%ecx
- 5bf:	e9 6e ff ff ff       	jmp    532 <printf+0x52>
- 5c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ed:	31 c9                	xor    %ecx,%ecx
+ 5ef:	e9 6e ff ff ff       	jmp    562 <printf+0x52>
+ 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5cb:	8b 10                	mov    (%eax),%edx
+ 5f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5fb:	8b 10                	mov    (%eax),%edx
         ap++;
- 5cd:	83 c0 04             	add    $0x4,%eax
- 5d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5fd:	83 c0 04             	add    $0x4,%eax
+ 600:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5d3:	85 d2                	test   %edx,%edx
- 5d5:	0f 84 8d 00 00 00    	je     668 <printf+0x188>
+ 603:	85 d2                	test   %edx,%edx
+ 605:	0f 84 8d 00 00 00    	je     698 <printf+0x188>
         while(*s != 0){
- 5db:	0f b6 02             	movzbl (%edx),%eax
+ 60b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 5de:	31 c9                	xor    %ecx,%ecx
+ 60e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 5e0:	84 c0                	test   %al,%al
- 5e2:	0f 84 4a ff ff ff    	je     532 <printf+0x52>
- 5e8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5eb:	89 d3                	mov    %edx,%ebx
- 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 610:	84 c0                	test   %al,%al
+ 612:	0f 84 4a ff ff ff    	je     562 <printf+0x52>
+ 618:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 61b:	89 d3                	mov    %edx,%ebx
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 5f0:	83 ec 04             	sub    $0x4,%esp
+ 620:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5f3:	83 c3 01             	add    $0x1,%ebx
- 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 623:	83 c3 01             	add    $0x1,%ebx
+ 626:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5f9:	6a 01                	push   $0x1
- 5fb:	57                   	push   %edi
- 5fc:	56                   	push   %esi
- 5fd:	e8 81 fd ff ff       	call   383 <write>
+ 629:	6a 01                	push   $0x1
+ 62b:	57                   	push   %edi
+ 62c:	56                   	push   %esi
+ 62d:	e8 51 fd ff ff       	call   383 <write>
         while(*s != 0){
- 602:	0f b6 03             	movzbl (%ebx),%eax
- 605:	83 c4 10             	add    $0x10,%esp
- 608:	84 c0                	test   %al,%al
- 60a:	75 e4                	jne    5f0 <printf+0x110>
+ 632:	0f b6 03             	movzbl (%ebx),%eax
+ 635:	83 c4 10             	add    $0x10,%esp
+ 638:	84 c0                	test   %al,%al
+ 63a:	75 e4                	jne    620 <printf+0x110>
       state = 0;
- 60c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 60f:	31 c9                	xor    %ecx,%ecx
- 611:	e9 1c ff ff ff       	jmp    532 <printf+0x52>
- 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 61d:	8d 76 00             	lea    0x0(%esi),%esi
+ 63c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 63f:	31 c9                	xor    %ecx,%ecx
+ 641:	e9 1c ff ff ff       	jmp    562 <printf+0x52>
+ 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 620:	83 ec 0c             	sub    $0xc,%esp
- 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 628:	6a 01                	push   $0x1
- 62a:	e9 7b ff ff ff       	jmp    5aa <printf+0xca>
- 62f:	90                   	nop
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 658:	6a 01                	push   $0x1
+ 65a:	e9 7b ff ff ff       	jmp    5da <printf+0xca>
+ 65f:	90                   	nop
         putc(fd, *ap);
- 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 633:	83 ec 04             	sub    $0x4,%esp
+ 663:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 636:	8b 00                	mov    (%eax),%eax
+ 666:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 638:	6a 01                	push   $0x1
- 63a:	57                   	push   %edi
- 63b:	56                   	push   %esi
+ 668:	6a 01                	push   $0x1
+ 66a:	57                   	push   %edi
+ 66b:	56                   	push   %esi
         putc(fd, *ap);
- 63c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 66c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 63f:	e8 3f fd ff ff       	call   383 <write>
+ 66f:	e8 0f fd ff ff       	call   383 <write>
         ap++;
- 644:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 648:	83 c4 10             	add    $0x10,%esp
+ 674:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 678:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 64b:	31 c9                	xor    %ecx,%ecx
- 64d:	e9 e0 fe ff ff       	jmp    532 <printf+0x52>
- 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 67b:	31 c9                	xor    %ecx,%ecx
+ 67d:	e9 e0 fe ff ff       	jmp    562 <printf+0x52>
+ 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 658:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 688:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 65b:	83 ec 04             	sub    $0x4,%esp
- 65e:	e9 2a ff ff ff       	jmp    58d <printf+0xad>
- 663:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 667:	90                   	nop
+ 68b:	83 ec 04             	sub    $0x4,%esp
+ 68e:	e9 2a ff ff ff       	jmp    5bd <printf+0xad>
+ 693:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 697:	90                   	nop
           s = "(null)";
- 668:	ba 40 08 00 00       	mov    $0x840,%edx
+ 698:	ba a0 0a 00 00       	mov    $0xaa0,%edx
         while(*s != 0){
- 66d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 670:	b8 28 00 00 00       	mov    $0x28,%eax
- 675:	89 d3                	mov    %edx,%ebx
- 677:	e9 74 ff ff ff       	jmp    5f0 <printf+0x110>
- 67c:	66 90                	xchg   %ax,%ax
- 67e:	66 90                	xchg   %ax,%ax
+ 69d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a5:	89 d3                	mov    %edx,%ebx
+ 6a7:	e9 74 ff ff ff       	jmp    620 <printf+0x110>
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
 
-00000680 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 680:	55                   	push   %ebp
+ 6b0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 681:	a1 a0 0d 00 00       	mov    0xda0,%eax
+ 6b1:	a1 80 10 00 00       	mov    0x1080,%eax
 {
- 686:	89 e5                	mov    %esp,%ebp
- 688:	57                   	push   %edi
- 689:	56                   	push   %esi
- 68a:	53                   	push   %ebx
- 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b6:	89 e5                	mov    %esp,%ebp
+ 6b8:	57                   	push   %edi
+ 6b9:	56                   	push   %esi
+ 6ba:	53                   	push   %ebx
+ 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 698:	89 c2                	mov    %eax,%edx
- 69a:	8b 00                	mov    (%eax),%eax
- 69c:	39 ca                	cmp    %ecx,%edx
- 69e:	73 30                	jae    6d0 <free+0x50>
- 6a0:	39 c1                	cmp    %eax,%ecx
- 6a2:	72 04                	jb     6a8 <free+0x28>
+ 6c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6c8:	89 c2                	mov    %eax,%edx
+ 6ca:	8b 00                	mov    (%eax),%eax
+ 6cc:	39 ca                	cmp    %ecx,%edx
+ 6ce:	73 30                	jae    700 <free+0x50>
+ 6d0:	39 c1                	cmp    %eax,%ecx
+ 6d2:	72 04                	jb     6d8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6a4:	39 c2                	cmp    %eax,%edx
- 6a6:	72 f0                	jb     698 <free+0x18>
+ 6d4:	39 c2                	cmp    %eax,%edx
+ 6d6:	72 f0                	jb     6c8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6ae:	39 f8                	cmp    %edi,%eax
- 6b0:	74 30                	je     6e2 <free+0x62>
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 f8                	cmp    %edi,%eax
+ 6e0:	74 30                	je     712 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 6b2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 6b5:	8b 42 04             	mov    0x4(%edx),%eax
- 6b8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6bb:	39 f1                	cmp    %esi,%ecx
- 6bd:	74 3a                	je     6f9 <free+0x79>
+ 6e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6eb:	39 f1                	cmp    %esi,%ecx
+ 6ed:	74 3a                	je     729 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 6bf:	89 0a                	mov    %ecx,(%edx)
+ 6ef:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 6c1:	5b                   	pop    %ebx
+ 6f1:	5b                   	pop    %ebx
   freep = p;
- 6c2:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+ 6f2:	89 15 80 10 00 00    	mov    %edx,0x1080
 }
- 6c8:	5e                   	pop    %esi
- 6c9:	5f                   	pop    %edi
- 6ca:	5d                   	pop    %ebp
- 6cb:	c3                   	ret    
- 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6f8:	5e                   	pop    %esi
+ 6f9:	5f                   	pop    %edi
+ 6fa:	5d                   	pop    %ebp
+ 6fb:	c3                   	ret    
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6d0:	39 c2                	cmp    %eax,%edx
- 6d2:	72 c4                	jb     698 <free+0x18>
- 6d4:	39 c1                	cmp    %eax,%ecx
- 6d6:	73 c0                	jae    698 <free+0x18>
+ 700:	39 c2                	cmp    %eax,%edx
+ 702:	72 c4                	jb     6c8 <free+0x18>
+ 704:	39 c1                	cmp    %eax,%ecx
+ 706:	73 c0                	jae    6c8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6de:	39 f8                	cmp    %edi,%eax
- 6e0:	75 d0                	jne    6b2 <free+0x32>
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 f8                	cmp    %edi,%eax
+ 710:	75 d0                	jne    6e2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 6e2:	03 70 04             	add    0x4(%eax),%esi
- 6e5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 712:	03 70 04             	add    0x4(%eax),%esi
+ 715:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e8:	8b 02                	mov    (%edx),%eax
- 6ea:	8b 00                	mov    (%eax),%eax
- 6ec:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 718:	8b 02                	mov    (%edx),%eax
+ 71a:	8b 00                	mov    (%eax),%eax
+ 71c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6ef:	8b 42 04             	mov    0x4(%edx),%eax
- 6f2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	75 c6                	jne    6bf <free+0x3f>
+ 71f:	8b 42 04             	mov    0x4(%edx),%eax
+ 722:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	75 c6                	jne    6ef <free+0x3f>
     p->s.size += bp->s.size;
- 6f9:	03 43 fc             	add    -0x4(%ebx),%eax
+ 729:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 6fc:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+ 72c:	89 15 80 10 00 00    	mov    %edx,0x1080
     p->s.size += bp->s.size;
- 702:	89 42 04             	mov    %eax,0x4(%edx)
+ 732:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 705:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 708:	89 0a                	mov    %ecx,(%edx)
+ 735:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 738:	89 0a                	mov    %ecx,(%edx)
 }
- 70a:	5b                   	pop    %ebx
- 70b:	5e                   	pop    %esi
- 70c:	5f                   	pop    %edi
- 70d:	5d                   	pop    %ebp
- 70e:	c3                   	ret    
- 70f:	90                   	nop
+ 73a:	5b                   	pop    %ebx
+ 73b:	5e                   	pop    %esi
+ 73c:	5f                   	pop    %edi
+ 73d:	5d                   	pop    %ebp
+ 73e:	c3                   	ret    
+ 73f:	90                   	nop
 
-00000710 <malloc>:
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 710:	55                   	push   %ebp
- 711:	89 e5                	mov    %esp,%ebp
- 713:	57                   	push   %edi
- 714:	56                   	push   %esi
- 715:	53                   	push   %ebx
- 716:	83 ec 1c             	sub    $0x1c,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 719:	8b 45 08             	mov    0x8(%ebp),%eax
+ 749:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 71c:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+ 74c:	8b 3d 80 10 00 00    	mov    0x1080,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 722:	8d 70 07             	lea    0x7(%eax),%esi
- 725:	c1 ee 03             	shr    $0x3,%esi
- 728:	83 c6 01             	add    $0x1,%esi
+ 752:	8d 70 07             	lea    0x7(%eax),%esi
+ 755:	c1 ee 03             	shr    $0x3,%esi
+ 758:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 72b:	85 ff                	test   %edi,%edi
- 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
+ 75b:	85 ff                	test   %edi,%edi
+ 75d:	0f 84 9d 00 00 00    	je     800 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 733:	8b 17                	mov    (%edi),%edx
+ 763:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 735:	8b 4a 04             	mov    0x4(%edx),%ecx
- 738:	39 f1                	cmp    %esi,%ecx
- 73a:	73 6a                	jae    7a6 <malloc+0x96>
- 73c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 741:	39 de                	cmp    %ebx,%esi
- 743:	0f 43 de             	cmovae %esi,%ebx
+ 765:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 768:	39 f1                	cmp    %esi,%ecx
+ 76a:	73 6a                	jae    7d6 <malloc+0x96>
+ 76c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 771:	39 de                	cmp    %ebx,%esi
+ 773:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 746:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 74d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 750:	eb 17                	jmp    769 <malloc+0x59>
- 752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 776:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 77d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 780:	eb 17                	jmp    799 <malloc+0x59>
+ 782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 758:	8b 02                	mov    (%edx),%eax
+ 788:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 75a:	8b 48 04             	mov    0x4(%eax),%ecx
- 75d:	39 f1                	cmp    %esi,%ecx
- 75f:	73 4f                	jae    7b0 <malloc+0xa0>
+ 78a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 78d:	39 f1                	cmp    %esi,%ecx
+ 78f:	73 4f                	jae    7e0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 761:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
- 767:	89 c2                	mov    %eax,%edx
- 769:	39 d7                	cmp    %edx,%edi
- 76b:	75 eb                	jne    758 <malloc+0x48>
+ 791:	8b 3d 80 10 00 00    	mov    0x1080,%edi
+ 797:	89 c2                	mov    %eax,%edx
+ 799:	39 d7                	cmp    %edx,%edi
+ 79b:	75 eb                	jne    788 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 76d:	83 ec 0c             	sub    $0xc,%esp
- 770:	ff 75 e4             	push   -0x1c(%ebp)
- 773:	e8 73 fc ff ff       	call   3eb <sbrk>
+ 79d:	83 ec 0c             	sub    $0xc,%esp
+ 7a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7a3:	e8 43 fc ff ff       	call   3eb <sbrk>
   if(p == (char*)-1)
- 778:	83 c4 10             	add    $0x10,%esp
- 77b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 77e:	74 1c                	je     79c <malloc+0x8c>
+ 7a8:	83 c4 10             	add    $0x10,%esp
+ 7ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ae:	74 1c                	je     7cc <malloc+0x8c>
   hp->s.size = nu;
- 780:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7b0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 783:	83 ec 0c             	sub    $0xc,%esp
- 786:	83 c0 08             	add    $0x8,%eax
- 789:	50                   	push   %eax
- 78a:	e8 f1 fe ff ff       	call   680 <free>
+ 7b3:	83 ec 0c             	sub    $0xc,%esp
+ 7b6:	83 c0 08             	add    $0x8,%eax
+ 7b9:	50                   	push   %eax
+ 7ba:	e8 f1 fe ff ff       	call   6b0 <free>
   return freep;
- 78f:	8b 15 a0 0d 00 00    	mov    0xda0,%edx
+ 7bf:	8b 15 80 10 00 00    	mov    0x1080,%edx
       if((p = morecore(nunits)) == 0)
- 795:	83 c4 10             	add    $0x10,%esp
- 798:	85 d2                	test   %edx,%edx
- 79a:	75 bc                	jne    758 <malloc+0x48>
+ 7c5:	83 c4 10             	add    $0x10,%esp
+ 7c8:	85 d2                	test   %edx,%edx
+ 7ca:	75 bc                	jne    788 <malloc+0x48>
         return 0;
   }
 }
- 79c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 79f:	31 c0                	xor    %eax,%eax
+ 7cf:	31 c0                	xor    %eax,%eax
 }
- 7a1:	5b                   	pop    %ebx
- 7a2:	5e                   	pop    %esi
- 7a3:	5f                   	pop    %edi
- 7a4:	5d                   	pop    %ebp
- 7a5:	c3                   	ret    
+ 7d1:	5b                   	pop    %ebx
+ 7d2:	5e                   	pop    %esi
+ 7d3:	5f                   	pop    %edi
+ 7d4:	5d                   	pop    %ebp
+ 7d5:	c3                   	ret    
     if(p->s.size >= nunits){
- 7a6:	89 d0                	mov    %edx,%eax
- 7a8:	89 fa                	mov    %edi,%edx
- 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7d6:	89 d0                	mov    %edx,%eax
+ 7d8:	89 fa                	mov    %edi,%edx
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 7b0:	39 ce                	cmp    %ecx,%esi
- 7b2:	74 4c                	je     800 <malloc+0xf0>
+ 7e0:	39 ce                	cmp    %ecx,%esi
+ 7e2:	74 4c                	je     830 <malloc+0xf0>
         p->s.size -= nunits;
- 7b4:	29 f1                	sub    %esi,%ecx
- 7b6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 7e4:	29 f1                	sub    %esi,%ecx
+ 7e6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 7b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 7e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 7bc:	89 70 04             	mov    %esi,0x4(%eax)
+ 7ec:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 7bf:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+ 7ef:	89 15 80 10 00 00    	mov    %edx,0x1080
 }
- 7c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7c8:	83 c0 08             	add    $0x8,%eax
+ 7f8:	83 c0 08             	add    $0x8,%eax
 }
- 7cb:	5b                   	pop    %ebx
- 7cc:	5e                   	pop    %esi
- 7cd:	5f                   	pop    %edi
- 7ce:	5d                   	pop    %ebp
- 7cf:	c3                   	ret    
+ 7fb:	5b                   	pop    %ebx
+ 7fc:	5e                   	pop    %esi
+ 7fd:	5f                   	pop    %edi
+ 7fe:	5d                   	pop    %ebp
+ 7ff:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 7d0:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
- 7d7:	0d 00 00 
+ 800:	c7 05 80 10 00 00 84 	movl   $0x1084,0x1080
+ 807:	10 00 00 
     base.s.size = 0;
- 7da:	bf a4 0d 00 00       	mov    $0xda4,%edi
+ 80a:	bf 84 10 00 00       	mov    $0x1084,%edi
     base.s.ptr = freep = prevp = &base;
- 7df:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
- 7e6:	0d 00 00 
+ 80f:	c7 05 84 10 00 00 84 	movl   $0x1084,0x1084
+ 816:	10 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7e9:	89 fa                	mov    %edi,%edx
+ 819:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 7eb:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
- 7f2:	00 00 00 
+ 81b:	c7 05 88 10 00 00 00 	movl   $0x0,0x1088
+ 822:	00 00 00 
     if(p->s.size >= nunits){
- 7f5:	e9 42 ff ff ff       	jmp    73c <malloc+0x2c>
- 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 825:	e9 42 ff ff ff       	jmp    76c <malloc+0x2c>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 800:	8b 08                	mov    (%eax),%ecx
- 802:	89 0a                	mov    %ecx,(%edx)
- 804:	eb b9                	jmp    7bf <malloc+0xaf>
+ 830:	8b 08                	mov    (%eax),%ecx
+ 832:	89 0a                	mov    %ecx,(%edx)
+ 834:	eb b9                	jmp    7ef <malloc+0xaf>
+ 836:	66 90                	xchg   %ax,%ax
+ 838:	66 90                	xchg   %ax,%ax
+ 83a:	66 90                	xchg   %ax,%ax
+ 83c:	66 90                	xchg   %ax,%ax
+ 83e:	66 90                	xchg   %ax,%ax
+
+00000840 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 840:	55                   	push   %ebp
+ 841:	b8 a4 10 00 00       	mov    $0x10a4,%eax
+ 846:	89 e5                	mov    %esp,%ebp
+ 848:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 84b:	89 15 a0 10 00 00    	mov    %edx,0x10a0
+    for (mti=1; mti<N; mti++)
+ 851:	eb 08                	jmp    85b <sgenrand+0x1b>
+ 853:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 857:	90                   	nop
+ 858:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 85b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 861:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 863:	3d 5c 1a 00 00       	cmp    $0x1a5c,%eax
+ 868:	75 ee                	jne    858 <sgenrand+0x18>
+ 86a:	c7 05 74 0e 00 00 70 	movl   $0x270,0xe74
+ 871:	02 00 00 
+}
+ 874:	5d                   	pop    %ebp
+ 875:	c3                   	ret    
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000880 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 880:	a1 74 0e 00 00       	mov    0xe74,%eax
+ 885:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 88a:	7f 3d                	jg     8c9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 88c:	8b 0c 85 a0 10 00 00 	mov    0x10a0(,%eax,4),%ecx
+ 893:	8d 50 01             	lea    0x1(%eax),%edx
+ 896:	89 15 74 0e 00 00    	mov    %edx,0xe74
+    y ^= TEMPERING_SHIFT_U(y);
+ 89c:	89 ca                	mov    %ecx,%edx
+ 89e:	c1 ea 0b             	shr    $0xb,%edx
+ 8a1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8a3:	89 d0                	mov    %edx,%eax
+ 8a5:	c1 e0 07             	shl    $0x7,%eax
+ 8a8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8ad:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8af:	89 c2                	mov    %eax,%edx
+ 8b1:	c1 e2 0f             	shl    $0xf,%edx
+ 8b4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 8ba:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 8bc:	89 d0                	mov    %edx,%eax
+ 8be:	c1 e8 12             	shr    $0x12,%eax
+ 8c1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8c3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8c8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8c9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 8ce:	0f 84 d4 00 00 00    	je     9a8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 8d4:	31 c0                	xor    %eax,%eax
+ 8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8dd:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8e0:	8b 0c 85 a0 10 00 00 	mov    0x10a0(,%eax,4),%ecx
+ 8e7:	83 c0 01             	add    $0x1,%eax
+ 8ea:	8b 14 85 a0 10 00 00 	mov    0x10a0(,%eax,4),%edx
+ 8f1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8f7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8fd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8ff:	89 d1                	mov    %edx,%ecx
+ 901:	83 e2 01             	and    $0x1,%edx
+ 904:	d1 e9                	shr    %ecx
+ 906:	33 0c 85 d0 16 00 00 	xor    0x16d0(,%eax,4),%ecx
+ 90d:	33 0c 95 14 0b 00 00 	xor    0xb14(,%edx,4),%ecx
+ 914:	89 0c 85 9c 10 00 00 	mov    %ecx,0x109c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 91b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 920:	75 be                	jne    8e0 <genrand+0x60>
+ 922:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 928:	8b 0c 85 a0 10 00 00 	mov    0x10a0(,%eax,4),%ecx
+ 92f:	83 c0 01             	add    $0x1,%eax
+ 932:	8b 14 85 a0 10 00 00 	mov    0x10a0(,%eax,4),%edx
+ 939:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 93f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 945:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 947:	89 d1                	mov    %edx,%ecx
+ 949:	83 e2 01             	and    $0x1,%edx
+ 94c:	d1 e9                	shr    %ecx
+ 94e:	33 0c 85 10 0d 00 00 	xor    0xd10(,%eax,4),%ecx
+ 955:	33 0c 95 14 0b 00 00 	xor    0xb14(,%edx,4),%ecx
+ 95c:	89 0c 85 9c 10 00 00 	mov    %ecx,0x109c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 963:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 968:	75 be                	jne    928 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 96a:	8b 0d a0 10 00 00    	mov    0x10a0,%ecx
+ 970:	a1 5c 1a 00 00       	mov    0x1a5c,%eax
+ 975:	89 ca                	mov    %ecx,%edx
+ 977:	25 00 00 00 80       	and    $0x80000000,%eax
+ 97c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 982:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 984:	89 c2                	mov    %eax,%edx
+ 986:	83 e0 01             	and    $0x1,%eax
+ 989:	d1 ea                	shr    %edx
+ 98b:	33 15 d0 16 00 00    	xor    0x16d0,%edx
+ 991:	33 14 85 14 0b 00 00 	xor    0xb14(,%eax,4),%edx
+ 998:	89 15 5c 1a 00 00    	mov    %edx,0x1a5c
+ 99e:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9a3:	e9 ee fe ff ff       	jmp    896 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 9a8:	b8 a4 10 00 00       	mov    $0x10a4,%eax
+ 9ad:	b9 5c 1a 00 00       	mov    $0x1a5c,%ecx
+ 9b2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9b7:	c7 05 a0 10 00 00 05 	movl   $0x1105,0x10a0
+ 9be:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9c1:	eb 08                	jmp    9cb <genrand+0x14b>
+ 9c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9c7:	90                   	nop
+ 9c8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9cb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9d1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 9d3:	39 c1                	cmp    %eax,%ecx
+ 9d5:	75 f1                	jne    9c8 <genrand+0x148>
+ 9d7:	e9 f8 fe ff ff       	jmp    8d4 <genrand+0x54>
+ 9dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009e0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 9e0:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 9e1:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 9e3:	89 e5                	mov    %esp,%ebp
+ 9e5:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 9e6:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 9e9:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 9ea:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 9ef:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9f2:	89 d8                	mov    %ebx,%eax
+ 9f4:	f7 f1                	div    %ecx
+ 9f6:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9f8:	29 d3                	sub    %edx,%ebx
+ 9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ a00:	e8 7b fe ff ff       	call   880 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a05:	39 d8                	cmp    %ebx,%eax
+ a07:	73 f7                	jae    a00 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a09:	31 d2                	xor    %edx,%edx
+}
+ a0b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a0c:	f7 f6                	div    %esi
+}
+ a0e:	5e                   	pop    %esi
+ a0f:	5d                   	pop    %ebp
+ a10:	c3                   	ret    
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a1f:	90                   	nop
+
+00000a20 <randomrange>:
+
+int randomrange(int low, int high){
+ a20:	55                   	push   %ebp
+ a21:	89 e5                	mov    %esp,%ebp
+ a23:	57                   	push   %edi
+ a24:	56                   	push   %esi
+ a25:	53                   	push   %ebx
+ a26:	83 ec 0c             	sub    $0xc,%esp
+ a29:	8b 75 08             	mov    0x8(%ebp),%esi
+ a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a2f:	39 f0                	cmp    %esi,%eax
+ a31:	7d 06                	jge    a39 <randomrange+0x19>
+ a33:	89 f2                	mov    %esi,%edx
+ a35:	89 c6                	mov    %eax,%esi
+ a37:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a39:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a3b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a40:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a42:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a45:	89 d8                	mov    %ebx,%eax
+ a47:	f7 f1                	div    %ecx
+ a49:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ a4b:	29 d3                	sub    %edx,%ebx
+ a4d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ a50:	e8 2b fe ff ff       	call   880 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a55:	39 d8                	cmp    %ebx,%eax
+ a57:	73 f7                	jae    a50 <randomrange+0x30>
+  return x/bin_size;
+ a59:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ a5b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a5e:	f7 f7                	div    %edi
+}
+ a60:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a61:	01 f0                	add    %esi,%eax
+}
+ a63:	5e                   	pop    %esi
+ a64:	5f                   	pop    %edi
+ a65:	5d                   	pop    %ebp
+ a66:	c3                   	ret    
diff -ruN xv6-public/cat.d xv6-public-with-hybrid/cat.d
--- xv6-public/cat.d	2022-09-06 09:47:09.354131000 +0530
+++ xv6-public-with-hybrid/cat.d	2022-10-07 18:49:58.872957939 +0530
@@ -1 +1,2 @@
-cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/cat.o and xv6-public-with-hybrid/cat.o differ
diff -ruN xv6-public/cat.sym xv6-public-with-hybrid/cat.sym
--- xv6-public/cat.sym	2022-09-06 09:47:09.378109000 +0530
+++ xv6-public-with-hybrid/cat.sym	2022-10-07 18:49:58.948957720 +0530
@@ -1,21 +1,29 @@
 00000000 cat.c
 00000000 ulib.c
 00000000 printf.c
-00000430 printint
-000008a0 digits.0
+00000460 printint
+00000b00 digits.0
 00000000 umalloc.c
-00000da0 freep
-00000da4 base
+00001080 freep
+00001084 base
+00000000 random.c
+000010a0 mt
+00000e74 mti
+00000b14 mag01.0
 00000110 strcpy
-000004e0 printf
+00000840 sgenrand
+00000510 printf
 00000413 thread_exit
 00000330 memmove
 000003ab mknod
 00000230 gets
 000003e3 getpid
 00000090 cat
-00000710 malloc
+00000740 malloc
 000003f3 sleep
+00000443 get_burst_time
+000009e0 random_at_most
+0000044b getCurrentInfo
 00000373 pipe
 00000383 write
 000003bb fstat
@@ -28,15 +36,20 @@
 0000035b fork
 000003eb sbrk
 000003fb uptime
-00000b84 __bss_start
+00000e78 __bss_start
 000001d0 memset
 00000000 main
+0000043b set_burst_time
 00000140 strcmp
 000003db dup
-00000ba0 buf
+0000042b getMaxPid
+00000e80 buf
+00000880 genrand
+00000423 getNumProc
+00000433 getProcInfo
 000002a0 stat
-00000b84 _edata
-00000dac _end
+00000e78 _edata
+00001a60 _end
 000003c3 link
 00000363 exit
 000002f0 atoi
@@ -45,7 +58,9 @@
 000003a3 open
 000001f0 strchr
 00000403 thread_create
+00000453 getCurrentPID
+00000a20 randomrange
 000003cb mkdir
 0000038b close
 0000040b thread_join
-00000680 free
+000006b0 free
Binary files xv6-public/console.o and xv6-public-with-hybrid/console.o differ
Binary files xv6-public/_cpuProcTester and xv6-public-with-hybrid/_cpuProcTester differ
diff -ruN xv6-public/cpuProcTester.asm xv6-public-with-hybrid/cpuProcTester.asm
--- xv6-public/cpuProcTester.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/cpuProcTester.asm	2022-10-07 18:50:04.176942373 +0530
@@ -0,0 +1,1661 @@
+
+_cpuProcTester:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "user.h"
+
+int useless;
+
+int
+main(int argv, char* argc[]){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 28             	sub    $0x28,%esp
+
+	if(argv<2){
+  14:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argv, char* argc[]){
+  17:	8b 51 04             	mov    0x4(%ecx),%edx
+	if(argv<2){
+  1a:	7e 3a                	jle    56 <main+0x56>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+  1c:	83 ec 0c             	sub    $0xc,%esp
+  1f:	ff 72 04             	push   0x4(%edx)
+  22:	e8 79 03 00 00       	call   3a0 <atoi>
+
+	int burst_times[n];
+  27:	83 c4 10             	add    $0x10,%esp
+  2a:	8d 14 85 0f 00 00 00 	lea    0xf(,%eax,4),%edx
+	int n=atoi(argc[1]);
+  31:	89 c3                	mov    %eax,%ebx
+	int burst_times[n];
+  33:	89 e1                	mov    %esp,%ecx
+  35:	89 d0                	mov    %edx,%eax
+  37:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  3d:	83 e0 f0             	and    $0xfffffff0,%eax
+  40:	29 d1                	sub    %edx,%ecx
+  42:	39 cc                	cmp    %ecx,%esp
+  44:	74 23                	je     69 <main+0x69>
+  46:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  4c:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  53:	00 
+  54:	eb ec                	jmp    42 <main+0x42>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+  56:	51                   	push   %ecx
+  57:	51                   	push   %ecx
+  58:	68 18 0b 00 00       	push   $0xb18
+  5d:	6a 01                	push   $0x1
+  5f:	e8 5c 05 00 00       	call   5c0 <printf>
+		exit();
+  64:	e8 aa 03 00 00       	call   413 <exit>
+	int burst_times[n];
+  69:	25 ff 0f 00 00       	and    $0xfff,%eax
+  6e:	29 c4                	sub    %eax,%esp
+  70:	85 c0                	test   %eax,%eax
+  72:	74 05                	je     79 <main+0x79>
+  74:	83 4c 04 fc 00       	orl    $0x0,-0x4(%esp,%eax,1)
+  79:	89 e7                	mov    %esp,%edi
+
+	for(int i=0;i<n;i++){
+  7b:	85 db                	test   %ebx,%ebx
+  7d:	0f 8e e5 00 00 00    	jle    168 <main+0x168>
+  83:	31 d2                	xor    %edx,%edx
+		burst_times[i] = randomrange(1,1000);
+  85:	83 ec 08             	sub    $0x8,%esp
+  88:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  8b:	68 e8 03 00 00       	push   $0x3e8
+  90:	6a 01                	push   $0x1
+  92:	e8 39 0a 00 00       	call   ad0 <randomrange>
+  97:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+	for(int i=0;i<n;i++){
+  9a:	83 c4 10             	add    $0x10,%esp
+		burst_times[i] = randomrange(1,1000);
+  9d:	89 04 97             	mov    %eax,(%edi,%edx,4)
+	for(int i=0;i<n;i++){
+  a0:	89 d6                	mov    %edx,%esi
+  a2:	8d 52 01             	lea    0x1(%edx),%edx
+  a5:	39 d3                	cmp    %edx,%ebx
+  a7:	75 dc                	jne    85 <main+0x85>
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  a9:	53                   	push   %ebx
+  aa:	53                   	push   %ebx
+  ab:	68 b4 0b 00 00       	push   $0xbb4
+  b0:	6a 01                	push   $0x1
+  b2:	e8 09 05 00 00       	call   5c0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  b7:	58                   	pop    %eax
+  b8:	5a                   	pop    %edx
+  b9:	68 e4 0b 00 00       	push   $0xbe4
+  be:	6a 01                	push   $0x1
+  c0:	e8 fb 04 00 00       	call   5c0 <printf>
+  c5:	83 c4 10             	add    $0x10,%esp
+  c8:	31 d2                	xor    %edx,%edx
+  ca:	eb 0d                	jmp    d9 <main+0xd9>
+	for(int i=0;i<n;i++){
+  cc:	8d 42 01             	lea    0x1(%edx),%eax
+  cf:	39 f2                	cmp    %esi,%edx
+  d1:	0f 84 b0 00 00 00    	je     187 <main+0x187>
+  d7:	89 c2                	mov    %eax,%edx
+  d9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+		if(!fork()){
+  dc:	e8 2a 03 00 00       	call   40b <fork>
+  e1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+  e4:	85 c0                	test   %eax,%eax
+  e6:	89 c3                	mov    %eax,%ebx
+  e8:	75 e2                	jne    cc <main+0xcc>
+
+			// CPU Bound process
+			set_burst_time(burst_times[i]);
+  ea:	83 ec 0c             	sub    $0xc,%esp
+  ed:	ff 34 97             	push   (%edi,%edx,4)
+
+			int it=0;
+			for(int j=0;j<100;j++){
+  f0:	31 f6                	xor    %esi,%esi
+			set_burst_time(burst_times[i]);
+  f2:	e8 f4 03 00 00       	call   4eb <set_burst_time>
+  f7:	83 c4 10             	add    $0x10,%esp
+  fa:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
+				for(int k=0;k<1000000;k++){
+  ff:	89 f0                	mov    %esi,%eax
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+					if((j+k)%2)it++;
+ 108:	8d 53 01             	lea    0x1(%ebx),%edx
+ 10b:	83 eb 01             	sub    $0x1,%ebx
+ 10e:	a8 01                	test   $0x1,%al
+ 110:	0f 45 da             	cmovne %edx,%ebx
+				for(int k=0;k<1000000;k++){
+ 113:	83 c0 01             	add    $0x1,%eax
+ 116:	39 c1                	cmp    %eax,%ecx
+ 118:	75 ee                	jne    108 <main+0x108>
+			for(int j=0;j<100;j++){
+ 11a:	83 c6 01             	add    $0x1,%esi
+ 11d:	83 c1 01             	add    $0x1,%ecx
+ 120:	83 fe 64             	cmp    $0x64,%esi
+ 123:	75 da                	jne    ff <main+0xff>
+				}
+			}
+			useless+=it;
+			
+			struct processInfo info;
+			getCurrentInfo(&info);
+ 125:	83 ec 0c             	sub    $0xc,%esp
+ 128:	8d 45 dc             	lea    -0x24(%ebp),%eax
+			useless+=it;
+ 12b:	01 1d c0 0f 00 00    	add    %ebx,0xfc0
+			getCurrentInfo(&info);
+ 131:	50                   	push   %eax
+ 132:	e8 c4 03 00 00       	call   4fb <getCurrentInfo>
+			int bt = get_burst_time();
+ 137:	e8 b7 03 00 00       	call   4f3 <get_burst_time>
+			if(bt<10)
+				printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 13c:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+			if(bt<10)
+ 13f:	83 c4 10             	add    $0x10,%esp
+			int bt = get_burst_time();
+ 142:	89 c3                	mov    %eax,%ebx
+			if(bt<10)
+ 144:	83 f8 09             	cmp    $0x9,%eax
+ 147:	7f 54                	jg     19d <main+0x19d>
+				printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 149:	e8 b5 03 00 00       	call   503 <getCurrentPID>
+ 14e:	83 ec 0c             	sub    $0xc,%esp
+ 151:	56                   	push   %esi
+ 152:	53                   	push   %ebx
+ 153:	50                   	push   %eax
+ 154:	68 5c 0b 00 00       	push   $0xb5c
+ 159:	6a 01                	push   $0x1
+ 15b:	e8 60 04 00 00       	call   5c0 <printf>
+ 160:	83 c4 20             	add    $0x20,%esp
+			else
+				printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			exit();
+ 163:	e8 ab 02 00 00       	call   413 <exit>
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+ 168:	50                   	push   %eax
+ 169:	50                   	push   %eax
+ 16a:	68 b4 0b 00 00       	push   $0xbb4
+ 16f:	6a 01                	push   $0x1
+ 171:	e8 4a 04 00 00       	call   5c0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+ 176:	5a                   	pop    %edx
+ 177:	59                   	pop    %ecx
+ 178:	68 e4 0b 00 00       	push   $0xbe4
+ 17d:	6a 01                	push   $0x1
+ 17f:	e8 3c 04 00 00       	call   5c0 <printf>
+ 184:	83 c4 10             	add    $0x10,%esp
+
+
+		}
+	}
+
+	while(wait()!=-1);
+ 187:	e8 8f 02 00 00       	call   41b <wait>
+ 18c:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 18f:	74 d2                	je     163 <main+0x163>
+ 191:	e8 85 02 00 00       	call   41b <wait>
+ 196:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 199:	75 ec                	jne    187 <main+0x187>
+ 19b:	eb c6                	jmp    163 <main+0x163>
+				printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 19d:	e8 61 03 00 00       	call   503 <getCurrentPID>
+ 1a2:	83 ec 0c             	sub    $0xc,%esp
+ 1a5:	56                   	push   %esi
+ 1a6:	53                   	push   %ebx
+ 1a7:	50                   	push   %eax
+ 1a8:	68 88 0b 00 00       	push   $0xb88
+ 1ad:	6a 01                	push   $0x1
+ 1af:	e8 0c 04 00 00       	call   5c0 <printf>
+ 1b4:	83 c4 20             	add    $0x20,%esp
+ 1b7:	eb aa                	jmp    163 <main+0x163>
+ 1b9:	66 90                	xchg   %ax,%ax
+ 1bb:	66 90                	xchg   %ax,%ax
+ 1bd:	66 90                	xchg   %ax,%ax
+ 1bf:	90                   	nop
+
+000001c0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 1c0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 1c1:	31 c0                	xor    %eax,%eax
+{
+ 1c3:	89 e5                	mov    %esp,%ebp
+ 1c5:	53                   	push   %ebx
+ 1c6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 1d0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1d4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1d7:	83 c0 01             	add    $0x1,%eax
+ 1da:	84 d2                	test   %dl,%dl
+ 1dc:	75 f2                	jne    1d0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1e1:	89 c8                	mov    %ecx,%eax
+ 1e3:	c9                   	leave  
+ 1e4:	c3                   	ret    
+ 1e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001f0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	53                   	push   %ebx
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1fa:	0f b6 02             	movzbl (%edx),%eax
+ 1fd:	84 c0                	test   %al,%al
+ 1ff:	75 17                	jne    218 <strcmp+0x28>
+ 201:	eb 3a                	jmp    23d <strcmp+0x4d>
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 20c:	83 c2 01             	add    $0x1,%edx
+ 20f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 212:	84 c0                	test   %al,%al
+ 214:	74 1a                	je     230 <strcmp+0x40>
+    p++, q++;
+ 216:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 218:	0f b6 19             	movzbl (%ecx),%ebx
+ 21b:	38 c3                	cmp    %al,%bl
+ 21d:	74 e9                	je     208 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 21f:	29 d8                	sub    %ebx,%eax
+}
+ 221:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 224:	c9                   	leave  
+ 225:	c3                   	ret    
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 230:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 234:	31 c0                	xor    %eax,%eax
+ 236:	29 d8                	sub    %ebx,%eax
+}
+ 238:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 23b:	c9                   	leave  
+ 23c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 23d:	0f b6 19             	movzbl (%ecx),%ebx
+ 240:	31 c0                	xor    %eax,%eax
+ 242:	eb db                	jmp    21f <strcmp+0x2f>
+ 244:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 24f:	90                   	nop
+
+00000250 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 256:	80 3a 00             	cmpb   $0x0,(%edx)
+ 259:	74 15                	je     270 <strlen+0x20>
+ 25b:	31 c0                	xor    %eax,%eax
+ 25d:	8d 76 00             	lea    0x0(%esi),%esi
+ 260:	83 c0 01             	add    $0x1,%eax
+ 263:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 267:	89 c1                	mov    %eax,%ecx
+ 269:	75 f5                	jne    260 <strlen+0x10>
+    ;
+  return n;
+}
+ 26b:	89 c8                	mov    %ecx,%eax
+ 26d:	5d                   	pop    %ebp
+ 26e:	c3                   	ret    
+ 26f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 270:	31 c9                	xor    %ecx,%ecx
+}
+ 272:	5d                   	pop    %ebp
+ 273:	89 c8                	mov    %ecx,%eax
+ 275:	c3                   	ret    
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000280 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 287:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 28a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 28d:	89 d7                	mov    %edx,%edi
+ 28f:	fc                   	cld    
+ 290:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 292:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 295:	89 d0                	mov    %edx,%eax
+ 297:	c9                   	leave  
+ 298:	c3                   	ret    
+ 299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 2aa:	0f b6 10             	movzbl (%eax),%edx
+ 2ad:	84 d2                	test   %dl,%dl
+ 2af:	75 12                	jne    2c3 <strchr+0x23>
+ 2b1:	eb 1d                	jmp    2d0 <strchr+0x30>
+ 2b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2b7:	90                   	nop
+ 2b8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 2bc:	83 c0 01             	add    $0x1,%eax
+ 2bf:	84 d2                	test   %dl,%dl
+ 2c1:	74 0d                	je     2d0 <strchr+0x30>
+    if(*s == c)
+ 2c3:	38 d1                	cmp    %dl,%cl
+ 2c5:	75 f1                	jne    2b8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 2c7:	5d                   	pop    %ebp
+ 2c8:	c3                   	ret    
+ 2c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2d0:	31 c0                	xor    %eax,%eax
+}
+ 2d2:	5d                   	pop    %ebp
+ 2d3:	c3                   	ret    
+ 2d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+
+000002e0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	57                   	push   %edi
+ 2e4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 2e5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 2e8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 2e9:	31 db                	xor    %ebx,%ebx
+{
+ 2eb:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 2ee:	eb 27                	jmp    317 <gets+0x37>
+    cc = read(0, &c, 1);
+ 2f0:	83 ec 04             	sub    $0x4,%esp
+ 2f3:	6a 01                	push   $0x1
+ 2f5:	57                   	push   %edi
+ 2f6:	6a 00                	push   $0x0
+ 2f8:	e8 2e 01 00 00       	call   42b <read>
+    if(cc < 1)
+ 2fd:	83 c4 10             	add    $0x10,%esp
+ 300:	85 c0                	test   %eax,%eax
+ 302:	7e 1d                	jle    321 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 304:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 308:	8b 55 08             	mov    0x8(%ebp),%edx
+ 30b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 30f:	3c 0a                	cmp    $0xa,%al
+ 311:	74 1d                	je     330 <gets+0x50>
+ 313:	3c 0d                	cmp    $0xd,%al
+ 315:	74 19                	je     330 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 317:	89 de                	mov    %ebx,%esi
+ 319:	83 c3 01             	add    $0x1,%ebx
+ 31c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 31f:	7c cf                	jl     2f0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 321:	8b 45 08             	mov    0x8(%ebp),%eax
+ 324:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 328:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 32b:	5b                   	pop    %ebx
+ 32c:	5e                   	pop    %esi
+ 32d:	5f                   	pop    %edi
+ 32e:	5d                   	pop    %ebp
+ 32f:	c3                   	ret    
+  buf[i] = '\0';
+ 330:	8b 45 08             	mov    0x8(%ebp),%eax
+ 333:	89 de                	mov    %ebx,%esi
+ 335:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 339:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 33c:	5b                   	pop    %ebx
+ 33d:	5e                   	pop    %esi
+ 33e:	5f                   	pop    %edi
+ 33f:	5d                   	pop    %ebp
+ 340:	c3                   	ret    
+ 341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 348:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 34f:	90                   	nop
+
+00000350 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	56                   	push   %esi
+ 354:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 355:	83 ec 08             	sub    $0x8,%esp
+ 358:	6a 00                	push   $0x0
+ 35a:	ff 75 08             	push   0x8(%ebp)
+ 35d:	e8 f1 00 00 00       	call   453 <open>
+  if(fd < 0)
+ 362:	83 c4 10             	add    $0x10,%esp
+ 365:	85 c0                	test   %eax,%eax
+ 367:	78 27                	js     390 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 369:	83 ec 08             	sub    $0x8,%esp
+ 36c:	ff 75 0c             	push   0xc(%ebp)
+ 36f:	89 c3                	mov    %eax,%ebx
+ 371:	50                   	push   %eax
+ 372:	e8 f4 00 00 00       	call   46b <fstat>
+  close(fd);
+ 377:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 37a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 37c:	e8 ba 00 00 00       	call   43b <close>
+  return r;
+ 381:	83 c4 10             	add    $0x10,%esp
+}
+ 384:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 387:	89 f0                	mov    %esi,%eax
+ 389:	5b                   	pop    %ebx
+ 38a:	5e                   	pop    %esi
+ 38b:	5d                   	pop    %ebp
+ 38c:	c3                   	ret    
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 390:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 395:	eb ed                	jmp    384 <stat+0x34>
+ 397:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 39e:	66 90                	xchg   %ax,%ax
+
+000003a0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	53                   	push   %ebx
+ 3a4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3a7:	0f be 02             	movsbl (%edx),%eax
+ 3aa:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 3ad:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 3b0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 3b5:	77 1e                	ja     3d5 <atoi+0x35>
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 3c0:	83 c2 01             	add    $0x1,%edx
+ 3c3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3c6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3ca:	0f be 02             	movsbl (%edx),%eax
+ 3cd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3d0:	80 fb 09             	cmp    $0x9,%bl
+ 3d3:	76 eb                	jbe    3c0 <atoi+0x20>
+  return n;
+}
+ 3d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3d8:	89 c8                	mov    %ecx,%eax
+ 3da:	c9                   	leave  
+ 3db:	c3                   	ret    
+ 3dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003e0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	57                   	push   %edi
+ 3e4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3e7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3ea:	56                   	push   %esi
+ 3eb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3ee:	85 c0                	test   %eax,%eax
+ 3f0:	7e 13                	jle    405 <memmove+0x25>
+ 3f2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3f4:	89 d7                	mov    %edx,%edi
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 400:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 401:	39 f8                	cmp    %edi,%eax
+ 403:	75 fb                	jne    400 <memmove+0x20>
+  return vdst;
+}
+ 405:	5e                   	pop    %esi
+ 406:	89 d0                	mov    %edx,%eax
+ 408:	5f                   	pop    %edi
+ 409:	5d                   	pop    %ebp
+ 40a:	c3                   	ret    
+
+0000040b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 40b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <exit>:
+SYSCALL(exit)
+ 413:	b8 02 00 00 00       	mov    $0x2,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <wait>:
+SYSCALL(wait)
+ 41b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <pipe>:
+SYSCALL(pipe)
+ 423:	b8 04 00 00 00       	mov    $0x4,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <read>:
+SYSCALL(read)
+ 42b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <write>:
+SYSCALL(write)
+ 433:	b8 10 00 00 00       	mov    $0x10,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <close>:
+SYSCALL(close)
+ 43b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <kill>:
+SYSCALL(kill)
+ 443:	b8 06 00 00 00       	mov    $0x6,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <exec>:
+SYSCALL(exec)
+ 44b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <open>:
+SYSCALL(open)
+ 453:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <mknod>:
+SYSCALL(mknod)
+ 45b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <unlink>:
+SYSCALL(unlink)
+ 463:	b8 12 00 00 00       	mov    $0x12,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <fstat>:
+SYSCALL(fstat)
+ 46b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <link>:
+SYSCALL(link)
+ 473:	b8 13 00 00 00       	mov    $0x13,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <mkdir>:
+SYSCALL(mkdir)
+ 47b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <chdir>:
+SYSCALL(chdir)
+ 483:	b8 09 00 00 00       	mov    $0x9,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <dup>:
+SYSCALL(dup)
+ 48b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <getpid>:
+SYSCALL(getpid)
+ 493:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <sbrk>:
+SYSCALL(sbrk)
+ 49b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <sleep>:
+SYSCALL(sleep)
+ 4a3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <uptime>:
+SYSCALL(uptime)
+ 4ab:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <thread_create>:
+SYSCALL(thread_create)
+ 4b3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <thread_join>:
+SYSCALL(thread_join)
+ 4bb:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <thread_exit>:
+SYSCALL(thread_exit)
+ 4c3:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+
+000004cb <draw>:
+SYSCALL(draw)
+ 4cb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4d0:	cd 40                	int    $0x40
+ 4d2:	c3                   	ret    
+
+000004d3 <getNumProc>:
+SYSCALL(getNumProc)
+ 4d3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4d8:	cd 40                	int    $0x40
+ 4da:	c3                   	ret    
+
+000004db <getMaxPid>:
+SYSCALL(getMaxPid)
+ 4db:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 4e0:	cd 40                	int    $0x40
+ 4e2:	c3                   	ret    
+
+000004e3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4e3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 4e8:	cd 40                	int    $0x40
+ 4ea:	c3                   	ret    
+
+000004eb <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4eb:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 4f0:	cd 40                	int    $0x40
+ 4f2:	c3                   	ret    
+
+000004f3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4f3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 4f8:	cd 40                	int    $0x40
+ 4fa:	c3                   	ret    
+
+000004fb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 4fb:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 500:	cd 40                	int    $0x40
+ 502:	c3                   	ret    
+
+00000503 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 503:	b8 20 00 00 00       	mov    $0x20,%eax
+ 508:	cd 40                	int    $0x40
+ 50a:	c3                   	ret    
+ 50b:	66 90                	xchg   %ax,%ax
+ 50d:	66 90                	xchg   %ax,%ax
+ 50f:	90                   	nop
+
+00000510 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 3c             	sub    $0x3c,%esp
+ 519:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 51c:	89 d1                	mov    %edx,%ecx
+{
+ 51e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 521:	85 d2                	test   %edx,%edx
+ 523:	0f 89 7f 00 00 00    	jns    5a8 <printint+0x98>
+ 529:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 52d:	74 79                	je     5a8 <printint+0x98>
+    neg = 1;
+ 52f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 536:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 538:	31 db                	xor    %ebx,%ebx
+ 53a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 540:	89 c8                	mov    %ecx,%eax
+ 542:	31 d2                	xor    %edx,%edx
+ 544:	89 cf                	mov    %ecx,%edi
+ 546:	f7 75 c4             	divl   -0x3c(%ebp)
+ 549:	0f b6 92 74 0c 00 00 	movzbl 0xc74(%edx),%edx
+ 550:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 553:	89 d8                	mov    %ebx,%eax
+ 555:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 558:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 55b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 55e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 561:	76 dd                	jbe    540 <printint+0x30>
+  if(neg)
+ 563:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 566:	85 c9                	test   %ecx,%ecx
+ 568:	74 0c                	je     576 <printint+0x66>
+    buf[i++] = '-';
+ 56a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 56f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 571:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 576:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 579:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 57d:	eb 07                	jmp    586 <printint+0x76>
+ 57f:	90                   	nop
+    putc(fd, buf[i]);
+ 580:	0f b6 13             	movzbl (%ebx),%edx
+ 583:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 586:	83 ec 04             	sub    $0x4,%esp
+ 589:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 58c:	6a 01                	push   $0x1
+ 58e:	56                   	push   %esi
+ 58f:	57                   	push   %edi
+ 590:	e8 9e fe ff ff       	call   433 <write>
+  while(--i >= 0)
+ 595:	83 c4 10             	add    $0x10,%esp
+ 598:	39 de                	cmp    %ebx,%esi
+ 59a:	75 e4                	jne    580 <printint+0x70>
+}
+ 59c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 59f:	5b                   	pop    %ebx
+ 5a0:	5e                   	pop    %esi
+ 5a1:	5f                   	pop    %edi
+ 5a2:	5d                   	pop    %ebp
+ 5a3:	c3                   	ret    
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 5a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 5af:	eb 87                	jmp    538 <printint+0x28>
+ 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+
+000005c0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 5c0:	55                   	push   %ebp
+ 5c1:	89 e5                	mov    %esp,%ebp
+ 5c3:	57                   	push   %edi
+ 5c4:	56                   	push   %esi
+ 5c5:	53                   	push   %ebx
+ 5c6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 5cc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 5cf:	0f b6 13             	movzbl (%ebx),%edx
+ 5d2:	84 d2                	test   %dl,%dl
+ 5d4:	74 6a                	je     640 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 5d6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 5d9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 5dc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 5df:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 5e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e4:	eb 36                	jmp    61c <printf+0x5c>
+ 5e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 5f0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5f3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 5f8:	83 f8 25             	cmp    $0x25,%eax
+ 5fb:	74 15                	je     612 <printf+0x52>
+  write(fd, &c, 1);
+ 5fd:	83 ec 04             	sub    $0x4,%esp
+ 600:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 603:	6a 01                	push   $0x1
+ 605:	57                   	push   %edi
+ 606:	56                   	push   %esi
+ 607:	e8 27 fe ff ff       	call   433 <write>
+ 60c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 60f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 612:	0f b6 13             	movzbl (%ebx),%edx
+ 615:	83 c3 01             	add    $0x1,%ebx
+ 618:	84 d2                	test   %dl,%dl
+ 61a:	74 24                	je     640 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 61c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 61f:	85 c9                	test   %ecx,%ecx
+ 621:	74 cd                	je     5f0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 623:	83 f9 25             	cmp    $0x25,%ecx
+ 626:	75 ea                	jne    612 <printf+0x52>
+      if(c == 'd'){
+ 628:	83 f8 25             	cmp    $0x25,%eax
+ 62b:	0f 84 07 01 00 00    	je     738 <printf+0x178>
+ 631:	83 e8 63             	sub    $0x63,%eax
+ 634:	83 f8 15             	cmp    $0x15,%eax
+ 637:	77 17                	ja     650 <printf+0x90>
+ 639:	ff 24 85 1c 0c 00 00 	jmp    *0xc1c(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 640:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 643:	5b                   	pop    %ebx
+ 644:	5e                   	pop    %esi
+ 645:	5f                   	pop    %edi
+ 646:	5d                   	pop    %ebp
+ 647:	c3                   	ret    
+ 648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+  write(fd, &c, 1);
+ 650:	83 ec 04             	sub    $0x4,%esp
+ 653:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 656:	6a 01                	push   $0x1
+ 658:	57                   	push   %edi
+ 659:	56                   	push   %esi
+ 65a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 65e:	e8 d0 fd ff ff       	call   433 <write>
+        putc(fd, c);
+ 663:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 667:	83 c4 0c             	add    $0xc,%esp
+ 66a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 66d:	6a 01                	push   $0x1
+ 66f:	57                   	push   %edi
+ 670:	56                   	push   %esi
+ 671:	e8 bd fd ff ff       	call   433 <write>
+        putc(fd, c);
+ 676:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 679:	31 c9                	xor    %ecx,%ecx
+ 67b:	eb 95                	jmp    612 <printf+0x52>
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 688:	6a 00                	push   $0x0
+ 68a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 68d:	8b 10                	mov    (%eax),%edx
+ 68f:	89 f0                	mov    %esi,%eax
+ 691:	e8 7a fe ff ff       	call   510 <printint>
+        ap++;
+ 696:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 69a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 69d:	31 c9                	xor    %ecx,%ecx
+ 69f:	e9 6e ff ff ff       	jmp    612 <printf+0x52>
+ 6a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 6a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6ab:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 6ad:	83 c0 04             	add    $0x4,%eax
+ 6b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6b3:	85 d2                	test   %edx,%edx
+ 6b5:	0f 84 8d 00 00 00    	je     748 <printf+0x188>
+        while(*s != 0){
+ 6bb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 6be:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 6c0:	84 c0                	test   %al,%al
+ 6c2:	0f 84 4a ff ff ff    	je     612 <printf+0x52>
+ 6c8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6cb:	89 d3                	mov    %edx,%ebx
+ 6cd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 6d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6d3:	83 c3 01             	add    $0x1,%ebx
+ 6d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6d9:	6a 01                	push   $0x1
+ 6db:	57                   	push   %edi
+ 6dc:	56                   	push   %esi
+ 6dd:	e8 51 fd ff ff       	call   433 <write>
+        while(*s != 0){
+ 6e2:	0f b6 03             	movzbl (%ebx),%eax
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	84 c0                	test   %al,%al
+ 6ea:	75 e4                	jne    6d0 <printf+0x110>
+      state = 0;
+ 6ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 6ef:	31 c9                	xor    %ecx,%ecx
+ 6f1:	e9 1c ff ff ff       	jmp    612 <printf+0x52>
+ 6f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6fd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 700:	83 ec 0c             	sub    $0xc,%esp
+ 703:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 708:	6a 01                	push   $0x1
+ 70a:	e9 7b ff ff ff       	jmp    68a <printf+0xca>
+ 70f:	90                   	nop
+        putc(fd, *ap);
+ 710:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 713:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 716:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 718:	6a 01                	push   $0x1
+ 71a:	57                   	push   %edi
+ 71b:	56                   	push   %esi
+        putc(fd, *ap);
+ 71c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 71f:	e8 0f fd ff ff       	call   433 <write>
+        ap++;
+ 724:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 728:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 72b:	31 c9                	xor    %ecx,%ecx
+ 72d:	e9 e0 fe ff ff       	jmp    612 <printf+0x52>
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 738:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 73b:	83 ec 04             	sub    $0x4,%esp
+ 73e:	e9 2a ff ff ff       	jmp    66d <printf+0xad>
+ 743:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 747:	90                   	nop
+          s = "(null)";
+ 748:	ba 12 0c 00 00       	mov    $0xc12,%edx
+        while(*s != 0){
+ 74d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 750:	b8 28 00 00 00       	mov    $0x28,%eax
+ 755:	89 d3                	mov    %edx,%ebx
+ 757:	e9 74 ff ff ff       	jmp    6d0 <printf+0x110>
+ 75c:	66 90                	xchg   %ax,%ax
+ 75e:	66 90                	xchg   %ax,%ax
+
+00000760 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 760:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 761:	a1 c4 0f 00 00       	mov    0xfc4,%eax
+{
+ 766:	89 e5                	mov    %esp,%ebp
+ 768:	57                   	push   %edi
+ 769:	56                   	push   %esi
+ 76a:	53                   	push   %ebx
+ 76b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 76e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 778:	89 c2                	mov    %eax,%edx
+ 77a:	8b 00                	mov    (%eax),%eax
+ 77c:	39 ca                	cmp    %ecx,%edx
+ 77e:	73 30                	jae    7b0 <free+0x50>
+ 780:	39 c1                	cmp    %eax,%ecx
+ 782:	72 04                	jb     788 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 784:	39 c2                	cmp    %eax,%edx
+ 786:	72 f0                	jb     778 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 788:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 78b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 78e:	39 f8                	cmp    %edi,%eax
+ 790:	74 30                	je     7c2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 792:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 795:	8b 42 04             	mov    0x4(%edx),%eax
+ 798:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 79b:	39 f1                	cmp    %esi,%ecx
+ 79d:	74 3a                	je     7d9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 79f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 7a1:	5b                   	pop    %ebx
+  freep = p;
+ 7a2:	89 15 c4 0f 00 00    	mov    %edx,0xfc4
+}
+ 7a8:	5e                   	pop    %esi
+ 7a9:	5f                   	pop    %edi
+ 7aa:	5d                   	pop    %ebp
+ 7ab:	c3                   	ret    
+ 7ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7b0:	39 c2                	cmp    %eax,%edx
+ 7b2:	72 c4                	jb     778 <free+0x18>
+ 7b4:	39 c1                	cmp    %eax,%ecx
+ 7b6:	73 c0                	jae    778 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 7b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 7bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 7be:	39 f8                	cmp    %edi,%eax
+ 7c0:	75 d0                	jne    792 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 7c2:	03 70 04             	add    0x4(%eax),%esi
+ 7c5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7c8:	8b 02                	mov    (%edx),%eax
+ 7ca:	8b 00                	mov    (%eax),%eax
+ 7cc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7cf:	8b 42 04             	mov    0x4(%edx),%eax
+ 7d2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 7d5:	39 f1                	cmp    %esi,%ecx
+ 7d7:	75 c6                	jne    79f <free+0x3f>
+    p->s.size += bp->s.size;
+ 7d9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 7dc:	89 15 c4 0f 00 00    	mov    %edx,0xfc4
+    p->s.size += bp->s.size;
+ 7e2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 7e5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 7e8:	89 0a                	mov    %ecx,(%edx)
+}
+ 7ea:	5b                   	pop    %ebx
+ 7eb:	5e                   	pop    %esi
+ 7ec:	5f                   	pop    %edi
+ 7ed:	5d                   	pop    %ebp
+ 7ee:	c3                   	ret    
+ 7ef:	90                   	nop
+
+000007f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7f0:	55                   	push   %ebp
+ 7f1:	89 e5                	mov    %esp,%ebp
+ 7f3:	57                   	push   %edi
+ 7f4:	56                   	push   %esi
+ 7f5:	53                   	push   %ebx
+ 7f6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7fc:	8b 3d c4 0f 00 00    	mov    0xfc4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 802:	8d 70 07             	lea    0x7(%eax),%esi
+ 805:	c1 ee 03             	shr    $0x3,%esi
+ 808:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 80b:	85 ff                	test   %edi,%edi
+ 80d:	0f 84 9d 00 00 00    	je     8b0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 813:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 815:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 818:	39 f1                	cmp    %esi,%ecx
+ 81a:	73 6a                	jae    886 <malloc+0x96>
+ 81c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 821:	39 de                	cmp    %ebx,%esi
+ 823:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 826:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 82d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 830:	eb 17                	jmp    849 <malloc+0x59>
+ 832:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 838:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 83a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 83d:	39 f1                	cmp    %esi,%ecx
+ 83f:	73 4f                	jae    890 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 841:	8b 3d c4 0f 00 00    	mov    0xfc4,%edi
+ 847:	89 c2                	mov    %eax,%edx
+ 849:	39 d7                	cmp    %edx,%edi
+ 84b:	75 eb                	jne    838 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 84d:	83 ec 0c             	sub    $0xc,%esp
+ 850:	ff 75 e4             	push   -0x1c(%ebp)
+ 853:	e8 43 fc ff ff       	call   49b <sbrk>
+  if(p == (char*)-1)
+ 858:	83 c4 10             	add    $0x10,%esp
+ 85b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 85e:	74 1c                	je     87c <malloc+0x8c>
+  hp->s.size = nu;
+ 860:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 863:	83 ec 0c             	sub    $0xc,%esp
+ 866:	83 c0 08             	add    $0x8,%eax
+ 869:	50                   	push   %eax
+ 86a:	e8 f1 fe ff ff       	call   760 <free>
+  return freep;
+ 86f:	8b 15 c4 0f 00 00    	mov    0xfc4,%edx
+      if((p = morecore(nunits)) == 0)
+ 875:	83 c4 10             	add    $0x10,%esp
+ 878:	85 d2                	test   %edx,%edx
+ 87a:	75 bc                	jne    838 <malloc+0x48>
+        return 0;
+  }
+}
+ 87c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 87f:	31 c0                	xor    %eax,%eax
+}
+ 881:	5b                   	pop    %ebx
+ 882:	5e                   	pop    %esi
+ 883:	5f                   	pop    %edi
+ 884:	5d                   	pop    %ebp
+ 885:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 886:	89 d0                	mov    %edx,%eax
+ 888:	89 fa                	mov    %edi,%edx
+ 88a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 890:	39 ce                	cmp    %ecx,%esi
+ 892:	74 4c                	je     8e0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 894:	29 f1                	sub    %esi,%ecx
+ 896:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 899:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 89c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 89f:	89 15 c4 0f 00 00    	mov    %edx,0xfc4
+}
+ 8a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 8a8:	83 c0 08             	add    $0x8,%eax
+}
+ 8ab:	5b                   	pop    %ebx
+ 8ac:	5e                   	pop    %esi
+ 8ad:	5f                   	pop    %edi
+ 8ae:	5d                   	pop    %ebp
+ 8af:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 8b0:	c7 05 c4 0f 00 00 c8 	movl   $0xfc8,0xfc4
+ 8b7:	0f 00 00 
+    base.s.size = 0;
+ 8ba:	bf c8 0f 00 00       	mov    $0xfc8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8bf:	c7 05 c8 0f 00 00 c8 	movl   $0xfc8,0xfc8
+ 8c6:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8c9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 8cb:	c7 05 cc 0f 00 00 00 	movl   $0x0,0xfcc
+ 8d2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8d5:	e9 42 ff ff ff       	jmp    81c <malloc+0x2c>
+ 8da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8e0:	8b 08                	mov    (%eax),%ecx
+ 8e2:	89 0a                	mov    %ecx,(%edx)
+ 8e4:	eb b9                	jmp    89f <malloc+0xaf>
+ 8e6:	66 90                	xchg   %ax,%ax
+ 8e8:	66 90                	xchg   %ax,%ax
+ 8ea:	66 90                	xchg   %ax,%ax
+ 8ec:	66 90                	xchg   %ax,%ax
+ 8ee:	66 90                	xchg   %ax,%ax
+
+000008f0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 8f0:	55                   	push   %ebp
+ 8f1:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
+ 8f6:	89 e5                	mov    %esp,%ebp
+ 8f8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 8fb:	89 15 e0 0f 00 00    	mov    %edx,0xfe0
+    for (mti=1; mti<N; mti++)
+ 901:	eb 08                	jmp    90b <sgenrand+0x1b>
+ 903:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 907:	90                   	nop
+ 908:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 90b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 911:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 913:	3d 9c 19 00 00       	cmp    $0x199c,%eax
+ 918:	75 ee                	jne    908 <sgenrand+0x18>
+ 91a:	c7 05 b8 0f 00 00 70 	movl   $0x270,0xfb8
+ 921:	02 00 00 
+}
+ 924:	5d                   	pop    %ebp
+ 925:	c3                   	ret    
+ 926:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 92d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000930 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 930:	a1 b8 0f 00 00       	mov    0xfb8,%eax
+ 935:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 93a:	7f 3d                	jg     979 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 93c:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 943:	8d 50 01             	lea    0x1(%eax),%edx
+ 946:	89 15 b8 0f 00 00    	mov    %edx,0xfb8
+    y ^= TEMPERING_SHIFT_U(y);
+ 94c:	89 ca                	mov    %ecx,%edx
+ 94e:	c1 ea 0b             	shr    $0xb,%edx
+ 951:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 953:	89 d0                	mov    %edx,%eax
+ 955:	c1 e0 07             	shl    $0x7,%eax
+ 958:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 95d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 95f:	89 c2                	mov    %eax,%edx
+ 961:	c1 e2 0f             	shl    $0xf,%edx
+ 964:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 96a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 96c:	89 d0                	mov    %edx,%eax
+ 96e:	c1 e8 12             	shr    $0x12,%eax
+ 971:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 973:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 978:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 979:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 97e:	0f 84 d4 00 00 00    	je     a58 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 984:	31 c0                	xor    %eax,%eax
+ 986:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 990:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 997:	83 c0 01             	add    $0x1,%eax
+ 99a:	8b 14 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%edx
+ 9a1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9a7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9ad:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9af:	89 d1                	mov    %edx,%ecx
+ 9b1:	83 e2 01             	and    $0x1,%edx
+ 9b4:	d1 e9                	shr    %ecx
+ 9b6:	33 0c 85 10 16 00 00 	xor    0x1610(,%eax,4),%ecx
+ 9bd:	33 0c 95 88 0c 00 00 	xor    0xc88(,%edx,4),%ecx
+ 9c4:	89 0c 85 dc 0f 00 00 	mov    %ecx,0xfdc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 9cb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 9d0:	75 be                	jne    990 <genrand+0x60>
+ 9d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9d8:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 9df:	83 c0 01             	add    $0x1,%eax
+ 9e2:	8b 14 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%edx
+ 9e9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9ef:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9f5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9f7:	89 d1                	mov    %edx,%ecx
+ 9f9:	83 e2 01             	and    $0x1,%edx
+ 9fc:	d1 e9                	shr    %ecx
+ 9fe:	33 0c 85 50 0c 00 00 	xor    0xc50(,%eax,4),%ecx
+ a05:	33 0c 95 88 0c 00 00 	xor    0xc88(,%edx,4),%ecx
+ a0c:	89 0c 85 dc 0f 00 00 	mov    %ecx,0xfdc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ a13:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ a18:	75 be                	jne    9d8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ a1a:	8b 0d e0 0f 00 00    	mov    0xfe0,%ecx
+ a20:	a1 9c 19 00 00       	mov    0x199c,%eax
+ a25:	89 ca                	mov    %ecx,%edx
+ a27:	25 00 00 00 80       	and    $0x80000000,%eax
+ a2c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a32:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ a34:	89 c2                	mov    %eax,%edx
+ a36:	83 e0 01             	and    $0x1,%eax
+ a39:	d1 ea                	shr    %edx
+ a3b:	33 15 10 16 00 00    	xor    0x1610,%edx
+ a41:	33 14 85 88 0c 00 00 	xor    0xc88(,%eax,4),%edx
+ a48:	89 15 9c 19 00 00    	mov    %edx,0x199c
+ a4e:	ba 01 00 00 00       	mov    $0x1,%edx
+ a53:	e9 ee fe ff ff       	jmp    946 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ a58:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
+ a5d:	b9 9c 19 00 00       	mov    $0x199c,%ecx
+ a62:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a67:	c7 05 e0 0f 00 00 05 	movl   $0x1105,0xfe0
+ a6e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a71:	eb 08                	jmp    a7b <genrand+0x14b>
+ a73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a77:	90                   	nop
+ a78:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a7b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a81:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a83:	39 c1                	cmp    %eax,%ecx
+ a85:	75 f1                	jne    a78 <genrand+0x148>
+ a87:	e9 f8 fe ff ff       	jmp    984 <genrand+0x54>
+ a8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a90 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a90:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a91:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a93:	89 e5                	mov    %esp,%ebp
+ a95:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a96:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a99:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a9a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a9f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ aa2:	89 d8                	mov    %ebx,%eax
+ aa4:	f7 f1                	div    %ecx
+ aa6:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ aa8:	29 d3                	sub    %edx,%ebx
+ aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ ab0:	e8 7b fe ff ff       	call   930 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ ab5:	39 d8                	cmp    %ebx,%eax
+ ab7:	73 f7                	jae    ab0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ ab9:	31 d2                	xor    %edx,%edx
+}
+ abb:	5b                   	pop    %ebx
+  return x/bin_size;
+ abc:	f7 f6                	div    %esi
+}
+ abe:	5e                   	pop    %esi
+ abf:	5d                   	pop    %ebp
+ ac0:	c3                   	ret    
+ ac1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ ac8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ acf:	90                   	nop
+
+00000ad0 <randomrange>:
+
+int randomrange(int low, int high){
+ ad0:	55                   	push   %ebp
+ ad1:	89 e5                	mov    %esp,%ebp
+ ad3:	57                   	push   %edi
+ ad4:	56                   	push   %esi
+ ad5:	53                   	push   %ebx
+ ad6:	83 ec 0c             	sub    $0xc,%esp
+ ad9:	8b 75 08             	mov    0x8(%ebp),%esi
+ adc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ adf:	39 f0                	cmp    %esi,%eax
+ ae1:	7d 06                	jge    ae9 <randomrange+0x19>
+ ae3:	89 f2                	mov    %esi,%edx
+ ae5:	89 c6                	mov    %eax,%esi
+ ae7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ ae9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ aeb:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ af0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ af2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ af5:	89 d8                	mov    %ebx,%eax
+ af7:	f7 f1                	div    %ecx
+ af9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ afb:	29 d3                	sub    %edx,%ebx
+ afd:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ b00:	e8 2b fe ff ff       	call   930 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ b05:	39 d8                	cmp    %ebx,%eax
+ b07:	73 f7                	jae    b00 <randomrange+0x30>
+  return x/bin_size;
+ b09:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ b0b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ b0e:	f7 f7                	div    %edi
+}
+ b10:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ b11:	01 f0                	add    %esi,%eax
+}
+ b13:	5e                   	pop    %esi
+ b14:	5f                   	pop    %edi
+ b15:	5d                   	pop    %ebp
+ b16:	c3                   	ret    
diff -ruN xv6-public/cpuProcTester.c xv6-public-with-hybrid/cpuProcTester.c
--- xv6-public/cpuProcTester.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/cpuProcTester.c	2022-10-06 17:18:15.416605217 +0530
@@ -0,0 +1,57 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int useless;
+
+int
+main(int argv, char* argc[]){
+
+	if(argv<2){
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+
+	int burst_times[n];
+
+	for(int i=0;i<n;i++){
+		burst_times[i] = randomrange(1,1000);
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+	for(int i=0;i<n;i++){
+		if(!fork()){
+
+			// CPU Bound process
+			set_burst_time(burst_times[i]);
+
+			int it=0;
+			for(int j=0;j<100;j++){
+				for(int k=0;k<1000000;k++){
+					if((j+k)%2)it++;
+					else it--;
+				}
+			}
+			useless+=it;
+			
+			struct processInfo info;
+			getCurrentInfo(&info);
+			int bt = get_burst_time();
+			if(bt<10)
+				printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			else
+				printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			exit();
+
+
+		}
+	}
+
+	while(wait()!=-1);
+	exit();
+
+}
diff -ruN xv6-public/cpuProcTester.d xv6-public-with-hybrid/cpuProcTester.d
--- xv6-public/cpuProcTester.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/cpuProcTester.d	2022-10-07 18:50:04.096942611 +0530
@@ -0,0 +1,2 @@
+cpuProcTester.o: cpuProcTester.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/cpuProcTester.o and xv6-public-with-hybrid/cpuProcTester.o differ
diff -ruN xv6-public/cpuProcTester.sym xv6-public-with-hybrid/cpuProcTester.sym
--- xv6-public/cpuProcTester.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/cpuProcTester.sym	2022-10-07 18:50:04.204942290 +0530
@@ -0,0 +1,65 @@
+00000000 cpuProcTester.c
+00000000 ulib.c
+00000000 printf.c
+00000510 printint
+00000c74 digits.0
+00000000 umalloc.c
+00000fc4 freep
+00000fc8 base
+00000000 random.c
+00000fe0 mt
+00000fb8 mti
+00000c88 mag01.0
+000001c0 strcpy
+000008f0 sgenrand
+000005c0 printf
+000004c3 thread_exit
+000003e0 memmove
+0000045b mknod
+000002e0 gets
+00000493 getpid
+000007f0 malloc
+000004a3 sleep
+000004f3 get_burst_time
+00000a90 random_at_most
+000004fb getCurrentInfo
+00000423 pipe
+00000433 write
+0000046b fstat
+00000443 kill
+00000483 chdir
+0000044b exec
+0000041b wait
+0000042b read
+00000463 unlink
+0000040b fork
+0000049b sbrk
+000004ab uptime
+00000fbc __bss_start
+00000280 memset
+00000000 main
+000004eb set_burst_time
+000001f0 strcmp
+0000048b dup
+000004db getMaxPid
+00000930 genrand
+000004d3 getNumProc
+000004e3 getProcInfo
+00000350 stat
+00000fbc _edata
+000019a0 _end
+00000fc0 useless
+00000473 link
+00000413 exit
+000003a0 atoi
+000004cb draw
+00000250 strlen
+00000453 open
+000002a0 strchr
+000004b3 thread_create
+00000503 getCurrentPID
+00000ad0 randomrange
+0000047b mkdir
+0000043b close
+000004bb thread_join
+00000760 free
diff -ruN xv6-public/defs.h xv6-public-with-hybrid/defs.h
--- xv6-public/defs.h	2022-09-03 13:42:01.000000000 +0530
+++ xv6-public-with-hybrid/defs.h	2022-10-06 15:12:42.555399849 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -103,6 +104,7 @@
 
 //PAGEBREAK: 16
 // proc.c
+extern int		quant; // hybrid 
 int             cpuid(void);
 void            exit(void);
 int             fork(void);
@@ -120,13 +122,18 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void			new_yield(void);  // hybrid
 
 //thread
 int thread_create(void (*)(void*),void*,void*);
 int thread_join(void);
 int thread_exit(void);
 
+//Process
 
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int,struct processInfo*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
Binary files xv6-public/_Drawtest and xv6-public-with-hybrid/_Drawtest differ
diff -ruN xv6-public/Drawtest.asm xv6-public-with-hybrid/Drawtest.asm
--- xv6-public/Drawtest.asm	2022-09-06 09:47:11.074777000 +0530
+++ xv6-public-with-hybrid/Drawtest.asm	2022-10-07 18:50:02.592947061 +0530
@@ -19,19 +19,19 @@
     static char buf[5000];
     printf(1,"The system call returns %d\n",draw((void*) buf,5000));
   11:	68 88 13 00 00       	push   $0x1388
-  16:	68 80 0a 00 00       	push   $0xa80
+  16:	68 80 0d 00 00       	push   $0xd80
   1b:	e8 3b 03 00 00       	call   35b <draw>
   20:	83 c4 0c             	add    $0xc,%esp
   23:	50                   	push   %eax
-  24:	68 48 07 00 00       	push   $0x748
+  24:	68 a8 09 00 00       	push   $0x9a8
   29:	6a 01                	push   $0x1
-  2b:	e8 f0 03 00 00       	call   420 <printf>
+  2b:	e8 20 04 00 00       	call   450 <printf>
     printf(1,"%s",buf);
   30:	83 c4 0c             	add    $0xc,%esp
-  33:	68 80 0a 00 00       	push   $0xa80
-  38:	68 64 07 00 00       	push   $0x764
+  33:	68 80 0d 00 00       	push   $0xd80
+  38:	68 c4 09 00 00       	push   $0x9c4
   3d:	6a 01                	push   $0x1
-  3f:	e8 dc 03 00 00       	call   420 <printf>
+  3f:	e8 0c 04 00 00       	call   450 <printf>
     exit();
   44:	e8 5a 02 00 00       	call   2a3 <exit>
   49:	66 90                	xchg   %ax,%ax
@@ -583,572 +583,887 @@
  35a:	c3                   	ret    
 
 0000035b <draw>:
+SYSCALL(draw)
  35b:	b8 19 00 00 00       	mov    $0x19,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
- 363:	66 90                	xchg   %ax,%ax
- 365:	66 90                	xchg   %ax,%ax
- 367:	66 90                	xchg   %ax,%ax
- 369:	66 90                	xchg   %ax,%ax
- 36b:	66 90                	xchg   %ax,%ax
- 36d:	66 90                	xchg   %ax,%ax
- 36f:	90                   	nop
 
-00000370 <printint>:
+00000363 <getNumProc>:
+SYSCALL(getNumProc)
+ 363:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 36b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 373:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 37b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 383:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 38b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 393:	b8 20 00 00 00       	mov    $0x20,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	83 ec 3c             	sub    $0x3c,%esp
- 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 37c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 381:	85 d2                	test   %edx,%edx
- 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
- 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 38d:	74 79                	je     408 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 396:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 398:	31 db                	xor    %ebx,%ebx
- 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3a0:	89 c8                	mov    %ecx,%eax
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	89 cf                	mov    %ecx,%edi
- 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3a9:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
- 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3b3:	89 d8                	mov    %ebx,%eax
- 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 28 0a 00 00 	movzbl 0xa28(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3c6:	85 c9                	test   %ecx,%ecx
- 3c8:	74 0c                	je     3d6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3cf:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3dd:	eb 07                	jmp    3e6 <printint+0x76>
- 3df:	90                   	nop
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
     putc(fd, buf[i]);
- 3e0:	0f b6 13             	movzbl (%ebx),%edx
- 3e3:	83 eb 01             	sub    $0x1,%ebx
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3e6:	83 ec 04             	sub    $0x4,%esp
- 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3ec:	6a 01                	push   $0x1
- 3ee:	56                   	push   %esi
- 3ef:	57                   	push   %edi
- 3f0:	e8 ce fe ff ff       	call   2c3 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 9e fe ff ff       	call   2c3 <write>
   while(--i >= 0)
- 3f5:	83 c4 10             	add    $0x10,%esp
- 3f8:	39 de                	cmp    %ebx,%esi
- 3fa:	75 e4                	jne    3e0 <printint+0x70>
-}
- 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ff:	5b                   	pop    %ebx
- 400:	5e                   	pop    %esi
- 401:	5f                   	pop    %edi
- 402:	5d                   	pop    %ebp
- 403:	c3                   	ret    
- 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 40f:	eb 87                	jmp    398 <printint+0x28>
- 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000420 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 429:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 42c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 45c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 42f:	0f b6 13             	movzbl (%ebx),%edx
- 432:	84 d2                	test   %dl,%dl
- 434:	74 6a                	je     4a0 <printf+0x80>
+ 45f:	0f b6 13             	movzbl (%ebx),%edx
+ 462:	84 d2                	test   %dl,%dl
+ 464:	74 6a                	je     4d0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 436:	8d 45 10             	lea    0x10(%ebp),%eax
- 439:	83 c3 01             	add    $0x1,%ebx
+ 466:	8d 45 10             	lea    0x10(%ebp),%eax
+ 469:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 43c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 43f:	31 c9                	xor    %ecx,%ecx
+ 46f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 441:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 444:	eb 36                	jmp    47c <printf+0x5c>
- 446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 44d:	8d 76 00             	lea    0x0(%esi),%esi
- 450:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 474:	eb 36                	jmp    4ac <printf+0x5c>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 453:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 483:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 458:	83 f8 25             	cmp    $0x25,%eax
- 45b:	74 15                	je     472 <printf+0x52>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 15                	je     4a2 <printf+0x52>
   write(fd, &c, 1);
- 45d:	83 ec 04             	sub    $0x4,%esp
- 460:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 463:	6a 01                	push   $0x1
- 465:	57                   	push   %edi
- 466:	56                   	push   %esi
- 467:	e8 57 fe ff ff       	call   2c3 <write>
- 46c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	56                   	push   %esi
+ 497:	e8 27 fe ff ff       	call   2c3 <write>
+ 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 46f:	83 c4 10             	add    $0x10,%esp
+ 49f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 472:	0f b6 13             	movzbl (%ebx),%edx
- 475:	83 c3 01             	add    $0x1,%ebx
- 478:	84 d2                	test   %dl,%dl
- 47a:	74 24                	je     4a0 <printf+0x80>
+ 4a2:	0f b6 13             	movzbl (%ebx),%edx
+ 4a5:	83 c3 01             	add    $0x1,%ebx
+ 4a8:	84 d2                	test   %dl,%dl
+ 4aa:	74 24                	je     4d0 <printf+0x80>
     c = fmt[i] & 0xff;
- 47c:	0f b6 c2             	movzbl %dl,%eax
+ 4ac:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 47f:	85 c9                	test   %ecx,%ecx
- 481:	74 cd                	je     450 <printf+0x30>
+ 4af:	85 c9                	test   %ecx,%ecx
+ 4b1:	74 cd                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 483:	83 f9 25             	cmp    $0x25,%ecx
- 486:	75 ea                	jne    472 <printf+0x52>
+ 4b3:	83 f9 25             	cmp    $0x25,%ecx
+ 4b6:	75 ea                	jne    4a2 <printf+0x52>
       if(c == 'd'){
- 488:	83 f8 25             	cmp    $0x25,%eax
- 48b:	0f 84 07 01 00 00    	je     598 <printf+0x178>
- 491:	83 e8 63             	sub    $0x63,%eax
- 494:	83 f8 15             	cmp    $0x15,%eax
- 497:	77 17                	ja     4b0 <printf+0x90>
- 499:	ff 24 85 70 07 00 00 	jmp    *0x770(,%eax,4)
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
+ 4c1:	83 e8 63             	sub    $0x63,%eax
+ 4c4:	83 f8 15             	cmp    $0x15,%eax
+ 4c7:	77 17                	ja     4e0 <printf+0x90>
+ 4c9:	ff 24 85 d0 09 00 00 	jmp    *0x9d0(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4a3:	5b                   	pop    %ebx
- 4a4:	5e                   	pop    %esi
- 4a5:	5f                   	pop    %edi
- 4a6:	5d                   	pop    %ebp
- 4a7:	c3                   	ret    
- 4a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4af:	90                   	nop
+ 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d3:	5b                   	pop    %ebx
+ 4d4:	5e                   	pop    %esi
+ 4d5:	5f                   	pop    %edi
+ 4d6:	5d                   	pop    %ebp
+ 4d7:	c3                   	ret    
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
   write(fd, &c, 1);
- 4b0:	83 ec 04             	sub    $0x4,%esp
- 4b3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4b6:	6a 01                	push   $0x1
- 4b8:	57                   	push   %edi
- 4b9:	56                   	push   %esi
- 4ba:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4be:	e8 00 fe ff ff       	call   2c3 <write>
+ 4e0:	83 ec 04             	sub    $0x4,%esp
+ 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4e6:	6a 01                	push   $0x1
+ 4e8:	57                   	push   %edi
+ 4e9:	56                   	push   %esi
+ 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ee:	e8 d0 fd ff ff       	call   2c3 <write>
         putc(fd, c);
- 4c3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4c7:	83 c4 0c             	add    $0xc,%esp
- 4ca:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4cd:	6a 01                	push   $0x1
- 4cf:	57                   	push   %edi
- 4d0:	56                   	push   %esi
- 4d1:	e8 ed fd ff ff       	call   2c3 <write>
+ 4f7:	83 c4 0c             	add    $0xc,%esp
+ 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4fd:	6a 01                	push   $0x1
+ 4ff:	57                   	push   %edi
+ 500:	56                   	push   %esi
+ 501:	e8 bd fd ff ff       	call   2c3 <write>
         putc(fd, c);
- 4d6:	83 c4 10             	add    $0x10,%esp
+ 506:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4d9:	31 c9                	xor    %ecx,%ecx
- 4db:	eb 95                	jmp    472 <printf+0x52>
- 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 509:	31 c9                	xor    %ecx,%ecx
+ 50b:	eb 95                	jmp    4a2 <printf+0x52>
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4e0:	83 ec 0c             	sub    $0xc,%esp
- 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4e8:	6a 00                	push   $0x0
- 4ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4ed:	8b 10                	mov    (%eax),%edx
- 4ef:	89 f0                	mov    %esi,%eax
- 4f1:	e8 7a fe ff ff       	call   370 <printint>
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51d:	8b 10                	mov    (%eax),%edx
+ 51f:	89 f0                	mov    %esi,%eax
+ 521:	e8 7a fe ff ff       	call   3a0 <printint>
         ap++;
- 4f6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 4fa:	83 c4 10             	add    $0x10,%esp
+ 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 52a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4fd:	31 c9                	xor    %ecx,%ecx
- 4ff:	e9 6e ff ff ff       	jmp    472 <printf+0x52>
- 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 52d:	31 c9                	xor    %ecx,%ecx
+ 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 508:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 50b:	8b 10                	mov    (%eax),%edx
+ 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53b:	8b 10                	mov    (%eax),%edx
         ap++;
- 50d:	83 c0 04             	add    $0x4,%eax
- 510:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 513:	85 d2                	test   %edx,%edx
- 515:	0f 84 8d 00 00 00    	je     5a8 <printf+0x188>
+ 543:	85 d2                	test   %edx,%edx
+ 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
         while(*s != 0){
- 51b:	0f b6 02             	movzbl (%edx),%eax
+ 54b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 51e:	31 c9                	xor    %ecx,%ecx
+ 54e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 520:	84 c0                	test   %al,%al
- 522:	0f 84 4a ff ff ff    	je     472 <printf+0x52>
- 528:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 52b:	89 d3                	mov    %edx,%ebx
- 52d:	8d 76 00             	lea    0x0(%esi),%esi
+ 550:	84 c0                	test   %al,%al
+ 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
+ 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 55b:	89 d3                	mov    %edx,%ebx
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 530:	83 ec 04             	sub    $0x4,%esp
+ 560:	83 ec 04             	sub    $0x4,%esp
           s++;
- 533:	83 c3 01             	add    $0x1,%ebx
- 536:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 563:	83 c3 01             	add    $0x1,%ebx
+ 566:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 539:	6a 01                	push   $0x1
- 53b:	57                   	push   %edi
- 53c:	56                   	push   %esi
- 53d:	e8 81 fd ff ff       	call   2c3 <write>
+ 569:	6a 01                	push   $0x1
+ 56b:	57                   	push   %edi
+ 56c:	56                   	push   %esi
+ 56d:	e8 51 fd ff ff       	call   2c3 <write>
         while(*s != 0){
- 542:	0f b6 03             	movzbl (%ebx),%eax
- 545:	83 c4 10             	add    $0x10,%esp
- 548:	84 c0                	test   %al,%al
- 54a:	75 e4                	jne    530 <printf+0x110>
+ 572:	0f b6 03             	movzbl (%ebx),%eax
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	84 c0                	test   %al,%al
+ 57a:	75 e4                	jne    560 <printf+0x110>
       state = 0;
- 54c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 54f:	31 c9                	xor    %ecx,%ecx
- 551:	e9 1c ff ff ff       	jmp    472 <printf+0x52>
- 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
+ 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 57f:	31 c9                	xor    %ecx,%ecx
+ 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 560:	83 ec 0c             	sub    $0xc,%esp
- 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 568:	6a 01                	push   $0x1
- 56a:	e9 7b ff ff ff       	jmp    4ea <printf+0xca>
- 56f:	90                   	nop
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
+ 59f:	90                   	nop
         putc(fd, *ap);
- 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 573:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 576:	8b 00                	mov    (%eax),%eax
+ 5a6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 578:	6a 01                	push   $0x1
- 57a:	57                   	push   %edi
- 57b:	56                   	push   %esi
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	57                   	push   %edi
+ 5ab:	56                   	push   %esi
         putc(fd, *ap);
- 57c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 57f:	e8 3f fd ff ff       	call   2c3 <write>
+ 5af:	e8 0f fd ff ff       	call   2c3 <write>
         ap++;
- 584:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 588:	83 c4 10             	add    $0x10,%esp
+ 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5b8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 58b:	31 c9                	xor    %ecx,%ecx
- 58d:	e9 e0 fe ff ff       	jmp    472 <printf+0x52>
- 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5bb:	31 c9                	xor    %ecx,%ecx
+ 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 598:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 59b:	83 ec 04             	sub    $0x4,%esp
- 59e:	e9 2a ff ff ff       	jmp    4cd <printf+0xad>
- 5a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5a7:	90                   	nop
+ 5cb:	83 ec 04             	sub    $0x4,%esp
+ 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
+ 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d7:	90                   	nop
           s = "(null)";
- 5a8:	ba 67 07 00 00       	mov    $0x767,%edx
+ 5d8:	ba c7 09 00 00       	mov    $0x9c7,%edx
         while(*s != 0){
- 5ad:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5b0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5b5:	89 d3                	mov    %edx,%ebx
- 5b7:	e9 74 ff ff ff       	jmp    530 <printf+0x110>
- 5bc:	66 90                	xchg   %ax,%ax
- 5be:	66 90                	xchg   %ax,%ax
+ 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e5:	89 d3                	mov    %edx,%ebx
+ 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005c0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5c0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c1:	a1 08 1e 00 00       	mov    0x1e08,%eax
+ 5f1:	a1 08 21 00 00       	mov    0x2108,%eax
 {
- 5c6:	89 e5                	mov    %esp,%ebp
- 5c8:	57                   	push   %edi
- 5c9:	56                   	push   %esi
- 5ca:	53                   	push   %ebx
- 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5d8:	89 c2                	mov    %eax,%edx
- 5da:	8b 00                	mov    (%eax),%eax
- 5dc:	39 ca                	cmp    %ecx,%edx
- 5de:	73 30                	jae    610 <free+0x50>
- 5e0:	39 c1                	cmp    %eax,%ecx
- 5e2:	72 04                	jb     5e8 <free+0x28>
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 608:	89 c2                	mov    %eax,%edx
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	73 30                	jae    640 <free+0x50>
+ 610:	39 c1                	cmp    %eax,%ecx
+ 612:	72 04                	jb     618 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e4:	39 c2                	cmp    %eax,%edx
- 5e6:	72 f0                	jb     5d8 <free+0x18>
+ 614:	39 c2                	cmp    %eax,%edx
+ 616:	72 f0                	jb     608 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ee:	39 f8                	cmp    %edi,%eax
- 5f0:	74 30                	je     622 <free+0x62>
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	74 30                	je     652 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 5f2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 5f5:	8b 42 04             	mov    0x4(%edx),%eax
- 5f8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5fb:	39 f1                	cmp    %esi,%ecx
- 5fd:	74 3a                	je     639 <free+0x79>
+ 625:	8b 42 04             	mov    0x4(%edx),%eax
+ 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 3a                	je     669 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 5ff:	89 0a                	mov    %ecx,(%edx)
+ 62f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 601:	5b                   	pop    %ebx
+ 631:	5b                   	pop    %ebx
   freep = p;
- 602:	89 15 08 1e 00 00    	mov    %edx,0x1e08
+ 632:	89 15 08 21 00 00    	mov    %edx,0x2108
 }
- 608:	5e                   	pop    %esi
- 609:	5f                   	pop    %edi
- 60a:	5d                   	pop    %ebp
- 60b:	c3                   	ret    
- 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 638:	5e                   	pop    %esi
+ 639:	5f                   	pop    %edi
+ 63a:	5d                   	pop    %ebp
+ 63b:	c3                   	ret    
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 610:	39 c2                	cmp    %eax,%edx
- 612:	72 c4                	jb     5d8 <free+0x18>
- 614:	39 c1                	cmp    %eax,%ecx
- 616:	73 c0                	jae    5d8 <free+0x18>
+ 640:	39 c2                	cmp    %eax,%edx
+ 642:	72 c4                	jb     608 <free+0x18>
+ 644:	39 c1                	cmp    %eax,%ecx
+ 646:	73 c0                	jae    608 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61e:	39 f8                	cmp    %edi,%eax
- 620:	75 d0                	jne    5f2 <free+0x32>
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	75 d0                	jne    622 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 622:	03 70 04             	add    0x4(%eax),%esi
- 625:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 652:	03 70 04             	add    0x4(%eax),%esi
+ 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 628:	8b 02                	mov    (%edx),%eax
- 62a:	8b 00                	mov    (%eax),%eax
- 62c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 658:	8b 02                	mov    (%edx),%eax
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 62f:	8b 42 04             	mov    0x4(%edx),%eax
- 632:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 635:	39 f1                	cmp    %esi,%ecx
- 637:	75 c6                	jne    5ff <free+0x3f>
+ 65f:	8b 42 04             	mov    0x4(%edx),%eax
+ 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 665:	39 f1                	cmp    %esi,%ecx
+ 667:	75 c6                	jne    62f <free+0x3f>
     p->s.size += bp->s.size;
- 639:	03 43 fc             	add    -0x4(%ebx),%eax
+ 669:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 63c:	89 15 08 1e 00 00    	mov    %edx,0x1e08
+ 66c:	89 15 08 21 00 00    	mov    %edx,0x2108
     p->s.size += bp->s.size;
- 642:	89 42 04             	mov    %eax,0x4(%edx)
+ 672:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 645:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 648:	89 0a                	mov    %ecx,(%edx)
+ 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 678:	89 0a                	mov    %ecx,(%edx)
 }
- 64a:	5b                   	pop    %ebx
- 64b:	5e                   	pop    %esi
- 64c:	5f                   	pop    %edi
- 64d:	5d                   	pop    %ebp
- 64e:	c3                   	ret    
- 64f:	90                   	nop
+ 67a:	5b                   	pop    %ebx
+ 67b:	5e                   	pop    %esi
+ 67c:	5f                   	pop    %edi
+ 67d:	5d                   	pop    %ebp
+ 67e:	c3                   	ret    
+ 67f:	90                   	nop
 
-00000650 <malloc>:
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 659:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 65c:	8b 3d 08 1e 00 00    	mov    0x1e08,%edi
+ 68c:	8b 3d 08 21 00 00    	mov    0x2108,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 662:	8d 70 07             	lea    0x7(%eax),%esi
- 665:	c1 ee 03             	shr    $0x3,%esi
- 668:	83 c6 01             	add    $0x1,%esi
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 66b:	85 ff                	test   %edi,%edi
- 66d:	0f 84 9d 00 00 00    	je     710 <malloc+0xc0>
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 673:	8b 17                	mov    (%edi),%edx
+ 6a3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 675:	8b 4a 04             	mov    0x4(%edx),%ecx
- 678:	39 f1                	cmp    %esi,%ecx
- 67a:	73 6a                	jae    6e6 <malloc+0x96>
- 67c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 681:	39 de                	cmp    %ebx,%esi
- 683:	0f 43 de             	cmovae %esi,%ebx
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 6a                	jae    716 <malloc+0x96>
+ 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b1:	39 de                	cmp    %ebx,%esi
+ 6b3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 686:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 68d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 690:	eb 17                	jmp    6a9 <malloc+0x59>
- 692:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 698:	8b 02                	mov    (%edx),%eax
+ 6c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 69a:	8b 48 04             	mov    0x4(%eax),%ecx
- 69d:	39 f1                	cmp    %esi,%ecx
- 69f:	73 4f                	jae    6f0 <malloc+0xa0>
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f1                	cmp    %esi,%ecx
+ 6cf:	73 4f                	jae    720 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6a1:	8b 3d 08 1e 00 00    	mov    0x1e08,%edi
- 6a7:	89 c2                	mov    %eax,%edx
- 6a9:	39 d7                	cmp    %edx,%edi
- 6ab:	75 eb                	jne    698 <malloc+0x48>
+ 6d1:	8b 3d 08 21 00 00    	mov    0x2108,%edi
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	39 d7                	cmp    %edx,%edi
+ 6db:	75 eb                	jne    6c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6ad:	83 ec 0c             	sub    $0xc,%esp
- 6b0:	ff 75 e4             	push   -0x1c(%ebp)
- 6b3:	e8 73 fc ff ff       	call   32b <sbrk>
+ 6dd:	83 ec 0c             	sub    $0xc,%esp
+ 6e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6e3:	e8 43 fc ff ff       	call   32b <sbrk>
   if(p == (char*)-1)
- 6b8:	83 c4 10             	add    $0x10,%esp
- 6bb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6be:	74 1c                	je     6dc <malloc+0x8c>
+ 6e8:	83 c4 10             	add    $0x10,%esp
+ 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ee:	74 1c                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6c0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6c3:	83 ec 0c             	sub    $0xc,%esp
- 6c6:	83 c0 08             	add    $0x8,%eax
- 6c9:	50                   	push   %eax
- 6ca:	e8 f1 fe ff ff       	call   5c0 <free>
+ 6f3:	83 ec 0c             	sub    $0xc,%esp
+ 6f6:	83 c0 08             	add    $0x8,%eax
+ 6f9:	50                   	push   %eax
+ 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
   return freep;
- 6cf:	8b 15 08 1e 00 00    	mov    0x1e08,%edx
+ 6ff:	8b 15 08 21 00 00    	mov    0x2108,%edx
       if((p = morecore(nunits)) == 0)
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	85 d2                	test   %edx,%edx
- 6da:	75 bc                	jne    698 <malloc+0x48>
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 bc                	jne    6c8 <malloc+0x48>
         return 0;
   }
 }
- 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6df:	31 c0                	xor    %eax,%eax
+ 70f:	31 c0                	xor    %eax,%eax
 }
- 6e1:	5b                   	pop    %ebx
- 6e2:	5e                   	pop    %esi
- 6e3:	5f                   	pop    %edi
- 6e4:	5d                   	pop    %ebp
- 6e5:	c3                   	ret    
+ 711:	5b                   	pop    %ebx
+ 712:	5e                   	pop    %esi
+ 713:	5f                   	pop    %edi
+ 714:	5d                   	pop    %ebp
+ 715:	c3                   	ret    
     if(p->s.size >= nunits){
- 6e6:	89 d0                	mov    %edx,%eax
- 6e8:	89 fa                	mov    %edi,%edx
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 716:	89 d0                	mov    %edx,%eax
+ 718:	89 fa                	mov    %edi,%edx
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6f0:	39 ce                	cmp    %ecx,%esi
- 6f2:	74 4c                	je     740 <malloc+0xf0>
+ 720:	39 ce                	cmp    %ecx,%esi
+ 722:	74 4c                	je     770 <malloc+0xf0>
         p->s.size -= nunits;
- 6f4:	29 f1                	sub    %esi,%ecx
- 6f6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 724:	29 f1                	sub    %esi,%ecx
+ 726:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6fc:	89 70 04             	mov    %esi,0x4(%eax)
+ 72c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6ff:	89 15 08 1e 00 00    	mov    %edx,0x1e08
+ 72f:	89 15 08 21 00 00    	mov    %edx,0x2108
 }
- 705:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 708:	83 c0 08             	add    $0x8,%eax
+ 738:	83 c0 08             	add    $0x8,%eax
 }
- 70b:	5b                   	pop    %ebx
- 70c:	5e                   	pop    %esi
- 70d:	5f                   	pop    %edi
- 70e:	5d                   	pop    %ebp
- 70f:	c3                   	ret    
+ 73b:	5b                   	pop    %ebx
+ 73c:	5e                   	pop    %esi
+ 73d:	5f                   	pop    %edi
+ 73e:	5d                   	pop    %ebp
+ 73f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 710:	c7 05 08 1e 00 00 0c 	movl   $0x1e0c,0x1e08
- 717:	1e 00 00 
+ 740:	c7 05 08 21 00 00 0c 	movl   $0x210c,0x2108
+ 747:	21 00 00 
     base.s.size = 0;
- 71a:	bf 0c 1e 00 00       	mov    $0x1e0c,%edi
+ 74a:	bf 0c 21 00 00       	mov    $0x210c,%edi
     base.s.ptr = freep = prevp = &base;
- 71f:	c7 05 0c 1e 00 00 0c 	movl   $0x1e0c,0x1e0c
- 726:	1e 00 00 
+ 74f:	c7 05 0c 21 00 00 0c 	movl   $0x210c,0x210c
+ 756:	21 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 729:	89 fa                	mov    %edi,%edx
+ 759:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 72b:	c7 05 10 1e 00 00 00 	movl   $0x0,0x1e10
- 732:	00 00 00 
+ 75b:	c7 05 10 21 00 00 00 	movl   $0x0,0x2110
+ 762:	00 00 00 
     if(p->s.size >= nunits){
- 735:	e9 42 ff ff ff       	jmp    67c <malloc+0x2c>
- 73a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 740:	8b 08                	mov    (%eax),%ecx
- 742:	89 0a                	mov    %ecx,(%edx)
- 744:	eb b9                	jmp    6ff <malloc+0xaf>
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b9                	jmp    72f <malloc+0xaf>
+ 776:	66 90                	xchg   %ax,%ax
+ 778:	66 90                	xchg   %ax,%ax
+ 77a:	66 90                	xchg   %ax,%ax
+ 77c:	66 90                	xchg   %ax,%ax
+ 77e:	66 90                	xchg   %ax,%ax
+
+00000780 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 780:	55                   	push   %ebp
+ 781:	b8 24 21 00 00       	mov    $0x2124,%eax
+ 786:	89 e5                	mov    %esp,%ebp
+ 788:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 78b:	89 15 20 21 00 00    	mov    %edx,0x2120
+    for (mti=1; mti<N; mti++)
+ 791:	eb 08                	jmp    79b <sgenrand+0x1b>
+ 793:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 797:	90                   	nop
+ 798:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 79b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7a1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7a3:	3d dc 2a 00 00       	cmp    $0x2adc,%eax
+ 7a8:	75 ee                	jne    798 <sgenrand+0x18>
+ 7aa:	c7 05 60 0d 00 00 70 	movl   $0x270,0xd60
+ 7b1:	02 00 00 
+}
+ 7b4:	5d                   	pop    %ebp
+ 7b5:	c3                   	ret    
+ 7b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007c0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7c0:	a1 60 0d 00 00       	mov    0xd60,%eax
+ 7c5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7ca:	7f 3d                	jg     809 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7cc:	8b 0c 85 20 21 00 00 	mov    0x2120(,%eax,4),%ecx
+ 7d3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7d6:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    y ^= TEMPERING_SHIFT_U(y);
+ 7dc:	89 ca                	mov    %ecx,%edx
+ 7de:	c1 ea 0b             	shr    $0xb,%edx
+ 7e1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7e3:	89 d0                	mov    %edx,%eax
+ 7e5:	c1 e0 07             	shl    $0x7,%eax
+ 7e8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7ed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7ef:	89 c2                	mov    %eax,%edx
+ 7f1:	c1 e2 0f             	shl    $0xf,%edx
+ 7f4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 7fa:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 7fc:	89 d0                	mov    %edx,%eax
+ 7fe:	c1 e8 12             	shr    $0x12,%eax
+ 801:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 803:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 808:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 809:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 80e:	0f 84 d4 00 00 00    	je     8e8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 814:	31 c0                	xor    %eax,%eax
+ 816:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 820:	8b 0c 85 20 21 00 00 	mov    0x2120(,%eax,4),%ecx
+ 827:	83 c0 01             	add    $0x1,%eax
+ 82a:	8b 14 85 20 21 00 00 	mov    0x2120(,%eax,4),%edx
+ 831:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 837:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 83d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 83f:	89 d1                	mov    %edx,%ecx
+ 841:	83 e2 01             	and    $0x1,%edx
+ 844:	d1 e9                	shr    %ecx
+ 846:	33 0c 85 50 27 00 00 	xor    0x2750(,%eax,4),%ecx
+ 84d:	33 0c 95 3c 0a 00 00 	xor    0xa3c(,%edx,4),%ecx
+ 854:	89 0c 85 1c 21 00 00 	mov    %ecx,0x211c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 85b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 860:	75 be                	jne    820 <genrand+0x60>
+ 862:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 868:	8b 0c 85 20 21 00 00 	mov    0x2120(,%eax,4),%ecx
+ 86f:	83 c0 01             	add    $0x1,%eax
+ 872:	8b 14 85 20 21 00 00 	mov    0x2120(,%eax,4),%edx
+ 879:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 87f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 885:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 887:	89 d1                	mov    %edx,%ecx
+ 889:	83 e2 01             	and    $0x1,%edx
+ 88c:	d1 e9                	shr    %ecx
+ 88e:	33 0c 85 90 1d 00 00 	xor    0x1d90(,%eax,4),%ecx
+ 895:	33 0c 95 3c 0a 00 00 	xor    0xa3c(,%edx,4),%ecx
+ 89c:	89 0c 85 1c 21 00 00 	mov    %ecx,0x211c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8a3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8a8:	75 be                	jne    868 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8aa:	8b 0d 20 21 00 00    	mov    0x2120,%ecx
+ 8b0:	a1 dc 2a 00 00       	mov    0x2adc,%eax
+ 8b5:	89 ca                	mov    %ecx,%edx
+ 8b7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8bc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8c2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8c4:	89 c2                	mov    %eax,%edx
+ 8c6:	83 e0 01             	and    $0x1,%eax
+ 8c9:	d1 ea                	shr    %edx
+ 8cb:	33 15 50 27 00 00    	xor    0x2750,%edx
+ 8d1:	33 14 85 3c 0a 00 00 	xor    0xa3c(,%eax,4),%edx
+ 8d8:	89 15 dc 2a 00 00    	mov    %edx,0x2adc
+ 8de:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8e3:	e9 ee fe ff ff       	jmp    7d6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8e8:	b8 24 21 00 00       	mov    $0x2124,%eax
+ 8ed:	b9 dc 2a 00 00       	mov    $0x2adc,%ecx
+ 8f2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 8f7:	c7 05 20 21 00 00 05 	movl   $0x1105,0x2120
+ 8fe:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 901:	eb 08                	jmp    90b <genrand+0x14b>
+ 903:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 907:	90                   	nop
+ 908:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 90b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 911:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 913:	39 c1                	cmp    %eax,%ecx
+ 915:	75 f1                	jne    908 <genrand+0x148>
+ 917:	e9 f8 fe ff ff       	jmp    814 <genrand+0x54>
+ 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 920:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 921:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 923:	89 e5                	mov    %esp,%ebp
+ 925:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 926:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 929:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 92a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 92f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 932:	89 d8                	mov    %ebx,%eax
+ 934:	f7 f1                	div    %ecx
+ 936:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 938:	29 d3                	sub    %edx,%ebx
+ 93a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 940:	e8 7b fe ff ff       	call   7c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 945:	39 d8                	cmp    %ebx,%eax
+ 947:	73 f7                	jae    940 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 949:	31 d2                	xor    %edx,%edx
+}
+ 94b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 94c:	f7 f6                	div    %esi
+}
+ 94e:	5e                   	pop    %esi
+ 94f:	5d                   	pop    %ebp
+ 950:	c3                   	ret    
+ 951:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
+
+00000960 <randomrange>:
+
+int randomrange(int low, int high){
+ 960:	55                   	push   %ebp
+ 961:	89 e5                	mov    %esp,%ebp
+ 963:	57                   	push   %edi
+ 964:	56                   	push   %esi
+ 965:	53                   	push   %ebx
+ 966:	83 ec 0c             	sub    $0xc,%esp
+ 969:	8b 75 08             	mov    0x8(%ebp),%esi
+ 96c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 96f:	39 f0                	cmp    %esi,%eax
+ 971:	7d 06                	jge    979 <randomrange+0x19>
+ 973:	89 f2                	mov    %esi,%edx
+ 975:	89 c6                	mov    %eax,%esi
+ 977:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 979:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 97b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 980:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 982:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 985:	89 d8                	mov    %ebx,%eax
+ 987:	f7 f1                	div    %ecx
+ 989:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 98b:	29 d3                	sub    %edx,%ebx
+ 98d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 990:	e8 2b fe ff ff       	call   7c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 995:	39 d8                	cmp    %ebx,%eax
+ 997:	73 f7                	jae    990 <randomrange+0x30>
+  return x/bin_size;
+ 999:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 99b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 99e:	f7 f7                	div    %edi
+}
+ 9a0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9a1:	01 f0                	add    %esi,%eax
+}
+ 9a3:	5e                   	pop    %esi
+ 9a4:	5f                   	pop    %edi
+ 9a5:	5d                   	pop    %ebp
+ 9a6:	c3                   	ret    
diff -ruN xv6-public/Drawtest.d xv6-public-with-hybrid/Drawtest.d
--- xv6-public/Drawtest.d	2022-09-06 09:47:11.054757000 +0530
+++ xv6-public-with-hybrid/Drawtest.d	2022-10-07 18:50:02.524947262 +0530
@@ -1 +1,2 @@
-Drawtest.o: Drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h
+Drawtest.o: Drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/Drawtest.o and xv6-public-with-hybrid/Drawtest.o differ
diff -ruN xv6-public/Drawtest.sym xv6-public-with-hybrid/Drawtest.sym
--- xv6-public/Drawtest.sym	2022-09-06 09:47:11.082785000 +0530
+++ xv6-public-with-hybrid/Drawtest.sym	2022-10-07 18:50:02.600947038 +0530
@@ -1,21 +1,29 @@
 00000000 Drawtest.c
-00000a80 buf.0
+00000d80 buf.0
 00000000 ulib.c
 00000000 printf.c
-00000370 printint
-000007c8 digits.0
+000003a0 printint
+00000a28 digits.0
 00000000 umalloc.c
-00001e08 freep
-00001e0c base
+00002108 freep
+0000210c base
+00000000 random.c
+00002120 mt
+00000d60 mti
+00000a3c mag01.0
 00000050 strcpy
-00000420 printf
+00000780 sgenrand
+00000450 printf
 00000353 thread_exit
 00000270 memmove
 000002eb mknod
 00000170 gets
 00000323 getpid
-00000650 malloc
+00000680 malloc
 00000333 sleep
+00000383 get_burst_time
+00000920 random_at_most
+0000038b getCurrentInfo
 000002b3 pipe
 000002c3 write
 000002fb fstat
@@ -28,14 +36,19 @@
 0000029b fork
 0000032b sbrk
 0000033b uptime
-00000a70 __bss_start
+00000d64 __bss_start
 00000110 memset
 00000000 main
+0000037b set_burst_time
 00000080 strcmp
 0000031b dup
+0000036b getMaxPid
+000007c0 genrand
+00000363 getNumProc
+00000373 getProcInfo
 000001e0 stat
-00000a70 _edata
-00001e14 _end
+00000d64 _edata
+00002ae0 _end
 00000303 link
 000002a3 exit
 00000230 atoi
@@ -44,7 +57,9 @@
 000002e3 open
 00000130 strchr
 00000343 thread_create
+00000393 getCurrentPID
+00000960 randomrange
 0000030b mkdir
 000002cb close
 0000034b thread_join
-000005c0 free
+000005f0 free
Binary files xv6-public/_echo and xv6-public-with-hybrid/_echo differ
diff -ruN xv6-public/echo.asm xv6-public-with-hybrid/echo.asm
--- xv6-public/echo.asm	2022-09-06 09:47:09.454039000 +0530
+++ xv6-public-with-hybrid/echo.asm	2022-10-07 18:49:59.120957221 +0530
@@ -35,21 +35,21 @@
   2a:	39 f3                	cmp    %esi,%ebx
   2c:	74 22                	je     50 <main+0x50>
   2e:	66 90                	xchg   %ax,%ax
-  30:	68 68 07 00 00       	push   $0x768
+  30:	68 c8 09 00 00       	push   $0x9c8
   35:	83 c3 01             	add    $0x1,%ebx
   38:	50                   	push   %eax
-  39:	68 6a 07 00 00       	push   $0x76a
+  39:	68 ca 09 00 00       	push   $0x9ca
   3e:	6a 01                	push   $0x1
-  40:	e8 fb 03 00 00       	call   440 <printf>
+  40:	e8 2b 04 00 00       	call   470 <printf>
   45:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
   49:	83 c4 10             	add    $0x10,%esp
   4c:	39 f3                	cmp    %esi,%ebx
   4e:	75 e0                	jne    30 <main+0x30>
-  50:	68 6f 07 00 00       	push   $0x76f
+  50:	68 cf 09 00 00       	push   $0x9cf
   55:	50                   	push   %eax
-  56:	68 6a 07 00 00       	push   $0x76a
+  56:	68 ca 09 00 00       	push   $0x9ca
   5b:	6a 01                	push   $0x1
-  5d:	e8 de 03 00 00       	call   440 <printf>
+  5d:	e8 0e 04 00 00       	call   470 <printf>
   62:	83 c4 10             	add    $0x10,%esp
   exit();
   65:	e8 59 02 00 00       	call   2c3 <exit>
@@ -601,572 +601,887 @@
  37a:	c3                   	ret    
 
 0000037b <draw>:
+SYSCALL(draw)
  37b:	b8 19 00 00 00       	mov    $0x19,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
 
-00000390 <printint>:
+00000383 <getNumProc>:
+SYSCALL(getNumProc)
+ 383:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 38b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 393:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 39b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3a3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3ab:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 3b3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
+ 3cc:	89 d1                	mov    %edx,%ecx
 {
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
     neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3b6:	f7 d9                	neg    %ecx
+ 3e6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 d0 07 00 00 	movzbl 0x7d0(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 30 0a 00 00 	movzbl 0xa30(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
   if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
     buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
+ 41f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
     putc(fd, buf[i]);
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ce fe ff ff       	call   2e3 <write>
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 9e fe ff ff       	call   2e3 <write>
   while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
-}
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
 
-00000440 <printf>:
+00000470 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 440:	55                   	push   %ebp
- 441:	89 e5                	mov    %esp,%ebp
- 443:	57                   	push   %edi
- 444:	56                   	push   %esi
- 445:	53                   	push   %ebx
- 446:	83 ec 2c             	sub    $0x2c,%esp
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 449:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 479:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 44c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 47c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 44f:	0f b6 13             	movzbl (%ebx),%edx
- 452:	84 d2                	test   %dl,%dl
- 454:	74 6a                	je     4c0 <printf+0x80>
+ 47f:	0f b6 13             	movzbl (%ebx),%edx
+ 482:	84 d2                	test   %dl,%dl
+ 484:	74 6a                	je     4f0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 456:	8d 45 10             	lea    0x10(%ebp),%eax
- 459:	83 c3 01             	add    $0x1,%ebx
+ 486:	8d 45 10             	lea    0x10(%ebp),%eax
+ 489:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 45c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 48c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 45f:	31 c9                	xor    %ecx,%ecx
+ 48f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 461:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 464:	eb 36                	jmp    49c <printf+0x5c>
- 466:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 46d:	8d 76 00             	lea    0x0(%esi),%esi
- 470:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 491:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 494:	eb 36                	jmp    4cc <printf+0x5c>
+ 496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4a0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 473:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 4a3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 15                	je     492 <printf+0x52>
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 15                	je     4c2 <printf+0x52>
   write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	56                   	push   %esi
- 487:	e8 57 fe ff ff       	call   2e3 <write>
- 48c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	56                   	push   %esi
+ 4b7:	e8 27 fe ff ff       	call   2e3 <write>
+ 4bc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 48f:	83 c4 10             	add    $0x10,%esp
+ 4bf:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 492:	0f b6 13             	movzbl (%ebx),%edx
- 495:	83 c3 01             	add    $0x1,%ebx
- 498:	84 d2                	test   %dl,%dl
- 49a:	74 24                	je     4c0 <printf+0x80>
+ 4c2:	0f b6 13             	movzbl (%ebx),%edx
+ 4c5:	83 c3 01             	add    $0x1,%ebx
+ 4c8:	84 d2                	test   %dl,%dl
+ 4ca:	74 24                	je     4f0 <printf+0x80>
     c = fmt[i] & 0xff;
- 49c:	0f b6 c2             	movzbl %dl,%eax
+ 4cc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 49f:	85 c9                	test   %ecx,%ecx
- 4a1:	74 cd                	je     470 <printf+0x30>
+ 4cf:	85 c9                	test   %ecx,%ecx
+ 4d1:	74 cd                	je     4a0 <printf+0x30>
       }
     } else if(state == '%'){
- 4a3:	83 f9 25             	cmp    $0x25,%ecx
- 4a6:	75 ea                	jne    492 <printf+0x52>
+ 4d3:	83 f9 25             	cmp    $0x25,%ecx
+ 4d6:	75 ea                	jne    4c2 <printf+0x52>
       if(c == 'd'){
- 4a8:	83 f8 25             	cmp    $0x25,%eax
- 4ab:	0f 84 07 01 00 00    	je     5b8 <printf+0x178>
- 4b1:	83 e8 63             	sub    $0x63,%eax
- 4b4:	83 f8 15             	cmp    $0x15,%eax
- 4b7:	77 17                	ja     4d0 <printf+0x90>
- 4b9:	ff 24 85 78 07 00 00 	jmp    *0x778(,%eax,4)
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	0f 84 07 01 00 00    	je     5e8 <printf+0x178>
+ 4e1:	83 e8 63             	sub    $0x63,%eax
+ 4e4:	83 f8 15             	cmp    $0x15,%eax
+ 4e7:	77 17                	ja     500 <printf+0x90>
+ 4e9:	ff 24 85 d8 09 00 00 	jmp    *0x9d8(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4c3:	5b                   	pop    %ebx
- 4c4:	5e                   	pop    %esi
- 4c5:	5f                   	pop    %edi
- 4c6:	5d                   	pop    %ebp
- 4c7:	c3                   	ret    
- 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4cf:	90                   	nop
+ 4f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f3:	5b                   	pop    %ebx
+ 4f4:	5e                   	pop    %esi
+ 4f5:	5f                   	pop    %edi
+ 4f6:	5d                   	pop    %ebp
+ 4f7:	c3                   	ret    
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
   write(fd, &c, 1);
- 4d0:	83 ec 04             	sub    $0x4,%esp
- 4d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4d6:	6a 01                	push   $0x1
- 4d8:	57                   	push   %edi
- 4d9:	56                   	push   %esi
- 4da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4de:	e8 00 fe ff ff       	call   2e3 <write>
+ 500:	83 ec 04             	sub    $0x4,%esp
+ 503:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 506:	6a 01                	push   $0x1
+ 508:	57                   	push   %edi
+ 509:	56                   	push   %esi
+ 50a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 50e:	e8 d0 fd ff ff       	call   2e3 <write>
         putc(fd, c);
- 4e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 513:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4e7:	83 c4 0c             	add    $0xc,%esp
- 4ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4ed:	6a 01                	push   $0x1
- 4ef:	57                   	push   %edi
- 4f0:	56                   	push   %esi
- 4f1:	e8 ed fd ff ff       	call   2e3 <write>
+ 517:	83 c4 0c             	add    $0xc,%esp
+ 51a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 51d:	6a 01                	push   $0x1
+ 51f:	57                   	push   %edi
+ 520:	56                   	push   %esi
+ 521:	e8 bd fd ff ff       	call   2e3 <write>
         putc(fd, c);
- 4f6:	83 c4 10             	add    $0x10,%esp
+ 526:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4f9:	31 c9                	xor    %ecx,%ecx
- 4fb:	eb 95                	jmp    492 <printf+0x52>
- 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	31 c9                	xor    %ecx,%ecx
+ 52b:	eb 95                	jmp    4c2 <printf+0x52>
+ 52d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 500:	83 ec 0c             	sub    $0xc,%esp
- 503:	b9 10 00 00 00       	mov    $0x10,%ecx
- 508:	6a 00                	push   $0x0
- 50a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 50d:	8b 10                	mov    (%eax),%edx
- 50f:	89 f0                	mov    %esi,%eax
- 511:	e8 7a fe ff ff       	call   390 <printint>
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53d:	8b 10                	mov    (%eax),%edx
+ 53f:	89 f0                	mov    %esi,%eax
+ 541:	e8 7a fe ff ff       	call   3c0 <printint>
         ap++;
- 516:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 51a:	83 c4 10             	add    $0x10,%esp
+ 546:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 54a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 51d:	31 c9                	xor    %ecx,%ecx
- 51f:	e9 6e ff ff ff       	jmp    492 <printf+0x52>
- 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	31 c9                	xor    %ecx,%ecx
+ 54f:	e9 6e ff ff ff       	jmp    4c2 <printf+0x52>
+ 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 528:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 52b:	8b 10                	mov    (%eax),%edx
+ 558:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 55b:	8b 10                	mov    (%eax),%edx
         ap++;
- 52d:	83 c0 04             	add    $0x4,%eax
- 530:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 55d:	83 c0 04             	add    $0x4,%eax
+ 560:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 533:	85 d2                	test   %edx,%edx
- 535:	0f 84 8d 00 00 00    	je     5c8 <printf+0x188>
+ 563:	85 d2                	test   %edx,%edx
+ 565:	0f 84 8d 00 00 00    	je     5f8 <printf+0x188>
         while(*s != 0){
- 53b:	0f b6 02             	movzbl (%edx),%eax
+ 56b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 53e:	31 c9                	xor    %ecx,%ecx
+ 56e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 540:	84 c0                	test   %al,%al
- 542:	0f 84 4a ff ff ff    	je     492 <printf+0x52>
- 548:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 54b:	89 d3                	mov    %edx,%ebx
- 54d:	8d 76 00             	lea    0x0(%esi),%esi
+ 570:	84 c0                	test   %al,%al
+ 572:	0f 84 4a ff ff ff    	je     4c2 <printf+0x52>
+ 578:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 57b:	89 d3                	mov    %edx,%ebx
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 550:	83 ec 04             	sub    $0x4,%esp
+ 580:	83 ec 04             	sub    $0x4,%esp
           s++;
- 553:	83 c3 01             	add    $0x1,%ebx
- 556:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 583:	83 c3 01             	add    $0x1,%ebx
+ 586:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 559:	6a 01                	push   $0x1
- 55b:	57                   	push   %edi
- 55c:	56                   	push   %esi
- 55d:	e8 81 fd ff ff       	call   2e3 <write>
+ 589:	6a 01                	push   $0x1
+ 58b:	57                   	push   %edi
+ 58c:	56                   	push   %esi
+ 58d:	e8 51 fd ff ff       	call   2e3 <write>
         while(*s != 0){
- 562:	0f b6 03             	movzbl (%ebx),%eax
- 565:	83 c4 10             	add    $0x10,%esp
- 568:	84 c0                	test   %al,%al
- 56a:	75 e4                	jne    550 <printf+0x110>
+ 592:	0f b6 03             	movzbl (%ebx),%eax
+ 595:	83 c4 10             	add    $0x10,%esp
+ 598:	84 c0                	test   %al,%al
+ 59a:	75 e4                	jne    580 <printf+0x110>
       state = 0;
- 56c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 56f:	31 c9                	xor    %ecx,%ecx
- 571:	e9 1c ff ff ff       	jmp    492 <printf+0x52>
- 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 59c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 59f:	31 c9                	xor    %ecx,%ecx
+ 5a1:	e9 1c ff ff ff       	jmp    4c2 <printf+0x52>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 580:	83 ec 0c             	sub    $0xc,%esp
- 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 588:	6a 01                	push   $0x1
- 58a:	e9 7b ff ff ff       	jmp    50a <printf+0xca>
- 58f:	90                   	nop
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	e9 7b ff ff ff       	jmp    53a <printf+0xca>
+ 5bf:	90                   	nop
         putc(fd, *ap);
- 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
+ 5c3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 596:	8b 00                	mov    (%eax),%eax
+ 5c6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 598:	6a 01                	push   $0x1
- 59a:	57                   	push   %edi
- 59b:	56                   	push   %esi
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	57                   	push   %edi
+ 5cb:	56                   	push   %esi
         putc(fd, *ap);
- 59c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5cc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 59f:	e8 3f fd ff ff       	call   2e3 <write>
+ 5cf:	e8 0f fd ff ff       	call   2e3 <write>
         ap++;
- 5a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 5a8:	83 c4 10             	add    $0x10,%esp
+ 5d4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5d8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5ab:	31 c9                	xor    %ecx,%ecx
- 5ad:	e9 e0 fe ff ff       	jmp    492 <printf+0x52>
- 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5db:	31 c9                	xor    %ecx,%ecx
+ 5dd:	e9 e0 fe ff ff       	jmp    4c2 <printf+0x52>
+ 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5e8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5bb:	83 ec 04             	sub    $0x4,%esp
- 5be:	e9 2a ff ff ff       	jmp    4ed <printf+0xad>
- 5c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5c7:	90                   	nop
+ 5eb:	83 ec 04             	sub    $0x4,%esp
+ 5ee:	e9 2a ff ff ff       	jmp    51d <printf+0xad>
+ 5f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5f7:	90                   	nop
           s = "(null)";
- 5c8:	ba 71 07 00 00       	mov    $0x771,%edx
+ 5f8:	ba d1 09 00 00       	mov    $0x9d1,%edx
         while(*s != 0){
- 5cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5d0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d5:	89 d3                	mov    %edx,%ebx
- 5d7:	e9 74 ff ff ff       	jmp    550 <printf+0x110>
- 5dc:	66 90                	xchg   %ax,%ax
- 5de:	66 90                	xchg   %ax,%ax
+ 5fd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 600:	b8 28 00 00 00       	mov    $0x28,%eax
+ 605:	89 d3                	mov    %edx,%ebx
+ 607:	e9 74 ff ff ff       	jmp    580 <printf+0x110>
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
 
-000005e0 <free>:
+00000610 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5e0:	55                   	push   %ebp
+ 610:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 611:	a1 80 0d 00 00       	mov    0xd80,%eax
 {
- 5e6:	89 e5                	mov    %esp,%ebp
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	53                   	push   %ebx
- 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5f8:	89 c2                	mov    %eax,%edx
- 5fa:	8b 00                	mov    (%eax),%eax
- 5fc:	39 ca                	cmp    %ecx,%edx
- 5fe:	73 30                	jae    630 <free+0x50>
- 600:	39 c1                	cmp    %eax,%ecx
- 602:	72 04                	jb     608 <free+0x28>
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 628:	89 c2                	mov    %eax,%edx
+ 62a:	8b 00                	mov    (%eax),%eax
+ 62c:	39 ca                	cmp    %ecx,%edx
+ 62e:	73 30                	jae    660 <free+0x50>
+ 630:	39 c1                	cmp    %eax,%ecx
+ 632:	72 04                	jb     638 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 604:	39 c2                	cmp    %eax,%edx
- 606:	72 f0                	jb     5f8 <free+0x18>
+ 634:	39 c2                	cmp    %eax,%edx
+ 636:	72 f0                	jb     628 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 60e:	39 f8                	cmp    %edi,%eax
- 610:	74 30                	je     642 <free+0x62>
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 f8                	cmp    %edi,%eax
+ 640:	74 30                	je     672 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 612:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 642:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 615:	8b 42 04             	mov    0x4(%edx),%eax
- 618:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 61b:	39 f1                	cmp    %esi,%ecx
- 61d:	74 3a                	je     659 <free+0x79>
+ 645:	8b 42 04             	mov    0x4(%edx),%eax
+ 648:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 3a                	je     689 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 61f:	89 0a                	mov    %ecx,(%edx)
+ 64f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 621:	5b                   	pop    %ebx
+ 651:	5b                   	pop    %ebx
   freep = p;
- 622:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 652:	89 15 80 0d 00 00    	mov    %edx,0xd80
 }
- 628:	5e                   	pop    %esi
- 629:	5f                   	pop    %edi
- 62a:	5d                   	pop    %ebp
- 62b:	c3                   	ret    
- 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 630:	39 c2                	cmp    %eax,%edx
- 632:	72 c4                	jb     5f8 <free+0x18>
- 634:	39 c1                	cmp    %eax,%ecx
- 636:	73 c0                	jae    5f8 <free+0x18>
+ 660:	39 c2                	cmp    %eax,%edx
+ 662:	72 c4                	jb     628 <free+0x18>
+ 664:	39 c1                	cmp    %eax,%ecx
+ 666:	73 c0                	jae    628 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63e:	39 f8                	cmp    %edi,%eax
- 640:	75 d0                	jne    612 <free+0x32>
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 f8                	cmp    %edi,%eax
+ 670:	75 d0                	jne    642 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 642:	03 70 04             	add    0x4(%eax),%esi
- 645:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 672:	03 70 04             	add    0x4(%eax),%esi
+ 675:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 648:	8b 02                	mov    (%edx),%eax
- 64a:	8b 00                	mov    (%eax),%eax
- 64c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 678:	8b 02                	mov    (%edx),%eax
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 64f:	8b 42 04             	mov    0x4(%edx),%eax
- 652:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 655:	39 f1                	cmp    %esi,%ecx
- 657:	75 c6                	jne    61f <free+0x3f>
+ 67f:	8b 42 04             	mov    0x4(%edx),%eax
+ 682:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 685:	39 f1                	cmp    %esi,%ecx
+ 687:	75 c6                	jne    64f <free+0x3f>
     p->s.size += bp->s.size;
- 659:	03 43 fc             	add    -0x4(%ebx),%eax
+ 689:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 65c:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 68c:	89 15 80 0d 00 00    	mov    %edx,0xd80
     p->s.size += bp->s.size;
- 662:	89 42 04             	mov    %eax,0x4(%edx)
+ 692:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 665:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 668:	89 0a                	mov    %ecx,(%edx)
+ 695:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 698:	89 0a                	mov    %ecx,(%edx)
 }
- 66a:	5b                   	pop    %ebx
- 66b:	5e                   	pop    %esi
- 66c:	5f                   	pop    %edi
- 66d:	5d                   	pop    %ebp
- 66e:	c3                   	ret    
- 66f:	90                   	nop
+ 69a:	5b                   	pop    %ebx
+ 69b:	5e                   	pop    %esi
+ 69c:	5f                   	pop    %edi
+ 69d:	5d                   	pop    %ebp
+ 69e:	c3                   	ret    
+ 69f:	90                   	nop
 
-00000670 <malloc>:
+000006a0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 1c             	sub    $0x1c,%esp
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 679:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 67c:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6ac:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 682:	8d 70 07             	lea    0x7(%eax),%esi
- 685:	c1 ee 03             	shr    $0x3,%esi
- 688:	83 c6 01             	add    $0x1,%esi
+ 6b2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b5:	c1 ee 03             	shr    $0x3,%esi
+ 6b8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 68b:	85 ff                	test   %edi,%edi
- 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
+ 6bb:	85 ff                	test   %edi,%edi
+ 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 693:	8b 17                	mov    (%edi),%edx
+ 6c3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 695:	8b 4a 04             	mov    0x4(%edx),%ecx
- 698:	39 f1                	cmp    %esi,%ecx
- 69a:	73 6a                	jae    706 <malloc+0x96>
- 69c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6a1:	39 de                	cmp    %ebx,%esi
- 6a3:	0f 43 de             	cmovae %esi,%ebx
+ 6c5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c8:	39 f1                	cmp    %esi,%ecx
+ 6ca:	73 6a                	jae    736 <malloc+0x96>
+ 6cc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d1:	39 de                	cmp    %ebx,%esi
+ 6d3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 6ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6b0:	eb 17                	jmp    6c9 <malloc+0x59>
- 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6d6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6e0:	eb 17                	jmp    6f9 <malloc+0x59>
+ 6e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6b8:	8b 02                	mov    (%edx),%eax
+ 6e8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
- 6bd:	39 f1                	cmp    %esi,%ecx
- 6bf:	73 4f                	jae    710 <malloc+0xa0>
+ 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ed:	39 f1                	cmp    %esi,%ecx
+ 6ef:	73 4f                	jae    740 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6c1:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
- 6c7:	89 c2                	mov    %eax,%edx
- 6c9:	39 d7                	cmp    %edx,%edi
- 6cb:	75 eb                	jne    6b8 <malloc+0x48>
+ 6f1:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 6f7:	89 c2                	mov    %eax,%edx
+ 6f9:	39 d7                	cmp    %edx,%edi
+ 6fb:	75 eb                	jne    6e8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6cd:	83 ec 0c             	sub    $0xc,%esp
- 6d0:	ff 75 e4             	push   -0x1c(%ebp)
- 6d3:	e8 73 fc ff ff       	call   34b <sbrk>
+ 6fd:	83 ec 0c             	sub    $0xc,%esp
+ 700:	ff 75 e4             	push   -0x1c(%ebp)
+ 703:	e8 43 fc ff ff       	call   34b <sbrk>
   if(p == (char*)-1)
- 6d8:	83 c4 10             	add    $0x10,%esp
- 6db:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6de:	74 1c                	je     6fc <malloc+0x8c>
+ 708:	83 c4 10             	add    $0x10,%esp
+ 70b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 70e:	74 1c                	je     72c <malloc+0x8c>
   hp->s.size = nu;
- 6e0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 710:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6e3:	83 ec 0c             	sub    $0xc,%esp
- 6e6:	83 c0 08             	add    $0x8,%eax
- 6e9:	50                   	push   %eax
- 6ea:	e8 f1 fe ff ff       	call   5e0 <free>
+ 713:	83 ec 0c             	sub    $0xc,%esp
+ 716:	83 c0 08             	add    $0x8,%eax
+ 719:	50                   	push   %eax
+ 71a:	e8 f1 fe ff ff       	call   610 <free>
   return freep;
- 6ef:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+ 71f:	8b 15 80 0d 00 00    	mov    0xd80,%edx
       if((p = morecore(nunits)) == 0)
- 6f5:	83 c4 10             	add    $0x10,%esp
- 6f8:	85 d2                	test   %edx,%edx
- 6fa:	75 bc                	jne    6b8 <malloc+0x48>
+ 725:	83 c4 10             	add    $0x10,%esp
+ 728:	85 d2                	test   %edx,%edx
+ 72a:	75 bc                	jne    6e8 <malloc+0x48>
         return 0;
   }
 }
- 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6ff:	31 c0                	xor    %eax,%eax
+ 72f:	31 c0                	xor    %eax,%eax
 }
- 701:	5b                   	pop    %ebx
- 702:	5e                   	pop    %esi
- 703:	5f                   	pop    %edi
- 704:	5d                   	pop    %ebp
- 705:	c3                   	ret    
+ 731:	5b                   	pop    %ebx
+ 732:	5e                   	pop    %esi
+ 733:	5f                   	pop    %edi
+ 734:	5d                   	pop    %ebp
+ 735:	c3                   	ret    
     if(p->s.size >= nunits){
- 706:	89 d0                	mov    %edx,%eax
- 708:	89 fa                	mov    %edi,%edx
- 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 736:	89 d0                	mov    %edx,%eax
+ 738:	89 fa                	mov    %edi,%edx
+ 73a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 710:	39 ce                	cmp    %ecx,%esi
- 712:	74 4c                	je     760 <malloc+0xf0>
+ 740:	39 ce                	cmp    %ecx,%esi
+ 742:	74 4c                	je     790 <malloc+0xf0>
         p->s.size -= nunits;
- 714:	29 f1                	sub    %esi,%ecx
- 716:	89 48 04             	mov    %ecx,0x4(%eax)
+ 744:	29 f1                	sub    %esi,%ecx
+ 746:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 719:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 749:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 71c:	89 70 04             	mov    %esi,0x4(%eax)
+ 74c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 71f:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 74f:	89 15 80 0d 00 00    	mov    %edx,0xd80
 }
- 725:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 755:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 728:	83 c0 08             	add    $0x8,%eax
+ 758:	83 c0 08             	add    $0x8,%eax
 }
- 72b:	5b                   	pop    %ebx
- 72c:	5e                   	pop    %esi
- 72d:	5f                   	pop    %edi
- 72e:	5d                   	pop    %ebp
- 72f:	c3                   	ret    
+ 75b:	5b                   	pop    %ebx
+ 75c:	5e                   	pop    %esi
+ 75d:	5f                   	pop    %edi
+ 75e:	5d                   	pop    %ebp
+ 75f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 730:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
- 737:	0a 00 00 
+ 760:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 767:	0d 00 00 
     base.s.size = 0;
- 73a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+ 76a:	bf 84 0d 00 00       	mov    $0xd84,%edi
     base.s.ptr = freep = prevp = &base;
- 73f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
- 746:	0a 00 00 
+ 76f:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 776:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 749:	89 fa                	mov    %edi,%edx
+ 779:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 74b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
- 752:	00 00 00 
+ 77b:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
+ 782:	00 00 00 
     if(p->s.size >= nunits){
- 755:	e9 42 ff ff ff       	jmp    69c <malloc+0x2c>
- 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 785:	e9 42 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 760:	8b 08                	mov    (%eax),%ecx
- 762:	89 0a                	mov    %ecx,(%edx)
- 764:	eb b9                	jmp    71f <malloc+0xaf>
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b9                	jmp    74f <malloc+0xaf>
+ 796:	66 90                	xchg   %ax,%ax
+ 798:	66 90                	xchg   %ax,%ax
+ 79a:	66 90                	xchg   %ax,%ax
+ 79c:	66 90                	xchg   %ax,%ax
+ 79e:	66 90                	xchg   %ax,%ax
+
+000007a0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7a0:	55                   	push   %ebp
+ 7a1:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 7a6:	89 e5                	mov    %esp,%ebp
+ 7a8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7ab:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    for (mti=1; mti<N; mti++)
+ 7b1:	eb 08                	jmp    7bb <sgenrand+0x1b>
+ 7b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7b7:	90                   	nop
+ 7b8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7bb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7c1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7c3:	3d 5c 17 00 00       	cmp    $0x175c,%eax
+ 7c8:	75 ee                	jne    7b8 <sgenrand+0x18>
+ 7ca:	c7 05 74 0d 00 00 70 	movl   $0x270,0xd74
+ 7d1:	02 00 00 
+}
+ 7d4:	5d                   	pop    %ebp
+ 7d5:	c3                   	ret    
+ 7d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007e0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7e0:	a1 74 0d 00 00       	mov    0xd74,%eax
+ 7e5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7ea:	7f 3d                	jg     829 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ec:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 7f3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7f6:	89 15 74 0d 00 00    	mov    %edx,0xd74
+    y ^= TEMPERING_SHIFT_U(y);
+ 7fc:	89 ca                	mov    %ecx,%edx
+ 7fe:	c1 ea 0b             	shr    $0xb,%edx
+ 801:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 803:	89 d0                	mov    %edx,%eax
+ 805:	c1 e0 07             	shl    $0x7,%eax
+ 808:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 80d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 80f:	89 c2                	mov    %eax,%edx
+ 811:	c1 e2 0f             	shl    $0xf,%edx
+ 814:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 81a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 81c:	89 d0                	mov    %edx,%eax
+ 81e:	c1 e8 12             	shr    $0x12,%eax
+ 821:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 823:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 828:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 829:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 82e:	0f 84 d4 00 00 00    	je     908 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 834:	31 c0                	xor    %eax,%eax
+ 836:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 83d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 840:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 847:	83 c0 01             	add    $0x1,%eax
+ 84a:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 851:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 857:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 85d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 85f:	89 d1                	mov    %edx,%ecx
+ 861:	83 e2 01             	and    $0x1,%edx
+ 864:	d1 e9                	shr    %ecx
+ 866:	33 0c 85 d0 13 00 00 	xor    0x13d0(,%eax,4),%ecx
+ 86d:	33 0c 95 44 0a 00 00 	xor    0xa44(,%edx,4),%ecx
+ 874:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 87b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 880:	75 be                	jne    840 <genrand+0x60>
+ 882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 888:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 88f:	83 c0 01             	add    $0x1,%eax
+ 892:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 899:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 89f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8a5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8a7:	89 d1                	mov    %edx,%ecx
+ 8a9:	83 e2 01             	and    $0x1,%edx
+ 8ac:	d1 e9                	shr    %ecx
+ 8ae:	33 0c 85 10 0a 00 00 	xor    0xa10(,%eax,4),%ecx
+ 8b5:	33 0c 95 44 0a 00 00 	xor    0xa44(,%edx,4),%ecx
+ 8bc:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8c3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8c8:	75 be                	jne    888 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ca:	8b 0d a0 0d 00 00    	mov    0xda0,%ecx
+ 8d0:	a1 5c 17 00 00       	mov    0x175c,%eax
+ 8d5:	89 ca                	mov    %ecx,%edx
+ 8d7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8dc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8e2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8e4:	89 c2                	mov    %eax,%edx
+ 8e6:	83 e0 01             	and    $0x1,%eax
+ 8e9:	d1 ea                	shr    %edx
+ 8eb:	33 15 d0 13 00 00    	xor    0x13d0,%edx
+ 8f1:	33 14 85 44 0a 00 00 	xor    0xa44(,%eax,4),%edx
+ 8f8:	89 15 5c 17 00 00    	mov    %edx,0x175c
+ 8fe:	ba 01 00 00 00       	mov    $0x1,%edx
+ 903:	e9 ee fe ff ff       	jmp    7f6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 908:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 90d:	b9 5c 17 00 00       	mov    $0x175c,%ecx
+ 912:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 917:	c7 05 a0 0d 00 00 05 	movl   $0x1105,0xda0
+ 91e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 921:	eb 08                	jmp    92b <genrand+0x14b>
+ 923:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 927:	90                   	nop
+ 928:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 92b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 931:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 933:	39 c1                	cmp    %eax,%ecx
+ 935:	75 f1                	jne    928 <genrand+0x148>
+ 937:	e9 f8 fe ff ff       	jmp    834 <genrand+0x54>
+ 93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000940 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 940:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 941:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 943:	89 e5                	mov    %esp,%ebp
+ 945:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 946:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 949:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 94a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 94f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 952:	89 d8                	mov    %ebx,%eax
+ 954:	f7 f1                	div    %ecx
+ 956:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 958:	29 d3                	sub    %edx,%ebx
+ 95a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 960:	e8 7b fe ff ff       	call   7e0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 965:	39 d8                	cmp    %ebx,%eax
+ 967:	73 f7                	jae    960 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 969:	31 d2                	xor    %edx,%edx
+}
+ 96b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 96c:	f7 f6                	div    %esi
+}
+ 96e:	5e                   	pop    %esi
+ 96f:	5d                   	pop    %ebp
+ 970:	c3                   	ret    
+ 971:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 97f:	90                   	nop
+
+00000980 <randomrange>:
+
+int randomrange(int low, int high){
+ 980:	55                   	push   %ebp
+ 981:	89 e5                	mov    %esp,%ebp
+ 983:	57                   	push   %edi
+ 984:	56                   	push   %esi
+ 985:	53                   	push   %ebx
+ 986:	83 ec 0c             	sub    $0xc,%esp
+ 989:	8b 75 08             	mov    0x8(%ebp),%esi
+ 98c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 98f:	39 f0                	cmp    %esi,%eax
+ 991:	7d 06                	jge    999 <randomrange+0x19>
+ 993:	89 f2                	mov    %esi,%edx
+ 995:	89 c6                	mov    %eax,%esi
+ 997:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 999:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 99b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9a0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9a2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9a5:	89 d8                	mov    %ebx,%eax
+ 9a7:	f7 f1                	div    %ecx
+ 9a9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 9ab:	29 d3                	sub    %edx,%ebx
+ 9ad:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 9b0:	e8 2b fe ff ff       	call   7e0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9b5:	39 d8                	cmp    %ebx,%eax
+ 9b7:	73 f7                	jae    9b0 <randomrange+0x30>
+  return x/bin_size;
+ 9b9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 9bb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9be:	f7 f7                	div    %edi
+}
+ 9c0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9c1:	01 f0                	add    %esi,%eax
+}
+ 9c3:	5e                   	pop    %esi
+ 9c4:	5f                   	pop    %edi
+ 9c5:	5d                   	pop    %ebp
+ 9c6:	c3                   	ret    
diff -ruN xv6-public/echo.d xv6-public-with-hybrid/echo.d
--- xv6-public/echo.d	2022-09-06 09:47:09.430061000 +0530
+++ xv6-public-with-hybrid/echo.d	2022-10-07 18:49:59.052957418 +0530
@@ -1 +1,2 @@
-echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/echo.o and xv6-public-with-hybrid/echo.o differ
diff -ruN xv6-public/echo.sym xv6-public-with-hybrid/echo.sym
--- xv6-public/echo.sym	2022-09-06 09:47:09.466028000 +0530
+++ xv6-public-with-hybrid/echo.sym	2022-10-07 18:49:59.128957198 +0530
@@ -1,20 +1,28 @@
 00000000 echo.c
 00000000 ulib.c
 00000000 printf.c
-00000390 printint
-000007d0 digits.0
+000003c0 printint
+00000a30 digits.0
 00000000 umalloc.c
-00000a84 freep
-00000a88 base
+00000d80 freep
+00000d84 base
+00000000 random.c
+00000da0 mt
+00000d74 mti
+00000a44 mag01.0
 00000070 strcpy
-00000440 printf
+000007a0 sgenrand
+00000470 printf
 00000373 thread_exit
 00000290 memmove
 0000030b mknod
 00000190 gets
 00000343 getpid
-00000670 malloc
+000006a0 malloc
 00000353 sleep
+000003a3 get_burst_time
+00000940 random_at_most
+000003ab getCurrentInfo
 000002d3 pipe
 000002e3 write
 0000031b fstat
@@ -27,14 +35,19 @@
 000002bb fork
 0000034b sbrk
 0000035b uptime
-00000a84 __bss_start
+00000d78 __bss_start
 00000130 memset
 00000000 main
+0000039b set_burst_time
 000000a0 strcmp
 0000033b dup
+0000038b getMaxPid
+000007e0 genrand
+00000383 getNumProc
+00000393 getProcInfo
 00000200 stat
-00000a84 _edata
-00000a90 _end
+00000d78 _edata
+00001760 _end
 00000323 link
 000002c3 exit
 00000250 atoi
@@ -43,7 +56,9 @@
 00000303 open
 00000150 strchr
 00000363 thread_create
+000003b3 getCurrentPID
+00000980 randomrange
 0000032b mkdir
 000002eb close
 0000036b thread_join
-000005e0 free
+00000610 free
Binary files xv6-public/entry.o and xv6-public-with-hybrid/entry.o differ
Binary files xv6-public/entryother.o and xv6-public-with-hybrid/entryother.o differ
Binary files xv6-public/exec.o and xv6-public-with-hybrid/exec.o differ
Binary files xv6-public/file.o and xv6-public-with-hybrid/file.o differ
Binary files xv6-public/_forktest and xv6-public-with-hybrid/_forktest differ
diff -ruN xv6-public/forktest.asm xv6-public-with-hybrid/forktest.asm
--- xv6-public/forktest.asm	2022-09-06 09:47:09.569933000 +0530
+++ xv6-public-with-hybrid/forktest.asm	2022-10-07 18:49:59.296956709 +0530
@@ -52,11 +52,11 @@
 {
   46:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  49:	68 34 04 00 00       	push   $0x434
+  49:	68 6c 04 00 00       	push   $0x46c
   4e:	e8 5d 01 00 00       	call   1b0 <strlen>
   53:	83 c4 0c             	add    $0xc,%esp
   56:	50                   	push   %eax
-  57:	68 34 04 00 00       	push   $0x434
+  57:	68 6c 04 00 00       	push   $0x46c
   5c:	6a 01                	push   $0x1
   5e:	e8 30 03 00 00       	call   393 <write>
   63:	83 c4 10             	add    $0x10,%esp
@@ -91,11 +91,11 @@
   a6:	75 49                	jne    f1 <forktest+0xb1>
   write(fd, s, strlen(s));
   a8:	83 ec 0c             	sub    $0xc,%esp
-  ab:	68 66 04 00 00       	push   $0x466
+  ab:	68 9e 04 00 00       	push   $0x49e
   b0:	e8 fb 00 00 00       	call   1b0 <strlen>
   b5:	83 c4 0c             	add    $0xc,%esp
   b8:	50                   	push   %eax
-  b9:	68 66 04 00 00       	push   $0x466
+  b9:	68 9e 04 00 00       	push   $0x49e
   be:	6a 01                	push   $0x1
   c0:	e8 ce 02 00 00       	call   393 <write>
 }
@@ -106,11 +106,11 @@
   ca:	e8 a4 02 00 00       	call   373 <exit>
   write(fd, s, strlen(s));
   cf:	83 ec 0c             	sub    $0xc,%esp
-  d2:	68 3f 04 00 00       	push   $0x43f
+  d2:	68 77 04 00 00       	push   $0x477
   d7:	e8 d4 00 00 00       	call   1b0 <strlen>
   dc:	83 c4 0c             	add    $0xc,%esp
   df:	50                   	push   %eax
-  e0:	68 3f 04 00 00       	push   $0x43f
+  e0:	68 77 04 00 00       	push   $0x477
   e5:	6a 01                	push   $0x1
   e7:	e8 a7 02 00 00       	call   393 <write>
       exit();
@@ -118,7 +118,7 @@
     printf(1, "wait got too many\n");
   f1:	52                   	push   %edx
   f2:	52                   	push   %edx
-  f3:	68 53 04 00 00       	push   $0x453
+  f3:	68 8b 04 00 00       	push   $0x48b
   f8:	6a 01                	push   $0x1
   fa:	e8 11 ff ff ff       	call   10 <printf>
     exit();
@@ -126,7 +126,7 @@
     printf(1, "fork claimed to work N times!\n", N);
  104:	50                   	push   %eax
  105:	68 e8 03 00 00       	push   $0x3e8
- 10a:	68 74 04 00 00       	push   $0x474
+ 10a:	68 ac 04 00 00       	push   $0x4ac
  10f:	6a 01                	push   $0x1
  111:	e8 fa fe ff ff       	call   10 <printf>
     exit();
@@ -679,6 +679,49 @@
  42a:	c3                   	ret    
 
 0000042b <draw>:
+SYSCALL(draw)
  42b:	b8 19 00 00 00       	mov    $0x19,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
+
+00000433 <getNumProc>:
+SYSCALL(getNumProc)
+ 433:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 43b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 443:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 44b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 453:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 45b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 463:	b8 20 00 00 00       	mov    $0x20,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
diff -ruN xv6-public/forktest.d xv6-public-with-hybrid/forktest.d
--- xv6-public/forktest.d	2022-09-06 09:47:09.525973000 +0530
+++ xv6-public-with-hybrid/forktest.d	2022-10-07 18:49:59.252956836 +0530
@@ -1 +1,2 @@
-forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/forktest.o and xv6-public-with-hybrid/forktest.o differ
Binary files xv6-public/fs.img and xv6-public-with-hybrid/fs.img differ
Binary files xv6-public/fs.o and xv6-public-with-hybrid/fs.o differ
Binary files xv6-public/_grep and xv6-public-with-hybrid/_grep differ
diff -ruN xv6-public/grep.asm xv6-public-with-hybrid/grep.asm
--- xv6-public/grep.asm	2022-09-06 09:47:09.717796000 +0530
+++ xv6-public-with-hybrid/grep.asm	2022-10-07 18:49:59.612955789 +0530
@@ -84,9 +84,9 @@
       printf(1, "grep: cannot open %s\n", argv[i]);
   77:	50                   	push   %eax
   78:	ff 33                	push   (%ebx)
-  7a:	68 88 0a 00 00       	push   $0xa88
+  7a:	68 e8 0c 00 00       	push   $0xce8
   7f:	6a 01                	push   $0x1
-  81:	e8 ba 06 00 00       	call   740 <printf>
+  81:	e8 ea 06 00 00       	call   770 <printf>
       exit();
   86:	e8 38 05 00 00       	call   5c3 <exit>
   }
@@ -95,9 +95,9 @@
     printf(2, "usage: grep pattern [file ...]\n");
   90:	51                   	push   %ecx
   91:	51                   	push   %ecx
-  92:	68 68 0a 00 00       	push   $0xa68
+  92:	68 c8 0c 00 00       	push   $0xcc8
   97:	6a 02                	push   $0x2
-  99:	e8 a2 06 00 00       	call   740 <printf>
+  99:	e8 d2 06 00 00       	call   770 <printf>
     exit();
   9e:	e8 20 05 00 00       	call   5c3 <exit>
     grep(pattern, 0);
@@ -298,7 +298,7 @@
  1f8:	83 ec 04             	sub    $0x4,%esp
  1fb:	29 c8                	sub    %ecx,%eax
  1fd:	50                   	push   %eax
- 1fe:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
+ 1fe:	8d 81 a0 11 00 00    	lea    0x11a0(%ecx),%eax
  204:	50                   	push   %eax
  205:	ff 75 0c             	push   0xc(%ebp)
  208:	e8 ce 03 00 00       	call   5db <read>
@@ -309,9 +309,9 @@
  218:	01 45 dc             	add    %eax,-0x24(%ebp)
  21b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
     p = buf;
- 21e:	c7 45 e4 a0 0e 00 00 	movl   $0xea0,-0x1c(%ebp)
+ 21e:	c7 45 e4 a0 11 00 00 	movl   $0x11a0,-0x1c(%ebp)
     buf[m] = '\0';
- 225:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
+ 225:	c6 81 a0 11 00 00 00 	movb   $0x0,0x11a0(%ecx)
     while((q = strchr(p, '\n')) != 0){
  22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  230:	83 ec 08             	sub    $0x8,%esp
@@ -378,7 +378,7 @@
  2b5:	8d 76 00             	lea    0x0(%esi),%esi
     if(p == buf)
  2b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
- 2bb:	81 fa a0 0e 00 00    	cmp    $0xea0,%edx
+ 2bb:	81 fa a0 11 00 00    	cmp    $0x11a0,%edx
  2c1:	74 2e                	je     2f1 <grep+0x121>
     if(m > 0){
  2c3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
@@ -389,12 +389,12 @@
       memmove(buf, p, m);
  2d0:	83 ec 04             	sub    $0x4,%esp
       m -= p - buf;
- 2d3:	2d a0 0e 00 00       	sub    $0xea0,%eax
+ 2d3:	2d a0 11 00 00       	sub    $0x11a0,%eax
  2d8:	29 c1                	sub    %eax,%ecx
       memmove(buf, p, m);
  2da:	51                   	push   %ecx
  2db:	52                   	push   %edx
- 2dc:	68 a0 0e 00 00       	push   $0xea0
+ 2dc:	68 a0 11 00 00       	push   $0x11a0
       m -= p - buf;
  2e1:	89 4d dc             	mov    %ecx,-0x24(%ebp)
       memmove(buf, p, m);
@@ -1011,572 +1011,887 @@
  67a:	c3                   	ret    
 
 0000067b <draw>:
+SYSCALL(draw)
  67b:	b8 19 00 00 00       	mov    $0x19,%eax
  680:	cd 40                	int    $0x40
  682:	c3                   	ret    
- 683:	66 90                	xchg   %ax,%ax
- 685:	66 90                	xchg   %ax,%ax
- 687:	66 90                	xchg   %ax,%ax
- 689:	66 90                	xchg   %ax,%ax
- 68b:	66 90                	xchg   %ax,%ax
- 68d:	66 90                	xchg   %ax,%ax
- 68f:	90                   	nop
 
-00000690 <printint>:
+00000683 <getNumProc>:
+SYSCALL(getNumProc)
+ 683:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 688:	cd 40                	int    $0x40
+ 68a:	c3                   	ret    
+
+0000068b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 68b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 690:	cd 40                	int    $0x40
+ 692:	c3                   	ret    
+
+00000693 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 693:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 698:	cd 40                	int    $0x40
+ 69a:	c3                   	ret    
+
+0000069b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 69b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 6a0:	cd 40                	int    $0x40
+ 6a2:	c3                   	ret    
+
+000006a3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 6a3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 6a8:	cd 40                	int    $0x40
+ 6aa:	c3                   	ret    
+
+000006ab <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 6ab:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 6b0:	cd 40                	int    $0x40
+ 6b2:	c3                   	ret    
+
+000006b3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 6b3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 6b8:	cd 40                	int    $0x40
+ 6ba:	c3                   	ret    
+ 6bb:	66 90                	xchg   %ax,%ax
+ 6bd:	66 90                	xchg   %ax,%ax
+ 6bf:	90                   	nop
+
+000006c0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 690:	55                   	push   %ebp
- 691:	89 e5                	mov    %esp,%ebp
- 693:	57                   	push   %edi
- 694:	56                   	push   %esi
- 695:	53                   	push   %ebx
- 696:	83 ec 3c             	sub    $0x3c,%esp
- 699:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
+ 6c5:	53                   	push   %ebx
+ 6c6:	83 ec 3c             	sub    $0x3c,%esp
+ 6c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 69c:	89 d1                	mov    %edx,%ecx
+ 6cc:	89 d1                	mov    %edx,%ecx
 {
- 69e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 6ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 6a1:	85 d2                	test   %edx,%edx
- 6a3:	0f 89 7f 00 00 00    	jns    728 <printint+0x98>
- 6a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 6ad:	74 79                	je     728 <printint+0x98>
+ 6d1:	85 d2                	test   %edx,%edx
+ 6d3:	0f 89 7f 00 00 00    	jns    758 <printint+0x98>
+ 6d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 6dd:	74 79                	je     758 <printint+0x98>
     neg = 1;
- 6af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 6df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 6b6:	f7 d9                	neg    %ecx
+ 6e6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 6b8:	31 db                	xor    %ebx,%ebx
- 6ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 6bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 6e8:	31 db                	xor    %ebx,%ebx
+ 6ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6ed:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 6c0:	89 c8                	mov    %ecx,%eax
- 6c2:	31 d2                	xor    %edx,%edx
- 6c4:	89 cf                	mov    %ecx,%edi
- 6c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 6c9:	0f b6 92 00 0b 00 00 	movzbl 0xb00(%edx),%edx
- 6d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 6d3:	89 d8                	mov    %ebx,%eax
- 6d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 6f0:	89 c8                	mov    %ecx,%eax
+ 6f2:	31 d2                	xor    %edx,%edx
+ 6f4:	89 cf                	mov    %ecx,%edi
+ 6f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6f9:	0f b6 92 60 0d 00 00 	movzbl 0xd60(%edx),%edx
+ 700:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 703:	89 d8                	mov    %ebx,%eax
+ 705:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 6d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 708:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 6db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 70b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 6de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6e1:	76 dd                	jbe    6c0 <printint+0x30>
+ 70e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 711:	76 dd                	jbe    6f0 <printint+0x30>
   if(neg)
- 6e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6e6:	85 c9                	test   %ecx,%ecx
- 6e8:	74 0c                	je     6f6 <printint+0x66>
+ 713:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 716:	85 c9                	test   %ecx,%ecx
+ 718:	74 0c                	je     726 <printint+0x66>
     buf[i++] = '-';
- 6ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 71a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6ef:	89 d8                	mov    %ebx,%eax
+ 71f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 721:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6fd:	eb 07                	jmp    706 <printint+0x76>
- 6ff:	90                   	nop
+ 726:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 729:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 72d:	eb 07                	jmp    736 <printint+0x76>
+ 72f:	90                   	nop
     putc(fd, buf[i]);
- 700:	0f b6 13             	movzbl (%ebx),%edx
- 703:	83 eb 01             	sub    $0x1,%ebx
+ 730:	0f b6 13             	movzbl (%ebx),%edx
+ 733:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 706:	83 ec 04             	sub    $0x4,%esp
- 709:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 70c:	6a 01                	push   $0x1
- 70e:	56                   	push   %esi
- 70f:	57                   	push   %edi
- 710:	e8 ce fe ff ff       	call   5e3 <write>
+ 736:	83 ec 04             	sub    $0x4,%esp
+ 739:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 73c:	6a 01                	push   $0x1
+ 73e:	56                   	push   %esi
+ 73f:	57                   	push   %edi
+ 740:	e8 9e fe ff ff       	call   5e3 <write>
   while(--i >= 0)
- 715:	83 c4 10             	add    $0x10,%esp
- 718:	39 de                	cmp    %ebx,%esi
- 71a:	75 e4                	jne    700 <printint+0x70>
-}
- 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 71f:	5b                   	pop    %ebx
- 720:	5e                   	pop    %esi
- 721:	5f                   	pop    %edi
- 722:	5d                   	pop    %ebp
- 723:	c3                   	ret    
- 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 745:	83 c4 10             	add    $0x10,%esp
+ 748:	39 de                	cmp    %ebx,%esi
+ 74a:	75 e4                	jne    730 <printint+0x70>
+}
+ 74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 74f:	5b                   	pop    %ebx
+ 750:	5e                   	pop    %esi
+ 751:	5f                   	pop    %edi
+ 752:	5d                   	pop    %ebp
+ 753:	c3                   	ret    
+ 754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 728:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 72f:	eb 87                	jmp    6b8 <printint+0x28>
- 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 73f:	90                   	nop
+ 758:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 75f:	eb 87                	jmp    6e8 <printint+0x28>
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 768:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76f:	90                   	nop
 
-00000740 <printf>:
+00000770 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 740:	55                   	push   %ebp
- 741:	89 e5                	mov    %esp,%ebp
- 743:	57                   	push   %edi
- 744:	56                   	push   %esi
- 745:	53                   	push   %ebx
- 746:	83 ec 2c             	sub    $0x2c,%esp
+ 770:	55                   	push   %ebp
+ 771:	89 e5                	mov    %esp,%ebp
+ 773:	57                   	push   %edi
+ 774:	56                   	push   %esi
+ 775:	53                   	push   %ebx
+ 776:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 749:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 779:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 74c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 77c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 74f:	0f b6 13             	movzbl (%ebx),%edx
- 752:	84 d2                	test   %dl,%dl
- 754:	74 6a                	je     7c0 <printf+0x80>
+ 77f:	0f b6 13             	movzbl (%ebx),%edx
+ 782:	84 d2                	test   %dl,%dl
+ 784:	74 6a                	je     7f0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 756:	8d 45 10             	lea    0x10(%ebp),%eax
- 759:	83 c3 01             	add    $0x1,%ebx
+ 786:	8d 45 10             	lea    0x10(%ebp),%eax
+ 789:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 75c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 78c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 75f:	31 c9                	xor    %ecx,%ecx
+ 78f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 761:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 764:	eb 36                	jmp    79c <printf+0x5c>
- 766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76d:	8d 76 00             	lea    0x0(%esi),%esi
- 770:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 791:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 794:	eb 36                	jmp    7cc <printf+0x5c>
+ 796:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79d:	8d 76 00             	lea    0x0(%esi),%esi
+ 7a0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 773:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 7a3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 778:	83 f8 25             	cmp    $0x25,%eax
- 77b:	74 15                	je     792 <printf+0x52>
+ 7a8:	83 f8 25             	cmp    $0x25,%eax
+ 7ab:	74 15                	je     7c2 <printf+0x52>
   write(fd, &c, 1);
- 77d:	83 ec 04             	sub    $0x4,%esp
- 780:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 783:	6a 01                	push   $0x1
- 785:	57                   	push   %edi
- 786:	56                   	push   %esi
- 787:	e8 57 fe ff ff       	call   5e3 <write>
- 78c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 7ad:	83 ec 04             	sub    $0x4,%esp
+ 7b0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7b3:	6a 01                	push   $0x1
+ 7b5:	57                   	push   %edi
+ 7b6:	56                   	push   %esi
+ 7b7:	e8 27 fe ff ff       	call   5e3 <write>
+ 7bc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 78f:	83 c4 10             	add    $0x10,%esp
+ 7bf:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 792:	0f b6 13             	movzbl (%ebx),%edx
- 795:	83 c3 01             	add    $0x1,%ebx
- 798:	84 d2                	test   %dl,%dl
- 79a:	74 24                	je     7c0 <printf+0x80>
+ 7c2:	0f b6 13             	movzbl (%ebx),%edx
+ 7c5:	83 c3 01             	add    $0x1,%ebx
+ 7c8:	84 d2                	test   %dl,%dl
+ 7ca:	74 24                	je     7f0 <printf+0x80>
     c = fmt[i] & 0xff;
- 79c:	0f b6 c2             	movzbl %dl,%eax
+ 7cc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 79f:	85 c9                	test   %ecx,%ecx
- 7a1:	74 cd                	je     770 <printf+0x30>
+ 7cf:	85 c9                	test   %ecx,%ecx
+ 7d1:	74 cd                	je     7a0 <printf+0x30>
       }
     } else if(state == '%'){
- 7a3:	83 f9 25             	cmp    $0x25,%ecx
- 7a6:	75 ea                	jne    792 <printf+0x52>
+ 7d3:	83 f9 25             	cmp    $0x25,%ecx
+ 7d6:	75 ea                	jne    7c2 <printf+0x52>
       if(c == 'd'){
- 7a8:	83 f8 25             	cmp    $0x25,%eax
- 7ab:	0f 84 07 01 00 00    	je     8b8 <printf+0x178>
- 7b1:	83 e8 63             	sub    $0x63,%eax
- 7b4:	83 f8 15             	cmp    $0x15,%eax
- 7b7:	77 17                	ja     7d0 <printf+0x90>
- 7b9:	ff 24 85 a8 0a 00 00 	jmp    *0xaa8(,%eax,4)
+ 7d8:	83 f8 25             	cmp    $0x25,%eax
+ 7db:	0f 84 07 01 00 00    	je     8e8 <printf+0x178>
+ 7e1:	83 e8 63             	sub    $0x63,%eax
+ 7e4:	83 f8 15             	cmp    $0x15,%eax
+ 7e7:	77 17                	ja     800 <printf+0x90>
+ 7e9:	ff 24 85 08 0d 00 00 	jmp    *0xd08(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 7c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7c3:	5b                   	pop    %ebx
- 7c4:	5e                   	pop    %esi
- 7c5:	5f                   	pop    %edi
- 7c6:	5d                   	pop    %ebp
- 7c7:	c3                   	ret    
- 7c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7cf:	90                   	nop
+ 7f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f3:	5b                   	pop    %ebx
+ 7f4:	5e                   	pop    %esi
+ 7f5:	5f                   	pop    %edi
+ 7f6:	5d                   	pop    %ebp
+ 7f7:	c3                   	ret    
+ 7f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ff:	90                   	nop
   write(fd, &c, 1);
- 7d0:	83 ec 04             	sub    $0x4,%esp
- 7d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 7d6:	6a 01                	push   $0x1
- 7d8:	57                   	push   %edi
- 7d9:	56                   	push   %esi
- 7da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7de:	e8 00 fe ff ff       	call   5e3 <write>
+ 800:	83 ec 04             	sub    $0x4,%esp
+ 803:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 806:	6a 01                	push   $0x1
+ 808:	57                   	push   %edi
+ 809:	56                   	push   %esi
+ 80a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 80e:	e8 d0 fd ff ff       	call   5e3 <write>
         putc(fd, c);
- 7e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 813:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 7e7:	83 c4 0c             	add    $0xc,%esp
- 7ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 7ed:	6a 01                	push   $0x1
- 7ef:	57                   	push   %edi
- 7f0:	56                   	push   %esi
- 7f1:	e8 ed fd ff ff       	call   5e3 <write>
+ 817:	83 c4 0c             	add    $0xc,%esp
+ 81a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 81d:	6a 01                	push   $0x1
+ 81f:	57                   	push   %edi
+ 820:	56                   	push   %esi
+ 821:	e8 bd fd ff ff       	call   5e3 <write>
         putc(fd, c);
- 7f6:	83 c4 10             	add    $0x10,%esp
+ 826:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7f9:	31 c9                	xor    %ecx,%ecx
- 7fb:	eb 95                	jmp    792 <printf+0x52>
- 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 829:	31 c9                	xor    %ecx,%ecx
+ 82b:	eb 95                	jmp    7c2 <printf+0x52>
+ 82d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 800:	83 ec 0c             	sub    $0xc,%esp
- 803:	b9 10 00 00 00       	mov    $0x10,%ecx
- 808:	6a 00                	push   $0x0
- 80a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 80d:	8b 10                	mov    (%eax),%edx
- 80f:	89 f0                	mov    %esi,%eax
- 811:	e8 7a fe ff ff       	call   690 <printint>
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 838:	6a 00                	push   $0x0
+ 83a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 83d:	8b 10                	mov    (%eax),%edx
+ 83f:	89 f0                	mov    %esi,%eax
+ 841:	e8 7a fe ff ff       	call   6c0 <printint>
         ap++;
- 816:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 81a:	83 c4 10             	add    $0x10,%esp
+ 846:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 84a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 81d:	31 c9                	xor    %ecx,%ecx
- 81f:	e9 6e ff ff ff       	jmp    792 <printf+0x52>
- 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 84d:	31 c9                	xor    %ecx,%ecx
+ 84f:	e9 6e ff ff ff       	jmp    7c2 <printf+0x52>
+ 854:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 828:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 82b:	8b 10                	mov    (%eax),%edx
+ 858:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 85b:	8b 10                	mov    (%eax),%edx
         ap++;
- 82d:	83 c0 04             	add    $0x4,%eax
- 830:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 85d:	83 c0 04             	add    $0x4,%eax
+ 860:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 833:	85 d2                	test   %edx,%edx
- 835:	0f 84 8d 00 00 00    	je     8c8 <printf+0x188>
+ 863:	85 d2                	test   %edx,%edx
+ 865:	0f 84 8d 00 00 00    	je     8f8 <printf+0x188>
         while(*s != 0){
- 83b:	0f b6 02             	movzbl (%edx),%eax
+ 86b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 83e:	31 c9                	xor    %ecx,%ecx
+ 86e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 840:	84 c0                	test   %al,%al
- 842:	0f 84 4a ff ff ff    	je     792 <printf+0x52>
- 848:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 84b:	89 d3                	mov    %edx,%ebx
- 84d:	8d 76 00             	lea    0x0(%esi),%esi
+ 870:	84 c0                	test   %al,%al
+ 872:	0f 84 4a ff ff ff    	je     7c2 <printf+0x52>
+ 878:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 87b:	89 d3                	mov    %edx,%ebx
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 850:	83 ec 04             	sub    $0x4,%esp
+ 880:	83 ec 04             	sub    $0x4,%esp
           s++;
- 853:	83 c3 01             	add    $0x1,%ebx
- 856:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 883:	83 c3 01             	add    $0x1,%ebx
+ 886:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 859:	6a 01                	push   $0x1
- 85b:	57                   	push   %edi
- 85c:	56                   	push   %esi
- 85d:	e8 81 fd ff ff       	call   5e3 <write>
+ 889:	6a 01                	push   $0x1
+ 88b:	57                   	push   %edi
+ 88c:	56                   	push   %esi
+ 88d:	e8 51 fd ff ff       	call   5e3 <write>
         while(*s != 0){
- 862:	0f b6 03             	movzbl (%ebx),%eax
- 865:	83 c4 10             	add    $0x10,%esp
- 868:	84 c0                	test   %al,%al
- 86a:	75 e4                	jne    850 <printf+0x110>
+ 892:	0f b6 03             	movzbl (%ebx),%eax
+ 895:	83 c4 10             	add    $0x10,%esp
+ 898:	84 c0                	test   %al,%al
+ 89a:	75 e4                	jne    880 <printf+0x110>
       state = 0;
- 86c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 86f:	31 c9                	xor    %ecx,%ecx
- 871:	e9 1c ff ff ff       	jmp    792 <printf+0x52>
- 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 87d:	8d 76 00             	lea    0x0(%esi),%esi
+ 89c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 89f:	31 c9                	xor    %ecx,%ecx
+ 8a1:	e9 1c ff ff ff       	jmp    7c2 <printf+0x52>
+ 8a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ad:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 880:	83 ec 0c             	sub    $0xc,%esp
- 883:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 888:	6a 01                	push   $0x1
- 88a:	e9 7b ff ff ff       	jmp    80a <printf+0xca>
- 88f:	90                   	nop
+ 8b0:	83 ec 0c             	sub    $0xc,%esp
+ 8b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 8b8:	6a 01                	push   $0x1
+ 8ba:	e9 7b ff ff ff       	jmp    83a <printf+0xca>
+ 8bf:	90                   	nop
         putc(fd, *ap);
- 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 8c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 893:	83 ec 04             	sub    $0x4,%esp
+ 8c3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 896:	8b 00                	mov    (%eax),%eax
+ 8c6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 898:	6a 01                	push   $0x1
- 89a:	57                   	push   %edi
- 89b:	56                   	push   %esi
+ 8c8:	6a 01                	push   $0x1
+ 8ca:	57                   	push   %edi
+ 8cb:	56                   	push   %esi
         putc(fd, *ap);
- 89c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 8cc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 89f:	e8 3f fd ff ff       	call   5e3 <write>
+ 8cf:	e8 0f fd ff ff       	call   5e3 <write>
         ap++;
- 8a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 8a8:	83 c4 10             	add    $0x10,%esp
+ 8d4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 8d8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 8ab:	31 c9                	xor    %ecx,%ecx
- 8ad:	e9 e0 fe ff ff       	jmp    792 <printf+0x52>
- 8b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 8db:	31 c9                	xor    %ecx,%ecx
+ 8dd:	e9 e0 fe ff ff       	jmp    7c2 <printf+0x52>
+ 8e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 8b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 8e8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 8bb:	83 ec 04             	sub    $0x4,%esp
- 8be:	e9 2a ff ff ff       	jmp    7ed <printf+0xad>
- 8c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8c7:	90                   	nop
+ 8eb:	83 ec 04             	sub    $0x4,%esp
+ 8ee:	e9 2a ff ff ff       	jmp    81d <printf+0xad>
+ 8f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8f7:	90                   	nop
           s = "(null)";
- 8c8:	ba 9e 0a 00 00       	mov    $0xa9e,%edx
+ 8f8:	ba fe 0c 00 00       	mov    $0xcfe,%edx
         while(*s != 0){
- 8cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 8d0:	b8 28 00 00 00       	mov    $0x28,%eax
- 8d5:	89 d3                	mov    %edx,%ebx
- 8d7:	e9 74 ff ff ff       	jmp    850 <printf+0x110>
- 8dc:	66 90                	xchg   %ax,%ax
- 8de:	66 90                	xchg   %ax,%ax
+ 8fd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 900:	b8 28 00 00 00       	mov    $0x28,%eax
+ 905:	89 d3                	mov    %edx,%ebx
+ 907:	e9 74 ff ff ff       	jmp    880 <printf+0x110>
+ 90c:	66 90                	xchg   %ax,%ax
+ 90e:	66 90                	xchg   %ax,%ax
 
-000008e0 <free>:
+00000910 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8e0:	55                   	push   %ebp
+ 910:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8e1:	a1 a0 12 00 00       	mov    0x12a0,%eax
+ 911:	a1 a0 15 00 00       	mov    0x15a0,%eax
 {
- 8e6:	89 e5                	mov    %esp,%ebp
- 8e8:	57                   	push   %edi
- 8e9:	56                   	push   %esi
- 8ea:	53                   	push   %ebx
- 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 916:	89 e5                	mov    %esp,%ebp
+ 918:	57                   	push   %edi
+ 919:	56                   	push   %esi
+ 91a:	53                   	push   %ebx
+ 91b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 8ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 91e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 8f8:	89 c2                	mov    %eax,%edx
- 8fa:	8b 00                	mov    (%eax),%eax
- 8fc:	39 ca                	cmp    %ecx,%edx
- 8fe:	73 30                	jae    930 <free+0x50>
- 900:	39 c1                	cmp    %eax,%ecx
- 902:	72 04                	jb     908 <free+0x28>
+ 921:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 928:	89 c2                	mov    %eax,%edx
+ 92a:	8b 00                	mov    (%eax),%eax
+ 92c:	39 ca                	cmp    %ecx,%edx
+ 92e:	73 30                	jae    960 <free+0x50>
+ 930:	39 c1                	cmp    %eax,%ecx
+ 932:	72 04                	jb     938 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 904:	39 c2                	cmp    %eax,%edx
- 906:	72 f0                	jb     8f8 <free+0x18>
+ 934:	39 c2                	cmp    %eax,%edx
+ 936:	72 f0                	jb     928 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 90e:	39 f8                	cmp    %edi,%eax
- 910:	74 30                	je     942 <free+0x62>
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 f8                	cmp    %edi,%eax
+ 940:	74 30                	je     972 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 912:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 942:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 915:	8b 42 04             	mov    0x4(%edx),%eax
- 918:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 91b:	39 f1                	cmp    %esi,%ecx
- 91d:	74 3a                	je     959 <free+0x79>
+ 945:	8b 42 04             	mov    0x4(%edx),%eax
+ 948:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 94b:	39 f1                	cmp    %esi,%ecx
+ 94d:	74 3a                	je     989 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 91f:	89 0a                	mov    %ecx,(%edx)
+ 94f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 921:	5b                   	pop    %ebx
+ 951:	5b                   	pop    %ebx
   freep = p;
- 922:	89 15 a0 12 00 00    	mov    %edx,0x12a0
+ 952:	89 15 a0 15 00 00    	mov    %edx,0x15a0
 }
- 928:	5e                   	pop    %esi
- 929:	5f                   	pop    %edi
- 92a:	5d                   	pop    %ebp
- 92b:	c3                   	ret    
- 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 958:	5e                   	pop    %esi
+ 959:	5f                   	pop    %edi
+ 95a:	5d                   	pop    %ebp
+ 95b:	c3                   	ret    
+ 95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 930:	39 c2                	cmp    %eax,%edx
- 932:	72 c4                	jb     8f8 <free+0x18>
- 934:	39 c1                	cmp    %eax,%ecx
- 936:	73 c0                	jae    8f8 <free+0x18>
+ 960:	39 c2                	cmp    %eax,%edx
+ 962:	72 c4                	jb     928 <free+0x18>
+ 964:	39 c1                	cmp    %eax,%ecx
+ 966:	73 c0                	jae    928 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 93e:	39 f8                	cmp    %edi,%eax
- 940:	75 d0                	jne    912 <free+0x32>
+ 968:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 96b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 96e:	39 f8                	cmp    %edi,%eax
+ 970:	75 d0                	jne    942 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 942:	03 70 04             	add    0x4(%eax),%esi
- 945:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 972:	03 70 04             	add    0x4(%eax),%esi
+ 975:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 948:	8b 02                	mov    (%edx),%eax
- 94a:	8b 00                	mov    (%eax),%eax
- 94c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 978:	8b 02                	mov    (%edx),%eax
+ 97a:	8b 00                	mov    (%eax),%eax
+ 97c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 94f:	8b 42 04             	mov    0x4(%edx),%eax
- 952:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 955:	39 f1                	cmp    %esi,%ecx
- 957:	75 c6                	jne    91f <free+0x3f>
+ 97f:	8b 42 04             	mov    0x4(%edx),%eax
+ 982:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 985:	39 f1                	cmp    %esi,%ecx
+ 987:	75 c6                	jne    94f <free+0x3f>
     p->s.size += bp->s.size;
- 959:	03 43 fc             	add    -0x4(%ebx),%eax
+ 989:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 95c:	89 15 a0 12 00 00    	mov    %edx,0x12a0
+ 98c:	89 15 a0 15 00 00    	mov    %edx,0x15a0
     p->s.size += bp->s.size;
- 962:	89 42 04             	mov    %eax,0x4(%edx)
+ 992:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 965:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 968:	89 0a                	mov    %ecx,(%edx)
+ 995:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 998:	89 0a                	mov    %ecx,(%edx)
 }
- 96a:	5b                   	pop    %ebx
- 96b:	5e                   	pop    %esi
- 96c:	5f                   	pop    %edi
- 96d:	5d                   	pop    %ebp
- 96e:	c3                   	ret    
- 96f:	90                   	nop
+ 99a:	5b                   	pop    %ebx
+ 99b:	5e                   	pop    %esi
+ 99c:	5f                   	pop    %edi
+ 99d:	5d                   	pop    %ebp
+ 99e:	c3                   	ret    
+ 99f:	90                   	nop
 
-00000970 <malloc>:
+000009a0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 970:	55                   	push   %ebp
- 971:	89 e5                	mov    %esp,%ebp
- 973:	57                   	push   %edi
- 974:	56                   	push   %esi
- 975:	53                   	push   %ebx
- 976:	83 ec 1c             	sub    $0x1c,%esp
+ 9a0:	55                   	push   %ebp
+ 9a1:	89 e5                	mov    %esp,%ebp
+ 9a3:	57                   	push   %edi
+ 9a4:	56                   	push   %esi
+ 9a5:	53                   	push   %ebx
+ 9a6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 979:	8b 45 08             	mov    0x8(%ebp),%eax
+ 9a9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 97c:	8b 3d a0 12 00 00    	mov    0x12a0,%edi
+ 9ac:	8b 3d a0 15 00 00    	mov    0x15a0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 982:	8d 70 07             	lea    0x7(%eax),%esi
- 985:	c1 ee 03             	shr    $0x3,%esi
- 988:	83 c6 01             	add    $0x1,%esi
+ 9b2:	8d 70 07             	lea    0x7(%eax),%esi
+ 9b5:	c1 ee 03             	shr    $0x3,%esi
+ 9b8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 98b:	85 ff                	test   %edi,%edi
- 98d:	0f 84 9d 00 00 00    	je     a30 <malloc+0xc0>
+ 9bb:	85 ff                	test   %edi,%edi
+ 9bd:	0f 84 9d 00 00 00    	je     a60 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 993:	8b 17                	mov    (%edi),%edx
+ 9c3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 995:	8b 4a 04             	mov    0x4(%edx),%ecx
- 998:	39 f1                	cmp    %esi,%ecx
- 99a:	73 6a                	jae    a06 <malloc+0x96>
- 99c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 9a1:	39 de                	cmp    %ebx,%esi
- 9a3:	0f 43 de             	cmovae %esi,%ebx
+ 9c5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9c8:	39 f1                	cmp    %esi,%ecx
+ 9ca:	73 6a                	jae    a36 <malloc+0x96>
+ 9cc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9d1:	39 de                	cmp    %ebx,%esi
+ 9d3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 9a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 9ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 9b0:	eb 17                	jmp    9c9 <malloc+0x59>
- 9b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9d6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 9dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9e0:	eb 17                	jmp    9f9 <malloc+0x59>
+ 9e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9b8:	8b 02                	mov    (%edx),%eax
+ 9e8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 9ba:	8b 48 04             	mov    0x4(%eax),%ecx
- 9bd:	39 f1                	cmp    %esi,%ecx
- 9bf:	73 4f                	jae    a10 <malloc+0xa0>
+ 9ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9ed:	39 f1                	cmp    %esi,%ecx
+ 9ef:	73 4f                	jae    a40 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9c1:	8b 3d a0 12 00 00    	mov    0x12a0,%edi
- 9c7:	89 c2                	mov    %eax,%edx
- 9c9:	39 d7                	cmp    %edx,%edi
- 9cb:	75 eb                	jne    9b8 <malloc+0x48>
+ 9f1:	8b 3d a0 15 00 00    	mov    0x15a0,%edi
+ 9f7:	89 c2                	mov    %eax,%edx
+ 9f9:	39 d7                	cmp    %edx,%edi
+ 9fb:	75 eb                	jne    9e8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 9cd:	83 ec 0c             	sub    $0xc,%esp
- 9d0:	ff 75 e4             	push   -0x1c(%ebp)
- 9d3:	e8 73 fc ff ff       	call   64b <sbrk>
+ 9fd:	83 ec 0c             	sub    $0xc,%esp
+ a00:	ff 75 e4             	push   -0x1c(%ebp)
+ a03:	e8 43 fc ff ff       	call   64b <sbrk>
   if(p == (char*)-1)
- 9d8:	83 c4 10             	add    $0x10,%esp
- 9db:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9de:	74 1c                	je     9fc <malloc+0x8c>
+ a08:	83 c4 10             	add    $0x10,%esp
+ a0b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ a0e:	74 1c                	je     a2c <malloc+0x8c>
   hp->s.size = nu;
- 9e0:	89 58 04             	mov    %ebx,0x4(%eax)
+ a10:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9e3:	83 ec 0c             	sub    $0xc,%esp
- 9e6:	83 c0 08             	add    $0x8,%eax
- 9e9:	50                   	push   %eax
- 9ea:	e8 f1 fe ff ff       	call   8e0 <free>
+ a13:	83 ec 0c             	sub    $0xc,%esp
+ a16:	83 c0 08             	add    $0x8,%eax
+ a19:	50                   	push   %eax
+ a1a:	e8 f1 fe ff ff       	call   910 <free>
   return freep;
- 9ef:	8b 15 a0 12 00 00    	mov    0x12a0,%edx
+ a1f:	8b 15 a0 15 00 00    	mov    0x15a0,%edx
       if((p = morecore(nunits)) == 0)
- 9f5:	83 c4 10             	add    $0x10,%esp
- 9f8:	85 d2                	test   %edx,%edx
- 9fa:	75 bc                	jne    9b8 <malloc+0x48>
+ a25:	83 c4 10             	add    $0x10,%esp
+ a28:	85 d2                	test   %edx,%edx
+ a2a:	75 bc                	jne    9e8 <malloc+0x48>
         return 0;
   }
 }
- 9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9ff:	31 c0                	xor    %eax,%eax
+ a2f:	31 c0                	xor    %eax,%eax
 }
- a01:	5b                   	pop    %ebx
- a02:	5e                   	pop    %esi
- a03:	5f                   	pop    %edi
- a04:	5d                   	pop    %ebp
- a05:	c3                   	ret    
+ a31:	5b                   	pop    %ebx
+ a32:	5e                   	pop    %esi
+ a33:	5f                   	pop    %edi
+ a34:	5d                   	pop    %ebp
+ a35:	c3                   	ret    
     if(p->s.size >= nunits){
- a06:	89 d0                	mov    %edx,%eax
- a08:	89 fa                	mov    %edi,%edx
- a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a36:	89 d0                	mov    %edx,%eax
+ a38:	89 fa                	mov    %edi,%edx
+ a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- a10:	39 ce                	cmp    %ecx,%esi
- a12:	74 4c                	je     a60 <malloc+0xf0>
+ a40:	39 ce                	cmp    %ecx,%esi
+ a42:	74 4c                	je     a90 <malloc+0xf0>
         p->s.size -= nunits;
- a14:	29 f1                	sub    %esi,%ecx
- a16:	89 48 04             	mov    %ecx,0x4(%eax)
+ a44:	29 f1                	sub    %esi,%ecx
+ a46:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- a19:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ a49:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- a1c:	89 70 04             	mov    %esi,0x4(%eax)
+ a4c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- a1f:	89 15 a0 12 00 00    	mov    %edx,0x12a0
+ a4f:	89 15 a0 15 00 00    	mov    %edx,0x15a0
 }
- a25:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a55:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a28:	83 c0 08             	add    $0x8,%eax
+ a58:	83 c0 08             	add    $0x8,%eax
 }
- a2b:	5b                   	pop    %ebx
- a2c:	5e                   	pop    %esi
- a2d:	5f                   	pop    %edi
- a2e:	5d                   	pop    %ebp
- a2f:	c3                   	ret    
+ a5b:	5b                   	pop    %ebx
+ a5c:	5e                   	pop    %esi
+ a5d:	5f                   	pop    %edi
+ a5e:	5d                   	pop    %ebp
+ a5f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- a30:	c7 05 a0 12 00 00 a4 	movl   $0x12a4,0x12a0
- a37:	12 00 00 
+ a60:	c7 05 a0 15 00 00 a4 	movl   $0x15a4,0x15a0
+ a67:	15 00 00 
     base.s.size = 0;
- a3a:	bf a4 12 00 00       	mov    $0x12a4,%edi
+ a6a:	bf a4 15 00 00       	mov    $0x15a4,%edi
     base.s.ptr = freep = prevp = &base;
- a3f:	c7 05 a4 12 00 00 a4 	movl   $0x12a4,0x12a4
- a46:	12 00 00 
+ a6f:	c7 05 a4 15 00 00 a4 	movl   $0x15a4,0x15a4
+ a76:	15 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a49:	89 fa                	mov    %edi,%edx
+ a79:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- a4b:	c7 05 a8 12 00 00 00 	movl   $0x0,0x12a8
- a52:	00 00 00 
+ a7b:	c7 05 a8 15 00 00 00 	movl   $0x0,0x15a8
+ a82:	00 00 00 
     if(p->s.size >= nunits){
- a55:	e9 42 ff ff ff       	jmp    99c <malloc+0x2c>
- a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a85:	e9 42 ff ff ff       	jmp    9cc <malloc+0x2c>
+ a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a60:	8b 08                	mov    (%eax),%ecx
- a62:	89 0a                	mov    %ecx,(%edx)
- a64:	eb b9                	jmp    a1f <malloc+0xaf>
+ a90:	8b 08                	mov    (%eax),%ecx
+ a92:	89 0a                	mov    %ecx,(%edx)
+ a94:	eb b9                	jmp    a4f <malloc+0xaf>
+ a96:	66 90                	xchg   %ax,%ax
+ a98:	66 90                	xchg   %ax,%ax
+ a9a:	66 90                	xchg   %ax,%ax
+ a9c:	66 90                	xchg   %ax,%ax
+ a9e:	66 90                	xchg   %ax,%ax
+
+00000aa0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ aa0:	55                   	push   %ebp
+ aa1:	b8 c4 15 00 00       	mov    $0x15c4,%eax
+ aa6:	89 e5                	mov    %esp,%ebp
+ aa8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ aab:	89 15 c0 15 00 00    	mov    %edx,0x15c0
+    for (mti=1; mti<N; mti++)
+ ab1:	eb 08                	jmp    abb <sgenrand+0x1b>
+ ab3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ ab7:	90                   	nop
+ ab8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ abb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ ac1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ ac3:	3d 7c 1f 00 00       	cmp    $0x1f7c,%eax
+ ac8:	75 ee                	jne    ab8 <sgenrand+0x18>
+ aca:	c7 05 90 11 00 00 70 	movl   $0x270,0x1190
+ ad1:	02 00 00 
+}
+ ad4:	5d                   	pop    %ebp
+ ad5:	c3                   	ret    
+ ad6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ add:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000ae0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ ae0:	a1 90 11 00 00       	mov    0x1190,%eax
+ ae5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ aea:	7f 3d                	jg     b29 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ aec:	8b 0c 85 c0 15 00 00 	mov    0x15c0(,%eax,4),%ecx
+ af3:	8d 50 01             	lea    0x1(%eax),%edx
+ af6:	89 15 90 11 00 00    	mov    %edx,0x1190
+    y ^= TEMPERING_SHIFT_U(y);
+ afc:	89 ca                	mov    %ecx,%edx
+ afe:	c1 ea 0b             	shr    $0xb,%edx
+ b01:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ b03:	89 d0                	mov    %edx,%eax
+ b05:	c1 e0 07             	shl    $0x7,%eax
+ b08:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ b0d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ b0f:	89 c2                	mov    %eax,%edx
+ b11:	c1 e2 0f             	shl    $0xf,%edx
+ b14:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ b1a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ b1c:	89 d0                	mov    %edx,%eax
+ b1e:	c1 e8 12             	shr    $0x12,%eax
+ b21:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ b23:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ b28:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ b29:	3d 71 02 00 00       	cmp    $0x271,%eax
+ b2e:	0f 84 d4 00 00 00    	je     c08 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ b34:	31 c0                	xor    %eax,%eax
+ b36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b3d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b40:	8b 0c 85 c0 15 00 00 	mov    0x15c0(,%eax,4),%ecx
+ b47:	83 c0 01             	add    $0x1,%eax
+ b4a:	8b 14 85 c0 15 00 00 	mov    0x15c0(,%eax,4),%edx
+ b51:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b57:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b5d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ b5f:	89 d1                	mov    %edx,%ecx
+ b61:	83 e2 01             	and    $0x1,%edx
+ b64:	d1 e9                	shr    %ecx
+ b66:	33 0c 85 f0 1b 00 00 	xor    0x1bf0(,%eax,4),%ecx
+ b6d:	33 0c 95 74 0d 00 00 	xor    0xd74(,%edx,4),%ecx
+ b74:	89 0c 85 bc 15 00 00 	mov    %ecx,0x15bc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b7b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b80:	75 be                	jne    b40 <genrand+0x60>
+ b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b88:	8b 0c 85 c0 15 00 00 	mov    0x15c0(,%eax,4),%ecx
+ b8f:	83 c0 01             	add    $0x1,%eax
+ b92:	8b 14 85 c0 15 00 00 	mov    0x15c0(,%eax,4),%edx
+ b99:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b9f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ ba5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ ba7:	89 d1                	mov    %edx,%ecx
+ ba9:	83 e2 01             	and    $0x1,%edx
+ bac:	d1 e9                	shr    %ecx
+ bae:	33 0c 85 30 12 00 00 	xor    0x1230(,%eax,4),%ecx
+ bb5:	33 0c 95 74 0d 00 00 	xor    0xd74(,%edx,4),%ecx
+ bbc:	89 0c 85 bc 15 00 00 	mov    %ecx,0x15bc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ bc3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ bc8:	75 be                	jne    b88 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ bca:	8b 0d c0 15 00 00    	mov    0x15c0,%ecx
+ bd0:	a1 7c 1f 00 00       	mov    0x1f7c,%eax
+ bd5:	89 ca                	mov    %ecx,%edx
+ bd7:	25 00 00 00 80       	and    $0x80000000,%eax
+ bdc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ be2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ be4:	89 c2                	mov    %eax,%edx
+ be6:	83 e0 01             	and    $0x1,%eax
+ be9:	d1 ea                	shr    %edx
+ beb:	33 15 f0 1b 00 00    	xor    0x1bf0,%edx
+ bf1:	33 14 85 74 0d 00 00 	xor    0xd74(,%eax,4),%edx
+ bf8:	89 15 7c 1f 00 00    	mov    %edx,0x1f7c
+ bfe:	ba 01 00 00 00       	mov    $0x1,%edx
+ c03:	e9 ee fe ff ff       	jmp    af6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ c08:	b8 c4 15 00 00       	mov    $0x15c4,%eax
+ c0d:	b9 7c 1f 00 00       	mov    $0x1f7c,%ecx
+ c12:	ba 05 11 00 00       	mov    $0x1105,%edx
+ c17:	c7 05 c0 15 00 00 05 	movl   $0x1105,0x15c0
+ c1e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ c21:	eb 08                	jmp    c2b <genrand+0x14b>
+ c23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ c27:	90                   	nop
+ c28:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ c2b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ c31:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ c33:	39 c1                	cmp    %eax,%ecx
+ c35:	75 f1                	jne    c28 <genrand+0x148>
+ c37:	e9 f8 fe ff ff       	jmp    b34 <genrand+0x54>
+ c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c40 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ c40:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ c41:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ c43:	89 e5                	mov    %esp,%ebp
+ c45:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ c46:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ c49:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ c4a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ c4f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c52:	89 d8                	mov    %ebx,%eax
+ c54:	f7 f1                	div    %ecx
+ c56:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ c58:	29 d3                	sub    %edx,%ebx
+ c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ c60:	e8 7b fe ff ff       	call   ae0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ c65:	39 d8                	cmp    %ebx,%eax
+ c67:	73 f7                	jae    c60 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ c69:	31 d2                	xor    %edx,%edx
+}
+ c6b:	5b                   	pop    %ebx
+  return x/bin_size;
+ c6c:	f7 f6                	div    %esi
+}
+ c6e:	5e                   	pop    %esi
+ c6f:	5d                   	pop    %ebp
+ c70:	c3                   	ret    
+ c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c7f:	90                   	nop
+
+00000c80 <randomrange>:
+
+int randomrange(int low, int high){
+ c80:	55                   	push   %ebp
+ c81:	89 e5                	mov    %esp,%ebp
+ c83:	57                   	push   %edi
+ c84:	56                   	push   %esi
+ c85:	53                   	push   %ebx
+ c86:	83 ec 0c             	sub    $0xc,%esp
+ c89:	8b 75 08             	mov    0x8(%ebp),%esi
+ c8c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c8f:	39 f0                	cmp    %esi,%eax
+ c91:	7d 06                	jge    c99 <randomrange+0x19>
+ c93:	89 f2                	mov    %esi,%edx
+ c95:	89 c6                	mov    %eax,%esi
+ c97:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c99:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c9b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ ca0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ ca2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ca5:	89 d8                	mov    %ebx,%eax
+ ca7:	f7 f1                	div    %ecx
+ ca9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ cab:	29 d3                	sub    %edx,%ebx
+ cad:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ cb0:	e8 2b fe ff ff       	call   ae0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ cb5:	39 d8                	cmp    %ebx,%eax
+ cb7:	73 f7                	jae    cb0 <randomrange+0x30>
+  return x/bin_size;
+ cb9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ cbb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ cbe:	f7 f7                	div    %edi
+}
+ cc0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ cc1:	01 f0                	add    %esi,%eax
+}
+ cc3:	5e                   	pop    %esi
+ cc4:	5f                   	pop    %edi
+ cc5:	5d                   	pop    %ebp
+ cc6:	c3                   	ret    
diff -ruN xv6-public/grep.d xv6-public-with-hybrid/grep.d
--- xv6-public/grep.d	2022-09-06 09:47:09.677833000 +0530
+++ xv6-public-with-hybrid/grep.d	2022-10-07 18:49:59.544955987 +0530
@@ -1 +1,2 @@
-grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/grep.o and xv6-public-with-hybrid/grep.o differ
diff -ruN xv6-public/grep.sym xv6-public-with-hybrid/grep.sym
--- xv6-public/grep.sym	2022-09-06 09:47:09.725789000 +0530
+++ xv6-public-with-hybrid/grep.sym	2022-10-07 18:49:59.624955755 +0530
@@ -1,13 +1,18 @@
 00000000 grep.c
 00000000 ulib.c
 00000000 printf.c
-00000690 printint
-00000b00 digits.0
+000006c0 printint
+00000d60 digits.0
 00000000 umalloc.c
-000012a0 freep
-000012a4 base
+000015a0 freep
+000015a4 base
+00000000 random.c
+000015c0 mt
+00001190 mti
+00000d74 mag01.0
 00000370 strcpy
-00000740 printf
+00000aa0 sgenrand
+00000770 printf
 00000673 thread_exit
 00000590 memmove
 000000c0 matchhere
@@ -15,8 +20,11 @@
 00000490 gets
 00000643 getpid
 000001d0 grep
-00000970 malloc
+000009a0 malloc
 00000653 sleep
+000006a3 get_burst_time
+00000c40 random_at_most
+000006ab getCurrentInfo
 000005d3 pipe
 000005e3 write
 0000061b fstat
@@ -29,16 +37,21 @@
 000005bb fork
 0000064b sbrk
 0000065b uptime
-00000ea0 __bss_start
+00001194 __bss_start
 00000430 memset
 00000000 main
+0000069b set_burst_time
 00000310 matchstar
 000003a0 strcmp
 0000063b dup
-00000ea0 buf
+0000068b getMaxPid
+000011a0 buf
+00000ae0 genrand
+00000683 getNumProc
+00000693 getProcInfo
 00000500 stat
-00000ea0 _edata
-000012ac _end
+00001194 _edata
+00001f80 _end
 00000170 match
 00000623 link
 000005c3 exit
@@ -48,7 +61,9 @@
 00000603 open
 00000450 strchr
 00000663 thread_create
+000006b3 getCurrentPID
+00000c80 randomrange
 0000062b mkdir
 000005eb close
 0000066b thread_join
-000008e0 free
+00000910 free
Binary files xv6-public/ide.o and xv6-public-with-hybrid/ide.o differ
Binary files xv6-public/_init and xv6-public-with-hybrid/_init differ
diff -ruN xv6-public/init.asm xv6-public-with-hybrid/init.asm
--- xv6-public/init.asm	2022-09-06 09:47:09.777746000 +0530
+++ xv6-public-with-hybrid/init.asm	2022-10-07 18:49:59.832955150 +0530
@@ -23,7 +23,7 @@
   if(open("console", O_RDWR) < 0){
    f:	83 ec 08             	sub    $0x8,%esp
   12:	6a 02                	push   $0x2
-  14:	68 e8 07 00 00       	push   $0x7e8
+  14:	68 48 0a 00 00       	push   $0xa48
   19:	e8 65 03 00 00       	call   383 <open>
   1e:	83 c4 10             	add    $0x10,%esp
   21:	85 c0                	test   %eax,%eax
@@ -44,9 +44,9 @@
   for(;;){
     printf(1, "init: starting sh\n");
   48:	83 ec 08             	sub    $0x8,%esp
-  4b:	68 f0 07 00 00       	push   $0x7f0
+  4b:	68 50 0a 00 00       	push   $0xa50
   50:	6a 01                	push   $0x1
-  52:	e8 69 04 00 00       	call   4c0 <printf>
+  52:	e8 99 04 00 00       	call   4f0 <printf>
     pid = fork();
   57:	e8 df 02 00 00       	call   33b <fork>
     if(pid < 0){
@@ -75,44 +75,44 @@
   7b:	74 cb                	je     48 <main+0x48>
       printf(1, "zombie!\n");
   7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 2f 08 00 00       	push   $0x82f
+  80:	68 8f 0a 00 00       	push   $0xa8f
   85:	6a 01                	push   $0x1
-  87:	e8 34 04 00 00       	call   4c0 <printf>
+  87:	e8 64 04 00 00       	call   4f0 <printf>
   8c:	83 c4 10             	add    $0x10,%esp
   8f:	eb df                	jmp    70 <main+0x70>
       printf(1, "init: fork failed\n");
   91:	53                   	push   %ebx
   92:	53                   	push   %ebx
-  93:	68 03 08 00 00       	push   $0x803
+  93:	68 63 0a 00 00       	push   $0xa63
   98:	6a 01                	push   $0x1
-  9a:	e8 21 04 00 00       	call   4c0 <printf>
+  9a:	e8 51 04 00 00       	call   4f0 <printf>
       exit();
   9f:	e8 9f 02 00 00       	call   343 <exit>
       exec("sh", argv);
   a4:	50                   	push   %eax
   a5:	50                   	push   %eax
-  a6:	68 44 0b 00 00       	push   $0xb44
-  ab:	68 16 08 00 00       	push   $0x816
+  a6:	68 34 0e 00 00       	push   $0xe34
+  ab:	68 76 0a 00 00       	push   $0xa76
   b0:	e8 c6 02 00 00       	call   37b <exec>
       printf(1, "init: exec sh failed\n");
   b5:	5a                   	pop    %edx
   b6:	59                   	pop    %ecx
-  b7:	68 19 08 00 00       	push   $0x819
+  b7:	68 79 0a 00 00       	push   $0xa79
   bc:	6a 01                	push   $0x1
-  be:	e8 fd 03 00 00       	call   4c0 <printf>
+  be:	e8 2d 04 00 00       	call   4f0 <printf>
       exit();
   c3:	e8 7b 02 00 00       	call   343 <exit>
     mknod("console", 1, 1);
   c8:	50                   	push   %eax
   c9:	6a 01                	push   $0x1
   cb:	6a 01                	push   $0x1
-  cd:	68 e8 07 00 00       	push   $0x7e8
+  cd:	68 48 0a 00 00       	push   $0xa48
   d2:	e8 b4 02 00 00       	call   38b <mknod>
     open("console", O_RDWR);
   d7:	58                   	pop    %eax
   d8:	5a                   	pop    %edx
   d9:	6a 02                	push   $0x2
-  db:	68 e8 07 00 00       	push   $0x7e8
+  db:	68 48 0a 00 00       	push   $0xa48
   e0:	e8 9e 02 00 00       	call   383 <open>
   e5:	83 c4 10             	add    $0x10,%esp
   e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
@@ -663,572 +663,887 @@
  3fa:	c3                   	ret    
 
 000003fb <draw>:
+SYSCALL(draw)
  3fb:	b8 19 00 00 00       	mov    $0x19,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
- 403:	66 90                	xchg   %ax,%ax
- 405:	66 90                	xchg   %ax,%ax
- 407:	66 90                	xchg   %ax,%ax
- 409:	66 90                	xchg   %ax,%ax
- 40b:	66 90                	xchg   %ax,%ax
- 40d:	66 90                	xchg   %ax,%ax
- 40f:	90                   	nop
 
-00000410 <printint>:
+00000403 <getNumProc>:
+SYSCALL(getNumProc)
+ 403:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 40b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 413:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 41b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 423:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 42b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 433:	b8 20 00 00 00       	mov    $0x20,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+ 43b:	66 90                	xchg   %ax,%ax
+ 43d:	66 90                	xchg   %ax,%ax
+ 43f:	90                   	nop
+
+00000440 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 3c             	sub    $0x3c,%esp
- 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 3c             	sub    $0x3c,%esp
+ 449:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 41c:	89 d1                	mov    %edx,%ecx
+ 44c:	89 d1                	mov    %edx,%ecx
 {
- 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 44e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 421:	85 d2                	test   %edx,%edx
- 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
- 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 42d:	74 79                	je     4a8 <printint+0x98>
+ 451:	85 d2                	test   %edx,%edx
+ 453:	0f 89 7f 00 00 00    	jns    4d8 <printint+0x98>
+ 459:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 45d:	74 79                	je     4d8 <printint+0x98>
     neg = 1;
- 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 45f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 436:	f7 d9                	neg    %ecx
+ 466:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 438:	31 db                	xor    %ebx,%ebx
- 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 468:	31 db                	xor    %ebx,%ebx
+ 46a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 440:	89 c8                	mov    %ecx,%eax
- 442:	31 d2                	xor    %edx,%edx
- 444:	89 cf                	mov    %ecx,%edi
- 446:	f7 75 c4             	divl   -0x3c(%ebp)
- 449:	0f b6 92 98 08 00 00 	movzbl 0x898(%edx),%edx
- 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 453:	89 d8                	mov    %ebx,%eax
- 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 470:	89 c8                	mov    %ecx,%eax
+ 472:	31 d2                	xor    %edx,%edx
+ 474:	89 cf                	mov    %ecx,%edi
+ 476:	f7 75 c4             	divl   -0x3c(%ebp)
+ 479:	0f b6 92 f8 0a 00 00 	movzbl 0xaf8(%edx),%edx
+ 480:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 483:	89 d8                	mov    %ebx,%eax
+ 485:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 488:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 48b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 461:	76 dd                	jbe    440 <printint+0x30>
+ 48e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 491:	76 dd                	jbe    470 <printint+0x30>
   if(neg)
- 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 466:	85 c9                	test   %ecx,%ecx
- 468:	74 0c                	je     476 <printint+0x66>
+ 493:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 496:	85 c9                	test   %ecx,%ecx
+ 498:	74 0c                	je     4a6 <printint+0x66>
     buf[i++] = '-';
- 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 49a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 46f:	89 d8                	mov    %ebx,%eax
+ 49f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 47d:	eb 07                	jmp    486 <printint+0x76>
- 47f:	90                   	nop
+ 4a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ad:	eb 07                	jmp    4b6 <printint+0x76>
+ 4af:	90                   	nop
     putc(fd, buf[i]);
- 480:	0f b6 13             	movzbl (%ebx),%edx
- 483:	83 eb 01             	sub    $0x1,%ebx
+ 4b0:	0f b6 13             	movzbl (%ebx),%edx
+ 4b3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 486:	83 ec 04             	sub    $0x4,%esp
- 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 48c:	6a 01                	push   $0x1
- 48e:	56                   	push   %esi
- 48f:	57                   	push   %edi
- 490:	e8 ce fe ff ff       	call   363 <write>
+ 4b6:	83 ec 04             	sub    $0x4,%esp
+ 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4bc:	6a 01                	push   $0x1
+ 4be:	56                   	push   %esi
+ 4bf:	57                   	push   %edi
+ 4c0:	e8 9e fe ff ff       	call   363 <write>
   while(--i >= 0)
- 495:	83 c4 10             	add    $0x10,%esp
- 498:	39 de                	cmp    %ebx,%esi
- 49a:	75 e4                	jne    480 <printint+0x70>
-}
- 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 49f:	5b                   	pop    %ebx
- 4a0:	5e                   	pop    %esi
- 4a1:	5f                   	pop    %edi
- 4a2:	5d                   	pop    %ebp
- 4a3:	c3                   	ret    
- 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	39 de                	cmp    %ebx,%esi
+ 4ca:	75 e4                	jne    4b0 <printint+0x70>
+}
+ 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cf:	5b                   	pop    %ebx
+ 4d0:	5e                   	pop    %esi
+ 4d1:	5f                   	pop    %edi
+ 4d2:	5d                   	pop    %ebp
+ 4d3:	c3                   	ret    
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4af:	eb 87                	jmp    438 <printint+0x28>
- 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4bf:	90                   	nop
+ 4d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4df:	eb 87                	jmp    468 <printint+0x28>
+ 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
 
-000004c0 <printf>:
+000004f0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4c0:	55                   	push   %ebp
- 4c1:	89 e5                	mov    %esp,%ebp
- 4c3:	57                   	push   %edi
- 4c4:	56                   	push   %esi
- 4c5:	53                   	push   %ebx
- 4c6:	83 ec 2c             	sub    $0x2c,%esp
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	57                   	push   %edi
+ 4f4:	56                   	push   %esi
+ 4f5:	53                   	push   %ebx
+ 4f6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 4f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 4cc:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4fc:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 4cf:	0f b6 13             	movzbl (%ebx),%edx
- 4d2:	84 d2                	test   %dl,%dl
- 4d4:	74 6a                	je     540 <printf+0x80>
+ 4ff:	0f b6 13             	movzbl (%ebx),%edx
+ 502:	84 d2                	test   %dl,%dl
+ 504:	74 6a                	je     570 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 4d6:	8d 45 10             	lea    0x10(%ebp),%eax
- 4d9:	83 c3 01             	add    $0x1,%ebx
+ 506:	8d 45 10             	lea    0x10(%ebp),%eax
+ 509:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 4dc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 50c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4df:	31 c9                	xor    %ecx,%ecx
+ 50f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4e4:	eb 36                	jmp    51c <printf+0x5c>
- 4e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
- 4f0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 514:	eb 36                	jmp    54c <printf+0x5c>
+ 516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+ 520:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 4f3:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 523:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 4f8:	83 f8 25             	cmp    $0x25,%eax
- 4fb:	74 15                	je     512 <printf+0x52>
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	74 15                	je     542 <printf+0x52>
   write(fd, &c, 1);
- 4fd:	83 ec 04             	sub    $0x4,%esp
- 500:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 503:	6a 01                	push   $0x1
- 505:	57                   	push   %edi
- 506:	56                   	push   %esi
- 507:	e8 57 fe ff ff       	call   363 <write>
- 50c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 52d:	83 ec 04             	sub    $0x4,%esp
+ 530:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 533:	6a 01                	push   $0x1
+ 535:	57                   	push   %edi
+ 536:	56                   	push   %esi
+ 537:	e8 27 fe ff ff       	call   363 <write>
+ 53c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 50f:	83 c4 10             	add    $0x10,%esp
+ 53f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 512:	0f b6 13             	movzbl (%ebx),%edx
- 515:	83 c3 01             	add    $0x1,%ebx
- 518:	84 d2                	test   %dl,%dl
- 51a:	74 24                	je     540 <printf+0x80>
+ 542:	0f b6 13             	movzbl (%ebx),%edx
+ 545:	83 c3 01             	add    $0x1,%ebx
+ 548:	84 d2                	test   %dl,%dl
+ 54a:	74 24                	je     570 <printf+0x80>
     c = fmt[i] & 0xff;
- 51c:	0f b6 c2             	movzbl %dl,%eax
+ 54c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 51f:	85 c9                	test   %ecx,%ecx
- 521:	74 cd                	je     4f0 <printf+0x30>
+ 54f:	85 c9                	test   %ecx,%ecx
+ 551:	74 cd                	je     520 <printf+0x30>
       }
     } else if(state == '%'){
- 523:	83 f9 25             	cmp    $0x25,%ecx
- 526:	75 ea                	jne    512 <printf+0x52>
+ 553:	83 f9 25             	cmp    $0x25,%ecx
+ 556:	75 ea                	jne    542 <printf+0x52>
       if(c == 'd'){
- 528:	83 f8 25             	cmp    $0x25,%eax
- 52b:	0f 84 07 01 00 00    	je     638 <printf+0x178>
- 531:	83 e8 63             	sub    $0x63,%eax
- 534:	83 f8 15             	cmp    $0x15,%eax
- 537:	77 17                	ja     550 <printf+0x90>
- 539:	ff 24 85 40 08 00 00 	jmp    *0x840(,%eax,4)
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	0f 84 07 01 00 00    	je     668 <printf+0x178>
+ 561:	83 e8 63             	sub    $0x63,%eax
+ 564:	83 f8 15             	cmp    $0x15,%eax
+ 567:	77 17                	ja     580 <printf+0x90>
+ 569:	ff 24 85 a0 0a 00 00 	jmp    *0xaa0(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 540:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 543:	5b                   	pop    %ebx
- 544:	5e                   	pop    %esi
- 545:	5f                   	pop    %edi
- 546:	5d                   	pop    %ebp
- 547:	c3                   	ret    
- 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 570:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 573:	5b                   	pop    %ebx
+ 574:	5e                   	pop    %esi
+ 575:	5f                   	pop    %edi
+ 576:	5d                   	pop    %ebp
+ 577:	c3                   	ret    
+ 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
   write(fd, &c, 1);
- 550:	83 ec 04             	sub    $0x4,%esp
- 553:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 556:	6a 01                	push   $0x1
- 558:	57                   	push   %edi
- 559:	56                   	push   %esi
- 55a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 55e:	e8 00 fe ff ff       	call   363 <write>
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 586:	6a 01                	push   $0x1
+ 588:	57                   	push   %edi
+ 589:	56                   	push   %esi
+ 58a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 58e:	e8 d0 fd ff ff       	call   363 <write>
         putc(fd, c);
- 563:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 593:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 567:	83 c4 0c             	add    $0xc,%esp
- 56a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 56d:	6a 01                	push   $0x1
- 56f:	57                   	push   %edi
- 570:	56                   	push   %esi
- 571:	e8 ed fd ff ff       	call   363 <write>
+ 597:	83 c4 0c             	add    $0xc,%esp
+ 59a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 59d:	6a 01                	push   $0x1
+ 59f:	57                   	push   %edi
+ 5a0:	56                   	push   %esi
+ 5a1:	e8 bd fd ff ff       	call   363 <write>
         putc(fd, c);
- 576:	83 c4 10             	add    $0x10,%esp
+ 5a6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 579:	31 c9                	xor    %ecx,%ecx
- 57b:	eb 95                	jmp    512 <printf+0x52>
- 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5a9:	31 c9                	xor    %ecx,%ecx
+ 5ab:	eb 95                	jmp    542 <printf+0x52>
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 580:	83 ec 0c             	sub    $0xc,%esp
- 583:	b9 10 00 00 00       	mov    $0x10,%ecx
- 588:	6a 00                	push   $0x0
- 58a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 58d:	8b 10                	mov    (%eax),%edx
- 58f:	89 f0                	mov    %esi,%eax
- 591:	e8 7a fe ff ff       	call   410 <printint>
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5b8:	6a 00                	push   $0x0
+ 5ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5bd:	8b 10                	mov    (%eax),%edx
+ 5bf:	89 f0                	mov    %esi,%eax
+ 5c1:	e8 7a fe ff ff       	call   440 <printint>
         ap++;
- 596:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 59a:	83 c4 10             	add    $0x10,%esp
+ 5c6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ca:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 59d:	31 c9                	xor    %ecx,%ecx
- 59f:	e9 6e ff ff ff       	jmp    512 <printf+0x52>
- 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cd:	31 c9                	xor    %ecx,%ecx
+ 5cf:	e9 6e ff ff ff       	jmp    542 <printf+0x52>
+ 5d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5ab:	8b 10                	mov    (%eax),%edx
+ 5d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5db:	8b 10                	mov    (%eax),%edx
         ap++;
- 5ad:	83 c0 04             	add    $0x4,%eax
- 5b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5dd:	83 c0 04             	add    $0x4,%eax
+ 5e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5b3:	85 d2                	test   %edx,%edx
- 5b5:	0f 84 8d 00 00 00    	je     648 <printf+0x188>
+ 5e3:	85 d2                	test   %edx,%edx
+ 5e5:	0f 84 8d 00 00 00    	je     678 <printf+0x188>
         while(*s != 0){
- 5bb:	0f b6 02             	movzbl (%edx),%eax
+ 5eb:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 5be:	31 c9                	xor    %ecx,%ecx
+ 5ee:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 5c0:	84 c0                	test   %al,%al
- 5c2:	0f 84 4a ff ff ff    	je     512 <printf+0x52>
- 5c8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5cb:	89 d3                	mov    %edx,%ebx
- 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 5f0:	84 c0                	test   %al,%al
+ 5f2:	0f 84 4a ff ff ff    	je     542 <printf+0x52>
+ 5f8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5fb:	89 d3                	mov    %edx,%ebx
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 5d0:	83 ec 04             	sub    $0x4,%esp
+ 600:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5d3:	83 c3 01             	add    $0x1,%ebx
- 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 603:	83 c3 01             	add    $0x1,%ebx
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5d9:	6a 01                	push   $0x1
- 5db:	57                   	push   %edi
- 5dc:	56                   	push   %esi
- 5dd:	e8 81 fd ff ff       	call   363 <write>
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	56                   	push   %esi
+ 60d:	e8 51 fd ff ff       	call   363 <write>
         while(*s != 0){
- 5e2:	0f b6 03             	movzbl (%ebx),%eax
- 5e5:	83 c4 10             	add    $0x10,%esp
- 5e8:	84 c0                	test   %al,%al
- 5ea:	75 e4                	jne    5d0 <printf+0x110>
+ 612:	0f b6 03             	movzbl (%ebx),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x110>
       state = 0;
- 5ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 5ef:	31 c9                	xor    %ecx,%ecx
- 5f1:	e9 1c ff ff ff       	jmp    512 <printf+0x52>
- 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 61c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 61f:	31 c9                	xor    %ecx,%ecx
+ 621:	e9 1c ff ff ff       	jmp    542 <printf+0x52>
+ 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 600:	83 ec 0c             	sub    $0xc,%esp
- 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 608:	6a 01                	push   $0x1
- 60a:	e9 7b ff ff ff       	jmp    58a <printf+0xca>
- 60f:	90                   	nop
+ 630:	83 ec 0c             	sub    $0xc,%esp
+ 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 638:	6a 01                	push   $0x1
+ 63a:	e9 7b ff ff ff       	jmp    5ba <printf+0xca>
+ 63f:	90                   	nop
         putc(fd, *ap);
- 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 613:	83 ec 04             	sub    $0x4,%esp
+ 643:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 616:	8b 00                	mov    (%eax),%eax
+ 646:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 618:	6a 01                	push   $0x1
- 61a:	57                   	push   %edi
- 61b:	56                   	push   %esi
+ 648:	6a 01                	push   $0x1
+ 64a:	57                   	push   %edi
+ 64b:	56                   	push   %esi
         putc(fd, *ap);
- 61c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 64c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 61f:	e8 3f fd ff ff       	call   363 <write>
+ 64f:	e8 0f fd ff ff       	call   363 <write>
         ap++;
- 624:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 628:	83 c4 10             	add    $0x10,%esp
+ 654:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 658:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 62b:	31 c9                	xor    %ecx,%ecx
- 62d:	e9 e0 fe ff ff       	jmp    512 <printf+0x52>
- 632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 65b:	31 c9                	xor    %ecx,%ecx
+ 65d:	e9 e0 fe ff ff       	jmp    542 <printf+0x52>
+ 662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 638:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 668:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 63b:	83 ec 04             	sub    $0x4,%esp
- 63e:	e9 2a ff ff ff       	jmp    56d <printf+0xad>
- 643:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 647:	90                   	nop
+ 66b:	83 ec 04             	sub    $0x4,%esp
+ 66e:	e9 2a ff ff ff       	jmp    59d <printf+0xad>
+ 673:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 677:	90                   	nop
           s = "(null)";
- 648:	ba 38 08 00 00       	mov    $0x838,%edx
+ 678:	ba 98 0a 00 00       	mov    $0xa98,%edx
         while(*s != 0){
- 64d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 650:	b8 28 00 00 00       	mov    $0x28,%eax
- 655:	89 d3                	mov    %edx,%ebx
- 657:	e9 74 ff ff ff       	jmp    5d0 <printf+0x110>
- 65c:	66 90                	xchg   %ax,%ax
- 65e:	66 90                	xchg   %ax,%ax
+ 67d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 680:	b8 28 00 00 00       	mov    $0x28,%eax
+ 685:	89 d3                	mov    %edx,%ebx
+ 687:	e9 74 ff ff ff       	jmp    600 <printf+0x110>
+ 68c:	66 90                	xchg   %ax,%ax
+ 68e:	66 90                	xchg   %ax,%ax
 
-00000660 <free>:
+00000690 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 660:	55                   	push   %ebp
+ 690:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 661:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+ 691:	a1 40 0e 00 00       	mov    0xe40,%eax
 {
- 666:	89 e5                	mov    %esp,%ebp
- 668:	57                   	push   %edi
- 669:	56                   	push   %esi
- 66a:	53                   	push   %ebx
- 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 696:	89 e5                	mov    %esp,%ebp
+ 698:	57                   	push   %edi
+ 699:	56                   	push   %esi
+ 69a:	53                   	push   %ebx
+ 69b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 69e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 678:	89 c2                	mov    %eax,%edx
- 67a:	8b 00                	mov    (%eax),%eax
- 67c:	39 ca                	cmp    %ecx,%edx
- 67e:	73 30                	jae    6b0 <free+0x50>
- 680:	39 c1                	cmp    %eax,%ecx
- 682:	72 04                	jb     688 <free+0x28>
+ 6a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6a8:	89 c2                	mov    %eax,%edx
+ 6aa:	8b 00                	mov    (%eax),%eax
+ 6ac:	39 ca                	cmp    %ecx,%edx
+ 6ae:	73 30                	jae    6e0 <free+0x50>
+ 6b0:	39 c1                	cmp    %eax,%ecx
+ 6b2:	72 04                	jb     6b8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 684:	39 c2                	cmp    %eax,%edx
- 686:	72 f0                	jb     678 <free+0x18>
+ 6b4:	39 c2                	cmp    %eax,%edx
+ 6b6:	72 f0                	jb     6a8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 688:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 68b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 68e:	39 f8                	cmp    %edi,%eax
- 690:	74 30                	je     6c2 <free+0x62>
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 f8                	cmp    %edi,%eax
+ 6c0:	74 30                	je     6f2 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 692:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6c2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 695:	8b 42 04             	mov    0x4(%edx),%eax
- 698:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 69b:	39 f1                	cmp    %esi,%ecx
- 69d:	74 3a                	je     6d9 <free+0x79>
+ 6c5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6c8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6cb:	39 f1                	cmp    %esi,%ecx
+ 6cd:	74 3a                	je     709 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 69f:	89 0a                	mov    %ecx,(%edx)
+ 6cf:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 6a1:	5b                   	pop    %ebx
+ 6d1:	5b                   	pop    %ebx
   freep = p;
- 6a2:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+ 6d2:	89 15 40 0e 00 00    	mov    %edx,0xe40
 }
- 6a8:	5e                   	pop    %esi
- 6a9:	5f                   	pop    %edi
- 6aa:	5d                   	pop    %ebp
- 6ab:	c3                   	ret    
- 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6d8:	5e                   	pop    %esi
+ 6d9:	5f                   	pop    %edi
+ 6da:	5d                   	pop    %ebp
+ 6db:	c3                   	ret    
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b0:	39 c2                	cmp    %eax,%edx
- 6b2:	72 c4                	jb     678 <free+0x18>
- 6b4:	39 c1                	cmp    %eax,%ecx
- 6b6:	73 c0                	jae    678 <free+0x18>
+ 6e0:	39 c2                	cmp    %eax,%edx
+ 6e2:	72 c4                	jb     6a8 <free+0x18>
+ 6e4:	39 c1                	cmp    %eax,%ecx
+ 6e6:	73 c0                	jae    6a8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6be:	39 f8                	cmp    %edi,%eax
- 6c0:	75 d0                	jne    692 <free+0x32>
+ 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ee:	39 f8                	cmp    %edi,%eax
+ 6f0:	75 d0                	jne    6c2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 6c2:	03 70 04             	add    0x4(%eax),%esi
- 6c5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6f2:	03 70 04             	add    0x4(%eax),%esi
+ 6f5:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6c8:	8b 02                	mov    (%edx),%eax
- 6ca:	8b 00                	mov    (%eax),%eax
- 6cc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6f8:	8b 02                	mov    (%edx),%eax
+ 6fa:	8b 00                	mov    (%eax),%eax
+ 6fc:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6cf:	8b 42 04             	mov    0x4(%edx),%eax
- 6d2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6d5:	39 f1                	cmp    %esi,%ecx
- 6d7:	75 c6                	jne    69f <free+0x3f>
+ 6ff:	8b 42 04             	mov    0x4(%edx),%eax
+ 702:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	75 c6                	jne    6cf <free+0x3f>
     p->s.size += bp->s.size;
- 6d9:	03 43 fc             	add    -0x4(%ebx),%eax
+ 709:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 6dc:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+ 70c:	89 15 40 0e 00 00    	mov    %edx,0xe40
     p->s.size += bp->s.size;
- 6e2:	89 42 04             	mov    %eax,0x4(%edx)
+ 712:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 6e5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 6e8:	89 0a                	mov    %ecx,(%edx)
+ 715:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 718:	89 0a                	mov    %ecx,(%edx)
 }
- 6ea:	5b                   	pop    %ebx
- 6eb:	5e                   	pop    %esi
- 6ec:	5f                   	pop    %edi
- 6ed:	5d                   	pop    %ebp
- 6ee:	c3                   	ret    
- 6ef:	90                   	nop
+ 71a:	5b                   	pop    %ebx
+ 71b:	5e                   	pop    %esi
+ 71c:	5f                   	pop    %edi
+ 71d:	5d                   	pop    %ebp
+ 71e:	c3                   	ret    
+ 71f:	90                   	nop
 
-000006f0 <malloc>:
+00000720 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6f0:	55                   	push   %ebp
- 6f1:	89 e5                	mov    %esp,%ebp
- 6f3:	57                   	push   %edi
- 6f4:	56                   	push   %esi
- 6f5:	53                   	push   %ebx
- 6f6:	83 ec 1c             	sub    $0x1c,%esp
+ 720:	55                   	push   %ebp
+ 721:	89 e5                	mov    %esp,%ebp
+ 723:	57                   	push   %edi
+ 724:	56                   	push   %esi
+ 725:	53                   	push   %ebx
+ 726:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 729:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6fc:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 72c:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 702:	8d 70 07             	lea    0x7(%eax),%esi
- 705:	c1 ee 03             	shr    $0x3,%esi
- 708:	83 c6 01             	add    $0x1,%esi
+ 732:	8d 70 07             	lea    0x7(%eax),%esi
+ 735:	c1 ee 03             	shr    $0x3,%esi
+ 738:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 70b:	85 ff                	test   %edi,%edi
- 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
+ 73b:	85 ff                	test   %edi,%edi
+ 73d:	0f 84 9d 00 00 00    	je     7e0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 713:	8b 17                	mov    (%edi),%edx
+ 743:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 715:	8b 4a 04             	mov    0x4(%edx),%ecx
- 718:	39 f1                	cmp    %esi,%ecx
- 71a:	73 6a                	jae    786 <malloc+0x96>
- 71c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 721:	39 de                	cmp    %ebx,%esi
- 723:	0f 43 de             	cmovae %esi,%ebx
+ 745:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 748:	39 f1                	cmp    %esi,%ecx
+ 74a:	73 6a                	jae    7b6 <malloc+0x96>
+ 74c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 751:	39 de                	cmp    %ebx,%esi
+ 753:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 726:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 72d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 730:	eb 17                	jmp    749 <malloc+0x59>
- 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 756:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 75d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 760:	eb 17                	jmp    779 <malloc+0x59>
+ 762:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 738:	8b 02                	mov    (%edx),%eax
+ 768:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 73a:	8b 48 04             	mov    0x4(%eax),%ecx
- 73d:	39 f1                	cmp    %esi,%ecx
- 73f:	73 4f                	jae    790 <malloc+0xa0>
+ 76a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76d:	39 f1                	cmp    %esi,%ecx
+ 76f:	73 4f                	jae    7c0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 741:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
- 747:	89 c2                	mov    %eax,%edx
- 749:	39 d7                	cmp    %edx,%edi
- 74b:	75 eb                	jne    738 <malloc+0x48>
+ 771:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
+ 777:	89 c2                	mov    %eax,%edx
+ 779:	39 d7                	cmp    %edx,%edi
+ 77b:	75 eb                	jne    768 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 74d:	83 ec 0c             	sub    $0xc,%esp
- 750:	ff 75 e4             	push   -0x1c(%ebp)
- 753:	e8 73 fc ff ff       	call   3cb <sbrk>
+ 77d:	83 ec 0c             	sub    $0xc,%esp
+ 780:	ff 75 e4             	push   -0x1c(%ebp)
+ 783:	e8 43 fc ff ff       	call   3cb <sbrk>
   if(p == (char*)-1)
- 758:	83 c4 10             	add    $0x10,%esp
- 75b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 75e:	74 1c                	je     77c <malloc+0x8c>
+ 788:	83 c4 10             	add    $0x10,%esp
+ 78b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 78e:	74 1c                	je     7ac <malloc+0x8c>
   hp->s.size = nu;
- 760:	89 58 04             	mov    %ebx,0x4(%eax)
+ 790:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 763:	83 ec 0c             	sub    $0xc,%esp
- 766:	83 c0 08             	add    $0x8,%eax
- 769:	50                   	push   %eax
- 76a:	e8 f1 fe ff ff       	call   660 <free>
+ 793:	83 ec 0c             	sub    $0xc,%esp
+ 796:	83 c0 08             	add    $0x8,%eax
+ 799:	50                   	push   %eax
+ 79a:	e8 f1 fe ff ff       	call   690 <free>
   return freep;
- 76f:	8b 15 4c 0b 00 00    	mov    0xb4c,%edx
+ 79f:	8b 15 40 0e 00 00    	mov    0xe40,%edx
       if((p = morecore(nunits)) == 0)
- 775:	83 c4 10             	add    $0x10,%esp
- 778:	85 d2                	test   %edx,%edx
- 77a:	75 bc                	jne    738 <malloc+0x48>
+ 7a5:	83 c4 10             	add    $0x10,%esp
+ 7a8:	85 d2                	test   %edx,%edx
+ 7aa:	75 bc                	jne    768 <malloc+0x48>
         return 0;
   }
 }
- 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 77f:	31 c0                	xor    %eax,%eax
+ 7af:	31 c0                	xor    %eax,%eax
 }
- 781:	5b                   	pop    %ebx
- 782:	5e                   	pop    %esi
- 783:	5f                   	pop    %edi
- 784:	5d                   	pop    %ebp
- 785:	c3                   	ret    
+ 7b1:	5b                   	pop    %ebx
+ 7b2:	5e                   	pop    %esi
+ 7b3:	5f                   	pop    %edi
+ 7b4:	5d                   	pop    %ebp
+ 7b5:	c3                   	ret    
     if(p->s.size >= nunits){
- 786:	89 d0                	mov    %edx,%eax
- 788:	89 fa                	mov    %edi,%edx
- 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7b6:	89 d0                	mov    %edx,%eax
+ 7b8:	89 fa                	mov    %edi,%edx
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 790:	39 ce                	cmp    %ecx,%esi
- 792:	74 4c                	je     7e0 <malloc+0xf0>
+ 7c0:	39 ce                	cmp    %ecx,%esi
+ 7c2:	74 4c                	je     810 <malloc+0xf0>
         p->s.size -= nunits;
- 794:	29 f1                	sub    %esi,%ecx
- 796:	89 48 04             	mov    %ecx,0x4(%eax)
+ 7c4:	29 f1                	sub    %esi,%ecx
+ 7c6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 799:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 7c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 79c:	89 70 04             	mov    %esi,0x4(%eax)
+ 7cc:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 79f:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+ 7cf:	89 15 40 0e 00 00    	mov    %edx,0xe40
 }
- 7a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7a8:	83 c0 08             	add    $0x8,%eax
+ 7d8:	83 c0 08             	add    $0x8,%eax
 }
- 7ab:	5b                   	pop    %ebx
- 7ac:	5e                   	pop    %esi
- 7ad:	5f                   	pop    %edi
- 7ae:	5d                   	pop    %ebp
- 7af:	c3                   	ret    
+ 7db:	5b                   	pop    %ebx
+ 7dc:	5e                   	pop    %esi
+ 7dd:	5f                   	pop    %edi
+ 7de:	5d                   	pop    %ebp
+ 7df:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 7b0:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
- 7b7:	0b 00 00 
+ 7e0:	c7 05 40 0e 00 00 44 	movl   $0xe44,0xe40
+ 7e7:	0e 00 00 
     base.s.size = 0;
- 7ba:	bf 50 0b 00 00       	mov    $0xb50,%edi
+ 7ea:	bf 44 0e 00 00       	mov    $0xe44,%edi
     base.s.ptr = freep = prevp = &base;
- 7bf:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
- 7c6:	0b 00 00 
+ 7ef:	c7 05 44 0e 00 00 44 	movl   $0xe44,0xe44
+ 7f6:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7c9:	89 fa                	mov    %edi,%edx
+ 7f9:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 7cb:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
- 7d2:	00 00 00 
+ 7fb:	c7 05 48 0e 00 00 00 	movl   $0x0,0xe48
+ 802:	00 00 00 
     if(p->s.size >= nunits){
- 7d5:	e9 42 ff ff ff       	jmp    71c <malloc+0x2c>
- 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 805:	e9 42 ff ff ff       	jmp    74c <malloc+0x2c>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7e0:	8b 08                	mov    (%eax),%ecx
- 7e2:	89 0a                	mov    %ecx,(%edx)
- 7e4:	eb b9                	jmp    79f <malloc+0xaf>
+ 810:	8b 08                	mov    (%eax),%ecx
+ 812:	89 0a                	mov    %ecx,(%edx)
+ 814:	eb b9                	jmp    7cf <malloc+0xaf>
+ 816:	66 90                	xchg   %ax,%ax
+ 818:	66 90                	xchg   %ax,%ax
+ 81a:	66 90                	xchg   %ax,%ax
+ 81c:	66 90                	xchg   %ax,%ax
+ 81e:	66 90                	xchg   %ax,%ax
+
+00000820 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 820:	55                   	push   %ebp
+ 821:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 826:	89 e5                	mov    %esp,%ebp
+ 828:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 82b:	89 15 60 0e 00 00    	mov    %edx,0xe60
+    for (mti=1; mti<N; mti++)
+ 831:	eb 08                	jmp    83b <sgenrand+0x1b>
+ 833:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 837:	90                   	nop
+ 838:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 83b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 841:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 843:	3d 1c 18 00 00       	cmp    $0x181c,%eax
+ 848:	75 ee                	jne    838 <sgenrand+0x18>
+ 84a:	c7 05 3c 0e 00 00 70 	movl   $0x270,0xe3c
+ 851:	02 00 00 
+}
+ 854:	5d                   	pop    %ebp
+ 855:	c3                   	ret    
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000860 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 860:	a1 3c 0e 00 00       	mov    0xe3c,%eax
+ 865:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 86a:	7f 3d                	jg     8a9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 86c:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 873:	8d 50 01             	lea    0x1(%eax),%edx
+ 876:	89 15 3c 0e 00 00    	mov    %edx,0xe3c
+    y ^= TEMPERING_SHIFT_U(y);
+ 87c:	89 ca                	mov    %ecx,%edx
+ 87e:	c1 ea 0b             	shr    $0xb,%edx
+ 881:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 883:	89 d0                	mov    %edx,%eax
+ 885:	c1 e0 07             	shl    $0x7,%eax
+ 888:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 88d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 88f:	89 c2                	mov    %eax,%edx
+ 891:	c1 e2 0f             	shl    $0xf,%edx
+ 894:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 89a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 89c:	89 d0                	mov    %edx,%eax
+ 89e:	c1 e8 12             	shr    $0x12,%eax
+ 8a1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8a3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8a8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8a9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 8ae:	0f 84 d4 00 00 00    	je     988 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 8b4:	31 c0                	xor    %eax,%eax
+ 8b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8bd:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8c0:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 8c7:	83 c0 01             	add    $0x1,%eax
+ 8ca:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 8d1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8d7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8dd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8df:	89 d1                	mov    %edx,%ecx
+ 8e1:	83 e2 01             	and    $0x1,%edx
+ 8e4:	d1 e9                	shr    %ecx
+ 8e6:	33 0c 85 90 14 00 00 	xor    0x1490(,%eax,4),%ecx
+ 8ed:	33 0c 95 0c 0b 00 00 	xor    0xb0c(,%edx,4),%ecx
+ 8f4:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8fb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 900:	75 be                	jne    8c0 <genrand+0x60>
+ 902:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 908:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 90f:	83 c0 01             	add    $0x1,%eax
+ 912:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 919:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 91f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 925:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 927:	89 d1                	mov    %edx,%ecx
+ 929:	83 e2 01             	and    $0x1,%edx
+ 92c:	d1 e9                	shr    %ecx
+ 92e:	33 0c 85 d0 0a 00 00 	xor    0xad0(,%eax,4),%ecx
+ 935:	33 0c 95 0c 0b 00 00 	xor    0xb0c(,%edx,4),%ecx
+ 93c:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 943:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 948:	75 be                	jne    908 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 94a:	8b 0d 60 0e 00 00    	mov    0xe60,%ecx
+ 950:	a1 1c 18 00 00       	mov    0x181c,%eax
+ 955:	89 ca                	mov    %ecx,%edx
+ 957:	25 00 00 00 80       	and    $0x80000000,%eax
+ 95c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 962:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 964:	89 c2                	mov    %eax,%edx
+ 966:	83 e0 01             	and    $0x1,%eax
+ 969:	d1 ea                	shr    %edx
+ 96b:	33 15 90 14 00 00    	xor    0x1490,%edx
+ 971:	33 14 85 0c 0b 00 00 	xor    0xb0c(,%eax,4),%edx
+ 978:	89 15 1c 18 00 00    	mov    %edx,0x181c
+ 97e:	ba 01 00 00 00       	mov    $0x1,%edx
+ 983:	e9 ee fe ff ff       	jmp    876 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 988:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 98d:	b9 1c 18 00 00       	mov    $0x181c,%ecx
+ 992:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 997:	c7 05 60 0e 00 00 05 	movl   $0x1105,0xe60
+ 99e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9a1:	eb 08                	jmp    9ab <genrand+0x14b>
+ 9a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9a7:	90                   	nop
+ 9a8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9ab:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9b1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 9b3:	39 c1                	cmp    %eax,%ecx
+ 9b5:	75 f1                	jne    9a8 <genrand+0x148>
+ 9b7:	e9 f8 fe ff ff       	jmp    8b4 <genrand+0x54>
+ 9bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000009c0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 9c0:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 9c1:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 9c3:	89 e5                	mov    %esp,%ebp
+ 9c5:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 9c6:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 9c9:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 9ca:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 9cf:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9d2:	89 d8                	mov    %ebx,%eax
+ 9d4:	f7 f1                	div    %ecx
+ 9d6:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 9d8:	29 d3                	sub    %edx,%ebx
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 9e0:	e8 7b fe ff ff       	call   860 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9e5:	39 d8                	cmp    %ebx,%eax
+ 9e7:	73 f7                	jae    9e0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 9e9:	31 d2                	xor    %edx,%edx
+}
+ 9eb:	5b                   	pop    %ebx
+  return x/bin_size;
+ 9ec:	f7 f6                	div    %esi
+}
+ 9ee:	5e                   	pop    %esi
+ 9ef:	5d                   	pop    %ebp
+ 9f0:	c3                   	ret    
+ 9f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9ff:	90                   	nop
+
+00000a00 <randomrange>:
+
+int randomrange(int low, int high){
+ a00:	55                   	push   %ebp
+ a01:	89 e5                	mov    %esp,%ebp
+ a03:	57                   	push   %edi
+ a04:	56                   	push   %esi
+ a05:	53                   	push   %ebx
+ a06:	83 ec 0c             	sub    $0xc,%esp
+ a09:	8b 75 08             	mov    0x8(%ebp),%esi
+ a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a0f:	39 f0                	cmp    %esi,%eax
+ a11:	7d 06                	jge    a19 <randomrange+0x19>
+ a13:	89 f2                	mov    %esi,%edx
+ a15:	89 c6                	mov    %eax,%esi
+ a17:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a19:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a1b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a20:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a22:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a25:	89 d8                	mov    %ebx,%eax
+ a27:	f7 f1                	div    %ecx
+ a29:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ a2b:	29 d3                	sub    %edx,%ebx
+ a2d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ a30:	e8 2b fe ff ff       	call   860 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a35:	39 d8                	cmp    %ebx,%eax
+ a37:	73 f7                	jae    a30 <randomrange+0x30>
+  return x/bin_size;
+ a39:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ a3b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a3e:	f7 f7                	div    %edi
+}
+ a40:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a41:	01 f0                	add    %esi,%eax
+}
+ a43:	5e                   	pop    %esi
+ a44:	5f                   	pop    %edi
+ a45:	5d                   	pop    %ebp
+ a46:	c3                   	ret    
Binary files xv6-public/initcode.o and xv6-public-with-hybrid/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public-with-hybrid/initcode.out differ
diff -ruN xv6-public/init.d xv6-public-with-hybrid/init.d
--- xv6-public/init.d	2022-09-06 09:47:09.761757000 +0530
+++ xv6-public-with-hybrid/init.d	2022-10-07 18:49:59.764955348 +0530
@@ -1 +1,2 @@
-init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h fcntl.h
Binary files xv6-public/init.o and xv6-public-with-hybrid/init.o differ
diff -ruN xv6-public/init.sym xv6-public-with-hybrid/init.sym
--- xv6-public/init.sym	2022-09-06 09:47:09.785740000 +0530
+++ xv6-public-with-hybrid/init.sym	2022-10-07 18:49:59.848955104 +0530
@@ -1,21 +1,29 @@
 00000000 init.c
 00000000 ulib.c
 00000000 printf.c
-00000410 printint
-00000898 digits.0
+00000440 printint
+00000af8 digits.0
 00000000 umalloc.c
-00000b4c freep
-00000b50 base
+00000e40 freep
+00000e44 base
+00000000 random.c
+00000e60 mt
+00000e3c mti
+00000b0c mag01.0
 000000f0 strcpy
-000004c0 printf
+00000820 sgenrand
+000004f0 printf
 000003f3 thread_exit
-00000b44 argv
+00000e34 argv
 00000310 memmove
 0000038b mknod
 00000210 gets
 000003c3 getpid
-000006f0 malloc
+00000720 malloc
 000003d3 sleep
+00000423 get_burst_time
+000009c0 random_at_most
+0000042b getCurrentInfo
 00000353 pipe
 00000363 write
 0000039b fstat
@@ -28,14 +36,19 @@
 0000033b fork
 000003cb sbrk
 000003db uptime
-00000b4c __bss_start
+00000e40 __bss_start
 000001b0 memset
 00000000 main
+0000041b set_burst_time
 00000120 strcmp
 000003bb dup
+0000040b getMaxPid
+00000860 genrand
+00000403 getNumProc
+00000413 getProcInfo
 00000280 stat
-00000b4c _edata
-00000b58 _end
+00000e40 _edata
+00001820 _end
 000003a3 link
 00000343 exit
 000002d0 atoi
@@ -44,7 +57,9 @@
 00000383 open
 000001d0 strchr
 000003e3 thread_create
+00000433 getCurrentPID
+00000a00 randomrange
 000003ab mkdir
 0000036b close
 000003eb thread_join
-00000660 free
+00000690 free
Binary files xv6-public/ioapic.o and xv6-public-with-hybrid/ioapic.o differ
Binary files xv6-public/_ioProcTester and xv6-public-with-hybrid/_ioProcTester differ
diff -ruN xv6-public/ioProcTester.asm xv6-public-with-hybrid/ioProcTester.asm
--- xv6-public/ioProcTester.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/ioProcTester.asm	2022-10-07 18:50:03.916943146 +0530
@@ -0,0 +1,1647 @@
+
+_ioProcTester:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argv, char* argc[]){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 28             	sub    $0x28,%esp
+
+	if(argv<2){
+  14:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argv, char* argc[]){
+  17:	8b 41 04             	mov    0x4(%ecx),%eax
+	if(argv<2){
+  1a:	7e 3a                	jle    56 <main+0x56>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+  1c:	83 ec 0c             	sub    $0xc,%esp
+  1f:	ff 70 04             	push   0x4(%eax)
+  22:	e8 69 03 00 00       	call   390 <atoi>
+
+	int burst_times[n];
+  27:	83 c4 10             	add    $0x10,%esp
+	int n=atoi(argc[1]);
+  2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+	int burst_times[n];
+  2d:	8d 04 85 0f 00 00 00 	lea    0xf(,%eax,4),%eax
+  34:	89 e1                	mov    %esp,%ecx
+  36:	89 c2                	mov    %eax,%edx
+  38:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  3d:	83 e2 f0             	and    $0xfffffff0,%edx
+  40:	29 c1                	sub    %eax,%ecx
+  42:	39 cc                	cmp    %ecx,%esp
+  44:	74 23                	je     69 <main+0x69>
+  46:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  4c:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  53:	00 
+  54:	eb ec                	jmp    42 <main+0x42>
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+  56:	51                   	push   %ecx
+  57:	51                   	push   %ecx
+  58:	68 08 0b 00 00       	push   $0xb08
+  5d:	6a 01                	push   $0x1
+  5f:	e8 4c 05 00 00       	call   5b0 <printf>
+		exit();
+  64:	e8 9a 03 00 00       	call   403 <exit>
+	int burst_times[n];
+  69:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
+  6f:	29 d4                	sub    %edx,%esp
+  71:	85 d2                	test   %edx,%edx
+  73:	74 05                	je     7a <main+0x7a>
+  75:	83 4c 14 fc 00       	orl    $0x0,-0x4(%esp,%edx,1)
+
+	for(int i=0;i<n;i++){
+  7a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
+	int burst_times[n];
+  7e:	89 e6                	mov    %esp,%esi
+	for(int i=0;i<n;i++){
+  80:	0f 8e d1 00 00 00    	jle    157 <main+0x157>
+  86:	31 db                	xor    %ebx,%ebx
+  88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8f:	90                   	nop
+		burst_times[i] = randomrange(1,1000);
+  90:	83 ec 08             	sub    $0x8,%esp
+  93:	89 df                	mov    %ebx,%edi
+  95:	68 e8 03 00 00       	push   $0x3e8
+  9a:	6a 01                	push   $0x1
+  9c:	e8 1f 0a 00 00       	call   ac0 <randomrange>
+	for(int i=0;i<n;i++){
+  a1:	83 c4 10             	add    $0x10,%esp
+		burst_times[i] = randomrange(1,1000);
+  a4:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
+	for(int i=0;i<n;i++){
+  a7:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  aa:	39 5d d4             	cmp    %ebx,-0x2c(%ebp)
+  ad:	75 e1                	jne    90 <main+0x90>
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  af:	53                   	push   %ebx
+  b0:	53                   	push   %ebx
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  b1:	31 db                	xor    %ebx,%ebx
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  b3:	68 a4 0b 00 00       	push   $0xba4
+  b8:	6a 01                	push   $0x1
+  ba:	e8 f1 04 00 00       	call   5b0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  bf:	58                   	pop    %eax
+  c0:	5a                   	pop    %edx
+  c1:	68 d4 0b 00 00       	push   $0xbd4
+  c6:	6a 01                	push   $0x1
+  c8:	e8 e3 04 00 00       	call   5b0 <printf>
+  cd:	83 c4 10             	add    $0x10,%esp
+  d0:	eb 13                	jmp    e5 <main+0xe5>
+  d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+	for(int i=0;i<n;i++){
+  d8:	8d 43 01             	lea    0x1(%ebx),%eax
+  db:	39 fb                	cmp    %edi,%ebx
+  dd:	0f 84 93 00 00 00    	je     176 <main+0x176>
+  e3:	89 c3                	mov    %eax,%ebx
+		if(!fork()){
+  e5:	e8 11 03 00 00       	call   3fb <fork>
+  ea:	85 c0                	test   %eax,%eax
+  ec:	75 ea                	jne    d8 <main+0xd8>
+
+			// CPU Bound process
+			set_burst_time(burst_times[i]);
+  ee:	83 ec 0c             	sub    $0xc,%esp
+  f1:	ff 34 9e             	push   (%esi,%ebx,4)
+  f4:	bb 14 00 00 00       	mov    $0x14,%ebx
+  f9:	e8 dd 03 00 00       	call   4db <set_burst_time>
+  fe:	83 c4 10             	add    $0x10,%esp
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+			for(int i=0;i<20;i++){
+				sleep(1);
+ 108:	83 ec 0c             	sub    $0xc,%esp
+ 10b:	6a 01                	push   $0x1
+ 10d:	e8 81 03 00 00       	call   493 <sleep>
+			for(int i=0;i<20;i++){
+ 112:	83 c4 10             	add    $0x10,%esp
+ 115:	83 eb 01             	sub    $0x1,%ebx
+ 118:	75 ee                	jne    108 <main+0x108>
+			}
+			
+			struct processInfo info;
+			getCurrentInfo(&info);
+ 11a:	83 ec 0c             	sub    $0xc,%esp
+ 11d:	8d 45 dc             	lea    -0x24(%ebp),%eax
+ 120:	50                   	push   %eax
+ 121:	e8 c5 03 00 00       	call   4eb <getCurrentInfo>
+			int bt = get_burst_time();
+ 126:	e8 b8 03 00 00       	call   4e3 <get_burst_time>
+			if(bt<10)
+				printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 12b:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+			if(bt<10)
+ 12e:	83 c4 10             	add    $0x10,%esp
+			int bt = get_burst_time();
+ 131:	89 c3                	mov    %eax,%ebx
+			if(bt<10)
+ 133:	83 f8 09             	cmp    $0x9,%eax
+ 136:	7f 54                	jg     18c <main+0x18c>
+				printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 138:	e8 b6 03 00 00       	call   4f3 <getCurrentPID>
+ 13d:	83 ec 0c             	sub    $0xc,%esp
+ 140:	56                   	push   %esi
+ 141:	53                   	push   %ebx
+ 142:	50                   	push   %eax
+ 143:	68 4c 0b 00 00       	push   $0xb4c
+ 148:	6a 01                	push   $0x1
+ 14a:	e8 61 04 00 00       	call   5b0 <printf>
+ 14f:	83 c4 20             	add    $0x20,%esp
+			else
+				printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			exit();
+ 152:	e8 ac 02 00 00       	call   403 <exit>
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+ 157:	50                   	push   %eax
+ 158:	50                   	push   %eax
+ 159:	68 a4 0b 00 00       	push   $0xba4
+ 15e:	6a 01                	push   $0x1
+ 160:	e8 4b 04 00 00       	call   5b0 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+ 165:	5a                   	pop    %edx
+ 166:	59                   	pop    %ecx
+ 167:	68 d4 0b 00 00       	push   $0xbd4
+ 16c:	6a 01                	push   $0x1
+ 16e:	e8 3d 04 00 00       	call   5b0 <printf>
+ 173:	83 c4 10             	add    $0x10,%esp
+
+
+		}
+	}
+
+	while(wait()!=-1);
+ 176:	e8 90 02 00 00       	call   40b <wait>
+ 17b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 17e:	74 d2                	je     152 <main+0x152>
+ 180:	e8 86 02 00 00       	call   40b <wait>
+ 185:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 188:	75 ec                	jne    176 <main+0x176>
+ 18a:	eb c6                	jmp    152 <main+0x152>
+				printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 18c:	e8 62 03 00 00       	call   4f3 <getCurrentPID>
+ 191:	83 ec 0c             	sub    $0xc,%esp
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+ 196:	50                   	push   %eax
+ 197:	68 78 0b 00 00       	push   $0xb78
+ 19c:	6a 01                	push   $0x1
+ 19e:	e8 0d 04 00 00       	call   5b0 <printf>
+ 1a3:	83 c4 20             	add    $0x20,%esp
+ 1a6:	eb aa                	jmp    152 <main+0x152>
+ 1a8:	66 90                	xchg   %ax,%ax
+ 1aa:	66 90                	xchg   %ax,%ax
+ 1ac:	66 90                	xchg   %ax,%ax
+ 1ae:	66 90                	xchg   %ax,%ax
+
+000001b0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 1b0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 1b1:	31 c0                	xor    %eax,%eax
+{
+ 1b3:	89 e5                	mov    %esp,%ebp
+ 1b5:	53                   	push   %ebx
+ 1b6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1b9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 1bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 1c0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1c4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1c7:	83 c0 01             	add    $0x1,%eax
+ 1ca:	84 d2                	test   %dl,%dl
+ 1cc:	75 f2                	jne    1c0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1d1:	89 c8                	mov    %ecx,%eax
+ 1d3:	c9                   	leave  
+ 1d4:	c3                   	ret    
+ 1d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001e0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	53                   	push   %ebx
+ 1e4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1ea:	0f b6 02             	movzbl (%edx),%eax
+ 1ed:	84 c0                	test   %al,%al
+ 1ef:	75 17                	jne    208 <strcmp+0x28>
+ 1f1:	eb 3a                	jmp    22d <strcmp+0x4d>
+ 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f7:	90                   	nop
+ 1f8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 1fc:	83 c2 01             	add    $0x1,%edx
+ 1ff:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 202:	84 c0                	test   %al,%al
+ 204:	74 1a                	je     220 <strcmp+0x40>
+    p++, q++;
+ 206:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 208:	0f b6 19             	movzbl (%ecx),%ebx
+ 20b:	38 c3                	cmp    %al,%bl
+ 20d:	74 e9                	je     1f8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 20f:	29 d8                	sub    %ebx,%eax
+}
+ 211:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 214:	c9                   	leave  
+ 215:	c3                   	ret    
+ 216:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 220:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 224:	31 c0                	xor    %eax,%eax
+ 226:	29 d8                	sub    %ebx,%eax
+}
+ 228:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 22b:	c9                   	leave  
+ 22c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 22d:	0f b6 19             	movzbl (%ecx),%ebx
+ 230:	31 c0                	xor    %eax,%eax
+ 232:	eb db                	jmp    20f <strcmp+0x2f>
+ 234:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+
+00000240 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 246:	80 3a 00             	cmpb   $0x0,(%edx)
+ 249:	74 15                	je     260 <strlen+0x20>
+ 24b:	31 c0                	xor    %eax,%eax
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+ 250:	83 c0 01             	add    $0x1,%eax
+ 253:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 257:	89 c1                	mov    %eax,%ecx
+ 259:	75 f5                	jne    250 <strlen+0x10>
+    ;
+  return n;
+}
+ 25b:	89 c8                	mov    %ecx,%eax
+ 25d:	5d                   	pop    %ebp
+ 25e:	c3                   	ret    
+ 25f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 260:	31 c9                	xor    %ecx,%ecx
+}
+ 262:	5d                   	pop    %ebp
+ 263:	89 c8                	mov    %ecx,%eax
+ 265:	c3                   	ret    
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000270 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	57                   	push   %edi
+ 274:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 277:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 27a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 27d:	89 d7                	mov    %edx,%edi
+ 27f:	fc                   	cld    
+ 280:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 282:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 285:	89 d0                	mov    %edx,%eax
+ 287:	c9                   	leave  
+ 288:	c3                   	ret    
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	8b 45 08             	mov    0x8(%ebp),%eax
+ 296:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 29a:	0f b6 10             	movzbl (%eax),%edx
+ 29d:	84 d2                	test   %dl,%dl
+ 29f:	75 12                	jne    2b3 <strchr+0x23>
+ 2a1:	eb 1d                	jmp    2c0 <strchr+0x30>
+ 2a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2a7:	90                   	nop
+ 2a8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 2ac:	83 c0 01             	add    $0x1,%eax
+ 2af:	84 d2                	test   %dl,%dl
+ 2b1:	74 0d                	je     2c0 <strchr+0x30>
+    if(*s == c)
+ 2b3:	38 d1                	cmp    %dl,%cl
+ 2b5:	75 f1                	jne    2a8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 2b7:	5d                   	pop    %ebp
+ 2b8:	c3                   	ret    
+ 2b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2c0:	31 c0                	xor    %eax,%eax
+}
+ 2c2:	5d                   	pop    %ebp
+ 2c3:	c3                   	ret    
+ 2c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2cf:	90                   	nop
+
+000002d0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	57                   	push   %edi
+ 2d4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 2d5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 2d8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 2d9:	31 db                	xor    %ebx,%ebx
+{
+ 2db:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 2de:	eb 27                	jmp    307 <gets+0x37>
+    cc = read(0, &c, 1);
+ 2e0:	83 ec 04             	sub    $0x4,%esp
+ 2e3:	6a 01                	push   $0x1
+ 2e5:	57                   	push   %edi
+ 2e6:	6a 00                	push   $0x0
+ 2e8:	e8 2e 01 00 00       	call   41b <read>
+    if(cc < 1)
+ 2ed:	83 c4 10             	add    $0x10,%esp
+ 2f0:	85 c0                	test   %eax,%eax
+ 2f2:	7e 1d                	jle    311 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 2f4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2f8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2fb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 2ff:	3c 0a                	cmp    $0xa,%al
+ 301:	74 1d                	je     320 <gets+0x50>
+ 303:	3c 0d                	cmp    $0xd,%al
+ 305:	74 19                	je     320 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 307:	89 de                	mov    %ebx,%esi
+ 309:	83 c3 01             	add    $0x1,%ebx
+ 30c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 30f:	7c cf                	jl     2e0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 311:	8b 45 08             	mov    0x8(%ebp),%eax
+ 314:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 318:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31b:	5b                   	pop    %ebx
+ 31c:	5e                   	pop    %esi
+ 31d:	5f                   	pop    %edi
+ 31e:	5d                   	pop    %ebp
+ 31f:	c3                   	ret    
+  buf[i] = '\0';
+ 320:	8b 45 08             	mov    0x8(%ebp),%eax
+ 323:	89 de                	mov    %ebx,%esi
+ 325:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 329:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 32c:	5b                   	pop    %ebx
+ 32d:	5e                   	pop    %esi
+ 32e:	5f                   	pop    %edi
+ 32f:	5d                   	pop    %ebp
+ 330:	c3                   	ret    
+ 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 338:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 33f:	90                   	nop
+
+00000340 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 340:	55                   	push   %ebp
+ 341:	89 e5                	mov    %esp,%ebp
+ 343:	56                   	push   %esi
+ 344:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 345:	83 ec 08             	sub    $0x8,%esp
+ 348:	6a 00                	push   $0x0
+ 34a:	ff 75 08             	push   0x8(%ebp)
+ 34d:	e8 f1 00 00 00       	call   443 <open>
+  if(fd < 0)
+ 352:	83 c4 10             	add    $0x10,%esp
+ 355:	85 c0                	test   %eax,%eax
+ 357:	78 27                	js     380 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 359:	83 ec 08             	sub    $0x8,%esp
+ 35c:	ff 75 0c             	push   0xc(%ebp)
+ 35f:	89 c3                	mov    %eax,%ebx
+ 361:	50                   	push   %eax
+ 362:	e8 f4 00 00 00       	call   45b <fstat>
+  close(fd);
+ 367:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 36a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 36c:	e8 ba 00 00 00       	call   42b <close>
+  return r;
+ 371:	83 c4 10             	add    $0x10,%esp
+}
+ 374:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 377:	89 f0                	mov    %esi,%eax
+ 379:	5b                   	pop    %ebx
+ 37a:	5e                   	pop    %esi
+ 37b:	5d                   	pop    %ebp
+ 37c:	c3                   	ret    
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 380:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 385:	eb ed                	jmp    374 <stat+0x34>
+ 387:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 38e:	66 90                	xchg   %ax,%ax
+
+00000390 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	53                   	push   %ebx
+ 394:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 397:	0f be 02             	movsbl (%edx),%eax
+ 39a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 39d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 3a0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 3a5:	77 1e                	ja     3c5 <atoi+0x35>
+ 3a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ae:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 3b0:	83 c2 01             	add    $0x1,%edx
+ 3b3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3b6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3ba:	0f be 02             	movsbl (%edx),%eax
+ 3bd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3c0:	80 fb 09             	cmp    $0x9,%bl
+ 3c3:	76 eb                	jbe    3b0 <atoi+0x20>
+  return n;
+}
+ 3c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3c8:	89 c8                	mov    %ecx,%eax
+ 3ca:	c9                   	leave  
+ 3cb:	c3                   	ret    
+ 3cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003d0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3d7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3da:	56                   	push   %esi
+ 3db:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3de:	85 c0                	test   %eax,%eax
+ 3e0:	7e 13                	jle    3f5 <memmove+0x25>
+ 3e2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3e4:	89 d7                	mov    %edx,%edi
+ 3e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3f0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3f1:	39 f8                	cmp    %edi,%eax
+ 3f3:	75 fb                	jne    3f0 <memmove+0x20>
+  return vdst;
+}
+ 3f5:	5e                   	pop    %esi
+ 3f6:	89 d0                	mov    %edx,%eax
+ 3f8:	5f                   	pop    %edi
+ 3f9:	5d                   	pop    %ebp
+ 3fa:	c3                   	ret    
+
+000003fb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3fb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <exit>:
+SYSCALL(exit)
+ 403:	b8 02 00 00 00       	mov    $0x2,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <wait>:
+SYSCALL(wait)
+ 40b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <pipe>:
+SYSCALL(pipe)
+ 413:	b8 04 00 00 00       	mov    $0x4,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <read>:
+SYSCALL(read)
+ 41b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <write>:
+SYSCALL(write)
+ 423:	b8 10 00 00 00       	mov    $0x10,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <close>:
+SYSCALL(close)
+ 42b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <kill>:
+SYSCALL(kill)
+ 433:	b8 06 00 00 00       	mov    $0x6,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <exec>:
+SYSCALL(exec)
+ 43b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <open>:
+SYSCALL(open)
+ 443:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <mknod>:
+SYSCALL(mknod)
+ 44b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <unlink>:
+SYSCALL(unlink)
+ 453:	b8 12 00 00 00       	mov    $0x12,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <fstat>:
+SYSCALL(fstat)
+ 45b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <link>:
+SYSCALL(link)
+ 463:	b8 13 00 00 00       	mov    $0x13,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <mkdir>:
+SYSCALL(mkdir)
+ 46b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <chdir>:
+SYSCALL(chdir)
+ 473:	b8 09 00 00 00       	mov    $0x9,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <dup>:
+SYSCALL(dup)
+ 47b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <getpid>:
+SYSCALL(getpid)
+ 483:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <sbrk>:
+SYSCALL(sbrk)
+ 48b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <sleep>:
+SYSCALL(sleep)
+ 493:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <uptime>:
+SYSCALL(uptime)
+ 49b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <thread_create>:
+SYSCALL(thread_create)
+ 4a3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <thread_join>:
+SYSCALL(thread_join)
+ 4ab:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <thread_exit>:
+SYSCALL(thread_exit)
+ 4b3:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <draw>:
+SYSCALL(draw)
+ 4bb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <getNumProc>:
+SYSCALL(getNumProc)
+ 4c3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+
+000004cb <getMaxPid>:
+SYSCALL(getMaxPid)
+ 4cb:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 4d0:	cd 40                	int    $0x40
+ 4d2:	c3                   	ret    
+
+000004d3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4d3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 4d8:	cd 40                	int    $0x40
+ 4da:	c3                   	ret    
+
+000004db <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4db:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 4e0:	cd 40                	int    $0x40
+ 4e2:	c3                   	ret    
+
+000004e3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4e3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 4e8:	cd 40                	int    $0x40
+ 4ea:	c3                   	ret    
+
+000004eb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 4eb:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 4f0:	cd 40                	int    $0x40
+ 4f2:	c3                   	ret    
+
+000004f3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 4f3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 4f8:	cd 40                	int    $0x40
+ 4fa:	c3                   	ret    
+ 4fb:	66 90                	xchg   %ax,%ax
+ 4fd:	66 90                	xchg   %ax,%ax
+ 4ff:	90                   	nop
+
+00000500 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	57                   	push   %edi
+ 504:	56                   	push   %esi
+ 505:	53                   	push   %ebx
+ 506:	83 ec 3c             	sub    $0x3c,%esp
+ 509:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 50c:	89 d1                	mov    %edx,%ecx
+{
+ 50e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 511:	85 d2                	test   %edx,%edx
+ 513:	0f 89 7f 00 00 00    	jns    598 <printint+0x98>
+ 519:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 51d:	74 79                	je     598 <printint+0x98>
+    neg = 1;
+ 51f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 526:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 528:	31 db                	xor    %ebx,%ebx
+ 52a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 52d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 530:	89 c8                	mov    %ecx,%eax
+ 532:	31 d2                	xor    %edx,%edx
+ 534:	89 cf                	mov    %ecx,%edi
+ 536:	f7 75 c4             	divl   -0x3c(%ebp)
+ 539:	0f b6 92 64 0c 00 00 	movzbl 0xc64(%edx),%edx
+ 540:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 543:	89 d8                	mov    %ebx,%eax
+ 545:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 548:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 54b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 54e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 551:	76 dd                	jbe    530 <printint+0x30>
+  if(neg)
+ 553:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 556:	85 c9                	test   %ecx,%ecx
+ 558:	74 0c                	je     566 <printint+0x66>
+    buf[i++] = '-';
+ 55a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 55f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 561:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 566:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 569:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 56d:	eb 07                	jmp    576 <printint+0x76>
+ 56f:	90                   	nop
+    putc(fd, buf[i]);
+ 570:	0f b6 13             	movzbl (%ebx),%edx
+ 573:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 576:	83 ec 04             	sub    $0x4,%esp
+ 579:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 57c:	6a 01                	push   $0x1
+ 57e:	56                   	push   %esi
+ 57f:	57                   	push   %edi
+ 580:	e8 9e fe ff ff       	call   423 <write>
+  while(--i >= 0)
+ 585:	83 c4 10             	add    $0x10,%esp
+ 588:	39 de                	cmp    %ebx,%esi
+ 58a:	75 e4                	jne    570 <printint+0x70>
+}
+ 58c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 58f:	5b                   	pop    %ebx
+ 590:	5e                   	pop    %esi
+ 591:	5f                   	pop    %edi
+ 592:	5d                   	pop    %ebp
+ 593:	c3                   	ret    
+ 594:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 598:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 59f:	eb 87                	jmp    528 <printint+0x28>
+ 5a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+
+000005b0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 5b0:	55                   	push   %ebp
+ 5b1:	89 e5                	mov    %esp,%ebp
+ 5b3:	57                   	push   %edi
+ 5b4:	56                   	push   %esi
+ 5b5:	53                   	push   %ebx
+ 5b6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5b9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 5bc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 5bf:	0f b6 13             	movzbl (%ebx),%edx
+ 5c2:	84 d2                	test   %dl,%dl
+ 5c4:	74 6a                	je     630 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 5c6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 5c9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 5cc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 5cf:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d4:	eb 36                	jmp    60c <printf+0x5c>
+ 5d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 5e0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5e3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 5e8:	83 f8 25             	cmp    $0x25,%eax
+ 5eb:	74 15                	je     602 <printf+0x52>
+  write(fd, &c, 1);
+ 5ed:	83 ec 04             	sub    $0x4,%esp
+ 5f0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5f3:	6a 01                	push   $0x1
+ 5f5:	57                   	push   %edi
+ 5f6:	56                   	push   %esi
+ 5f7:	e8 27 fe ff ff       	call   423 <write>
+ 5fc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 5ff:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 602:	0f b6 13             	movzbl (%ebx),%edx
+ 605:	83 c3 01             	add    $0x1,%ebx
+ 608:	84 d2                	test   %dl,%dl
+ 60a:	74 24                	je     630 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 60c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 60f:	85 c9                	test   %ecx,%ecx
+ 611:	74 cd                	je     5e0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 613:	83 f9 25             	cmp    $0x25,%ecx
+ 616:	75 ea                	jne    602 <printf+0x52>
+      if(c == 'd'){
+ 618:	83 f8 25             	cmp    $0x25,%eax
+ 61b:	0f 84 07 01 00 00    	je     728 <printf+0x178>
+ 621:	83 e8 63             	sub    $0x63,%eax
+ 624:	83 f8 15             	cmp    $0x15,%eax
+ 627:	77 17                	ja     640 <printf+0x90>
+ 629:	ff 24 85 0c 0c 00 00 	jmp    *0xc0c(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 630:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 633:	5b                   	pop    %ebx
+ 634:	5e                   	pop    %esi
+ 635:	5f                   	pop    %edi
+ 636:	5d                   	pop    %ebp
+ 637:	c3                   	ret    
+ 638:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+  write(fd, &c, 1);
+ 640:	83 ec 04             	sub    $0x4,%esp
+ 643:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 646:	6a 01                	push   $0x1
+ 648:	57                   	push   %edi
+ 649:	56                   	push   %esi
+ 64a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 64e:	e8 d0 fd ff ff       	call   423 <write>
+        putc(fd, c);
+ 653:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 657:	83 c4 0c             	add    $0xc,%esp
+ 65a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 65d:	6a 01                	push   $0x1
+ 65f:	57                   	push   %edi
+ 660:	56                   	push   %esi
+ 661:	e8 bd fd ff ff       	call   423 <write>
+        putc(fd, c);
+ 666:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 669:	31 c9                	xor    %ecx,%ecx
+ 66b:	eb 95                	jmp    602 <printf+0x52>
+ 66d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 670:	83 ec 0c             	sub    $0xc,%esp
+ 673:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 678:	6a 00                	push   $0x0
+ 67a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 67d:	8b 10                	mov    (%eax),%edx
+ 67f:	89 f0                	mov    %esi,%eax
+ 681:	e8 7a fe ff ff       	call   500 <printint>
+        ap++;
+ 686:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 68a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 68d:	31 c9                	xor    %ecx,%ecx
+ 68f:	e9 6e ff ff ff       	jmp    602 <printf+0x52>
+ 694:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 698:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 69b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 69d:	83 c0 04             	add    $0x4,%eax
+ 6a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6a3:	85 d2                	test   %edx,%edx
+ 6a5:	0f 84 8d 00 00 00    	je     738 <printf+0x188>
+        while(*s != 0){
+ 6ab:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 6ae:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 6b0:	84 c0                	test   %al,%al
+ 6b2:	0f 84 4a ff ff ff    	je     602 <printf+0x52>
+ 6b8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6bb:	89 d3                	mov    %edx,%ebx
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 6c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6c3:	83 c3 01             	add    $0x1,%ebx
+ 6c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6c9:	6a 01                	push   $0x1
+ 6cb:	57                   	push   %edi
+ 6cc:	56                   	push   %esi
+ 6cd:	e8 51 fd ff ff       	call   423 <write>
+        while(*s != 0){
+ 6d2:	0f b6 03             	movzbl (%ebx),%eax
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	84 c0                	test   %al,%al
+ 6da:	75 e4                	jne    6c0 <printf+0x110>
+      state = 0;
+ 6dc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 6df:	31 c9                	xor    %ecx,%ecx
+ 6e1:	e9 1c ff ff ff       	jmp    602 <printf+0x52>
+ 6e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 6f0:	83 ec 0c             	sub    $0xc,%esp
+ 6f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6f8:	6a 01                	push   $0x1
+ 6fa:	e9 7b ff ff ff       	jmp    67a <printf+0xca>
+ 6ff:	90                   	nop
+        putc(fd, *ap);
+ 700:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 703:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 706:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 708:	6a 01                	push   $0x1
+ 70a:	57                   	push   %edi
+ 70b:	56                   	push   %esi
+        putc(fd, *ap);
+ 70c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 70f:	e8 0f fd ff ff       	call   423 <write>
+        ap++;
+ 714:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 718:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 71b:	31 c9                	xor    %ecx,%ecx
+ 71d:	e9 e0 fe ff ff       	jmp    602 <printf+0x52>
+ 722:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 728:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 72b:	83 ec 04             	sub    $0x4,%esp
+ 72e:	e9 2a ff ff ff       	jmp    65d <printf+0xad>
+ 733:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 737:	90                   	nop
+          s = "(null)";
+ 738:	ba 02 0c 00 00       	mov    $0xc02,%edx
+        while(*s != 0){
+ 73d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 740:	b8 28 00 00 00       	mov    $0x28,%eax
+ 745:	89 d3                	mov    %edx,%ebx
+ 747:	e9 74 ff ff ff       	jmp    6c0 <printf+0x110>
+ 74c:	66 90                	xchg   %ax,%ax
+ 74e:	66 90                	xchg   %ax,%ax
+
+00000750 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 750:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 751:	a1 c0 0f 00 00       	mov    0xfc0,%eax
+{
+ 756:	89 e5                	mov    %esp,%ebp
+ 758:	57                   	push   %edi
+ 759:	56                   	push   %esi
+ 75a:	53                   	push   %ebx
+ 75b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 75e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 768:	89 c2                	mov    %eax,%edx
+ 76a:	8b 00                	mov    (%eax),%eax
+ 76c:	39 ca                	cmp    %ecx,%edx
+ 76e:	73 30                	jae    7a0 <free+0x50>
+ 770:	39 c1                	cmp    %eax,%ecx
+ 772:	72 04                	jb     778 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 774:	39 c2                	cmp    %eax,%edx
+ 776:	72 f0                	jb     768 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 778:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 77b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 77e:	39 f8                	cmp    %edi,%eax
+ 780:	74 30                	je     7b2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 782:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 785:	8b 42 04             	mov    0x4(%edx),%eax
+ 788:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 78b:	39 f1                	cmp    %esi,%ecx
+ 78d:	74 3a                	je     7c9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 78f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 791:	5b                   	pop    %ebx
+  freep = p;
+ 792:	89 15 c0 0f 00 00    	mov    %edx,0xfc0
+}
+ 798:	5e                   	pop    %esi
+ 799:	5f                   	pop    %edi
+ 79a:	5d                   	pop    %ebp
+ 79b:	c3                   	ret    
+ 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7a0:	39 c2                	cmp    %eax,%edx
+ 7a2:	72 c4                	jb     768 <free+0x18>
+ 7a4:	39 c1                	cmp    %eax,%ecx
+ 7a6:	73 c0                	jae    768 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 7a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 7ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 7ae:	39 f8                	cmp    %edi,%eax
+ 7b0:	75 d0                	jne    782 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 7b2:	03 70 04             	add    0x4(%eax),%esi
+ 7b5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7b8:	8b 02                	mov    (%edx),%eax
+ 7ba:	8b 00                	mov    (%eax),%eax
+ 7bc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7bf:	8b 42 04             	mov    0x4(%edx),%eax
+ 7c2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 7c5:	39 f1                	cmp    %esi,%ecx
+ 7c7:	75 c6                	jne    78f <free+0x3f>
+    p->s.size += bp->s.size;
+ 7c9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 7cc:	89 15 c0 0f 00 00    	mov    %edx,0xfc0
+    p->s.size += bp->s.size;
+ 7d2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 7d5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 7d8:	89 0a                	mov    %ecx,(%edx)
+}
+ 7da:	5b                   	pop    %ebx
+ 7db:	5e                   	pop    %esi
+ 7dc:	5f                   	pop    %edi
+ 7dd:	5d                   	pop    %ebp
+ 7de:	c3                   	ret    
+ 7df:	90                   	nop
+
+000007e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7e0:	55                   	push   %ebp
+ 7e1:	89 e5                	mov    %esp,%ebp
+ 7e3:	57                   	push   %edi
+ 7e4:	56                   	push   %esi
+ 7e5:	53                   	push   %ebx
+ 7e6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7ec:	8b 3d c0 0f 00 00    	mov    0xfc0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7f2:	8d 70 07             	lea    0x7(%eax),%esi
+ 7f5:	c1 ee 03             	shr    $0x3,%esi
+ 7f8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7fb:	85 ff                	test   %edi,%edi
+ 7fd:	0f 84 9d 00 00 00    	je     8a0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 803:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 805:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 808:	39 f1                	cmp    %esi,%ecx
+ 80a:	73 6a                	jae    876 <malloc+0x96>
+ 80c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 811:	39 de                	cmp    %ebx,%esi
+ 813:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 816:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 81d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 820:	eb 17                	jmp    839 <malloc+0x59>
+ 822:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 828:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 82a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 82d:	39 f1                	cmp    %esi,%ecx
+ 82f:	73 4f                	jae    880 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 831:	8b 3d c0 0f 00 00    	mov    0xfc0,%edi
+ 837:	89 c2                	mov    %eax,%edx
+ 839:	39 d7                	cmp    %edx,%edi
+ 83b:	75 eb                	jne    828 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 83d:	83 ec 0c             	sub    $0xc,%esp
+ 840:	ff 75 e4             	push   -0x1c(%ebp)
+ 843:	e8 43 fc ff ff       	call   48b <sbrk>
+  if(p == (char*)-1)
+ 848:	83 c4 10             	add    $0x10,%esp
+ 84b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 84e:	74 1c                	je     86c <malloc+0x8c>
+  hp->s.size = nu;
+ 850:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 853:	83 ec 0c             	sub    $0xc,%esp
+ 856:	83 c0 08             	add    $0x8,%eax
+ 859:	50                   	push   %eax
+ 85a:	e8 f1 fe ff ff       	call   750 <free>
+  return freep;
+ 85f:	8b 15 c0 0f 00 00    	mov    0xfc0,%edx
+      if((p = morecore(nunits)) == 0)
+ 865:	83 c4 10             	add    $0x10,%esp
+ 868:	85 d2                	test   %edx,%edx
+ 86a:	75 bc                	jne    828 <malloc+0x48>
+        return 0;
+  }
+}
+ 86c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 86f:	31 c0                	xor    %eax,%eax
+}
+ 871:	5b                   	pop    %ebx
+ 872:	5e                   	pop    %esi
+ 873:	5f                   	pop    %edi
+ 874:	5d                   	pop    %ebp
+ 875:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 876:	89 d0                	mov    %edx,%eax
+ 878:	89 fa                	mov    %edi,%edx
+ 87a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 880:	39 ce                	cmp    %ecx,%esi
+ 882:	74 4c                	je     8d0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 884:	29 f1                	sub    %esi,%ecx
+ 886:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 889:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 88c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 88f:	89 15 c0 0f 00 00    	mov    %edx,0xfc0
+}
+ 895:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 898:	83 c0 08             	add    $0x8,%eax
+}
+ 89b:	5b                   	pop    %ebx
+ 89c:	5e                   	pop    %esi
+ 89d:	5f                   	pop    %edi
+ 89e:	5d                   	pop    %ebp
+ 89f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 8a0:	c7 05 c0 0f 00 00 c4 	movl   $0xfc4,0xfc0
+ 8a7:	0f 00 00 
+    base.s.size = 0;
+ 8aa:	bf c4 0f 00 00       	mov    $0xfc4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8af:	c7 05 c4 0f 00 00 c4 	movl   $0xfc4,0xfc4
+ 8b6:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8b9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 8bb:	c7 05 c8 0f 00 00 00 	movl   $0x0,0xfc8
+ 8c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8c5:	e9 42 ff ff ff       	jmp    80c <malloc+0x2c>
+ 8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8d0:	8b 08                	mov    (%eax),%ecx
+ 8d2:	89 0a                	mov    %ecx,(%edx)
+ 8d4:	eb b9                	jmp    88f <malloc+0xaf>
+ 8d6:	66 90                	xchg   %ax,%ax
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 8e0:	55                   	push   %ebp
+ 8e1:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 8eb:	89 15 e0 0f 00 00    	mov    %edx,0xfe0
+    for (mti=1; mti<N; mti++)
+ 8f1:	eb 08                	jmp    8fb <sgenrand+0x1b>
+ 8f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8f7:	90                   	nop
+ 8f8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8fb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 901:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 903:	3d 9c 19 00 00       	cmp    $0x199c,%eax
+ 908:	75 ee                	jne    8f8 <sgenrand+0x18>
+ 90a:	c7 05 a8 0f 00 00 70 	movl   $0x270,0xfa8
+ 911:	02 00 00 
+}
+ 914:	5d                   	pop    %ebp
+ 915:	c3                   	ret    
+ 916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 91d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000920 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 920:	a1 a8 0f 00 00       	mov    0xfa8,%eax
+ 925:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 92a:	7f 3d                	jg     969 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 92c:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 933:	8d 50 01             	lea    0x1(%eax),%edx
+ 936:	89 15 a8 0f 00 00    	mov    %edx,0xfa8
+    y ^= TEMPERING_SHIFT_U(y);
+ 93c:	89 ca                	mov    %ecx,%edx
+ 93e:	c1 ea 0b             	shr    $0xb,%edx
+ 941:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 943:	89 d0                	mov    %edx,%eax
+ 945:	c1 e0 07             	shl    $0x7,%eax
+ 948:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 94d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 94f:	89 c2                	mov    %eax,%edx
+ 951:	c1 e2 0f             	shl    $0xf,%edx
+ 954:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 95a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 95c:	89 d0                	mov    %edx,%eax
+ 95e:	c1 e8 12             	shr    $0x12,%eax
+ 961:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 963:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 968:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 969:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 96e:	0f 84 d4 00 00 00    	je     a48 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 974:	31 c0                	xor    %eax,%eax
+ 976:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 97d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 980:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 987:	83 c0 01             	add    $0x1,%eax
+ 98a:	8b 14 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%edx
+ 991:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 997:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 99d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 99f:	89 d1                	mov    %edx,%ecx
+ 9a1:	83 e2 01             	and    $0x1,%edx
+ 9a4:	d1 e9                	shr    %ecx
+ 9a6:	33 0c 85 10 16 00 00 	xor    0x1610(,%eax,4),%ecx
+ 9ad:	33 0c 95 78 0c 00 00 	xor    0xc78(,%edx,4),%ecx
+ 9b4:	89 0c 85 dc 0f 00 00 	mov    %ecx,0xfdc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 9bb:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 9c0:	75 be                	jne    980 <genrand+0x60>
+ 9c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 9c8:	8b 0c 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%ecx
+ 9cf:	83 c0 01             	add    $0x1,%eax
+ 9d2:	8b 14 85 e0 0f 00 00 	mov    0xfe0(,%eax,4),%edx
+ 9d9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9df:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9e5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9e7:	89 d1                	mov    %edx,%ecx
+ 9e9:	83 e2 01             	and    $0x1,%edx
+ 9ec:	d1 e9                	shr    %ecx
+ 9ee:	33 0c 85 50 0c 00 00 	xor    0xc50(,%eax,4),%ecx
+ 9f5:	33 0c 95 78 0c 00 00 	xor    0xc78(,%edx,4),%ecx
+ 9fc:	89 0c 85 dc 0f 00 00 	mov    %ecx,0xfdc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ a03:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ a08:	75 be                	jne    9c8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ a0a:	8b 0d e0 0f 00 00    	mov    0xfe0,%ecx
+ a10:	a1 9c 19 00 00       	mov    0x199c,%eax
+ a15:	89 ca                	mov    %ecx,%edx
+ a17:	25 00 00 00 80       	and    $0x80000000,%eax
+ a1c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a22:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ a24:	89 c2                	mov    %eax,%edx
+ a26:	83 e0 01             	and    $0x1,%eax
+ a29:	d1 ea                	shr    %edx
+ a2b:	33 15 10 16 00 00    	xor    0x1610,%edx
+ a31:	33 14 85 78 0c 00 00 	xor    0xc78(,%eax,4),%edx
+ a38:	89 15 9c 19 00 00    	mov    %edx,0x199c
+ a3e:	ba 01 00 00 00       	mov    $0x1,%edx
+ a43:	e9 ee fe ff ff       	jmp    936 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ a48:	b8 e4 0f 00 00       	mov    $0xfe4,%eax
+ a4d:	b9 9c 19 00 00       	mov    $0x199c,%ecx
+ a52:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a57:	c7 05 e0 0f 00 00 05 	movl   $0x1105,0xfe0
+ a5e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a61:	eb 08                	jmp    a6b <genrand+0x14b>
+ a63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a67:	90                   	nop
+ a68:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a6b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a71:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a73:	39 c1                	cmp    %eax,%ecx
+ a75:	75 f1                	jne    a68 <genrand+0x148>
+ a77:	e9 f8 fe ff ff       	jmp    974 <genrand+0x54>
+ a7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a80 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a80:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a81:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a83:	89 e5                	mov    %esp,%ebp
+ a85:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a86:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a89:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a8a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a8f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a92:	89 d8                	mov    %ebx,%eax
+ a94:	f7 f1                	div    %ecx
+ a96:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a98:	29 d3                	sub    %edx,%ebx
+ a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ aa0:	e8 7b fe ff ff       	call   920 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ aa5:	39 d8                	cmp    %ebx,%eax
+ aa7:	73 f7                	jae    aa0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ aa9:	31 d2                	xor    %edx,%edx
+}
+ aab:	5b                   	pop    %ebx
+  return x/bin_size;
+ aac:	f7 f6                	div    %esi
+}
+ aae:	5e                   	pop    %esi
+ aaf:	5d                   	pop    %ebp
+ ab0:	c3                   	ret    
+ ab1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ ab8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ abf:	90                   	nop
+
+00000ac0 <randomrange>:
+
+int randomrange(int low, int high){
+ ac0:	55                   	push   %ebp
+ ac1:	89 e5                	mov    %esp,%ebp
+ ac3:	57                   	push   %edi
+ ac4:	56                   	push   %esi
+ ac5:	53                   	push   %ebx
+ ac6:	83 ec 0c             	sub    $0xc,%esp
+ ac9:	8b 75 08             	mov    0x8(%ebp),%esi
+ acc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ acf:	39 f0                	cmp    %esi,%eax
+ ad1:	7d 06                	jge    ad9 <randomrange+0x19>
+ ad3:	89 f2                	mov    %esi,%edx
+ ad5:	89 c6                	mov    %eax,%esi
+ ad7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ ad9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ adb:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ ae0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ ae2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ae5:	89 d8                	mov    %ebx,%eax
+ ae7:	f7 f1                	div    %ecx
+ ae9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ aeb:	29 d3                	sub    %edx,%ebx
+ aed:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ af0:	e8 2b fe ff ff       	call   920 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ af5:	39 d8                	cmp    %ebx,%eax
+ af7:	73 f7                	jae    af0 <randomrange+0x30>
+  return x/bin_size;
+ af9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ afb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ afe:	f7 f7                	div    %edi
+}
+ b00:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ b01:	01 f0                	add    %esi,%eax
+}
+ b03:	5e                   	pop    %esi
+ b04:	5f                   	pop    %edi
+ b05:	5d                   	pop    %ebp
+ b06:	c3                   	ret    
diff -ruN xv6-public/ioProcTester.c xv6-public-with-hybrid/ioProcTester.c
--- xv6-public/ioProcTester.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/ioProcTester.c	2022-10-06 17:19:56.860607793 +0530
@@ -0,0 +1,50 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argv, char* argc[]){
+
+	if(argv<2){
+		printf(1, "Incorrect format!\nFormat: test_cpu_only <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+
+	int burst_times[n];
+
+	for(int i=0;i<n;i++){
+		burst_times[i] = randomrange(1,1000);
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+	for(int i=0;i<n;i++){
+		if(!fork()){
+
+			// CPU Bound process
+			set_burst_time(burst_times[i]);
+
+			for(int i=0;i<20;i++){
+				sleep(1);
+			}
+			
+			struct processInfo info;
+			getCurrentInfo(&info);
+			int bt = get_burst_time();
+			if(bt<10)
+				printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			else
+				printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+			exit();
+
+
+		}
+	}
+
+	while(wait()!=-1);
+	exit();
+
+}
diff -ruN xv6-public/ioProcTester.d xv6-public-with-hybrid/ioProcTester.d
--- xv6-public/ioProcTester.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/ioProcTester.d	2022-10-07 18:50:03.840943371 +0530
@@ -0,0 +1,2 @@
+ioProcTester.o: ioProcTester.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h processInfo.h
Binary files xv6-public/ioProcTester.o and xv6-public-with-hybrid/ioProcTester.o differ
diff -ruN xv6-public/ioProcTester.sym xv6-public-with-hybrid/ioProcTester.sym
--- xv6-public/ioProcTester.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/ioProcTester.sym	2022-10-07 18:50:03.932943098 +0530
@@ -0,0 +1,64 @@
+00000000 ioProcTester.c
+00000000 ulib.c
+00000000 printf.c
+00000500 printint
+00000c64 digits.0
+00000000 umalloc.c
+00000fc0 freep
+00000fc4 base
+00000000 random.c
+00000fe0 mt
+00000fa8 mti
+00000c78 mag01.0
+000001b0 strcpy
+000008e0 sgenrand
+000005b0 printf
+000004b3 thread_exit
+000003d0 memmove
+0000044b mknod
+000002d0 gets
+00000483 getpid
+000007e0 malloc
+00000493 sleep
+000004e3 get_burst_time
+00000a80 random_at_most
+000004eb getCurrentInfo
+00000413 pipe
+00000423 write
+0000045b fstat
+00000433 kill
+00000473 chdir
+0000043b exec
+0000040b wait
+0000041b read
+00000453 unlink
+000003fb fork
+0000048b sbrk
+0000049b uptime
+00000fac __bss_start
+00000270 memset
+00000000 main
+000004db set_burst_time
+000001e0 strcmp
+0000047b dup
+000004cb getMaxPid
+00000920 genrand
+000004c3 getNumProc
+000004d3 getProcInfo
+00000340 stat
+00000fac _edata
+000019a0 _end
+00000463 link
+00000403 exit
+00000390 atoi
+000004bb draw
+00000240 strlen
+00000443 open
+00000290 strchr
+000004a3 thread_create
+000004f3 getCurrentPID
+00000ac0 randomrange
+0000046b mkdir
+0000042b close
+000004ab thread_join
+00000750 free
Binary files xv6-public/kalloc.o and xv6-public-with-hybrid/kalloc.o differ
Binary files xv6-public/kbd.o and xv6-public-with-hybrid/kbd.o differ
Binary files xv6-public/kernel and xv6-public-with-hybrid/kernel differ
diff -ruN xv6-public/kernel.asm xv6-public-with-hybrid/kernel.asm
--- xv6-public/kernel.asm	2022-09-06 09:47:05.929388000 +0530
+++ xv6-public-with-hybrid/kernel.asm	2022-10-07 18:50:12.012918658 +0530
@@ -24,7 +24,7 @@
 80100012:	0f 22 e0             	mov    %eax,%cr4
   # Set page directory
   movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
   movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
   # Turn on paging.
@@ -37,7 +37,7 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc d0 55 11 80       	mov    $0x801155d0,%esp
+80100028:	bc f0 6b 11 80       	mov    $0x80116bf0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
@@ -70,22 +70,22 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100044:	bb 54 a5 10 80       	mov    $0x8010a554,%ebx
+80100044:	bb 54 b5 10 80       	mov    $0x8010b554,%ebx
 {
 80100049:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	68 00 76 10 80       	push   $0x80107600
-80100051:	68 20 a5 10 80       	push   $0x8010a520
-80100056:	e8 d5 46 00 00       	call   80104730 <initlock>
+8010004c:	68 20 86 10 80       	push   $0x80108620
+80100051:	68 20 b5 10 80       	push   $0x8010b520
+80100056:	e8 e5 55 00 00       	call   80105640 <initlock>
   bcache.head.next = &bcache.head;
 8010005b:	83 c4 10             	add    $0x10,%esp
-8010005e:	b8 1c ec 10 80       	mov    $0x8010ec1c,%eax
+8010005e:	b8 1c fc 10 80       	mov    $0x8010fc1c,%eax
   bcache.head.prev = &bcache.head;
-80100063:	c7 05 6c ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec6c
-8010006a:	ec 10 80 
+80100063:	c7 05 6c fc 10 80 1c 	movl   $0x8010fc1c,0x8010fc6c
+8010006a:	fc 10 80 
   bcache.head.next = &bcache.head;
-8010006d:	c7 05 70 ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec70
-80100074:	ec 10 80 
+8010006d:	c7 05 70 fc 10 80 1c 	movl   $0x8010fc1c,0x8010fc70
+80100074:	fc 10 80 
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 80100077:	eb 09                	jmp    80100082 <binit+0x42>
 80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -97,13 +97,13 @@
 80100085:	83 ec 08             	sub    $0x8,%esp
 80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
     b->prev = &bcache.head;
-8010008b:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
+8010008b:	c7 43 50 1c fc 10 80 	movl   $0x8010fc1c,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 07 76 10 80       	push   $0x80107607
+80100092:	68 27 86 10 80       	push   $0x80108627
 80100097:	50                   	push   %eax
-80100098:	e8 63 45 00 00       	call   80104600 <initsleeplock>
+80100098:	e8 73 54 00 00       	call   80105510 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
+8010009d:	a1 70 fc 10 80       	mov    0x8010fc70,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
 801000a8:	83 c4 10             	add    $0x10,%esp
@@ -111,9 +111,9 @@
 801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
 801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
+801000b0:	89 1d 70 fc 10 80    	mov    %ebx,0x8010fc70
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb c0 e9 10 80    	cmp    $0x8010e9c0,%ebx
+801000b6:	81 fb c0 f9 10 80    	cmp    $0x8010f9c0,%ebx
 801000bc:	75 c2                	jne    80100080 <binit+0x40>
   }
 }
@@ -139,17 +139,17 @@
 801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
 801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   acquire(&bcache.lock);
-801000df:	68 20 a5 10 80       	push   $0x8010a520
-801000e4:	e8 17 48 00 00       	call   80104900 <acquire>
+801000df:	68 20 b5 10 80       	push   $0x8010b520
+801000e4:	e8 27 57 00 00       	call   80105810 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000e9:	8b 1d 70 ec 10 80    	mov    0x8010ec70,%ebx
+801000e9:	8b 1d 70 fc 10 80    	mov    0x8010fc70,%ebx
 801000ef:	83 c4 10             	add    $0x10,%esp
-801000f2:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+801000f2:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
 801000f8:	75 11                	jne    8010010b <bread+0x3b>
 801000fa:	eb 24                	jmp    80100120 <bread+0x50>
 801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+80100103:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
@@ -163,12 +163,12 @@
 8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010011f:	90                   	nop
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 6c ec 10 80    	mov    0x8010ec6c,%ebx
-80100126:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+80100120:	8b 1d 6c fc 10 80    	mov    0x8010fc6c,%ebx
+80100126:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 6e                	jmp    8010019e <bread+0xce>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
+80100133:	81 fb 1c fc 10 80    	cmp    $0x8010fc1c,%ebx
 80100139:	74 63                	je     8010019e <bread+0xce>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -186,12 +186,12 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 20 a5 10 80       	push   $0x8010a520
-80100162:	e8 39 47 00 00       	call   801048a0 <release>
+8010015d:	68 20 b5 10 80       	push   $0x8010b520
+80100162:	e8 49 56 00 00       	call   801057b0 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 ce 44 00 00       	call   80104640 <acquiresleep>
+8010016d:	e8 de 53 00 00       	call   80105550 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -227,7 +227,7 @@
 8010019d:	c3                   	ret    
   panic("bget: no buffers");
 8010019e:	83 ec 0c             	sub    $0xc,%esp
-801001a1:	68 0e 76 10 80       	push   $0x8010760e
+801001a1:	68 2e 86 10 80       	push   $0x8010862e
 801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
 801001ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801001af:	90                   	nop
@@ -246,7 +246,7 @@
   if(!holdingsleep(&b->lock))
 801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001bd:	50                   	push   %eax
-801001be:	e8 1d 45 00 00       	call   801046e0 <holdingsleep>
+801001be:	e8 2d 54 00 00       	call   801055f0 <holdingsleep>
 801001c3:	83 c4 10             	add    $0x10,%esp
 801001c6:	85 c0                	test   %eax,%eax
 801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
@@ -262,7 +262,7 @@
 801001d4:	e9 07 21 00 00       	jmp    801022e0 <iderw>
     panic("bwrite");
 801001d9:	83 ec 0c             	sub    $0xc,%esp
-801001dc:	68 1f 76 10 80       	push   $0x8010761f
+801001dc:	68 3f 86 10 80       	push   $0x8010863f
 801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
 801001e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801001ed:	8d 76 00             	lea    0x0(%esi),%esi
@@ -283,7 +283,7 @@
 801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001fb:	83 ec 0c             	sub    $0xc,%esp
 801001fe:	56                   	push   %esi
-801001ff:	e8 dc 44 00 00       	call   801046e0 <holdingsleep>
+801001ff:	e8 ec 53 00 00       	call   801055f0 <holdingsleep>
 80100204:	83 c4 10             	add    $0x10,%esp
 80100207:	85 c0                	test   %eax,%eax
 80100209:	74 66                	je     80100271 <brelse+0x81>
@@ -292,11 +292,11 @@
   releasesleep(&b->lock);
 8010020b:	83 ec 0c             	sub    $0xc,%esp
 8010020e:	56                   	push   %esi
-8010020f:	e8 8c 44 00 00       	call   801046a0 <releasesleep>
+8010020f:	e8 9c 53 00 00       	call   801055b0 <releasesleep>
 
   acquire(&bcache.lock);
-80100214:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010021b:	e8 e0 46 00 00       	call   80104900 <acquire>
+80100214:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010021b:	e8 f0 55 00 00       	call   80105810 <acquire>
   b->refcnt--;
 80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -317,30 +317,30 @@
 8010023c:	8b 53 54             	mov    0x54(%ebx),%edx
 8010023f:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100242:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
+80100242:	a1 70 fc 10 80       	mov    0x8010fc70,%eax
     b->prev = &bcache.head;
-80100247:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
+80100247:	c7 43 50 1c fc 10 80 	movl   $0x8010fc1c,0x50(%ebx)
     b->next = bcache.head.next;
 8010024e:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100251:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
+80100251:	a1 70 fc 10 80       	mov    0x8010fc70,%eax
 80100256:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-80100259:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
+80100259:	89 1d 70 fc 10 80    	mov    %ebx,0x8010fc70
   }
   
   release(&bcache.lock);
-8010025f:	c7 45 08 20 a5 10 80 	movl   $0x8010a520,0x8(%ebp)
+8010025f:	c7 45 08 20 b5 10 80 	movl   $0x8010b520,0x8(%ebp)
 }
 80100266:	8d 65 f8             	lea    -0x8(%ebp),%esp
 80100269:	5b                   	pop    %ebx
 8010026a:	5e                   	pop    %esi
 8010026b:	5d                   	pop    %ebp
   release(&bcache.lock);
-8010026c:	e9 2f 46 00 00       	jmp    801048a0 <release>
+8010026c:	e9 3f 55 00 00       	jmp    801057b0 <release>
     panic("brelse");
 80100271:	83 ec 0c             	sub    $0xc,%esp
-80100274:	68 26 76 10 80       	push   $0x80107626
+80100274:	68 46 86 10 80       	push   $0x80108646
 80100279:	e8 02 01 00 00       	call   80100380 <panic>
 8010027e:	66 90                	xchg   %ax,%ax
 
@@ -369,15 +369,15 @@
   iunlock(ip);
 80100294:	e8 c7 15 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
-80100299:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
-801002a0:	e8 5b 46 00 00       	call   80104900 <acquire>
+80100299:	c7 04 24 20 ff 10 80 	movl   $0x8010ff20,(%esp)
+801002a0:	e8 6b 55 00 00       	call   80105810 <acquire>
   while(n > 0){
 801002a5:	83 c4 10             	add    $0x10,%esp
 801002a8:	85 db                	test   %ebx,%ebx
 801002aa:	0f 8e 94 00 00 00    	jle    80100344 <consoleread+0xc4>
     while(input.r == input.w){
-801002b0:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
-801002b5:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+801002b0:	a1 00 ff 10 80       	mov    0x8010ff00,%eax
+801002b5:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
 801002bb:	74 25                	je     801002e2 <consoleread+0x62>
 801002bd:	eb 59                	jmp    80100318 <consoleread+0x98>
 801002bf:	90                   	nop
@@ -388,23 +388,23 @@
       }
       sleep(&input.r, &cons.lock);
 801002c0:	83 ec 08             	sub    $0x8,%esp
-801002c3:	68 20 ef 10 80       	push   $0x8010ef20
-801002c8:	68 00 ef 10 80       	push   $0x8010ef00
-801002cd:	e8 7e 3d 00 00       	call   80104050 <sleep>
+801002c3:	68 20 ff 10 80       	push   $0x8010ff20
+801002c8:	68 00 ff 10 80       	push   $0x8010ff00
+801002cd:	e8 ce 49 00 00       	call   80104ca0 <sleep>
     while(input.r == input.w){
-801002d2:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
+801002d2:	a1 00 ff 10 80       	mov    0x8010ff00,%eax
 801002d7:	83 c4 10             	add    $0x10,%esp
-801002da:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+801002da:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
 801002e0:	75 36                	jne    80100318 <consoleread+0x98>
       if(myproc()->killed){
-801002e2:	e8 c9 36 00 00       	call   801039b0 <myproc>
+801002e2:	e8 c9 3f 00 00       	call   801042b0 <myproc>
 801002e7:	8b 48 24             	mov    0x24(%eax),%ecx
 801002ea:	85 c9                	test   %ecx,%ecx
 801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
         release(&cons.lock);
 801002ee:	83 ec 0c             	sub    $0xc,%esp
-801002f1:	68 20 ef 10 80       	push   $0x8010ef20
-801002f6:	e8 a5 45 00 00       	call   801048a0 <release>
+801002f1:	68 20 ff 10 80       	push   $0x8010ff20
+801002f6:	e8 b5 54 00 00       	call   801057b0 <release>
         ilock(ip);
 801002fb:	5a                   	pop    %edx
 801002fc:	ff 75 08             	push   0x8(%ebp)
@@ -429,10 +429,10 @@
 80100314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100318:	8d 50 01             	lea    0x1(%eax),%edx
-8010031b:	89 15 00 ef 10 80    	mov    %edx,0x8010ef00
+8010031b:	89 15 00 ff 10 80    	mov    %edx,0x8010ff00
 80100321:	89 c2                	mov    %eax,%edx
 80100323:	83 e2 7f             	and    $0x7f,%edx
-80100326:	0f be 8a 80 ee 10 80 	movsbl -0x7fef1180(%edx),%ecx
+80100326:	0f be 8a 80 fe 10 80 	movsbl -0x7fef0180(%edx),%ecx
     if(c == C('D')){  // EOF
 8010032d:	80 f9 04             	cmp    $0x4,%cl
 80100330:	74 37                	je     80100369 <consoleread+0xe9>
@@ -447,8 +447,8 @@
 8010033e:	0f 85 64 ff ff ff    	jne    801002a8 <consoleread+0x28>
   release(&cons.lock);
 80100344:	83 ec 0c             	sub    $0xc,%esp
-80100347:	68 20 ef 10 80       	push   $0x8010ef20
-8010034c:	e8 4f 45 00 00       	call   801048a0 <release>
+80100347:	68 20 ff 10 80       	push   $0x8010ff20
+8010034c:	e8 5f 54 00 00       	call   801057b0 <release>
   ilock(ip);
 80100351:	58                   	pop    %eax
 80100352:	ff 75 08             	push   0x8(%ebp)
@@ -470,7 +470,7 @@
 80100369:	39 fb                	cmp    %edi,%ebx
 8010036b:	73 d7                	jae    80100344 <consoleread+0xc4>
         input.r--;
-8010036d:	a3 00 ef 10 80       	mov    %eax,0x8010ef00
+8010036d:	a3 00 ff 10 80       	mov    %eax,0x8010ff00
 80100372:	eb d0                	jmp    80100344 <consoleread+0xc4>
 80100374:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010037b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -491,7 +491,7 @@
   asm volatile("cli");
 80100388:	fa                   	cli    
   cons.locking = 0;
-80100389:	c7 05 54 ef 10 80 00 	movl   $0x0,0x8010ef54
+80100389:	c7 05 54 ff 10 80 00 	movl   $0x0,0x8010ff54
 80100390:	00 00 00 
   getcallerpcs(&s, pcs);
 80100393:	8d 5d d0             	lea    -0x30(%ebp),%ebx
@@ -500,14 +500,14 @@
 80100399:	e8 52 25 00 00       	call   801028f0 <lapicid>
 8010039e:	83 ec 08             	sub    $0x8,%esp
 801003a1:	50                   	push   %eax
-801003a2:	68 2d 76 10 80       	push   $0x8010762d
+801003a2:	68 4d 86 10 80       	push   $0x8010864d
 801003a7:	e8 f4 02 00 00       	call   801006a0 <cprintf>
   cprintf(s);
 801003ac:	58                   	pop    %eax
 801003ad:	ff 75 08             	push   0x8(%ebp)
 801003b0:	e8 eb 02 00 00       	call   801006a0 <cprintf>
   cprintf("\n");
-801003b5:	c7 04 24 87 7f 10 80 	movl   $0x80107f87,(%esp)
+801003b5:	c7 04 24 7f 8f 10 80 	movl   $0x80108f7f,(%esp)
 801003bc:	e8 df 02 00 00       	call   801006a0 <cprintf>
   getcallerpcs(&s, pcs);
 801003c1:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -515,7 +515,7 @@
 801003c5:	59                   	pop    %ecx
 801003c6:	53                   	push   %ebx
 801003c7:	50                   	push   %eax
-801003c8:	e8 83 43 00 00       	call   80104750 <getcallerpcs>
+801003c8:	e8 93 52 00 00       	call   80105660 <getcallerpcs>
   for(i=0; i<10; i++)
 801003cd:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
@@ -524,14 +524,14 @@
   for(i=0; i<10; i++)
 801003d5:	83 c3 04             	add    $0x4,%ebx
     cprintf(" %p", pcs[i]);
-801003d8:	68 41 76 10 80       	push   $0x80107641
+801003d8:	68 61 86 10 80       	push   $0x80108661
 801003dd:	e8 be 02 00 00       	call   801006a0 <cprintf>
   for(i=0; i<10; i++)
 801003e2:	83 c4 10             	add    $0x10,%esp
 801003e5:	39 f3                	cmp    %esi,%ebx
 801003e7:	75 e7                	jne    801003d0 <panic+0x50>
   panicked = 1; // freeze other CPU
-801003e9:	c7 05 58 ef 10 80 01 	movl   $0x1,0x8010ef58
+801003e9:	c7 05 58 ff 10 80 01 	movl   $0x1,0x8010ff58
 801003f0:	00 00 00 
   for(;;)
 801003f3:	eb fe                	jmp    801003f3 <panic+0x73>
@@ -553,7 +553,7 @@
     uartputc(c);
 80100416:	83 ec 0c             	sub    $0xc,%esp
 80100419:	50                   	push   %eax
-8010041a:	e8 01 5d 00 00       	call   80106120 <uartputc>
+8010041a:	e8 11 6d 00 00       	call   80107130 <uartputc>
 8010041f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100422:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -649,11 +649,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100500:	83 ec 0c             	sub    $0xc,%esp
 80100503:	6a 08                	push   $0x8
-80100505:	e8 16 5c 00 00       	call   80106120 <uartputc>
+80100505:	e8 26 6c 00 00       	call   80107130 <uartputc>
 8010050a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100511:	e8 0a 5c 00 00       	call   80106120 <uartputc>
+80100511:	e8 1a 6c 00 00       	call   80107130 <uartputc>
 80100516:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010051d:	e8 fe 5b 00 00       	call   80106120 <uartputc>
+8010051d:	e8 0e 6c 00 00       	call   80107130 <uartputc>
 80100522:	83 c4 10             	add    $0x10,%esp
 80100525:	e9 f8 fe ff ff       	jmp    80100422 <consputc.part.0+0x22>
 8010052a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -669,7 +669,7 @@
 80100542:	68 60 0e 00 00       	push   $0xe60
 80100547:	68 a0 80 0b 80       	push   $0x800b80a0
 8010054c:	68 00 80 0b 80       	push   $0x800b8000
-80100551:	e8 0a 45 00 00       	call   80104a60 <memmove>
+80100551:	e8 1a 54 00 00       	call   80105970 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100556:	b8 80 07 00 00       	mov    $0x780,%eax
 8010055b:	83 c4 0c             	add    $0xc,%esp
@@ -678,14 +678,14 @@
 80100562:	50                   	push   %eax
 80100563:	6a 00                	push   $0x0
 80100565:	56                   	push   %esi
-80100566:	e8 55 44 00 00       	call   801049c0 <memset>
+80100566:	e8 65 53 00 00       	call   801058d0 <memset>
   outb(CRTPORT+1, pos);
 8010056b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010056e:	83 c4 10             	add    $0x10,%esp
 80100571:	e9 20 ff ff ff       	jmp    80100496 <consputc.part.0+0x96>
     panic("pos under/overflow");
 80100576:	83 ec 0c             	sub    $0xc,%esp
-80100579:	68 45 76 10 80       	push   $0x80107645
+80100579:	68 65 86 10 80       	push   $0x80108665
 8010057e:	e8 fd fd ff ff       	call   80100380 <panic>
 80100583:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -710,8 +710,8 @@
   iunlock(ip);
 8010059f:	e8 bc 12 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
-801005a4:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
-801005ab:	e8 50 43 00 00       	call   80104900 <acquire>
+801005a4:	c7 04 24 20 ff 10 80 	movl   $0x8010ff20,(%esp)
+801005ab:	e8 60 52 00 00       	call   80105810 <acquire>
   for(i = 0; i < n; i++)
 801005b0:	83 c4 10             	add    $0x10,%esp
 801005b3:	85 f6                	test   %esi,%esi
@@ -719,7 +719,7 @@
 801005b7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 801005ba:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
   if(panicked){
-801005bd:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+801005bd:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
     consputc(buf[i] & 0xff);
 801005c3:	0f b6 03             	movzbl (%ebx),%eax
   if(panicked){
@@ -737,8 +737,8 @@
 801005da:	75 e1                	jne    801005bd <consolewrite+0x2d>
   release(&cons.lock);
 801005dc:	83 ec 0c             	sub    $0xc,%esp
-801005df:	68 20 ef 10 80       	push   $0x8010ef20
-801005e4:	e8 b7 42 00 00       	call   801048a0 <release>
+801005df:	68 20 ff 10 80       	push   $0x8010ff20
+801005e4:	e8 c7 51 00 00       	call   801057b0 <release>
   ilock(ip);
 801005e9:	58                   	pop    %eax
 801005ea:	ff 75 08             	push   0x8(%ebp)
@@ -783,7 +783,7 @@
 8010062e:	89 cf                	mov    %ecx,%edi
 80100630:	f7 75 d4             	divl   -0x2c(%ebp)
 80100633:	8d 5b 01             	lea    0x1(%ebx),%ebx
-80100636:	0f b6 92 70 76 10 80 	movzbl -0x7fef8990(%edx),%edx
+80100636:	0f b6 92 90 86 10 80 	movzbl -0x7fef7970(%edx),%edx
   }while((x /= base) != 0);
 8010063d:	89 c1                	mov    %eax,%ecx
     buf[i++] = digits[x % base];
@@ -805,7 +805,7 @@
 8010065b:	8d 5c 35 d7          	lea    -0x29(%ebp,%esi,1),%ebx
 8010065f:	0f be c2             	movsbl %dl,%eax
   if(panicked){
-80100662:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+80100662:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
 80100668:	85 d2                	test   %edx,%edx
 8010066a:	74 04                	je     80100670 <printint+0x70>
 8010066c:	fa                   	cli    
@@ -844,7 +844,7 @@
 801006a5:	53                   	push   %ebx
 801006a6:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-801006a9:	a1 54 ef 10 80       	mov    0x8010ef54,%eax
+801006a9:	a1 54 ff 10 80       	mov    0x8010ff54,%eax
 801006ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(locking)
 801006b1:	85 c0                	test   %eax,%eax
@@ -917,7 +917,7 @@
 80100758:	84 c0                	test   %al,%al
 8010075a:	0f 84 08 01 00 00    	je     80100868 <cprintf+0x1c8>
   if(panicked){
-80100760:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+80100760:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
 80100766:	85 d2                	test   %edx,%edx
 80100768:	0f 84 b2 00 00 00    	je     80100820 <cprintf+0x180>
 8010076e:	fa                   	cli    
@@ -947,7 +947,7 @@
 801007a3:	eb 81                	jmp    80100726 <cprintf+0x86>
 801007a5:	8d 76 00             	lea    0x0(%esi),%esi
   if(panicked){
-801007a8:	8b 0d 58 ef 10 80    	mov    0x8010ef58,%ecx
+801007a8:	8b 0d 58 ff 10 80    	mov    0x8010ff58,%ecx
 801007ae:	85 c9                	test   %ecx,%ecx
 801007b0:	74 14                	je     801007c6 <cprintf+0x126>
 801007b2:	fa                   	cli    
@@ -955,7 +955,7 @@
 801007b3:	eb fe                	jmp    801007b3 <cprintf+0x113>
 801007b5:	8d 76 00             	lea    0x0(%esi),%esi
   if(panicked){
-801007b8:	a1 58 ef 10 80       	mov    0x8010ef58,%eax
+801007b8:	a1 58 ff 10 80       	mov    0x8010ff58,%eax
 801007bd:	85 c0                	test   %eax,%eax
 801007bf:	75 6c                	jne    8010082d <cprintf+0x18d>
 801007c1:	b8 25 00 00 00       	mov    $0x25,%eax
@@ -969,18 +969,18 @@
 801007df:	90                   	nop
     acquire(&cons.lock);
 801007e0:	83 ec 0c             	sub    $0xc,%esp
-801007e3:	68 20 ef 10 80       	push   $0x8010ef20
-801007e8:	e8 13 41 00 00       	call   80104900 <acquire>
+801007e3:	68 20 ff 10 80       	push   $0x8010ff20
+801007e8:	e8 23 50 00 00       	call   80105810 <acquire>
 801007ed:	83 c4 10             	add    $0x10,%esp
 801007f0:	e9 c4 fe ff ff       	jmp    801006b9 <cprintf+0x19>
   if(panicked){
-801007f5:	8b 0d 58 ef 10 80    	mov    0x8010ef58,%ecx
+801007f5:	8b 0d 58 ff 10 80    	mov    0x8010ff58,%ecx
 801007fb:	85 c9                	test   %ecx,%ecx
 801007fd:	75 31                	jne    80100830 <cprintf+0x190>
 801007ff:	b8 25 00 00 00       	mov    $0x25,%eax
 80100804:	89 55 e0             	mov    %edx,-0x20(%ebp)
 80100807:	e8 f4 fb ff ff       	call   80100400 <consputc.part.0>
-8010080c:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+8010080c:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
 80100812:	85 d2                	test   %edx,%edx
 80100814:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80100817:	74 2e                	je     80100847 <cprintf+0x1a7>
@@ -1000,7 +1000,7 @@
 80100833:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100837:	90                   	nop
         s = "(null)";
-80100838:	bf 58 76 10 80       	mov    $0x80107658,%edi
+80100838:	bf 78 86 10 80       	mov    $0x80108678,%edi
       for(; *s; s++)
 8010083d:	b8 28 00 00 00       	mov    $0x28,%eax
 80100842:	e9 19 ff ff ff       	jmp    80100760 <cprintf+0xc0>
@@ -1009,8 +1009,8 @@
 8010084e:	e9 c8 fe ff ff       	jmp    8010071b <cprintf+0x7b>
     release(&cons.lock);
 80100853:	83 ec 0c             	sub    $0xc,%esp
-80100856:	68 20 ef 10 80       	push   $0x8010ef20
-8010085b:	e8 40 40 00 00       	call   801048a0 <release>
+80100856:	68 20 ff 10 80       	push   $0x8010ff20
+8010085b:	e8 50 4f 00 00       	call   801057b0 <release>
 80100860:	83 c4 10             	add    $0x10,%esp
 }
 80100863:	e9 c9 fe ff ff       	jmp    80100731 <cprintf+0x91>
@@ -1019,7 +1019,7 @@
 8010086b:	e9 ab fe ff ff       	jmp    8010071b <cprintf+0x7b>
     panic("null fmt");
 80100870:	83 ec 0c             	sub    $0xc,%esp
-80100873:	68 5f 76 10 80       	push   $0x8010765f
+80100873:	68 7f 86 10 80       	push   $0x8010867f
 80100878:	e8 03 fb ff ff       	call   80100380 <panic>
 8010087d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -1036,8 +1036,8 @@
 80100888:	83 ec 18             	sub    $0x18,%esp
 8010088b:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
-8010088e:	68 20 ef 10 80       	push   $0x8010ef20
-80100893:	e8 68 40 00 00       	call   80104900 <acquire>
+8010088e:	68 20 ff 10 80       	push   $0x8010ff20
+80100893:	e8 78 4f 00 00       	call   80105810 <acquire>
   while((c = getc()) >= 0){
 80100898:	83 c4 10             	add    $0x10,%esp
 8010089b:	eb 1a                	jmp    801008b7 <consoleintr+0x37>
@@ -1060,23 +1060,23 @@
 801008ca:	83 fb 7f             	cmp    $0x7f,%ebx
 801008cd:	0f 84 ad 00 00 00    	je     80100980 <consoleintr+0x100>
       if(c != 0 && input.e-input.r < INPUT_BUF){
-801008d3:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+801008d3:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
 801008d8:	89 c2                	mov    %eax,%edx
-801008da:	2b 15 00 ef 10 80    	sub    0x8010ef00,%edx
+801008da:	2b 15 00 ff 10 80    	sub    0x8010ff00,%edx
 801008e0:	83 fa 7f             	cmp    $0x7f,%edx
 801008e3:	77 d2                	ja     801008b7 <consoleintr+0x37>
         input.buf[input.e++ % INPUT_BUF] = c;
 801008e5:	8d 48 01             	lea    0x1(%eax),%ecx
   if(panicked){
-801008e8:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+801008e8:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
         input.buf[input.e++ % INPUT_BUF] = c;
 801008ee:	83 e0 7f             	and    $0x7f,%eax
-801008f1:	89 0d 08 ef 10 80    	mov    %ecx,0x8010ef08
+801008f1:	89 0d 08 ff 10 80    	mov    %ecx,0x8010ff08
         c = (c == '\r') ? '\n' : c;
 801008f7:	83 fb 0d             	cmp    $0xd,%ebx
 801008fa:	0f 84 13 01 00 00    	je     80100a13 <consoleintr+0x193>
         input.buf[input.e++ % INPUT_BUF] = c;
-80100900:	88 98 80 ee 10 80    	mov    %bl,-0x7fef1180(%eax)
+80100900:	88 98 80 fe 10 80    	mov    %bl,-0x7fef0180(%eax)
   if(panicked){
 80100906:	85 d2                	test   %edx,%edx
 80100908:	0f 85 10 01 00 00    	jne    80100a1e <consoleintr+0x19e>
@@ -1087,27 +1087,27 @@
 80100918:	0f 84 14 01 00 00    	je     80100a32 <consoleintr+0x1b2>
 8010091e:	83 fb 04             	cmp    $0x4,%ebx
 80100921:	0f 84 0b 01 00 00    	je     80100a32 <consoleintr+0x1b2>
-80100927:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
+80100927:	a1 00 ff 10 80       	mov    0x8010ff00,%eax
 8010092c:	83 e8 80             	sub    $0xffffff80,%eax
-8010092f:	39 05 08 ef 10 80    	cmp    %eax,0x8010ef08
+8010092f:	39 05 08 ff 10 80    	cmp    %eax,0x8010ff08
 80100935:	75 80                	jne    801008b7 <consoleintr+0x37>
 80100937:	e9 fb 00 00 00       	jmp    80100a37 <consoleintr+0x1b7>
 8010093c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       while(input.e != input.w &&
-80100940:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
-80100945:	39 05 04 ef 10 80    	cmp    %eax,0x8010ef04
+80100940:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
+80100945:	39 05 04 ff 10 80    	cmp    %eax,0x8010ff04
 8010094b:	0f 84 66 ff ff ff    	je     801008b7 <consoleintr+0x37>
             input.buf[(input.e-1) % INPUT_BUF] != '\n'){
 80100951:	83 e8 01             	sub    $0x1,%eax
 80100954:	89 c2                	mov    %eax,%edx
 80100956:	83 e2 7f             	and    $0x7f,%edx
       while(input.e != input.w &&
-80100959:	80 ba 80 ee 10 80 0a 	cmpb   $0xa,-0x7fef1180(%edx)
+80100959:	80 ba 80 fe 10 80 0a 	cmpb   $0xa,-0x7fef0180(%edx)
 80100960:	0f 84 51 ff ff ff    	je     801008b7 <consoleintr+0x37>
   if(panicked){
-80100966:	8b 15 58 ef 10 80    	mov    0x8010ef58,%edx
+80100966:	8b 15 58 ff 10 80    	mov    0x8010ff58,%edx
         input.e--;
-8010096c:	a3 08 ef 10 80       	mov    %eax,0x8010ef08
+8010096c:	a3 08 ff 10 80       	mov    %eax,0x8010ff08
   if(panicked){
 80100971:	85 d2                	test   %edx,%edx
 80100973:	74 33                	je     801009a8 <consoleintr+0x128>
@@ -1117,14 +1117,14 @@
 80100978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010097f:	90                   	nop
       if(input.e != input.w){
-80100980:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
-80100985:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+80100980:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
+80100985:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
 8010098b:	0f 84 26 ff ff ff    	je     801008b7 <consoleintr+0x37>
         input.e--;
 80100991:	83 e8 01             	sub    $0x1,%eax
-80100994:	a3 08 ef 10 80       	mov    %eax,0x8010ef08
+80100994:	a3 08 ff 10 80       	mov    %eax,0x8010ff08
   if(panicked){
-80100999:	a1 58 ef 10 80       	mov    0x8010ef58,%eax
+80100999:	a1 58 ff 10 80       	mov    0x8010ff58,%eax
 8010099e:	85 c0                	test   %eax,%eax
 801009a0:	74 56                	je     801009f8 <consoleintr+0x178>
 801009a2:	fa                   	cli    
@@ -1134,15 +1134,15 @@
 801009a8:	b8 00 01 00 00       	mov    $0x100,%eax
 801009ad:	e8 4e fa ff ff       	call   80100400 <consputc.part.0>
       while(input.e != input.w &&
-801009b2:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
-801009b7:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
+801009b2:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
+801009b7:	3b 05 04 ff 10 80    	cmp    0x8010ff04,%eax
 801009bd:	75 92                	jne    80100951 <consoleintr+0xd1>
 801009bf:	e9 f3 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
 801009c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&cons.lock);
 801009c8:	83 ec 0c             	sub    $0xc,%esp
-801009cb:	68 20 ef 10 80       	push   $0x8010ef20
-801009d0:	e8 cb 3e 00 00       	call   801048a0 <release>
+801009cb:	68 20 ff 10 80       	push   $0x8010ff20
+801009d0:	e8 db 4d 00 00       	call   801057b0 <release>
   if(doprocdump) {
 801009d5:	83 c4 10             	add    $0x10,%esp
 801009d8:	85 f6                	test   %esi,%esi
@@ -1169,9 +1169,9 @@
 80100a0c:	5f                   	pop    %edi
 80100a0d:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-80100a0e:	e9 dd 37 00 00       	jmp    801041f0 <procdump>
+80100a0e:	e9 4d 44 00 00       	jmp    80104e60 <procdump>
         input.buf[input.e++ % INPUT_BUF] = c;
-80100a13:	c6 80 80 ee 10 80 0a 	movb   $0xa,-0x7fef1180(%eax)
+80100a13:	c6 80 80 fe 10 80 0a 	movb   $0xa,-0x7fef0180(%eax)
   if(panicked){
 80100a1a:	85 d2                	test   %edx,%edx
 80100a1c:	74 0a                	je     80100a28 <consoleintr+0x1a8>
@@ -1182,14 +1182,14 @@
 80100a28:	b8 0a 00 00 00       	mov    $0xa,%eax
 80100a2d:	e8 ce f9 ff ff       	call   80100400 <consputc.part.0>
           input.w = input.e;
-80100a32:	a1 08 ef 10 80       	mov    0x8010ef08,%eax
+80100a32:	a1 08 ff 10 80       	mov    0x8010ff08,%eax
           wakeup(&input.r);
 80100a37:	83 ec 0c             	sub    $0xc,%esp
           input.w = input.e;
-80100a3a:	a3 04 ef 10 80       	mov    %eax,0x8010ef04
+80100a3a:	a3 04 ff 10 80       	mov    %eax,0x8010ff04
           wakeup(&input.r);
-80100a3f:	68 00 ef 10 80       	push   $0x8010ef00
-80100a44:	e8 c7 36 00 00       	call   80104110 <wakeup>
+80100a3f:	68 00 ff 10 80       	push   $0x8010ff00
+80100a44:	e8 17 43 00 00       	call   80104d60 <wakeup>
 80100a49:	83 c4 10             	add    $0x10,%esp
 80100a4c:	e9 66 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
 80100a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1205,9 +1205,9 @@
 80100a61:	89 e5                	mov    %esp,%ebp
 80100a63:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a66:	68 68 76 10 80       	push   $0x80107668
-80100a6b:	68 20 ef 10 80       	push   $0x8010ef20
-80100a70:	e8 bb 3c 00 00       	call   80104730 <initlock>
+80100a66:	68 88 86 10 80       	push   $0x80108688
+80100a6b:	68 20 ff 10 80       	push   $0x8010ff20
+80100a70:	e8 cb 4b 00 00       	call   80105640 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1219,13 +1219,13 @@
 80100a77:	6a 00                	push   $0x0
 80100a79:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-80100a7b:	c7 05 0c f9 10 80 90 	movl   $0x80100590,0x8010f90c
+80100a7b:	c7 05 0c 09 11 80 90 	movl   $0x80100590,0x8011090c
 80100a82:	05 10 80 
   devsw[CONSOLE].read = consoleread;
-80100a85:	c7 05 08 f9 10 80 80 	movl   $0x80100280,0x8010f908
+80100a85:	c7 05 08 09 11 80 80 	movl   $0x80100280,0x80110908
 80100a8c:	02 10 80 
   cons.locking = 1;
-80100a8f:	c7 05 54 ef 10 80 01 	movl   $0x1,0x8010ef54
+80100a8f:	c7 05 54 ff 10 80 01 	movl   $0x1,0x8010ff54
 80100a96:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
 80100a99:	e8 e2 19 00 00       	call   80102480 <ioapicenable>
@@ -1260,7 +1260,7 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100abc:	e8 ef 2e 00 00       	call   801039b0 <myproc>
+80100abc:	e8 ef 37 00 00       	call   801042b0 <myproc>
 80100ac1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
@@ -1323,7 +1323,7 @@
 80100b2f:	45 4c 46 
 80100b32:	75 d2                	jne    80100b06 <exec+0x56>
   if((pgdir = setupkvm()) == 0)
-80100b34:	e8 77 67 00 00       	call   801072b0 <setupkvm>
+80100b34:	e8 87 77 00 00       	call   801082c0 <setupkvm>
 80100b39:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b3f:	85 c0                	test   %eax,%eax
 80100b41:	74 c3                	je     80100b06 <exec+0x56>
@@ -1355,7 +1355,7 @@
 80100b96:	50                   	push   %eax
 80100b97:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
 80100b9d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100ba3:	e8 28 65 00 00       	call   801070d0 <allocuvm>
+80100ba3:	e8 38 75 00 00       	call   801080e0 <allocuvm>
 80100ba8:	83 c4 10             	add    $0x10,%esp
 80100bab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100bb1:	85 c0                	test   %eax,%eax
@@ -1371,7 +1371,7 @@
 80100bd1:	53                   	push   %ebx
 80100bd2:	50                   	push   %eax
 80100bd3:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100bd9:	e8 02 64 00 00       	call   80106fe0 <loaduvm>
+80100bd9:	e8 12 74 00 00       	call   80107ff0 <loaduvm>
 80100bde:	83 c4 20             	add    $0x20,%esp
 80100be1:	85 c0                	test   %eax,%eax
 80100be3:	78 2d                	js     80100c12 <exec+0x162>
@@ -1394,7 +1394,7 @@
     freevm(pgdir);
 80100c12:	83 ec 0c             	sub    $0xc,%esp
 80100c15:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100c1b:	e8 10 66 00 00       	call   80107230 <freevm>
+80100c1b:	e8 20 76 00 00       	call   80108240 <freevm>
   if(ip){
 80100c20:	83 c4 10             	add    $0x10,%esp
 80100c23:	e9 de fe ff ff       	jmp    80100b06 <exec+0x56>
@@ -1418,7 +1418,7 @@
 80100c5a:	57                   	push   %edi
 80100c5b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c61:	57                   	push   %edi
-80100c62:	e8 69 64 00 00       	call   801070d0 <allocuvm>
+80100c62:	e8 79 74 00 00       	call   801080e0 <allocuvm>
 80100c67:	83 c4 10             	add    $0x10,%esp
 80100c6a:	89 c6                	mov    %eax,%esi
 80100c6c:	85 c0                	test   %eax,%eax
@@ -1434,7 +1434,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c81:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c83:	e8 c8 66 00 00       	call   80107350 <clearpteu>
+80100c83:	e8 d8 76 00 00       	call   80108360 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c88:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c8b:	83 c4 10             	add    $0x10,%esp
@@ -1463,7 +1463,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100ccf:	83 ec 0c             	sub    $0xc,%esp
 80100cd2:	50                   	push   %eax
-80100cd3:	e8 e8 3e 00 00       	call   80104bc0 <strlen>
+80100cd3:	e8 f8 4d 00 00       	call   80105ad0 <strlen>
 80100cd8:	29 c3                	sub    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cda:	58                   	pop    %eax
@@ -1475,14 +1475,14 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100ce4:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100ce7:	e8 d4 3e 00 00       	call   80104bc0 <strlen>
+80100ce7:	e8 e4 4d 00 00       	call   80105ad0 <strlen>
 80100cec:	83 c0 01             	add    $0x1,%eax
 80100cef:	50                   	push   %eax
 80100cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cf3:	ff 34 b8             	push   (%eax,%edi,4)
 80100cf6:	53                   	push   %ebx
 80100cf7:	56                   	push   %esi
-80100cf8:	e8 23 68 00 00       	call   80107520 <copyout>
+80100cf8:	e8 33 78 00 00       	call   80108530 <copyout>
 80100cfd:	83 c4 20             	add    $0x20,%esp
 80100d00:	85 c0                	test   %eax,%eax
 80100d02:	79 ac                	jns    80100cb0 <exec+0x200>
@@ -1490,7 +1490,7 @@
     freevm(pgdir);
 80100d08:	83 ec 0c             	sub    $0xc,%esp
 80100d0b:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100d11:	e8 1a 65 00 00       	call   80107230 <freevm>
+80100d11:	e8 2a 75 00 00       	call   80108240 <freevm>
 80100d16:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100d19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1521,7 +1521,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d5d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d63:	e8 b8 67 00 00       	call   80107520 <copyout>
+80100d63:	e8 c8 77 00 00       	call   80108530 <copyout>
 80100d68:	83 c4 10             	add    $0x10,%esp
 80100d6b:	85 c0                	test   %eax,%eax
 80100d6d:	78 99                	js     80100d08 <exec+0x258>
@@ -1551,7 +1551,7 @@
 80100d9c:	52                   	push   %edx
 80100d9d:	83 c0 6c             	add    $0x6c,%eax
 80100da0:	50                   	push   %eax
-80100da1:	e8 da 3d 00 00       	call   80104b80 <safestrcpy>
+80100da1:	e8 ea 4c 00 00       	call   80105a90 <safestrcpy>
   curproc->pgdir = pgdir;
 80100da6:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1571,10 +1571,10 @@
 80100dc7:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100dca:	89 0c 24             	mov    %ecx,(%esp)
-80100dcd:	e8 7e 60 00 00       	call   80106e50 <switchuvm>
+80100dcd:	e8 8e 70 00 00       	call   80107e60 <switchuvm>
   freevm(oldpgdir);
 80100dd2:	89 3c 24             	mov    %edi,(%esp)
-80100dd5:	e8 56 64 00 00       	call   80107230 <freevm>
+80100dd5:	e8 66 74 00 00       	call   80108240 <freevm>
   return 0;
 80100dda:	83 c4 10             	add    $0x10,%esp
 80100ddd:	31 c0                	xor    %eax,%eax
@@ -1583,7 +1583,7 @@
 80100de4:	e8 e7 1f 00 00       	call   80102dd0 <end_op>
     cprintf("exec: fail\n");
 80100de9:	83 ec 0c             	sub    $0xc,%esp
-80100dec:	68 81 76 10 80       	push   $0x80107681
+80100dec:	68 a1 86 10 80       	push   $0x801086a1
 80100df1:	e8 aa f8 ff ff       	call   801006a0 <cprintf>
     return -1;
 80100df6:	83 c4 10             	add    $0x10,%esp
@@ -1606,9 +1606,9 @@
 80100e11:	89 e5                	mov    %esp,%ebp
 80100e13:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100e16:	68 8d 76 10 80       	push   $0x8010768d
-80100e1b:	68 60 ef 10 80       	push   $0x8010ef60
-80100e20:	e8 0b 39 00 00       	call   80104730 <initlock>
+80100e16:	68 ad 86 10 80       	push   $0x801086ad
+80100e1b:	68 60 ff 10 80       	push   $0x8010ff60
+80100e20:	e8 1b 48 00 00       	call   80105640 <initlock>
 }
 80100e25:	83 c4 10             	add    $0x10,%esp
 80100e28:	c9                   	leave  
@@ -1628,19 +1628,19 @@
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e34:	bb 94 ef 10 80       	mov    $0x8010ef94,%ebx
+80100e34:	bb 94 ff 10 80       	mov    $0x8010ff94,%ebx
 {
 80100e39:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80100e3c:	68 60 ef 10 80       	push   $0x8010ef60
-80100e41:	e8 ba 3a 00 00       	call   80104900 <acquire>
+80100e3c:	68 60 ff 10 80       	push   $0x8010ff60
+80100e41:	e8 ca 49 00 00       	call   80105810 <acquire>
 80100e46:	83 c4 10             	add    $0x10,%esp
 80100e49:	eb 10                	jmp    80100e5b <filealloc+0x2b>
 80100e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100e4f:	90                   	nop
   for(f = ftable.file; f < ftable.file + NFILE; f++){
 80100e50:	83 c3 18             	add    $0x18,%ebx
-80100e53:	81 fb f4 f8 10 80    	cmp    $0x8010f8f4,%ebx
+80100e53:	81 fb f4 08 11 80    	cmp    $0x801108f4,%ebx
 80100e59:	74 25                	je     80100e80 <filealloc+0x50>
     if(f->ref == 0){
 80100e5b:	8b 43 04             	mov    0x4(%ebx),%eax
@@ -1652,8 +1652,8 @@
       f->ref = 1;
 80100e65:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-80100e6c:	68 60 ef 10 80       	push   $0x8010ef60
-80100e71:	e8 2a 3a 00 00       	call   801048a0 <release>
+80100e6c:	68 60 ff 10 80       	push   $0x8010ff60
+80100e71:	e8 3a 49 00 00       	call   801057b0 <release>
       return f;
     }
   }
@@ -1672,8 +1672,8 @@
   return 0;
 80100e83:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-80100e85:	68 60 ef 10 80       	push   $0x8010ef60
-80100e8a:	e8 11 3a 00 00       	call   801048a0 <release>
+80100e85:	68 60 ff 10 80       	push   $0x8010ff60
+80100e8a:	e8 21 49 00 00       	call   801057b0 <release>
 }
 80100e8f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1696,8 +1696,8 @@
 80100ea4:	83 ec 10             	sub    $0x10,%esp
 80100ea7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-80100eaa:	68 60 ef 10 80       	push   $0x8010ef60
-80100eaf:	e8 4c 3a 00 00       	call   80104900 <acquire>
+80100eaa:	68 60 ff 10 80       	push   $0x8010ff60
+80100eaf:	e8 5c 49 00 00       	call   80105810 <acquire>
   if(f->ref < 1)
 80100eb4:	8b 43 04             	mov    0x4(%ebx),%eax
 80100eb7:	83 c4 10             	add    $0x10,%esp
@@ -1711,8 +1711,8 @@
   f->ref++;
 80100ec4:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-80100ec7:	68 60 ef 10 80       	push   $0x8010ef60
-80100ecc:	e8 cf 39 00 00       	call   801048a0 <release>
+80100ec7:	68 60 ff 10 80       	push   $0x8010ff60
+80100ecc:	e8 df 48 00 00       	call   801057b0 <release>
   return f;
 }
 80100ed1:	89 d8                	mov    %ebx,%eax
@@ -1721,7 +1721,7 @@
 80100ed7:	c3                   	ret    
     panic("filedup");
 80100ed8:	83 ec 0c             	sub    $0xc,%esp
-80100edb:	68 94 76 10 80       	push   $0x80107694
+80100edb:	68 b4 86 10 80       	push   $0x801086b4
 80100ee0:	e8 9b f4 ff ff       	call   80100380 <panic>
 80100ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1742,8 +1742,8 @@
   struct file ff;
 
   acquire(&ftable.lock);
-80100efc:	68 60 ef 10 80       	push   $0x8010ef60
-80100f01:	e8 fa 39 00 00       	call   80104900 <acquire>
+80100efc:	68 60 ff 10 80       	push   $0x8010ff60
+80100f01:	e8 0a 49 00 00       	call   80105810 <acquire>
   if(f->ref < 1)
 80100f06:	8b 53 04             	mov    0x4(%ebx),%edx
 80100f09:	83 c4 10             	add    $0x10,%esp
@@ -1772,11 +1772,11 @@
 80100f2e:	88 45 e7             	mov    %al,-0x19(%ebp)
 80100f31:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80100f34:	68 60 ef 10 80       	push   $0x8010ef60
+80100f34:	68 60 ff 10 80       	push   $0x8010ff60
   ff = *f;
 80100f39:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f3c:	e8 5f 39 00 00       	call   801048a0 <release>
+80100f3c:	e8 6f 48 00 00       	call   801057b0 <release>
 
   if(ff.type == FD_PIPE)
 80100f41:	83 c4 10             	add    $0x10,%esp
@@ -1800,7 +1800,7 @@
 80100f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100f5d:	8d 76 00             	lea    0x0(%esi),%esi
     release(&ftable.lock);
-80100f60:	c7 45 08 60 ef 10 80 	movl   $0x8010ef60,0x8(%ebp)
+80100f60:	c7 45 08 60 ff 10 80 	movl   $0x8010ff60,0x8(%ebp)
 }
 80100f67:	8d 65 f4             	lea    -0xc(%ebp),%esp
 80100f6a:	5b                   	pop    %ebx
@@ -1808,7 +1808,7 @@
 80100f6c:	5f                   	pop    %edi
 80100f6d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f6e:	e9 2d 39 00 00       	jmp    801048a0 <release>
+80100f6e:	e9 3d 48 00 00       	jmp    801057b0 <release>
 80100f73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f77:	90                   	nop
     begin_op();
@@ -1845,7 +1845,7 @@
 80100fb8:	c3                   	ret    
     panic("fileclose");
 80100fb9:	83 ec 0c             	sub    $0xc,%esp
-80100fbc:	68 9c 76 10 80       	push   $0x8010769c
+80100fbc:	68 bc 86 10 80       	push   $0x801086bc
 80100fc1:	e8 ba f3 ff ff       	call   80100380 <panic>
 80100fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100fcd:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1976,7 +1976,7 @@
 8010109d:	eb d7                	jmp    80101076 <fileread+0x56>
   panic("fileread");
 8010109f:	83 ec 0c             	sub    $0xc,%esp
-801010a2:	68 a6 76 10 80       	push   $0x801076a6
+801010a2:	68 c6 86 10 80       	push   $0x801086c6
 801010a7:	e8 d4 f2 ff ff       	call   80100380 <panic>
 801010ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2095,7 +2095,7 @@
 80101172:	75 1b                	jne    8010118f <filewrite+0xdf>
         panic("short filewrite");
 80101174:	83 ec 0c             	sub    $0xc,%esp
-80101177:	68 af 76 10 80       	push   $0x801076af
+80101177:	68 cf 86 10 80       	push   $0x801086cf
 8010117c:	e8 ff f1 ff ff       	call   80100380 <panic>
 80101181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     }
@@ -2126,7 +2126,7 @@
 801011a9:	e9 22 24 00 00       	jmp    801035d0 <pipewrite>
   panic("filewrite");
 801011ae:	83 ec 0c             	sub    $0xc,%esp
-801011b1:	68 b5 76 10 80       	push   $0x801076b5
+801011b1:	68 d5 86 10 80       	push   $0x801086d5
 801011b6:	e8 c5 f1 ff ff       	call   80100380 <panic>
 801011bb:	66 90                	xchg   %ax,%ax
 801011bd:	66 90                	xchg   %ax,%ax
@@ -2147,7 +2147,7 @@
   bp = bread(dev, BBLOCK(b, sb));
 801011c3:	89 d0                	mov    %edx,%eax
 801011c5:	c1 e8 0c             	shr    $0xc,%eax
-801011c8:	03 05 cc 15 11 80    	add    0x801115cc,%eax
+801011c8:	03 05 cc 25 11 80    	add    0x801125cc,%eax
 {
 801011ce:	89 e5                	mov    %esp,%ebp
 801011d0:	56                   	push   %esi
@@ -2200,7 +2200,7 @@
 80101223:	c3                   	ret    
     panic("freeing free block");
 80101224:	83 ec 0c             	sub    $0xc,%esp
-80101227:	68 bf 76 10 80       	push   $0x801076bf
+80101227:	68 df 86 10 80       	push   $0x801086df
 8010122c:	e8 4f f1 ff ff       	call   80100380 <panic>
 80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2215,7 +2215,7 @@
 80101245:	53                   	push   %ebx
 80101246:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101249:	8b 0d b4 15 11 80    	mov    0x801115b4,%ecx
+80101249:	8b 0d b4 25 11 80    	mov    0x801125b4,%ecx
 {
 8010124f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
@@ -2227,14 +2227,14 @@
 80101264:	83 ec 08             	sub    $0x8,%esp
 80101267:	89 f0                	mov    %esi,%eax
 80101269:	c1 f8 0c             	sar    $0xc,%eax
-8010126c:	03 05 cc 15 11 80    	add    0x801115cc,%eax
+8010126c:	03 05 cc 25 11 80    	add    0x801125cc,%eax
 80101272:	50                   	push   %eax
 80101273:	ff 75 d8             	push   -0x28(%ebp)
 80101276:	e8 55 ee ff ff       	call   801000d0 <bread>
 8010127b:	83 c4 10             	add    $0x10,%esp
 8010127e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101281:	a1 b4 15 11 80       	mov    0x801115b4,%eax
+80101281:	a1 b4 25 11 80       	mov    0x801125b4,%eax
 80101286:	89 45 e0             	mov    %eax,-0x20(%ebp)
 80101289:	31 c0                	xor    %eax,%eax
 8010128b:	eb 2f                	jmp    801012bc <balloc+0x7c>
@@ -2269,11 +2269,11 @@
 801012cc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
 801012d3:	83 c4 10             	add    $0x10,%esp
 801012d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801012d9:	39 05 b4 15 11 80    	cmp    %eax,0x801115b4
+801012d9:	39 05 b4 25 11 80    	cmp    %eax,0x801125b4
 801012df:	77 80                	ja     80101261 <balloc+0x21>
   panic("balloc: out of blocks");
 801012e1:	83 ec 0c             	sub    $0xc,%esp
-801012e4:	68 d2 76 10 80       	push   $0x801076d2
+801012e4:	68 f2 86 10 80       	push   $0x801086f2
 801012e9:	e8 92 f0 ff ff       	call   80100380 <panic>
 801012ee:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2304,7 +2304,7 @@
 8010131d:	68 00 02 00 00       	push   $0x200
 80101322:	6a 00                	push   $0x0
 80101324:	50                   	push   %eax
-80101325:	e8 96 36 00 00       	call   801049c0 <memset>
+80101325:	e8 a6 45 00 00       	call   801058d0 <memset>
   log_write(bp);
 8010132a:	89 1c 24             	mov    %ebx,(%esp)
 8010132d:	e8 0e 1c 00 00       	call   80102f40 <log_write>
@@ -2345,13 +2345,13 @@
 {
 80101359:	53                   	push   %ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010135a:	bb 94 f9 10 80       	mov    $0x8010f994,%ebx
+8010135a:	bb 94 09 11 80       	mov    $0x80110994,%ebx
 {
 8010135f:	83 ec 28             	sub    $0x28,%esp
 80101362:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-80101365:	68 60 f9 10 80       	push   $0x8010f960
-8010136a:	e8 91 35 00 00       	call   80104900 <acquire>
+80101365:	68 60 09 11 80       	push   $0x80110960
+8010136a:	e8 a1 44 00 00       	call   80105810 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010136f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2364,7 +2364,7 @@
 80101382:	74 6c                	je     801013f0 <iget+0xa0>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 80101384:	81 c3 90 00 00 00    	add    $0x90,%ebx
-8010138a:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
+8010138a:	81 fb b4 25 11 80    	cmp    $0x801125b4,%ebx
 80101390:	73 26                	jae    801013b8 <iget+0x68>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101392:	8b 43 08             	mov    0x8(%ebx),%eax
@@ -2382,7 +2382,7 @@
 801013a1:	89 de                	mov    %ebx,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 801013a3:	81 c3 90 00 00 00    	add    $0x90,%ebx
-801013a9:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
+801013a9:	81 fb b4 25 11 80    	cmp    $0x801125b4,%ebx
 801013af:	72 e1                	jb     80101392 <iget+0x42>
 801013b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       empty = ip;
@@ -2408,8 +2408,8 @@
   ip->valid = 0;
 801013cb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-801013d2:	68 60 f9 10 80       	push   $0x8010f960
-801013d7:	e8 c4 34 00 00       	call   801048a0 <release>
+801013d2:	68 60 09 11 80       	push   $0x80110960
+801013d7:	e8 d4 43 00 00       	call   801057b0 <release>
 
   return ip;
 801013dc:	83 c4 10             	add    $0x10,%esp
@@ -2432,11 +2432,11 @@
       return ip;
 801013fb:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-801013fd:	68 60 f9 10 80       	push   $0x8010f960
+801013fd:	68 60 09 11 80       	push   $0x80110960
       ip->ref++;
 80101402:	89 43 08             	mov    %eax,0x8(%ebx)
       release(&icache.lock);
-80101405:	e8 96 34 00 00       	call   801048a0 <release>
+80101405:	e8 a6 43 00 00       	call   801057b0 <release>
       return ip;
 8010140a:	83 c4 10             	add    $0x10,%esp
 }
@@ -2449,7 +2449,7 @@
 80101416:	c3                   	ret    
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 80101417:	81 c3 90 00 00 00    	add    $0x90,%ebx
-8010141d:	81 fb b4 15 11 80    	cmp    $0x801115b4,%ebx
+8010141d:	81 fb b4 25 11 80    	cmp    $0x801125b4,%ebx
 80101423:	73 10                	jae    80101435 <iget+0xe5>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
 80101425:	8b 43 08             	mov    0x8(%ebx),%eax
@@ -2458,7 +2458,7 @@
 80101430:	e9 68 ff ff ff       	jmp    8010139d <iget+0x4d>
     panic("iget: no inodes");
 80101435:	83 ec 0c             	sub    $0xc,%esp
-80101438:	68 e8 76 10 80       	push   $0x801076e8
+80101438:	68 08 87 10 80       	push   $0x80108708
 8010143d:	e8 3e ef ff ff       	call   80100380 <panic>
 80101442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2579,7 +2579,7 @@
 80101511:	c3                   	ret    
   panic("bmap: out of range");
 80101512:	83 ec 0c             	sub    $0xc,%esp
-80101515:	68 f8 76 10 80       	push   $0x801076f8
+80101515:	68 18 87 10 80       	push   $0x80108718
 8010151a:	e8 61 ee ff ff       	call   80100380 <panic>
 8010151f:	90                   	nop
 
@@ -2604,7 +2604,7 @@
 8010153d:	6a 1c                	push   $0x1c
 8010153f:	50                   	push   %eax
 80101540:	56                   	push   %esi
-80101541:	e8 1a 35 00 00       	call   80104a60 <memmove>
+80101541:	e8 2a 44 00 00       	call   80105970 <memmove>
   brelse(bp);
 80101546:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101549:	83 c4 10             	add    $0x10,%esp
@@ -2623,26 +2623,26 @@
 80101560:	55                   	push   %ebp
 80101561:	89 e5                	mov    %esp,%ebp
 80101563:	53                   	push   %ebx
-80101564:	bb a0 f9 10 80       	mov    $0x8010f9a0,%ebx
+80101564:	bb a0 09 11 80       	mov    $0x801109a0,%ebx
 80101569:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-8010156c:	68 0b 77 10 80       	push   $0x8010770b
-80101571:	68 60 f9 10 80       	push   $0x8010f960
-80101576:	e8 b5 31 00 00       	call   80104730 <initlock>
+8010156c:	68 2b 87 10 80       	push   $0x8010872b
+80101571:	68 60 09 11 80       	push   $0x80110960
+80101576:	e8 c5 40 00 00       	call   80105640 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010157b:	83 c4 10             	add    $0x10,%esp
 8010157e:	66 90                	xchg   %ax,%ax
     initsleeplock(&icache.inode[i].lock, "inode");
 80101580:	83 ec 08             	sub    $0x8,%esp
-80101583:	68 12 77 10 80       	push   $0x80107712
+80101583:	68 32 87 10 80       	push   $0x80108732
 80101588:	53                   	push   %ebx
   for(i = 0; i < NINODE; i++) {
 80101589:	81 c3 90 00 00 00    	add    $0x90,%ebx
     initsleeplock(&icache.inode[i].lock, "inode");
-8010158f:	e8 6c 30 00 00       	call   80104600 <initsleeplock>
+8010158f:	e8 7c 3f 00 00       	call   80105510 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 80101594:	83 c4 10             	add    $0x10,%esp
-80101597:	81 fb c0 15 11 80    	cmp    $0x801115c0,%ebx
+80101597:	81 fb c0 25 11 80    	cmp    $0x801125c0,%ebx
 8010159d:	75 e1                	jne    80101580 <iinit+0x20>
   bp = bread(dev, 1);
 8010159f:	83 ec 08             	sub    $0x8,%esp
@@ -2657,20 +2657,20 @@
 801015b1:	8d 40 5c             	lea    0x5c(%eax),%eax
 801015b4:	6a 1c                	push   $0x1c
 801015b6:	50                   	push   %eax
-801015b7:	68 b4 15 11 80       	push   $0x801115b4
-801015bc:	e8 9f 34 00 00       	call   80104a60 <memmove>
+801015b7:	68 b4 25 11 80       	push   $0x801125b4
+801015bc:	e8 af 43 00 00       	call   80105970 <memmove>
   brelse(bp);
 801015c1:	89 1c 24             	mov    %ebx,(%esp)
 801015c4:	e8 27 ec ff ff       	call   801001f0 <brelse>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-801015c9:	ff 35 cc 15 11 80    	push   0x801115cc
-801015cf:	ff 35 c8 15 11 80    	push   0x801115c8
-801015d5:	ff 35 c4 15 11 80    	push   0x801115c4
-801015db:	ff 35 c0 15 11 80    	push   0x801115c0
-801015e1:	ff 35 bc 15 11 80    	push   0x801115bc
-801015e7:	ff 35 b8 15 11 80    	push   0x801115b8
-801015ed:	ff 35 b4 15 11 80    	push   0x801115b4
-801015f3:	68 78 77 10 80       	push   $0x80107778
+801015c9:	ff 35 cc 25 11 80    	push   0x801125cc
+801015cf:	ff 35 c8 25 11 80    	push   0x801125c8
+801015d5:	ff 35 c4 25 11 80    	push   0x801125c4
+801015db:	ff 35 c0 25 11 80    	push   0x801125c0
+801015e1:	ff 35 bc 25 11 80    	push   0x801125bc
+801015e7:	ff 35 b8 25 11 80    	push   0x801125b8
+801015ed:	ff 35 b4 25 11 80    	push   0x801125b4
+801015f3:	68 98 87 10 80       	push   $0x80108798
 801015f8:	e8 a3 f0 ff ff       	call   801006a0 <cprintf>
 }
 801015fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2690,7 +2690,7 @@
 80101616:	83 ec 1c             	sub    $0x1c,%esp
 80101619:	8b 45 0c             	mov    0xc(%ebp),%eax
   for(inum = 1; inum < sb.ninodes; inum++){
-8010161c:	83 3d bc 15 11 80 01 	cmpl   $0x1,0x801115bc
+8010161c:	83 3d bc 25 11 80 01 	cmpl   $0x1,0x801125bc
 {
 80101623:	8b 75 08             	mov    0x8(%ebp),%esi
 80101626:	89 45 e4             	mov    %eax,-0x1c(%ebp)
@@ -2709,13 +2709,13 @@
 80101647:	e8 a4 eb ff ff       	call   801001f0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
 8010164c:	83 c4 10             	add    $0x10,%esp
-8010164f:	3b 3d bc 15 11 80    	cmp    0x801115bc,%edi
+8010164f:	3b 3d bc 25 11 80    	cmp    0x801125bc,%edi
 80101655:	73 69                	jae    801016c0 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
 80101657:	89 f8                	mov    %edi,%eax
 80101659:	83 ec 08             	sub    $0x8,%esp
 8010165c:	c1 e8 03             	shr    $0x3,%eax
-8010165f:	03 05 c8 15 11 80    	add    0x801115c8,%eax
+8010165f:	03 05 c8 25 11 80    	add    0x801125c8,%eax
 80101665:	50                   	push   %eax
 80101666:	56                   	push   %esi
 80101667:	e8 64 ea ff ff       	call   801000d0 <bread>
@@ -2737,7 +2737,7 @@
 80101689:	6a 40                	push   $0x40
 8010168b:	6a 00                	push   $0x0
 8010168d:	51                   	push   %ecx
-8010168e:	e8 2d 33 00 00       	call   801049c0 <memset>
+8010168e:	e8 3d 42 00 00       	call   801058d0 <memset>
       dip->type = type;
 80101693:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101697:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2766,7 +2766,7 @@
 801016bb:	e9 90 fc ff ff       	jmp    80101350 <iget>
   panic("ialloc: no inodes");
 801016c0:	83 ec 0c             	sub    $0xc,%esp
-801016c3:	68 18 77 10 80       	push   $0x80107718
+801016c3:	68 38 87 10 80       	push   $0x80108738
 801016c8:	e8 b3 ec ff ff       	call   80100380 <panic>
 801016cd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2784,7 +2784,7 @@
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
 801016de:	83 ec 08             	sub    $0x8,%esp
 801016e1:	c1 e8 03             	shr    $0x3,%eax
-801016e4:	03 05 c8 15 11 80    	add    0x801115c8,%eax
+801016e4:	03 05 c8 25 11 80    	add    0x801125c8,%eax
 801016ea:	50                   	push   %eax
 801016eb:	ff 73 a4             	push   -0x5c(%ebx)
 801016ee:	e8 dd e9 ff ff       	call   801000d0 <bread>
@@ -2820,7 +2820,7 @@
 8010172d:	6a 34                	push   $0x34
 8010172f:	53                   	push   %ebx
 80101730:	50                   	push   %eax
-80101731:	e8 2a 33 00 00       	call   80104a60 <memmove>
+80101731:	e8 3a 42 00 00       	call   80105970 <memmove>
   log_write(bp);
 80101736:	89 34 24             	mov    %esi,(%esp)
 80101739:	e8 02 18 00 00       	call   80102f40 <log_write>
@@ -2844,13 +2844,13 @@
 80101754:	83 ec 10             	sub    $0x10,%esp
 80101757:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010175a:	68 60 f9 10 80       	push   $0x8010f960
-8010175f:	e8 9c 31 00 00       	call   80104900 <acquire>
+8010175a:	68 60 09 11 80       	push   $0x80110960
+8010175f:	e8 ac 40 00 00       	call   80105810 <acquire>
   ip->ref++;
 80101764:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-80101768:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-8010176f:	e8 2c 31 00 00       	call   801048a0 <release>
+80101768:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+8010176f:	e8 3c 40 00 00       	call   801057b0 <release>
 }
 80101774:	89 d8                	mov    %ebx,%eax
 80101776:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2876,7 +2876,7 @@
 8010179b:	83 ec 0c             	sub    $0xc,%esp
 8010179e:	8d 43 0c             	lea    0xc(%ebx),%eax
 801017a1:	50                   	push   %eax
-801017a2:	e8 99 2e 00 00       	call   80104640 <acquiresleep>
+801017a2:	e8 a9 3d 00 00       	call   80105550 <acquiresleep>
   if(ip->valid == 0){
 801017a7:	8b 43 4c             	mov    0x4c(%ebx),%eax
 801017aa:	83 c4 10             	add    $0x10,%esp
@@ -2894,7 +2894,7 @@
 801017c0:	8b 43 04             	mov    0x4(%ebx),%eax
 801017c3:	83 ec 08             	sub    $0x8,%esp
 801017c6:	c1 e8 03             	shr    $0x3,%eax
-801017c9:	03 05 c8 15 11 80    	add    0x801115c8,%eax
+801017c9:	03 05 c8 25 11 80    	add    0x801125c8,%eax
 801017cf:	50                   	push   %eax
 801017d0:	ff 33                	push   (%ebx)
 801017d2:	e8 f9 e8 ff ff       	call   801000d0 <bread>
@@ -2930,7 +2930,7 @@
 80101813:	50                   	push   %eax
 80101814:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80101817:	50                   	push   %eax
-80101818:	e8 43 32 00 00       	call   80104a60 <memmove>
+80101818:	e8 53 41 00 00       	call   80105970 <memmove>
     brelse(bp);
 8010181d:	89 34 24             	mov    %esi,(%esp)
 80101820:	e8 cb e9 ff ff       	call   801001f0 <brelse>
@@ -2943,11 +2943,11 @@
 80101834:	0f 85 77 ff ff ff    	jne    801017b1 <ilock+0x31>
       panic("ilock: no type");
 8010183a:	83 ec 0c             	sub    $0xc,%esp
-8010183d:	68 30 77 10 80       	push   $0x80107730
+8010183d:	68 50 87 10 80       	push   $0x80108750
 80101842:	e8 39 eb ff ff       	call   80100380 <panic>
     panic("ilock");
 80101847:	83 ec 0c             	sub    $0xc,%esp
-8010184a:	68 2a 77 10 80       	push   $0x8010772a
+8010184a:	68 4a 87 10 80       	push   $0x8010874a
 8010184f:	e8 2c eb ff ff       	call   80100380 <panic>
 80101854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010185b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2966,7 +2966,7 @@
 8010186c:	83 ec 0c             	sub    $0xc,%esp
 8010186f:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101872:	56                   	push   %esi
-80101873:	e8 68 2e 00 00       	call   801046e0 <holdingsleep>
+80101873:	e8 78 3d 00 00       	call   801055f0 <holdingsleep>
 80101878:	83 c4 10             	add    $0x10,%esp
 8010187b:	85 c0                	test   %eax,%eax
 8010187d:	74 15                	je     80101894 <iunlock+0x34>
@@ -2981,10 +2981,10 @@
 8010188d:	5e                   	pop    %esi
 8010188e:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-8010188f:	e9 0c 2e 00 00       	jmp    801046a0 <releasesleep>
+8010188f:	e9 1c 3d 00 00       	jmp    801055b0 <releasesleep>
     panic("iunlock");
 80101894:	83 ec 0c             	sub    $0xc,%esp
-80101897:	68 3f 77 10 80       	push   $0x8010773f
+80101897:	68 5f 87 10 80       	push   $0x8010875f
 8010189c:	e8 df ea ff ff       	call   80100380 <panic>
 801018a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801018a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3002,7 +3002,7 @@
   acquiresleep(&ip->lock);
 801018bc:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018bf:	57                   	push   %edi
-801018c0:	e8 7b 2d 00 00       	call   80104640 <acquiresleep>
+801018c0:	e8 8b 3c 00 00       	call   80105550 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018c5:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018c8:	83 c4 10             	add    $0x10,%esp
@@ -3013,15 +3013,15 @@
   releasesleep(&ip->lock);
 801018d6:	83 ec 0c             	sub    $0xc,%esp
 801018d9:	57                   	push   %edi
-801018da:	e8 c1 2d 00 00       	call   801046a0 <releasesleep>
+801018da:	e8 d1 3c 00 00       	call   801055b0 <releasesleep>
   acquire(&icache.lock);
-801018df:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-801018e6:	e8 15 30 00 00       	call   80104900 <acquire>
+801018df:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+801018e6:	e8 25 3f 00 00       	call   80105810 <acquire>
   ip->ref--;
 801018eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
 801018ef:	83 c4 10             	add    $0x10,%esp
-801018f2:	c7 45 08 60 f9 10 80 	movl   $0x8010f960,0x8(%ebp)
+801018f2:	c7 45 08 60 09 11 80 	movl   $0x80110960,0x8(%ebp)
 }
 801018f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
 801018fc:	5b                   	pop    %ebx
@@ -3029,17 +3029,17 @@
 801018fe:	5f                   	pop    %edi
 801018ff:	5d                   	pop    %ebp
   release(&icache.lock);
-80101900:	e9 9b 2f 00 00       	jmp    801048a0 <release>
+80101900:	e9 ab 3e 00 00       	jmp    801057b0 <release>
 80101905:	8d 76 00             	lea    0x0(%esi),%esi
     acquire(&icache.lock);
 80101908:	83 ec 0c             	sub    $0xc,%esp
-8010190b:	68 60 f9 10 80       	push   $0x8010f960
-80101910:	e8 eb 2f 00 00       	call   80104900 <acquire>
+8010190b:	68 60 09 11 80       	push   $0x80110960
+80101910:	e8 fb 3e 00 00       	call   80105810 <acquire>
     int r = ip->ref;
 80101915:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80101918:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-8010191f:	e8 7c 2f 00 00       	call   801048a0 <release>
+80101918:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+8010191f:	e8 8c 3e 00 00       	call   801057b0 <release>
     if(r == 1){
 80101924:	83 c4 10             	add    $0x10,%esp
 80101927:	83 fe 01             	cmp    $0x1,%esi
@@ -3156,7 +3156,7 @@
 80101a1c:	83 ec 0c             	sub    $0xc,%esp
 80101a1f:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101a22:	56                   	push   %esi
-80101a23:	e8 b8 2c 00 00       	call   801046e0 <holdingsleep>
+80101a23:	e8 c8 3b 00 00       	call   801055f0 <holdingsleep>
 80101a28:	83 c4 10             	add    $0x10,%esp
 80101a2b:	85 c0                	test   %eax,%eax
 80101a2d:	74 21                	je     80101a50 <iunlockput+0x40>
@@ -3166,7 +3166,7 @@
   releasesleep(&ip->lock);
 80101a36:	83 ec 0c             	sub    $0xc,%esp
 80101a39:	56                   	push   %esi
-80101a3a:	e8 61 2c 00 00       	call   801046a0 <releasesleep>
+80101a3a:	e8 71 3b 00 00       	call   801055b0 <releasesleep>
   iput(ip);
 80101a3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101a42:	83 c4 10             	add    $0x10,%esp
@@ -3179,7 +3179,7 @@
 80101a4b:	e9 60 fe ff ff       	jmp    801018b0 <iput>
     panic("iunlock");
 80101a50:	83 ec 0c             	sub    $0xc,%esp
-80101a53:	68 3f 77 10 80       	push   $0x8010773f
+80101a53:	68 5f 87 10 80       	push   $0x8010875f
 80101a58:	e8 23 e9 ff ff       	call   80100380 <panic>
 80101a5d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -3311,7 +3311,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b33:	50                   	push   %eax
 80101b34:	ff 75 e0             	push   -0x20(%ebp)
-80101b37:	e8 24 2f 00 00       	call   80104a60 <memmove>
+80101b37:	e8 34 3e 00 00       	call   80105970 <memmove>
     brelse(bp);
 80101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b3f:	89 14 24             	mov    %edx,(%esp)
@@ -3336,7 +3336,7 @@
 80101b60:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101b64:	66 83 f8 09          	cmp    $0x9,%ax
 80101b68:	77 17                	ja     80101b81 <readi+0xf1>
-80101b6a:	8b 04 c5 00 f9 10 80 	mov    -0x7fef0700(,%eax,8),%eax
+80101b6a:	8b 04 c5 00 09 11 80 	mov    -0x7feef700(,%eax,8),%eax
 80101b71:	85 c0                	test   %eax,%eax
 80101b73:	74 0c                	je     80101b81 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
@@ -3443,7 +3443,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101c2f:	ff 75 dc             	push   -0x24(%ebp)
 80101c32:	50                   	push   %eax
-80101c33:	e8 28 2e 00 00       	call   80104a60 <memmove>
+80101c33:	e8 38 3d 00 00       	call   80105970 <memmove>
     log_write(bp);
 80101c38:	89 3c 24             	mov    %edi,(%esp)
 80101c3b:	e8 00 13 00 00       	call   80102f40 <log_write>
@@ -3480,7 +3480,7 @@
 80101c70:	0f bf 40 52          	movswl 0x52(%eax),%eax
 80101c74:	66 83 f8 09          	cmp    $0x9,%ax
 80101c78:	77 32                	ja     80101cac <writei+0x11c>
-80101c7a:	8b 04 c5 04 f9 10 80 	mov    -0x7fef06fc(,%eax,8),%eax
+80101c7a:	8b 04 c5 04 09 11 80 	mov    -0x7feef6fc(,%eax,8),%eax
 80101c81:	85 c0                	test   %eax,%eax
 80101c83:	74 27                	je     80101cac <writei+0x11c>
     return devsw[ip->major].write(ip, src, n);
@@ -3525,7 +3525,7 @@
 80101cc6:	6a 0e                	push   $0xe
 80101cc8:	ff 75 0c             	push   0xc(%ebp)
 80101ccb:	ff 75 08             	push   0x8(%ebp)
-80101cce:	e8 fd 2d 00 00       	call   80104ad0 <strncmp>
+80101cce:	e8 0d 3d 00 00       	call   801059e0 <strncmp>
 }
 80101cd3:	c9                   	leave  
 80101cd4:	c3                   	ret    
@@ -3581,7 +3581,7 @@
 80101d27:	6a 0e                	push   $0xe
 80101d29:	50                   	push   %eax
 80101d2a:	ff 75 0c             	push   0xc(%ebp)
-80101d2d:	e8 9e 2d 00 00       	call   80104ad0 <strncmp>
+80101d2d:	e8 ae 3c 00 00       	call   801059e0 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d32:	83 c4 10             	add    $0x10,%esp
@@ -3629,11 +3629,11 @@
 80101d6e:	c3                   	ret    
       panic("dirlookup read");
 80101d6f:	83 ec 0c             	sub    $0xc,%esp
-80101d72:	68 59 77 10 80       	push   $0x80107759
+80101d72:	68 79 87 10 80       	push   $0x80108779
 80101d77:	e8 04 e6 ff ff       	call   80100380 <panic>
     panic("dirlookup not DIR");
 80101d7c:	83 ec 0c             	sub    $0xc,%esp
-80101d7f:	68 47 77 10 80       	push   $0x80107747
+80101d7f:	68 67 87 10 80       	push   $0x80108767
 80101d84:	e8 f7 e5 ff ff       	call   80100380 <panic>
 80101d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3663,19 +3663,19 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101daa:	e8 01 1c 00 00       	call   801039b0 <myproc>
+80101daa:	e8 01 25 00 00       	call   801042b0 <myproc>
   acquire(&icache.lock);
 80101daf:	83 ec 0c             	sub    $0xc,%esp
     ip = idup(myproc()->cwd);
 80101db2:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-80101db5:	68 60 f9 10 80       	push   $0x8010f960
-80101dba:	e8 41 2b 00 00       	call   80104900 <acquire>
+80101db5:	68 60 09 11 80       	push   $0x80110960
+80101dba:	e8 51 3a 00 00       	call   80105810 <acquire>
   ip->ref++;
 80101dbf:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-80101dc3:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-80101dca:	e8 d1 2a 00 00       	call   801048a0 <release>
+80101dc3:	c7 04 24 60 09 11 80 	movl   $0x80110960,(%esp)
+80101dca:	e8 e1 39 00 00       	call   801057b0 <release>
 80101dcf:	83 c4 10             	add    $0x10,%esp
 80101dd2:	eb 07                	jmp    80101ddb <namex+0x4b>
 80101dd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -3718,7 +3718,7 @@
 80101e22:	89 fb                	mov    %edi,%ebx
     memmove(name, s, DIRSIZ);
 80101e24:	ff 75 e4             	push   -0x1c(%ebp)
-80101e27:	e8 34 2c 00 00       	call   80104a60 <memmove>
+80101e27:	e8 44 3b 00 00       	call   80105970 <memmove>
 80101e2c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e2f:	80 3f 2f             	cmpb   $0x2f,(%edi)
@@ -3769,7 +3769,7 @@
 80101e85:	83 ec 0c             	sub    $0xc,%esp
 80101e88:	89 55 e0             	mov    %edx,-0x20(%ebp)
 80101e8b:	52                   	push   %edx
-80101e8c:	e8 4f 28 00 00       	call   801046e0 <holdingsleep>
+80101e8c:	e8 5f 37 00 00       	call   801055f0 <holdingsleep>
 80101e91:	83 c4 10             	add    $0x10,%esp
 80101e94:	85 c0                	test   %eax,%eax
 80101e96:	0f 84 30 01 00 00    	je     80101fcc <namex+0x23c>
@@ -3780,7 +3780,7 @@
 80101ea7:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80101eaa:	83 ec 0c             	sub    $0xc,%esp
 80101ead:	52                   	push   %edx
-80101eae:	e8 ed 27 00 00       	call   801046a0 <releasesleep>
+80101eae:	e8 fd 36 00 00       	call   801055b0 <releasesleep>
   iput(ip);
 80101eb3:	89 34 24             	mov    %esi,(%esp)
 80101eb6:	89 fe                	mov    %edi,%esi
@@ -3800,7 +3800,7 @@
 80101ed6:	89 fb                	mov    %edi,%ebx
     memmove(name, s, len);
 80101ed8:	ff 75 e4             	push   -0x1c(%ebp)
-80101edb:	e8 80 2b 00 00       	call   80104a60 <memmove>
+80101edb:	e8 90 3a 00 00       	call   80105970 <memmove>
     name[len] = 0;
 80101ee0:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80101ee3:	83 c4 10             	add    $0x10,%esp
@@ -3843,7 +3843,7 @@
 80101f24:	83 ec 0c             	sub    $0xc,%esp
 80101f27:	8d 5e 0c             	lea    0xc(%esi),%ebx
 80101f2a:	53                   	push   %ebx
-80101f2b:	e8 b0 27 00 00       	call   801046e0 <holdingsleep>
+80101f2b:	e8 c0 36 00 00       	call   801055f0 <holdingsleep>
 80101f30:	83 c4 10             	add    $0x10,%esp
 80101f33:	85 c0                	test   %eax,%eax
 80101f35:	0f 84 91 00 00 00    	je     80101fcc <namex+0x23c>
@@ -3853,7 +3853,7 @@
   releasesleep(&ip->lock);
 80101f46:	83 ec 0c             	sub    $0xc,%esp
 80101f49:	53                   	push   %ebx
-80101f4a:	e8 51 27 00 00       	call   801046a0 <releasesleep>
+80101f4a:	e8 61 36 00 00       	call   801055b0 <releasesleep>
   iput(ip);
 80101f4f:	89 34 24             	mov    %esi,(%esp)
       return 0;
@@ -3874,7 +3874,7 @@
 80101f66:	83 ec 0c             	sub    $0xc,%esp
 80101f69:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 80101f6c:	52                   	push   %edx
-80101f6d:	e8 6e 27 00 00       	call   801046e0 <holdingsleep>
+80101f6d:	e8 7e 36 00 00       	call   801055f0 <holdingsleep>
 80101f72:	83 c4 10             	add    $0x10,%esp
 80101f75:	85 c0                	test   %eax,%eax
 80101f77:	74 53                	je     80101fcc <namex+0x23c>
@@ -3890,7 +3890,7 @@
 80101f89:	83 ec 0c             	sub    $0xc,%esp
 80101f8c:	8d 5e 0c             	lea    0xc(%esi),%ebx
 80101f8f:	53                   	push   %ebx
-80101f90:	e8 4b 27 00 00       	call   801046e0 <holdingsleep>
+80101f90:	e8 5b 36 00 00       	call   801055f0 <holdingsleep>
 80101f95:	83 c4 10             	add    $0x10,%esp
 80101f98:	85 c0                	test   %eax,%eax
 80101f9a:	74 30                	je     80101fcc <namex+0x23c>
@@ -3900,7 +3900,7 @@
   releasesleep(&ip->lock);
 80101fa3:	83 ec 0c             	sub    $0xc,%esp
 80101fa6:	53                   	push   %ebx
-80101fa7:	e8 f4 26 00 00       	call   801046a0 <releasesleep>
+80101fa7:	e8 04 36 00 00       	call   801055b0 <releasesleep>
 }
 80101fac:	83 c4 10             	add    $0x10,%esp
 }
@@ -3923,7 +3923,7 @@
 80101fc7:	e9 2f ff ff ff       	jmp    80101efb <namex+0x16b>
     panic("iunlock");
 80101fcc:	83 ec 0c             	sub    $0xc,%esp
-80101fcf:	68 3f 77 10 80       	push   $0x8010773f
+80101fcf:	68 5f 87 10 80       	push   $0x8010875f
 80101fd4:	e8 a7 e3 ff ff       	call   80100380 <panic>
 80101fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3974,7 +3974,7 @@
 80102037:	6a 0e                	push   $0xe
 80102039:	ff 75 0c             	push   0xc(%ebp)
 8010203c:	50                   	push   %eax
-8010203d:	e8 de 2a 00 00       	call   80104b20 <strncpy>
+8010203d:	e8 ee 39 00 00       	call   80105a30 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80102042:	6a 10                	push   $0x10
   de.inum = inum;
@@ -4009,11 +4009,11 @@
 80102076:	eb e5                	jmp    8010205d <dirlink+0x7d>
       panic("dirlink read");
 80102078:	83 ec 0c             	sub    $0xc,%esp
-8010207b:	68 68 77 10 80       	push   $0x80107768
+8010207b:	68 88 87 10 80       	push   $0x80108788
 80102080:	e8 fb e2 ff ff       	call   80100380 <panic>
     panic("dirlink");
 80102085:	83 ec 0c             	sub    $0xc,%esp
-80102088:	68 6e 7d 10 80       	push   $0x80107d6e
+80102088:	68 aa 8d 10 80       	push   $0x80108daa
 8010208d:	e8 ee e2 ff ff       	call   80100380 <panic>
 80102092:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4166,11 +4166,11 @@
 80102197:	c3                   	ret    
     panic("incorrect blockno");
 80102198:	83 ec 0c             	sub    $0xc,%esp
-8010219b:	68 d4 77 10 80       	push   $0x801077d4
+8010219b:	68 f4 87 10 80       	push   $0x801087f4
 801021a0:	e8 db e1 ff ff       	call   80100380 <panic>
     panic("idestart");
 801021a5:	83 ec 0c             	sub    $0xc,%esp
-801021a8:	68 cb 77 10 80       	push   $0x801077cb
+801021a8:	68 eb 87 10 80       	push   $0x801087eb
 801021ad:	e8 ce e1 ff ff       	call   80100380 <panic>
 801021b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801021b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4181,12 +4181,12 @@
 801021c1:	89 e5                	mov    %esp,%ebp
 801021c3:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-801021c6:	68 e6 77 10 80       	push   $0x801077e6
-801021cb:	68 00 16 11 80       	push   $0x80111600
-801021d0:	e8 5b 25 00 00       	call   80104730 <initlock>
+801021c6:	68 06 88 10 80       	push   $0x80108806
+801021cb:	68 00 26 11 80       	push   $0x80112600
+801021d0:	e8 6b 34 00 00       	call   80105640 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 801021d5:	58                   	pop    %eax
-801021d6:	a1 84 17 11 80       	mov    0x80111784,%eax
+801021d6:	a1 84 27 11 80       	mov    0x80112784,%eax
 801021db:	5a                   	pop    %edx
 801021dc:	83 e8 01             	sub    $0x1,%eax
 801021df:	50                   	push   %eax
@@ -4218,7 +4218,7 @@
 80102216:	84 c0                	test   %al,%al
 80102218:	74 f6                	je     80102210 <ideinit+0x50>
       havedisk1 = 1;
-8010221a:	c7 05 e0 15 11 80 01 	movl   $0x1,0x801115e0
+8010221a:	c7 05 e0 25 11 80 01 	movl   $0x1,0x801125e0
 80102221:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80102224:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
@@ -4247,11 +4247,11 @@
 
   // First queued buffer is the active request.
   acquire(&idelock);
-80102249:	68 00 16 11 80       	push   $0x80111600
-8010224e:	e8 ad 26 00 00       	call   80104900 <acquire>
+80102249:	68 00 26 11 80       	push   $0x80112600
+8010224e:	e8 bd 35 00 00       	call   80105810 <acquire>
 
   if((b = idequeue) == 0){
-80102253:	8b 1d e4 15 11 80    	mov    0x801115e4,%ebx
+80102253:	8b 1d e4 25 11 80    	mov    0x801125e4,%ebx
 80102259:	83 c4 10             	add    $0x10,%esp
 8010225c:	85 db                	test   %ebx,%ebx
 8010225e:	74 63                	je     801022c3 <ideintr+0x83>
@@ -4260,7 +4260,7 @@
   }
   idequeue = b->qnext;
 80102260:	8b 43 58             	mov    0x58(%ebx),%eax
-80102263:	a3 e4 15 11 80       	mov    %eax,0x801115e4
+80102263:	a3 e4 25 11 80       	mov    %eax,0x801125e4
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
@@ -4300,11 +4300,11 @@
 801022aa:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 801022ac:	53                   	push   %ebx
-801022ad:	e8 5e 1e 00 00       	call   80104110 <wakeup>
+801022ad:	e8 ae 2a 00 00       	call   80104d60 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-801022b2:	a1 e4 15 11 80       	mov    0x801115e4,%eax
+801022b2:	a1 e4 25 11 80       	mov    0x801125e4,%eax
 801022b7:	83 c4 10             	add    $0x10,%esp
 801022ba:	85 c0                	test   %eax,%eax
 801022bc:	74 05                	je     801022c3 <ideintr+0x83>
@@ -4312,8 +4312,8 @@
 801022be:	e8 1d fe ff ff       	call   801020e0 <idestart>
     release(&idelock);
 801022c3:	83 ec 0c             	sub    $0xc,%esp
-801022c6:	68 00 16 11 80       	push   $0x80111600
-801022cb:	e8 d0 25 00 00       	call   801048a0 <release>
+801022c6:	68 00 26 11 80       	push   $0x80112600
+801022cb:	e8 e0 34 00 00       	call   801057b0 <release>
 
   release(&idelock);
 }
@@ -4343,7 +4343,7 @@
   if(!holdingsleep(&b->lock))
 801022ea:	8d 43 0c             	lea    0xc(%ebx),%eax
 801022ed:	50                   	push   %eax
-801022ee:	e8 ed 23 00 00       	call   801046e0 <holdingsleep>
+801022ee:	e8 fd 32 00 00       	call   801055f0 <holdingsleep>
 801022f3:	83 c4 10             	add    $0x10,%esp
 801022f6:	85 c0                	test   %eax,%eax
 801022f8:	0f 84 c3 00 00 00    	je     801023c1 <iderw+0xe1>
@@ -4358,20 +4358,20 @@
 8010230c:	8b 53 04             	mov    0x4(%ebx),%edx
 8010230f:	85 d2                	test   %edx,%edx
 80102311:	74 0d                	je     80102320 <iderw+0x40>
-80102313:	a1 e0 15 11 80       	mov    0x801115e0,%eax
+80102313:	a1 e0 25 11 80       	mov    0x801125e0,%eax
 80102318:	85 c0                	test   %eax,%eax
 8010231a:	0f 84 87 00 00 00    	je     801023a7 <iderw+0xc7>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
 80102320:	83 ec 0c             	sub    $0xc,%esp
-80102323:	68 00 16 11 80       	push   $0x80111600
-80102328:	e8 d3 25 00 00       	call   80104900 <acquire>
+80102323:	68 00 26 11 80       	push   $0x80112600
+80102328:	e8 e3 34 00 00       	call   80105810 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-8010232d:	a1 e4 15 11 80       	mov    0x801115e4,%eax
+8010232d:	a1 e4 25 11 80       	mov    0x801125e4,%eax
   b->qnext = 0;
 80102332:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
@@ -4389,7 +4389,7 @@
 
   // Start disk if necessary.
   if(idequeue == b)
-8010234e:	39 1d e4 15 11 80    	cmp    %ebx,0x801115e4
+8010234e:	39 1d e4 25 11 80    	cmp    %ebx,0x801125e4
 80102354:	74 3a                	je     80102390 <iderw+0xb0>
     idestart(b);
 
@@ -4401,9 +4401,9 @@
 8010235e:	74 1b                	je     8010237b <iderw+0x9b>
     sleep(b, &idelock);
 80102360:	83 ec 08             	sub    $0x8,%esp
-80102363:	68 00 16 11 80       	push   $0x80111600
+80102363:	68 00 26 11 80       	push   $0x80112600
 80102368:	53                   	push   %ebx
-80102369:	e8 e2 1c 00 00       	call   80104050 <sleep>
+80102369:	e8 32 29 00 00       	call   80104ca0 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010236e:	8b 03                	mov    (%ebx),%eax
 80102370:	83 c4 10             	add    $0x10,%esp
@@ -4414,12 +4414,12 @@
 
 
   release(&idelock);
-8010237b:	c7 45 08 00 16 11 80 	movl   $0x80111600,0x8(%ebp)
+8010237b:	c7 45 08 00 26 11 80 	movl   $0x80112600,0x8(%ebp)
 }
 80102382:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102385:	c9                   	leave  
   release(&idelock);
-80102386:	e9 15 25 00 00       	jmp    801048a0 <release>
+80102386:	e9 25 34 00 00       	jmp    801057b0 <release>
 8010238b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010238f:	90                   	nop
     idestart(b);
@@ -4428,19 +4428,19 @@
 80102397:	eb bd                	jmp    80102356 <iderw+0x76>
 80102399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801023a0:	ba e4 15 11 80       	mov    $0x801115e4,%edx
+801023a0:	ba e4 25 11 80       	mov    $0x801125e4,%edx
 801023a5:	eb a5                	jmp    8010234c <iderw+0x6c>
     panic("iderw: ide disk 1 not present");
 801023a7:	83 ec 0c             	sub    $0xc,%esp
-801023aa:	68 15 78 10 80       	push   $0x80107815
+801023aa:	68 35 88 10 80       	push   $0x80108835
 801023af:	e8 cc df ff ff       	call   80100380 <panic>
     panic("iderw: nothing to do");
 801023b4:	83 ec 0c             	sub    $0xc,%esp
-801023b7:	68 00 78 10 80       	push   $0x80107800
+801023b7:	68 20 88 10 80       	push   $0x80108820
 801023bc:	e8 bf df ff ff       	call   80100380 <panic>
     panic("iderw: buf not locked");
 801023c1:	83 ec 0c             	sub    $0xc,%esp
-801023c4:	68 ea 77 10 80       	push   $0x801077ea
+801023c4:	68 0a 88 10 80       	push   $0x8010880a
 801023c9:	e8 b2 df ff ff       	call   80100380 <panic>
 801023ce:	66 90                	xchg   %ax,%ax
 
@@ -4455,7 +4455,7 @@
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-801023d1:	c7 05 34 16 11 80 00 	movl   $0xfec00000,0x80111634
+801023d1:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
 801023d8:	00 c0 fe 
 {
 801023db:	89 e5                	mov    %esp,%ebp
@@ -4465,16 +4465,16 @@
 801023df:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
 801023e6:	00 00 00 
   return ioapic->data;
-801023e9:	8b 15 34 16 11 80    	mov    0x80111634,%edx
+801023e9:	8b 15 34 26 11 80    	mov    0x80112634,%edx
 801023ef:	8b 72 10             	mov    0x10(%edx),%esi
   ioapic->reg = reg;
 801023f2:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
   return ioapic->data;
-801023f8:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+801023f8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-801023fe:	0f b6 15 80 17 11 80 	movzbl 0x80111780,%edx
+801023fe:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
 80102405:	c1 ee 10             	shr    $0x10,%esi
 80102408:	89 f0                	mov    %esi,%eax
@@ -4488,10 +4488,10 @@
 80102415:	74 16                	je     8010242d <ioapicinit+0x5d>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 80102417:	83 ec 0c             	sub    $0xc,%esp
-8010241a:	68 34 78 10 80       	push   $0x80107834
+8010241a:	68 54 88 10 80       	push   $0x80108854
 8010241f:	e8 7c e2 ff ff       	call   801006a0 <cprintf>
   ioapic->reg = reg;
-80102424:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+80102424:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
 8010242a:	83 c4 10             	add    $0x10,%esp
 8010242d:	83 c6 21             	add    $0x21,%esi
 {
@@ -4507,7 +4507,7 @@
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
 80102442:	89 c3                	mov    %eax,%ebx
   ioapic->data = data;
-80102444:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+80102444:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
   for(i = 0; i <= maxintr; i++){
 8010244a:	83 c0 01             	add    $0x1,%eax
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
@@ -4521,7 +4521,7 @@
   ioapic->reg = reg;
 8010245c:	89 19                	mov    %ebx,(%ecx)
   ioapic->data = data;
-8010245e:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+8010245e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
 80102464:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
 8010246b:	39 f0                	cmp    %esi,%eax
@@ -4544,7 +4544,7 @@
 {
 80102480:	55                   	push   %ebp
   ioapic->reg = reg;
-80102481:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+80102481:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
 {
 80102487:	89 e5                	mov    %esp,%ebp
 80102489:	8b 45 08             	mov    0x8(%ebp),%eax
@@ -4557,7 +4557,7 @@
   ioapic->reg = reg;
 80102493:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102495:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
+80102495:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 8010249b:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
@@ -4567,7 +4567,7 @@
   ioapic->reg = reg;
 801024a4:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-801024a6:	a1 34 16 11 80       	mov    0x80111634,%eax
+801024a6:	a1 34 26 11 80       	mov    0x80112634,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
 801024ab:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
@@ -4600,7 +4600,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 801024ca:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 801024d0:	75 76                	jne    80102548 <kfree+0x88>
-801024d2:	81 fb d0 55 11 80    	cmp    $0x801155d0,%ebx
+801024d2:	81 fb f0 6b 11 80    	cmp    $0x80116bf0,%ebx
 801024d8:	72 6e                	jb     80102548 <kfree+0x88>
 801024da:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 801024e0:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4613,23 +4613,23 @@
 801024ea:	68 00 10 00 00       	push   $0x1000
 801024ef:	6a 01                	push   $0x1
 801024f1:	53                   	push   %ebx
-801024f2:	e8 c9 24 00 00       	call   801049c0 <memset>
+801024f2:	e8 d9 33 00 00       	call   801058d0 <memset>
 
   if(kmem.use_lock)
-801024f7:	8b 15 74 16 11 80    	mov    0x80111674,%edx
+801024f7:	8b 15 74 26 11 80    	mov    0x80112674,%edx
 801024fd:	83 c4 10             	add    $0x10,%esp
 80102500:	85 d2                	test   %edx,%edx
 80102502:	75 1c                	jne    80102520 <kfree+0x60>
     acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
-80102504:	a1 78 16 11 80       	mov    0x80111678,%eax
+80102504:	a1 78 26 11 80       	mov    0x80112678,%eax
 80102509:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
   if(kmem.use_lock)
-8010250b:	a1 74 16 11 80       	mov    0x80111674,%eax
+8010250b:	a1 74 26 11 80       	mov    0x80112674,%eax
   kmem.freelist = r;
-80102510:	89 1d 78 16 11 80    	mov    %ebx,0x80111678
+80102510:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
   if(kmem.use_lock)
 80102516:	85 c0                	test   %eax,%eax
 80102518:	75 1e                	jne    80102538 <kfree+0x78>
@@ -4641,21 +4641,21 @@
 8010251f:	90                   	nop
     acquire(&kmem.lock);
 80102520:	83 ec 0c             	sub    $0xc,%esp
-80102523:	68 40 16 11 80       	push   $0x80111640
-80102528:	e8 d3 23 00 00       	call   80104900 <acquire>
+80102523:	68 40 26 11 80       	push   $0x80112640
+80102528:	e8 e3 32 00 00       	call   80105810 <acquire>
 8010252d:	83 c4 10             	add    $0x10,%esp
 80102530:	eb d2                	jmp    80102504 <kfree+0x44>
 80102532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&kmem.lock);
-80102538:	c7 45 08 40 16 11 80 	movl   $0x80111640,0x8(%ebp)
+80102538:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
 }
 8010253f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102542:	c9                   	leave  
     release(&kmem.lock);
-80102543:	e9 58 23 00 00       	jmp    801048a0 <release>
+80102543:	e9 68 32 00 00       	jmp    801057b0 <release>
     panic("kfree");
 80102548:	83 ec 0c             	sub    $0xc,%esp
-8010254b:	68 66 78 10 80       	push   $0x80107866
+8010254b:	68 86 88 10 80       	push   $0x80108886
 80102550:	e8 2b de ff ff       	call   80100380 <panic>
 80102555:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010255c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4730,7 +4730,7 @@
 801025f0:	39 de                	cmp    %ebx,%esi
 801025f2:	73 e4                	jae    801025d8 <kinit2+0x28>
   kmem.use_lock = 1;
-801025f4:	c7 05 74 16 11 80 01 	movl   $0x1,0x80111674
+801025f4:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
 801025fb:	00 00 00 
 }
 801025fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
@@ -4750,15 +4750,15 @@
 80102615:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 80102618:	83 ec 08             	sub    $0x8,%esp
-8010261b:	68 6c 78 10 80       	push   $0x8010786c
-80102620:	68 40 16 11 80       	push   $0x80111640
-80102625:	e8 06 21 00 00       	call   80104730 <initlock>
+8010261b:	68 8c 88 10 80       	push   $0x8010888c
+80102620:	68 40 26 11 80       	push   $0x80112640
+80102625:	e8 16 30 00 00       	call   80105640 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010262a:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
 8010262d:	83 c4 10             	add    $0x10,%esp
   kmem.use_lock = 0;
-80102630:	c7 05 74 16 11 80 00 	movl   $0x0,0x80111674
+80102630:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
 80102637:	00 00 00 
   p = (char*)PGROUNDUP((uint)vstart);
 8010263a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
@@ -4795,18 +4795,18 @@
   struct run *r;
 
   if(kmem.use_lock)
-80102680:	a1 74 16 11 80       	mov    0x80111674,%eax
+80102680:	a1 74 26 11 80       	mov    0x80112674,%eax
 80102685:	85 c0                	test   %eax,%eax
 80102687:	75 1f                	jne    801026a8 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-80102689:	a1 78 16 11 80       	mov    0x80111678,%eax
+80102689:	a1 78 26 11 80       	mov    0x80112678,%eax
   if(r)
 8010268e:	85 c0                	test   %eax,%eax
 80102690:	74 0e                	je     801026a0 <kalloc+0x20>
     kmem.freelist = r->next;
 80102692:	8b 10                	mov    (%eax),%edx
-80102694:	89 15 78 16 11 80    	mov    %edx,0x80111678
+80102694:	89 15 78 26 11 80    	mov    %edx,0x80112678
   if(kmem.use_lock)
 8010269a:	c3                   	ret    
 8010269b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4821,27 +4821,27 @@
 801026a9:	89 e5                	mov    %esp,%ebp
 801026ab:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-801026ae:	68 40 16 11 80       	push   $0x80111640
-801026b3:	e8 48 22 00 00       	call   80104900 <acquire>
+801026ae:	68 40 26 11 80       	push   $0x80112640
+801026b3:	e8 58 31 00 00       	call   80105810 <acquire>
   r = kmem.freelist;
-801026b8:	a1 78 16 11 80       	mov    0x80111678,%eax
+801026b8:	a1 78 26 11 80       	mov    0x80112678,%eax
   if(kmem.use_lock)
-801026bd:	8b 15 74 16 11 80    	mov    0x80111674,%edx
+801026bd:	8b 15 74 26 11 80    	mov    0x80112674,%edx
   if(r)
 801026c3:	83 c4 10             	add    $0x10,%esp
 801026c6:	85 c0                	test   %eax,%eax
 801026c8:	74 08                	je     801026d2 <kalloc+0x52>
     kmem.freelist = r->next;
 801026ca:	8b 08                	mov    (%eax),%ecx
-801026cc:	89 0d 78 16 11 80    	mov    %ecx,0x80111678
+801026cc:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
   if(kmem.use_lock)
 801026d2:	85 d2                	test   %edx,%edx
 801026d4:	74 16                	je     801026ec <kalloc+0x6c>
     release(&kmem.lock);
 801026d6:	83 ec 0c             	sub    $0xc,%esp
 801026d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801026dc:	68 40 16 11 80       	push   $0x80111640
-801026e1:	e8 ba 21 00 00       	call   801048a0 <release>
+801026dc:	68 40 26 11 80       	push   $0x80112640
+801026e1:	e8 ca 30 00 00       	call   801057b0 <release>
   return (char*)r;
 801026e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4874,7 +4874,7 @@
 
   if(data == 0xE0){
     shift |= E0ESC;
-80102708:	8b 1d 7c 16 11 80    	mov    0x8011167c,%ebx
+80102708:	8b 1d 7c 26 11 80    	mov    0x8011267c,%ebx
   data = inb(KBDATAP);
 8010270e:	0f b6 c8             	movzbl %al,%ecx
   if(data == 0xE0){
@@ -4904,9 +4904,9 @@
   }
 
   shift |= shiftcode[data];
-8010272b:	0f b6 91 a0 79 10 80 	movzbl -0x7fef8660(%ecx),%edx
+8010272b:	0f b6 91 c0 89 10 80 	movzbl -0x7fef7640(%ecx),%edx
   shift ^= togglecode[data];
-80102732:	0f b6 81 a0 78 10 80 	movzbl -0x7fef8760(%ecx),%eax
+80102732:	0f b6 81 c0 88 10 80 	movzbl -0x7fef7740(%ecx),%eax
   shift |= shiftcode[data];
 80102739:	09 da                	or     %ebx,%edx
   shift ^= togglecode[data];
@@ -4914,13 +4914,13 @@
   c = charcode[shift & (CTL | SHIFT)][data];
 8010273d:	89 d0                	mov    %edx,%eax
   shift ^= togglecode[data];
-8010273f:	89 15 7c 16 11 80    	mov    %edx,0x8011167c
+8010273f:	89 15 7c 26 11 80    	mov    %edx,0x8011267c
   c = charcode[shift & (CTL | SHIFT)][data];
 80102745:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
 80102748:	83 e2 08             	and    $0x8,%edx
   c = charcode[shift & (CTL | SHIFT)][data];
-8010274b:	8b 04 85 80 78 10 80 	mov    -0x7fef8780(,%eax,4),%eax
+8010274b:	8b 04 85 a0 88 10 80 	mov    -0x7fef7760(,%eax,4),%eax
 80102752:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
   if(shift & CAPSLOCK){
 80102756:	74 0b                	je     80102763 <kbdgetc+0x73>
@@ -4945,7 +4945,7 @@
     return 0;
 80102773:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-80102775:	89 1d 7c 16 11 80    	mov    %ebx,0x8011167c
+80102775:	89 1d 7c 26 11 80    	mov    %ebx,0x8011267c
 }
 8010277b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 8010277e:	c9                   	leave  
@@ -4955,7 +4955,7 @@
 80102783:	85 d2                	test   %edx,%edx
 80102785:	0f 44 c8             	cmove  %eax,%ecx
     shift &= ~(shiftcode[data] | E0ESC);
-80102788:	0f b6 81 a0 79 10 80 	movzbl -0x7fef8660(%ecx),%eax
+80102788:	0f b6 81 c0 89 10 80 	movzbl -0x7fef7640(%ecx),%eax
 8010278f:	83 c8 40             	or     $0x40,%eax
 80102792:	0f b6 c0             	movzbl %al,%eax
 80102795:	f7 d0                	not    %eax
@@ -4963,7 +4963,7 @@
 }
 80102799:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     shift &= ~(shiftcode[data] | E0ESC);
-8010279c:	a3 7c 16 11 80       	mov    %eax,0x8011167c
+8010279c:	a3 7c 26 11 80       	mov    %eax,0x8011267c
     return 0;
 801027a1:	31 c0                	xor    %eax,%eax
 }
@@ -5019,7 +5019,7 @@
 lapicinit(void)
 {
   if(!lapic)
-801027f0:	a1 80 16 11 80       	mov    0x80111680,%eax
+801027f0:	a1 80 26 11 80       	mov    0x80112680,%eax
 801027f5:	85 c0                	test   %eax,%eax
 801027f7:	0f 84 cb 00 00 00    	je     801028c8 <lapicinit+0xd8>
   lapic[index] = value;
@@ -5131,7 +5131,7 @@
 lapicid(void)
 {
   if (!lapic)
-801028f0:	a1 80 16 11 80       	mov    0x80111680,%eax
+801028f0:	a1 80 26 11 80       	mov    0x80112680,%eax
 801028f5:	85 c0                	test   %eax,%eax
 801028f7:	74 07                	je     80102900 <lapicid+0x10>
     return 0;
@@ -5153,7 +5153,7 @@
 lapiceoi(void)
 {
   if(lapic)
-80102910:	a1 80 16 11 80       	mov    0x80111680,%eax
+80102910:	a1 80 26 11 80       	mov    0x80112680,%eax
 80102915:	85 c0                	test   %eax,%eax
 80102917:	74 0d                	je     80102926 <lapiceoi+0x16>
   lapic[index] = value;
@@ -5231,7 +5231,7 @@
   wrv[1] = addr >> 4;
 80102978:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-8010297e:	a1 80 16 11 80       	mov    0x80111680,%eax
+8010297e:	a1 80 26 11 80       	mov    0x80112680,%eax
 80102983:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
 80102989:	8b 58 20             	mov    0x20(%eax),%ebx
@@ -5441,7 +5441,7 @@
 80102af2:	50                   	push   %eax
 80102af3:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102af6:	50                   	push   %eax
-80102af7:	e8 14 1f 00 00       	call   80104a10 <memcmp>
+80102af7:	e8 24 2e 00 00       	call   80105920 <memcmp>
 80102afc:	83 c4 10             	add    $0x10,%esp
 80102aff:	85 c0                	test   %eax,%eax
 80102b01:	0f 85 f1 fe ff ff    	jne    801029f8 <cmostime+0x28>
@@ -5538,7 +5538,7 @@
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-80102bc0:	8b 0d e8 16 11 80    	mov    0x801116e8,%ecx
+80102bc0:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
 80102bc6:	85 c9                	test   %ecx,%ecx
 80102bc8:	0f 8e 8a 00 00 00    	jle    80102c58 <install_trans+0x98>
 {
@@ -5553,19 +5553,19 @@
 80102bd6:	83 ec 0c             	sub    $0xc,%esp
 80102bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102be0:	a1 d4 16 11 80       	mov    0x801116d4,%eax
+80102be0:	a1 d4 26 11 80       	mov    0x801126d4,%eax
 80102be5:	83 ec 08             	sub    $0x8,%esp
 80102be8:	01 f8                	add    %edi,%eax
 80102bea:	83 c0 01             	add    $0x1,%eax
 80102bed:	50                   	push   %eax
-80102bee:	ff 35 e4 16 11 80    	push   0x801116e4
+80102bee:	ff 35 e4 26 11 80    	push   0x801126e4
 80102bf4:	e8 d7 d4 ff ff       	call   801000d0 <bread>
 80102bf9:	89 c6                	mov    %eax,%esi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
 80102bfb:	58                   	pop    %eax
 80102bfc:	5a                   	pop    %edx
-80102bfd:	ff 34 bd ec 16 11 80 	push   -0x7feee914(,%edi,4)
-80102c04:	ff 35 e4 16 11 80    	push   0x801116e4
+80102bfd:	ff 34 bd ec 26 11 80 	push   -0x7feed914(,%edi,4)
+80102c04:	ff 35 e4 26 11 80    	push   0x801126e4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102c0a:	83 c7 01             	add    $0x1,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
@@ -5580,7 +5580,7 @@
 80102c1f:	50                   	push   %eax
 80102c20:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102c23:	50                   	push   %eax
-80102c24:	e8 37 1e 00 00       	call   80104a60 <memmove>
+80102c24:	e8 47 2d 00 00       	call   80105970 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102c29:	89 1c 24             	mov    %ebx,(%esp)
 80102c2c:	e8 7f d5 ff ff       	call   801001b0 <bwrite>
@@ -5592,7 +5592,7 @@
 80102c3c:	e8 af d5 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102c41:	83 c4 10             	add    $0x10,%esp
-80102c44:	39 3d e8 16 11 80    	cmp    %edi,0x801116e8
+80102c44:	39 3d e8 26 11 80    	cmp    %edi,0x801126e8
 80102c4a:	7f 94                	jg     80102be0 <install_trans+0x20>
   }
 }
@@ -5618,8 +5618,8 @@
 80102c63:	53                   	push   %ebx
 80102c64:	83 ec 0c             	sub    $0xc,%esp
   struct buf *buf = bread(log.dev, log.start);
-80102c67:	ff 35 d4 16 11 80    	push   0x801116d4
-80102c6d:	ff 35 e4 16 11 80    	push   0x801116e4
+80102c67:	ff 35 d4 26 11 80    	push   0x801126d4
+80102c6d:	ff 35 e4 26 11 80    	push   0x801126e4
 80102c73:	e8 58 d4 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
@@ -5629,7 +5629,7 @@
   struct buf *buf = bread(log.dev, log.start);
 80102c7b:	89 c3                	mov    %eax,%ebx
   hb->n = log.lh.n;
-80102c7d:	a1 e8 16 11 80       	mov    0x801116e8,%eax
+80102c7d:	a1 e8 26 11 80       	mov    0x801126e8,%eax
 80102c82:	89 43 5c             	mov    %eax,0x5c(%ebx)
   for (i = 0; i < log.lh.n; i++) {
 80102c85:	85 c0                	test   %eax,%eax
@@ -5638,7 +5638,7 @@
 80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80102c8f:	90                   	nop
     hb->block[i] = log.lh.block[i];
-80102c90:	8b 0c 95 ec 16 11 80 	mov    -0x7feee914(,%edx,4),%ecx
+80102c90:	8b 0c 95 ec 26 11 80 	mov    -0x7feed914(,%edx,4),%ecx
 80102c97:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102c9b:	83 c2 01             	add    $0x1,%edx
@@ -5668,9 +5668,9 @@
 80102cc4:	83 ec 2c             	sub    $0x2c,%esp
 80102cc7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102cca:	68 a0 7a 10 80       	push   $0x80107aa0
-80102ccf:	68 a0 16 11 80       	push   $0x801116a0
-80102cd4:	e8 57 1a 00 00       	call   80104730 <initlock>
+80102cca:	68 c0 8a 10 80       	push   $0x80108ac0
+80102ccf:	68 a0 26 11 80       	push   $0x801126a0
+80102cd4:	e8 67 29 00 00       	call   80105640 <initlock>
   readsb(dev, &sb);
 80102cd9:	58                   	pop    %eax
 80102cda:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5683,13 +5683,13 @@
   struct buf *buf = bread(log.dev, log.start);
 80102ce8:	59                   	pop    %ecx
   log.dev = dev;
-80102ce9:	89 1d e4 16 11 80    	mov    %ebx,0x801116e4
+80102ce9:	89 1d e4 26 11 80    	mov    %ebx,0x801126e4
   log.size = sb.nlog;
 80102cef:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80102cf2:	a3 d4 16 11 80       	mov    %eax,0x801116d4
+80102cf2:	a3 d4 26 11 80       	mov    %eax,0x801126d4
   log.size = sb.nlog;
-80102cf7:	89 15 d8 16 11 80    	mov    %edx,0x801116d8
+80102cf7:	89 15 d8 26 11 80    	mov    %edx,0x801126d8
   struct buf *buf = bread(log.dev, log.start);
 80102cfd:	5a                   	pop    %edx
 80102cfe:	50                   	push   %eax
@@ -5699,7 +5699,7 @@
 80102d05:	83 c4 10             	add    $0x10,%esp
   log.lh.n = lh->n;
 80102d08:	8b 58 5c             	mov    0x5c(%eax),%ebx
-80102d0b:	89 1d e8 16 11 80    	mov    %ebx,0x801116e8
+80102d0b:	89 1d e8 26 11 80    	mov    %ebx,0x801126e8
   for (i = 0; i < log.lh.n; i++) {
 80102d11:	85 db                	test   %ebx,%ebx
 80102d13:	7e 1d                	jle    80102d32 <initlog+0x72>
@@ -5708,7 +5708,7 @@
 80102d1e:	66 90                	xchg   %ax,%ax
     log.lh.block[i] = lh->block[i];
 80102d20:	8b 4c 90 60          	mov    0x60(%eax,%edx,4),%ecx
-80102d24:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
+80102d24:	89 0c 95 ec 26 11 80 	mov    %ecx,-0x7feed914(,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
 80102d2b:	83 c2 01             	add    $0x1,%edx
 80102d2e:	39 d3                	cmp    %edx,%ebx
@@ -5725,7 +5725,7 @@
   install_trans(); // if committed, copy from log to disk
 80102d3b:	e8 80 fe ff ff       	call   80102bc0 <install_trans>
   log.lh.n = 0;
-80102d40:	c7 05 e8 16 11 80 00 	movl   $0x0,0x801116e8
+80102d40:	c7 05 e8 26 11 80 00 	movl   $0x0,0x801126e8
 80102d47:	00 00 00 
   write_head(); // clear the log
 80102d4a:	e8 11 ff ff ff       	call   80102c60 <write_head>
@@ -5748,8 +5748,8 @@
 80102d61:	89 e5                	mov    %esp,%ebp
 80102d63:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-80102d66:	68 a0 16 11 80       	push   $0x801116a0
-80102d6b:	e8 90 1b 00 00       	call   80104900 <acquire>
+80102d66:	68 a0 26 11 80       	push   $0x801126a0
+80102d6b:	e8 a0 2a 00 00       	call   80105810 <acquire>
 80102d70:	83 c4 10             	add    $0x10,%esp
 80102d73:	eb 18                	jmp    80102d8d <begin_op+0x2d>
 80102d75:	8d 76 00             	lea    0x0(%esi),%esi
@@ -5757,17 +5757,17 @@
     if(log.committing){
       sleep(&log, &log.lock);
 80102d78:	83 ec 08             	sub    $0x8,%esp
-80102d7b:	68 a0 16 11 80       	push   $0x801116a0
-80102d80:	68 a0 16 11 80       	push   $0x801116a0
-80102d85:	e8 c6 12 00 00       	call   80104050 <sleep>
+80102d7b:	68 a0 26 11 80       	push   $0x801126a0
+80102d80:	68 a0 26 11 80       	push   $0x801126a0
+80102d85:	e8 16 1f 00 00       	call   80104ca0 <sleep>
 80102d8a:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-80102d8d:	a1 e0 16 11 80       	mov    0x801116e0,%eax
+80102d8d:	a1 e0 26 11 80       	mov    0x801126e0,%eax
 80102d92:	85 c0                	test   %eax,%eax
 80102d94:	75 e2                	jne    80102d78 <begin_op+0x18>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102d96:	a1 dc 16 11 80       	mov    0x801116dc,%eax
-80102d9b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
+80102d96:	a1 dc 26 11 80       	mov    0x801126dc,%eax
+80102d9b:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
 80102da1:	83 c0 01             	add    $0x1,%eax
 80102da4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
 80102da7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
@@ -5780,10 +5780,10 @@
       release(&log.lock);
 80102daf:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-80102db2:	a3 dc 16 11 80       	mov    %eax,0x801116dc
+80102db2:	a3 dc 26 11 80       	mov    %eax,0x801126dc
       release(&log.lock);
-80102db7:	68 a0 16 11 80       	push   $0x801116a0
-80102dbc:	e8 df 1a 00 00       	call   801048a0 <release>
+80102db7:	68 a0 26 11 80       	push   $0x801126a0
+80102dbc:	e8 ef 29 00 00       	call   801057b0 <release>
       break;
     }
   }
@@ -5810,16 +5810,16 @@
   int do_commit = 0;
 
   acquire(&log.lock);
-80102dd9:	68 a0 16 11 80       	push   $0x801116a0
-80102dde:	e8 1d 1b 00 00       	call   80104900 <acquire>
+80102dd9:	68 a0 26 11 80       	push   $0x801126a0
+80102dde:	e8 2d 2a 00 00       	call   80105810 <acquire>
   log.outstanding -= 1;
-80102de3:	a1 dc 16 11 80       	mov    0x801116dc,%eax
+80102de3:	a1 dc 26 11 80       	mov    0x801126dc,%eax
   if(log.committing)
-80102de8:	8b 35 e0 16 11 80    	mov    0x801116e0,%esi
+80102de8:	8b 35 e0 26 11 80    	mov    0x801126e0,%esi
 80102dee:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
 80102df1:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102df4:	89 1d dc 16 11 80    	mov    %ebx,0x801116dc
+80102df4:	89 1d dc 26 11 80    	mov    %ebx,0x801126dc
   if(log.committing)
 80102dfa:	85 f6                	test   %esi,%esi
 80102dfc:	0f 85 22 01 00 00    	jne    80102f24 <end_op+0x154>
@@ -5829,7 +5829,7 @@
 80102e04:	0f 85 f6 00 00 00    	jne    80102f00 <end_op+0x130>
     do_commit = 1;
     log.committing = 1;
-80102e0a:	c7 05 e0 16 11 80 01 	movl   $0x1,0x801116e0
+80102e0a:	c7 05 e0 26 11 80 01 	movl   $0x1,0x801126e0
 80102e11:	00 00 00 
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
@@ -5838,32 +5838,32 @@
   }
   release(&log.lock);
 80102e14:	83 ec 0c             	sub    $0xc,%esp
-80102e17:	68 a0 16 11 80       	push   $0x801116a0
-80102e1c:	e8 7f 1a 00 00       	call   801048a0 <release>
+80102e17:	68 a0 26 11 80       	push   $0x801126a0
+80102e1c:	e8 8f 29 00 00       	call   801057b0 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-80102e21:	8b 0d e8 16 11 80    	mov    0x801116e8,%ecx
+80102e21:	8b 0d e8 26 11 80    	mov    0x801126e8,%ecx
 80102e27:	83 c4 10             	add    $0x10,%esp
 80102e2a:	85 c9                	test   %ecx,%ecx
 80102e2c:	7f 42                	jg     80102e70 <end_op+0xa0>
     acquire(&log.lock);
 80102e2e:	83 ec 0c             	sub    $0xc,%esp
-80102e31:	68 a0 16 11 80       	push   $0x801116a0
-80102e36:	e8 c5 1a 00 00       	call   80104900 <acquire>
+80102e31:	68 a0 26 11 80       	push   $0x801126a0
+80102e36:	e8 d5 29 00 00       	call   80105810 <acquire>
     wakeup(&log);
-80102e3b:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
+80102e3b:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
     log.committing = 0;
-80102e42:	c7 05 e0 16 11 80 00 	movl   $0x0,0x801116e0
+80102e42:	c7 05 e0 26 11 80 00 	movl   $0x0,0x801126e0
 80102e49:	00 00 00 
     wakeup(&log);
-80102e4c:	e8 bf 12 00 00       	call   80104110 <wakeup>
+80102e4c:	e8 0f 1f 00 00       	call   80104d60 <wakeup>
     release(&log.lock);
-80102e51:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
-80102e58:	e8 43 1a 00 00       	call   801048a0 <release>
+80102e51:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+80102e58:	e8 53 29 00 00       	call   801057b0 <release>
 80102e5d:	83 c4 10             	add    $0x10,%esp
 }
 80102e60:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5875,19 +5875,19 @@
 80102e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102e6f:	90                   	nop
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102e70:	a1 d4 16 11 80       	mov    0x801116d4,%eax
+80102e70:	a1 d4 26 11 80       	mov    0x801126d4,%eax
 80102e75:	83 ec 08             	sub    $0x8,%esp
 80102e78:	01 d8                	add    %ebx,%eax
 80102e7a:	83 c0 01             	add    $0x1,%eax
 80102e7d:	50                   	push   %eax
-80102e7e:	ff 35 e4 16 11 80    	push   0x801116e4
+80102e7e:	ff 35 e4 26 11 80    	push   0x801126e4
 80102e84:	e8 47 d2 ff ff       	call   801000d0 <bread>
 80102e89:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
 80102e8b:	58                   	pop    %eax
 80102e8c:	5a                   	pop    %edx
-80102e8d:	ff 34 9d ec 16 11 80 	push   -0x7feee914(,%ebx,4)
-80102e94:	ff 35 e4 16 11 80    	push   0x801116e4
+80102e8d:	ff 34 9d ec 26 11 80 	push   -0x7feed914(,%ebx,4)
+80102e94:	ff 35 e4 26 11 80    	push   0x801126e4
   for (tail = 0; tail < log.lh.n; tail++) {
 80102e9a:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
@@ -5902,7 +5902,7 @@
 80102eaf:	50                   	push   %eax
 80102eb0:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102eb3:	50                   	push   %eax
-80102eb4:	e8 a7 1b 00 00       	call   80104a60 <memmove>
+80102eb4:	e8 b7 2a 00 00       	call   80105970 <memmove>
     bwrite(to);  // write the log
 80102eb9:	89 34 24             	mov    %esi,(%esp)
 80102ebc:	e8 ef d2 ff ff       	call   801001b0 <bwrite>
@@ -5914,7 +5914,7 @@
 80102ecc:	e8 1f d3 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
 80102ed1:	83 c4 10             	add    $0x10,%esp
-80102ed4:	3b 1d e8 16 11 80    	cmp    0x801116e8,%ebx
+80102ed4:	3b 1d e8 26 11 80    	cmp    0x801126e8,%ebx
 80102eda:	7c 94                	jl     80102e70 <end_op+0xa0>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
@@ -5922,7 +5922,7 @@
     install_trans(); // Now install writes to home locations
 80102ee1:	e8 da fc ff ff       	call   80102bc0 <install_trans>
     log.lh.n = 0;
-80102ee6:	c7 05 e8 16 11 80 00 	movl   $0x0,0x801116e8
+80102ee6:	c7 05 e8 26 11 80 00 	movl   $0x0,0x801126e8
 80102eed:	00 00 00 
     write_head();    // Erase the transaction from the log
 80102ef0:	e8 6b fd ff ff       	call   80102c60 <write_head>
@@ -5930,11 +5930,11 @@
 80102efa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     wakeup(&log);
 80102f00:	83 ec 0c             	sub    $0xc,%esp
-80102f03:	68 a0 16 11 80       	push   $0x801116a0
-80102f08:	e8 03 12 00 00       	call   80104110 <wakeup>
+80102f03:	68 a0 26 11 80       	push   $0x801126a0
+80102f08:	e8 53 1e 00 00       	call   80104d60 <wakeup>
   release(&log.lock);
-80102f0d:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
-80102f14:	e8 87 19 00 00       	call   801048a0 <release>
+80102f0d:	c7 04 24 a0 26 11 80 	movl   $0x801126a0,(%esp)
+80102f14:	e8 97 28 00 00       	call   801057b0 <release>
 80102f19:	83 c4 10             	add    $0x10,%esp
 }
 80102f1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5945,7 +5945,7 @@
 80102f23:	c3                   	ret    
     panic("log.committing");
 80102f24:	83 ec 0c             	sub    $0xc,%esp
-80102f27:	68 a4 7a 10 80       	push   $0x80107aa4
+80102f27:	68 c4 8a 10 80       	push   $0x80108ac4
 80102f2c:	e8 4f d4 ff ff       	call   80100380 <panic>
 80102f31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5965,29 +5965,29 @@
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f47:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
+80102f47:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
 {
 80102f4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
 80102f50:	83 fa 1d             	cmp    $0x1d,%edx
 80102f53:	0f 8f 85 00 00 00    	jg     80102fde <log_write+0x9e>
-80102f59:	a1 d8 16 11 80       	mov    0x801116d8,%eax
+80102f59:	a1 d8 26 11 80       	mov    0x801126d8,%eax
 80102f5e:	83 e8 01             	sub    $0x1,%eax
 80102f61:	39 c2                	cmp    %eax,%edx
 80102f63:	7d 79                	jge    80102fde <log_write+0x9e>
     panic("too big a transaction");
   if (log.outstanding < 1)
-80102f65:	a1 dc 16 11 80       	mov    0x801116dc,%eax
+80102f65:	a1 dc 26 11 80       	mov    0x801126dc,%eax
 80102f6a:	85 c0                	test   %eax,%eax
 80102f6c:	7e 7d                	jle    80102feb <log_write+0xab>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
 80102f6e:	83 ec 0c             	sub    $0xc,%esp
-80102f71:	68 a0 16 11 80       	push   $0x801116a0
-80102f76:	e8 85 19 00 00       	call   80104900 <acquire>
+80102f71:	68 a0 26 11 80       	push   $0x801126a0
+80102f76:	e8 95 28 00 00       	call   80105810 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-80102f7b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
+80102f7b:	8b 15 e8 26 11 80    	mov    0x801126e8,%edx
 80102f81:	83 c4 10             	add    $0x10,%esp
 80102f84:	85 d2                	test   %edx,%edx
 80102f86:	7e 4a                	jle    80102fd2 <log_write+0x92>
@@ -6001,12 +6001,12 @@
 80102f93:	39 c2                	cmp    %eax,%edx
 80102f95:	74 29                	je     80102fc0 <log_write+0x80>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f97:	39 0c 85 ec 16 11 80 	cmp    %ecx,-0x7feee914(,%eax,4)
+80102f97:	39 0c 85 ec 26 11 80 	cmp    %ecx,-0x7feed914(,%eax,4)
 80102f9e:	75 f0                	jne    80102f90 <log_write+0x50>
       break;
   }
   log.lh.block[i] = b->blockno;
-80102fa0:	89 0c 85 ec 16 11 80 	mov    %ecx,-0x7feee914(,%eax,4)
+80102fa0:	89 0c 85 ec 26 11 80 	mov    %ecx,-0x7feed914(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
@@ -6015,31 +6015,31 @@
 }
 80102faa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&log.lock);
-80102fad:	c7 45 08 a0 16 11 80 	movl   $0x801116a0,0x8(%ebp)
+80102fad:	c7 45 08 a0 26 11 80 	movl   $0x801126a0,0x8(%ebp)
 }
 80102fb4:	c9                   	leave  
   release(&log.lock);
-80102fb5:	e9 e6 18 00 00       	jmp    801048a0 <release>
+80102fb5:	e9 f6 27 00 00       	jmp    801057b0 <release>
 80102fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-80102fc0:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
+80102fc0:	89 0c 95 ec 26 11 80 	mov    %ecx,-0x7feed914(,%edx,4)
     log.lh.n++;
 80102fc7:	83 c2 01             	add    $0x1,%edx
-80102fca:	89 15 e8 16 11 80    	mov    %edx,0x801116e8
+80102fca:	89 15 e8 26 11 80    	mov    %edx,0x801126e8
 80102fd0:	eb d5                	jmp    80102fa7 <log_write+0x67>
   log.lh.block[i] = b->blockno;
 80102fd2:	8b 43 08             	mov    0x8(%ebx),%eax
-80102fd5:	a3 ec 16 11 80       	mov    %eax,0x801116ec
+80102fd5:	a3 ec 26 11 80       	mov    %eax,0x801126ec
   if (i == log.lh.n)
 80102fda:	75 cb                	jne    80102fa7 <log_write+0x67>
 80102fdc:	eb e9                	jmp    80102fc7 <log_write+0x87>
     panic("too big a transaction");
 80102fde:	83 ec 0c             	sub    $0xc,%esp
-80102fe1:	68 b3 7a 10 80       	push   $0x80107ab3
+80102fe1:	68 d3 8a 10 80       	push   $0x80108ad3
 80102fe6:	e8 95 d3 ff ff       	call   80100380 <panic>
     panic("log_write outside of trans");
 80102feb:	83 ec 0c             	sub    $0xc,%esp
-80102fee:	68 c9 7a 10 80       	push   $0x80107ac9
+80102fee:	68 e9 8a 10 80       	push   $0x80108ae9
 80102ff3:	e8 88 d3 ff ff       	call   80100380 <panic>
 80102ff8:	66 90                	xchg   %ax,%ax
 80102ffa:	66 90                	xchg   %ax,%ax
@@ -6058,18 +6058,18 @@
 80103003:	53                   	push   %ebx
 80103004:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80103007:	e8 84 09 00 00       	call   80103990 <cpuid>
+80103007:	e8 84 12 00 00       	call   80104290 <cpuid>
 8010300c:	89 c3                	mov    %eax,%ebx
-8010300e:	e8 7d 09 00 00       	call   80103990 <cpuid>
+8010300e:	e8 7d 12 00 00       	call   80104290 <cpuid>
 80103013:	83 ec 04             	sub    $0x4,%esp
 80103016:	53                   	push   %ebx
 80103017:	50                   	push   %eax
-80103018:	68 e4 7a 10 80       	push   $0x80107ae4
+80103018:	68 04 8b 10 80       	push   $0x80108b04
 8010301d:	e8 7e d6 ff ff       	call   801006a0 <cprintf>
   idtinit();       // load idt register
-80103022:	e8 29 2d 00 00       	call   80105d50 <idtinit>
+80103022:	e8 19 3d 00 00       	call   80106d40 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103027:	e8 04 09 00 00       	call   80103930 <mycpu>
+80103027:	e8 04 12 00 00       	call   80104230 <mycpu>
 8010302c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
@@ -6080,7 +6080,7 @@
 8010302e:	b8 01 00 00 00       	mov    $0x1,%eax
 80103033:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010303a:	e8 31 0c 00 00       	call   80103c70 <scheduler>
+8010303a:	e8 21 16 00 00       	call   80104660 <scheduler>
 8010303f:	90                   	nop
 
 80103040 <mpenter>:
@@ -6089,9 +6089,9 @@
 80103041:	89 e5                	mov    %esp,%ebp
 80103043:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80103046:	e8 f5 3d 00 00       	call   80106e40 <switchkvm>
+80103046:	e8 05 4e 00 00       	call   80107e50 <switchkvm>
   seginit();
-8010304b:	e8 60 3d 00 00       	call   80106db0 <seginit>
+8010304b:	e8 70 4d 00 00       	call   80107dc0 <seginit>
   lapicinit();
 80103050:	e8 9b f7 ff ff       	call   801027f0 <lapicinit>
   mpmain();
@@ -6112,16 +6112,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 8010306f:	83 ec 08             	sub    $0x8,%esp
 80103072:	68 00 00 40 80       	push   $0x80400000
-80103077:	68 d0 55 11 80       	push   $0x801155d0
+80103077:	68 f0 6b 11 80       	push   $0x80116bf0
 8010307c:	e8 8f f5 ff ff       	call   80102610 <kinit1>
   kvmalloc();      // kernel page table
-80103081:	e8 aa 42 00 00       	call   80107330 <kvmalloc>
+80103081:	e8 ba 52 00 00       	call   80108340 <kvmalloc>
   mpinit();        // detect other processors
 80103086:	e8 85 01 00 00       	call   80103210 <mpinit>
   lapicinit();     // interrupt controller
 8010308b:	e8 60 f7 ff ff       	call   801027f0 <lapicinit>
   seginit();       // segment descriptors
-80103090:	e8 1b 3d 00 00       	call   80106db0 <seginit>
+80103090:	e8 2b 4d 00 00       	call   80107dc0 <seginit>
   picinit();       // disable pic
 80103095:	e8 76 03 00 00       	call   80103410 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6129,11 +6129,11 @@
   consoleinit();   // console hardware
 8010309f:	e8 bc d9 ff ff       	call   80100a60 <consoleinit>
   uartinit();      // serial port
-801030a4:	e8 97 2f 00 00       	call   80106040 <uartinit>
+801030a4:	e8 a7 3f 00 00       	call   80107050 <uartinit>
   pinit();         // process table
-801030a9:	e8 62 08 00 00       	call   80103910 <pinit>
+801030a9:	e8 42 11 00 00       	call   801041f0 <pinit>
   tvinit();        // trap vectors
-801030ae:	e8 1d 2c 00 00       	call   80105cd0 <tvinit>
+801030ae:	e8 0d 3c 00 00       	call   80106cc0 <tvinit>
   binit();         // buffer cache
 801030b3:	e8 88 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6148,28 +6148,28 @@
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
 801030c2:	83 c4 0c             	add    $0xc,%esp
 801030c5:	68 8a 00 00 00       	push   $0x8a
-801030ca:	68 8c a4 10 80       	push   $0x8010a48c
+801030ca:	68 8c b4 10 80       	push   $0x8010b48c
 801030cf:	68 00 70 00 80       	push   $0x80007000
-801030d4:	e8 87 19 00 00       	call   80104a60 <memmove>
+801030d4:	e8 97 28 00 00       	call   80105970 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030d9:	83 c4 10             	add    $0x10,%esp
-801030dc:	69 05 84 17 11 80 b0 	imul   $0xb0,0x80111784,%eax
+801030dc:	69 05 84 27 11 80 b0 	imul   $0xb0,0x80112784,%eax
 801030e3:	00 00 00 
-801030e6:	05 a0 17 11 80       	add    $0x801117a0,%eax
-801030eb:	3d a0 17 11 80       	cmp    $0x801117a0,%eax
+801030e6:	05 a0 27 11 80       	add    $0x801127a0,%eax
+801030eb:	3d a0 27 11 80       	cmp    $0x801127a0,%eax
 801030f0:	76 7e                	jbe    80103170 <main+0x110>
-801030f2:	bb a0 17 11 80       	mov    $0x801117a0,%ebx
+801030f2:	bb a0 27 11 80       	mov    $0x801127a0,%ebx
 801030f7:	eb 20                	jmp    80103119 <main+0xb9>
 801030f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103100:	69 05 84 17 11 80 b0 	imul   $0xb0,0x80111784,%eax
+80103100:	69 05 84 27 11 80 b0 	imul   $0xb0,0x80112784,%eax
 80103107:	00 00 00 
 8010310a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-80103110:	05 a0 17 11 80       	add    $0x801117a0,%eax
+80103110:	05 a0 27 11 80       	add    $0x801127a0,%eax
 80103115:	39 c3                	cmp    %eax,%ebx
 80103117:	73 57                	jae    80103170 <main+0x110>
     if(c == mycpu())  // We've started already.
-80103119:	e8 12 08 00 00       	call   80103930 <mycpu>
+80103119:	e8 12 11 00 00       	call   80104230 <mycpu>
 8010311e:	39 c3                	cmp    %eax,%ebx
 80103120:	74 de                	je     80103100 <main+0xa0>
       continue;
@@ -6189,8 +6189,8 @@
 8010312a:	c7 05 f8 6f 00 80 40 	movl   $0x80103040,0x80006ff8
 80103131:	30 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103134:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-8010313b:	90 10 00 
+80103134:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+8010313b:	a0 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
 8010313e:	05 00 10 00 00       	add    $0x1000,%eax
 80103143:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
@@ -6215,7 +6215,7 @@
 80103178:	68 00 00 40 80       	push   $0x80400000
 8010317d:	e8 2e f4 ff ff       	call   801025b0 <kinit2>
   userinit();      // first user process
-80103182:	e8 59 08 00 00       	call   801039e0 <userinit>
+80103182:	e8 59 11 00 00       	call   801042e0 <userinit>
   mpmain();        // finish this processor's setup
 80103187:	e8 74 fe ff ff       	call   80103000 <mpmain>
 8010318c:	66 90                	xchg   %ax,%ax
@@ -6255,9 +6255,9 @@
 801031b6:	83 ec 04             	sub    $0x4,%esp
 801031b9:	8d 7e 10             	lea    0x10(%esi),%edi
 801031bc:	6a 04                	push   $0x4
-801031be:	68 f8 7a 10 80       	push   $0x80107af8
+801031be:	68 18 8b 10 80       	push   $0x80108b18
 801031c3:	56                   	push   %esi
-801031c4:	e8 47 18 00 00       	call   80104a10 <memcmp>
+801031c4:	e8 57 27 00 00       	call   80105920 <memcmp>
 801031c9:	83 c4 10             	add    $0x10,%esp
 801031cc:	85 c0                	test   %eax,%eax
 801031ce:	75 e0                	jne    801031b0 <mpsearch1+0x20>
@@ -6344,12 +6344,12 @@
 8010326e:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103274:	6a 04                	push   $0x4
-80103276:	68 fd 7a 10 80       	push   $0x80107afd
+80103276:	68 1d 8b 10 80       	push   $0x80108b1d
 8010327b:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 8010327c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-8010327f:	e8 8c 17 00 00       	call   80104a10 <memcmp>
+8010327f:	e8 9c 26 00 00       	call   80105920 <memcmp>
 80103284:	83 c4 10             	add    $0x10,%esp
 80103287:	85 c0                	test   %eax,%eax
 80103289:	0f 85 01 01 00 00    	jne    80103390 <mpinit+0x180>
@@ -6388,7 +6388,7 @@
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
 801032d0:	8b 86 24 00 00 80    	mov    -0x7fffffdc(%esi),%eax
-801032d6:	a3 80 16 11 80       	mov    %eax,0x80111680
+801032d6:	a3 80 26 11 80       	mov    %eax,0x80112680
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
 801032db:	0f b7 96 04 00 00 80 	movzwl -0x7ffffffc(%esi),%edx
 801032e2:	8d 86 2c 00 00 80    	lea    -0x7fffffd4(%esi),%eax
@@ -6467,12 +6467,12 @@
       p += sizeof(struct mpioapic);
 80103354:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-80103357:	88 0d 80 17 11 80    	mov    %cl,0x80111780
+80103357:	88 0d 80 27 11 80    	mov    %cl,0x80112780
       continue;
 8010335d:	eb 99                	jmp    801032f8 <mpinit+0xe8>
 8010335f:	90                   	nop
       if(ncpu < NCPU) {
-80103360:	8b 0d 84 17 11 80    	mov    0x80111784,%ecx
+80103360:	8b 0d 84 27 11 80    	mov    0x80112784,%ecx
 80103366:	83 f9 07             	cmp    $0x7,%ecx
 80103369:	7f 19                	jg     80103384 <mpinit+0x174>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
@@ -6480,9 +6480,9 @@
 80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
         ncpu++;
 80103375:	83 c1 01             	add    $0x1,%ecx
-80103378:	89 0d 84 17 11 80    	mov    %ecx,0x80111784
+80103378:	89 0d 84 27 11 80    	mov    %ecx,0x80112784
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010337e:	88 9f a0 17 11 80    	mov    %bl,-0x7feee860(%edi)
+8010337e:	88 9f a0 27 11 80    	mov    %bl,-0x7feed860(%edi)
       p += sizeof(struct mpproc);
 80103384:	83 c0 14             	add    $0x14,%eax
       continue;
@@ -6490,7 +6490,7 @@
 8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 80103390:	83 ec 0c             	sub    $0xc,%esp
-80103393:	68 02 7b 10 80       	push   $0x80107b02
+80103393:	68 22 8b 10 80       	push   $0x80108b22
 80103398:	e8 e3 cf ff ff       	call   80100380 <panic>
 8010339d:	8d 76 00             	lea    0x0(%esi),%esi
 {
@@ -6506,9 +6506,9 @@
 801033ba:	83 ec 04             	sub    $0x4,%esp
 801033bd:	8d 73 10             	lea    0x10(%ebx),%esi
 801033c0:	6a 04                	push   $0x4
-801033c2:	68 f8 7a 10 80       	push   $0x80107af8
+801033c2:	68 18 8b 10 80       	push   $0x80108b18
 801033c7:	53                   	push   %ebx
-801033c8:	e8 43 16 00 00       	call   80104a10 <memcmp>
+801033c8:	e8 53 25 00 00       	call   80105920 <memcmp>
 801033cd:	83 c4 10             	add    $0x10,%esp
 801033d0:	85 c0                	test   %eax,%eax
 801033d2:	75 dc                	jne    801033b0 <mpinit+0x1a0>
@@ -6530,7 +6530,7 @@
 801033f0:	e9 6b fe ff ff       	jmp    80103260 <mpinit+0x50>
     panic("Didn't find a suitable machine");
 801033f5:	83 ec 0c             	sub    $0xc,%esp
-801033f8:	68 1c 7b 10 80       	push   $0x80107b1c
+801033f8:	68 3c 8b 10 80       	push   $0x80108b3c
 801033fd:	e8 7e cf ff ff       	call   80100380 <panic>
 80103402:	66 90                	xchg   %ax,%ax
 80103404:	66 90                	xchg   %ax,%ax
@@ -6616,9 +6616,9 @@
 80103499:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 801034a0:	00 00 00 
   initlock(&p->lock, "pipe");
-801034a3:	68 3b 7b 10 80       	push   $0x80107b3b
+801034a3:	68 5b 8b 10 80       	push   $0x80108b5b
 801034a8:	50                   	push   %eax
-801034a9:	e8 82 12 00 00       	call   80104730 <initlock>
+801034a9:	e8 92 21 00 00       	call   80105640 <initlock>
   (*f0)->type = FD_PIPE;
 801034ae:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6716,7 +6716,7 @@
   acquire(&p->lock);
 8010353b:	83 ec 0c             	sub    $0xc,%esp
 8010353e:	53                   	push   %ebx
-8010353f:	e8 bc 13 00 00       	call   80104900 <acquire>
+8010353f:	e8 cc 22 00 00       	call   80105810 <acquire>
   if(writable){
 80103544:	83 c4 10             	add    $0x10,%esp
 80103547:	85 f6                	test   %esi,%esi
@@ -6730,7 +6730,7 @@
 8010355b:	00 00 00 
     wakeup(&p->nread);
 8010355e:	50                   	push   %eax
-8010355f:	e8 ac 0b 00 00       	call   80104110 <wakeup>
+8010355f:	e8 fc 17 00 00       	call   80104d60 <wakeup>
 80103564:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
@@ -6754,12 +6754,12 @@
 80103582:	5e                   	pop    %esi
 80103583:	5d                   	pop    %ebp
     release(&p->lock);
-80103584:	e9 17 13 00 00       	jmp    801048a0 <release>
+80103584:	e9 27 22 00 00       	jmp    801057b0 <release>
 80103589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     release(&p->lock);
 80103590:	83 ec 0c             	sub    $0xc,%esp
 80103593:	53                   	push   %ebx
-80103594:	e8 07 13 00 00       	call   801048a0 <release>
+80103594:	e8 17 22 00 00       	call   801057b0 <release>
     kfree((char*)p);
 80103599:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010359c:	83 c4 10             	add    $0x10,%esp
@@ -6779,7 +6779,7 @@
 801035c0:	00 00 00 
     wakeup(&p->nwrite);
 801035c3:	50                   	push   %eax
-801035c4:	e8 47 0b 00 00       	call   80104110 <wakeup>
+801035c4:	e8 97 17 00 00       	call   80104d60 <wakeup>
 801035c9:	83 c4 10             	add    $0x10,%esp
 801035cc:	eb 99                	jmp    80103567 <pipeclose+0x37>
 801035ce:	66 90                	xchg   %ax,%ax
@@ -6801,7 +6801,7 @@
 
   acquire(&p->lock);
 801035dc:	53                   	push   %ebx
-801035dd:	e8 1e 13 00 00       	call   80104900 <acquire>
+801035dd:	e8 2e 22 00 00       	call   80105810 <acquire>
   for(i = 0; i < n; i++){
 801035e2:	8b 45 10             	mov    0x10(%ebp),%eax
 801035e5:	83 c4 10             	add    $0x10,%esp
@@ -6831,20 +6831,20 @@
 8010361f:	eb 67                	jmp    80103688 <pipewrite+0xb8>
 80103621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->readopen == 0 || myproc()->killed){
-80103628:	e8 83 03 00 00       	call   801039b0 <myproc>
+80103628:	e8 83 0c 00 00       	call   801042b0 <myproc>
 8010362d:	8b 48 24             	mov    0x24(%eax),%ecx
 80103630:	85 c9                	test   %ecx,%ecx
 80103632:	75 34                	jne    80103668 <pipewrite+0x98>
       wakeup(&p->nread);
 80103634:	83 ec 0c             	sub    $0xc,%esp
 80103637:	57                   	push   %edi
-80103638:	e8 d3 0a 00 00       	call   80104110 <wakeup>
+80103638:	e8 23 17 00 00       	call   80104d60 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 8010363d:	58                   	pop    %eax
 8010363e:	5a                   	pop    %edx
 8010363f:	53                   	push   %ebx
 80103640:	56                   	push   %esi
-80103641:	e8 0a 0a 00 00       	call   80104050 <sleep>
+80103641:	e8 5a 16 00 00       	call   80104ca0 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103646:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 8010364c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6859,7 +6859,7 @@
         release(&p->lock);
 80103668:	83 ec 0c             	sub    $0xc,%esp
 8010366b:	53                   	push   %ebx
-8010366c:	e8 2f 12 00 00       	call   801048a0 <release>
+8010366c:	e8 3f 21 00 00       	call   801057b0 <release>
         return -1;
 80103671:	83 c4 10             	add    $0x10,%esp
 80103674:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6894,10 +6894,10 @@
 801036b0:	83 ec 0c             	sub    $0xc,%esp
 801036b3:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 801036b9:	50                   	push   %eax
-801036ba:	e8 51 0a 00 00       	call   80104110 <wakeup>
+801036ba:	e8 a1 16 00 00       	call   80104d60 <wakeup>
   release(&p->lock);
 801036bf:	89 1c 24             	mov    %ebx,(%esp)
-801036c2:	e8 d9 11 00 00       	call   801048a0 <release>
+801036c2:	e8 e9 20 00 00       	call   801057b0 <release>
   return n;
 801036c7:	8b 45 10             	mov    0x10(%ebp),%eax
 801036ca:	83 c4 10             	add    $0x10,%esp
@@ -6922,7 +6922,7 @@
   acquire(&p->lock);
 801036df:	56                   	push   %esi
 801036e0:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036e6:	e8 15 12 00 00       	call   80104900 <acquire>
+801036e6:	e8 25 21 00 00       	call   80105810 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036eb:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036f1:	83 c4 10             	add    $0x10,%esp
@@ -6931,7 +6931,7 @@
 801036fc:	eb 37                	jmp    80103735 <piperead+0x65>
 801036fe:	66 90                	xchg   %ax,%ax
     if(myproc()->killed){
-80103700:	e8 ab 02 00 00       	call   801039b0 <myproc>
+80103700:	e8 ab 0b 00 00       	call   801042b0 <myproc>
 80103705:	8b 48 24             	mov    0x24(%eax),%ecx
 80103708:	85 c9                	test   %ecx,%ecx
 8010370a:	0f 85 80 00 00 00    	jne    80103790 <piperead+0xc0>
@@ -6942,7 +6942,7 @@
 80103710:	83 ec 08             	sub    $0x8,%esp
 80103713:	56                   	push   %esi
 80103714:	53                   	push   %ebx
-80103715:	e8 36 09 00 00       	call   80104050 <sleep>
+80103715:	e8 86 15 00 00       	call   80104ca0 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 8010371a:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
 80103720:	83 c4 10             	add    $0x10,%esp
@@ -6979,10 +6979,10 @@
 8010376c:	83 ec 0c             	sub    $0xc,%esp
 8010376f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 80103775:	50                   	push   %eax
-80103776:	e8 95 09 00 00       	call   80104110 <wakeup>
+80103776:	e8 e5 15 00 00       	call   80104d60 <wakeup>
   release(&p->lock);
 8010377b:	89 34 24             	mov    %esi,(%esp)
-8010377e:	e8 1d 11 00 00       	call   801048a0 <release>
+8010377e:	e8 2d 20 00 00       	call   801057b0 <release>
   return i;
 80103783:	83 c4 10             	add    $0x10,%esp
 }
@@ -6999,7 +6999,7 @@
 80103793:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103798:	56                   	push   %esi
-80103799:	e8 02 11 00 00       	call   801048a0 <release>
+80103799:	e8 12 20 00 00       	call   801057b0 <release>
       return -1;
 8010379e:	83 c4 10             	add    $0x10,%esp
 }
@@ -7014,9145 +7014,10975 @@
 801037ad:	66 90                	xchg   %ax,%ax
 801037af:	90                   	nop
 
-801037b0 <wakeup1>:
-static void
-wakeup1(void *chan)
-{
+801037b0 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+801037b0:	55                   	push   %ebp
+801037b1:	89 e5                	mov    %esp,%ebp
+801037b3:	53                   	push   %ebx
   struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
-801037b5:	eb 14                	jmp    801037cb <wakeup1+0x1b>
-801037b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801037be:	66 90                	xchg   %ax,%ax
-801037c0:	83 ea 80             	sub    $0xffffff80,%edx
-801037c3:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
-801037c9:	74 1d                	je     801037e8 <wakeup1+0x38>
-    if(p->state == SLEEPING && p->chan == chan)
-801037cb:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
-801037cf:	75 ef                	jne    801037c0 <wakeup1+0x10>
-801037d1:	39 42 20             	cmp    %eax,0x20(%edx)
-801037d4:	75 ea                	jne    801037c0 <wakeup1+0x10>
-      p->state = RUNNABLE;
-801037d6:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037dd:	83 ea 80             	sub    $0xffffff80,%edx
-801037e0:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
-801037e6:	75 e3                	jne    801037cb <wakeup1+0x1b>
-}
-801037e8:	c3                   	ret    
-801037e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801037f0 <allocproc>:
-{
-801037f0:	55                   	push   %ebp
-801037f1:	89 e5                	mov    %esp,%ebp
-801037f3:	53                   	push   %ebx
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037f4:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+801037b4:	bb 74 30 11 80       	mov    $0x80113074,%ebx
 {
-801037f9:	83 ec 10             	sub    $0x10,%esp
+801037b9:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-801037fc:	68 20 1d 11 80       	push   $0x80111d20
-80103801:	e8 fa 10 00 00       	call   80104900 <acquire>
-80103806:	83 c4 10             	add    $0x10,%esp
-80103809:	eb 10                	jmp    8010381b <allocproc+0x2b>
-8010380b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010380f:	90                   	nop
+801037bc:	68 40 30 11 80       	push   $0x80113040
+801037c1:	e8 4a 20 00 00       	call   80105810 <acquire>
+801037c6:	83 c4 10             	add    $0x10,%esp
+801037c9:	eb 17                	jmp    801037e2 <allocproc+0x32>
+801037cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801037cf:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103810:	83 eb 80             	sub    $0xffffff80,%ebx
-80103813:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
-80103819:	74 75                	je     80103890 <allocproc+0xa0>
+801037d0:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+801037d6:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+801037dc:	0f 84 9e 00 00 00    	je     80103880 <allocproc+0xd0>
     if(p->state == UNUSED)
-8010381b:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010381e:	85 c0                	test   %eax,%eax
-80103820:	75 ee                	jne    80103810 <allocproc+0x20>
+801037e2:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037e5:	85 c0                	test   %eax,%eax
+801037e7:	75 e7                	jne    801037d0 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
   p->pid = nextpid++;
-80103822:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+801037e9:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+  p->numSwitches = 0;
+  p->parent = &defaultParent;
+  p->burst_time = 0;
+  p->run_time = 0;
   release(&ptable.lock);
-80103827:	83 ec 0c             	sub    $0xc,%esp
+801037ee:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-8010382a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037f1:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->numSwitches = 0;
+801037f8:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+801037ff:	00 00 00 
   p->pid = nextpid++;
-80103831:	89 43 10             	mov    %eax,0x10(%ebx)
-80103834:	8d 50 01             	lea    0x1(%eax),%edx
+80103802:	89 43 10             	mov    %eax,0x10(%ebx)
+80103805:	8d 50 01             	lea    0x1(%eax),%edx
+  p->parent = &defaultParent;
+80103808:	c7 43 14 20 2d 11 80 	movl   $0x80112d20,0x14(%ebx)
+  p->burst_time = 0;
+8010380f:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
+80103816:	00 00 00 
+  p->run_time = 0;
+80103819:	c7 83 88 00 00 00 00 	movl   $0x0,0x88(%ebx)
+80103820:	00 00 00 
   release(&ptable.lock);
-80103837:	68 20 1d 11 80       	push   $0x80111d20
+80103823:	68 40 30 11 80       	push   $0x80113040
   p->pid = nextpid++;
-8010383c:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+80103828:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
   release(&ptable.lock);
-80103842:	e8 59 10 00 00       	call   801048a0 <release>
+8010382e:	e8 7d 1f 00 00       	call   801057b0 <release>
+
+  // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-80103847:	e8 34 ee ff ff       	call   80102680 <kalloc>
-8010384c:	83 c4 10             	add    $0x10,%esp
-8010384f:	89 43 08             	mov    %eax,0x8(%ebx)
-80103852:	85 c0                	test   %eax,%eax
-80103854:	74 53                	je     801038a9 <allocproc+0xb9>
+80103833:	e8 48 ee ff ff       	call   80102680 <kalloc>
+80103838:	83 c4 10             	add    $0x10,%esp
+8010383b:	89 43 08             	mov    %eax,0x8(%ebx)
+8010383e:	85 c0                	test   %eax,%eax
+80103840:	74 57                	je     80103899 <allocproc+0xe9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
   sp -= sizeof *p->tf;
-80103856:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+80103842:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-8010385c:	83 ec 04             	sub    $0x4,%esp
+80103848:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-8010385f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+8010384b:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103864:	89 53 18             	mov    %edx,0x18(%ebx)
+80103850:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103867:	c7 40 14 bf 5c 10 80 	movl   $0x80105cbf,0x14(%eax)
+80103853:	c7 40 14 ad 6c 10 80 	movl   $0x80106cad,0x14(%eax)
   p->context = (struct context*)sp;
-8010386e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+8010385a:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103871:	6a 14                	push   $0x14
-80103873:	6a 00                	push   $0x0
-80103875:	50                   	push   %eax
-80103876:	e8 45 11 00 00       	call   801049c0 <memset>
+8010385d:	6a 14                	push   $0x14
+8010385f:	6a 00                	push   $0x0
+80103861:	50                   	push   %eax
+80103862:	e8 69 20 00 00       	call   801058d0 <memset>
   p->context->eip = (uint)forkret;
-8010387b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+80103867:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
   return p;
-8010387e:	83 c4 10             	add    $0x10,%esp
+8010386a:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103881:	c7 40 10 c0 38 10 80 	movl   $0x801038c0,0x10(%eax)
+8010386d:	c7 40 10 b0 38 10 80 	movl   $0x801038b0,0x10(%eax)
 }
-80103888:	89 d8                	mov    %ebx,%eax
-8010388a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010388d:	c9                   	leave  
-8010388e:	c3                   	ret    
-8010388f:	90                   	nop
+80103874:	89 d8                	mov    %ebx,%eax
+80103876:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103879:	c9                   	leave  
+8010387a:	c3                   	ret    
+8010387b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010387f:	90                   	nop
   release(&ptable.lock);
-80103890:	83 ec 0c             	sub    $0xc,%esp
+80103880:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103893:	31 db                	xor    %ebx,%ebx
+80103883:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103895:	68 20 1d 11 80       	push   $0x80111d20
-8010389a:	e8 01 10 00 00       	call   801048a0 <release>
+80103885:	68 40 30 11 80       	push   $0x80113040
+8010388a:	e8 21 1f 00 00       	call   801057b0 <release>
 }
-8010389f:	89 d8                	mov    %ebx,%eax
+8010388f:	89 d8                	mov    %ebx,%eax
   return 0;
-801038a1:	83 c4 10             	add    $0x10,%esp
+80103891:	83 c4 10             	add    $0x10,%esp
 }
-801038a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801038a7:	c9                   	leave  
-801038a8:	c3                   	ret    
+80103894:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103897:	c9                   	leave  
+80103898:	c3                   	ret    
     p->state = UNUSED;
-801038a9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103899:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-801038b0:	31 db                	xor    %ebx,%ebx
+801038a0:	31 db                	xor    %ebx,%ebx
 }
-801038b2:	89 d8                	mov    %ebx,%eax
-801038b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801038b7:	c9                   	leave  
-801038b8:	c3                   	ret    
-801038b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801038c0 <forkret>:
-{
-801038c0:	55                   	push   %ebp
-801038c1:	89 e5                	mov    %esp,%ebp
-801038c3:	83 ec 14             	sub    $0x14,%esp
+801038a2:	89 d8                	mov    %ebx,%eax
+801038a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801038a7:	c9                   	leave  
+801038a8:	c3                   	ret    
+801038a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801038b0 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+801038b0:	55                   	push   %ebp
+801038b1:	89 e5                	mov    %esp,%ebp
+801038b3:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-801038c6:	68 20 1d 11 80       	push   $0x80111d20
-801038cb:	e8 d0 0f 00 00       	call   801048a0 <release>
+801038b6:	68 40 30 11 80       	push   $0x80113040
+801038bb:	e8 f0 1e 00 00       	call   801057b0 <release>
+
   if (first) {
-801038d0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-801038d5:	83 c4 10             	add    $0x10,%esp
-801038d8:	85 c0                	test   %eax,%eax
-801038da:	75 04                	jne    801038e0 <forkret+0x20>
-}
-801038dc:	c9                   	leave  
-801038dd:	c3                   	ret    
-801038de:	66 90                	xchg   %ax,%ax
+801038c0:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+801038c5:	83 c4 10             	add    $0x10,%esp
+801038c8:	85 c0                	test   %eax,%eax
+801038ca:	75 04                	jne    801038d0 <forkret+0x20>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+801038cc:	c9                   	leave  
+801038cd:	c3                   	ret    
+801038ce:	66 90                	xchg   %ax,%ax
     first = 0;
-801038e0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-801038e7:	00 00 00 
+801038d0:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+801038d7:	00 00 00 
     iinit(ROOTDEV);
-801038ea:	83 ec 0c             	sub    $0xc,%esp
-801038ed:	6a 01                	push   $0x1
-801038ef:	e8 6c dc ff ff       	call   80101560 <iinit>
+801038da:	83 ec 0c             	sub    $0xc,%esp
+801038dd:	6a 01                	push   $0x1
+801038df:	e8 7c dc ff ff       	call   80101560 <iinit>
     initlog(ROOTDEV);
-801038f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038fb:	e8 c0 f3 ff ff       	call   80102cc0 <initlog>
+801038e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038eb:	e8 d0 f3 ff ff       	call   80102cc0 <initlog>
 }
-80103900:	83 c4 10             	add    $0x10,%esp
-80103903:	c9                   	leave  
-80103904:	c3                   	ret    
-80103905:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010390c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103910 <pinit>:
-{
-80103910:	55                   	push   %ebp
-80103911:	89 e5                	mov    %esp,%ebp
-80103913:	83 ec 10             	sub    $0x10,%esp
+801038f0:	83 c4 10             	add    $0x10,%esp
+801038f3:	c9                   	leave  
+801038f4:	c3                   	ret    
+801038f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103900 <insertIntoPQ.part.0>:
+void insertIntoPQ(struct proc *p){
+80103900:	55                   	push   %ebp
+80103901:	89 e5                	mov    %esp,%ebp
+80103903:	57                   	push   %edi
+80103904:	56                   	push   %esi
+80103905:	89 c6                	mov    %eax,%esi
+80103907:	53                   	push   %ebx
+80103908:	83 ec 18             	sub    $0x18,%esp
+	acquire(&priorityQ.lock);
+8010390b:	68 04 2f 11 80       	push   $0x80112f04
+80103910:	e8 fb 1e 00 00       	call   80105810 <acquire>
+	priorityQ.sze++;
+80103915:	a1 00 2f 11 80       	mov    0x80112f00,%eax
+	while(!(curr<=1) && ((priorityQ.proc[curr]->burst_time)<(priorityQ.proc[curr/2]->burst_time))){
+8010391a:	83 c4 10             	add    $0x10,%esp
+	priorityQ.sze++;
+8010391d:	8d 50 01             	lea    0x1(%eax),%edx
+	priorityQ.proc[priorityQ.sze]=p;
+80103920:	89 34 85 3c 2f 11 80 	mov    %esi,-0x7feed0c4(,%eax,4)
+	priorityQ.sze++;
+80103927:	89 15 00 2f 11 80    	mov    %edx,0x80112f00
+	while(!(curr<=1) && ((priorityQ.proc[curr]->burst_time)<(priorityQ.proc[curr/2]->burst_time))){
+8010392d:	83 fa 01             	cmp    $0x1,%edx
+80103930:	7f 19                	jg     8010394b <insertIntoPQ.part.0+0x4b>
+80103932:	eb 33                	jmp    80103967 <insertIntoPQ.part.0+0x67>
+80103934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+		priorityQ.proc[curr]=priorityQ.proc[curr/2];
+80103938:	89 0c 85 38 2f 11 80 	mov    %ecx,-0x7feed0c8(,%eax,4)
+		priorityQ.proc[curr/2]=temp;
+8010393f:	89 34 9d 08 2f 11 80 	mov    %esi,-0x7feed0f8(,%ebx,4)
+	while(!(curr<=1) && ((priorityQ.proc[curr]->burst_time)<(priorityQ.proc[curr/2]->burst_time))){
+80103946:	83 fa 01             	cmp    $0x1,%edx
+80103949:	74 1c                	je     80103967 <insertIntoPQ.part.0+0x67>
+8010394b:	89 d0                	mov    %edx,%eax
+8010394d:	d1 fa                	sar    %edx
+8010394f:	8d 5a 0c             	lea    0xc(%edx),%ebx
+80103952:	8b 0c 9d 08 2f 11 80 	mov    -0x7feed0f8(,%ebx,4),%ecx
+80103959:	8b b9 84 00 00 00    	mov    0x84(%ecx),%edi
+8010395f:	39 be 84 00 00 00    	cmp    %edi,0x84(%esi)
+80103965:	7c d1                	jl     80103938 <insertIntoPQ.part.0+0x38>
+	release(&priorityQ.lock);
+80103967:	83 ec 0c             	sub    $0xc,%esp
+8010396a:	68 04 2f 11 80       	push   $0x80112f04
+8010396f:	e8 3c 1e 00 00       	call   801057b0 <release>
+}
+80103974:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103977:	5b                   	pop    %ebx
+80103978:	5e                   	pop    %esi
+80103979:	5f                   	pop    %edi
+8010397a:	5d                   	pop    %ebp
+8010397b:	c3                   	ret    
+8010397c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103980 <insertIntoPQ2.part.0>:
+void insertIntoPQ2(struct proc *p){
+80103980:	55                   	push   %ebp
+80103981:	89 e5                	mov    %esp,%ebp
+80103983:	57                   	push   %edi
+80103984:	56                   	push   %esi
+80103985:	89 c6                	mov    %eax,%esi
+80103987:	53                   	push   %ebx
+80103988:	83 ec 18             	sub    $0x18,%esp
+	acquire(&priorityQ2.lock);
+8010398b:	68 c4 2d 11 80       	push   $0x80112dc4
+80103990:	e8 7b 1e 00 00       	call   80105810 <acquire>
+	priorityQ2.sze++;
+80103995:	a1 c0 2d 11 80       	mov    0x80112dc0,%eax
+	while(curr>1 && ((priorityQ2.proc[curr]->burst_time)<(priorityQ2.proc[curr/2]->burst_time))){
+8010399a:	83 c4 10             	add    $0x10,%esp
+	priorityQ2.sze++;
+8010399d:	8d 50 01             	lea    0x1(%eax),%edx
+	priorityQ2.proc[priorityQ2.sze]=p;
+801039a0:	89 34 85 fc 2d 11 80 	mov    %esi,-0x7feed204(,%eax,4)
+	priorityQ2.sze++;
+801039a7:	89 15 c0 2d 11 80    	mov    %edx,0x80112dc0
+	while(curr>1 && ((priorityQ2.proc[curr]->burst_time)<(priorityQ2.proc[curr/2]->burst_time))){
+801039ad:	83 fa 01             	cmp    $0x1,%edx
+801039b0:	7f 19                	jg     801039cb <insertIntoPQ2.part.0+0x4b>
+801039b2:	eb 33                	jmp    801039e7 <insertIntoPQ2.part.0+0x67>
+801039b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+		priorityQ2.proc[curr]=priorityQ2.proc[curr/2];
+801039b8:	89 0c 85 f8 2d 11 80 	mov    %ecx,-0x7feed208(,%eax,4)
+		priorityQ2.proc[curr/2]=temp;
+801039bf:	89 34 9d c8 2d 11 80 	mov    %esi,-0x7feed238(,%ebx,4)
+	while(curr>1 && ((priorityQ2.proc[curr]->burst_time)<(priorityQ2.proc[curr/2]->burst_time))){
+801039c6:	83 fa 01             	cmp    $0x1,%edx
+801039c9:	74 1c                	je     801039e7 <insertIntoPQ2.part.0+0x67>
+801039cb:	89 d0                	mov    %edx,%eax
+801039cd:	d1 fa                	sar    %edx
+801039cf:	8d 5a 0c             	lea    0xc(%edx),%ebx
+801039d2:	8b 0c 9d c8 2d 11 80 	mov    -0x7feed238(,%ebx,4),%ecx
+801039d9:	8b b9 84 00 00 00    	mov    0x84(%ecx),%edi
+801039df:	39 be 84 00 00 00    	cmp    %edi,0x84(%esi)
+801039e5:	7c d1                	jl     801039b8 <insertIntoPQ2.part.0+0x38>
+	release(&priorityQ2.lock);
+801039e7:	83 ec 0c             	sub    $0xc,%esp
+801039ea:	68 c4 2d 11 80       	push   $0x80112dc4
+801039ef:	e8 bc 1d 00 00       	call   801057b0 <release>
+}
+801039f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801039f7:	5b                   	pop    %ebx
+801039f8:	5e                   	pop    %esi
+801039f9:	5f                   	pop    %edi
+801039fa:	5d                   	pop    %ebp
+801039fb:	c3                   	ret    
+801039fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103a00 <wakeup1>:
+//PAGEBREAK!
+// Wake up all processes sleeping on chan.
+// The ptable lock must be held.
+static void
+wakeup1(void *chan)
+{
+80103a00:	55                   	push   %ebp
+80103a01:	89 e5                	mov    %esp,%ebp
+80103a03:	56                   	push   %esi
+80103a04:	89 c6                	mov    %eax,%esi
+80103a06:	53                   	push   %ebx
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103a07:	bb 74 30 11 80       	mov    $0x80113074,%ebx
+80103a0c:	eb 10                	jmp    80103a1e <wakeup1+0x1e>
+80103a0e:	66 90                	xchg   %ax,%ax
+80103a10:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80103a16:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80103a1c:	74 50                	je     80103a6e <wakeup1+0x6e>
+    if(p->state == SLEEPING && p->chan == chan){
+80103a1e:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
+80103a22:	75 ec                	jne    80103a10 <wakeup1+0x10>
+80103a24:	39 73 20             	cmp    %esi,0x20(%ebx)
+80103a27:	75 e7                	jne    80103a10 <wakeup1+0x10>
+	acquire(&priorityQ.lock);
+80103a29:	83 ec 0c             	sub    $0xc,%esp
+    	short check = (p->state !=RUNNABLE);
+
+      p->state = RUNNABLE;
+80103a2c:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+	acquire(&priorityQ.lock);
+80103a33:	68 04 2f 11 80       	push   $0x80112f04
+80103a38:	e8 d3 1d 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+80103a3d:	83 c4 10             	add    $0x10,%esp
+80103a40:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+80103a47:	74 2f                	je     80103a78 <wakeup1+0x78>
+		release(&priorityQ.lock);
+80103a49:	83 ec 0c             	sub    $0xc,%esp
+80103a4c:	68 04 2f 11 80       	push   $0x80112f04
+80103a51:	e8 5a 1d 00 00       	call   801057b0 <release>
+		return 0;
+80103a56:	89 d8                	mov    %ebx,%eax
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103a58:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80103a5e:	e8 9d fe ff ff       	call   80103900 <insertIntoPQ.part.0>
+80103a63:	83 c4 10             	add    $0x10,%esp
+80103a66:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80103a6c:	75 b0                	jne    80103a1e <wakeup1+0x1e>
+      if(check)
+      	insertIntoPQ(p);
+    }
+}
+80103a6e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103a71:	5b                   	pop    %ebx
+80103a72:	5e                   	pop    %esi
+80103a73:	5d                   	pop    %ebp
+80103a74:	c3                   	ret    
+80103a75:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ.lock);
+80103a78:	83 ec 0c             	sub    $0xc,%esp
+80103a7b:	68 04 2f 11 80       	push   $0x80112f04
+80103a80:	e8 2b 1d 00 00       	call   801057b0 <release>
+80103a85:	83 c4 10             	add    $0x10,%esp
+80103a88:	eb 86                	jmp    80103a10 <wakeup1+0x10>
+80103a8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103a90 <isEmpty>:
+int isEmpty(){
+80103a90:	55                   	push   %ebp
+80103a91:	89 e5                	mov    %esp,%ebp
+80103a93:	83 ec 14             	sub    $0x14,%esp
+	acquire(&priorityQ.lock);
+80103a96:	68 04 2f 11 80       	push   $0x80112f04
+80103a9b:	e8 70 1d 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze == 0){
+80103aa0:	a1 00 2f 11 80       	mov    0x80112f00,%eax
+80103aa5:	83 c4 10             	add    $0x10,%esp
+80103aa8:	85 c0                	test   %eax,%eax
+80103aaa:	75 1c                	jne    80103ac8 <isEmpty+0x38>
+		release(&priorityQ.lock);
+80103aac:	83 ec 0c             	sub    $0xc,%esp
+80103aaf:	68 04 2f 11 80       	push   $0x80112f04
+80103ab4:	e8 f7 1c 00 00       	call   801057b0 <release>
+		return 1;
+80103ab9:	83 c4 10             	add    $0x10,%esp
+80103abc:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103ac1:	c9                   	leave  
+80103ac2:	c3                   	ret    
+80103ac3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ac7:	90                   	nop
+		release(&priorityQ.lock);
+80103ac8:	83 ec 0c             	sub    $0xc,%esp
+80103acb:	68 04 2f 11 80       	push   $0x80112f04
+80103ad0:	e8 db 1c 00 00       	call   801057b0 <release>
+		return 0;
+80103ad5:	83 c4 10             	add    $0x10,%esp
+80103ad8:	31 c0                	xor    %eax,%eax
+}
+80103ada:	c9                   	leave  
+80103adb:	c3                   	ret    
+80103adc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103ae0 <isEmpty2>:
+int isEmpty2(){
+80103ae0:	55                   	push   %ebp
+80103ae1:	89 e5                	mov    %esp,%ebp
+80103ae3:	83 ec 14             	sub    $0x14,%esp
+	acquire(&priorityQ2.lock);
+80103ae6:	68 c4 2d 11 80       	push   $0x80112dc4
+80103aeb:	e8 20 1d 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze == 0){
+80103af0:	a1 c0 2d 11 80       	mov    0x80112dc0,%eax
+80103af5:	83 c4 10             	add    $0x10,%esp
+80103af8:	85 c0                	test   %eax,%eax
+80103afa:	75 1c                	jne    80103b18 <isEmpty2+0x38>
+		release(&priorityQ2.lock);
+80103afc:	83 ec 0c             	sub    $0xc,%esp
+80103aff:	68 c4 2d 11 80       	push   $0x80112dc4
+80103b04:	e8 a7 1c 00 00       	call   801057b0 <release>
+		return 1;
+80103b09:	83 c4 10             	add    $0x10,%esp
+80103b0c:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103b11:	c9                   	leave  
+80103b12:	c3                   	ret    
+80103b13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103b17:	90                   	nop
+		release(&priorityQ2.lock);
+80103b18:	83 ec 0c             	sub    $0xc,%esp
+80103b1b:	68 c4 2d 11 80       	push   $0x80112dc4
+80103b20:	e8 8b 1c 00 00       	call   801057b0 <release>
+		return 0;
+80103b25:	83 c4 10             	add    $0x10,%esp
+80103b28:	31 c0                	xor    %eax,%eax
+}
+80103b2a:	c9                   	leave  
+80103b2b:	c3                   	ret    
+80103b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103b30 <isFull>:
+int isFull(){
+80103b30:	55                   	push   %ebp
+80103b31:	89 e5                	mov    %esp,%ebp
+80103b33:	83 ec 14             	sub    $0x14,%esp
+	acquire(&priorityQ.lock);
+80103b36:	68 04 2f 11 80       	push   $0x80112f04
+80103b3b:	e8 d0 1c 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+80103b40:	83 c4 10             	add    $0x10,%esp
+80103b43:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+80103b4a:	74 14                	je     80103b60 <isFull+0x30>
+		release(&priorityQ.lock);
+80103b4c:	83 ec 0c             	sub    $0xc,%esp
+80103b4f:	68 04 2f 11 80       	push   $0x80112f04
+80103b54:	e8 57 1c 00 00       	call   801057b0 <release>
+		return 0;
+80103b59:	83 c4 10             	add    $0x10,%esp
+80103b5c:	31 c0                	xor    %eax,%eax
+}
+80103b5e:	c9                   	leave  
+80103b5f:	c3                   	ret    
+		release(&priorityQ.lock);
+80103b60:	83 ec 0c             	sub    $0xc,%esp
+80103b63:	68 04 2f 11 80       	push   $0x80112f04
+80103b68:	e8 43 1c 00 00       	call   801057b0 <release>
+		return 1;
+80103b6d:	83 c4 10             	add    $0x10,%esp
+80103b70:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103b75:	c9                   	leave  
+80103b76:	c3                   	ret    
+80103b77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b7e:	66 90                	xchg   %ax,%ax
+
+80103b80 <isFull2>:
+int isFull2(){
+80103b80:	55                   	push   %ebp
+80103b81:	89 e5                	mov    %esp,%ebp
+80103b83:	83 ec 14             	sub    $0x14,%esp
+	acquire(&priorityQ2.lock);
+80103b86:	68 c4 2d 11 80       	push   $0x80112dc4
+80103b8b:	e8 80 1c 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze==NPROC){
+80103b90:	83 c4 10             	add    $0x10,%esp
+80103b93:	83 3d c0 2d 11 80 40 	cmpl   $0x40,0x80112dc0
+80103b9a:	74 14                	je     80103bb0 <isFull2+0x30>
+		release(&priorityQ2.lock);
+80103b9c:	83 ec 0c             	sub    $0xc,%esp
+80103b9f:	68 c4 2d 11 80       	push   $0x80112dc4
+80103ba4:	e8 07 1c 00 00       	call   801057b0 <release>
+		return 0;
+80103ba9:	83 c4 10             	add    $0x10,%esp
+80103bac:	31 c0                	xor    %eax,%eax
+}
+80103bae:	c9                   	leave  
+80103baf:	c3                   	ret    
+		release(&priorityQ2.lock);
+80103bb0:	83 ec 0c             	sub    $0xc,%esp
+80103bb3:	68 c4 2d 11 80       	push   $0x80112dc4
+80103bb8:	e8 f3 1b 00 00       	call   801057b0 <release>
+		return 1;
+80103bbd:	83 c4 10             	add    $0x10,%esp
+80103bc0:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+80103bc5:	c9                   	leave  
+80103bc6:	c3                   	ret    
+80103bc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bce:	66 90                	xchg   %ax,%ax
+
+80103bd0 <insertIntoPQ>:
+void insertIntoPQ(struct proc *p){
+80103bd0:	55                   	push   %ebp
+80103bd1:	89 e5                	mov    %esp,%ebp
+80103bd3:	53                   	push   %ebx
+80103bd4:	83 ec 10             	sub    $0x10,%esp
+80103bd7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+	acquire(&priorityQ.lock);
+80103bda:	68 04 2f 11 80       	push   $0x80112f04
+80103bdf:	e8 2c 1c 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+80103be4:	83 c4 10             	add    $0x10,%esp
+80103be7:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+80103bee:	74 20                	je     80103c10 <insertIntoPQ+0x40>
+		release(&priorityQ.lock);
+80103bf0:	83 ec 0c             	sub    $0xc,%esp
+80103bf3:	68 04 2f 11 80       	push   $0x80112f04
+80103bf8:	e8 b3 1b 00 00       	call   801057b0 <release>
+		return 0;
+80103bfd:	83 c4 10             	add    $0x10,%esp
+80103c00:	89 d8                	mov    %ebx,%eax
+}
+80103c02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103c05:	c9                   	leave  
+80103c06:	e9 f5 fc ff ff       	jmp    80103900 <insertIntoPQ.part.0>
+80103c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103c0f:	90                   	nop
+		release(&priorityQ.lock);
+80103c10:	c7 45 08 04 2f 11 80 	movl   $0x80112f04,0x8(%ebp)
+}
+80103c17:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103c1a:	c9                   	leave  
+		release(&priorityQ.lock);
+80103c1b:	e9 90 1b 00 00       	jmp    801057b0 <release>
+
+80103c20 <insertIntoPQ2>:
+void insertIntoPQ2(struct proc *p){
+80103c20:	55                   	push   %ebp
+80103c21:	89 e5                	mov    %esp,%ebp
+80103c23:	53                   	push   %ebx
+80103c24:	83 ec 10             	sub    $0x10,%esp
+80103c27:	8b 5d 08             	mov    0x8(%ebp),%ebx
+	acquire(&priorityQ2.lock);
+80103c2a:	68 c4 2d 11 80       	push   $0x80112dc4
+80103c2f:	e8 dc 1b 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze==NPROC){
+80103c34:	83 c4 10             	add    $0x10,%esp
+80103c37:	83 3d c0 2d 11 80 40 	cmpl   $0x40,0x80112dc0
+80103c3e:	74 20                	je     80103c60 <insertIntoPQ2+0x40>
+		release(&priorityQ2.lock);
+80103c40:	83 ec 0c             	sub    $0xc,%esp
+80103c43:	68 c4 2d 11 80       	push   $0x80112dc4
+80103c48:	e8 63 1b 00 00       	call   801057b0 <release>
+		return 0;
+80103c4d:	83 c4 10             	add    $0x10,%esp
+80103c50:	89 d8                	mov    %ebx,%eax
+}
+80103c52:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103c55:	c9                   	leave  
+80103c56:	e9 25 fd ff ff       	jmp    80103980 <insertIntoPQ2.part.0>
+80103c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103c5f:	90                   	nop
+		release(&priorityQ2.lock);
+80103c60:	c7 45 08 c4 2d 11 80 	movl   $0x80112dc4,0x8(%ebp)
+}
+80103c67:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103c6a:	c9                   	leave  
+		release(&priorityQ2.lock);
+80103c6b:	e9 40 1b 00 00       	jmp    801057b0 <release>
+
+80103c70 <heapify>:
+void heapify(int curr){
+80103c70:	55                   	push   %ebp
+80103c71:	89 e5                	mov    %esp,%ebp
+80103c73:	57                   	push   %edi
+80103c74:	56                   	push   %esi
+80103c75:	53                   	push   %ebx
+80103c76:	83 ec 38             	sub    $0x38,%esp
+80103c79:	8b 45 08             	mov    0x8(%ebp),%eax
+	acquire(&priorityQ.lock);
+80103c7c:	68 04 2f 11 80       	push   $0x80112f04
+void heapify(int curr){
+80103c81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	acquire(&priorityQ.lock);
+80103c84:	e8 87 1b 00 00       	call   80105810 <acquire>
+	while(curr*2<=priorityQ.sze){
+80103c89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103c8c:	8b 35 00 2f 11 80    	mov    0x80112f00,%esi
+80103c92:	83 c4 10             	add    $0x10,%esp
+80103c95:	8d 3c 00             	lea    (%eax,%eax,1),%edi
+80103c98:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80103c9b:	39 fe                	cmp    %edi,%esi
+80103c9d:	7d 4c                	jge    80103ceb <heapify+0x7b>
+80103c9f:	e9 a4 00 00 00       	jmp    80103d48 <heapify+0xd8>
+80103ca4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+			if((priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2]->burst_time)&&(priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2+1]->burst_time))
+80103ca8:	8b 0c bd 3c 2f 11 80 	mov    -0x7feed0c4(,%edi,4),%ecx
+80103caf:	8d 47 01             	lea    0x1(%edi),%eax
+80103cb2:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80103cb5:	8b 89 84 00 00 00    	mov    0x84(%ecx),%ecx
+80103cbb:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80103cbe:	89 f1                	mov    %esi,%ecx
+80103cc0:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80103cc3:	39 ce                	cmp    %ecx,%esi
+80103cc5:	7f 71                	jg     80103d38 <heapify+0xc8>
+80103cc7:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+80103cca:	7d 7c                	jge    80103d48 <heapify+0xd8>
+					priorityQ.proc[curr*2+1]=priorityQ.proc[curr];
+80103ccc:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+80103ccf:	8b 55 cc             	mov    -0x34(%ebp),%edx
+80103cd2:	89 1c 85 38 2f 11 80 	mov    %ebx,-0x7feed0c8(,%eax,4)
+					priorityQ.proc[curr]=temp;
+80103cd9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+	while(curr*2<=priorityQ.sze){
+80103cdc:	8d 3c 00             	lea    (%eax,%eax,1),%edi
+					priorityQ.proc[curr]=temp;
+80103cdf:	89 14 9d 08 2f 11 80 	mov    %edx,-0x7feed0f8(,%ebx,4)
+	while(curr*2<=priorityQ.sze){
+80103ce6:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80103ce9:	7f 5d                	jg     80103d48 <heapify+0xd8>
+			if((priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2]->burst_time)&&(priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2+1]->burst_time))
+80103ceb:	83 c0 0c             	add    $0xc,%eax
+80103cee:	8d 5f 0c             	lea    0xc(%edi),%ebx
+80103cf1:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80103cf4:	8b 14 9d 08 2f 11 80 	mov    -0x7feed0f8(,%ebx,4),%edx
+80103cfb:	8b 04 85 08 2f 11 80 	mov    -0x7feed0f8(,%eax,4),%eax
+80103d02:	8b b2 84 00 00 00    	mov    0x84(%edx),%esi
+80103d08:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80103d0b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
+80103d11:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+80103d14:	89 45 e0             	mov    %eax,-0x20(%ebp)
+		if(curr*2+1<=priorityQ.sze){
+80103d17:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80103d1a:	7c 8c                	jl     80103ca8 <heapify+0x38>
+			if((priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2]->burst_time))
+80103d1c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+80103d1f:	39 4d e0             	cmp    %ecx,-0x20(%ebp)
+80103d22:	7e 24                	jle    80103d48 <heapify+0xd8>
+				priorityQ.proc[curr*2]=priorityQ.proc[curr];
+80103d24:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80103d27:	89 04 9d 08 2f 11 80 	mov    %eax,-0x7feed0f8(,%ebx,4)
+80103d2e:	89 f8                	mov    %edi,%eax
+80103d30:	eb a7                	jmp    80103cd9 <heapify+0x69>
+80103d32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+				if((priorityQ.proc[curr*2]->burst_time)<=(priorityQ.proc[curr*2+1]->burst_time)){
+80103d38:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+80103d3b:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+80103d3e:	7d e4                	jge    80103d24 <heapify+0xb4>
+80103d40:	eb 8a                	jmp    80103ccc <heapify+0x5c>
+80103d42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+	release(&priorityQ.lock);
+80103d48:	c7 45 08 04 2f 11 80 	movl   $0x80112f04,0x8(%ebp)
+}
+80103d4f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103d52:	5b                   	pop    %ebx
+80103d53:	5e                   	pop    %esi
+80103d54:	5f                   	pop    %edi
+80103d55:	5d                   	pop    %ebp
+	release(&priorityQ.lock);
+80103d56:	e9 55 1a 00 00       	jmp    801057b0 <release>
+80103d5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d5f:	90                   	nop
+
+80103d60 <heapify2>:
+void heapify2(int curr){
+80103d60:	55                   	push   %ebp
+80103d61:	89 e5                	mov    %esp,%ebp
+80103d63:	57                   	push   %edi
+80103d64:	56                   	push   %esi
+80103d65:	53                   	push   %ebx
+80103d66:	83 ec 38             	sub    $0x38,%esp
+80103d69:	8b 45 08             	mov    0x8(%ebp),%eax
+	acquire(&priorityQ2.lock);
+80103d6c:	68 c4 2d 11 80       	push   $0x80112dc4
+void heapify2(int curr){
+80103d71:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	acquire(&priorityQ2.lock);
+80103d74:	e8 97 1a 00 00       	call   80105810 <acquire>
+	while(curr*2<=priorityQ2.sze){
+80103d79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103d7c:	8b 35 c0 2d 11 80    	mov    0x80112dc0,%esi
+80103d82:	83 c4 10             	add    $0x10,%esp
+80103d85:	8d 3c 00             	lea    (%eax,%eax,1),%edi
+80103d88:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80103d8b:	39 fe                	cmp    %edi,%esi
+80103d8d:	7d 4c                	jge    80103ddb <heapify2+0x7b>
+80103d8f:	e9 a4 00 00 00       	jmp    80103e38 <heapify2+0xd8>
+80103d94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+			if((priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2]->burst_time)&&(priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2+1]->burst_time))
+80103d98:	8b 0c bd fc 2d 11 80 	mov    -0x7feed204(,%edi,4),%ecx
+80103d9f:	8d 47 01             	lea    0x1(%edi),%eax
+80103da2:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80103da5:	8b 89 84 00 00 00    	mov    0x84(%ecx),%ecx
+80103dab:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80103dae:	89 f1                	mov    %esi,%ecx
+80103db0:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80103db3:	39 ce                	cmp    %ecx,%esi
+80103db5:	7f 71                	jg     80103e28 <heapify2+0xc8>
+80103db7:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+80103dba:	7d 7c                	jge    80103e38 <heapify2+0xd8>
+					priorityQ2.proc[curr*2+1]=priorityQ2.proc[curr];
+80103dbc:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+80103dbf:	8b 55 cc             	mov    -0x34(%ebp),%edx
+80103dc2:	89 1c 85 f8 2d 11 80 	mov    %ebx,-0x7feed208(,%eax,4)
+					priorityQ2.proc[curr]=temp;
+80103dc9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
+	while(curr*2<=priorityQ2.sze){
+80103dcc:	8d 3c 00             	lea    (%eax,%eax,1),%edi
+					priorityQ2.proc[curr]=temp;
+80103dcf:	89 14 9d c8 2d 11 80 	mov    %edx,-0x7feed238(,%ebx,4)
+	while(curr*2<=priorityQ2.sze){
+80103dd6:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80103dd9:	7f 5d                	jg     80103e38 <heapify2+0xd8>
+			if((priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2]->burst_time)&&(priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2+1]->burst_time))
+80103ddb:	83 c0 0c             	add    $0xc,%eax
+80103dde:	8d 5f 0c             	lea    0xc(%edi),%ebx
+80103de1:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80103de4:	8b 14 9d c8 2d 11 80 	mov    -0x7feed238(,%ebx,4),%edx
+80103deb:	8b 04 85 c8 2d 11 80 	mov    -0x7feed238(,%eax,4),%eax
+80103df2:	8b b2 84 00 00 00    	mov    0x84(%edx),%esi
+80103df8:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80103dfb:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
+80103e01:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+80103e04:	89 45 e0             	mov    %eax,-0x20(%ebp)
+		if(curr*2+1<=priorityQ2.sze){
+80103e07:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80103e0a:	7c 8c                	jl     80103d98 <heapify2+0x38>
+			if((priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2]->burst_time))
+80103e0c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+80103e0f:	39 4d e0             	cmp    %ecx,-0x20(%ebp)
+80103e12:	7e 24                	jle    80103e38 <heapify2+0xd8>
+				priorityQ2.proc[curr*2]=priorityQ2.proc[curr];
+80103e14:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80103e17:	89 04 9d c8 2d 11 80 	mov    %eax,-0x7feed238(,%ebx,4)
+80103e1e:	89 f8                	mov    %edi,%eax
+80103e20:	eb a7                	jmp    80103dc9 <heapify2+0x69>
+80103e22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+				if((priorityQ2.proc[curr*2]->burst_time)<=(priorityQ2.proc[curr*2+1]->burst_time)){
+80103e28:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+80103e2b:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+80103e2e:	7d e4                	jge    80103e14 <heapify2+0xb4>
+80103e30:	eb 8a                	jmp    80103dbc <heapify2+0x5c>
+80103e32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+	release(&priorityQ2.lock);
+80103e38:	c7 45 08 c4 2d 11 80 	movl   $0x80112dc4,0x8(%ebp)
+}
+80103e3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103e42:	5b                   	pop    %ebx
+80103e43:	5e                   	pop    %esi
+80103e44:	5f                   	pop    %edi
+80103e45:	5d                   	pop    %ebp
+	release(&priorityQ2.lock);
+80103e46:	e9 65 19 00 00       	jmp    801057b0 <release>
+80103e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e4f:	90                   	nop
+
+80103e50 <extractMin>:
+struct proc * extractMin(){
+80103e50:	55                   	push   %ebp
+80103e51:	89 e5                	mov    %esp,%ebp
+80103e53:	53                   	push   %ebx
+80103e54:	83 ec 10             	sub    $0x10,%esp
+	acquire(&priorityQ.lock);
+80103e57:	68 04 2f 11 80       	push   $0x80112f04
+80103e5c:	e8 af 19 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze == 0){
+80103e61:	a1 00 2f 11 80       	mov    0x80112f00,%eax
+80103e66:	83 c4 10             	add    $0x10,%esp
+80103e69:	85 c0                	test   %eax,%eax
+80103e6b:	75 23                	jne    80103e90 <extractMin+0x40>
+		release(&priorityQ.lock);
+80103e6d:	83 ec 0c             	sub    $0xc,%esp
+		return 0;
+80103e70:	31 db                	xor    %ebx,%ebx
+		release(&priorityQ.lock);
+80103e72:	68 04 2f 11 80       	push   $0x80112f04
+80103e77:	e8 34 19 00 00       	call   801057b0 <release>
+}
+80103e7c:	89 d8                	mov    %ebx,%eax
+		release(&priorityQ.lock);
+80103e7e:	83 c4 10             	add    $0x10,%esp
+}
+80103e81:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103e84:	c9                   	leave  
+80103e85:	c3                   	ret    
+80103e86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e8d:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ.lock);
+80103e90:	83 ec 0c             	sub    $0xc,%esp
+80103e93:	68 04 2f 11 80       	push   $0x80112f04
+80103e98:	e8 13 19 00 00       	call   801057b0 <release>
+	acquire(&priorityQ.lock);
+80103e9d:	c7 04 24 04 2f 11 80 	movl   $0x80112f04,(%esp)
+80103ea4:	e8 67 19 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==1)
+80103ea9:	a1 00 2f 11 80       	mov    0x80112f00,%eax
+	struct proc* minimum=priorityQ.proc[1];
+80103eae:	8b 1d 3c 2f 11 80    	mov    0x80112f3c,%ebx
+	if(priorityQ.sze==1)
+80103eb4:	83 c4 10             	add    $0x10,%esp
+80103eb7:	83 f8 01             	cmp    $0x1,%eax
+80103eba:	74 3c                	je     80103ef8 <extractMin+0xa8>
+		release(&priorityQ.lock);
+80103ebc:	83 ec 0c             	sub    $0xc,%esp
+		priorityQ.proc[1] = priorityQ.proc[priorityQ.sze];
+80103ebf:	8b 14 85 38 2f 11 80 	mov    -0x7feed0c8(,%eax,4),%edx
+		priorityQ.sze--;
+80103ec6:	83 e8 01             	sub    $0x1,%eax
+		release(&priorityQ.lock);
+80103ec9:	68 04 2f 11 80       	push   $0x80112f04
+		priorityQ.sze--;
+80103ece:	a3 00 2f 11 80       	mov    %eax,0x80112f00
+		priorityQ.proc[1] = priorityQ.proc[priorityQ.sze];
+80103ed3:	89 15 3c 2f 11 80    	mov    %edx,0x80112f3c
+		release(&priorityQ.lock);
+80103ed9:	e8 d2 18 00 00       	call   801057b0 <release>
+		heapify(1);
+80103ede:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80103ee5:	e8 86 fd ff ff       	call   80103c70 <heapify>
+}
+80103eea:	89 d8                	mov    %ebx,%eax
+		heapify(1);
+80103eec:	83 c4 10             	add    $0x10,%esp
+}
+80103eef:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103ef2:	c9                   	leave  
+80103ef3:	c3                   	ret    
+80103ef4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+		priorityQ.sze=0;
+80103ef8:	c7 05 00 2f 11 80 00 	movl   $0x0,0x80112f00
+80103eff:	00 00 00 
+		release(&priorityQ.lock);
+80103f02:	83 ec 0c             	sub    $0xc,%esp
+80103f05:	68 04 2f 11 80       	push   $0x80112f04
+80103f0a:	e8 a1 18 00 00       	call   801057b0 <release>
+}
+80103f0f:	89 d8                	mov    %ebx,%eax
+80103f11:	83 c4 10             	add    $0x10,%esp
+80103f14:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103f17:	c9                   	leave  
+80103f18:	c3                   	ret    
+80103f19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103f20 <extractMin2>:
+struct proc * extractMin2(){
+80103f20:	55                   	push   %ebp
+80103f21:	89 e5                	mov    %esp,%ebp
+80103f23:	53                   	push   %ebx
+80103f24:	83 ec 10             	sub    $0x10,%esp
+	acquire(&priorityQ2.lock);
+80103f27:	68 c4 2d 11 80       	push   $0x80112dc4
+80103f2c:	e8 df 18 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze == 0){
+80103f31:	a1 c0 2d 11 80       	mov    0x80112dc0,%eax
+80103f36:	83 c4 10             	add    $0x10,%esp
+80103f39:	85 c0                	test   %eax,%eax
+80103f3b:	75 23                	jne    80103f60 <extractMin2+0x40>
+		release(&priorityQ2.lock);
+80103f3d:	83 ec 0c             	sub    $0xc,%esp
+		return 0;
+80103f40:	31 db                	xor    %ebx,%ebx
+		release(&priorityQ2.lock);
+80103f42:	68 c4 2d 11 80       	push   $0x80112dc4
+80103f47:	e8 64 18 00 00       	call   801057b0 <release>
+}
+80103f4c:	89 d8                	mov    %ebx,%eax
+		release(&priorityQ2.lock);
+80103f4e:	83 c4 10             	add    $0x10,%esp
+}
+80103f51:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103f54:	c9                   	leave  
+80103f55:	c3                   	ret    
+80103f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f5d:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ2.lock);
+80103f60:	83 ec 0c             	sub    $0xc,%esp
+80103f63:	68 c4 2d 11 80       	push   $0x80112dc4
+80103f68:	e8 43 18 00 00       	call   801057b0 <release>
+	acquire(&priorityQ2.lock);
+80103f6d:	c7 04 24 c4 2d 11 80 	movl   $0x80112dc4,(%esp)
+80103f74:	e8 97 18 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze==1)
+80103f79:	a1 c0 2d 11 80       	mov    0x80112dc0,%eax
+	struct proc* minimum=priorityQ2.proc[1];
+80103f7e:	8b 1d fc 2d 11 80    	mov    0x80112dfc,%ebx
+	if(priorityQ2.sze==1)
+80103f84:	83 c4 10             	add    $0x10,%esp
+80103f87:	83 f8 01             	cmp    $0x1,%eax
+80103f8a:	74 3c                	je     80103fc8 <extractMin2+0xa8>
+		release(&priorityQ2.lock);
+80103f8c:	83 ec 0c             	sub    $0xc,%esp
+		priorityQ2.proc[1] = priorityQ2.proc[priorityQ2.sze];
+80103f8f:	8b 14 85 f8 2d 11 80 	mov    -0x7feed208(,%eax,4),%edx
+		priorityQ2.sze--;
+80103f96:	83 e8 01             	sub    $0x1,%eax
+		release(&priorityQ2.lock);
+80103f99:	68 c4 2d 11 80       	push   $0x80112dc4
+		priorityQ2.sze--;
+80103f9e:	a3 c0 2d 11 80       	mov    %eax,0x80112dc0
+		priorityQ2.proc[1] = priorityQ2.proc[priorityQ2.sze];
+80103fa3:	89 15 fc 2d 11 80    	mov    %edx,0x80112dfc
+		release(&priorityQ2.lock);
+80103fa9:	e8 02 18 00 00       	call   801057b0 <release>
+		heapify2(1);
+80103fae:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80103fb5:	e8 a6 fd ff ff       	call   80103d60 <heapify2>
+}
+80103fba:	89 d8                	mov    %ebx,%eax
+		heapify2(1);
+80103fbc:	83 c4 10             	add    $0x10,%esp
+}
+80103fbf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103fc2:	c9                   	leave  
+80103fc3:	c3                   	ret    
+80103fc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+		priorityQ2.sze=0;
+80103fc8:	c7 05 c0 2d 11 80 00 	movl   $0x0,0x80112dc0
+80103fcf:	00 00 00 
+		release(&priorityQ2.lock);
+80103fd2:	83 ec 0c             	sub    $0xc,%esp
+80103fd5:	68 c4 2d 11 80       	push   $0x80112dc4
+80103fda:	e8 d1 17 00 00       	call   801057b0 <release>
+}
+80103fdf:	89 d8                	mov    %ebx,%eax
+80103fe1:	83 c4 10             	add    $0x10,%esp
+80103fe4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103fe7:	c9                   	leave  
+80103fe8:	c3                   	ret    
+80103fe9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103ff0 <changeKey>:
+void changeKey(int pid, int newBT){
+80103ff0:	55                   	push   %ebp
+80103ff1:	89 e5                	mov    %esp,%ebp
+80103ff3:	57                   	push   %edi
+80103ff4:	56                   	push   %esi
+80103ff5:	53                   	push   %ebx
+80103ff6:	83 ec 28             	sub    $0x28,%esp
+80103ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103ffc:	8b 7d 08             	mov    0x8(%ebp),%edi
+	acquire(&priorityQ.lock);
+80103fff:	68 04 2f 11 80       	push   $0x80112f04
+void changeKey(int pid, int newBT){
+80104004:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	acquire(&priorityQ.lock);
+80104007:	e8 04 18 00 00       	call   80105810 <acquire>
+	for(int i=1;i<=priorityQ.sze;i++){
+8010400c:	a1 00 2f 11 80       	mov    0x80112f00,%eax
+80104011:	83 c4 10             	add    $0x10,%esp
+80104014:	85 c0                	test   %eax,%eax
+80104016:	0f 8e a4 00 00 00    	jle    801040c0 <changeKey+0xd0>
+8010401c:	bb 01 00 00 00       	mov    $0x1,%ebx
+80104021:	eb 10                	jmp    80104033 <changeKey+0x43>
+80104023:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104027:	90                   	nop
+80104028:	83 c3 01             	add    $0x1,%ebx
+8010402b:	39 c3                	cmp    %eax,%ebx
+8010402d:	0f 8f 8d 00 00 00    	jg     801040c0 <changeKey+0xd0>
+		if(priorityQ.proc[i]->pid == pid){
+80104033:	8b 34 9d 38 2f 11 80 	mov    -0x7feed0c8(,%ebx,4),%esi
+8010403a:	39 7e 10             	cmp    %edi,0x10(%esi)
+8010403d:	75 e9                	jne    80104028 <changeKey+0x38>
+		priorityQ.sze--;
+8010403f:	8d 50 ff             	lea    -0x1(%eax),%edx
+	if(curr==priorityQ.sze){
+80104042:	39 c3                	cmp    %eax,%ebx
+80104044:	0f 84 8e 00 00 00    	je     801040d8 <changeKey+0xe8>
+		release(&priorityQ.lock);
+8010404a:	83 ec 0c             	sub    $0xc,%esp
+		priorityQ.proc[curr]=priorityQ.proc[priorityQ.sze];
+8010404d:	8b 04 85 38 2f 11 80 	mov    -0x7feed0c8(,%eax,4),%eax
+		priorityQ.sze--;
+80104054:	89 15 00 2f 11 80    	mov    %edx,0x80112f00
+		release(&priorityQ.lock);
+8010405a:	68 04 2f 11 80       	push   $0x80112f04
+		priorityQ.proc[curr]=priorityQ.proc[priorityQ.sze];
+8010405f:	89 04 9d 38 2f 11 80 	mov    %eax,-0x7feed0c8(,%ebx,4)
+		release(&priorityQ.lock);
+80104066:	e8 45 17 00 00       	call   801057b0 <release>
+		heapify(curr);
+8010406b:	89 1c 24             	mov    %ebx,(%esp)
+8010406e:	e8 fd fb ff ff       	call   80103c70 <heapify>
+80104073:	83 c4 10             	add    $0x10,%esp
+	p->burst_time=newBT;
+80104076:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+	acquire(&priorityQ.lock);
+80104079:	83 ec 0c             	sub    $0xc,%esp
+	p->burst_time=newBT;
+8010407c:	89 86 84 00 00 00    	mov    %eax,0x84(%esi)
+	acquire(&priorityQ.lock);
+80104082:	68 04 2f 11 80       	push   $0x80112f04
+80104087:	e8 84 17 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+8010408c:	83 c4 10             	add    $0x10,%esp
+8010408f:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+80104096:	74 28                	je     801040c0 <changeKey+0xd0>
+		release(&priorityQ.lock);
+80104098:	83 ec 0c             	sub    $0xc,%esp
+8010409b:	68 04 2f 11 80       	push   $0x80112f04
+801040a0:	e8 0b 17 00 00       	call   801057b0 <release>
+		return 0;
+801040a5:	83 c4 10             	add    $0x10,%esp
+}
+801040a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801040ab:	89 f0                	mov    %esi,%eax
+801040ad:	5b                   	pop    %ebx
+801040ae:	5e                   	pop    %esi
+801040af:	5f                   	pop    %edi
+801040b0:	5d                   	pop    %ebp
+801040b1:	e9 4a f8 ff ff       	jmp    80103900 <insertIntoPQ.part.0>
+801040b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801040bd:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ.lock);
+801040c0:	c7 45 08 04 2f 11 80 	movl   $0x80112f04,0x8(%ebp)
+}
+801040c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801040ca:	5b                   	pop    %ebx
+801040cb:	5e                   	pop    %esi
+801040cc:	5f                   	pop    %edi
+801040cd:	5d                   	pop    %ebp
+		release(&priorityQ.lock);
+801040ce:	e9 dd 16 00 00       	jmp    801057b0 <release>
+801040d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801040d7:	90                   	nop
+		release(&priorityQ.lock);
+801040d8:	83 ec 0c             	sub    $0xc,%esp
+		priorityQ.sze--;
+801040db:	89 15 00 2f 11 80    	mov    %edx,0x80112f00
+		release(&priorityQ.lock);
+801040e1:	68 04 2f 11 80       	push   $0x80112f04
+801040e6:	e8 c5 16 00 00       	call   801057b0 <release>
+801040eb:	83 c4 10             	add    $0x10,%esp
+801040ee:	eb 86                	jmp    80104076 <changeKey+0x86>
+
+801040f0 <changeKey2>:
+void changeKey2(int pid, int newBT){
+801040f0:	55                   	push   %ebp
+801040f1:	89 e5                	mov    %esp,%ebp
+801040f3:	57                   	push   %edi
+801040f4:	56                   	push   %esi
+801040f5:	53                   	push   %ebx
+801040f6:	83 ec 28             	sub    $0x28,%esp
+801040f9:	8b 45 0c             	mov    0xc(%ebp),%eax
+801040fc:	8b 7d 08             	mov    0x8(%ebp),%edi
+	acquire(&priorityQ2.lock);
+801040ff:	68 c4 2d 11 80       	push   $0x80112dc4
+void changeKey2(int pid, int newBT){
+80104104:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+	acquire(&priorityQ2.lock);
+80104107:	e8 04 17 00 00       	call   80105810 <acquire>
+	for(int i=1;i<=priorityQ2.sze;i++){
+8010410c:	a1 c0 2d 11 80       	mov    0x80112dc0,%eax
+80104111:	83 c4 10             	add    $0x10,%esp
+80104114:	85 c0                	test   %eax,%eax
+80104116:	0f 8e a4 00 00 00    	jle    801041c0 <changeKey2+0xd0>
+8010411c:	bb 01 00 00 00       	mov    $0x1,%ebx
+80104121:	eb 10                	jmp    80104133 <changeKey2+0x43>
+80104123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104127:	90                   	nop
+80104128:	83 c3 01             	add    $0x1,%ebx
+8010412b:	39 c3                	cmp    %eax,%ebx
+8010412d:	0f 8f 8d 00 00 00    	jg     801041c0 <changeKey2+0xd0>
+		if(priorityQ2.proc[i]->pid == pid){
+80104133:	8b 34 9d f8 2d 11 80 	mov    -0x7feed208(,%ebx,4),%esi
+8010413a:	39 7e 10             	cmp    %edi,0x10(%esi)
+8010413d:	75 e9                	jne    80104128 <changeKey2+0x38>
+		priorityQ2.sze--;
+8010413f:	8d 50 ff             	lea    -0x1(%eax),%edx
+	if(curr==priorityQ2.sze){
+80104142:	39 c3                	cmp    %eax,%ebx
+80104144:	0f 84 8e 00 00 00    	je     801041d8 <changeKey2+0xe8>
+		release(&priorityQ2.lock);
+8010414a:	83 ec 0c             	sub    $0xc,%esp
+		priorityQ2.proc[curr]=priorityQ2.proc[priorityQ2.sze];
+8010414d:	8b 04 85 f8 2d 11 80 	mov    -0x7feed208(,%eax,4),%eax
+		priorityQ2.sze--;
+80104154:	89 15 c0 2d 11 80    	mov    %edx,0x80112dc0
+		release(&priorityQ2.lock);
+8010415a:	68 c4 2d 11 80       	push   $0x80112dc4
+		priorityQ2.proc[curr]=priorityQ2.proc[priorityQ2.sze];
+8010415f:	89 04 9d f8 2d 11 80 	mov    %eax,-0x7feed208(,%ebx,4)
+		release(&priorityQ2.lock);
+80104166:	e8 45 16 00 00       	call   801057b0 <release>
+		heapify2(curr);
+8010416b:	89 1c 24             	mov    %ebx,(%esp)
+8010416e:	e8 ed fb ff ff       	call   80103d60 <heapify2>
+80104173:	83 c4 10             	add    $0x10,%esp
+	p->burst_time=newBT;
+80104176:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+	acquire(&priorityQ2.lock);
+80104179:	83 ec 0c             	sub    $0xc,%esp
+	p->burst_time=newBT;
+8010417c:	89 86 84 00 00 00    	mov    %eax,0x84(%esi)
+	acquire(&priorityQ2.lock);
+80104182:	68 c4 2d 11 80       	push   $0x80112dc4
+80104187:	e8 84 16 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze==NPROC){
+8010418c:	83 c4 10             	add    $0x10,%esp
+8010418f:	83 3d c0 2d 11 80 40 	cmpl   $0x40,0x80112dc0
+80104196:	74 28                	je     801041c0 <changeKey2+0xd0>
+		release(&priorityQ2.lock);
+80104198:	83 ec 0c             	sub    $0xc,%esp
+8010419b:	68 c4 2d 11 80       	push   $0x80112dc4
+801041a0:	e8 0b 16 00 00       	call   801057b0 <release>
+		return 0;
+801041a5:	83 c4 10             	add    $0x10,%esp
+}
+801041a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801041ab:	89 f0                	mov    %esi,%eax
+801041ad:	5b                   	pop    %ebx
+801041ae:	5e                   	pop    %esi
+801041af:	5f                   	pop    %edi
+801041b0:	5d                   	pop    %ebp
+801041b1:	e9 ca f7 ff ff       	jmp    80103980 <insertIntoPQ2.part.0>
+801041b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041bd:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ2.lock);
+801041c0:	c7 45 08 c4 2d 11 80 	movl   $0x80112dc4,0x8(%ebp)
+}
+801041c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801041ca:	5b                   	pop    %ebx
+801041cb:	5e                   	pop    %esi
+801041cc:	5f                   	pop    %edi
+801041cd:	5d                   	pop    %ebp
+		release(&priorityQ2.lock);
+801041ce:	e9 dd 15 00 00       	jmp    801057b0 <release>
+801041d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801041d7:	90                   	nop
+		release(&priorityQ2.lock);
+801041d8:	83 ec 0c             	sub    $0xc,%esp
+		priorityQ2.sze--;
+801041db:	89 15 c0 2d 11 80    	mov    %edx,0x80112dc0
+		release(&priorityQ2.lock);
+801041e1:	68 c4 2d 11 80       	push   $0x80112dc4
+801041e6:	e8 c5 15 00 00       	call   801057b0 <release>
+801041eb:	83 c4 10             	add    $0x10,%esp
+801041ee:	eb 86                	jmp    80104176 <changeKey2+0x86>
+
+801041f0 <pinit>:
+{
+801041f0:	55                   	push   %ebp
+801041f1:	89 e5                	mov    %esp,%ebp
+801041f3:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-80103916:	68 40 7b 10 80       	push   $0x80107b40
-8010391b:	68 20 1d 11 80       	push   $0x80111d20
-80103920:	e8 0b 0e 00 00       	call   80104730 <initlock>
-}
-80103925:	83 c4 10             	add    $0x10,%esp
-80103928:	c9                   	leave  
-80103929:	c3                   	ret    
-8010392a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103930 <mycpu>:
-{
-80103930:	55                   	push   %ebp
-80103931:	89 e5                	mov    %esp,%ebp
-80103933:	56                   	push   %esi
-80103934:	53                   	push   %ebx
+801041f6:	68 60 8b 10 80       	push   $0x80108b60
+801041fb:	68 40 30 11 80       	push   $0x80113040
+80104200:	e8 3b 14 00 00       	call   80105640 <initlock>
+  initlock(&priorityQ.lock, "priorityQ");
+80104205:	58                   	pop    %eax
+80104206:	5a                   	pop    %edx
+80104207:	68 67 8b 10 80       	push   $0x80108b67
+8010420c:	68 04 2f 11 80       	push   $0x80112f04
+80104211:	e8 2a 14 00 00       	call   80105640 <initlock>
+  initlock(&priorityQ2.lock, "priorityQ2");
+80104216:	59                   	pop    %ecx
+80104217:	58                   	pop    %eax
+80104218:	68 71 8b 10 80       	push   $0x80108b71
+8010421d:	68 c4 2d 11 80       	push   $0x80112dc4
+80104222:	e8 19 14 00 00       	call   80105640 <initlock>
+}
+80104227:	83 c4 10             	add    $0x10,%esp
+8010422a:	c9                   	leave  
+8010422b:	c3                   	ret    
+8010422c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104230 <mycpu>:
+{
+80104230:	55                   	push   %ebp
+80104231:	89 e5                	mov    %esp,%ebp
+80104233:	56                   	push   %esi
+80104234:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103935:	9c                   	pushf  
-80103936:	58                   	pop    %eax
+80104235:	9c                   	pushf  
+80104236:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103937:	f6 c4 02             	test   $0x2,%ah
-8010393a:	75 46                	jne    80103982 <mycpu+0x52>
+80104237:	f6 c4 02             	test   $0x2,%ah
+8010423a:	75 46                	jne    80104282 <mycpu+0x52>
   apicid = lapicid();
-8010393c:	e8 af ef ff ff       	call   801028f0 <lapicid>
+8010423c:	e8 af e6 ff ff       	call   801028f0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-80103941:	8b 35 84 17 11 80    	mov    0x80111784,%esi
-80103947:	85 f6                	test   %esi,%esi
-80103949:	7e 2a                	jle    80103975 <mycpu+0x45>
-8010394b:	31 d2                	xor    %edx,%edx
-8010394d:	eb 08                	jmp    80103957 <mycpu+0x27>
-8010394f:	90                   	nop
-80103950:	83 c2 01             	add    $0x1,%edx
-80103953:	39 f2                	cmp    %esi,%edx
-80103955:	74 1e                	je     80103975 <mycpu+0x45>
+80104241:	8b 35 84 27 11 80    	mov    0x80112784,%esi
+80104247:	85 f6                	test   %esi,%esi
+80104249:	7e 2a                	jle    80104275 <mycpu+0x45>
+8010424b:	31 d2                	xor    %edx,%edx
+8010424d:	eb 08                	jmp    80104257 <mycpu+0x27>
+8010424f:	90                   	nop
+80104250:	83 c2 01             	add    $0x1,%edx
+80104253:	39 f2                	cmp    %esi,%edx
+80104255:	74 1e                	je     80104275 <mycpu+0x45>
     if (cpus[i].apicid == apicid)
-80103957:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-8010395d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
-80103964:	39 c3                	cmp    %eax,%ebx
-80103966:	75 e8                	jne    80103950 <mycpu+0x20>
+80104257:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+8010425d:	0f b6 99 a0 27 11 80 	movzbl -0x7feed860(%ecx),%ebx
+80104264:	39 c3                	cmp    %eax,%ebx
+80104266:	75 e8                	jne    80104250 <mycpu+0x20>
 }
-80103968:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104268:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-8010396b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
+8010426b:	8d 81 a0 27 11 80    	lea    -0x7feed860(%ecx),%eax
 }
-80103971:	5b                   	pop    %ebx
-80103972:	5e                   	pop    %esi
-80103973:	5d                   	pop    %ebp
-80103974:	c3                   	ret    
+80104271:	5b                   	pop    %ebx
+80104272:	5e                   	pop    %esi
+80104273:	5d                   	pop    %ebp
+80104274:	c3                   	ret    
   panic("unknown apicid\n");
-80103975:	83 ec 0c             	sub    $0xc,%esp
-80103978:	68 47 7b 10 80       	push   $0x80107b47
-8010397d:	e8 fe c9 ff ff       	call   80100380 <panic>
+80104275:	83 ec 0c             	sub    $0xc,%esp
+80104278:	68 7c 8b 10 80       	push   $0x80108b7c
+8010427d:	e8 fe c0 ff ff       	call   80100380 <panic>
     panic("mycpu called with interrupts enabled\n");
-80103982:	83 ec 0c             	sub    $0xc,%esp
-80103985:	68 34 7c 10 80       	push   $0x80107c34
-8010398a:	e8 f1 c9 ff ff       	call   80100380 <panic>
-8010398f:	90                   	nop
+80104282:	83 ec 0c             	sub    $0xc,%esp
+80104285:	68 58 8c 10 80       	push   $0x80108c58
+8010428a:	e8 f1 c0 ff ff       	call   80100380 <panic>
+8010428f:	90                   	nop
 
-80103990 <cpuid>:
+80104290 <cpuid>:
 cpuid() {
-80103990:	55                   	push   %ebp
-80103991:	89 e5                	mov    %esp,%ebp
-80103993:	83 ec 08             	sub    $0x8,%esp
+80104290:	55                   	push   %ebp
+80104291:	89 e5                	mov    %esp,%ebp
+80104293:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-80103996:	e8 95 ff ff ff       	call   80103930 <mycpu>
+80104296:	e8 95 ff ff ff       	call   80104230 <mycpu>
 }
-8010399b:	c9                   	leave  
+8010429b:	c9                   	leave  
   return mycpu()-cpus;
-8010399c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
-801039a1:	c1 f8 04             	sar    $0x4,%eax
-801039a4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
-}
-801039aa:	c3                   	ret    
-801039ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801039af:	90                   	nop
+8010429c:	2d a0 27 11 80       	sub    $0x801127a0,%eax
+801042a1:	c1 f8 04             	sar    $0x4,%eax
+801042a4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+801042aa:	c3                   	ret    
+801042ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801042af:	90                   	nop
 
-801039b0 <myproc>:
+801042b0 <myproc>:
 myproc(void) {
-801039b0:	55                   	push   %ebp
-801039b1:	89 e5                	mov    %esp,%ebp
-801039b3:	53                   	push   %ebx
-801039b4:	83 ec 04             	sub    $0x4,%esp
+801042b0:	55                   	push   %ebp
+801042b1:	89 e5                	mov    %esp,%ebp
+801042b3:	53                   	push   %ebx
+801042b4:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-801039b7:	e8 f4 0d 00 00       	call   801047b0 <pushcli>
+801042b7:	e8 04 14 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-801039bc:	e8 6f ff ff ff       	call   80103930 <mycpu>
+801042bc:	e8 6f ff ff ff       	call   80104230 <mycpu>
   p = c->proc;
-801039c1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801042c1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-801039c7:	e8 34 0e 00 00       	call   80104800 <popcli>
+801042c7:	e8 44 14 00 00       	call   80105710 <popcli>
 }
-801039cc:	89 d8                	mov    %ebx,%eax
-801039ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801039d1:	c9                   	leave  
-801039d2:	c3                   	ret    
-801039d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801039da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801039e0 <userinit>:
-{
-801039e0:	55                   	push   %ebp
-801039e1:	89 e5                	mov    %esp,%ebp
-801039e3:	53                   	push   %ebx
-801039e4:	83 ec 04             	sub    $0x4,%esp
+801042cc:	89 d8                	mov    %ebx,%eax
+801042ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042d1:	c9                   	leave  
+801042d2:	c3                   	ret    
+801042d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801042e0 <userinit>:
+{
+801042e0:	55                   	push   %ebp
+801042e1:	89 e5                	mov    %esp,%ebp
+801042e3:	53                   	push   %ebx
+801042e4:	83 ec 10             	sub    $0x10,%esp
+  acquire(&priorityQ.lock);
+801042e7:	68 04 2f 11 80       	push   $0x80112f04
+801042ec:	e8 1f 15 00 00       	call   80105810 <acquire>
+  release(&priorityQ.lock);
+801042f1:	c7 04 24 04 2f 11 80 	movl   $0x80112f04,(%esp)
+  priorityQ2.sze = 0;
+801042f8:	c7 05 c0 2d 11 80 00 	movl   $0x0,0x80112dc0
+801042ff:	00 00 00 
+  release(&priorityQ.lock);
+80104302:	e8 a9 14 00 00       	call   801057b0 <release>
+  acquire(&priorityQ2.lock);
+80104307:	c7 04 24 c4 2d 11 80 	movl   $0x80112dc4,(%esp)
+8010430e:	e8 fd 14 00 00       	call   80105810 <acquire>
+  release(&priorityQ2.lock);
+80104313:	c7 04 24 c4 2d 11 80 	movl   $0x80112dc4,(%esp)
+  priorityQ2.sze = 0;
+8010431a:	c7 05 c0 2d 11 80 00 	movl   $0x0,0x80112dc0
+80104321:	00 00 00 
+  release(&priorityQ2.lock);
+80104324:	e8 87 14 00 00       	call   801057b0 <release>
   p = allocproc();
-801039e7:	e8 04 fe ff ff       	call   801037f0 <allocproc>
-801039ec:	89 c3                	mov    %eax,%ebx
+80104329:	e8 82 f4 ff ff       	call   801037b0 <allocproc>
+8010432e:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039ee:	a3 54 3d 11 80       	mov    %eax,0x80113d54
+80104330:	a3 74 53 11 80       	mov    %eax,0x80115374
   if((p->pgdir = setupkvm()) == 0)
-801039f3:	e8 b8 38 00 00       	call   801072b0 <setupkvm>
-801039f8:	89 43 04             	mov    %eax,0x4(%ebx)
-801039fb:	85 c0                	test   %eax,%eax
-801039fd:	0f 84 bd 00 00 00    	je     80103ac0 <userinit+0xe0>
+80104335:	e8 86 3f 00 00       	call   801082c0 <setupkvm>
+8010433a:	83 c4 10             	add    $0x10,%esp
+8010433d:	89 43 04             	mov    %eax,0x4(%ebx)
+80104340:	85 c0                	test   %eax,%eax
+80104342:	0f 84 1a 01 00 00    	je     80104462 <userinit+0x182>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-80103a03:	83 ec 04             	sub    $0x4,%esp
-80103a06:	68 2c 00 00 00       	push   $0x2c
-80103a0b:	68 60 a4 10 80       	push   $0x8010a460
-80103a10:	50                   	push   %eax
-80103a11:	e8 4a 35 00 00       	call   80106f60 <inituvm>
+80104348:	83 ec 04             	sub    $0x4,%esp
+8010434b:	68 2c 00 00 00       	push   $0x2c
+80104350:	68 60 b4 10 80       	push   $0x8010b460
+80104355:	50                   	push   %eax
+80104356:	e8 15 3c 00 00       	call   80107f70 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-80103a16:	83 c4 0c             	add    $0xc,%esp
+8010435b:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-80103a19:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+8010435e:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-80103a1f:	6a 4c                	push   $0x4c
-80103a21:	6a 00                	push   $0x0
-80103a23:	ff 73 18             	push   0x18(%ebx)
-80103a26:	e8 95 0f 00 00       	call   801049c0 <memset>
+80104364:	6a 4c                	push   $0x4c
+80104366:	6a 00                	push   $0x0
+80104368:	ff 73 18             	push   0x18(%ebx)
+8010436b:	e8 60 15 00 00       	call   801058d0 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-80103a2b:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a2e:	ba 1b 00 00 00       	mov    $0x1b,%edx
+80104370:	8b 43 18             	mov    0x18(%ebx),%eax
+80104373:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a33:	83 c4 0c             	add    $0xc,%esp
+80104378:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80103a36:	b9 23 00 00 00       	mov    $0x23,%ecx
+8010437b:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-80103a3b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80104380:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80103a3f:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a42:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80104384:	8b 43 18             	mov    0x18(%ebx),%eax
+80104387:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-80103a46:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a49:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a4d:	66 89 50 28          	mov    %dx,0x28(%eax)
+8010438b:	8b 43 18             	mov    0x18(%ebx),%eax
+8010438e:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80104392:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a51:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a54:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a58:	66 89 50 48          	mov    %dx,0x48(%eax)
+80104396:	8b 43 18             	mov    0x18(%ebx),%eax
+80104399:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+8010439d:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a5c:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a5f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+801043a1:	8b 43 18             	mov    0x18(%ebx),%eax
+801043a4:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a66:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a69:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+801043ab:	8b 43 18             	mov    0x18(%ebx),%eax
+801043ae:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a70:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a73:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+801043b5:	8b 43 18             	mov    0x18(%ebx),%eax
+801043b8:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a7a:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a7d:	6a 10                	push   $0x10
-80103a7f:	68 70 7b 10 80       	push   $0x80107b70
-80103a84:	50                   	push   %eax
-80103a85:	e8 f6 10 00 00       	call   80104b80 <safestrcpy>
+801043bf:	8d 43 6c             	lea    0x6c(%ebx),%eax
+801043c2:	6a 10                	push   $0x10
+801043c4:	68 a5 8b 10 80       	push   $0x80108ba5
+801043c9:	50                   	push   %eax
+801043ca:	e8 c1 16 00 00       	call   80105a90 <safestrcpy>
   p->cwd = namei("/");
-80103a8a:	c7 04 24 79 7b 10 80 	movl   $0x80107b79,(%esp)
-80103a91:	e8 0a e6 ff ff       	call   801020a0 <namei>
-80103a96:	89 43 68             	mov    %eax,0x68(%ebx)
+801043cf:	c7 04 24 ae 8b 10 80 	movl   $0x80108bae,(%esp)
+801043d6:	e8 c5 dc ff ff       	call   801020a0 <namei>
+801043db:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a99:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103aa0:	e8 5b 0e 00 00       	call   80104900 <acquire>
+801043de:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+801043e5:	e8 26 14 00 00       	call   80105810 <acquire>
+  short check = (p->state!=RUNNABLE);
+801043ea:	8b 43 0c             	mov    0xc(%ebx),%eax
+  if(check)
+801043ed:	83 c4 10             	add    $0x10,%esp
   p->state = RUNNABLE;
-80103aa5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+801043f0:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  if(check)
+801043f7:	83 f8 03             	cmp    $0x3,%eax
+801043fa:	75 1c                	jne    80104418 <userinit+0x138>
   release(&ptable.lock);
-80103aac:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103ab3:	e8 e8 0d 00 00       	call   801048a0 <release>
-}
-80103ab8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103abb:	83 c4 10             	add    $0x10,%esp
-80103abe:	c9                   	leave  
-80103abf:	c3                   	ret    
+801043fc:	83 ec 0c             	sub    $0xc,%esp
+801043ff:	68 40 30 11 80       	push   $0x80113040
+80104404:	e8 a7 13 00 00       	call   801057b0 <release>
+}
+80104409:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010440c:	83 c4 10             	add    $0x10,%esp
+8010440f:	c9                   	leave  
+80104410:	c3                   	ret    
+80104411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+	acquire(&priorityQ.lock);
+80104418:	83 ec 0c             	sub    $0xc,%esp
+8010441b:	68 04 2f 11 80       	push   $0x80112f04
+80104420:	e8 eb 13 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+80104425:	83 c4 10             	add    $0x10,%esp
+80104428:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+8010442f:	74 1f                	je     80104450 <userinit+0x170>
+		release(&priorityQ.lock);
+80104431:	83 ec 0c             	sub    $0xc,%esp
+80104434:	68 04 2f 11 80       	push   $0x80112f04
+80104439:	e8 72 13 00 00       	call   801057b0 <release>
+		return 0;
+8010443e:	89 d8                	mov    %ebx,%eax
+80104440:	e8 bb f4 ff ff       	call   80103900 <insertIntoPQ.part.0>
+80104445:	83 c4 10             	add    $0x10,%esp
+80104448:	eb b2                	jmp    801043fc <userinit+0x11c>
+8010444a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+		release(&priorityQ.lock);
+80104450:	83 ec 0c             	sub    $0xc,%esp
+80104453:	68 04 2f 11 80       	push   $0x80112f04
+80104458:	e8 53 13 00 00       	call   801057b0 <release>
+8010445d:	83 c4 10             	add    $0x10,%esp
+80104460:	eb 9a                	jmp    801043fc <userinit+0x11c>
     panic("userinit: out of memory?");
-80103ac0:	83 ec 0c             	sub    $0xc,%esp
-80103ac3:	68 57 7b 10 80       	push   $0x80107b57
-80103ac8:	e8 b3 c8 ff ff       	call   80100380 <panic>
-80103acd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103ad0 <growproc>:
-{
-80103ad0:	55                   	push   %ebp
-80103ad1:	89 e5                	mov    %esp,%ebp
-80103ad3:	56                   	push   %esi
-80103ad4:	53                   	push   %ebx
-80103ad5:	8b 75 08             	mov    0x8(%ebp),%esi
+80104462:	83 ec 0c             	sub    $0xc,%esp
+80104465:	68 8c 8b 10 80       	push   $0x80108b8c
+8010446a:	e8 11 bf ff ff       	call   80100380 <panic>
+8010446f:	90                   	nop
+
+80104470 <growproc>:
+{
+80104470:	55                   	push   %ebp
+80104471:	89 e5                	mov    %esp,%ebp
+80104473:	56                   	push   %esi
+80104474:	53                   	push   %ebx
+80104475:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103ad8:	e8 d3 0c 00 00       	call   801047b0 <pushcli>
+80104478:	e8 43 12 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80103add:	e8 4e fe ff ff       	call   80103930 <mycpu>
+8010447d:	e8 ae fd ff ff       	call   80104230 <mycpu>
   p = c->proc;
-80103ae2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104482:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ae8:	e8 13 0d 00 00       	call   80104800 <popcli>
+80104488:	e8 83 12 00 00       	call   80105710 <popcli>
   sz = curproc->sz;
-80103aed:	8b 03                	mov    (%ebx),%eax
+8010448d:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103aef:	85 f6                	test   %esi,%esi
-80103af1:	7f 1d                	jg     80103b10 <growproc+0x40>
+8010448f:	85 f6                	test   %esi,%esi
+80104491:	7f 1d                	jg     801044b0 <growproc+0x40>
   } else if(n < 0){
-80103af3:	75 3b                	jne    80103b30 <growproc+0x60>
+80104493:	75 3b                	jne    801044d0 <growproc+0x60>
   switchuvm(curproc);
-80103af5:	83 ec 0c             	sub    $0xc,%esp
+80104495:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103af8:	89 03                	mov    %eax,(%ebx)
+80104498:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103afa:	53                   	push   %ebx
-80103afb:	e8 50 33 00 00       	call   80106e50 <switchuvm>
+8010449a:	53                   	push   %ebx
+8010449b:	e8 c0 39 00 00       	call   80107e60 <switchuvm>
   return 0;
-80103b00:	83 c4 10             	add    $0x10,%esp
-80103b03:	31 c0                	xor    %eax,%eax
+801044a0:	83 c4 10             	add    $0x10,%esp
+801044a3:	31 c0                	xor    %eax,%eax
 }
-80103b05:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103b08:	5b                   	pop    %ebx
-80103b09:	5e                   	pop    %esi
-80103b0a:	5d                   	pop    %ebp
-80103b0b:	c3                   	ret    
-80103b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801044a5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044a8:	5b                   	pop    %ebx
+801044a9:	5e                   	pop    %esi
+801044aa:	5d                   	pop    %ebp
+801044ab:	c3                   	ret    
+801044ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103b10:	83 ec 04             	sub    $0x4,%esp
-80103b13:	01 c6                	add    %eax,%esi
-80103b15:	56                   	push   %esi
-80103b16:	50                   	push   %eax
-80103b17:	ff 73 04             	push   0x4(%ebx)
-80103b1a:	e8 b1 35 00 00       	call   801070d0 <allocuvm>
-80103b1f:	83 c4 10             	add    $0x10,%esp
-80103b22:	85 c0                	test   %eax,%eax
-80103b24:	75 cf                	jne    80103af5 <growproc+0x25>
+801044b0:	83 ec 04             	sub    $0x4,%esp
+801044b3:	01 c6                	add    %eax,%esi
+801044b5:	56                   	push   %esi
+801044b6:	50                   	push   %eax
+801044b7:	ff 73 04             	push   0x4(%ebx)
+801044ba:	e8 21 3c 00 00       	call   801080e0 <allocuvm>
+801044bf:	83 c4 10             	add    $0x10,%esp
+801044c2:	85 c0                	test   %eax,%eax
+801044c4:	75 cf                	jne    80104495 <growproc+0x25>
       return -1;
-80103b26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103b2b:	eb d8                	jmp    80103b05 <growproc+0x35>
-80103b2d:	8d 76 00             	lea    0x0(%esi),%esi
+801044c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801044cb:	eb d8                	jmp    801044a5 <growproc+0x35>
+801044cd:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103b30:	83 ec 04             	sub    $0x4,%esp
-80103b33:	01 c6                	add    %eax,%esi
-80103b35:	56                   	push   %esi
-80103b36:	50                   	push   %eax
-80103b37:	ff 73 04             	push   0x4(%ebx)
-80103b3a:	e8 c1 36 00 00       	call   80107200 <deallocuvm>
-80103b3f:	83 c4 10             	add    $0x10,%esp
-80103b42:	85 c0                	test   %eax,%eax
-80103b44:	75 af                	jne    80103af5 <growproc+0x25>
-80103b46:	eb de                	jmp    80103b26 <growproc+0x56>
-80103b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b4f:	90                   	nop
-
-80103b50 <fork>:
-{
-80103b50:	55                   	push   %ebp
-80103b51:	89 e5                	mov    %esp,%ebp
-80103b53:	57                   	push   %edi
-80103b54:	56                   	push   %esi
-80103b55:	53                   	push   %ebx
-80103b56:	83 ec 1c             	sub    $0x1c,%esp
+801044d0:	83 ec 04             	sub    $0x4,%esp
+801044d3:	01 c6                	add    %eax,%esi
+801044d5:	56                   	push   %esi
+801044d6:	50                   	push   %eax
+801044d7:	ff 73 04             	push   0x4(%ebx)
+801044da:	e8 31 3d 00 00       	call   80108210 <deallocuvm>
+801044df:	83 c4 10             	add    $0x10,%esp
+801044e2:	85 c0                	test   %eax,%eax
+801044e4:	75 af                	jne    80104495 <growproc+0x25>
+801044e6:	eb de                	jmp    801044c6 <growproc+0x56>
+801044e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044ef:	90                   	nop
+
+801044f0 <fork>:
+{
+801044f0:	55                   	push   %ebp
+801044f1:	89 e5                	mov    %esp,%ebp
+801044f3:	57                   	push   %edi
+801044f4:	56                   	push   %esi
+801044f5:	53                   	push   %ebx
+801044f6:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b59:	e8 52 0c 00 00       	call   801047b0 <pushcli>
+801044f9:	e8 c2 11 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80103b5e:	e8 cd fd ff ff       	call   80103930 <mycpu>
+801044fe:	e8 2d fd ff ff       	call   80104230 <mycpu>
   p = c->proc;
-80103b63:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104503:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b69:	e8 92 0c 00 00       	call   80104800 <popcli>
+80104509:	e8 02 12 00 00       	call   80105710 <popcli>
   if((np = allocproc()) == 0){
-80103b6e:	e8 7d fc ff ff       	call   801037f0 <allocproc>
-80103b73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b76:	85 c0                	test   %eax,%eax
-80103b78:	0f 84 b7 00 00 00    	je     80103c35 <fork+0xe5>
+8010450e:	e8 9d f2 ff ff       	call   801037b0 <allocproc>
+80104513:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80104516:	85 c0                	test   %eax,%eax
+80104518:	0f 84 0f 01 00 00    	je     8010462d <fork+0x13d>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b7e:	83 ec 08             	sub    $0x8,%esp
-80103b81:	ff 33                	push   (%ebx)
-80103b83:	89 c7                	mov    %eax,%edi
-80103b85:	ff 73 04             	push   0x4(%ebx)
-80103b88:	e8 13 38 00 00       	call   801073a0 <copyuvm>
-80103b8d:	83 c4 10             	add    $0x10,%esp
-80103b90:	89 47 04             	mov    %eax,0x4(%edi)
-80103b93:	85 c0                	test   %eax,%eax
-80103b95:	0f 84 a1 00 00 00    	je     80103c3c <fork+0xec>
+8010451e:	83 ec 08             	sub    $0x8,%esp
+80104521:	ff 33                	push   (%ebx)
+80104523:	89 c7                	mov    %eax,%edi
+80104525:	ff 73 04             	push   0x4(%ebx)
+80104528:	e8 83 3e 00 00       	call   801083b0 <copyuvm>
+8010452d:	83 c4 10             	add    $0x10,%esp
+80104530:	89 47 04             	mov    %eax,0x4(%edi)
+80104533:	85 c0                	test   %eax,%eax
+80104535:	0f 84 f9 00 00 00    	je     80104634 <fork+0x144>
   np->sz = curproc->sz;
-80103b9b:	8b 03                	mov    (%ebx),%eax
-80103b9d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103ba0:	89 01                	mov    %eax,(%ecx)
+8010453b:	8b 03                	mov    (%ebx),%eax
+8010453d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80104540:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103ba2:	8b 79 18             	mov    0x18(%ecx),%edi
+80104542:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103ba5:	89 c8                	mov    %ecx,%eax
-80103ba7:	89 59 14             	mov    %ebx,0x14(%ecx)
+80104545:	89 c8                	mov    %ecx,%eax
+80104547:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103baa:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103baf:	8b 73 18             	mov    0x18(%ebx),%esi
-80103bb2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+8010454a:	b9 13 00 00 00       	mov    $0x13,%ecx
+8010454f:	8b 73 18             	mov    0x18(%ebx),%esi
+80104552:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103bb4:	31 f6                	xor    %esi,%esi
+80104554:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103bb6:	8b 40 18             	mov    0x18(%eax),%eax
-80103bb9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80104556:	8b 40 18             	mov    0x18(%eax),%eax
+80104559:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
     if(curproc->ofile[i])
-80103bc0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103bc4:	85 c0                	test   %eax,%eax
-80103bc6:	74 13                	je     80103bdb <fork+0x8b>
+80104560:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80104564:	85 c0                	test   %eax,%eax
+80104566:	74 13                	je     8010457b <fork+0x8b>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103bc8:	83 ec 0c             	sub    $0xc,%esp
-80103bcb:	50                   	push   %eax
-80103bcc:	e8 cf d2 ff ff       	call   80100ea0 <filedup>
-80103bd1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103bd4:	83 c4 10             	add    $0x10,%esp
-80103bd7:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80104568:	83 ec 0c             	sub    $0xc,%esp
+8010456b:	50                   	push   %eax
+8010456c:	e8 2f c9 ff ff       	call   80100ea0 <filedup>
+80104571:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80104574:	83 c4 10             	add    $0x10,%esp
+80104577:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103bdb:	83 c6 01             	add    $0x1,%esi
-80103bde:	83 fe 10             	cmp    $0x10,%esi
-80103be1:	75 dd                	jne    80103bc0 <fork+0x70>
+8010457b:	83 c6 01             	add    $0x1,%esi
+8010457e:	83 fe 10             	cmp    $0x10,%esi
+80104581:	75 dd                	jne    80104560 <fork+0x70>
   np->cwd = idup(curproc->cwd);
-80103be3:	83 ec 0c             	sub    $0xc,%esp
-80103be6:	ff 73 68             	push   0x68(%ebx)
+80104583:	83 ec 0c             	sub    $0xc,%esp
+80104586:	ff 73 68             	push   0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103be9:	83 c3 6c             	add    $0x6c,%ebx
+80104589:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bec:	e8 5f db ff ff       	call   80101750 <idup>
-80103bf1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+8010458c:	e8 bf d1 ff ff       	call   80101750 <idup>
+80104591:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bf4:	83 c4 0c             	add    $0xc,%esp
+80104594:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bf7:	89 47 68             	mov    %eax,0x68(%edi)
+80104597:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bfa:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bfd:	6a 10                	push   $0x10
-80103bff:	53                   	push   %ebx
-80103c00:	50                   	push   %eax
-80103c01:	e8 7a 0f 00 00       	call   80104b80 <safestrcpy>
+8010459a:	8d 47 6c             	lea    0x6c(%edi),%eax
+8010459d:	6a 10                	push   $0x10
+8010459f:	53                   	push   %ebx
+801045a0:	50                   	push   %eax
+801045a1:	e8 ea 14 00 00       	call   80105a90 <safestrcpy>
   pid = np->pid;
-80103c06:	8b 5f 10             	mov    0x10(%edi),%ebx
+801045a6:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103c09:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103c10:	e8 eb 0c 00 00       	call   80104900 <acquire>
+801045a9:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+801045b0:	e8 5b 12 00 00       	call   80105810 <acquire>
+  short check = (np->state!=RUNNABLE);
+801045b5:	8b 47 0c             	mov    0xc(%edi),%eax
+  if(check)
+801045b8:	83 c4 10             	add    $0x10,%esp
   np->state = RUNNABLE;
-80103c15:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+801045bb:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  if(check)
+801045c2:	83 f8 03             	cmp    $0x3,%eax
+801045c5:	75 21                	jne    801045e8 <fork+0xf8>
   release(&ptable.lock);
-80103c1c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103c23:	e8 78 0c 00 00       	call   801048a0 <release>
+801045c7:	83 ec 0c             	sub    $0xc,%esp
+801045ca:	68 40 30 11 80       	push   $0x80113040
+801045cf:	e8 dc 11 00 00       	call   801057b0 <release>
   return pid;
-80103c28:	83 c4 10             	add    $0x10,%esp
+801045d4:	83 c4 10             	add    $0x10,%esp
 }
-80103c2b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103c2e:	89 d8                	mov    %ebx,%eax
-80103c30:	5b                   	pop    %ebx
-80103c31:	5e                   	pop    %esi
-80103c32:	5f                   	pop    %edi
-80103c33:	5d                   	pop    %ebp
-80103c34:	c3                   	ret    
+801045d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801045da:	89 d8                	mov    %ebx,%eax
+801045dc:	5b                   	pop    %ebx
+801045dd:	5e                   	pop    %esi
+801045de:	5f                   	pop    %edi
+801045df:	5d                   	pop    %ebp
+801045e0:	c3                   	ret    
+801045e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+	acquire(&priorityQ.lock);
+801045e8:	83 ec 0c             	sub    $0xc,%esp
+801045eb:	68 04 2f 11 80       	push   $0x80112f04
+801045f0:	e8 1b 12 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+801045f5:	83 c4 10             	add    $0x10,%esp
+801045f8:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+801045ff:	74 1a                	je     8010461b <fork+0x12b>
+		release(&priorityQ.lock);
+80104601:	83 ec 0c             	sub    $0xc,%esp
+80104604:	68 04 2f 11 80       	push   $0x80112f04
+80104609:	e8 a2 11 00 00       	call   801057b0 <release>
+		return 0;
+8010460e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80104611:	e8 ea f2 ff ff       	call   80103900 <insertIntoPQ.part.0>
+80104616:	83 c4 10             	add    $0x10,%esp
+80104619:	eb ac                	jmp    801045c7 <fork+0xd7>
+		release(&priorityQ.lock);
+8010461b:	83 ec 0c             	sub    $0xc,%esp
+8010461e:	68 04 2f 11 80       	push   $0x80112f04
+80104623:	e8 88 11 00 00       	call   801057b0 <release>
+80104628:	83 c4 10             	add    $0x10,%esp
+8010462b:	eb 9a                	jmp    801045c7 <fork+0xd7>
+    return -1;
+8010462d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104632:	eb a3                	jmp    801045d7 <fork+0xe7>
+    kfree(np->kstack);
+80104634:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80104637:	83 ec 0c             	sub    $0xc,%esp
     return -1;
-80103c35:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c3a:	eb ef                	jmp    80103c2b <fork+0xdb>
+8010463a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
     kfree(np->kstack);
-80103c3c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103c3f:	83 ec 0c             	sub    $0xc,%esp
-80103c42:	ff 73 08             	push   0x8(%ebx)
-80103c45:	e8 76 e8 ff ff       	call   801024c0 <kfree>
+8010463f:	ff 77 08             	push   0x8(%edi)
+80104642:	e8 79 de ff ff       	call   801024c0 <kfree>
     np->kstack = 0;
-80103c4a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104647:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
     return -1;
-80103c51:	83 c4 10             	add    $0x10,%esp
+8010464e:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c54:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104651:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%edi)
     return -1;
-80103c5b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c60:	eb c9                	jmp    80103c2b <fork+0xdb>
-80103c62:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103c69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104658:	e9 7a ff ff ff       	jmp    801045d7 <fork+0xe7>
+8010465d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80103c70 <scheduler>:
-{
-80103c70:	55                   	push   %ebp
-80103c71:	89 e5                	mov    %esp,%ebp
-80103c73:	57                   	push   %edi
-80103c74:	56                   	push   %esi
-80103c75:	53                   	push   %ebx
-80103c76:	83 ec 0c             	sub    $0xc,%esp
+80104660 <scheduler>:
+void scheduler(void){
+80104660:	55                   	push   %ebp
+80104661:	89 e5                	mov    %esp,%ebp
+80104663:	57                   	push   %edi
+80104664:	56                   	push   %esi
+80104665:	53                   	push   %ebx
+80104666:	83 ec 0c             	sub    $0xc,%esp
+  defaultParent.pid = -2;
+80104669:	c7 05 30 2d 11 80 fe 	movl   $0xfffffffe,0x80112d30
+80104670:	ff ff ff 
   struct cpu *c = mycpu();
-80103c79:	e8 b2 fc ff ff       	call   80103930 <mycpu>
+80104673:	e8 b8 fb ff ff       	call   80104230 <mycpu>
   c->proc = 0;
-80103c7e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c85:	00 00 00 
+80104678:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+8010467f:	00 00 00 
   struct cpu *c = mycpu();
-80103c88:	89 c6                	mov    %eax,%esi
+80104682:	89 c6                	mov    %eax,%esi
   c->proc = 0;
-80103c8a:	8d 78 04             	lea    0x4(%eax),%edi
-80103c8d:	8d 76 00             	lea    0x0(%esi),%esi
+80104684:	8d 78 04             	lea    0x4(%eax),%edi
+80104687:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010468e:	66 90                	xchg   %ax,%ax
   asm volatile("sti");
-80103c90:	fb                   	sti    
-    acquire(&ptable.lock);
-80103c91:	83 ec 0c             	sub    $0xc,%esp
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c94:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+80104690:	fb                   	sti    
     acquire(&ptable.lock);
-80103c99:	68 20 1d 11 80       	push   $0x80111d20
-80103c9e:	e8 5d 0c 00 00       	call   80104900 <acquire>
-80103ca3:	83 c4 10             	add    $0x10,%esp
-80103ca6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103cad:	8d 76 00             	lea    0x0(%esi),%esi
-      if(p->state != RUNNABLE)
-80103cb0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103cb4:	75 33                	jne    80103ce9 <scheduler+0x79>
-      switchuvm(p);
-80103cb6:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103cb9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103cbf:	53                   	push   %ebx
-80103cc0:	e8 8b 31 00 00       	call   80106e50 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103cc5:	58                   	pop    %eax
-80103cc6:	5a                   	pop    %edx
-80103cc7:	ff 73 1c             	push   0x1c(%ebx)
-80103cca:	57                   	push   %edi
-      p->state = RUNNING;
-80103ccb:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103cd2:	e8 04 0f 00 00       	call   80104bdb <swtch>
-      switchkvm();
-80103cd7:	e8 64 31 00 00       	call   80106e40 <switchkvm>
-      c->proc = 0;
-80103cdc:	83 c4 10             	add    $0x10,%esp
-80103cdf:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ce6:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ce9:	83 eb 80             	sub    $0xffffff80,%ebx
-80103cec:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
-80103cf2:	75 bc                	jne    80103cb0 <scheduler+0x40>
+80104691:	83 ec 0c             	sub    $0xc,%esp
+80104694:	68 40 30 11 80       	push   $0x80113040
+80104699:	e8 72 11 00 00       	call   80105810 <acquire>
+	acquire(&priorityQ.lock);
+8010469e:	c7 04 24 04 2f 11 80 	movl   $0x80112f04,(%esp)
+801046a5:	e8 66 11 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze == 0){
+801046aa:	a1 00 2f 11 80       	mov    0x80112f00,%eax
+801046af:	83 c4 10             	add    $0x10,%esp
+801046b2:	85 c0                	test   %eax,%eax
+801046b4:	0f 85 2e 01 00 00    	jne    801047e8 <scheduler+0x188>
+		release(&priorityQ.lock);
+801046ba:	83 ec 0c             	sub    $0xc,%esp
+801046bd:	68 04 2f 11 80       	push   $0x80112f04
+801046c2:	e8 e9 10 00 00       	call   801057b0 <release>
+	acquire(&priorityQ2.lock);
+801046c7:	c7 04 24 c4 2d 11 80 	movl   $0x80112dc4,(%esp)
+801046ce:	e8 3d 11 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze == 0){
+801046d3:	8b 1d c0 2d 11 80    	mov    0x80112dc0,%ebx
+801046d9:	83 c4 10             	add    $0x10,%esp
+801046dc:	85 db                	test   %ebx,%ebx
+801046de:	74 2a                	je     8010470a <scheduler+0xaa>
+		release(&priorityQ2.lock);
+801046e0:	83 ec 0c             	sub    $0xc,%esp
+801046e3:	68 c4 2d 11 80       	push   $0x80112dc4
+801046e8:	e8 c3 10 00 00       	call   801057b0 <release>
+801046ed:	83 c4 10             	add    $0x10,%esp
+	acquire(&priorityQ2.lock);
+801046f0:	83 ec 0c             	sub    $0xc,%esp
+801046f3:	68 c4 2d 11 80       	push   $0x80112dc4
+801046f8:	e8 13 11 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze == 0){
+801046fd:	8b 0d c0 2d 11 80    	mov    0x80112dc0,%ecx
+80104703:	83 c4 10             	add    $0x10,%esp
+80104706:	85 c9                	test   %ecx,%ecx
+80104708:	75 76                	jne    80104780 <scheduler+0x120>
+		release(&priorityQ2.lock);
+8010470a:	83 ec 0c             	sub    $0xc,%esp
+8010470d:	68 c4 2d 11 80       	push   $0x80112dc4
+80104712:	e8 99 10 00 00       	call   801057b0 <release>
+80104717:	83 c4 10             	add    $0x10,%esp
+  	if((p = extractMin()) == 0){release(&ptable.lock);continue;}
+8010471a:	e8 31 f7 ff ff       	call   80103e50 <extractMin>
+8010471f:	89 c3                	mov    %eax,%ebx
+80104721:	85 c0                	test   %eax,%eax
+80104723:	0f 84 a7 00 00 00    	je     801047d0 <scheduler+0x170>
+  	if(p->state!=RUNNABLE) 
+80104729:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+8010472d:	0f 85 9d 00 00 00    	jne    801047d0 <scheduler+0x170>
+  	switchuvm(p);
+80104733:	83 ec 0c             	sub    $0xc,%esp
+  	c->proc = p;
+80104736:	89 86 ac 00 00 00    	mov    %eax,0xac(%esi)
+  	switchuvm(p);
+8010473c:	50                   	push   %eax
+8010473d:	e8 1e 37 00 00       	call   80107e60 <switchuvm>
+  	(p->numSwitches)++;
+80104742:	83 83 80 00 00 00 01 	addl   $0x1,0x80(%ebx)
+  	p->state = RUNNING;
+80104749:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+  	swtch(&(c->scheduler), p->context);
+80104750:	58                   	pop    %eax
+80104751:	5a                   	pop    %edx
+80104752:	ff 73 1c             	push   0x1c(%ebx)
+80104755:	57                   	push   %edi
+80104756:	e8 90 13 00 00       	call   80105aeb <swtch>
+  	switchkvm();
+8010475b:	e8 f0 36 00 00       	call   80107e50 <switchkvm>
+  	c->proc = 0;
+80104760:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80104767:	00 00 00 
     release(&ptable.lock);
-80103cf4:	83 ec 0c             	sub    $0xc,%esp
-80103cf7:	68 20 1d 11 80       	push   $0x80111d20
-80103cfc:	e8 9f 0b 00 00       	call   801048a0 <release>
-    sti();
-80103d01:	83 c4 10             	add    $0x10,%esp
-80103d04:	eb 8a                	jmp    80103c90 <scheduler+0x20>
-80103d06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d0d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103d10 <sched>:
-{
-80103d10:	55                   	push   %ebp
-80103d11:	89 e5                	mov    %esp,%ebp
-80103d13:	56                   	push   %esi
-80103d14:	53                   	push   %ebx
+8010476a:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+80104771:	e8 3a 10 00 00       	call   801057b0 <release>
+80104776:	83 c4 10             	add    $0x10,%esp
+80104779:	e9 12 ff ff ff       	jmp    80104690 <scheduler+0x30>
+8010477e:	66 90                	xchg   %ax,%ax
+		release(&priorityQ2.lock);
+80104780:	83 ec 0c             	sub    $0xc,%esp
+80104783:	68 c4 2d 11 80       	push   $0x80112dc4
+80104788:	e8 23 10 00 00       	call   801057b0 <release>
+        if((p = extractMin2()) == 0){release(&ptable.lock);break;}
+8010478d:	e8 8e f7 ff ff       	call   80103f20 <extractMin2>
+80104792:	83 c4 10             	add    $0x10,%esp
+80104795:	89 c3                	mov    %eax,%ebx
+80104797:	85 c0                	test   %eax,%eax
+80104799:	74 7d                	je     80104818 <scheduler+0x1b8>
+	acquire(&priorityQ.lock);
+8010479b:	83 ec 0c             	sub    $0xc,%esp
+8010479e:	68 04 2f 11 80       	push   $0x80112f04
+801047a3:	e8 68 10 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+801047a8:	83 c4 10             	add    $0x10,%esp
+801047ab:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+801047b2:	74 4c                	je     80104800 <scheduler+0x1a0>
+		release(&priorityQ.lock);
+801047b4:	83 ec 0c             	sub    $0xc,%esp
+801047b7:	68 04 2f 11 80       	push   $0x80112f04
+801047bc:	e8 ef 0f 00 00       	call   801057b0 <release>
+		return 0;
+801047c1:	89 d8                	mov    %ebx,%eax
+801047c3:	e8 38 f1 ff ff       	call   80103900 <insertIntoPQ.part.0>
+801047c8:	83 c4 10             	add    $0x10,%esp
+801047cb:	e9 20 ff ff ff       	jmp    801046f0 <scheduler+0x90>
+  	if((p = extractMin()) == 0){release(&ptable.lock);continue;}
+801047d0:	83 ec 0c             	sub    $0xc,%esp
+801047d3:	68 40 30 11 80       	push   $0x80113040
+801047d8:	e8 d3 0f 00 00       	call   801057b0 <release>
+801047dd:	83 c4 10             	add    $0x10,%esp
+801047e0:	e9 ab fe ff ff       	jmp    80104690 <scheduler+0x30>
+801047e5:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ.lock);
+801047e8:	83 ec 0c             	sub    $0xc,%esp
+801047eb:	68 04 2f 11 80       	push   $0x80112f04
+801047f0:	e8 bb 0f 00 00       	call   801057b0 <release>
+801047f5:	83 c4 10             	add    $0x10,%esp
+801047f8:	e9 1d ff ff ff       	jmp    8010471a <scheduler+0xba>
+801047fd:	8d 76 00             	lea    0x0(%esi),%esi
+		release(&priorityQ.lock);
+80104800:	83 ec 0c             	sub    $0xc,%esp
+80104803:	68 04 2f 11 80       	push   $0x80112f04
+80104808:	e8 a3 0f 00 00       	call   801057b0 <release>
+8010480d:	83 c4 10             	add    $0x10,%esp
+80104810:	e9 db fe ff ff       	jmp    801046f0 <scheduler+0x90>
+80104815:	8d 76 00             	lea    0x0(%esi),%esi
+        if((p = extractMin2()) == 0){release(&ptable.lock);break;}
+80104818:	83 ec 0c             	sub    $0xc,%esp
+8010481b:	68 40 30 11 80       	push   $0x80113040
+80104820:	e8 8b 0f 00 00       	call   801057b0 <release>
+80104825:	83 c4 10             	add    $0x10,%esp
+80104828:	e9 ed fe ff ff       	jmp    8010471a <scheduler+0xba>
+8010482d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104830 <sched>:
+{
+80104830:	55                   	push   %ebp
+80104831:	89 e5                	mov    %esp,%ebp
+80104833:	56                   	push   %esi
+80104834:	53                   	push   %ebx
   pushcli();
-80103d15:	e8 96 0a 00 00       	call   801047b0 <pushcli>
+80104835:	e8 86 0e 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80103d1a:	e8 11 fc ff ff       	call   80103930 <mycpu>
+8010483a:	e8 f1 f9 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-80103d1f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010483f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103d25:	e8 d6 0a 00 00       	call   80104800 <popcli>
+80104845:	e8 c6 0e 00 00       	call   80105710 <popcli>
   if(!holding(&ptable.lock))
-80103d2a:	83 ec 0c             	sub    $0xc,%esp
-80103d2d:	68 20 1d 11 80       	push   $0x80111d20
-80103d32:	e8 29 0b 00 00       	call   80104860 <holding>
-80103d37:	83 c4 10             	add    $0x10,%esp
-80103d3a:	85 c0                	test   %eax,%eax
-80103d3c:	74 4f                	je     80103d8d <sched+0x7d>
+8010484a:	83 ec 0c             	sub    $0xc,%esp
+8010484d:	68 40 30 11 80       	push   $0x80113040
+80104852:	e8 19 0f 00 00       	call   80105770 <holding>
+80104857:	83 c4 10             	add    $0x10,%esp
+8010485a:	85 c0                	test   %eax,%eax
+8010485c:	74 4f                	je     801048ad <sched+0x7d>
   if(mycpu()->ncli != 1)
-80103d3e:	e8 ed fb ff ff       	call   80103930 <mycpu>
-80103d43:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d4a:	75 68                	jne    80103db4 <sched+0xa4>
+8010485e:	e8 cd f9 ff ff       	call   80104230 <mycpu>
+80104863:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+8010486a:	75 68                	jne    801048d4 <sched+0xa4>
   if(p->state == RUNNING)
-80103d4c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d50:	74 55                	je     80103da7 <sched+0x97>
+8010486c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104870:	74 55                	je     801048c7 <sched+0x97>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d52:	9c                   	pushf  
-80103d53:	58                   	pop    %eax
+80104872:	9c                   	pushf  
+80104873:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d54:	f6 c4 02             	test   $0x2,%ah
-80103d57:	75 41                	jne    80103d9a <sched+0x8a>
+80104874:	f6 c4 02             	test   $0x2,%ah
+80104877:	75 41                	jne    801048ba <sched+0x8a>
   intena = mycpu()->intena;
-80103d59:	e8 d2 fb ff ff       	call   80103930 <mycpu>
+80104879:	e8 b2 f9 ff ff       	call   80104230 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d5e:	83 c3 1c             	add    $0x1c,%ebx
+8010487e:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d61:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80104881:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d67:	e8 c4 fb ff ff       	call   80103930 <mycpu>
-80103d6c:	83 ec 08             	sub    $0x8,%esp
-80103d6f:	ff 70 04             	push   0x4(%eax)
-80103d72:	53                   	push   %ebx
-80103d73:	e8 63 0e 00 00       	call   80104bdb <swtch>
+80104887:	e8 a4 f9 ff ff       	call   80104230 <mycpu>
+8010488c:	83 ec 08             	sub    $0x8,%esp
+8010488f:	ff 70 04             	push   0x4(%eax)
+80104892:	53                   	push   %ebx
+80104893:	e8 53 12 00 00       	call   80105aeb <swtch>
   mycpu()->intena = intena;
-80103d78:	e8 b3 fb ff ff       	call   80103930 <mycpu>
+80104898:	e8 93 f9 ff ff       	call   80104230 <mycpu>
 }
-80103d7d:	83 c4 10             	add    $0x10,%esp
+8010489d:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d80:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+801048a0:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d86:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d89:	5b                   	pop    %ebx
-80103d8a:	5e                   	pop    %esi
-80103d8b:	5d                   	pop    %ebp
-80103d8c:	c3                   	ret    
+801048a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048a9:	5b                   	pop    %ebx
+801048aa:	5e                   	pop    %esi
+801048ab:	5d                   	pop    %ebp
+801048ac:	c3                   	ret    
     panic("sched ptable.lock");
-80103d8d:	83 ec 0c             	sub    $0xc,%esp
-80103d90:	68 7b 7b 10 80       	push   $0x80107b7b
-80103d95:	e8 e6 c5 ff ff       	call   80100380 <panic>
+801048ad:	83 ec 0c             	sub    $0xc,%esp
+801048b0:	68 b0 8b 10 80       	push   $0x80108bb0
+801048b5:	e8 c6 ba ff ff       	call   80100380 <panic>
     panic("sched interruptible");
-80103d9a:	83 ec 0c             	sub    $0xc,%esp
-80103d9d:	68 a7 7b 10 80       	push   $0x80107ba7
-80103da2:	e8 d9 c5 ff ff       	call   80100380 <panic>
+801048ba:	83 ec 0c             	sub    $0xc,%esp
+801048bd:	68 dc 8b 10 80       	push   $0x80108bdc
+801048c2:	e8 b9 ba ff ff       	call   80100380 <panic>
     panic("sched running");
-80103da7:	83 ec 0c             	sub    $0xc,%esp
-80103daa:	68 99 7b 10 80       	push   $0x80107b99
-80103daf:	e8 cc c5 ff ff       	call   80100380 <panic>
+801048c7:	83 ec 0c             	sub    $0xc,%esp
+801048ca:	68 ce 8b 10 80       	push   $0x80108bce
+801048cf:	e8 ac ba ff ff       	call   80100380 <panic>
     panic("sched locks");
-80103db4:	83 ec 0c             	sub    $0xc,%esp
-80103db7:	68 8d 7b 10 80       	push   $0x80107b8d
-80103dbc:	e8 bf c5 ff ff       	call   80100380 <panic>
-80103dc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103dc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103dcf:	90                   	nop
-
-80103dd0 <exit>:
-{
-80103dd0:	55                   	push   %ebp
-80103dd1:	89 e5                	mov    %esp,%ebp
-80103dd3:	57                   	push   %edi
-80103dd4:	56                   	push   %esi
-80103dd5:	53                   	push   %ebx
-80103dd6:	83 ec 0c             	sub    $0xc,%esp
+801048d4:	83 ec 0c             	sub    $0xc,%esp
+801048d7:	68 c2 8b 10 80       	push   $0x80108bc2
+801048dc:	e8 9f ba ff ff       	call   80100380 <panic>
+801048e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048ef:	90                   	nop
+
+801048f0 <exit>:
+{
+801048f0:	55                   	push   %ebp
+801048f1:	89 e5                	mov    %esp,%ebp
+801048f3:	57                   	push   %edi
+801048f4:	56                   	push   %esi
+801048f5:	53                   	push   %ebx
+801048f6:	83 ec 0c             	sub    $0xc,%esp
   struct proc *curproc = myproc();
-80103dd9:	e8 d2 fb ff ff       	call   801039b0 <myproc>
+801048f9:	e8 b2 f9 ff ff       	call   801042b0 <myproc>
   if(curproc == initproc)
-80103dde:	39 05 54 3d 11 80    	cmp    %eax,0x80113d54
-80103de4:	0f 84 cd 00 00 00    	je     80103eb7 <exit+0xe7>
-80103dea:	89 c3                	mov    %eax,%ebx
-80103dec:	8d 70 28             	lea    0x28(%eax),%esi
-80103def:	8d 78 68             	lea    0x68(%eax),%edi
-80103df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801048fe:	39 05 74 53 11 80    	cmp    %eax,0x80115374
+80104904:	0f 84 bf 00 00 00    	je     801049c9 <exit+0xd9>
+8010490a:	89 c6                	mov    %eax,%esi
+8010490c:	8d 58 28             	lea    0x28(%eax),%ebx
+8010490f:	8d 78 68             	lea    0x68(%eax),%edi
+80104912:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd]){
-80103df8:	8b 06                	mov    (%esi),%eax
-80103dfa:	85 c0                	test   %eax,%eax
-80103dfc:	74 12                	je     80103e10 <exit+0x40>
+80104918:	8b 03                	mov    (%ebx),%eax
+8010491a:	85 c0                	test   %eax,%eax
+8010491c:	74 12                	je     80104930 <exit+0x40>
       fileclose(curproc->ofile[fd]);
-80103dfe:	83 ec 0c             	sub    $0xc,%esp
-80103e01:	50                   	push   %eax
-80103e02:	e8 e9 d0 ff ff       	call   80100ef0 <fileclose>
+8010491e:	83 ec 0c             	sub    $0xc,%esp
+80104921:	50                   	push   %eax
+80104922:	e8 c9 c5 ff ff       	call   80100ef0 <fileclose>
       curproc->ofile[fd] = 0;
-80103e07:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103e0d:	83 c4 10             	add    $0x10,%esp
+80104927:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010492d:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103e10:	83 c6 04             	add    $0x4,%esi
-80103e13:	39 f7                	cmp    %esi,%edi
-80103e15:	75 e1                	jne    80103df8 <exit+0x28>
+80104930:	83 c3 04             	add    $0x4,%ebx
+80104933:	39 fb                	cmp    %edi,%ebx
+80104935:	75 e1                	jne    80104918 <exit+0x28>
   begin_op();
-80103e17:	e8 44 ef ff ff       	call   80102d60 <begin_op>
+80104937:	e8 24 e4 ff ff       	call   80102d60 <begin_op>
   iput(curproc->cwd);
-80103e1c:	83 ec 0c             	sub    $0xc,%esp
-80103e1f:	ff 73 68             	push   0x68(%ebx)
-80103e22:	e8 89 da ff ff       	call   801018b0 <iput>
+8010493c:	83 ec 0c             	sub    $0xc,%esp
+8010493f:	ff 76 68             	push   0x68(%esi)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104942:	bb 74 30 11 80       	mov    $0x80113074,%ebx
+  iput(curproc->cwd);
+80104947:	e8 64 cf ff ff       	call   801018b0 <iput>
   end_op();
-80103e27:	e8 a4 ef ff ff       	call   80102dd0 <end_op>
+8010494c:	e8 7f e4 ff ff       	call   80102dd0 <end_op>
   curproc->cwd = 0;
-80103e2c:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+80104951:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80103e33:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103e3a:	e8 c1 0a 00 00       	call   80104900 <acquire>
+80104958:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+8010495f:	e8 ac 0e 00 00       	call   80105810 <acquire>
   wakeup1(curproc->parent);
-80103e3f:	8b 43 14             	mov    0x14(%ebx),%eax
-80103e42:	e8 69 f9 ff ff       	call   801037b0 <wakeup1>
-      p->parent = initproc;
-80103e47:	8b 0d 54 3d 11 80    	mov    0x80113d54,%ecx
-80103e4d:	83 c4 10             	add    $0x10,%esp
+80104964:	8b 46 14             	mov    0x14(%esi),%eax
+80104967:	e8 94 f0 ff ff       	call   80103a00 <wakeup1>
+8010496c:	83 c4 10             	add    $0x10,%esp
+8010496f:	eb 15                	jmp    80104986 <exit+0x96>
+80104971:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e50:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
-80103e55:	eb 14                	jmp    80103e6b <exit+0x9b>
-80103e57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e5e:	66 90                	xchg   %ax,%ax
-80103e60:	83 ea 80             	sub    $0xffffff80,%edx
-80103e63:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
-80103e69:	74 33                	je     80103e9e <exit+0xce>
+80104978:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+8010497e:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80104984:	74 2a                	je     801049b0 <exit+0xc0>
     if(p->parent == curproc){
-80103e6b:	39 5a 14             	cmp    %ebx,0x14(%edx)
-80103e6e:	75 f0                	jne    80103e60 <exit+0x90>
+80104986:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104989:	75 ed                	jne    80104978 <exit+0x88>
+      p->parent = initproc;
+8010498b:	a1 74 53 11 80       	mov    0x80115374,%eax
       if(p->state == ZOMBIE)
-80103e70:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80104990:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
       p->parent = initproc;
-80103e74:	89 4a 14             	mov    %ecx,0x14(%edx)
+80104994:	89 43 14             	mov    %eax,0x14(%ebx)
       if(p->state == ZOMBIE)
-80103e77:	75 e7                	jne    80103e60 <exit+0x90>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e79:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-80103e7e:	eb 0a                	jmp    80103e8a <exit+0xba>
-80103e80:	83 e8 80             	sub    $0xffffff80,%eax
-80103e83:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-80103e88:	74 d6                	je     80103e60 <exit+0x90>
-    if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e8e:	75 f0                	jne    80103e80 <exit+0xb0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e93:	75 eb                	jne    80103e80 <exit+0xb0>
-      p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e9c:	eb e2                	jmp    80103e80 <exit+0xb0>
+80104997:	75 df                	jne    80104978 <exit+0x88>
+        wakeup1(initproc);
+80104999:	e8 62 f0 ff ff       	call   80103a00 <wakeup1>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010499e:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+801049a4:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+801049aa:	75 da                	jne    80104986 <exit+0x96>
+801049ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   curproc->state = ZOMBIE;
-80103e9e:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+801049b0:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-80103ea5:	e8 66 fe ff ff       	call   80103d10 <sched>
+801049b7:	e8 74 fe ff ff       	call   80104830 <sched>
   panic("zombie exit");
-80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 c8 7b 10 80       	push   $0x80107bc8
-80103eb2:	e8 c9 c4 ff ff       	call   80100380 <panic>
+801049bc:	83 ec 0c             	sub    $0xc,%esp
+801049bf:	68 fd 8b 10 80       	push   $0x80108bfd
+801049c4:	e8 b7 b9 ff ff       	call   80100380 <panic>
     panic("init exiting");
-80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 bb 7b 10 80       	push   $0x80107bbb
-80103ebf:	e8 bc c4 ff ff       	call   80100380 <panic>
-80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ecf:	90                   	nop
-
-80103ed0 <wait>:
-{
-80103ed0:	55                   	push   %ebp
-80103ed1:	89 e5                	mov    %esp,%ebp
-80103ed3:	56                   	push   %esi
-80103ed4:	53                   	push   %ebx
+801049c9:	83 ec 0c             	sub    $0xc,%esp
+801049cc:	68 f0 8b 10 80       	push   $0x80108bf0
+801049d1:	e8 aa b9 ff ff       	call   80100380 <panic>
+801049d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801049e0 <wait>:
+{
+801049e0:	55                   	push   %ebp
+801049e1:	89 e5                	mov    %esp,%ebp
+801049e3:	56                   	push   %esi
+801049e4:	53                   	push   %ebx
   pushcli();
-80103ed5:	e8 d6 08 00 00       	call   801047b0 <pushcli>
+801049e5:	e8 d6 0c 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80103eda:	e8 51 fa ff ff       	call   80103930 <mycpu>
+801049ea:	e8 41 f8 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-80103edf:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+801049ef:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ee5:	e8 16 09 00 00       	call   80104800 <popcli>
+801049f5:	e8 16 0d 00 00       	call   80105710 <popcli>
   acquire(&ptable.lock);
-80103eea:	83 ec 0c             	sub    $0xc,%esp
-80103eed:	68 20 1d 11 80       	push   $0x80111d20
-80103ef2:	e8 09 0a 00 00       	call   80104900 <acquire>
-80103ef7:	83 c4 10             	add    $0x10,%esp
+801049fa:	83 ec 0c             	sub    $0xc,%esp
+801049fd:	68 40 30 11 80       	push   $0x80113040
+80104a02:	e8 09 0e 00 00       	call   80105810 <acquire>
+80104a07:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-80103efa:	31 c0                	xor    %eax,%eax
+80104a0a:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103efc:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
-80103f01:	eb 10                	jmp    80103f13 <wait+0x43>
-80103f03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103f07:	90                   	nop
-80103f08:	83 eb 80             	sub    $0xffffff80,%ebx
-80103f0b:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
-80103f11:	74 1b                	je     80103f2e <wait+0x5e>
+80104a0c:	bb 74 30 11 80       	mov    $0x80113074,%ebx
+80104a11:	eb 13                	jmp    80104a26 <wait+0x46>
+80104a13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104a17:	90                   	nop
+80104a18:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80104a1e:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80104a24:	74 1e                	je     80104a44 <wait+0x64>
       if(p->parent != curproc)
-80103f13:	39 73 14             	cmp    %esi,0x14(%ebx)
-80103f16:	75 f0                	jne    80103f08 <wait+0x38>
+80104a26:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104a29:	75 ed                	jne    80104a18 <wait+0x38>
       if(p->state == ZOMBIE){
-80103f18:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103f1c:	74 62                	je     80103f80 <wait+0xb0>
+80104a2b:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104a2f:	74 5f                	je     80104a90 <wait+0xb0>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f1e:	83 eb 80             	sub    $0xffffff80,%ebx
+80104a31:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
       havekids = 1;
-80103f21:	b8 01 00 00 00       	mov    $0x1,%eax
+80104a37:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f26:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
-80103f2c:	75 e5                	jne    80103f13 <wait+0x43>
+80104a3c:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80104a42:	75 e2                	jne    80104a26 <wait+0x46>
     if(!havekids || curproc->killed){
-80103f2e:	85 c0                	test   %eax,%eax
-80103f30:	0f 84 a0 00 00 00    	je     80103fd6 <wait+0x106>
-80103f36:	8b 46 24             	mov    0x24(%esi),%eax
-80103f39:	85 c0                	test   %eax,%eax
-80103f3b:	0f 85 95 00 00 00    	jne    80103fd6 <wait+0x106>
+80104a44:	85 c0                	test   %eax,%eax
+80104a46:	0f 84 9a 00 00 00    	je     80104ae6 <wait+0x106>
+80104a4c:	8b 46 24             	mov    0x24(%esi),%eax
+80104a4f:	85 c0                	test   %eax,%eax
+80104a51:	0f 85 8f 00 00 00    	jne    80104ae6 <wait+0x106>
   pushcli();
-80103f41:	e8 6a 08 00 00       	call   801047b0 <pushcli>
+80104a57:	e8 64 0c 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80103f46:	e8 e5 f9 ff ff       	call   80103930 <mycpu>
+80104a5c:	e8 cf f7 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-80103f4b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104a61:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f51:	e8 aa 08 00 00       	call   80104800 <popcli>
+80104a67:	e8 a4 0c 00 00       	call   80105710 <popcli>
   if(p == 0)
-80103f56:	85 db                	test   %ebx,%ebx
-80103f58:	0f 84 8f 00 00 00    	je     80103fed <wait+0x11d>
+80104a6c:	85 db                	test   %ebx,%ebx
+80104a6e:	0f 84 89 00 00 00    	je     80104afd <wait+0x11d>
   p->chan = chan;
-80103f5e:	89 73 20             	mov    %esi,0x20(%ebx)
+80104a74:	89 73 20             	mov    %esi,0x20(%ebx)
   p->state = SLEEPING;
-80103f61:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104a77:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f68:	e8 a3 fd ff ff       	call   80103d10 <sched>
+80104a7e:	e8 ad fd ff ff       	call   80104830 <sched>
   p->chan = 0;
-80103f6d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104a83:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103f74:	eb 84                	jmp    80103efa <wait+0x2a>
-80103f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103f7d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a8a:	e9 7b ff ff ff       	jmp    80104a0a <wait+0x2a>
+80104a8f:	90                   	nop
         kfree(p->kstack);
-80103f80:	83 ec 0c             	sub    $0xc,%esp
+80104a90:	83 ec 0c             	sub    $0xc,%esp
         pid = p->pid;
-80103f83:	8b 73 10             	mov    0x10(%ebx),%esi
+80104a93:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80103f86:	ff 73 08             	push   0x8(%ebx)
-80103f89:	e8 32 e5 ff ff       	call   801024c0 <kfree>
+80104a96:	ff 73 08             	push   0x8(%ebx)
+80104a99:	e8 22 da ff ff       	call   801024c0 <kfree>
         p->kstack = 0;
-80103f8e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104a9e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80103f95:	5a                   	pop    %edx
-80103f96:	ff 73 04             	push   0x4(%ebx)
-80103f99:	e8 92 32 00 00       	call   80107230 <freevm>
+80104aa5:	5a                   	pop    %edx
+80104aa6:	ff 73 04             	push   0x4(%ebx)
+80104aa9:	e8 92 37 00 00       	call   80108240 <freevm>
         p->pid = 0;
-80103f9e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80104aae:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80103fa5:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80104ab5:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80103fac:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+80104abc:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80103fb0:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80104ac0:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80103fb7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104ac7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-80103fbe:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103fc5:	e8 d6 08 00 00       	call   801048a0 <release>
+80104ace:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+80104ad5:	e8 d6 0c 00 00       	call   801057b0 <release>
         return pid;
-80103fca:	83 c4 10             	add    $0x10,%esp
+80104ada:	83 c4 10             	add    $0x10,%esp
 }
-80103fcd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103fd0:	89 f0                	mov    %esi,%eax
-80103fd2:	5b                   	pop    %ebx
-80103fd3:	5e                   	pop    %esi
-80103fd4:	5d                   	pop    %ebp
-80103fd5:	c3                   	ret    
+80104add:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ae0:	89 f0                	mov    %esi,%eax
+80104ae2:	5b                   	pop    %ebx
+80104ae3:	5e                   	pop    %esi
+80104ae4:	5d                   	pop    %ebp
+80104ae5:	c3                   	ret    
       release(&ptable.lock);
-80103fd6:	83 ec 0c             	sub    $0xc,%esp
+80104ae6:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80103fd9:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104ae9:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-80103fde:	68 20 1d 11 80       	push   $0x80111d20
-80103fe3:	e8 b8 08 00 00       	call   801048a0 <release>
+80104aee:	68 40 30 11 80       	push   $0x80113040
+80104af3:	e8 b8 0c 00 00       	call   801057b0 <release>
       return -1;
-80103fe8:	83 c4 10             	add    $0x10,%esp
-80103feb:	eb e0                	jmp    80103fcd <wait+0xfd>
+80104af8:	83 c4 10             	add    $0x10,%esp
+80104afb:	eb e0                	jmp    80104add <wait+0xfd>
     panic("sleep");
-80103fed:	83 ec 0c             	sub    $0xc,%esp
-80103ff0:	68 d4 7b 10 80       	push   $0x80107bd4
-80103ff5:	e8 86 c3 ff ff       	call   80100380 <panic>
-80103ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104000 <yield>:
-{
-80104000:	55                   	push   %ebp
-80104001:	89 e5                	mov    %esp,%ebp
-80104003:	53                   	push   %ebx
-80104004:	83 ec 10             	sub    $0x10,%esp
+80104afd:	83 ec 0c             	sub    $0xc,%esp
+80104b00:	68 09 8c 10 80       	push   $0x80108c09
+80104b05:	e8 76 b8 ff ff       	call   80100380 <panic>
+80104b0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104b10 <yield>:
+void yield(void){
+80104b10:	55                   	push   %ebp
+80104b11:	89 e5                	mov    %esp,%ebp
+80104b13:	56                   	push   %esi
+80104b14:	53                   	push   %ebx
   acquire(&ptable.lock);  //DOC: yieldlock
-80104007:	68 20 1d 11 80       	push   $0x80111d20
-8010400c:	e8 ef 08 00 00       	call   80104900 <acquire>
+80104b15:	83 ec 0c             	sub    $0xc,%esp
+80104b18:	68 40 30 11 80       	push   $0x80113040
+80104b1d:	e8 ee 0c 00 00       	call   80105810 <acquire>
   pushcli();
-80104011:	e8 9a 07 00 00       	call   801047b0 <pushcli>
+80104b22:	e8 99 0b 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80104016:	e8 15 f9 ff ff       	call   80103930 <mycpu>
+80104b27:	e8 04 f7 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-8010401b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104b2c:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80104021:	e8 da 07 00 00       	call   80104800 <popcli>
+80104b32:	e8 d9 0b 00 00       	call   80105710 <popcli>
+  short check = (myproc()->state != RUNNABLE);
+80104b37:	8b 5b 0c             	mov    0xc(%ebx),%ebx
+  pushcli();
+80104b3a:	e8 81 0b 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+80104b3f:	e8 ec f6 ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+80104b44:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80104b4a:	e8 c1 0b 00 00       	call   80105710 <popcli>
+  if(check)
+80104b4f:	83 c4 10             	add    $0x10,%esp
   myproc()->state = RUNNABLE;
-80104026:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80104b52:	c7 46 0c 03 00 00 00 	movl   $0x3,0xc(%esi)
+  if(check)
+80104b59:	83 fb 03             	cmp    $0x3,%ebx
+80104b5c:	75 22                	jne    80104b80 <yield+0x70>
   sched();
-8010402d:	e8 de fc ff ff       	call   80103d10 <sched>
+80104b5e:	e8 cd fc ff ff       	call   80104830 <sched>
   release(&ptable.lock);
-80104032:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80104039:	e8 62 08 00 00       	call   801048a0 <release>
-}
-8010403e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104041:	83 c4 10             	add    $0x10,%esp
-80104044:	c9                   	leave  
-80104045:	c3                   	ret    
-80104046:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010404d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104050 <sleep>:
-{
-80104050:	55                   	push   %ebp
-80104051:	89 e5                	mov    %esp,%ebp
-80104053:	57                   	push   %edi
-80104054:	56                   	push   %esi
-80104055:	53                   	push   %ebx
-80104056:	83 ec 0c             	sub    $0xc,%esp
-80104059:	8b 7d 08             	mov    0x8(%ebp),%edi
-8010405c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104b63:	83 ec 0c             	sub    $0xc,%esp
+80104b66:	68 40 30 11 80       	push   $0x80113040
+80104b6b:	e8 40 0c 00 00       	call   801057b0 <release>
+}
+80104b70:	83 c4 10             	add    $0x10,%esp
+80104b73:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b76:	5b                   	pop    %ebx
+80104b77:	5e                   	pop    %esi
+80104b78:	5d                   	pop    %ebp
+80104b79:	c3                   	ret    
+80104b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  pushcli();
+80104b80:	e8 3b 0b 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+80104b85:	e8 a6 f6 ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+80104b8a:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104b90:	e8 7b 0b 00 00       	call   80105710 <popcli>
+	acquire(&priorityQ.lock);
+80104b95:	83 ec 0c             	sub    $0xc,%esp
+80104b98:	68 04 2f 11 80       	push   $0x80112f04
+80104b9d:	e8 6e 0c 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+80104ba2:	83 c4 10             	add    $0x10,%esp
+80104ba5:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+80104bac:	74 22                	je     80104bd0 <yield+0xc0>
+		release(&priorityQ.lock);
+80104bae:	83 ec 0c             	sub    $0xc,%esp
+80104bb1:	68 04 2f 11 80       	push   $0x80112f04
+80104bb6:	e8 f5 0b 00 00       	call   801057b0 <release>
+		return 0;
+80104bbb:	89 d8                	mov    %ebx,%eax
+80104bbd:	e8 3e ed ff ff       	call   80103900 <insertIntoPQ.part.0>
+80104bc2:	83 c4 10             	add    $0x10,%esp
+80104bc5:	eb 97                	jmp    80104b5e <yield+0x4e>
+80104bc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bce:	66 90                	xchg   %ax,%ax
+		release(&priorityQ.lock);
+80104bd0:	83 ec 0c             	sub    $0xc,%esp
+80104bd3:	68 04 2f 11 80       	push   $0x80112f04
+80104bd8:	e8 d3 0b 00 00       	call   801057b0 <release>
+80104bdd:	83 c4 10             	add    $0x10,%esp
+80104be0:	e9 79 ff ff ff       	jmp    80104b5e <yield+0x4e>
+80104be5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104bf0 <new_yield>:
+void new_yield(void){
+80104bf0:	55                   	push   %ebp
+80104bf1:	89 e5                	mov    %esp,%ebp
+80104bf3:	53                   	push   %ebx
+80104bf4:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+80104bf7:	68 40 30 11 80       	push   $0x80113040
+80104bfc:	e8 0f 0c 00 00       	call   80105810 <acquire>
+  pushcli();
+80104c01:	e8 ba 0a 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+80104c06:	e8 25 f6 ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+80104c0b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104c11:	e8 fa 0a 00 00       	call   80105710 <popcli>
+  myproc()->state = RUNNABLE;
+80104c16:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  pushcli();
+80104c1d:	e8 9e 0a 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+80104c22:	e8 09 f6 ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+80104c27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104c2d:	e8 de 0a 00 00       	call   80105710 <popcli>
+	acquire(&priorityQ2.lock);
+80104c32:	c7 04 24 c4 2d 11 80 	movl   $0x80112dc4,(%esp)
+80104c39:	e8 d2 0b 00 00       	call   80105810 <acquire>
+	if(priorityQ2.sze==NPROC){
+80104c3e:	83 c4 10             	add    $0x10,%esp
+80104c41:	83 3d c0 2d 11 80 40 	cmpl   $0x40,0x80112dc0
+80104c48:	74 36                	je     80104c80 <new_yield+0x90>
+		release(&priorityQ2.lock);
+80104c4a:	83 ec 0c             	sub    $0xc,%esp
+80104c4d:	68 c4 2d 11 80       	push   $0x80112dc4
+80104c52:	e8 59 0b 00 00       	call   801057b0 <release>
+		return 0;
+80104c57:	89 d8                	mov    %ebx,%eax
+80104c59:	e8 22 ed ff ff       	call   80103980 <insertIntoPQ2.part.0>
+80104c5e:	83 c4 10             	add    $0x10,%esp
+  sched();
+80104c61:	e8 ca fb ff ff       	call   80104830 <sched>
+  release(&ptable.lock);
+80104c66:	83 ec 0c             	sub    $0xc,%esp
+80104c69:	68 40 30 11 80       	push   $0x80113040
+80104c6e:	e8 3d 0b 00 00       	call   801057b0 <release>
+}
+80104c73:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c76:	83 c4 10             	add    $0x10,%esp
+80104c79:	c9                   	leave  
+80104c7a:	c3                   	ret    
+80104c7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c7f:	90                   	nop
+		release(&priorityQ2.lock);
+80104c80:	83 ec 0c             	sub    $0xc,%esp
+80104c83:	68 c4 2d 11 80       	push   $0x80112dc4
+80104c88:	e8 23 0b 00 00       	call   801057b0 <release>
+80104c8d:	83 c4 10             	add    $0x10,%esp
+80104c90:	eb cf                	jmp    80104c61 <new_yield+0x71>
+80104c92:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104ca0 <sleep>:
+{
+80104ca0:	55                   	push   %ebp
+80104ca1:	89 e5                	mov    %esp,%ebp
+80104ca3:	57                   	push   %edi
+80104ca4:	56                   	push   %esi
+80104ca5:	53                   	push   %ebx
+80104ca6:	83 ec 0c             	sub    $0xc,%esp
+80104ca9:	8b 7d 08             	mov    0x8(%ebp),%edi
+80104cac:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-8010405f:	e8 4c 07 00 00       	call   801047b0 <pushcli>
+80104caf:	e8 0c 0a 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80104064:	e8 c7 f8 ff ff       	call   80103930 <mycpu>
+80104cb4:	e8 77 f5 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-80104069:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104cb9:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010406f:	e8 8c 07 00 00       	call   80104800 <popcli>
+80104cbf:	e8 4c 0a 00 00       	call   80105710 <popcli>
   if(p == 0)
-80104074:	85 db                	test   %ebx,%ebx
-80104076:	0f 84 87 00 00 00    	je     80104103 <sleep+0xb3>
+80104cc4:	85 db                	test   %ebx,%ebx
+80104cc6:	0f 84 87 00 00 00    	je     80104d53 <sleep+0xb3>
   if(lk == 0)
-8010407c:	85 f6                	test   %esi,%esi
-8010407e:	74 76                	je     801040f6 <sleep+0xa6>
+80104ccc:	85 f6                	test   %esi,%esi
+80104cce:	74 76                	je     80104d46 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80104080:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
-80104086:	74 50                	je     801040d8 <sleep+0x88>
+80104cd0:	81 fe 40 30 11 80    	cmp    $0x80113040,%esi
+80104cd6:	74 50                	je     80104d28 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80104088:	83 ec 0c             	sub    $0xc,%esp
-8010408b:	68 20 1d 11 80       	push   $0x80111d20
-80104090:	e8 6b 08 00 00       	call   80104900 <acquire>
+80104cd8:	83 ec 0c             	sub    $0xc,%esp
+80104cdb:	68 40 30 11 80       	push   $0x80113040
+80104ce0:	e8 2b 0b 00 00       	call   80105810 <acquire>
     release(lk);
-80104095:	89 34 24             	mov    %esi,(%esp)
-80104098:	e8 03 08 00 00       	call   801048a0 <release>
+80104ce5:	89 34 24             	mov    %esi,(%esp)
+80104ce8:	e8 c3 0a 00 00       	call   801057b0 <release>
   p->chan = chan;
-8010409d:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104ced:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-801040a0:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104cf0:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-801040a7:	e8 64 fc ff ff       	call   80103d10 <sched>
+80104cf7:	e8 34 fb ff ff       	call   80104830 <sched>
   p->chan = 0;
-801040ac:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104cfc:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-801040b3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-801040ba:	e8 e1 07 00 00       	call   801048a0 <release>
+80104d03:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+80104d0a:	e8 a1 0a 00 00       	call   801057b0 <release>
     acquire(lk);
-801040bf:	89 75 08             	mov    %esi,0x8(%ebp)
-801040c2:	83 c4 10             	add    $0x10,%esp
+80104d0f:	89 75 08             	mov    %esi,0x8(%ebp)
+80104d12:	83 c4 10             	add    $0x10,%esp
 }
-801040c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040c8:	5b                   	pop    %ebx
-801040c9:	5e                   	pop    %esi
-801040ca:	5f                   	pop    %edi
-801040cb:	5d                   	pop    %ebp
+80104d15:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d18:	5b                   	pop    %ebx
+80104d19:	5e                   	pop    %esi
+80104d1a:	5f                   	pop    %edi
+80104d1b:	5d                   	pop    %ebp
     acquire(lk);
-801040cc:	e9 2f 08 00 00       	jmp    80104900 <acquire>
-801040d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d1c:	e9 ef 0a 00 00       	jmp    80105810 <acquire>
+80104d21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   p->chan = chan;
-801040d8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104d28:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-801040db:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104d2b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-801040e2:	e8 29 fc ff ff       	call   80103d10 <sched>
+80104d32:	e8 f9 fa ff ff       	call   80104830 <sched>
   p->chan = 0;
-801040e7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104d37:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-801040ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040f1:	5b                   	pop    %ebx
-801040f2:	5e                   	pop    %esi
-801040f3:	5f                   	pop    %edi
-801040f4:	5d                   	pop    %ebp
-801040f5:	c3                   	ret    
+80104d3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104d41:	5b                   	pop    %ebx
+80104d42:	5e                   	pop    %esi
+80104d43:	5f                   	pop    %edi
+80104d44:	5d                   	pop    %ebp
+80104d45:	c3                   	ret    
     panic("sleep without lk");
-801040f6:	83 ec 0c             	sub    $0xc,%esp
-801040f9:	68 da 7b 10 80       	push   $0x80107bda
-801040fe:	e8 7d c2 ff ff       	call   80100380 <panic>
+80104d46:	83 ec 0c             	sub    $0xc,%esp
+80104d49:	68 0f 8c 10 80       	push   $0x80108c0f
+80104d4e:	e8 2d b6 ff ff       	call   80100380 <panic>
     panic("sleep");
-80104103:	83 ec 0c             	sub    $0xc,%esp
-80104106:	68 d4 7b 10 80       	push   $0x80107bd4
-8010410b:	e8 70 c2 ff ff       	call   80100380 <panic>
+80104d53:	83 ec 0c             	sub    $0xc,%esp
+80104d56:	68 09 8c 10 80       	push   $0x80108c09
+80104d5b:	e8 20 b6 ff ff       	call   80100380 <panic>
 
-80104110 <wakeup>:
+80104d60 <wakeup>:
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-80104110:	55                   	push   %ebp
-80104111:	89 e5                	mov    %esp,%ebp
-80104113:	53                   	push   %ebx
-80104114:	83 ec 10             	sub    $0x10,%esp
-80104117:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d60:	55                   	push   %ebp
+80104d61:	89 e5                	mov    %esp,%ebp
+80104d63:	53                   	push   %ebx
+80104d64:	83 ec 10             	sub    $0x10,%esp
+80104d67:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-8010411a:	68 20 1d 11 80       	push   $0x80111d20
-8010411f:	e8 dc 07 00 00       	call   80104900 <acquire>
-80104124:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104127:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-8010412c:	eb 0c                	jmp    8010413a <wakeup+0x2a>
-8010412e:	66 90                	xchg   %ax,%ax
-80104130:	83 e8 80             	sub    $0xffffff80,%eax
-80104133:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-80104138:	74 1c                	je     80104156 <wakeup+0x46>
-    if(p->state == SLEEPING && p->chan == chan)
-8010413a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-8010413e:	75 f0                	jne    80104130 <wakeup+0x20>
-80104140:	3b 58 20             	cmp    0x20(%eax),%ebx
-80104143:	75 eb                	jne    80104130 <wakeup+0x20>
-      p->state = RUNNABLE;
-80104145:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010414c:	83 e8 80             	sub    $0xffffff80,%eax
-8010414f:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-80104154:	75 e4                	jne    8010413a <wakeup+0x2a>
+80104d6a:	68 40 30 11 80       	push   $0x80113040
+80104d6f:	e8 9c 0a 00 00       	call   80105810 <acquire>
   wakeup1(chan);
+80104d74:	89 d8                	mov    %ebx,%eax
+80104d76:	e8 85 ec ff ff       	call   80103a00 <wakeup1>
+  release(&ptable.lock);
+80104d7b:	c7 45 08 40 30 11 80 	movl   $0x80113040,0x8(%ebp)
+}
+80104d82:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&ptable.lock);
-80104156:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
+80104d85:	83 c4 10             	add    $0x10,%esp
 }
-8010415d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104160:	c9                   	leave  
+80104d88:	c9                   	leave  
   release(&ptable.lock);
-80104161:	e9 3a 07 00 00       	jmp    801048a0 <release>
-80104166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010416d:	8d 76 00             	lea    0x0(%esi),%esi
+80104d89:	e9 22 0a 00 00       	jmp    801057b0 <release>
+80104d8e:	66 90                	xchg   %ax,%ax
 
-80104170 <kill>:
+80104d90 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104170:	55                   	push   %ebp
-80104171:	89 e5                	mov    %esp,%ebp
-80104173:	53                   	push   %ebx
-80104174:	83 ec 10             	sub    $0x10,%esp
-80104177:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104d90:	55                   	push   %ebp
+80104d91:	89 e5                	mov    %esp,%ebp
+80104d93:	56                   	push   %esi
+80104d94:	53                   	push   %ebx
+80104d95:	8b 75 08             	mov    0x8(%ebp),%esi
   struct proc *p;
 
   acquire(&ptable.lock);
-8010417a:	68 20 1d 11 80       	push   $0x80111d20
-8010417f:	e8 7c 07 00 00       	call   80104900 <acquire>
-80104184:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104187:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-8010418c:	eb 0c                	jmp    8010419a <kill+0x2a>
-8010418e:	66 90                	xchg   %ax,%ax
-80104190:	83 e8 80             	sub    $0xffffff80,%eax
-80104193:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-80104198:	74 36                	je     801041d0 <kill+0x60>
+80104d98:	bb 74 30 11 80       	mov    $0x80113074,%ebx
+  acquire(&ptable.lock);
+80104d9d:	83 ec 0c             	sub    $0xc,%esp
+80104da0:	68 40 30 11 80       	push   $0x80113040
+80104da5:	e8 66 0a 00 00       	call   80105810 <acquire>
+80104daa:	83 c4 10             	add    $0x10,%esp
+80104dad:	eb 0f                	jmp    80104dbe <kill+0x2e>
+80104daf:	90                   	nop
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104db0:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80104db6:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80104dbc:	74 32                	je     80104df0 <kill+0x60>
     if(p->pid == pid){
-8010419a:	39 58 10             	cmp    %ebx,0x10(%eax)
-8010419d:	75 f1                	jne    80104190 <kill+0x20>
+80104dbe:	39 73 10             	cmp    %esi,0x10(%ebx)
+80104dc1:	75 ed                	jne    80104db0 <kill+0x20>
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-8010419f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      if(p->state == SLEEPING){
+80104dc3:	83 7b 0c 02          	cmpl   $0x2,0xc(%ebx)
       p->killed = 1;
-801041a3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-      if(p->state == SLEEPING)
-801041aa:	75 07                	jne    801041b3 <kill+0x43>
+80104dc7:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%ebx)
+      if(p->state == SLEEPING){
+80104dce:	74 40                	je     80104e10 <kill+0x80>
         p->state = RUNNABLE;
-801041ac:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+
+        if(check)
+    	insertIntoPQ(p);
+    }
       release(&ptable.lock);
-801041b3:	83 ec 0c             	sub    $0xc,%esp
-801041b6:	68 20 1d 11 80       	push   $0x80111d20
-801041bb:	e8 e0 06 00 00       	call   801048a0 <release>
+80104dd0:	83 ec 0c             	sub    $0xc,%esp
+80104dd3:	68 40 30 11 80       	push   $0x80113040
+80104dd8:	e8 d3 09 00 00       	call   801057b0 <release>
       return 0;
+80104ddd:	83 c4 10             	add    $0x10,%esp
     }
   }
   release(&ptable.lock);
   return -1;
 }
-801041c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104de0:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return 0;
-801041c3:	83 c4 10             	add    $0x10,%esp
-801041c6:	31 c0                	xor    %eax,%eax
+80104de3:	31 c0                	xor    %eax,%eax
 }
-801041c8:	c9                   	leave  
-801041c9:	c3                   	ret    
-801041ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104de5:	5b                   	pop    %ebx
+80104de6:	5e                   	pop    %esi
+80104de7:	5d                   	pop    %ebp
+80104de8:	c3                   	ret    
+80104de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   release(&ptable.lock);
-801041d0:	83 ec 0c             	sub    $0xc,%esp
-801041d3:	68 20 1d 11 80       	push   $0x80111d20
-801041d8:	e8 c3 06 00 00       	call   801048a0 <release>
+80104df0:	83 ec 0c             	sub    $0xc,%esp
+80104df3:	68 40 30 11 80       	push   $0x80113040
+80104df8:	e8 b3 09 00 00       	call   801057b0 <release>
+  return -1;
+80104dfd:	83 c4 10             	add    $0x10,%esp
 }
-801041dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104e00:	8d 65 f8             	lea    -0x8(%ebp),%esp
   return -1;
-801041e0:	83 c4 10             	add    $0x10,%esp
-801041e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041e8:	c9                   	leave  
-801041e9:	c3                   	ret    
-801041ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104e08:	5b                   	pop    %ebx
+80104e09:	5e                   	pop    %esi
+80104e0a:	5d                   	pop    %ebp
+80104e0b:	c3                   	ret    
+80104e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+	acquire(&priorityQ.lock);
+80104e10:	83 ec 0c             	sub    $0xc,%esp
+        p->state = RUNNABLE;
+80104e13:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+	acquire(&priorityQ.lock);
+80104e1a:	68 04 2f 11 80       	push   $0x80112f04
+80104e1f:	e8 ec 09 00 00       	call   80105810 <acquire>
+	if(priorityQ.sze==NPROC){
+80104e24:	83 c4 10             	add    $0x10,%esp
+80104e27:	83 3d 00 2f 11 80 40 	cmpl   $0x40,0x80112f00
+80104e2e:	74 19                	je     80104e49 <kill+0xb9>
+		release(&priorityQ.lock);
+80104e30:	83 ec 0c             	sub    $0xc,%esp
+80104e33:	68 04 2f 11 80       	push   $0x80112f04
+80104e38:	e8 73 09 00 00       	call   801057b0 <release>
+		return 0;
+80104e3d:	89 d8                	mov    %ebx,%eax
+80104e3f:	e8 bc ea ff ff       	call   80103900 <insertIntoPQ.part.0>
+80104e44:	83 c4 10             	add    $0x10,%esp
+80104e47:	eb 87                	jmp    80104dd0 <kill+0x40>
+		release(&priorityQ.lock);
+80104e49:	83 ec 0c             	sub    $0xc,%esp
+80104e4c:	68 04 2f 11 80       	push   $0x80112f04
+80104e51:	e8 5a 09 00 00       	call   801057b0 <release>
+80104e56:	83 c4 10             	add    $0x10,%esp
+80104e59:	e9 72 ff ff ff       	jmp    80104dd0 <kill+0x40>
+80104e5e:	66 90                	xchg   %ax,%ax
 
-801041f0 <procdump>:
+80104e60 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041f0:	55                   	push   %ebp
-801041f1:	89 e5                	mov    %esp,%ebp
-801041f3:	57                   	push   %edi
-801041f4:	56                   	push   %esi
-801041f5:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041f8:	53                   	push   %ebx
-801041f9:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
-801041fe:	83 ec 3c             	sub    $0x3c,%esp
-80104201:	eb 24                	jmp    80104227 <procdump+0x37>
-80104203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104207:	90                   	nop
+80104e60:	55                   	push   %ebp
+80104e61:	89 e5                	mov    %esp,%ebp
+80104e63:	57                   	push   %edi
+80104e64:	56                   	push   %esi
+80104e65:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104e68:	53                   	push   %ebx
+80104e69:	bb e0 30 11 80       	mov    $0x801130e0,%ebx
+80104e6e:	83 ec 3c             	sub    $0x3c,%esp
+80104e71:	eb 27                	jmp    80104e9a <procdump+0x3a>
+80104e73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e77:	90                   	nop
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-80104208:	83 ec 0c             	sub    $0xc,%esp
-8010420b:	68 87 7f 10 80       	push   $0x80107f87
-80104210:	e8 8b c4 ff ff       	call   801006a0 <cprintf>
-80104215:	83 c4 10             	add    $0x10,%esp
+80104e78:	83 ec 0c             	sub    $0xc,%esp
+80104e7b:	68 7f 8f 10 80       	push   $0x80108f7f
+80104e80:	e8 1b b8 ff ff       	call   801006a0 <cprintf>
+80104e85:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104218:	83 eb 80             	sub    $0xffffff80,%ebx
-8010421b:	81 fb c0 3d 11 80    	cmp    $0x80113dc0,%ebx
-80104221:	0f 84 81 00 00 00    	je     801042a8 <procdump+0xb8>
+80104e88:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80104e8e:	81 fb e0 53 11 80    	cmp    $0x801153e0,%ebx
+80104e94:	0f 84 7e 00 00 00    	je     80104f18 <procdump+0xb8>
     if(p->state == UNUSED)
-80104227:	8b 43 a0             	mov    -0x60(%ebx),%eax
-8010422a:	85 c0                	test   %eax,%eax
-8010422c:	74 ea                	je     80104218 <procdump+0x28>
+80104e9a:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104e9d:	85 c0                	test   %eax,%eax
+80104e9f:	74 e7                	je     80104e88 <procdump+0x28>
       state = "???";
-8010422e:	ba eb 7b 10 80       	mov    $0x80107beb,%edx
+80104ea1:	ba 20 8c 10 80       	mov    $0x80108c20,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-80104233:	83 f8 05             	cmp    $0x5,%eax
-80104236:	77 11                	ja     80104249 <procdump+0x59>
-80104238:	8b 14 85 5c 7c 10 80 	mov    -0x7fef83a4(,%eax,4),%edx
+80104ea6:	83 f8 05             	cmp    $0x5,%eax
+80104ea9:	77 11                	ja     80104ebc <procdump+0x5c>
+80104eab:	8b 14 85 80 8c 10 80 	mov    -0x7fef7380(,%eax,4),%edx
       state = "???";
-8010423f:	b8 eb 7b 10 80       	mov    $0x80107beb,%eax
-80104244:	85 d2                	test   %edx,%edx
-80104246:	0f 44 d0             	cmove  %eax,%edx
+80104eb2:	b8 20 8c 10 80       	mov    $0x80108c20,%eax
+80104eb7:	85 d2                	test   %edx,%edx
+80104eb9:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104249:	53                   	push   %ebx
-8010424a:	52                   	push   %edx
-8010424b:	ff 73 a4             	push   -0x5c(%ebx)
-8010424e:	68 ef 7b 10 80       	push   $0x80107bef
-80104253:	e8 48 c4 ff ff       	call   801006a0 <cprintf>
+80104ebc:	53                   	push   %ebx
+80104ebd:	52                   	push   %edx
+80104ebe:	ff 73 a4             	push   -0x5c(%ebx)
+80104ec1:	68 24 8c 10 80       	push   $0x80108c24
+80104ec6:	e8 d5 b7 ff ff       	call   801006a0 <cprintf>
     if(p->state == SLEEPING){
-80104258:	83 c4 10             	add    $0x10,%esp
-8010425b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-8010425f:	75 a7                	jne    80104208 <procdump+0x18>
+80104ecb:	83 c4 10             	add    $0x10,%esp
+80104ece:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+80104ed2:	75 a4                	jne    80104e78 <procdump+0x18>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104261:	83 ec 08             	sub    $0x8,%esp
-80104264:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104267:	8d 7d c0             	lea    -0x40(%ebp),%edi
-8010426a:	50                   	push   %eax
-8010426b:	8b 43 b0             	mov    -0x50(%ebx),%eax
-8010426e:	8b 40 0c             	mov    0xc(%eax),%eax
-80104271:	83 c0 08             	add    $0x8,%eax
-80104274:	50                   	push   %eax
-80104275:	e8 d6 04 00 00       	call   80104750 <getcallerpcs>
+80104ed4:	83 ec 08             	sub    $0x8,%esp
+80104ed7:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104eda:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104edd:	50                   	push   %eax
+80104ede:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104ee1:	8b 40 0c             	mov    0xc(%eax),%eax
+80104ee4:	83 c0 08             	add    $0x8,%eax
+80104ee7:	50                   	push   %eax
+80104ee8:	e8 73 07 00 00       	call   80105660 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010427a:	83 c4 10             	add    $0x10,%esp
-8010427d:	8d 76 00             	lea    0x0(%esi),%esi
-80104280:	8b 17                	mov    (%edi),%edx
-80104282:	85 d2                	test   %edx,%edx
-80104284:	74 82                	je     80104208 <procdump+0x18>
+80104eed:	83 c4 10             	add    $0x10,%esp
+80104ef0:	8b 17                	mov    (%edi),%edx
+80104ef2:	85 d2                	test   %edx,%edx
+80104ef4:	74 82                	je     80104e78 <procdump+0x18>
         cprintf(" %p", pc[i]);
-80104286:	83 ec 08             	sub    $0x8,%esp
+80104ef6:	83 ec 08             	sub    $0x8,%esp
       for(i=0; i<10 && pc[i] != 0; i++)
-80104289:	83 c7 04             	add    $0x4,%edi
+80104ef9:	83 c7 04             	add    $0x4,%edi
         cprintf(" %p", pc[i]);
-8010428c:	52                   	push   %edx
-8010428d:	68 41 76 10 80       	push   $0x80107641
-80104292:	e8 09 c4 ff ff       	call   801006a0 <cprintf>
+80104efc:	52                   	push   %edx
+80104efd:	68 61 86 10 80       	push   $0x80108661
+80104f02:	e8 99 b7 ff ff       	call   801006a0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104297:	83 c4 10             	add    $0x10,%esp
-8010429a:	39 fe                	cmp    %edi,%esi
-8010429c:	75 e2                	jne    80104280 <procdump+0x90>
-8010429e:	e9 65 ff ff ff       	jmp    80104208 <procdump+0x18>
-801042a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801042a7:	90                   	nop
-  }
-}
-801042a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801042ab:	5b                   	pop    %ebx
-801042ac:	5e                   	pop    %esi
-801042ad:	5f                   	pop    %edi
-801042ae:	5d                   	pop    %ebp
-801042af:	c3                   	ret    
-
-801042b0 <thread_create>:
+80104f07:	83 c4 10             	add    $0x10,%esp
+80104f0a:	39 fe                	cmp    %edi,%esi
+80104f0c:	75 e2                	jne    80104ef0 <procdump+0x90>
+80104f0e:	e9 65 ff ff ff       	jmp    80104e78 <procdump+0x18>
+80104f13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f17:	90                   	nop
+  }
+}
+80104f18:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f1b:	5b                   	pop    %ebx
+80104f1c:	5e                   	pop    %esi
+80104f1d:	5f                   	pop    %edi
+80104f1e:	5d                   	pop    %ebp
+80104f1f:	c3                   	ret    
 
-// implemented by us
+80104f20 <thread_create>:
 
 int thread_create(void (*fcn)(void *),void *arg,void* stack){
-801042b0:	55                   	push   %ebp
-801042b1:	89 e5                	mov    %esp,%ebp
-801042b3:	57                   	push   %edi
-801042b4:	56                   	push   %esi
-801042b5:	53                   	push   %ebx
-801042b6:	83 ec 1c             	sub    $0x1c,%esp
-  if((uint)stack==0) // if no memory is allocated to the stack return -1
-801042b9:	8b 45 10             	mov    0x10(%ebp),%eax
-801042bc:	85 c0                	test   %eax,%eax
-801042be:	0f 84 11 01 00 00    	je     801043d5 <thread_create+0x125>
+80104f20:	55                   	push   %ebp
+80104f21:	89 e5                	mov    %esp,%ebp
+80104f23:	57                   	push   %edi
+80104f24:	56                   	push   %esi
+80104f25:	53                   	push   %ebx
+80104f26:	83 ec 1c             	sub    $0x1c,%esp
+  if((uint)stack==0)
+80104f29:	8b 45 10             	mov    0x10(%ebp),%eax
+80104f2c:	85 c0                	test   %eax,%eax
+80104f2e:	0f 84 11 01 00 00    	je     80105045 <thread_create+0x125>
   pushcli();
-801042c4:	e8 e7 04 00 00       	call   801047b0 <pushcli>
+80104f34:	e8 87 07 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-801042c9:	e8 62 f6 ff ff       	call   80103930 <mycpu>
+80104f39:	e8 f2 f2 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-801042ce:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
-801042d4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80104f3e:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
+80104f44:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   popcli();
-801042d7:	e8 24 05 00 00       	call   80104800 <popcli>
+80104f47:	e8 c4 07 00 00       	call   80105710 <popcli>
   }
-  int i,pid;  // pid is the process id 
-  struct proc *newproc;			//new process / child process
-  struct proc *current_proc = myproc();  //Current process in which thread is being created
-
-  if((newproc=allocproc())==0)return -1;  // allocating a new process to child if not successful return -1
-801042dc:	e8 0f f5 ff ff       	call   801037f0 <allocproc>
-801042e1:	89 c3                	mov    %eax,%ebx
-801042e3:	85 c0                	test   %eax,%eax
-801042e5:	0f 84 ea 00 00 00    	je     801043d5 <thread_create+0x125>
-  newproc->pgdir = current_proc->pgdir;        // making sure both have same page directory
-801042eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  newproc->sz = current_proc->sz;              // making sure both have same size
-  newproc->parent = current_proc;              // pointing parent to child
-  *newproc->tf = *current_proc->tf;            // same trap frame
-801042ee:	8b 7b 18             	mov    0x18(%ebx),%edi
-801042f1:	b9 13 00 00 00       	mov    $0x13,%ecx
-  newproc->pgdir = current_proc->pgdir;        // making sure both have same page directory
-801042f6:	8b 42 04             	mov    0x4(%edx),%eax
-801042f9:	89 43 04             	mov    %eax,0x4(%ebx)
-  newproc->sz = current_proc->sz;              // making sure both have same size
-801042fc:	8b 02                	mov    (%edx),%eax
-  newproc->parent = current_proc;              // pointing parent to child
-801042fe:	89 53 14             	mov    %edx,0x14(%ebx)
-  newproc->sz = current_proc->sz;              // making sure both have same size
-80104301:	89 03                	mov    %eax,(%ebx)
-  *newproc->tf = *current_proc->tf;            // same trap frame
-80104303:	8b 72 18             	mov    0x18(%edx),%esi
-80104306:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-
-  newproc->isThread = 1;                  // telling new process it is a thread
-80104308:	c7 43 7c 01 00 00 00 	movl   $0x1,0x7c(%ebx)
-
-  newproc->tf->eax = 0;                   // when new process gets finished 0 will be returned
-
-  newproc->tf->eip = (int)fcn;            // this is the function on which thread will work
-8010430f:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  newproc->tf->esp = (int) stack + 4096;  
-  newproc->tf->esp -= 4;
-  *((int*)(newproc->tf->esp)) = (int) arg;
-  newproc->tf->esp-=4;
-  *((int*)(newproc->tf->esp)) = 0xffffffff;
-  for(i=0;i<NOFILE;++i)
-80104312:	31 f6                	xor    %esi,%esi
-80104314:	89 d7                	mov    %edx,%edi
-  newproc->tf->eax = 0;                   // when new process gets finished 0 will be returned
-80104316:	8b 43 18             	mov    0x18(%ebx),%eax
-80104319:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
-  newproc->tf->eip = (int)fcn;            // this is the function on which thread will work
-80104320:	8b 43 18             	mov    0x18(%ebx),%eax
-80104323:	89 48 38             	mov    %ecx,0x38(%eax)
-  newproc->tf->esp = (int) stack + 4096;  
-80104326:	8b 45 10             	mov    0x10(%ebp),%eax
-80104329:	8b 4b 18             	mov    0x18(%ebx),%ecx
-8010432c:	05 00 10 00 00       	add    $0x1000,%eax
-80104331:	89 41 44             	mov    %eax,0x44(%ecx)
-  newproc->tf->esp -= 4;
-80104334:	8b 43 18             	mov    0x18(%ebx),%eax
-  *((int*)(newproc->tf->esp)) = (int) arg;
-80104337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  newproc->tf->esp -= 4;
-8010433a:	83 68 44 04          	subl   $0x4,0x44(%eax)
-  *((int*)(newproc->tf->esp)) = (int) arg;
-8010433e:	8b 43 18             	mov    0x18(%ebx),%eax
-80104341:	8b 40 44             	mov    0x44(%eax),%eax
-80104344:	89 08                	mov    %ecx,(%eax)
-  newproc->tf->esp-=4;
-80104346:	8b 43 18             	mov    0x18(%ebx),%eax
-80104349:	83 68 44 04          	subl   $0x4,0x44(%eax)
-  *((int*)(newproc->tf->esp)) = 0xffffffff;
-8010434d:	8b 43 18             	mov    0x18(%ebx),%eax
-80104350:	8b 40 44             	mov    0x44(%eax),%eax
-80104353:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
-  for(i=0;i<NOFILE;++i)
-80104359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  int i,pid; 
+  struct proc *np;  //Create this pointer to alloacate to the new process created by the thread_create() system call
+  struct proc *curproc = myproc();  //Gets referemce to the Current process in which thread is being created
+
+  if((np=allocproc())==0)return -1; //If the process could not be created return -1  
+80104f4c:	e8 5f e8 ff ff       	call   801037b0 <allocproc>
+80104f51:	89 c3                	mov    %eax,%ebx
+80104f53:	85 c0                	test   %eax,%eax
+80104f55:	0f 84 ea 00 00 00    	je     80105045 <thread_create+0x125>
+
+
+  //The page directory,size,parent process and memory allocated to this process is same as the current process
+  np->pgdir = curproc->pgdir;
+80104f5b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  np->sz = curproc->sz;
+  np->parent = curproc;
+  *np->tf = *curproc->tf;   //Equates all variables in the current processs to the new thread...basically this will be the set of all shared variables
+80104f5e:	8b 7b 18             	mov    0x18(%ebx),%edi
+80104f61:	b9 13 00 00 00       	mov    $0x13,%ecx
+  np->pgdir = curproc->pgdir;
+80104f66:	8b 42 04             	mov    0x4(%edx),%eax
+80104f69:	89 43 04             	mov    %eax,0x4(%ebx)
+  np->sz = curproc->sz;
+80104f6c:	8b 02                	mov    (%edx),%eax
+  np->parent = curproc;
+80104f6e:	89 53 14             	mov    %edx,0x14(%ebx)
+  np->sz = curproc->sz;
+80104f71:	89 03                	mov    %eax,(%ebx)
+  *np->tf = *curproc->tf;   //Equates all variables in the current processs to the new thread...basically this will be the set of all shared variables
+80104f73:	8b 72 18             	mov    0x18(%edx),%esi
+80104f76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+
+  np->isThread = 1;   //Is this process a thread?...Used in thread join later
+80104f78:	c7 43 7c 01 00 00 00 	movl   $0x1,0x7c(%ebx)
+
+  np->tf->eax = 0;
+
+  np->tf->eip = (int)fcn;   //Sets the instruction pointer to the beginning of the reference to the function call reference (fcn)
+80104f7f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+
+
+  /*Since the files of a process and its threaded process is same..so we check all files to see if it is opened in the parent process
+  If yes then we also open them in the threaded process. This is done using the below for loop*/
+
+  for(i=0;i<NOFILE;++i)   //NOFILE denotes the total number of files opened in the kernel
+80104f82:	31 f6                	xor    %esi,%esi
+80104f84:	89 d7                	mov    %edx,%edi
+  np->tf->eax = 0;
+80104f86:	8b 43 18             	mov    0x18(%ebx),%eax
+80104f89:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+  np->tf->eip = (int)fcn;   //Sets the instruction pointer to the beginning of the reference to the function call reference (fcn)
+80104f90:	8b 43 18             	mov    0x18(%ebx),%eax
+80104f93:	89 48 38             	mov    %ecx,0x38(%eax)
+  np->tf->esp = (int) stack + 4096;   //Allocates 4096 bytes of stack memory to the thread
+80104f96:	8b 45 10             	mov    0x10(%ebp),%eax
+80104f99:	8b 4b 18             	mov    0x18(%ebx),%ecx
+80104f9c:	05 00 10 00 00       	add    $0x1000,%eax
+80104fa1:	89 41 44             	mov    %eax,0x44(%ecx)
+  np->tf->esp -= 4;  //Decrement stack pointer to store the local variable arg
+80104fa4:	8b 43 18             	mov    0x18(%ebx),%eax
+  *((int*)(np->tf->esp)) = (int) arg;  //Store the local variable arg
+80104fa7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  np->tf->esp -= 4;  //Decrement stack pointer to store the local variable arg
+80104faa:	83 68 44 04          	subl   $0x4,0x44(%eax)
+  *((int*)(np->tf->esp)) = (int) arg;  //Store the local variable arg
+80104fae:	8b 43 18             	mov    0x18(%ebx),%eax
+80104fb1:	8b 40 44             	mov    0x44(%eax),%eax
+80104fb4:	89 08                	mov    %ecx,(%eax)
+  np->tf->esp-=4;  //Decrement the stack pointer to store the initial Program Counter value
+80104fb6:	8b 43 18             	mov    0x18(%ebx),%eax
+80104fb9:	83 68 44 04          	subl   $0x4,0x44(%eax)
+  *((int*)(np->tf->esp)) = 0xffffffff;  //Store the initial program counter value
+80104fbd:	8b 43 18             	mov    0x18(%ebx),%eax
+80104fc0:	8b 40 44             	mov    0x44(%eax),%eax
+80104fc3:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
+  for(i=0;i<NOFILE;++i)   //NOFILE denotes the total number of files opened in the kernel
+80104fc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   {
-  	if(current_proc->ofile[i])
-80104360:	8b 44 b7 28          	mov    0x28(%edi,%esi,4),%eax
-80104364:	85 c0                	test   %eax,%eax
-80104366:	74 10                	je     80104378 <thread_create+0xc8>
+  	if(curproc->ofile[i])   //If the file is opened in the parent process
+80104fd0:	8b 44 b7 28          	mov    0x28(%edi,%esi,4),%eax
+80104fd4:	85 c0                	test   %eax,%eax
+80104fd6:	74 10                	je     80104fe8 <thread_create+0xc8>
 	{
-		newproc->ofile[i] = filedup(current_proc->ofile[i]); // copying all opened files from current process to new process
-80104368:	83 ec 0c             	sub    $0xc,%esp
-8010436b:	50                   	push   %eax
-8010436c:	e8 2f cb ff ff       	call   80100ea0 <filedup>
-80104371:	83 c4 10             	add    $0x10,%esp
-80104374:	89 44 b3 28          	mov    %eax,0x28(%ebx,%esi,4)
-  for(i=0;i<NOFILE;++i)
-80104378:	83 c6 01             	add    $0x1,%esi
-8010437b:	83 fe 10             	cmp    $0x10,%esi
-8010437e:	75 e0                	jne    80104360 <thread_create+0xb0>
+		np->ofile[i] = filedup(curproc->ofile[i]);   //open it in the newly created threaded process
+80104fd8:	83 ec 0c             	sub    $0xc,%esp
+80104fdb:	50                   	push   %eax
+80104fdc:	e8 bf be ff ff       	call   80100ea0 <filedup>
+80104fe1:	83 c4 10             	add    $0x10,%esp
+80104fe4:	89 44 b3 28          	mov    %eax,0x28(%ebx,%esi,4)
+  for(i=0;i<NOFILE;++i)   //NOFILE denotes the total number of files opened in the kernel
+80104fe8:	83 c6 01             	add    $0x1,%esi
+80104feb:	83 fe 10             	cmp    $0x10,%esi
+80104fee:	75 e0                	jne    80104fd0 <thread_create+0xb0>
 	}	
   }	
-  newproc->cwd = idup(current_proc->cwd);
-80104380:	83 ec 0c             	sub    $0xc,%esp
-80104383:	ff 77 68             	push   0x68(%edi)
-80104386:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-80104389:	e8 c2 d3 ff ff       	call   80101750 <idup>
-  safestrcpy(newproc->name,current_proc->name,sizeof(current_proc->name));
-8010438e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80104391:	83 c4 0c             	add    $0xc,%esp
-  newproc->cwd = idup(current_proc->cwd);
-80104394:	89 43 68             	mov    %eax,0x68(%ebx)
-  safestrcpy(newproc->name,current_proc->name,sizeof(current_proc->name));
-80104397:	8d 43 6c             	lea    0x6c(%ebx),%eax
-8010439a:	83 c2 6c             	add    $0x6c,%edx
-8010439d:	6a 10                	push   $0x10
-8010439f:	52                   	push   %edx
-801043a0:	50                   	push   %eax
-801043a1:	e8 da 07 00 00       	call   80104b80 <safestrcpy>
-  pid = newproc->pid;
-801043a6:	8b 73 10             	mov    0x10(%ebx),%esi
-  acquire(&ptable.lock);
-801043a9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-801043b0:	e8 4b 05 00 00       	call   80104900 <acquire>
-  newproc->state = RUNNABLE;
-801043b5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
-  release(&ptable.lock);
-801043bc:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-801043c3:	e8 d8 04 00 00       	call   801048a0 <release>
-  return pid;	
-801043c8:	83 c4 10             	add    $0x10,%esp
-}
-801043cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043ce:	89 f0                	mov    %esi,%eax
-801043d0:	5b                   	pop    %ebx
-801043d1:	5e                   	pop    %esi
-801043d2:	5f                   	pop    %edi
-801043d3:	5d                   	pop    %ebp
-801043d4:	c3                   	ret    
-    return -1;
-801043d5:	be ff ff ff ff       	mov    $0xffffffff,%esi
-801043da:	eb ef                	jmp    801043cb <thread_create+0x11b>
-801043dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+	np->cwd = idup(curproc->cwd);  //Equates directory of parent and threaded process as they are same
+80104ff0:	83 ec 0c             	sub    $0xc,%esp
+80104ff3:	ff 77 68             	push   0x68(%edi)
+80104ff6:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80104ff9:	e8 52 c7 ff ff       	call   80101750 <idup>
+	safestrcpy(np->name,curproc->name,sizeof(curproc->name));
+80104ffe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105001:	83 c4 0c             	add    $0xc,%esp
+	np->cwd = idup(curproc->cwd);  //Equates directory of parent and threaded process as they are same
+80105004:	89 43 68             	mov    %eax,0x68(%ebx)
+	safestrcpy(np->name,curproc->name,sizeof(curproc->name));
+80105007:	8d 43 6c             	lea    0x6c(%ebx),%eax
+8010500a:	83 c2 6c             	add    $0x6c,%edx
+8010500d:	6a 10                	push   $0x10
+8010500f:	52                   	push   %edx
+80105010:	50                   	push   %eax
+80105011:	e8 7a 0a 00 00       	call   80105a90 <safestrcpy>
+	pid = np->pid;  //We will return the value in the end...basically it is the id os the newly created thread
+80105016:	8b 73 10             	mov    0x10(%ebx),%esi
+	acquire(&ptable.lock);
+80105019:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+80105020:	e8 eb 07 00 00       	call   80105810 <acquire>
+	np->state = RUNNABLE;
+80105025:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+	release(&ptable.lock);
+8010502c:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+80105033:	e8 78 07 00 00       	call   801057b0 <release>
+	return pid;	
+80105038:	83 c4 10             	add    $0x10,%esp
+}
+8010503b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010503e:	89 f0                	mov    %esi,%eax
+80105040:	5b                   	pop    %ebx
+80105041:	5e                   	pop    %esi
+80105042:	5f                   	pop    %edi
+80105043:	5d                   	pop    %ebp
+80105044:	c3                   	ret    
+    return -1;
+80105045:	be ff ff ff ff       	mov    $0xffffffff,%esi
+8010504a:	eb ef                	jmp    8010503b <thread_create+0x11b>
+8010504c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801043e0 <thread_join>:
+80105050 <thread_join>:
 
 int thread_join(void){
-801043e0:	55                   	push   %ebp
-801043e1:	89 e5                	mov    %esp,%ebp
-801043e3:	56                   	push   %esi
-801043e4:	53                   	push   %ebx
+80105050:	55                   	push   %ebp
+80105051:	89 e5                	mov    %esp,%ebp
+80105053:	56                   	push   %esi
+80105054:	53                   	push   %ebx
   pushcli();
-801043e5:	e8 c6 03 00 00       	call   801047b0 <pushcli>
+80105055:	e8 66 06 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-801043ea:	e8 41 f5 ff ff       	call   80103930 <mycpu>
+8010505a:	e8 d1 f1 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-801043ef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010505f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-801043f5:	e8 06 04 00 00       	call   80104800 <popcli>
-	struct proc *i;
-	int havekids; // havekids is the boolean value to check if the thread has any child or not 
-	int pid;
-	struct proc *current_proc = myproc(); //Current process in which thread is being created
-
-	acquire(&ptable.lock);
-801043fa:	83 ec 0c             	sub    $0xc,%esp
-801043fd:	68 20 1d 11 80       	push   $0x80111d20
-80104402:	e8 f9 04 00 00       	call   80104900 <acquire>
-80104407:	83 c4 10             	add    $0x10,%esp
+80105065:	e8 a6 06 00 00       	call   80105710 <popcli>
+	struct proc *p; //Process pointer for looping over all the proccesses
+	int havekids, pid;  //havekids denotes whether there are any child processes for the current process
+	struct proc *curproc = myproc();  //Pointer to the current process
+
+	acquire(&ptable.lock);  //Acquire a lock and choose a process to kill in the below while loops
+8010506a:	83 ec 0c             	sub    $0xc,%esp
+8010506d:	68 40 30 11 80       	push   $0x80113040
+80105072:	e8 99 07 00 00       	call   80105810 <acquire>
+80105077:	83 c4 10             	add    $0x10,%esp
 	while(1){
-		havekids = 0;  
-8010440a:	31 d2                	xor    %edx,%edx
-		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
-8010440c:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-80104411:	eb 0f                	jmp    80104422 <thread_join+0x42>
-80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104417:	90                   	nop
-80104418:	83 e8 80             	sub    $0xffffff80,%eax
-8010441b:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-80104420:	74 26                	je     80104448 <thread_join+0x68>
-			if(i->isThread!=0 && i->parent==current_proc){ //if the process is a thread and child of the current process
-80104422:	8b 48 7c             	mov    0x7c(%eax),%ecx
-80104425:	85 c9                	test   %ecx,%ecx
-80104427:	74 ef                	je     80104418 <thread_join+0x38>
-80104429:	39 58 14             	cmp    %ebx,0x14(%eax)
-8010442c:	75 ea                	jne    80104418 <thread_join+0x38>
-				havekids = 1;
-				if(i->state==ZOMBIE){ //if it's in zombie state then re-initialiaze to make it available to be  used by other processes and return 
-8010442e:	83 78 0c 05          	cmpl   $0x5,0xc(%eax)
-80104432:	74 50                	je     80104484 <thread_join+0xa4>
-		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
-80104434:	83 e8 80             	sub    $0xffffff80,%eax
-				havekids = 1;
-80104437:	ba 01 00 00 00       	mov    $0x1,%edx
-		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
-8010443c:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-80104441:	75 df                	jne    80104422 <thread_join+0x42>
-80104443:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104447:	90                   	nop
-					return pid;
-				}
+		havekids = 0;
+8010507a:	31 d2                	xor    %edx,%edx
+    //Continue looping through all process until you find a process which is a child of the current process and a thread we created
+		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
+8010507c:	b8 74 30 11 80       	mov    $0x80113074,%eax
+80105081:	eb 11                	jmp    80105094 <thread_join+0x44>
+80105083:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105087:	90                   	nop
+80105088:	05 8c 00 00 00       	add    $0x8c,%eax
+8010508d:	3d 74 53 11 80       	cmp    $0x80115374,%eax
+80105092:	74 23                	je     801050b7 <thread_join+0x67>
+			if(p->isThread==0||p->parent!=curproc)
+80105094:	8b 48 7c             	mov    0x7c(%eax),%ecx
+80105097:	85 c9                	test   %ecx,%ecx
+80105099:	74 ed                	je     80105088 <thread_join+0x38>
+8010509b:	39 58 14             	cmp    %ebx,0x14(%eax)
+8010509e:	75 e8                	jne    80105088 <thread_join+0x38>
+			{
+				continue;
 			}	
-			
+			havekids = 1; /*We found a thread to kill now we execute that by setting the state to zombie and then set
+      other attributes to NULL/0  */
+			if(p->state==ZOMBIE){
+801050a0:	83 78 0c 05          	cmpl   $0x5,0xc(%eax)
+801050a4:	74 5a                	je     80105100 <thread_join+0xb0>
+		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
+801050a6:	05 8c 00 00 00       	add    $0x8c,%eax
+			havekids = 1; /*We found a thread to kill now we execute that by setting the state to zombie and then set
+801050ab:	ba 01 00 00 00       	mov    $0x1,%edx
+		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
+801050b0:	3d 74 53 11 80       	cmp    $0x80115374,%eax
+801050b5:	75 dd                	jne    80105094 <thread_join+0x44>
+				release(&ptable.lock);
+				return pid; //We return the process id of the terminated thread
+			}
 		}
-		if(!havekids||current_proc->killed){// if it doesn't have any child or the current process itself is aborted then return -1
-80104448:	85 d2                	test   %edx,%edx
-8010444a:	74 7b                	je     801044c7 <thread_join+0xe7>
-8010444c:	8b 43 24             	mov    0x24(%ebx),%eax
-8010444f:	85 c0                	test   %eax,%eax
-80104451:	75 74                	jne    801044c7 <thread_join+0xe7>
+    //If the current process terminates or the process does not have any kids we return -1 and release the aquired lock
+		if(!havekids||curproc->killed){
+801050b7:	85 d2                	test   %edx,%edx
+801050b9:	0f 84 84 00 00 00    	je     80105143 <thread_join+0xf3>
+801050bf:	8b 43 24             	mov    0x24(%ebx),%eax
+801050c2:	85 c0                	test   %eax,%eax
+801050c4:	75 7d                	jne    80105143 <thread_join+0xf3>
   pushcli();
-80104453:	e8 58 03 00 00       	call   801047b0 <pushcli>
+801050c6:	e8 f5 05 00 00       	call   801056c0 <pushcli>
   c = mycpu();
-80104458:	e8 d3 f4 ff ff       	call   80103930 <mycpu>
+801050cb:	e8 60 f1 ff ff       	call   80104230 <mycpu>
   p = c->proc;
-8010445d:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+801050d0:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80104463:	e8 98 03 00 00       	call   80104800 <popcli>
+801050d6:	e8 35 06 00 00       	call   80105710 <popcli>
   if(p == 0)
-80104468:	85 f6                	test   %esi,%esi
-8010446a:	74 79                	je     801044e5 <thread_join+0x105>
+801050db:	85 f6                	test   %esi,%esi
+801050dd:	74 7b                	je     8010515a <thread_join+0x10a>
   p->chan = chan;
-8010446c:	89 5e 20             	mov    %ebx,0x20(%esi)
+801050df:	89 5e 20             	mov    %ebx,0x20(%esi)
   p->state = SLEEPING;
-8010446f:	c7 46 0c 02 00 00 00 	movl   $0x2,0xc(%esi)
+801050e2:	c7 46 0c 02 00 00 00 	movl   $0x2,0xc(%esi)
   sched();
-80104476:	e8 95 f8 ff ff       	call   80103d10 <sched>
+801050e9:	e8 42 f7 ff ff       	call   80104830 <sched>
   p->chan = 0;
-8010447b:	c7 46 20 00 00 00 00 	movl   $0x0,0x20(%esi)
+801050ee:	c7 46 20 00 00 00 00 	movl   $0x0,0x20(%esi)
 }
-80104482:	eb 86                	jmp    8010440a <thread_join+0x2a>
-					release(&ptable.lock);
-80104484:	83 ec 0c             	sub    $0xc,%esp
-					pid = i->pid;
-80104487:	8b 58 10             	mov    0x10(%eax),%ebx
-					i->name[0] = 0;
-8010448a:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
-					i->kstack = 0;
-8010448e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-					i->pid = 0;
-80104495:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
-					i->parent = 0;
-8010449c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
-					i->killed = 0;
-801044a3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
-					i->state = UNUSED;
-801044aa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-					release(&ptable.lock);
-801044b1:	68 20 1d 11 80       	push   $0x80111d20
-801044b6:	e8 e5 03 00 00       	call   801048a0 <release>
-					return pid;
-801044bb:	83 c4 10             	add    $0x10,%esp
+801050f5:	eb 83                	jmp    8010507a <thread_join+0x2a>
+801050f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050fe:	66 90                	xchg   %ax,%ax
+				release(&ptable.lock);
+80105100:	83 ec 0c             	sub    $0xc,%esp
+				pid = p->pid;
+80105103:	8b 58 10             	mov    0x10(%eax),%ebx
+				p->name[0] = 0;
+80105106:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
+				p->kstack = 0;
+8010510a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+				p->pid = 0;
+80105111:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+				p->parent = 0;
+80105118:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+				p->killed = 0;
+8010511f:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
+				p->state = UNUSED;
+80105126:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+				release(&ptable.lock);
+8010512d:	68 40 30 11 80       	push   $0x80113040
+80105132:	e8 79 06 00 00       	call   801057b0 <release>
+				return pid; //We return the process id of the terminated thread
+80105137:	83 c4 10             	add    $0x10,%esp
 			return -1;
 		}
-		sleep(current_proc,&ptable.lock); // wait for any thread to complete its execution
+		sleep(curproc,&ptable.lock);
 	}
 
 }
-801044be:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801044c1:	89 d8                	mov    %ebx,%eax
-801044c3:	5b                   	pop    %ebx
-801044c4:	5e                   	pop    %esi
-801044c5:	5d                   	pop    %ebp
-801044c6:	c3                   	ret    
+8010513a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010513d:	89 d8                	mov    %ebx,%eax
+8010513f:	5b                   	pop    %ebx
+80105140:	5e                   	pop    %esi
+80105141:	5d                   	pop    %ebp
+80105142:	c3                   	ret    
 			release(&ptable.lock);
-801044c7:	83 ec 0c             	sub    $0xc,%esp
+80105143:	83 ec 0c             	sub    $0xc,%esp
 			return -1;
-801044ca:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105146:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
 			release(&ptable.lock);
-801044cf:	68 20 1d 11 80       	push   $0x80111d20
-801044d4:	e8 c7 03 00 00       	call   801048a0 <release>
+8010514b:	68 40 30 11 80       	push   $0x80113040
+80105150:	e8 5b 06 00 00       	call   801057b0 <release>
 			return -1;
-801044d9:	83 c4 10             	add    $0x10,%esp
-}
-801044dc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801044df:	89 d8                	mov    %ebx,%eax
-801044e1:	5b                   	pop    %ebx
-801044e2:	5e                   	pop    %esi
-801044e3:	5d                   	pop    %ebp
-801044e4:	c3                   	ret    
+80105155:	83 c4 10             	add    $0x10,%esp
+80105158:	eb e0                	jmp    8010513a <thread_join+0xea>
     panic("sleep");
-801044e5:	83 ec 0c             	sub    $0xc,%esp
-801044e8:	68 d4 7b 10 80       	push   $0x80107bd4
-801044ed:	e8 8e be ff ff       	call   80100380 <panic>
-801044f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010515a:	83 ec 0c             	sub    $0xc,%esp
+8010515d:	68 09 8c 10 80       	push   $0x80108c09
+80105162:	e8 19 b2 ff ff       	call   80100380 <panic>
+80105167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010516e:	66 90                	xchg   %ax,%ax
 
-80104500 <thread_exit>:
+80105170 <thread_exit>:
 
 
 int thread_exit(){
-80104500:	55                   	push   %ebp
-80104501:	89 e5                	mov    %esp,%ebp
-80104503:	57                   	push   %edi
-80104504:	56                   	push   %esi
-80104505:	53                   	push   %ebx
-80104506:	83 ec 0c             	sub    $0xc,%esp
-	struct proc *current_proc = myproc();
-80104509:	e8 a2 f4 ff ff       	call   801039b0 <myproc>
-	struct proc *i;
-	int file;
-
-	if(current_proc==initproc)
-8010450e:	39 05 54 3d 11 80    	cmp    %eax,0x80113d54
-80104514:	0f 84 cd 00 00 00    	je     801045e7 <thread_exit+0xe7>
-8010451a:	89 c3                	mov    %eax,%ebx
-8010451c:	8d 70 28             	lea    0x28(%eax),%esi
-8010451f:	8d 78 68             	lea    0x68(%eax),%edi
-80104522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-	{
-		panic("exit init");
+80105170:	55                   	push   %ebp
+80105171:	89 e5                	mov    %esp,%ebp
+80105173:	57                   	push   %edi
+80105174:	56                   	push   %esi
+80105175:	53                   	push   %ebx
+80105176:	83 ec 0c             	sub    $0xc,%esp
+	struct proc *curproc = myproc();  //reference to the process which we have to kill
+80105179:	e8 32 f1 ff ff       	call   801042b0 <myproc>
+	struct proc *p;     //Used in looping through the processes 
+	int fd; 
+
+	if(curproc==initproc)
+8010517e:	39 05 74 53 11 80    	cmp    %eax,0x80115374
+80105184:	0f 84 bf 00 00 00    	je     80105249 <thread_exit+0xd9>
+8010518a:	89 c6                	mov    %eax,%esi
+8010518c:	8d 58 28             	lea    0x28(%eax),%ebx
+8010518f:	8d 78 68             	lea    0x68(%eax),%edi
+80105192:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+		panic("init exiting");  
 	}
-	for(file = 0;file<NOFILE;file++){
-		if(current_proc->ofile[file]){ 
-80104528:	8b 06                	mov    (%esi),%eax
-8010452a:	85 c0                	test   %eax,%eax
-8010452c:	74 12                	je     80104540 <thread_exit+0x40>
-			fileclose(current_proc->ofile[file]); // closing all opened files of current process
-8010452e:	83 ec 0c             	sub    $0xc,%esp
-80104531:	50                   	push   %eax
-80104532:	e8 b9 c9 ff ff       	call   80100ef0 <fileclose>
-			current_proc->ofile[file] = 0;
-80104537:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-8010453d:	83 c4 10             	add    $0x10,%esp
-	for(file = 0;file<NOFILE;file++){
-80104540:	83 c6 04             	add    $0x4,%esi
-80104543:	39 f7                	cmp    %esi,%edi
-80104545:	75 e1                	jne    80104528 <thread_exit+0x28>
+
+  //Check all the files opened by the current process and close them one by one by setting the reference to NULL
+	for(fd = 0;fd<NOFILE;fd++){
+		if(curproc->ofile[fd]){
+80105198:	8b 03                	mov    (%ebx),%eax
+8010519a:	85 c0                	test   %eax,%eax
+8010519c:	74 12                	je     801051b0 <thread_exit+0x40>
+			fileclose(curproc->ofile[fd]);
+8010519e:	83 ec 0c             	sub    $0xc,%esp
+801051a1:	50                   	push   %eax
+801051a2:	e8 49 bd ff ff       	call   80100ef0 <fileclose>
+			curproc->ofile[fd] = 0;
+801051a7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801051ad:	83 c4 10             	add    $0x10,%esp
+	for(fd = 0;fd<NOFILE;fd++){
+801051b0:	83 c3 04             	add    $0x4,%ebx
+801051b3:	39 fb                	cmp    %edi,%ebx
+801051b5:	75 e1                	jne    80105198 <thread_exit+0x28>
 		}
 	}
 	begin_op();
-80104547:	e8 14 e8 ff ff       	call   80102d60 <begin_op>
-	iput(current_proc->cwd);
-8010454c:	83 ec 0c             	sub    $0xc,%esp
-8010454f:	ff 73 68             	push   0x68(%ebx)
-80104552:	e8 59 d3 ff ff       	call   801018b0 <iput>
-	end_op();
-80104557:	e8 74 e8 ff ff       	call   80102dd0 <end_op>
-	current_proc->cwd = 0;
-8010455c:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+801051b7:	e8 a4 db ff ff       	call   80102d60 <begin_op>
+	iput(curproc->cwd);
+801051bc:	83 ec 0c             	sub    $0xc,%esp
+801051bf:	ff 76 68             	push   0x68(%esi)
+	curproc->cwd = 0;
 	acquire(&ptable.lock);
-80104563:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-8010456a:	e8 91 03 00 00       	call   80104900 <acquire>
 
-	wakeup1(current_proc->parent);
-8010456f:	8b 43 14             	mov    0x14(%ebx),%eax
-80104572:	e8 39 f2 ff ff       	call   801037b0 <wakeup1>
+	wakeup1(curproc->parent);
 	
-	for(i=ptable.proc;i<&ptable.proc[NPROC];++i){
-		if(i->parent==current_proc){
-			i->parent = initproc;
-80104577:	8b 0d 54 3d 11 80    	mov    0x80113d54,%ecx
-8010457d:	83 c4 10             	add    $0x10,%esp
-	for(i=ptable.proc;i<&ptable.proc[NPROC];++i){
-80104580:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
-80104585:	eb 14                	jmp    8010459b <thread_exit+0x9b>
-80104587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010458e:	66 90                	xchg   %ax,%ax
-80104590:	83 ea 80             	sub    $0xffffff80,%edx
-80104593:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
-80104599:	74 33                	je     801045ce <thread_exit+0xce>
-		if(i->parent==current_proc){
-8010459b:	39 5a 14             	cmp    %ebx,0x14(%edx)
-8010459e:	75 f0                	jne    80104590 <thread_exit+0x90>
-			if(i->state==ZOMBIE){
-801045a0:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
-			i->parent = initproc;
-801045a4:	89 4a 14             	mov    %ecx,0x14(%edx)
-			if(i->state==ZOMBIE){
-801045a7:	75 e7                	jne    80104590 <thread_exit+0x90>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801045a9:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-801045ae:	eb 0a                	jmp    801045ba <thread_exit+0xba>
-801045b0:	83 e8 80             	sub    $0xffffff80,%eax
-801045b3:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
-801045b8:	74 d6                	je     80104590 <thread_exit+0x90>
-    if(p->state == SLEEPING && p->chan == chan)
-801045ba:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-801045be:	75 f0                	jne    801045b0 <thread_exit+0xb0>
-801045c0:	3b 48 20             	cmp    0x20(%eax),%ecx
-801045c3:	75 eb                	jne    801045b0 <thread_exit+0xb0>
-      p->state = RUNNABLE;
-801045c5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-801045cc:	eb e2                	jmp    801045b0 <thread_exit+0xb0>
+	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+801051c2:	bb 74 30 11 80       	mov    $0x80113074,%ebx
+	iput(curproc->cwd);
+801051c7:	e8 e4 c6 ff ff       	call   801018b0 <iput>
+	end_op();
+801051cc:	e8 ff db ff ff       	call   80102dd0 <end_op>
+	curproc->cwd = 0;
+801051d1:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+	acquire(&ptable.lock);
+801051d8:	c7 04 24 40 30 11 80 	movl   $0x80113040,(%esp)
+801051df:	e8 2c 06 00 00       	call   80105810 <acquire>
+	wakeup1(curproc->parent);
+801051e4:	8b 46 14             	mov    0x14(%esi),%eax
+801051e7:	e8 14 e8 ff ff       	call   80103a00 <wakeup1>
+801051ec:	83 c4 10             	add    $0x10,%esp
+801051ef:	eb 15                	jmp    80105206 <thread_exit+0x96>
+801051f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+801051f8:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+801051fe:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+80105204:	74 2a                	je     80105230 <thread_exit+0xc0>
+		if(p->parent==curproc){
+80105206:	39 73 14             	cmp    %esi,0x14(%ebx)
+80105209:	75 ed                	jne    801051f8 <thread_exit+0x88>
+			p->parent = initproc;
+8010520b:	a1 74 53 11 80       	mov    0x80115374,%eax
+			if(p->state==ZOMBIE){
+80105210:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+			p->parent = initproc;
+80105214:	89 43 14             	mov    %eax,0x14(%ebx)
+			if(p->state==ZOMBIE){
+80105217:	75 df                	jne    801051f8 <thread_exit+0x88>
 				wakeup1(initproc);
+80105219:	e8 e2 e7 ff ff       	call   80103a00 <wakeup1>
+	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+8010521e:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80105224:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+8010522a:	75 da                	jne    80105206 <thread_exit+0x96>
+8010522c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 			}
 		}
 	}
-	current_proc->state = ZOMBIE;
-801045ce:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+	curproc->state = ZOMBIE;
+80105230:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
 	sched();
-801045d5:	e8 36 f7 ff ff       	call   80103d10 <sched>
-	panic("exit zombie");
-801045da:	83 ec 0c             	sub    $0xc,%esp
-801045dd:	68 02 7c 10 80       	push   $0x80107c02
-801045e2:	e8 99 bd ff ff       	call   80100380 <panic>
-		panic("exit init");
-801045e7:	83 ec 0c             	sub    $0xc,%esp
-801045ea:	68 f8 7b 10 80       	push   $0x80107bf8
-801045ef:	e8 8c bd ff ff       	call   80100380 <panic>
-801045f4:	66 90                	xchg   %ax,%ax
-801045f6:	66 90                	xchg   %ax,%ax
-801045f8:	66 90                	xchg   %ax,%ax
-801045fa:	66 90                	xchg   %ax,%ax
-801045fc:	66 90                	xchg   %ax,%ax
-801045fe:	66 90                	xchg   %ax,%ax
+80105237:	e8 f4 f5 ff ff       	call   80104830 <sched>
+	panic("zombie exit");
+8010523c:	83 ec 0c             	sub    $0xc,%esp
+8010523f:	68 fd 8b 10 80       	push   $0x80108bfd
+80105244:	e8 37 b1 ff ff       	call   80100380 <panic>
+		panic("init exiting");  
+80105249:	83 ec 0c             	sub    $0xc,%esp
+8010524c:	68 f0 8b 10 80       	push   $0x80108bf0
+80105251:	e8 2a b1 ff ff       	call   80100380 <panic>
+80105256:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010525d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105260 <getNumProc>:
+}
+
+int getNumProc(void){
+80105260:	55                   	push   %ebp
+80105261:	89 e5                	mov    %esp,%ebp
+80105263:	53                   	push   %ebx
+  int ans = 0;
+80105264:	31 db                	xor    %ebx,%ebx
+int getNumProc(void){
+80105266:	83 ec 10             	sub    $0x10,%esp
+  struct proc *p;
+  acquire(&ptable.lock);
+80105269:	68 40 30 11 80       	push   $0x80113040
+8010526e:	e8 9d 05 00 00       	call   80105810 <acquire>
+80105273:	83 c4 10             	add    $0x10,%esp
+  for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+80105276:	b8 74 30 11 80       	mov    $0x80113074,%eax
+8010527b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010527f:	90                   	nop
+    if(p->state!=UNUSED)
+      ++ans;
+80105280:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
+80105284:	83 db ff             	sbb    $0xffffffff,%ebx
+  for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+80105287:	05 8c 00 00 00       	add    $0x8c,%eax
+8010528c:	3d 74 53 11 80       	cmp    $0x80115374,%eax
+80105291:	75 ed                	jne    80105280 <getNumProc+0x20>
+  }
+  release(&ptable.lock);
+80105293:	83 ec 0c             	sub    $0xc,%esp
+80105296:	68 40 30 11 80       	push   $0x80113040
+8010529b:	e8 10 05 00 00       	call   801057b0 <release>
+  return ans;
+}
+801052a0:	89 d8                	mov    %ebx,%eax
+801052a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801052a5:	c9                   	leave  
+801052a6:	c3                   	ret    
+801052a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052ae:	66 90                	xchg   %ax,%ax
+
+801052b0 <getMaxPid>:
+
+int getMaxPid(void){
+801052b0:	55                   	push   %ebp
+801052b1:	89 e5                	mov    %esp,%ebp
+801052b3:	53                   	push   %ebx
+  int ans = -1;
+801052b4:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+int getMaxPid(void){
+801052b9:	83 ec 10             	sub    $0x10,%esp
+  struct proc *p;
+  acquire(&ptable.lock);
+801052bc:	68 40 30 11 80       	push   $0x80113040
+801052c1:	e8 4a 05 00 00       	call   80105810 <acquire>
+801052c6:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc;p<&ptable.proc[NPROC];++p)
+801052c9:	b8 74 30 11 80       	mov    $0x80113074,%eax
+801052ce:	66 90                	xchg   %ax,%ax
+    if(p->pid>ans)
+801052d0:	8b 50 10             	mov    0x10(%eax),%edx
+801052d3:	39 d3                	cmp    %edx,%ebx
+801052d5:	0f 4c da             	cmovl  %edx,%ebx
+  for(p = ptable.proc;p<&ptable.proc[NPROC];++p)
+801052d8:	05 8c 00 00 00       	add    $0x8c,%eax
+801052dd:	3d 74 53 11 80       	cmp    $0x80115374,%eax
+801052e2:	75 ec                	jne    801052d0 <getMaxPid+0x20>
+      ans = p->pid;
+  release(&ptable.lock);
+801052e4:	83 ec 0c             	sub    $0xc,%esp
+801052e7:	68 40 30 11 80       	push   $0x80113040
+801052ec:	e8 bf 04 00 00       	call   801057b0 <release>
+  return ans;  
+}
+801052f1:	89 d8                	mov    %ebx,%eax
+801052f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801052f6:	c9                   	leave  
+801052f7:	c3                   	ret    
+801052f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052ff:	90                   	nop
+
+80105300 <set_burst_timeAssist>:
+
+int set_burst_timeAssist(int burst_time){
+80105300:	55                   	push   %ebp
+80105301:	89 e5                	mov    %esp,%ebp
+80105303:	56                   	push   %esi
+80105304:	53                   	push   %ebx
+80105305:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  pushcli();
+80105308:	e8 b3 03 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+8010530d:	e8 1e ef ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+80105312:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80105318:	e8 f3 03 00 00       	call   80105710 <popcli>
+	struct proc *p = myproc();
+	p->burst_time = burst_time;
+8010531d:	89 9e 84 00 00 00    	mov    %ebx,0x84(%esi)
+	if(burst_time < quant){
+80105323:	39 1d 08 b0 10 80    	cmp    %ebx,0x8010b008
+80105329:	7e 06                	jle    80105331 <set_burst_timeAssist+0x31>
+		quant = burst_time;
+8010532b:	89 1d 08 b0 10 80    	mov    %ebx,0x8010b008
+	}
+        yield();
+80105331:	e8 da f7 ff ff       	call   80104b10 <yield>
 
-80104600 <initsleeplock>:
+	return 0;
+}
+80105336:	5b                   	pop    %ebx
+80105337:	31 c0                	xor    %eax,%eax
+80105339:	5e                   	pop    %esi
+8010533a:	5d                   	pop    %ebp
+8010533b:	c3                   	ret    
+8010533c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105340 <get_burst_timeAssist>:
+
+int get_burst_timeAssist(){
+80105340:	55                   	push   %ebp
+80105341:	89 e5                	mov    %esp,%ebp
+80105343:	53                   	push   %ebx
+80105344:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80105347:	e8 74 03 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+8010534c:	e8 df ee ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+80105351:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80105357:	e8 b4 03 00 00       	call   80105710 <popcli>
+	struct proc *p = myproc();
+
+	return p->burst_time;
+8010535c:	8b 83 84 00 00 00    	mov    0x84(%ebx),%eax
+
+}
+80105362:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105365:	c9                   	leave  
+80105366:	c3                   	ret    
+80105367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010536e:	66 90                	xchg   %ax,%ax
+
+80105370 <getProcInfoHelp>:
+
+struct processInfo getProcInfoHelp(int pid){
+80105370:	55                   	push   %ebp
+80105371:	89 e5                	mov    %esp,%ebp
+80105373:	57                   	push   %edi
+80105374:	56                   	push   %esi
+80105375:	53                   	push   %ebx
+80105376:	83 ec 28             	sub    $0x28,%esp
+80105379:	8b 75 08             	mov    0x8(%ebp),%esi
+8010537c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  struct proc *p;
+  struct processInfo temp = {-1,0,0};
+  acquire(&ptable.lock);
+8010537f:	68 40 30 11 80       	push   $0x80113040
+80105384:	e8 87 04 00 00       	call   80105810 <acquire>
+80105389:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc;p<&ptable.proc[NPROC];++p)
+8010538c:	b8 74 30 11 80       	mov    $0x80113074,%eax
+80105391:	eb 11                	jmp    801053a4 <getProcInfoHelp+0x34>
+80105393:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105397:	90                   	nop
+80105398:	05 8c 00 00 00       	add    $0x8c,%eax
+8010539d:	3d 74 53 11 80       	cmp    $0x80115374,%eax
+801053a2:	74 4c                	je     801053f0 <getProcInfoHelp+0x80>
+  {
+    if(p->state!=UNUSED)
+801053a4:	8b 50 0c             	mov    0xc(%eax),%edx
+801053a7:	85 d2                	test   %edx,%edx
+801053a9:	74 ed                	je     80105398 <getProcInfoHelp+0x28>
+    {
+      if(p->pid==pid){
+801053ab:	39 58 10             	cmp    %ebx,0x10(%eax)
+801053ae:	75 e8                	jne    80105398 <getProcInfoHelp+0x28>
+        temp.ppid = p->parent->pid;
+801053b0:	8b 50 14             	mov    0x14(%eax),%edx
+        temp.psize = p->sz;
+        temp.numberContextSwitches = p->numSwitches;
+        release(&ptable.lock);
+801053b3:	83 ec 0c             	sub    $0xc,%esp
+        temp.psize = p->sz;
+801053b6:	8b 38                	mov    (%eax),%edi
+        temp.numberContextSwitches = p->numSwitches;
+801053b8:	8b 98 80 00 00 00    	mov    0x80(%eax),%ebx
+        temp.ppid = p->parent->pid;
+801053be:	8b 52 10             	mov    0x10(%edx),%edx
+        release(&ptable.lock);
+801053c1:	68 40 30 11 80       	push   $0x80113040
+        temp.ppid = p->parent->pid;
+801053c6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+        release(&ptable.lock);
+801053c9:	e8 e2 03 00 00       	call   801057b0 <release>
+        return temp;
+801053ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801053d1:	83 c4 10             	add    $0x10,%esp
+801053d4:	89 16                	mov    %edx,(%esi)
+      }
+    } 
+  }    
+      release(&ptable.lock);
+      return temp;
+}
+801053d6:	89 f0                	mov    %esi,%eax
+        return temp;
+801053d8:	89 7e 04             	mov    %edi,0x4(%esi)
+801053db:	89 5e 08             	mov    %ebx,0x8(%esi)
+}
+801053de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801053e1:	5b                   	pop    %ebx
+801053e2:	5e                   	pop    %esi
+801053e3:	5f                   	pop    %edi
+801053e4:	5d                   	pop    %ebp
+801053e5:	c2 04 00             	ret    $0x4
+801053e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053ef:	90                   	nop
+      release(&ptable.lock);
+801053f0:	83 ec 0c             	sub    $0xc,%esp
+      return temp;
+801053f3:	31 ff                	xor    %edi,%edi
+801053f5:	31 db                	xor    %ebx,%ebx
+      release(&ptable.lock);
+801053f7:	68 40 30 11 80       	push   $0x80113040
+801053fc:	e8 af 03 00 00       	call   801057b0 <release>
+      return temp;
+80105401:	83 c4 10             	add    $0x10,%esp
+80105404:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80105409:	eb c9                	jmp    801053d4 <getProcInfoHelp+0x64>
+8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010540f:	90                   	nop
+
+80105410 <getCurrentInfoAssist>:
+
+struct processInfo getCurrentInfoAssist(){
+80105410:	55                   	push   %ebp
+80105411:	89 e5                	mov    %esp,%ebp
+80105413:	57                   	push   %edi
+80105414:	56                   	push   %esi
+80105415:	53                   	push   %ebx
+
+  struct proc *p;
+  struct processInfo temp = {-1,0,0};
+
+  acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80105416:	bb 74 30 11 80       	mov    $0x80113074,%ebx
+struct processInfo getCurrentInfoAssist(){
+8010541b:	83 ec 28             	sub    $0x28,%esp
+8010541e:	8b 7d 08             	mov    0x8(%ebp),%edi
+  acquire(&ptable.lock);
+80105421:	68 40 30 11 80       	push   $0x80113040
+80105426:	e8 e5 03 00 00       	call   80105810 <acquire>
+8010542b:	83 c4 10             	add    $0x10,%esp
+8010542e:	eb 0e                	jmp    8010543e <getCurrentInfoAssist+0x2e>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80105430:	81 c3 8c 00 00 00    	add    $0x8c,%ebx
+80105436:	81 fb 74 53 11 80    	cmp    $0x80115374,%ebx
+8010543c:	74 62                	je     801054a0 <getCurrentInfoAssist+0x90>
+      if(p->state != UNUSED){
+8010543e:	8b 43 0c             	mov    0xc(%ebx),%eax
+80105441:	85 c0                	test   %eax,%eax
+80105443:	74 eb                	je     80105430 <getCurrentInfoAssist+0x20>
+  pushcli();
+80105445:	e8 76 02 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+8010544a:	e8 e1 ed ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+8010544f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80105455:	e8 b6 02 00 00       	call   80105710 <popcli>
+        // printf(1, "%d\n", p->pid);
+        if(p == myproc()) {
+8010545a:	39 de                	cmp    %ebx,%esi
+8010545c:	75 d2                	jne    80105430 <getCurrentInfoAssist+0x20>
+          temp.ppid = p->parent->pid;
+8010545e:	8b 43 14             	mov    0x14(%ebx),%eax
+          temp.psize = p->sz;
+          temp.numberContextSwitches = p->numSwitches;
+          release(&ptable.lock);
+80105461:	83 ec 0c             	sub    $0xc,%esp
+          temp.psize = p->sz;
+80105464:	8b 33                	mov    (%ebx),%esi
+          temp.numberContextSwitches = p->numSwitches;
+80105466:	8b 9b 80 00 00 00    	mov    0x80(%ebx),%ebx
+          temp.ppid = p->parent->pid;
+8010546c:	8b 40 10             	mov    0x10(%eax),%eax
+          release(&ptable.lock);
+8010546f:	68 40 30 11 80       	push   $0x80113040
+          temp.ppid = p->parent->pid;
+80105474:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+          release(&ptable.lock);
+80105477:	e8 34 03 00 00       	call   801057b0 <release>
+          return temp;
+8010547c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010547f:	83 c4 10             	add    $0x10,%esp
+80105482:	89 07                	mov    %eax,(%edi)
+    }
+    release(&ptable.lock);
+
+    return temp;
+
+}
+80105484:	89 f8                	mov    %edi,%eax
+          return temp;
+80105486:	89 77 04             	mov    %esi,0x4(%edi)
+80105489:	89 5f 08             	mov    %ebx,0x8(%edi)
+}
+8010548c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010548f:	5b                   	pop    %ebx
+80105490:	5e                   	pop    %esi
+80105491:	5f                   	pop    %edi
+80105492:	5d                   	pop    %ebp
+80105493:	c2 04 00             	ret    $0x4
+80105496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010549d:	8d 76 00             	lea    0x0(%esi),%esi
+    release(&ptable.lock);
+801054a0:	83 ec 0c             	sub    $0xc,%esp
+    return temp;
+801054a3:	31 f6                	xor    %esi,%esi
+801054a5:	31 db                	xor    %ebx,%ebx
+    release(&ptable.lock);
+801054a7:	68 40 30 11 80       	push   $0x80113040
+801054ac:	e8 ff 02 00 00       	call   801057b0 <release>
+    return temp;
+801054b1:	83 c4 10             	add    $0x10,%esp
+801054b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054b9:	eb c7                	jmp    80105482 <getCurrentInfoAssist+0x72>
+801054bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801054bf:	90                   	nop
+
+801054c0 <getCurrentPIDAssist>:
+
+int getCurrentPIDAssist(void){
+801054c0:	55                   	push   %ebp
+801054c1:	89 e5                	mov    %esp,%ebp
+801054c3:	53                   	push   %ebx
+801054c4:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+801054c7:	e8 f4 01 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+801054cc:	e8 5f ed ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+801054d1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801054d7:	e8 34 02 00 00       	call   80105710 <popcli>
+  if(!myproc())return -1;
+801054dc:	85 db                	test   %ebx,%ebx
+801054de:	74 1d                	je     801054fd <getCurrentPIDAssist+0x3d>
+  pushcli();
+801054e0:	e8 db 01 00 00       	call   801056c0 <pushcli>
+  c = mycpu();
+801054e5:	e8 46 ed ff ff       	call   80104230 <mycpu>
+  p = c->proc;
+801054ea:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801054f0:	e8 1b 02 00 00       	call   80105710 <popcli>
+  return myproc()->pid;
+801054f5:	8b 43 10             	mov    0x10(%ebx),%eax
+}
+801054f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801054fb:	c9                   	leave  
+801054fc:	c3                   	ret    
+  if(!myproc())return -1;
+801054fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105502:	eb f4                	jmp    801054f8 <getCurrentPIDAssist+0x38>
+80105504:	66 90                	xchg   %ax,%ax
+80105506:	66 90                	xchg   %ax,%ax
+80105508:	66 90                	xchg   %ax,%ax
+8010550a:	66 90                	xchg   %ax,%ax
+8010550c:	66 90                	xchg   %ax,%ax
+8010550e:	66 90                	xchg   %ax,%ax
+
+80105510 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-80104600:	55                   	push   %ebp
-80104601:	89 e5                	mov    %esp,%ebp
-80104603:	53                   	push   %ebx
-80104604:	83 ec 0c             	sub    $0xc,%esp
-80104607:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105510:	55                   	push   %ebp
+80105511:	89 e5                	mov    %esp,%ebp
+80105513:	53                   	push   %ebx
+80105514:	83 ec 0c             	sub    $0xc,%esp
+80105517:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-8010460a:	68 74 7c 10 80       	push   $0x80107c74
-8010460f:	8d 43 04             	lea    0x4(%ebx),%eax
-80104612:	50                   	push   %eax
-80104613:	e8 18 01 00 00       	call   80104730 <initlock>
+8010551a:	68 98 8c 10 80       	push   $0x80108c98
+8010551f:	8d 43 04             	lea    0x4(%ebx),%eax
+80105522:	50                   	push   %eax
+80105523:	e8 18 01 00 00       	call   80105640 <initlock>
   lk->name = name;
-80104618:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105528:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-8010461b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010552b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-80104621:	83 c4 10             	add    $0x10,%esp
+80105531:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-80104624:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80105534:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-8010462b:	89 43 38             	mov    %eax,0x38(%ebx)
+8010553b:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-8010462e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104631:	c9                   	leave  
-80104632:	c3                   	ret    
-80104633:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010463a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010553e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105541:	c9                   	leave  
+80105542:	c3                   	ret    
+80105543:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010554a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104640 <acquiresleep>:
+80105550 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-80104640:	55                   	push   %ebp
-80104641:	89 e5                	mov    %esp,%ebp
-80104643:	56                   	push   %esi
-80104644:	53                   	push   %ebx
-80104645:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105550:	55                   	push   %ebp
+80105551:	89 e5                	mov    %esp,%ebp
+80105553:	56                   	push   %esi
+80105554:	53                   	push   %ebx
+80105555:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-80104648:	8d 73 04             	lea    0x4(%ebx),%esi
-8010464b:	83 ec 0c             	sub    $0xc,%esp
-8010464e:	56                   	push   %esi
-8010464f:	e8 ac 02 00 00       	call   80104900 <acquire>
+80105558:	8d 73 04             	lea    0x4(%ebx),%esi
+8010555b:	83 ec 0c             	sub    $0xc,%esp
+8010555e:	56                   	push   %esi
+8010555f:	e8 ac 02 00 00       	call   80105810 <acquire>
   while (lk->locked) {
-80104654:	8b 13                	mov    (%ebx),%edx
-80104656:	83 c4 10             	add    $0x10,%esp
-80104659:	85 d2                	test   %edx,%edx
-8010465b:	74 16                	je     80104673 <acquiresleep+0x33>
-8010465d:	8d 76 00             	lea    0x0(%esi),%esi
+80105564:	8b 13                	mov    (%ebx),%edx
+80105566:	83 c4 10             	add    $0x10,%esp
+80105569:	85 d2                	test   %edx,%edx
+8010556b:	74 16                	je     80105583 <acquiresleep+0x33>
+8010556d:	8d 76 00             	lea    0x0(%esi),%esi
     sleep(lk, &lk->lk);
-80104660:	83 ec 08             	sub    $0x8,%esp
-80104663:	56                   	push   %esi
-80104664:	53                   	push   %ebx
-80104665:	e8 e6 f9 ff ff       	call   80104050 <sleep>
+80105570:	83 ec 08             	sub    $0x8,%esp
+80105573:	56                   	push   %esi
+80105574:	53                   	push   %ebx
+80105575:	e8 26 f7 ff ff       	call   80104ca0 <sleep>
   while (lk->locked) {
-8010466a:	8b 03                	mov    (%ebx),%eax
-8010466c:	83 c4 10             	add    $0x10,%esp
-8010466f:	85 c0                	test   %eax,%eax
-80104671:	75 ed                	jne    80104660 <acquiresleep+0x20>
+8010557a:	8b 03                	mov    (%ebx),%eax
+8010557c:	83 c4 10             	add    $0x10,%esp
+8010557f:	85 c0                	test   %eax,%eax
+80105581:	75 ed                	jne    80105570 <acquiresleep+0x20>
   }
   lk->locked = 1;
-80104673:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80105583:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104679:	e8 32 f3 ff ff       	call   801039b0 <myproc>
-8010467e:	8b 40 10             	mov    0x10(%eax),%eax
-80104681:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80105589:	e8 22 ed ff ff       	call   801042b0 <myproc>
+8010558e:	8b 40 10             	mov    0x10(%eax),%eax
+80105591:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-80104684:	89 75 08             	mov    %esi,0x8(%ebp)
+80105594:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80104687:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010468a:	5b                   	pop    %ebx
-8010468b:	5e                   	pop    %esi
-8010468c:	5d                   	pop    %ebp
+80105597:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010559a:	5b                   	pop    %ebx
+8010559b:	5e                   	pop    %esi
+8010559c:	5d                   	pop    %ebp
   release(&lk->lk);
-8010468d:	e9 0e 02 00 00       	jmp    801048a0 <release>
-80104692:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010559d:	e9 0e 02 00 00       	jmp    801057b0 <release>
+801055a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801046a0 <releasesleep>:
+801055b0 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-801046a0:	55                   	push   %ebp
-801046a1:	89 e5                	mov    %esp,%ebp
-801046a3:	56                   	push   %esi
-801046a4:	53                   	push   %ebx
-801046a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801055b0:	55                   	push   %ebp
+801055b1:	89 e5                	mov    %esp,%ebp
+801055b3:	56                   	push   %esi
+801055b4:	53                   	push   %ebx
+801055b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801046a8:	8d 73 04             	lea    0x4(%ebx),%esi
-801046ab:	83 ec 0c             	sub    $0xc,%esp
-801046ae:	56                   	push   %esi
-801046af:	e8 4c 02 00 00       	call   80104900 <acquire>
+801055b8:	8d 73 04             	lea    0x4(%ebx),%esi
+801055bb:	83 ec 0c             	sub    $0xc,%esp
+801055be:	56                   	push   %esi
+801055bf:	e8 4c 02 00 00       	call   80105810 <acquire>
   lk->locked = 0;
-801046b4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801055c4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-801046ba:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801055ca:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-801046c1:	89 1c 24             	mov    %ebx,(%esp)
-801046c4:	e8 47 fa ff ff       	call   80104110 <wakeup>
+801055d1:	89 1c 24             	mov    %ebx,(%esp)
+801055d4:	e8 87 f7 ff ff       	call   80104d60 <wakeup>
   release(&lk->lk);
-801046c9:	89 75 08             	mov    %esi,0x8(%ebp)
-801046cc:	83 c4 10             	add    $0x10,%esp
+801055d9:	89 75 08             	mov    %esi,0x8(%ebp)
+801055dc:	83 c4 10             	add    $0x10,%esp
 }
-801046cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801046d2:	5b                   	pop    %ebx
-801046d3:	5e                   	pop    %esi
-801046d4:	5d                   	pop    %ebp
+801055df:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801055e2:	5b                   	pop    %ebx
+801055e3:	5e                   	pop    %esi
+801055e4:	5d                   	pop    %ebp
   release(&lk->lk);
-801046d5:	e9 c6 01 00 00       	jmp    801048a0 <release>
-801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801055e5:	e9 c6 01 00 00       	jmp    801057b0 <release>
+801055ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801046e0 <holdingsleep>:
+801055f0 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-801046e0:	55                   	push   %ebp
-801046e1:	89 e5                	mov    %esp,%ebp
-801046e3:	57                   	push   %edi
-801046e4:	31 ff                	xor    %edi,%edi
-801046e6:	56                   	push   %esi
-801046e7:	53                   	push   %ebx
-801046e8:	83 ec 18             	sub    $0x18,%esp
-801046eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801055f0:	55                   	push   %ebp
+801055f1:	89 e5                	mov    %esp,%ebp
+801055f3:	57                   	push   %edi
+801055f4:	31 ff                	xor    %edi,%edi
+801055f6:	56                   	push   %esi
+801055f7:	53                   	push   %ebx
+801055f8:	83 ec 18             	sub    $0x18,%esp
+801055fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-801046ee:	8d 73 04             	lea    0x4(%ebx),%esi
-801046f1:	56                   	push   %esi
-801046f2:	e8 09 02 00 00       	call   80104900 <acquire>
+801055fe:	8d 73 04             	lea    0x4(%ebx),%esi
+80105601:	56                   	push   %esi
+80105602:	e8 09 02 00 00       	call   80105810 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-801046f7:	8b 03                	mov    (%ebx),%eax
-801046f9:	83 c4 10             	add    $0x10,%esp
-801046fc:	85 c0                	test   %eax,%eax
-801046fe:	75 18                	jne    80104718 <holdingsleep+0x38>
+80105607:	8b 03                	mov    (%ebx),%eax
+80105609:	83 c4 10             	add    $0x10,%esp
+8010560c:	85 c0                	test   %eax,%eax
+8010560e:	75 18                	jne    80105628 <holdingsleep+0x38>
   release(&lk->lk);
-80104700:	83 ec 0c             	sub    $0xc,%esp
-80104703:	56                   	push   %esi
-80104704:	e8 97 01 00 00       	call   801048a0 <release>
+80105610:	83 ec 0c             	sub    $0xc,%esp
+80105613:	56                   	push   %esi
+80105614:	e8 97 01 00 00       	call   801057b0 <release>
   return r;
 }
-80104709:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010470c:	89 f8                	mov    %edi,%eax
-8010470e:	5b                   	pop    %ebx
-8010470f:	5e                   	pop    %esi
-80104710:	5f                   	pop    %edi
-80104711:	5d                   	pop    %ebp
-80104712:	c3                   	ret    
-80104713:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104717:	90                   	nop
+80105619:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010561c:	89 f8                	mov    %edi,%eax
+8010561e:	5b                   	pop    %ebx
+8010561f:	5e                   	pop    %esi
+80105620:	5f                   	pop    %edi
+80105621:	5d                   	pop    %ebp
+80105622:	c3                   	ret    
+80105623:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105627:	90                   	nop
   r = lk->locked && (lk->pid == myproc()->pid);
-80104718:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-8010471b:	e8 90 f2 ff ff       	call   801039b0 <myproc>
-80104720:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104723:	0f 94 c0             	sete   %al
-80104726:	0f b6 c0             	movzbl %al,%eax
-80104729:	89 c7                	mov    %eax,%edi
-8010472b:	eb d3                	jmp    80104700 <holdingsleep+0x20>
-8010472d:	66 90                	xchg   %ax,%ax
-8010472f:	90                   	nop
+80105628:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+8010562b:	e8 80 ec ff ff       	call   801042b0 <myproc>
+80105630:	39 58 10             	cmp    %ebx,0x10(%eax)
+80105633:	0f 94 c0             	sete   %al
+80105636:	0f b6 c0             	movzbl %al,%eax
+80105639:	89 c7                	mov    %eax,%edi
+8010563b:	eb d3                	jmp    80105610 <holdingsleep+0x20>
+8010563d:	66 90                	xchg   %ax,%ax
+8010563f:	90                   	nop
 
-80104730 <initlock>:
+80105640 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-80104730:	55                   	push   %ebp
-80104731:	89 e5                	mov    %esp,%ebp
-80104733:	8b 45 08             	mov    0x8(%ebp),%eax
+80105640:	55                   	push   %ebp
+80105641:	89 e5                	mov    %esp,%ebp
+80105643:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-80104736:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105646:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-80104739:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80105649:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-8010473f:	89 50 04             	mov    %edx,0x4(%eax)
+8010564f:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-80104742:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80105652:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-80104749:	5d                   	pop    %ebp
-8010474a:	c3                   	ret    
-8010474b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010474f:	90                   	nop
+80105659:	5d                   	pop    %ebp
+8010565a:	c3                   	ret    
+8010565b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010565f:	90                   	nop
 
-80104750 <getcallerpcs>:
+80105660 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104750:	55                   	push   %ebp
+80105660:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104751:	31 d2                	xor    %edx,%edx
+80105661:	31 d2                	xor    %edx,%edx
 {
-80104753:	89 e5                	mov    %esp,%ebp
-80104755:	53                   	push   %ebx
+80105663:	89 e5                	mov    %esp,%ebp
+80105665:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-80104756:	8b 45 08             	mov    0x8(%ebp),%eax
+80105666:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-80104759:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80105669:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-8010475c:	83 e8 08             	sub    $0x8,%eax
+8010566c:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-8010475f:	90                   	nop
+8010566f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104760:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-80104766:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-8010476c:	77 1a                	ja     80104788 <getcallerpcs+0x38>
+80105670:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80105676:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010567c:	77 1a                	ja     80105698 <getcallerpcs+0x38>
       break;
     pcs[i] = ebp[1];     // saved %eip
-8010476e:	8b 58 04             	mov    0x4(%eax),%ebx
-80104771:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+8010567e:	8b 58 04             	mov    0x4(%eax),%ebx
+80105681:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-80104774:	83 c2 01             	add    $0x1,%edx
+80105684:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-80104777:	8b 00                	mov    (%eax),%eax
+80105687:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104779:	83 fa 0a             	cmp    $0xa,%edx
-8010477c:	75 e2                	jne    80104760 <getcallerpcs+0x10>
+80105689:	83 fa 0a             	cmp    $0xa,%edx
+8010568c:	75 e2                	jne    80105670 <getcallerpcs+0x10>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-8010477e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104781:	c9                   	leave  
-80104782:	c3                   	ret    
-80104783:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104787:	90                   	nop
+8010568e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105691:	c9                   	leave  
+80105692:	c3                   	ret    
+80105693:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105697:	90                   	nop
   for(; i < 10; i++)
-80104788:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-8010478b:	8d 51 28             	lea    0x28(%ecx),%edx
-8010478e:	66 90                	xchg   %ax,%ax
+80105698:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+8010569b:	8d 51 28             	lea    0x28(%ecx),%edx
+8010569e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-80104790:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801056a0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104796:	83 c0 04             	add    $0x4,%eax
-80104799:	39 d0                	cmp    %edx,%eax
-8010479b:	75 f3                	jne    80104790 <getcallerpcs+0x40>
-}
-8010479d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801047a0:	c9                   	leave  
-801047a1:	c3                   	ret    
-801047a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056a6:	83 c0 04             	add    $0x4,%eax
+801056a9:	39 d0                	cmp    %edx,%eax
+801056ab:	75 f3                	jne    801056a0 <getcallerpcs+0x40>
+}
+801056ad:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056b0:	c9                   	leave  
+801056b1:	c3                   	ret    
+801056b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801047b0 <pushcli>:
+801056c0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-801047b0:	55                   	push   %ebp
-801047b1:	89 e5                	mov    %esp,%ebp
-801047b3:	53                   	push   %ebx
-801047b4:	83 ec 04             	sub    $0x4,%esp
-801047b7:	9c                   	pushf  
-801047b8:	5b                   	pop    %ebx
+801056c0:	55                   	push   %ebp
+801056c1:	89 e5                	mov    %esp,%ebp
+801056c3:	53                   	push   %ebx
+801056c4:	83 ec 04             	sub    $0x4,%esp
+801056c7:	9c                   	pushf  
+801056c8:	5b                   	pop    %ebx
   asm volatile("cli");
-801047b9:	fa                   	cli    
+801056c9:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-801047ba:	e8 71 f1 ff ff       	call   80103930 <mycpu>
-801047bf:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-801047c5:	85 c0                	test   %eax,%eax
-801047c7:	74 17                	je     801047e0 <pushcli+0x30>
+801056ca:	e8 61 eb ff ff       	call   80104230 <mycpu>
+801056cf:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801056d5:	85 c0                	test   %eax,%eax
+801056d7:	74 17                	je     801056f0 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-801047c9:	e8 62 f1 ff ff       	call   80103930 <mycpu>
-801047ce:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801056d9:	e8 52 eb ff ff       	call   80104230 <mycpu>
+801056de:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-801047d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801047d8:	c9                   	leave  
-801047d9:	c3                   	ret    
-801047da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801056e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056e8:	c9                   	leave  
+801056e9:	c3                   	ret    
+801056ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     mycpu()->intena = eflags & FL_IF;
-801047e0:	e8 4b f1 ff ff       	call   80103930 <mycpu>
-801047e5:	81 e3 00 02 00 00    	and    $0x200,%ebx
-801047eb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-801047f1:	eb d6                	jmp    801047c9 <pushcli+0x19>
-801047f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801056f0:	e8 3b eb ff ff       	call   80104230 <mycpu>
+801056f5:	81 e3 00 02 00 00    	and    $0x200,%ebx
+801056fb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80105701:	eb d6                	jmp    801056d9 <pushcli+0x19>
+80105703:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010570a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104800 <popcli>:
+80105710 <popcli>:
 
 void
 popcli(void)
 {
-80104800:	55                   	push   %ebp
-80104801:	89 e5                	mov    %esp,%ebp
-80104803:	83 ec 08             	sub    $0x8,%esp
+80105710:	55                   	push   %ebp
+80105711:	89 e5                	mov    %esp,%ebp
+80105713:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80104806:	9c                   	pushf  
-80104807:	58                   	pop    %eax
+80105716:	9c                   	pushf  
+80105717:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80104808:	f6 c4 02             	test   $0x2,%ah
-8010480b:	75 35                	jne    80104842 <popcli+0x42>
+80105718:	f6 c4 02             	test   $0x2,%ah
+8010571b:	75 35                	jne    80105752 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-8010480d:	e8 1e f1 ff ff       	call   80103930 <mycpu>
-80104812:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-80104819:	78 34                	js     8010484f <popcli+0x4f>
+8010571d:	e8 0e eb ff ff       	call   80104230 <mycpu>
+80105722:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80105729:	78 34                	js     8010575f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-8010481b:	e8 10 f1 ff ff       	call   80103930 <mycpu>
-80104820:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-80104826:	85 d2                	test   %edx,%edx
-80104828:	74 06                	je     80104830 <popcli+0x30>
+8010572b:	e8 00 eb ff ff       	call   80104230 <mycpu>
+80105730:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80105736:	85 d2                	test   %edx,%edx
+80105738:	74 06                	je     80105740 <popcli+0x30>
     sti();
 }
-8010482a:	c9                   	leave  
-8010482b:	c3                   	ret    
-8010482c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010573a:	c9                   	leave  
+8010573b:	c3                   	ret    
+8010573c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(mycpu()->ncli == 0 && mycpu()->intena)
-80104830:	e8 fb f0 ff ff       	call   80103930 <mycpu>
-80104835:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-8010483b:	85 c0                	test   %eax,%eax
-8010483d:	74 eb                	je     8010482a <popcli+0x2a>
+80105740:	e8 eb ea ff ff       	call   80104230 <mycpu>
+80105745:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010574b:	85 c0                	test   %eax,%eax
+8010574d:	74 eb                	je     8010573a <popcli+0x2a>
   asm volatile("sti");
-8010483f:	fb                   	sti    
+8010574f:	fb                   	sti    
 }
-80104840:	c9                   	leave  
-80104841:	c3                   	ret    
+80105750:	c9                   	leave  
+80105751:	c3                   	ret    
     panic("popcli - interruptible");
-80104842:	83 ec 0c             	sub    $0xc,%esp
-80104845:	68 7f 7c 10 80       	push   $0x80107c7f
-8010484a:	e8 31 bb ff ff       	call   80100380 <panic>
+80105752:	83 ec 0c             	sub    $0xc,%esp
+80105755:	68 a3 8c 10 80       	push   $0x80108ca3
+8010575a:	e8 21 ac ff ff       	call   80100380 <panic>
     panic("popcli");
-8010484f:	83 ec 0c             	sub    $0xc,%esp
-80104852:	68 96 7c 10 80       	push   $0x80107c96
-80104857:	e8 24 bb ff ff       	call   80100380 <panic>
-8010485c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104860 <holding>:
-{
-80104860:	55                   	push   %ebp
-80104861:	89 e5                	mov    %esp,%ebp
-80104863:	56                   	push   %esi
-80104864:	53                   	push   %ebx
-80104865:	8b 75 08             	mov    0x8(%ebp),%esi
-80104868:	31 db                	xor    %ebx,%ebx
+8010575f:	83 ec 0c             	sub    $0xc,%esp
+80105762:	68 ba 8c 10 80       	push   $0x80108cba
+80105767:	e8 14 ac ff ff       	call   80100380 <panic>
+8010576c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105770 <holding>:
+{
+80105770:	55                   	push   %ebp
+80105771:	89 e5                	mov    %esp,%ebp
+80105773:	56                   	push   %esi
+80105774:	53                   	push   %ebx
+80105775:	8b 75 08             	mov    0x8(%ebp),%esi
+80105778:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010486a:	e8 41 ff ff ff       	call   801047b0 <pushcli>
+8010577a:	e8 41 ff ff ff       	call   801056c0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010486f:	8b 06                	mov    (%esi),%eax
-80104871:	85 c0                	test   %eax,%eax
-80104873:	75 0b                	jne    80104880 <holding+0x20>
+8010577f:	8b 06                	mov    (%esi),%eax
+80105781:	85 c0                	test   %eax,%eax
+80105783:	75 0b                	jne    80105790 <holding+0x20>
   popcli();
-80104875:	e8 86 ff ff ff       	call   80104800 <popcli>
+80105785:	e8 86 ff ff ff       	call   80105710 <popcli>
 }
-8010487a:	89 d8                	mov    %ebx,%eax
-8010487c:	5b                   	pop    %ebx
-8010487d:	5e                   	pop    %esi
-8010487e:	5d                   	pop    %ebp
-8010487f:	c3                   	ret    
+8010578a:	89 d8                	mov    %ebx,%eax
+8010578c:	5b                   	pop    %ebx
+8010578d:	5e                   	pop    %esi
+8010578e:	5d                   	pop    %ebp
+8010578f:	c3                   	ret    
   r = lock->locked && lock->cpu == mycpu();
-80104880:	8b 5e 08             	mov    0x8(%esi),%ebx
-80104883:	e8 a8 f0 ff ff       	call   80103930 <mycpu>
-80104888:	39 c3                	cmp    %eax,%ebx
-8010488a:	0f 94 c3             	sete   %bl
+80105790:	8b 5e 08             	mov    0x8(%esi),%ebx
+80105793:	e8 98 ea ff ff       	call   80104230 <mycpu>
+80105798:	39 c3                	cmp    %eax,%ebx
+8010579a:	0f 94 c3             	sete   %bl
   popcli();
-8010488d:	e8 6e ff ff ff       	call   80104800 <popcli>
+8010579d:	e8 6e ff ff ff       	call   80105710 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-80104892:	0f b6 db             	movzbl %bl,%ebx
+801057a2:	0f b6 db             	movzbl %bl,%ebx
 }
-80104895:	89 d8                	mov    %ebx,%eax
-80104897:	5b                   	pop    %ebx
-80104898:	5e                   	pop    %esi
-80104899:	5d                   	pop    %ebp
-8010489a:	c3                   	ret    
-8010489b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010489f:	90                   	nop
-
-801048a0 <release>:
-{
-801048a0:	55                   	push   %ebp
-801048a1:	89 e5                	mov    %esp,%ebp
-801048a3:	56                   	push   %esi
-801048a4:	53                   	push   %ebx
-801048a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801057a5:	89 d8                	mov    %ebx,%eax
+801057a7:	5b                   	pop    %ebx
+801057a8:	5e                   	pop    %esi
+801057a9:	5d                   	pop    %ebp
+801057aa:	c3                   	ret    
+801057ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801057af:	90                   	nop
+
+801057b0 <release>:
+{
+801057b0:	55                   	push   %ebp
+801057b1:	89 e5                	mov    %esp,%ebp
+801057b3:	56                   	push   %esi
+801057b4:	53                   	push   %ebx
+801057b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-801048a8:	e8 03 ff ff ff       	call   801047b0 <pushcli>
+801057b8:	e8 03 ff ff ff       	call   801056c0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-801048ad:	8b 03                	mov    (%ebx),%eax
-801048af:	85 c0                	test   %eax,%eax
-801048b1:	75 15                	jne    801048c8 <release+0x28>
+801057bd:	8b 03                	mov    (%ebx),%eax
+801057bf:	85 c0                	test   %eax,%eax
+801057c1:	75 15                	jne    801057d8 <release+0x28>
   popcli();
-801048b3:	e8 48 ff ff ff       	call   80104800 <popcli>
+801057c3:	e8 48 ff ff ff       	call   80105710 <popcli>
     panic("release");
-801048b8:	83 ec 0c             	sub    $0xc,%esp
-801048bb:	68 9d 7c 10 80       	push   $0x80107c9d
-801048c0:	e8 bb ba ff ff       	call   80100380 <panic>
-801048c5:	8d 76 00             	lea    0x0(%esi),%esi
+801057c8:	83 ec 0c             	sub    $0xc,%esp
+801057cb:	68 c1 8c 10 80       	push   $0x80108cc1
+801057d0:	e8 ab ab ff ff       	call   80100380 <panic>
+801057d5:	8d 76 00             	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
-801048c8:	8b 73 08             	mov    0x8(%ebx),%esi
-801048cb:	e8 60 f0 ff ff       	call   80103930 <mycpu>
-801048d0:	39 c6                	cmp    %eax,%esi
-801048d2:	75 df                	jne    801048b3 <release+0x13>
+801057d8:	8b 73 08             	mov    0x8(%ebx),%esi
+801057db:	e8 50 ea ff ff       	call   80104230 <mycpu>
+801057e0:	39 c6                	cmp    %eax,%esi
+801057e2:	75 df                	jne    801057c3 <release+0x13>
   popcli();
-801048d4:	e8 27 ff ff ff       	call   80104800 <popcli>
+801057e4:	e8 27 ff ff ff       	call   80105710 <popcli>
   lk->pcs[0] = 0;
-801048d9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801057e9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-801048e0:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801057f0:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-801048e7:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+801057f7:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-801048ec:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801057fc:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-801048f2:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801048f5:	5b                   	pop    %ebx
-801048f6:	5e                   	pop    %esi
-801048f7:	5d                   	pop    %ebp
+80105802:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105805:	5b                   	pop    %ebx
+80105806:	5e                   	pop    %esi
+80105807:	5d                   	pop    %ebp
   popcli();
-801048f8:	e9 03 ff ff ff       	jmp    80104800 <popcli>
-801048fd:	8d 76 00             	lea    0x0(%esi),%esi
+80105808:	e9 03 ff ff ff       	jmp    80105710 <popcli>
+8010580d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104900 <acquire>:
+80105810 <acquire>:
 {
-80104900:	55                   	push   %ebp
-80104901:	89 e5                	mov    %esp,%ebp
-80104903:	53                   	push   %ebx
-80104904:	83 ec 04             	sub    $0x4,%esp
+80105810:	55                   	push   %ebp
+80105811:	89 e5                	mov    %esp,%ebp
+80105813:	53                   	push   %ebx
+80105814:	83 ec 04             	sub    $0x4,%esp
   pushcli(); // disable interrupts to avoid deadlock.
-80104907:	e8 a4 fe ff ff       	call   801047b0 <pushcli>
+80105817:	e8 a4 fe ff ff       	call   801056c0 <pushcli>
   if(holding(lk))
-8010490c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010581c:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-8010490f:	e8 9c fe ff ff       	call   801047b0 <pushcli>
+8010581f:	e8 9c fe ff ff       	call   801056c0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104914:	8b 03                	mov    (%ebx),%eax
-80104916:	85 c0                	test   %eax,%eax
-80104918:	75 7e                	jne    80104998 <acquire+0x98>
+80105824:	8b 03                	mov    (%ebx),%eax
+80105826:	85 c0                	test   %eax,%eax
+80105828:	75 7e                	jne    801058a8 <acquire+0x98>
   popcli();
-8010491a:	e8 e1 fe ff ff       	call   80104800 <popcli>
+8010582a:	e8 e1 fe ff ff       	call   80105710 <popcli>
   asm volatile("lock; xchgl %0, %1" :
-8010491f:	b9 01 00 00 00       	mov    $0x1,%ecx
-80104924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010582f:	b9 01 00 00 00       	mov    $0x1,%ecx
+80105834:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while(xchg(&lk->locked, 1) != 0)
-80104928:	8b 55 08             	mov    0x8(%ebp),%edx
-8010492b:	89 c8                	mov    %ecx,%eax
-8010492d:	f0 87 02             	lock xchg %eax,(%edx)
-80104930:	85 c0                	test   %eax,%eax
-80104932:	75 f4                	jne    80104928 <acquire+0x28>
+80105838:	8b 55 08             	mov    0x8(%ebp),%edx
+8010583b:	89 c8                	mov    %ecx,%eax
+8010583d:	f0 87 02             	lock xchg %eax,(%edx)
+80105840:	85 c0                	test   %eax,%eax
+80105842:	75 f4                	jne    80105838 <acquire+0x28>
   __sync_synchronize();
-80104934:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80105844:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-80104939:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010493c:	e8 ef ef ff ff       	call   80103930 <mycpu>
+80105849:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010584c:	e8 df e9 ff ff       	call   80104230 <mycpu>
   getcallerpcs(&lk, lk->pcs);
-80104941:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105851:	8b 4d 08             	mov    0x8(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104944:	89 ea                	mov    %ebp,%edx
+80105854:	89 ea                	mov    %ebp,%edx
   lk->cpu = mycpu();
-80104946:	89 43 08             	mov    %eax,0x8(%ebx)
+80105856:	89 43 08             	mov    %eax,0x8(%ebx)
   for(i = 0; i < 10; i++){
-80104949:	31 c0                	xor    %eax,%eax
-8010494b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010494f:	90                   	nop
+80105859:	31 c0                	xor    %eax,%eax
+8010585b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010585f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104950:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
-80104956:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-8010495c:	77 1a                	ja     80104978 <acquire+0x78>
+80105860:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+80105866:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010586c:	77 1a                	ja     80105888 <acquire+0x78>
     pcs[i] = ebp[1];     // saved %eip
-8010495e:	8b 5a 04             	mov    0x4(%edx),%ebx
-80104961:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
+8010586e:	8b 5a 04             	mov    0x4(%edx),%ebx
+80105871:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
   for(i = 0; i < 10; i++){
-80104965:	83 c0 01             	add    $0x1,%eax
+80105875:	83 c0 01             	add    $0x1,%eax
     ebp = (uint*)ebp[0]; // saved %ebp
-80104968:	8b 12                	mov    (%edx),%edx
+80105878:	8b 12                	mov    (%edx),%edx
   for(i = 0; i < 10; i++){
-8010496a:	83 f8 0a             	cmp    $0xa,%eax
-8010496d:	75 e1                	jne    80104950 <acquire+0x50>
+8010587a:	83 f8 0a             	cmp    $0xa,%eax
+8010587d:	75 e1                	jne    80105860 <acquire+0x50>
 }
-8010496f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104972:	c9                   	leave  
-80104973:	c3                   	ret    
-80104974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010587f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105882:	c9                   	leave  
+80105883:	c3                   	ret    
+80105884:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104978:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
-8010497c:	8d 51 34             	lea    0x34(%ecx),%edx
-8010497f:	90                   	nop
+80105888:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
+8010588c:	8d 51 34             	lea    0x34(%ecx),%edx
+8010588f:	90                   	nop
     pcs[i] = 0;
-80104980:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80105890:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104986:	83 c0 04             	add    $0x4,%eax
-80104989:	39 c2                	cmp    %eax,%edx
-8010498b:	75 f3                	jne    80104980 <acquire+0x80>
-}
-8010498d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104990:	c9                   	leave  
-80104991:	c3                   	ret    
-80104992:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105896:	83 c0 04             	add    $0x4,%eax
+80105899:	39 c2                	cmp    %eax,%edx
+8010589b:	75 f3                	jne    80105890 <acquire+0x80>
+}
+8010589d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801058a0:	c9                   	leave  
+801058a1:	c3                   	ret    
+801058a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104998:	8b 5b 08             	mov    0x8(%ebx),%ebx
-8010499b:	e8 90 ef ff ff       	call   80103930 <mycpu>
-801049a0:	39 c3                	cmp    %eax,%ebx
-801049a2:	0f 85 72 ff ff ff    	jne    8010491a <acquire+0x1a>
+801058a8:	8b 5b 08             	mov    0x8(%ebx),%ebx
+801058ab:	e8 80 e9 ff ff       	call   80104230 <mycpu>
+801058b0:	39 c3                	cmp    %eax,%ebx
+801058b2:	0f 85 72 ff ff ff    	jne    8010582a <acquire+0x1a>
   popcli();
-801049a8:	e8 53 fe ff ff       	call   80104800 <popcli>
+801058b8:	e8 53 fe ff ff       	call   80105710 <popcli>
     panic("acquire");
-801049ad:	83 ec 0c             	sub    $0xc,%esp
-801049b0:	68 a5 7c 10 80       	push   $0x80107ca5
-801049b5:	e8 c6 b9 ff ff       	call   80100380 <panic>
-801049ba:	66 90                	xchg   %ax,%ax
-801049bc:	66 90                	xchg   %ax,%ax
-801049be:	66 90                	xchg   %ax,%ax
+801058bd:	83 ec 0c             	sub    $0xc,%esp
+801058c0:	68 c9 8c 10 80       	push   $0x80108cc9
+801058c5:	e8 b6 aa ff ff       	call   80100380 <panic>
+801058ca:	66 90                	xchg   %ax,%ax
+801058cc:	66 90                	xchg   %ax,%ax
+801058ce:	66 90                	xchg   %ax,%ax
 
-801049c0 <memset>:
+801058d0 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-801049c0:	55                   	push   %ebp
-801049c1:	89 e5                	mov    %esp,%ebp
-801049c3:	57                   	push   %edi
-801049c4:	8b 55 08             	mov    0x8(%ebp),%edx
-801049c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801049ca:	53                   	push   %ebx
-801049cb:	8b 45 0c             	mov    0xc(%ebp),%eax
+801058d0:	55                   	push   %ebp
+801058d1:	89 e5                	mov    %esp,%ebp
+801058d3:	57                   	push   %edi
+801058d4:	8b 55 08             	mov    0x8(%ebp),%edx
+801058d7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801058da:	53                   	push   %ebx
+801058db:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-801049ce:	89 d7                	mov    %edx,%edi
-801049d0:	09 cf                	or     %ecx,%edi
-801049d2:	83 e7 03             	and    $0x3,%edi
-801049d5:	75 29                	jne    80104a00 <memset+0x40>
+801058de:	89 d7                	mov    %edx,%edi
+801058e0:	09 cf                	or     %ecx,%edi
+801058e2:	83 e7 03             	and    $0x3,%edi
+801058e5:	75 29                	jne    80105910 <memset+0x40>
     c &= 0xFF;
-801049d7:	0f b6 f8             	movzbl %al,%edi
+801058e7:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-801049da:	c1 e0 18             	shl    $0x18,%eax
-801049dd:	89 fb                	mov    %edi,%ebx
-801049df:	c1 e9 02             	shr    $0x2,%ecx
-801049e2:	c1 e3 10             	shl    $0x10,%ebx
-801049e5:	09 d8                	or     %ebx,%eax
-801049e7:	09 f8                	or     %edi,%eax
-801049e9:	c1 e7 08             	shl    $0x8,%edi
-801049ec:	09 f8                	or     %edi,%eax
+801058ea:	c1 e0 18             	shl    $0x18,%eax
+801058ed:	89 fb                	mov    %edi,%ebx
+801058ef:	c1 e9 02             	shr    $0x2,%ecx
+801058f2:	c1 e3 10             	shl    $0x10,%ebx
+801058f5:	09 d8                	or     %ebx,%eax
+801058f7:	09 f8                	or     %edi,%eax
+801058f9:	c1 e7 08             	shl    $0x8,%edi
+801058fc:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801049ee:	89 d7                	mov    %edx,%edi
-801049f0:	fc                   	cld    
-801049f1:	f3 ab                	rep stos %eax,%es:(%edi)
+801058fe:	89 d7                	mov    %edx,%edi
+80105900:	fc                   	cld    
+80105901:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-801049f3:	5b                   	pop    %ebx
-801049f4:	89 d0                	mov    %edx,%eax
-801049f6:	5f                   	pop    %edi
-801049f7:	5d                   	pop    %ebp
-801049f8:	c3                   	ret    
-801049f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105903:	5b                   	pop    %ebx
+80105904:	89 d0                	mov    %edx,%eax
+80105906:	5f                   	pop    %edi
+80105907:	5d                   	pop    %ebp
+80105908:	c3                   	ret    
+80105909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   asm volatile("cld; rep stosb" :
-80104a00:	89 d7                	mov    %edx,%edi
-80104a02:	fc                   	cld    
-80104a03:	f3 aa                	rep stos %al,%es:(%edi)
-80104a05:	5b                   	pop    %ebx
-80104a06:	89 d0                	mov    %edx,%eax
-80104a08:	5f                   	pop    %edi
-80104a09:	5d                   	pop    %ebp
-80104a0a:	c3                   	ret    
-80104a0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104a0f:	90                   	nop
+80105910:	89 d7                	mov    %edx,%edi
+80105912:	fc                   	cld    
+80105913:	f3 aa                	rep stos %al,%es:(%edi)
+80105915:	5b                   	pop    %ebx
+80105916:	89 d0                	mov    %edx,%eax
+80105918:	5f                   	pop    %edi
+80105919:	5d                   	pop    %ebp
+8010591a:	c3                   	ret    
+8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010591f:	90                   	nop
 
-80104a10 <memcmp>:
+80105920 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-80104a10:	55                   	push   %ebp
-80104a11:	89 e5                	mov    %esp,%ebp
-80104a13:	56                   	push   %esi
-80104a14:	8b 75 10             	mov    0x10(%ebp),%esi
-80104a17:	8b 55 08             	mov    0x8(%ebp),%edx
-80104a1a:	53                   	push   %ebx
-80104a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105920:	55                   	push   %ebp
+80105921:	89 e5                	mov    %esp,%ebp
+80105923:	56                   	push   %esi
+80105924:	8b 75 10             	mov    0x10(%ebp),%esi
+80105927:	8b 55 08             	mov    0x8(%ebp),%edx
+8010592a:	53                   	push   %ebx
+8010592b:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-80104a1e:	85 f6                	test   %esi,%esi
-80104a20:	74 2e                	je     80104a50 <memcmp+0x40>
-80104a22:	01 c6                	add    %eax,%esi
-80104a24:	eb 14                	jmp    80104a3a <memcmp+0x2a>
-80104a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a2d:	8d 76 00             	lea    0x0(%esi),%esi
+8010592e:	85 f6                	test   %esi,%esi
+80105930:	74 2e                	je     80105960 <memcmp+0x40>
+80105932:	01 c6                	add    %eax,%esi
+80105934:	eb 14                	jmp    8010594a <memcmp+0x2a>
+80105936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010593d:	8d 76 00             	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-80104a30:	83 c0 01             	add    $0x1,%eax
-80104a33:	83 c2 01             	add    $0x1,%edx
+80105940:	83 c0 01             	add    $0x1,%eax
+80105943:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-80104a36:	39 f0                	cmp    %esi,%eax
-80104a38:	74 16                	je     80104a50 <memcmp+0x40>
+80105946:	39 f0                	cmp    %esi,%eax
+80105948:	74 16                	je     80105960 <memcmp+0x40>
     if(*s1 != *s2)
-80104a3a:	0f b6 0a             	movzbl (%edx),%ecx
-80104a3d:	0f b6 18             	movzbl (%eax),%ebx
-80104a40:	38 d9                	cmp    %bl,%cl
-80104a42:	74 ec                	je     80104a30 <memcmp+0x20>
+8010594a:	0f b6 0a             	movzbl (%edx),%ecx
+8010594d:	0f b6 18             	movzbl (%eax),%ebx
+80105950:	38 d9                	cmp    %bl,%cl
+80105952:	74 ec                	je     80105940 <memcmp+0x20>
       return *s1 - *s2;
-80104a44:	0f b6 c1             	movzbl %cl,%eax
-80104a47:	29 d8                	sub    %ebx,%eax
+80105954:	0f b6 c1             	movzbl %cl,%eax
+80105957:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-80104a49:	5b                   	pop    %ebx
-80104a4a:	5e                   	pop    %esi
-80104a4b:	5d                   	pop    %ebp
-80104a4c:	c3                   	ret    
-80104a4d:	8d 76 00             	lea    0x0(%esi),%esi
-80104a50:	5b                   	pop    %ebx
+80105959:	5b                   	pop    %ebx
+8010595a:	5e                   	pop    %esi
+8010595b:	5d                   	pop    %ebp
+8010595c:	c3                   	ret    
+8010595d:	8d 76 00             	lea    0x0(%esi),%esi
+80105960:	5b                   	pop    %ebx
   return 0;
-80104a51:	31 c0                	xor    %eax,%eax
+80105961:	31 c0                	xor    %eax,%eax
 }
-80104a53:	5e                   	pop    %esi
-80104a54:	5d                   	pop    %ebp
-80104a55:	c3                   	ret    
-80104a56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a5d:	8d 76 00             	lea    0x0(%esi),%esi
+80105963:	5e                   	pop    %esi
+80105964:	5d                   	pop    %ebp
+80105965:	c3                   	ret    
+80105966:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010596d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104a60 <memmove>:
+80105970 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104a60:	55                   	push   %ebp
-80104a61:	89 e5                	mov    %esp,%ebp
-80104a63:	57                   	push   %edi
-80104a64:	8b 55 08             	mov    0x8(%ebp),%edx
-80104a67:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80104a6a:	56                   	push   %esi
-80104a6b:	8b 75 0c             	mov    0xc(%ebp),%esi
+80105970:	55                   	push   %ebp
+80105971:	89 e5                	mov    %esp,%ebp
+80105973:	57                   	push   %edi
+80105974:	8b 55 08             	mov    0x8(%ebp),%edx
+80105977:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010597a:	56                   	push   %esi
+8010597b:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-80104a6e:	39 d6                	cmp    %edx,%esi
-80104a70:	73 26                	jae    80104a98 <memmove+0x38>
-80104a72:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104a75:	39 fa                	cmp    %edi,%edx
-80104a77:	73 1f                	jae    80104a98 <memmove+0x38>
-80104a79:	8d 41 ff             	lea    -0x1(%ecx),%eax
+8010597e:	39 d6                	cmp    %edx,%esi
+80105980:	73 26                	jae    801059a8 <memmove+0x38>
+80105982:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80105985:	39 fa                	cmp    %edi,%edx
+80105987:	73 1f                	jae    801059a8 <memmove+0x38>
+80105989:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-80104a7c:	85 c9                	test   %ecx,%ecx
-80104a7e:	74 0c                	je     80104a8c <memmove+0x2c>
+8010598c:	85 c9                	test   %ecx,%ecx
+8010598e:	74 0c                	je     8010599c <memmove+0x2c>
       *--d = *--s;
-80104a80:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-80104a84:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80105990:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80105994:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-80104a87:	83 e8 01             	sub    $0x1,%eax
-80104a8a:	73 f4                	jae    80104a80 <memmove+0x20>
+80105997:	83 e8 01             	sub    $0x1,%eax
+8010599a:	73 f4                	jae    80105990 <memmove+0x20>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-80104a8c:	5e                   	pop    %esi
-80104a8d:	89 d0                	mov    %edx,%eax
-80104a8f:	5f                   	pop    %edi
-80104a90:	5d                   	pop    %ebp
-80104a91:	c3                   	ret    
-80104a92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010599c:	5e                   	pop    %esi
+8010599d:	89 d0                	mov    %edx,%eax
+8010599f:	5f                   	pop    %edi
+801059a0:	5d                   	pop    %ebp
+801059a1:	c3                   	ret    
+801059a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104a98:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104a9b:	89 d7                	mov    %edx,%edi
-80104a9d:	85 c9                	test   %ecx,%ecx
-80104a9f:	74 eb                	je     80104a8c <memmove+0x2c>
-80104aa1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059a8:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+801059ab:	89 d7                	mov    %edx,%edi
+801059ad:	85 c9                	test   %ecx,%ecx
+801059af:	74 eb                	je     8010599c <memmove+0x2c>
+801059b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104aa8:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+801059b8:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104aa9:	39 c6                	cmp    %eax,%esi
-80104aab:	75 fb                	jne    80104aa8 <memmove+0x48>
+801059b9:	39 c6                	cmp    %eax,%esi
+801059bb:	75 fb                	jne    801059b8 <memmove+0x48>
 }
-80104aad:	5e                   	pop    %esi
-80104aae:	89 d0                	mov    %edx,%eax
-80104ab0:	5f                   	pop    %edi
-80104ab1:	5d                   	pop    %ebp
-80104ab2:	c3                   	ret    
-80104ab3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104aba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801059bd:	5e                   	pop    %esi
+801059be:	89 d0                	mov    %edx,%eax
+801059c0:	5f                   	pop    %edi
+801059c1:	5d                   	pop    %ebp
+801059c2:	c3                   	ret    
+801059c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104ac0 <memcpy>:
+801059d0 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
-80104ac0:	eb 9e                	jmp    80104a60 <memmove>
-80104ac2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059d0:	eb 9e                	jmp    80105970 <memmove>
+801059d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104ad0 <strncmp>:
+801059e0 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104ad0:	55                   	push   %ebp
-80104ad1:	89 e5                	mov    %esp,%ebp
-80104ad3:	56                   	push   %esi
-80104ad4:	8b 75 10             	mov    0x10(%ebp),%esi
-80104ad7:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80104ada:	53                   	push   %ebx
-80104adb:	8b 55 0c             	mov    0xc(%ebp),%edx
+801059e0:	55                   	push   %ebp
+801059e1:	89 e5                	mov    %esp,%ebp
+801059e3:	56                   	push   %esi
+801059e4:	8b 75 10             	mov    0x10(%ebp),%esi
+801059e7:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801059ea:	53                   	push   %ebx
+801059eb:	8b 55 0c             	mov    0xc(%ebp),%edx
   while(n > 0 && *p && *p == *q)
-80104ade:	85 f6                	test   %esi,%esi
-80104ae0:	74 2e                	je     80104b10 <strncmp+0x40>
-80104ae2:	01 d6                	add    %edx,%esi
-80104ae4:	eb 18                	jmp    80104afe <strncmp+0x2e>
-80104ae6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104aed:	8d 76 00             	lea    0x0(%esi),%esi
-80104af0:	38 d8                	cmp    %bl,%al
-80104af2:	75 14                	jne    80104b08 <strncmp+0x38>
+801059ee:	85 f6                	test   %esi,%esi
+801059f0:	74 2e                	je     80105a20 <strncmp+0x40>
+801059f2:	01 d6                	add    %edx,%esi
+801059f4:	eb 18                	jmp    80105a0e <strncmp+0x2e>
+801059f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059fd:	8d 76 00             	lea    0x0(%esi),%esi
+80105a00:	38 d8                	cmp    %bl,%al
+80105a02:	75 14                	jne    80105a18 <strncmp+0x38>
     n--, p++, q++;
-80104af4:	83 c2 01             	add    $0x1,%edx
-80104af7:	83 c1 01             	add    $0x1,%ecx
+80105a04:	83 c2 01             	add    $0x1,%edx
+80105a07:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-80104afa:	39 f2                	cmp    %esi,%edx
-80104afc:	74 12                	je     80104b10 <strncmp+0x40>
-80104afe:	0f b6 01             	movzbl (%ecx),%eax
-80104b01:	0f b6 1a             	movzbl (%edx),%ebx
-80104b04:	84 c0                	test   %al,%al
-80104b06:	75 e8                	jne    80104af0 <strncmp+0x20>
+80105a0a:	39 f2                	cmp    %esi,%edx
+80105a0c:	74 12                	je     80105a20 <strncmp+0x40>
+80105a0e:	0f b6 01             	movzbl (%ecx),%eax
+80105a11:	0f b6 1a             	movzbl (%edx),%ebx
+80105a14:	84 c0                	test   %al,%al
+80105a16:	75 e8                	jne    80105a00 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-80104b08:	29 d8                	sub    %ebx,%eax
+80105a18:	29 d8                	sub    %ebx,%eax
 }
-80104b0a:	5b                   	pop    %ebx
-80104b0b:	5e                   	pop    %esi
-80104b0c:	5d                   	pop    %ebp
-80104b0d:	c3                   	ret    
-80104b0e:	66 90                	xchg   %ax,%ax
-80104b10:	5b                   	pop    %ebx
+80105a1a:	5b                   	pop    %ebx
+80105a1b:	5e                   	pop    %esi
+80105a1c:	5d                   	pop    %ebp
+80105a1d:	c3                   	ret    
+80105a1e:	66 90                	xchg   %ax,%ax
+80105a20:	5b                   	pop    %ebx
     return 0;
-80104b11:	31 c0                	xor    %eax,%eax
+80105a21:	31 c0                	xor    %eax,%eax
 }
-80104b13:	5e                   	pop    %esi
-80104b14:	5d                   	pop    %ebp
-80104b15:	c3                   	ret    
-80104b16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b1d:	8d 76 00             	lea    0x0(%esi),%esi
+80105a23:	5e                   	pop    %esi
+80105a24:	5d                   	pop    %ebp
+80105a25:	c3                   	ret    
+80105a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a2d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104b20 <strncpy>:
+80105a30 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-80104b20:	55                   	push   %ebp
-80104b21:	89 e5                	mov    %esp,%ebp
-80104b23:	57                   	push   %edi
-80104b24:	56                   	push   %esi
-80104b25:	8b 75 08             	mov    0x8(%ebp),%esi
-80104b28:	53                   	push   %ebx
-80104b29:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80105a30:	55                   	push   %ebp
+80105a31:	89 e5                	mov    %esp,%ebp
+80105a33:	57                   	push   %edi
+80105a34:	56                   	push   %esi
+80105a35:	8b 75 08             	mov    0x8(%ebp),%esi
+80105a38:	53                   	push   %ebx
+80105a39:	8b 4d 10             	mov    0x10(%ebp),%ecx
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-80104b2c:	89 f0                	mov    %esi,%eax
-80104b2e:	eb 15                	jmp    80104b45 <strncpy+0x25>
-80104b30:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-80104b34:	8b 7d 0c             	mov    0xc(%ebp),%edi
-80104b37:	83 c0 01             	add    $0x1,%eax
-80104b3a:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
-80104b3e:	88 50 ff             	mov    %dl,-0x1(%eax)
-80104b41:	84 d2                	test   %dl,%dl
-80104b43:	74 09                	je     80104b4e <strncpy+0x2e>
-80104b45:	89 cb                	mov    %ecx,%ebx
-80104b47:	83 e9 01             	sub    $0x1,%ecx
-80104b4a:	85 db                	test   %ebx,%ebx
-80104b4c:	7f e2                	jg     80104b30 <strncpy+0x10>
+80105a3c:	89 f0                	mov    %esi,%eax
+80105a3e:	eb 15                	jmp    80105a55 <strncpy+0x25>
+80105a40:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80105a44:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80105a47:	83 c0 01             	add    $0x1,%eax
+80105a4a:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
+80105a4e:	88 50 ff             	mov    %dl,-0x1(%eax)
+80105a51:	84 d2                	test   %dl,%dl
+80105a53:	74 09                	je     80105a5e <strncpy+0x2e>
+80105a55:	89 cb                	mov    %ecx,%ebx
+80105a57:	83 e9 01             	sub    $0x1,%ecx
+80105a5a:	85 db                	test   %ebx,%ebx
+80105a5c:	7f e2                	jg     80105a40 <strncpy+0x10>
     ;
   while(n-- > 0)
-80104b4e:	89 c2                	mov    %eax,%edx
-80104b50:	85 c9                	test   %ecx,%ecx
-80104b52:	7e 17                	jle    80104b6b <strncpy+0x4b>
-80104b54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a5e:	89 c2                	mov    %eax,%edx
+80105a60:	85 c9                	test   %ecx,%ecx
+80105a62:	7e 17                	jle    80105a7b <strncpy+0x4b>
+80105a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *s++ = 0;
-80104b58:	83 c2 01             	add    $0x1,%edx
-80104b5b:	89 c1                	mov    %eax,%ecx
-80104b5d:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
+80105a68:	83 c2 01             	add    $0x1,%edx
+80105a6b:	89 c1                	mov    %eax,%ecx
+80105a6d:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
   while(n-- > 0)
-80104b61:	29 d1                	sub    %edx,%ecx
-80104b63:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
-80104b67:	85 c9                	test   %ecx,%ecx
-80104b69:	7f ed                	jg     80104b58 <strncpy+0x38>
+80105a71:	29 d1                	sub    %edx,%ecx
+80105a73:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
+80105a77:	85 c9                	test   %ecx,%ecx
+80105a79:	7f ed                	jg     80105a68 <strncpy+0x38>
   return os;
 }
-80104b6b:	5b                   	pop    %ebx
-80104b6c:	89 f0                	mov    %esi,%eax
-80104b6e:	5e                   	pop    %esi
-80104b6f:	5f                   	pop    %edi
-80104b70:	5d                   	pop    %ebp
-80104b71:	c3                   	ret    
-80104b72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a7b:	5b                   	pop    %ebx
+80105a7c:	89 f0                	mov    %esi,%eax
+80105a7e:	5e                   	pop    %esi
+80105a7f:	5f                   	pop    %edi
+80105a80:	5d                   	pop    %ebp
+80105a81:	c3                   	ret    
+80105a82:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104b80 <safestrcpy>:
+80105a90 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104b80:	55                   	push   %ebp
-80104b81:	89 e5                	mov    %esp,%ebp
-80104b83:	56                   	push   %esi
-80104b84:	8b 55 10             	mov    0x10(%ebp),%edx
-80104b87:	8b 75 08             	mov    0x8(%ebp),%esi
-80104b8a:	53                   	push   %ebx
-80104b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105a90:	55                   	push   %ebp
+80105a91:	89 e5                	mov    %esp,%ebp
+80105a93:	56                   	push   %esi
+80105a94:	8b 55 10             	mov    0x10(%ebp),%edx
+80105a97:	8b 75 08             	mov    0x8(%ebp),%esi
+80105a9a:	53                   	push   %ebx
+80105a9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-80104b8e:	85 d2                	test   %edx,%edx
-80104b90:	7e 25                	jle    80104bb7 <safestrcpy+0x37>
-80104b92:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-80104b96:	89 f2                	mov    %esi,%edx
-80104b98:	eb 16                	jmp    80104bb0 <safestrcpy+0x30>
-80104b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105a9e:	85 d2                	test   %edx,%edx
+80105aa0:	7e 25                	jle    80105ac7 <safestrcpy+0x37>
+80105aa2:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80105aa6:	89 f2                	mov    %esi,%edx
+80105aa8:	eb 16                	jmp    80105ac0 <safestrcpy+0x30>
+80105aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104ba0:	0f b6 08             	movzbl (%eax),%ecx
-80104ba3:	83 c0 01             	add    $0x1,%eax
-80104ba6:	83 c2 01             	add    $0x1,%edx
-80104ba9:	88 4a ff             	mov    %cl,-0x1(%edx)
-80104bac:	84 c9                	test   %cl,%cl
-80104bae:	74 04                	je     80104bb4 <safestrcpy+0x34>
-80104bb0:	39 d8                	cmp    %ebx,%eax
-80104bb2:	75 ec                	jne    80104ba0 <safestrcpy+0x20>
+80105ab0:	0f b6 08             	movzbl (%eax),%ecx
+80105ab3:	83 c0 01             	add    $0x1,%eax
+80105ab6:	83 c2 01             	add    $0x1,%edx
+80105ab9:	88 4a ff             	mov    %cl,-0x1(%edx)
+80105abc:	84 c9                	test   %cl,%cl
+80105abe:	74 04                	je     80105ac4 <safestrcpy+0x34>
+80105ac0:	39 d8                	cmp    %ebx,%eax
+80105ac2:	75 ec                	jne    80105ab0 <safestrcpy+0x20>
     ;
   *s = 0;
-80104bb4:	c6 02 00             	movb   $0x0,(%edx)
+80105ac4:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104bb7:	89 f0                	mov    %esi,%eax
-80104bb9:	5b                   	pop    %ebx
-80104bba:	5e                   	pop    %esi
-80104bbb:	5d                   	pop    %ebp
-80104bbc:	c3                   	ret    
-80104bbd:	8d 76 00             	lea    0x0(%esi),%esi
+80105ac7:	89 f0                	mov    %esi,%eax
+80105ac9:	5b                   	pop    %ebx
+80105aca:	5e                   	pop    %esi
+80105acb:	5d                   	pop    %ebp
+80105acc:	c3                   	ret    
+80105acd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104bc0 <strlen>:
+80105ad0 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104bc0:	55                   	push   %ebp
+80105ad0:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104bc1:	31 c0                	xor    %eax,%eax
+80105ad1:	31 c0                	xor    %eax,%eax
 {
-80104bc3:	89 e5                	mov    %esp,%ebp
-80104bc5:	8b 55 08             	mov    0x8(%ebp),%edx
+80105ad3:	89 e5                	mov    %esp,%ebp
+80105ad5:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-80104bc8:	80 3a 00             	cmpb   $0x0,(%edx)
-80104bcb:	74 0c                	je     80104bd9 <strlen+0x19>
-80104bcd:	8d 76 00             	lea    0x0(%esi),%esi
-80104bd0:	83 c0 01             	add    $0x1,%eax
-80104bd3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-80104bd7:	75 f7                	jne    80104bd0 <strlen+0x10>
+80105ad8:	80 3a 00             	cmpb   $0x0,(%edx)
+80105adb:	74 0c                	je     80105ae9 <strlen+0x19>
+80105add:	8d 76 00             	lea    0x0(%esi),%esi
+80105ae0:	83 c0 01             	add    $0x1,%eax
+80105ae3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80105ae7:	75 f7                	jne    80105ae0 <strlen+0x10>
     ;
   return n;
 }
-80104bd9:	5d                   	pop    %ebp
-80104bda:	c3                   	ret    
+80105ae9:	5d                   	pop    %ebp
+80105aea:	c3                   	ret    
 
-80104bdb <swtch>:
+80105aeb <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-80104bdb:	8b 44 24 04          	mov    0x4(%esp),%eax
+80105aeb:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-80104bdf:	8b 54 24 08          	mov    0x8(%esp),%edx
+80105aef:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-80104be3:	55                   	push   %ebp
+80105af3:	55                   	push   %ebp
   pushl %ebx
-80104be4:	53                   	push   %ebx
+80105af4:	53                   	push   %ebx
   pushl %esi
-80104be5:	56                   	push   %esi
+80105af5:	56                   	push   %esi
   pushl %edi
-80104be6:	57                   	push   %edi
+80105af6:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-80104be7:	89 20                	mov    %esp,(%eax)
+80105af7:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-80104be9:	89 d4                	mov    %edx,%esp
+80105af9:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-80104beb:	5f                   	pop    %edi
+80105afb:	5f                   	pop    %edi
   popl %esi
-80104bec:	5e                   	pop    %esi
+80105afc:	5e                   	pop    %esi
   popl %ebx
-80104bed:	5b                   	pop    %ebx
+80105afd:	5b                   	pop    %ebx
   popl %ebp
-80104bee:	5d                   	pop    %ebp
+80105afe:	5d                   	pop    %ebp
   ret
-80104bef:	c3                   	ret    
+80105aff:	c3                   	ret    
 
-80104bf0 <fetchint>:
+80105b00 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-80104bf0:	55                   	push   %ebp
-80104bf1:	89 e5                	mov    %esp,%ebp
-80104bf3:	53                   	push   %ebx
-80104bf4:	83 ec 04             	sub    $0x4,%esp
-80104bf7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105b00:	55                   	push   %ebp
+80105b01:	89 e5                	mov    %esp,%ebp
+80105b03:	53                   	push   %ebx
+80105b04:	83 ec 04             	sub    $0x4,%esp
+80105b07:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-80104bfa:	e8 b1 ed ff ff       	call   801039b0 <myproc>
+80105b0a:	e8 a1 e7 ff ff       	call   801042b0 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104bff:	8b 00                	mov    (%eax),%eax
-80104c01:	39 d8                	cmp    %ebx,%eax
-80104c03:	76 1b                	jbe    80104c20 <fetchint+0x30>
-80104c05:	8d 53 04             	lea    0x4(%ebx),%edx
-80104c08:	39 d0                	cmp    %edx,%eax
-80104c0a:	72 14                	jb     80104c20 <fetchint+0x30>
+80105b0f:	8b 00                	mov    (%eax),%eax
+80105b11:	39 d8                	cmp    %ebx,%eax
+80105b13:	76 1b                	jbe    80105b30 <fetchint+0x30>
+80105b15:	8d 53 04             	lea    0x4(%ebx),%edx
+80105b18:	39 d0                	cmp    %edx,%eax
+80105b1a:	72 14                	jb     80105b30 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-80104c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104c0f:	8b 13                	mov    (%ebx),%edx
-80104c11:	89 10                	mov    %edx,(%eax)
+80105b1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105b1f:	8b 13                	mov    (%ebx),%edx
+80105b21:	89 10                	mov    %edx,(%eax)
   return 0;
-80104c13:	31 c0                	xor    %eax,%eax
+80105b23:	31 c0                	xor    %eax,%eax
 }
-80104c15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104c18:	c9                   	leave  
-80104c19:	c3                   	ret    
-80104c1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80104c20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c25:	eb ee                	jmp    80104c15 <fetchint+0x25>
-80104c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c2e:	66 90                	xchg   %ax,%ax
+80105b25:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b28:	c9                   	leave  
+80105b29:	c3                   	ret    
+80105b2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80105b30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b35:	eb ee                	jmp    80105b25 <fetchint+0x25>
+80105b37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b3e:	66 90                	xchg   %ax,%ax
 
-80104c30 <fetchstr>:
+80105b40 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-80104c30:	55                   	push   %ebp
-80104c31:	89 e5                	mov    %esp,%ebp
-80104c33:	53                   	push   %ebx
-80104c34:	83 ec 04             	sub    $0x4,%esp
-80104c37:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105b40:	55                   	push   %ebp
+80105b41:	89 e5                	mov    %esp,%ebp
+80105b43:	53                   	push   %ebx
+80105b44:	83 ec 04             	sub    $0x4,%esp
+80105b47:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-80104c3a:	e8 71 ed ff ff       	call   801039b0 <myproc>
+80105b4a:	e8 61 e7 ff ff       	call   801042b0 <myproc>
 
   if(addr >= curproc->sz)
-80104c3f:	39 18                	cmp    %ebx,(%eax)
-80104c41:	76 2d                	jbe    80104c70 <fetchstr+0x40>
+80105b4f:	39 18                	cmp    %ebx,(%eax)
+80105b51:	76 2d                	jbe    80105b80 <fetchstr+0x40>
     return -1;
   *pp = (char*)addr;
-80104c43:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104c46:	89 1a                	mov    %ebx,(%edx)
+80105b53:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105b56:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-80104c48:	8b 10                	mov    (%eax),%edx
+80105b58:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-80104c4a:	39 d3                	cmp    %edx,%ebx
-80104c4c:	73 22                	jae    80104c70 <fetchstr+0x40>
-80104c4e:	89 d8                	mov    %ebx,%eax
-80104c50:	eb 0d                	jmp    80104c5f <fetchstr+0x2f>
-80104c52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104c58:	83 c0 01             	add    $0x1,%eax
-80104c5b:	39 c2                	cmp    %eax,%edx
-80104c5d:	76 11                	jbe    80104c70 <fetchstr+0x40>
+80105b5a:	39 d3                	cmp    %edx,%ebx
+80105b5c:	73 22                	jae    80105b80 <fetchstr+0x40>
+80105b5e:	89 d8                	mov    %ebx,%eax
+80105b60:	eb 0d                	jmp    80105b6f <fetchstr+0x2f>
+80105b62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b68:	83 c0 01             	add    $0x1,%eax
+80105b6b:	39 c2                	cmp    %eax,%edx
+80105b6d:	76 11                	jbe    80105b80 <fetchstr+0x40>
     if(*s == 0)
-80104c5f:	80 38 00             	cmpb   $0x0,(%eax)
-80104c62:	75 f4                	jne    80104c58 <fetchstr+0x28>
+80105b6f:	80 38 00             	cmpb   $0x0,(%eax)
+80105b72:	75 f4                	jne    80105b68 <fetchstr+0x28>
       return s - *pp;
-80104c64:	29 d8                	sub    %ebx,%eax
+80105b74:	29 d8                	sub    %ebx,%eax
   }
   return -1;
 }
-80104c66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104c69:	c9                   	leave  
-80104c6a:	c3                   	ret    
-80104c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c6f:	90                   	nop
-80104c70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return -1;
-80104c73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104c78:	c9                   	leave  
-80104c79:	c3                   	ret    
-80104c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b76:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b79:	c9                   	leave  
+80105b7a:	c3                   	ret    
+80105b7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b7f:	90                   	nop
+80105b80:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return -1;
+80105b83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105b88:	c9                   	leave  
+80105b89:	c3                   	ret    
+80105b8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104c80 <argint>:
+80105b90 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104c80:	55                   	push   %ebp
-80104c81:	89 e5                	mov    %esp,%ebp
-80104c83:	56                   	push   %esi
-80104c84:	53                   	push   %ebx
+80105b90:	55                   	push   %ebp
+80105b91:	89 e5                	mov    %esp,%ebp
+80105b93:	56                   	push   %esi
+80105b94:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104c85:	e8 26 ed ff ff       	call   801039b0 <myproc>
-80104c8a:	8b 55 08             	mov    0x8(%ebp),%edx
-80104c8d:	8b 40 18             	mov    0x18(%eax),%eax
-80104c90:	8b 40 44             	mov    0x44(%eax),%eax
-80104c93:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80105b95:	e8 16 e7 ff ff       	call   801042b0 <myproc>
+80105b9a:	8b 55 08             	mov    0x8(%ebp),%edx
+80105b9d:	8b 40 18             	mov    0x18(%eax),%eax
+80105ba0:	8b 40 44             	mov    0x44(%eax),%eax
+80105ba3:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104c96:	e8 15 ed ff ff       	call   801039b0 <myproc>
+80105ba6:	e8 05 e7 ff ff       	call   801042b0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104c9b:	8d 73 04             	lea    0x4(%ebx),%esi
+80105bab:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104c9e:	8b 00                	mov    (%eax),%eax
-80104ca0:	39 c6                	cmp    %eax,%esi
-80104ca2:	73 1c                	jae    80104cc0 <argint+0x40>
-80104ca4:	8d 53 08             	lea    0x8(%ebx),%edx
-80104ca7:	39 d0                	cmp    %edx,%eax
-80104ca9:	72 15                	jb     80104cc0 <argint+0x40>
+80105bae:	8b 00                	mov    (%eax),%eax
+80105bb0:	39 c6                	cmp    %eax,%esi
+80105bb2:	73 1c                	jae    80105bd0 <argint+0x40>
+80105bb4:	8d 53 08             	lea    0x8(%ebx),%edx
+80105bb7:	39 d0                	cmp    %edx,%eax
+80105bb9:	72 15                	jb     80105bd0 <argint+0x40>
   *ip = *(int*)(addr);
-80104cab:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104cae:	8b 53 04             	mov    0x4(%ebx),%edx
-80104cb1:	89 10                	mov    %edx,(%eax)
+80105bbb:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105bbe:	8b 53 04             	mov    0x4(%ebx),%edx
+80105bc1:	89 10                	mov    %edx,(%eax)
   return 0;
-80104cb3:	31 c0                	xor    %eax,%eax
+80105bc3:	31 c0                	xor    %eax,%eax
 }
-80104cb5:	5b                   	pop    %ebx
-80104cb6:	5e                   	pop    %esi
-80104cb7:	5d                   	pop    %ebp
-80104cb8:	c3                   	ret    
-80104cb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bc5:	5b                   	pop    %ebx
+80105bc6:	5e                   	pop    %esi
+80105bc7:	5d                   	pop    %ebp
+80105bc8:	c3                   	ret    
+80105bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104cc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104cc5:	eb ee                	jmp    80104cb5 <argint+0x35>
-80104cc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104cce:	66 90                	xchg   %ax,%ax
+80105bd5:	eb ee                	jmp    80105bc5 <argint+0x35>
+80105bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bde:	66 90                	xchg   %ax,%ax
 
-80104cd0 <argptr>:
+80105be0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-80104cd0:	55                   	push   %ebp
-80104cd1:	89 e5                	mov    %esp,%ebp
-80104cd3:	57                   	push   %edi
-80104cd4:	56                   	push   %esi
-80104cd5:	53                   	push   %ebx
-80104cd6:	83 ec 0c             	sub    $0xc,%esp
+80105be0:	55                   	push   %ebp
+80105be1:	89 e5                	mov    %esp,%ebp
+80105be3:	57                   	push   %edi
+80105be4:	56                   	push   %esi
+80105be5:	53                   	push   %ebx
+80105be6:	83 ec 0c             	sub    $0xc,%esp
   int i;
   struct proc *curproc = myproc();
-80104cd9:	e8 d2 ec ff ff       	call   801039b0 <myproc>
-80104cde:	89 c6                	mov    %eax,%esi
+80105be9:	e8 c2 e6 ff ff       	call   801042b0 <myproc>
+80105bee:	89 c6                	mov    %eax,%esi
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104ce0:	e8 cb ec ff ff       	call   801039b0 <myproc>
-80104ce5:	8b 55 08             	mov    0x8(%ebp),%edx
-80104ce8:	8b 40 18             	mov    0x18(%eax),%eax
-80104ceb:	8b 40 44             	mov    0x44(%eax),%eax
-80104cee:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80105bf0:	e8 bb e6 ff ff       	call   801042b0 <myproc>
+80105bf5:	8b 55 08             	mov    0x8(%ebp),%edx
+80105bf8:	8b 40 18             	mov    0x18(%eax),%eax
+80105bfb:	8b 40 44             	mov    0x44(%eax),%eax
+80105bfe:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104cf1:	e8 ba ec ff ff       	call   801039b0 <myproc>
+80105c01:	e8 aa e6 ff ff       	call   801042b0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104cf6:	8d 7b 04             	lea    0x4(%ebx),%edi
+80105c06:	8d 7b 04             	lea    0x4(%ebx),%edi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104cf9:	8b 00                	mov    (%eax),%eax
-80104cfb:	39 c7                	cmp    %eax,%edi
-80104cfd:	73 31                	jae    80104d30 <argptr+0x60>
-80104cff:	8d 4b 08             	lea    0x8(%ebx),%ecx
-80104d02:	39 c8                	cmp    %ecx,%eax
-80104d04:	72 2a                	jb     80104d30 <argptr+0x60>
+80105c09:	8b 00                	mov    (%eax),%eax
+80105c0b:	39 c7                	cmp    %eax,%edi
+80105c0d:	73 31                	jae    80105c40 <argptr+0x60>
+80105c0f:	8d 4b 08             	lea    0x8(%ebx),%ecx
+80105c12:	39 c8                	cmp    %ecx,%eax
+80105c14:	72 2a                	jb     80105c40 <argptr+0x60>
  
   if(argint(n, &i) < 0)
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104d06:	8b 55 10             	mov    0x10(%ebp),%edx
+80105c16:	8b 55 10             	mov    0x10(%ebp),%edx
   *ip = *(int*)(addr);
-80104d09:	8b 43 04             	mov    0x4(%ebx),%eax
+80105c19:	8b 43 04             	mov    0x4(%ebx),%eax
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104d0c:	85 d2                	test   %edx,%edx
-80104d0e:	78 20                	js     80104d30 <argptr+0x60>
-80104d10:	8b 16                	mov    (%esi),%edx
-80104d12:	39 c2                	cmp    %eax,%edx
-80104d14:	76 1a                	jbe    80104d30 <argptr+0x60>
-80104d16:	8b 5d 10             	mov    0x10(%ebp),%ebx
-80104d19:	01 c3                	add    %eax,%ebx
-80104d1b:	39 da                	cmp    %ebx,%edx
-80104d1d:	72 11                	jb     80104d30 <argptr+0x60>
+80105c1c:	85 d2                	test   %edx,%edx
+80105c1e:	78 20                	js     80105c40 <argptr+0x60>
+80105c20:	8b 16                	mov    (%esi),%edx
+80105c22:	39 c2                	cmp    %eax,%edx
+80105c24:	76 1a                	jbe    80105c40 <argptr+0x60>
+80105c26:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80105c29:	01 c3                	add    %eax,%ebx
+80105c2b:	39 da                	cmp    %ebx,%edx
+80105c2d:	72 11                	jb     80105c40 <argptr+0x60>
     return -1;
   *pp = (char*)i;
-80104d1f:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104d22:	89 02                	mov    %eax,(%edx)
+80105c2f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105c32:	89 02                	mov    %eax,(%edx)
   return 0;
-80104d24:	31 c0                	xor    %eax,%eax
+80105c34:	31 c0                	xor    %eax,%eax
 }
-80104d26:	83 c4 0c             	add    $0xc,%esp
-80104d29:	5b                   	pop    %ebx
-80104d2a:	5e                   	pop    %esi
-80104d2b:	5f                   	pop    %edi
-80104d2c:	5d                   	pop    %ebp
-80104d2d:	c3                   	ret    
-80104d2e:	66 90                	xchg   %ax,%ax
-    return -1;
-80104d30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104d35:	eb ef                	jmp    80104d26 <argptr+0x56>
-80104d37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d3e:	66 90                	xchg   %ax,%ax
+80105c36:	83 c4 0c             	add    $0xc,%esp
+80105c39:	5b                   	pop    %ebx
+80105c3a:	5e                   	pop    %esi
+80105c3b:	5f                   	pop    %edi
+80105c3c:	5d                   	pop    %ebp
+80105c3d:	c3                   	ret    
+80105c3e:	66 90                	xchg   %ax,%ax
+    return -1;
+80105c40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c45:	eb ef                	jmp    80105c36 <argptr+0x56>
+80105c47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c4e:	66 90                	xchg   %ax,%ax
 
-80104d40 <argstr>:
+80105c50 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80104d40:	55                   	push   %ebp
-80104d41:	89 e5                	mov    %esp,%ebp
-80104d43:	56                   	push   %esi
-80104d44:	53                   	push   %ebx
+80105c50:	55                   	push   %ebp
+80105c51:	89 e5                	mov    %esp,%ebp
+80105c53:	56                   	push   %esi
+80105c54:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104d45:	e8 66 ec ff ff       	call   801039b0 <myproc>
-80104d4a:	8b 55 08             	mov    0x8(%ebp),%edx
-80104d4d:	8b 40 18             	mov    0x18(%eax),%eax
-80104d50:	8b 40 44             	mov    0x44(%eax),%eax
-80104d53:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80105c55:	e8 56 e6 ff ff       	call   801042b0 <myproc>
+80105c5a:	8b 55 08             	mov    0x8(%ebp),%edx
+80105c5d:	8b 40 18             	mov    0x18(%eax),%eax
+80105c60:	8b 40 44             	mov    0x44(%eax),%eax
+80105c63:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104d56:	e8 55 ec ff ff       	call   801039b0 <myproc>
+80105c66:	e8 45 e6 ff ff       	call   801042b0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104d5b:	8d 73 04             	lea    0x4(%ebx),%esi
+80105c6b:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104d5e:	8b 00                	mov    (%eax),%eax
-80104d60:	39 c6                	cmp    %eax,%esi
-80104d62:	73 44                	jae    80104da8 <argstr+0x68>
-80104d64:	8d 53 08             	lea    0x8(%ebx),%edx
-80104d67:	39 d0                	cmp    %edx,%eax
-80104d69:	72 3d                	jb     80104da8 <argstr+0x68>
+80105c6e:	8b 00                	mov    (%eax),%eax
+80105c70:	39 c6                	cmp    %eax,%esi
+80105c72:	73 44                	jae    80105cb8 <argstr+0x68>
+80105c74:	8d 53 08             	lea    0x8(%ebx),%edx
+80105c77:	39 d0                	cmp    %edx,%eax
+80105c79:	72 3d                	jb     80105cb8 <argstr+0x68>
   *ip = *(int*)(addr);
-80104d6b:	8b 5b 04             	mov    0x4(%ebx),%ebx
+80105c7b:	8b 5b 04             	mov    0x4(%ebx),%ebx
   struct proc *curproc = myproc();
-80104d6e:	e8 3d ec ff ff       	call   801039b0 <myproc>
+80105c7e:	e8 2d e6 ff ff       	call   801042b0 <myproc>
   if(addr >= curproc->sz)
-80104d73:	3b 18                	cmp    (%eax),%ebx
-80104d75:	73 31                	jae    80104da8 <argstr+0x68>
+80105c83:	3b 18                	cmp    (%eax),%ebx
+80105c85:	73 31                	jae    80105cb8 <argstr+0x68>
   *pp = (char*)addr;
-80104d77:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104d7a:	89 1a                	mov    %ebx,(%edx)
+80105c87:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105c8a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-80104d7c:	8b 10                	mov    (%eax),%edx
+80105c8c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-80104d7e:	39 d3                	cmp    %edx,%ebx
-80104d80:	73 26                	jae    80104da8 <argstr+0x68>
-80104d82:	89 d8                	mov    %ebx,%eax
-80104d84:	eb 11                	jmp    80104d97 <argstr+0x57>
-80104d86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d8d:	8d 76 00             	lea    0x0(%esi),%esi
-80104d90:	83 c0 01             	add    $0x1,%eax
-80104d93:	39 c2                	cmp    %eax,%edx
-80104d95:	76 11                	jbe    80104da8 <argstr+0x68>
+80105c8e:	39 d3                	cmp    %edx,%ebx
+80105c90:	73 26                	jae    80105cb8 <argstr+0x68>
+80105c92:	89 d8                	mov    %ebx,%eax
+80105c94:	eb 11                	jmp    80105ca7 <argstr+0x57>
+80105c96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c9d:	8d 76 00             	lea    0x0(%esi),%esi
+80105ca0:	83 c0 01             	add    $0x1,%eax
+80105ca3:	39 c2                	cmp    %eax,%edx
+80105ca5:	76 11                	jbe    80105cb8 <argstr+0x68>
     if(*s == 0)
-80104d97:	80 38 00             	cmpb   $0x0,(%eax)
-80104d9a:	75 f4                	jne    80104d90 <argstr+0x50>
+80105ca7:	80 38 00             	cmpb   $0x0,(%eax)
+80105caa:	75 f4                	jne    80105ca0 <argstr+0x50>
       return s - *pp;
-80104d9c:	29 d8                	sub    %ebx,%eax
+80105cac:	29 d8                	sub    %ebx,%eax
   int addr;
   if(argint(n, &addr) < 0)
     return -1;
   return fetchstr(addr, pp);
 }
-80104d9e:	5b                   	pop    %ebx
-80104d9f:	5e                   	pop    %esi
-80104da0:	5d                   	pop    %ebp
-80104da1:	c3                   	ret    
-80104da2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104da8:	5b                   	pop    %ebx
-    return -1;
-80104da9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104dae:	5e                   	pop    %esi
-80104daf:	5d                   	pop    %ebp
-80104db0:	c3                   	ret    
-80104db1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104db8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dbf:	90                   	nop
+80105cae:	5b                   	pop    %ebx
+80105caf:	5e                   	pop    %esi
+80105cb0:	5d                   	pop    %ebp
+80105cb1:	c3                   	ret    
+80105cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105cb8:	5b                   	pop    %ebx
+    return -1;
+80105cb9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105cbe:	5e                   	pop    %esi
+80105cbf:	5d                   	pop    %ebp
+80105cc0:	c3                   	ret    
+80105cc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ccf:	90                   	nop
 
-80104dc0 <syscall>:
-[SYS_draw]    sys_draw,
+80105cd0 <syscall>:
+[SYS_getCurrentPID] sys_getCurrentPID,
 };
 
 void
 syscall(void)
 {
-80104dc0:	55                   	push   %ebp
-80104dc1:	89 e5                	mov    %esp,%ebp
-80104dc3:	53                   	push   %ebx
-80104dc4:	83 ec 04             	sub    $0x4,%esp
+80105cd0:	55                   	push   %ebp
+80105cd1:	89 e5                	mov    %esp,%ebp
+80105cd3:	53                   	push   %ebx
+80105cd4:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104dc7:	e8 e4 eb ff ff       	call   801039b0 <myproc>
-80104dcc:	89 c3                	mov    %eax,%ebx
+80105cd7:	e8 d4 e5 ff ff       	call   801042b0 <myproc>
+80105cdc:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104dce:	8b 40 18             	mov    0x18(%eax),%eax
-80104dd1:	8b 40 1c             	mov    0x1c(%eax),%eax
+80105cde:	8b 40 18             	mov    0x18(%eax),%eax
+80105ce1:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104dd4:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104dd7:	83 fa 18             	cmp    $0x18,%edx
-80104dda:	77 24                	ja     80104e00 <syscall+0x40>
-80104ddc:	8b 14 85 e0 7c 10 80 	mov    -0x7fef8320(,%eax,4),%edx
-80104de3:	85 d2                	test   %edx,%edx
-80104de5:	74 19                	je     80104e00 <syscall+0x40>
+80105ce4:	8d 50 ff             	lea    -0x1(%eax),%edx
+80105ce7:	83 fa 1f             	cmp    $0x1f,%edx
+80105cea:	77 24                	ja     80105d10 <syscall+0x40>
+80105cec:	8b 14 85 00 8d 10 80 	mov    -0x7fef7300(,%eax,4),%edx
+80105cf3:	85 d2                	test   %edx,%edx
+80105cf5:	74 19                	je     80105d10 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104de7:	ff d2                	call   *%edx
-80104de9:	89 c2                	mov    %eax,%edx
-80104deb:	8b 43 18             	mov    0x18(%ebx),%eax
-80104dee:	89 50 1c             	mov    %edx,0x1c(%eax)
+80105cf7:	ff d2                	call   *%edx
+80105cf9:	89 c2                	mov    %eax,%edx
+80105cfb:	8b 43 18             	mov    0x18(%ebx),%eax
+80105cfe:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104df1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104df4:	c9                   	leave  
-80104df5:	c3                   	ret    
-80104df6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104dfd:	8d 76 00             	lea    0x0(%esi),%esi
+80105d01:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105d04:	c9                   	leave  
+80105d05:	c3                   	ret    
+80105d06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d0d:	8d 76 00             	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104e00:	50                   	push   %eax
+80105d10:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104e01:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80105d11:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104e04:	50                   	push   %eax
-80104e05:	ff 73 10             	push   0x10(%ebx)
-80104e08:	68 ad 7c 10 80       	push   $0x80107cad
-80104e0d:	e8 8e b8 ff ff       	call   801006a0 <cprintf>
+80105d14:	50                   	push   %eax
+80105d15:	ff 73 10             	push   0x10(%ebx)
+80105d18:	68 d1 8c 10 80       	push   $0x80108cd1
+80105d1d:	e8 7e a9 ff ff       	call   801006a0 <cprintf>
     curproc->tf->eax = -1;
-80104e12:	8b 43 18             	mov    0x18(%ebx),%eax
-80104e15:	83 c4 10             	add    $0x10,%esp
-80104e18:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104e1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104e22:	c9                   	leave  
-80104e23:	c3                   	ret    
-80104e24:	66 90                	xchg   %ax,%ax
-80104e26:	66 90                	xchg   %ax,%ax
-80104e28:	66 90                	xchg   %ax,%ax
-80104e2a:	66 90                	xchg   %ax,%ax
-80104e2c:	66 90                	xchg   %ax,%ax
-80104e2e:	66 90                	xchg   %ax,%ax
+80105d22:	8b 43 18             	mov    0x18(%ebx),%eax
+80105d25:	83 c4 10             	add    $0x10,%esp
+80105d28:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80105d2f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105d32:	c9                   	leave  
+80105d33:	c3                   	ret    
+80105d34:	66 90                	xchg   %ax,%ax
+80105d36:	66 90                	xchg   %ax,%ax
+80105d38:	66 90                	xchg   %ax,%ax
+80105d3a:	66 90                	xchg   %ax,%ax
+80105d3c:	66 90                	xchg   %ax,%ax
+80105d3e:	66 90                	xchg   %ax,%ax
 
-80104e30 <create>:
+80105d40 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104e30:	55                   	push   %ebp
-80104e31:	89 e5                	mov    %esp,%ebp
-80104e33:	57                   	push   %edi
-80104e34:	56                   	push   %esi
+80105d40:	55                   	push   %ebp
+80105d41:	89 e5                	mov    %esp,%ebp
+80105d43:	57                   	push   %edi
+80105d44:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104e35:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105d45:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104e38:	53                   	push   %ebx
-80104e39:	83 ec 34             	sub    $0x34,%esp
-80104e3c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104e3f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80105d48:	53                   	push   %ebx
+80105d49:	83 ec 34             	sub    $0x34,%esp
+80105d4c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80105d4f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104e42:	57                   	push   %edi
-80104e43:	50                   	push   %eax
+80105d52:	57                   	push   %edi
+80105d53:	50                   	push   %eax
 {
-80104e44:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104e47:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80105d54:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80105d57:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104e4a:	e8 71 d2 ff ff       	call   801020c0 <nameiparent>
-80104e4f:	83 c4 10             	add    $0x10,%esp
-80104e52:	85 c0                	test   %eax,%eax
-80104e54:	0f 84 46 01 00 00    	je     80104fa0 <create+0x170>
+80105d5a:	e8 61 c3 ff ff       	call   801020c0 <nameiparent>
+80105d5f:	83 c4 10             	add    $0x10,%esp
+80105d62:	85 c0                	test   %eax,%eax
+80105d64:	0f 84 46 01 00 00    	je     80105eb0 <create+0x170>
     return 0;
   ilock(dp);
-80104e5a:	83 ec 0c             	sub    $0xc,%esp
-80104e5d:	89 c3                	mov    %eax,%ebx
-80104e5f:	50                   	push   %eax
-80104e60:	e8 1b c9 ff ff       	call   80101780 <ilock>
+80105d6a:	83 ec 0c             	sub    $0xc,%esp
+80105d6d:	89 c3                	mov    %eax,%ebx
+80105d6f:	50                   	push   %eax
+80105d70:	e8 0b ba ff ff       	call   80101780 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104e65:	83 c4 0c             	add    $0xc,%esp
-80104e68:	6a 00                	push   $0x0
-80104e6a:	57                   	push   %edi
-80104e6b:	53                   	push   %ebx
-80104e6c:	e8 6f ce ff ff       	call   80101ce0 <dirlookup>
-80104e71:	83 c4 10             	add    $0x10,%esp
-80104e74:	89 c6                	mov    %eax,%esi
-80104e76:	85 c0                	test   %eax,%eax
-80104e78:	74 56                	je     80104ed0 <create+0xa0>
+80105d75:	83 c4 0c             	add    $0xc,%esp
+80105d78:	6a 00                	push   $0x0
+80105d7a:	57                   	push   %edi
+80105d7b:	53                   	push   %ebx
+80105d7c:	e8 5f bf ff ff       	call   80101ce0 <dirlookup>
+80105d81:	83 c4 10             	add    $0x10,%esp
+80105d84:	89 c6                	mov    %eax,%esi
+80105d86:	85 c0                	test   %eax,%eax
+80105d88:	74 56                	je     80105de0 <create+0xa0>
     iunlockput(dp);
-80104e7a:	83 ec 0c             	sub    $0xc,%esp
-80104e7d:	53                   	push   %ebx
-80104e7e:	e8 8d cb ff ff       	call   80101a10 <iunlockput>
+80105d8a:	83 ec 0c             	sub    $0xc,%esp
+80105d8d:	53                   	push   %ebx
+80105d8e:	e8 7d bc ff ff       	call   80101a10 <iunlockput>
     ilock(ip);
-80104e83:	89 34 24             	mov    %esi,(%esp)
-80104e86:	e8 f5 c8 ff ff       	call   80101780 <ilock>
+80105d93:	89 34 24             	mov    %esi,(%esp)
+80105d96:	e8 e5 b9 ff ff       	call   80101780 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104e8b:	83 c4 10             	add    $0x10,%esp
-80104e8e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104e93:	75 1b                	jne    80104eb0 <create+0x80>
-80104e95:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104e9a:	75 14                	jne    80104eb0 <create+0x80>
+80105d9b:	83 c4 10             	add    $0x10,%esp
+80105d9e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105da3:	75 1b                	jne    80105dc0 <create+0x80>
+80105da5:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80105daa:	75 14                	jne    80105dc0 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104e9c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104e9f:	89 f0                	mov    %esi,%eax
-80104ea1:	5b                   	pop    %ebx
-80104ea2:	5e                   	pop    %esi
-80104ea3:	5f                   	pop    %edi
-80104ea4:	5d                   	pop    %ebp
-80104ea5:	c3                   	ret    
-80104ea6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ead:	8d 76 00             	lea    0x0(%esi),%esi
+80105dac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105daf:	89 f0                	mov    %esi,%eax
+80105db1:	5b                   	pop    %ebx
+80105db2:	5e                   	pop    %esi
+80105db3:	5f                   	pop    %edi
+80105db4:	5d                   	pop    %ebp
+80105db5:	c3                   	ret    
+80105db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105dbd:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104eb0:	83 ec 0c             	sub    $0xc,%esp
-80104eb3:	56                   	push   %esi
+80105dc0:	83 ec 0c             	sub    $0xc,%esp
+80105dc3:	56                   	push   %esi
     return 0;
-80104eb4:	31 f6                	xor    %esi,%esi
+80105dc4:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104eb6:	e8 55 cb ff ff       	call   80101a10 <iunlockput>
+80105dc6:	e8 45 bc ff ff       	call   80101a10 <iunlockput>
     return 0;
-80104ebb:	83 c4 10             	add    $0x10,%esp
+80105dcb:	83 c4 10             	add    $0x10,%esp
 }
-80104ebe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104ec1:	89 f0                	mov    %esi,%eax
-80104ec3:	5b                   	pop    %ebx
-80104ec4:	5e                   	pop    %esi
-80104ec5:	5f                   	pop    %edi
-80104ec6:	5d                   	pop    %ebp
-80104ec7:	c3                   	ret    
-80104ec8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ecf:	90                   	nop
+80105dce:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105dd1:	89 f0                	mov    %esi,%eax
+80105dd3:	5b                   	pop    %ebx
+80105dd4:	5e                   	pop    %esi
+80105dd5:	5f                   	pop    %edi
+80105dd6:	5d                   	pop    %ebp
+80105dd7:	c3                   	ret    
+80105dd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ddf:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104ed0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104ed4:	83 ec 08             	sub    $0x8,%esp
-80104ed7:	50                   	push   %eax
-80104ed8:	ff 33                	push   (%ebx)
-80104eda:	e8 31 c7 ff ff       	call   80101610 <ialloc>
-80104edf:	83 c4 10             	add    $0x10,%esp
-80104ee2:	89 c6                	mov    %eax,%esi
-80104ee4:	85 c0                	test   %eax,%eax
-80104ee6:	0f 84 cd 00 00 00    	je     80104fb9 <create+0x189>
+80105de0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80105de4:	83 ec 08             	sub    $0x8,%esp
+80105de7:	50                   	push   %eax
+80105de8:	ff 33                	push   (%ebx)
+80105dea:	e8 21 b8 ff ff       	call   80101610 <ialloc>
+80105def:	83 c4 10             	add    $0x10,%esp
+80105df2:	89 c6                	mov    %eax,%esi
+80105df4:	85 c0                	test   %eax,%eax
+80105df6:	0f 84 cd 00 00 00    	je     80105ec9 <create+0x189>
   ilock(ip);
-80104eec:	83 ec 0c             	sub    $0xc,%esp
-80104eef:	50                   	push   %eax
-80104ef0:	e8 8b c8 ff ff       	call   80101780 <ilock>
+80105dfc:	83 ec 0c             	sub    $0xc,%esp
+80105dff:	50                   	push   %eax
+80105e00:	e8 7b b9 ff ff       	call   80101780 <ilock>
   ip->major = major;
-80104ef5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104ef9:	66 89 46 52          	mov    %ax,0x52(%esi)
+80105e05:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80105e09:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104efd:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104f01:	66 89 46 54          	mov    %ax,0x54(%esi)
+80105e0d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105e11:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104f05:	b8 01 00 00 00       	mov    $0x1,%eax
-80104f0a:	66 89 46 56          	mov    %ax,0x56(%esi)
+80105e15:	b8 01 00 00 00       	mov    $0x1,%eax
+80105e1a:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104f0e:	89 34 24             	mov    %esi,(%esp)
-80104f11:	e8 ba c7 ff ff       	call   801016d0 <iupdate>
+80105e1e:	89 34 24             	mov    %esi,(%esp)
+80105e21:	e8 aa b8 ff ff       	call   801016d0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104f16:	83 c4 10             	add    $0x10,%esp
-80104f19:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104f1e:	74 30                	je     80104f50 <create+0x120>
+80105e26:	83 c4 10             	add    $0x10,%esp
+80105e29:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80105e2e:	74 30                	je     80105e60 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104f20:	83 ec 04             	sub    $0x4,%esp
-80104f23:	ff 76 04             	push   0x4(%esi)
-80104f26:	57                   	push   %edi
-80104f27:	53                   	push   %ebx
-80104f28:	e8 b3 d0 ff ff       	call   80101fe0 <dirlink>
-80104f2d:	83 c4 10             	add    $0x10,%esp
-80104f30:	85 c0                	test   %eax,%eax
-80104f32:	78 78                	js     80104fac <create+0x17c>
+80105e30:	83 ec 04             	sub    $0x4,%esp
+80105e33:	ff 76 04             	push   0x4(%esi)
+80105e36:	57                   	push   %edi
+80105e37:	53                   	push   %ebx
+80105e38:	e8 a3 c1 ff ff       	call   80101fe0 <dirlink>
+80105e3d:	83 c4 10             	add    $0x10,%esp
+80105e40:	85 c0                	test   %eax,%eax
+80105e42:	78 78                	js     80105ebc <create+0x17c>
   iunlockput(dp);
-80104f34:	83 ec 0c             	sub    $0xc,%esp
-80104f37:	53                   	push   %ebx
-80104f38:	e8 d3 ca ff ff       	call   80101a10 <iunlockput>
+80105e44:	83 ec 0c             	sub    $0xc,%esp
+80105e47:	53                   	push   %ebx
+80105e48:	e8 c3 bb ff ff       	call   80101a10 <iunlockput>
   return ip;
-80104f3d:	83 c4 10             	add    $0x10,%esp
+80105e4d:	83 c4 10             	add    $0x10,%esp
 }
-80104f40:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f43:	89 f0                	mov    %esi,%eax
-80104f45:	5b                   	pop    %ebx
-80104f46:	5e                   	pop    %esi
-80104f47:	5f                   	pop    %edi
-80104f48:	5d                   	pop    %ebp
-80104f49:	c3                   	ret    
-80104f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105e50:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105e53:	89 f0                	mov    %esi,%eax
+80105e55:	5b                   	pop    %ebx
+80105e56:	5e                   	pop    %esi
+80105e57:	5f                   	pop    %edi
+80105e58:	5d                   	pop    %ebp
+80105e59:	c3                   	ret    
+80105e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104f50:	83 ec 0c             	sub    $0xc,%esp
+80105e60:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104f53:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80105e63:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104f58:	53                   	push   %ebx
-80104f59:	e8 72 c7 ff ff       	call   801016d0 <iupdate>
+80105e68:	53                   	push   %ebx
+80105e69:	e8 62 b8 ff ff       	call   801016d0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104f5e:	83 c4 0c             	add    $0xc,%esp
-80104f61:	ff 76 04             	push   0x4(%esi)
-80104f64:	68 64 7d 10 80       	push   $0x80107d64
-80104f69:	56                   	push   %esi
-80104f6a:	e8 71 d0 ff ff       	call   80101fe0 <dirlink>
-80104f6f:	83 c4 10             	add    $0x10,%esp
-80104f72:	85 c0                	test   %eax,%eax
-80104f74:	78 18                	js     80104f8e <create+0x15e>
-80104f76:	83 ec 04             	sub    $0x4,%esp
-80104f79:	ff 73 04             	push   0x4(%ebx)
-80104f7c:	68 63 7d 10 80       	push   $0x80107d63
-80104f81:	56                   	push   %esi
-80104f82:	e8 59 d0 ff ff       	call   80101fe0 <dirlink>
-80104f87:	83 c4 10             	add    $0x10,%esp
-80104f8a:	85 c0                	test   %eax,%eax
-80104f8c:	79 92                	jns    80104f20 <create+0xf0>
+80105e6e:	83 c4 0c             	add    $0xc,%esp
+80105e71:	ff 76 04             	push   0x4(%esi)
+80105e74:	68 a0 8d 10 80       	push   $0x80108da0
+80105e79:	56                   	push   %esi
+80105e7a:	e8 61 c1 ff ff       	call   80101fe0 <dirlink>
+80105e7f:	83 c4 10             	add    $0x10,%esp
+80105e82:	85 c0                	test   %eax,%eax
+80105e84:	78 18                	js     80105e9e <create+0x15e>
+80105e86:	83 ec 04             	sub    $0x4,%esp
+80105e89:	ff 73 04             	push   0x4(%ebx)
+80105e8c:	68 9f 8d 10 80       	push   $0x80108d9f
+80105e91:	56                   	push   %esi
+80105e92:	e8 49 c1 ff ff       	call   80101fe0 <dirlink>
+80105e97:	83 c4 10             	add    $0x10,%esp
+80105e9a:	85 c0                	test   %eax,%eax
+80105e9c:	79 92                	jns    80105e30 <create+0xf0>
       panic("create dots");
-80104f8e:	83 ec 0c             	sub    $0xc,%esp
-80104f91:	68 57 7d 10 80       	push   $0x80107d57
-80104f96:	e8 e5 b3 ff ff       	call   80100380 <panic>
-80104f9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104f9f:	90                   	nop
+80105e9e:	83 ec 0c             	sub    $0xc,%esp
+80105ea1:	68 93 8d 10 80       	push   $0x80108d93
+80105ea6:	e8 d5 a4 ff ff       	call   80100380 <panic>
+80105eab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eaf:	90                   	nop
 }
-80104fa0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105eb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104fa3:	31 f6                	xor    %esi,%esi
+80105eb3:	31 f6                	xor    %esi,%esi
 }
-80104fa5:	5b                   	pop    %ebx
-80104fa6:	89 f0                	mov    %esi,%eax
-80104fa8:	5e                   	pop    %esi
-80104fa9:	5f                   	pop    %edi
-80104faa:	5d                   	pop    %ebp
-80104fab:	c3                   	ret    
+80105eb5:	5b                   	pop    %ebx
+80105eb6:	89 f0                	mov    %esi,%eax
+80105eb8:	5e                   	pop    %esi
+80105eb9:	5f                   	pop    %edi
+80105eba:	5d                   	pop    %ebp
+80105ebb:	c3                   	ret    
     panic("create: dirlink");
-80104fac:	83 ec 0c             	sub    $0xc,%esp
-80104faf:	68 66 7d 10 80       	push   $0x80107d66
-80104fb4:	e8 c7 b3 ff ff       	call   80100380 <panic>
+80105ebc:	83 ec 0c             	sub    $0xc,%esp
+80105ebf:	68 a2 8d 10 80       	push   $0x80108da2
+80105ec4:	e8 b7 a4 ff ff       	call   80100380 <panic>
     panic("create: ialloc");
-80104fb9:	83 ec 0c             	sub    $0xc,%esp
-80104fbc:	68 48 7d 10 80       	push   $0x80107d48
-80104fc1:	e8 ba b3 ff ff       	call   80100380 <panic>
-80104fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104fcd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fd0 <sys_dup>:
-{
-80104fd0:	55                   	push   %ebp
-80104fd1:	89 e5                	mov    %esp,%ebp
-80104fd3:	56                   	push   %esi
-80104fd4:	53                   	push   %ebx
+80105ec9:	83 ec 0c             	sub    $0xc,%esp
+80105ecc:	68 84 8d 10 80       	push   $0x80108d84
+80105ed1:	e8 aa a4 ff ff       	call   80100380 <panic>
+80105ed6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105edd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105ee0 <sys_dup>:
+{
+80105ee0:	55                   	push   %ebp
+80105ee1:	89 e5                	mov    %esp,%ebp
+80105ee3:	56                   	push   %esi
+80105ee4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104fd5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105ee5:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80104fd8:	83 ec 18             	sub    $0x18,%esp
+80105ee8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104fdb:	50                   	push   %eax
-80104fdc:	6a 00                	push   $0x0
-80104fde:	e8 9d fc ff ff       	call   80104c80 <argint>
-80104fe3:	83 c4 10             	add    $0x10,%esp
-80104fe6:	85 c0                	test   %eax,%eax
-80104fe8:	78 36                	js     80105020 <sys_dup+0x50>
+80105eeb:	50                   	push   %eax
+80105eec:	6a 00                	push   $0x0
+80105eee:	e8 9d fc ff ff       	call   80105b90 <argint>
+80105ef3:	83 c4 10             	add    $0x10,%esp
+80105ef6:	85 c0                	test   %eax,%eax
+80105ef8:	78 36                	js     80105f30 <sys_dup+0x50>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104fea:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104fee:	77 30                	ja     80105020 <sys_dup+0x50>
-80104ff0:	e8 bb e9 ff ff       	call   801039b0 <myproc>
-80104ff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104ff8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104ffc:	85 f6                	test   %esi,%esi
-80104ffe:	74 20                	je     80105020 <sys_dup+0x50>
+80105efa:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105efe:	77 30                	ja     80105f30 <sys_dup+0x50>
+80105f00:	e8 ab e3 ff ff       	call   801042b0 <myproc>
+80105f05:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105f08:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80105f0c:	85 f6                	test   %esi,%esi
+80105f0e:	74 20                	je     80105f30 <sys_dup+0x50>
   struct proc *curproc = myproc();
-80105000:	e8 ab e9 ff ff       	call   801039b0 <myproc>
+80105f10:	e8 9b e3 ff ff       	call   801042b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105005:	31 db                	xor    %ebx,%ebx
-80105007:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010500e:	66 90                	xchg   %ax,%ax
+80105f15:	31 db                	xor    %ebx,%ebx
+80105f17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f1e:	66 90                	xchg   %ax,%ax
     if(curproc->ofile[fd] == 0){
-80105010:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105014:	85 d2                	test   %edx,%edx
-80105016:	74 18                	je     80105030 <sys_dup+0x60>
+80105f20:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105f24:	85 d2                	test   %edx,%edx
+80105f26:	74 18                	je     80105f40 <sys_dup+0x60>
   for(fd = 0; fd < NOFILE; fd++){
-80105018:	83 c3 01             	add    $0x1,%ebx
-8010501b:	83 fb 10             	cmp    $0x10,%ebx
-8010501e:	75 f0                	jne    80105010 <sys_dup+0x40>
-}
-80105020:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80105023:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80105028:	89 d8                	mov    %ebx,%eax
-8010502a:	5b                   	pop    %ebx
-8010502b:	5e                   	pop    %esi
-8010502c:	5d                   	pop    %ebp
-8010502d:	c3                   	ret    
-8010502e:	66 90                	xchg   %ax,%ax
+80105f28:	83 c3 01             	add    $0x1,%ebx
+80105f2b:	83 fb 10             	cmp    $0x10,%ebx
+80105f2e:	75 f0                	jne    80105f20 <sys_dup+0x40>
+}
+80105f30:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80105f33:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105f38:	89 d8                	mov    %ebx,%eax
+80105f3a:	5b                   	pop    %ebx
+80105f3b:	5e                   	pop    %esi
+80105f3c:	5d                   	pop    %ebp
+80105f3d:	c3                   	ret    
+80105f3e:	66 90                	xchg   %ax,%ax
   filedup(f);
-80105030:	83 ec 0c             	sub    $0xc,%esp
+80105f40:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-80105033:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105f43:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80105037:	56                   	push   %esi
-80105038:	e8 63 be ff ff       	call   80100ea0 <filedup>
+80105f47:	56                   	push   %esi
+80105f48:	e8 53 af ff ff       	call   80100ea0 <filedup>
   return fd;
-8010503d:	83 c4 10             	add    $0x10,%esp
+80105f4d:	83 c4 10             	add    $0x10,%esp
 }
-80105040:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105043:	89 d8                	mov    %ebx,%eax
-80105045:	5b                   	pop    %ebx
-80105046:	5e                   	pop    %esi
-80105047:	5d                   	pop    %ebp
-80105048:	c3                   	ret    
-80105049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105050 <sys_read>:
-{
-80105050:	55                   	push   %ebp
-80105051:	89 e5                	mov    %esp,%ebp
-80105053:	56                   	push   %esi
-80105054:	53                   	push   %ebx
+80105f50:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105f53:	89 d8                	mov    %ebx,%eax
+80105f55:	5b                   	pop    %ebx
+80105f56:	5e                   	pop    %esi
+80105f57:	5d                   	pop    %ebp
+80105f58:	c3                   	ret    
+80105f59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105f60 <sys_read>:
+{
+80105f60:	55                   	push   %ebp
+80105f61:	89 e5                	mov    %esp,%ebp
+80105f63:	56                   	push   %esi
+80105f64:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80105055:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+80105f65:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80105058:	83 ec 18             	sub    $0x18,%esp
+80105f68:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-8010505b:	53                   	push   %ebx
-8010505c:	6a 00                	push   $0x0
-8010505e:	e8 1d fc ff ff       	call   80104c80 <argint>
-80105063:	83 c4 10             	add    $0x10,%esp
-80105066:	85 c0                	test   %eax,%eax
-80105068:	78 5e                	js     801050c8 <sys_read+0x78>
+80105f6b:	53                   	push   %ebx
+80105f6c:	6a 00                	push   $0x0
+80105f6e:	e8 1d fc ff ff       	call   80105b90 <argint>
+80105f73:	83 c4 10             	add    $0x10,%esp
+80105f76:	85 c0                	test   %eax,%eax
+80105f78:	78 5e                	js     80105fd8 <sys_read+0x78>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-8010506a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-8010506e:	77 58                	ja     801050c8 <sys_read+0x78>
-80105070:	e8 3b e9 ff ff       	call   801039b0 <myproc>
-80105075:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80105078:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-8010507c:	85 f6                	test   %esi,%esi
-8010507e:	74 48                	je     801050c8 <sys_read+0x78>
+80105f7a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105f7e:	77 58                	ja     80105fd8 <sys_read+0x78>
+80105f80:	e8 2b e3 ff ff       	call   801042b0 <myproc>
+80105f85:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105f88:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80105f8c:	85 f6                	test   %esi,%esi
+80105f8e:	74 48                	je     80105fd8 <sys_read+0x78>
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80105080:	83 ec 08             	sub    $0x8,%esp
-80105083:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105086:	50                   	push   %eax
-80105087:	6a 02                	push   $0x2
-80105089:	e8 f2 fb ff ff       	call   80104c80 <argint>
-8010508e:	83 c4 10             	add    $0x10,%esp
-80105091:	85 c0                	test   %eax,%eax
-80105093:	78 33                	js     801050c8 <sys_read+0x78>
-80105095:	83 ec 04             	sub    $0x4,%esp
-80105098:	ff 75 f0             	push   -0x10(%ebp)
-8010509b:	53                   	push   %ebx
-8010509c:	6a 01                	push   $0x1
-8010509e:	e8 2d fc ff ff       	call   80104cd0 <argptr>
-801050a3:	83 c4 10             	add    $0x10,%esp
-801050a6:	85 c0                	test   %eax,%eax
-801050a8:	78 1e                	js     801050c8 <sys_read+0x78>
+80105f90:	83 ec 08             	sub    $0x8,%esp
+80105f93:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105f96:	50                   	push   %eax
+80105f97:	6a 02                	push   $0x2
+80105f99:	e8 f2 fb ff ff       	call   80105b90 <argint>
+80105f9e:	83 c4 10             	add    $0x10,%esp
+80105fa1:	85 c0                	test   %eax,%eax
+80105fa3:	78 33                	js     80105fd8 <sys_read+0x78>
+80105fa5:	83 ec 04             	sub    $0x4,%esp
+80105fa8:	ff 75 f0             	push   -0x10(%ebp)
+80105fab:	53                   	push   %ebx
+80105fac:	6a 01                	push   $0x1
+80105fae:	e8 2d fc ff ff       	call   80105be0 <argptr>
+80105fb3:	83 c4 10             	add    $0x10,%esp
+80105fb6:	85 c0                	test   %eax,%eax
+80105fb8:	78 1e                	js     80105fd8 <sys_read+0x78>
   return fileread(f, p, n);
-801050aa:	83 ec 04             	sub    $0x4,%esp
-801050ad:	ff 75 f0             	push   -0x10(%ebp)
-801050b0:	ff 75 f4             	push   -0xc(%ebp)
-801050b3:	56                   	push   %esi
-801050b4:	e8 67 bf ff ff       	call   80101020 <fileread>
-801050b9:	83 c4 10             	add    $0x10,%esp
-}
-801050bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801050bf:	5b                   	pop    %ebx
-801050c0:	5e                   	pop    %esi
-801050c1:	5d                   	pop    %ebp
-801050c2:	c3                   	ret    
-801050c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801050c7:	90                   	nop
-    return -1;
-801050c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801050cd:	eb ed                	jmp    801050bc <sys_read+0x6c>
-801050cf:	90                   	nop
-
-801050d0 <sys_write>:
-{
-801050d0:	55                   	push   %ebp
-801050d1:	89 e5                	mov    %esp,%ebp
-801050d3:	56                   	push   %esi
-801050d4:	53                   	push   %ebx
+80105fba:	83 ec 04             	sub    $0x4,%esp
+80105fbd:	ff 75 f0             	push   -0x10(%ebp)
+80105fc0:	ff 75 f4             	push   -0xc(%ebp)
+80105fc3:	56                   	push   %esi
+80105fc4:	e8 57 b0 ff ff       	call   80101020 <fileread>
+80105fc9:	83 c4 10             	add    $0x10,%esp
+}
+80105fcc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105fcf:	5b                   	pop    %ebx
+80105fd0:	5e                   	pop    %esi
+80105fd1:	5d                   	pop    %ebp
+80105fd2:	c3                   	ret    
+80105fd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fd7:	90                   	nop
+    return -1;
+80105fd8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105fdd:	eb ed                	jmp    80105fcc <sys_read+0x6c>
+80105fdf:	90                   	nop
+
+80105fe0 <sys_write>:
+{
+80105fe0:	55                   	push   %ebp
+80105fe1:	89 e5                	mov    %esp,%ebp
+80105fe3:	56                   	push   %esi
+80105fe4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-801050d5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+80105fe5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-801050d8:	83 ec 18             	sub    $0x18,%esp
+80105fe8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-801050db:	53                   	push   %ebx
-801050dc:	6a 00                	push   $0x0
-801050de:	e8 9d fb ff ff       	call   80104c80 <argint>
-801050e3:	83 c4 10             	add    $0x10,%esp
-801050e6:	85 c0                	test   %eax,%eax
-801050e8:	78 5e                	js     80105148 <sys_write+0x78>
+80105feb:	53                   	push   %ebx
+80105fec:	6a 00                	push   $0x0
+80105fee:	e8 9d fb ff ff       	call   80105b90 <argint>
+80105ff3:	83 c4 10             	add    $0x10,%esp
+80105ff6:	85 c0                	test   %eax,%eax
+80105ff8:	78 5e                	js     80106058 <sys_write+0x78>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-801050ea:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-801050ee:	77 58                	ja     80105148 <sys_write+0x78>
-801050f0:	e8 bb e8 ff ff       	call   801039b0 <myproc>
-801050f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801050f8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-801050fc:	85 f6                	test   %esi,%esi
-801050fe:	74 48                	je     80105148 <sys_write+0x78>
+80105ffa:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105ffe:	77 58                	ja     80106058 <sys_write+0x78>
+80106000:	e8 ab e2 ff ff       	call   801042b0 <myproc>
+80106005:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80106008:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+8010600c:	85 f6                	test   %esi,%esi
+8010600e:	74 48                	je     80106058 <sys_write+0x78>
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80105100:	83 ec 08             	sub    $0x8,%esp
-80105103:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105106:	50                   	push   %eax
-80105107:	6a 02                	push   $0x2
-80105109:	e8 72 fb ff ff       	call   80104c80 <argint>
-8010510e:	83 c4 10             	add    $0x10,%esp
-80105111:	85 c0                	test   %eax,%eax
-80105113:	78 33                	js     80105148 <sys_write+0x78>
-80105115:	83 ec 04             	sub    $0x4,%esp
-80105118:	ff 75 f0             	push   -0x10(%ebp)
-8010511b:	53                   	push   %ebx
-8010511c:	6a 01                	push   $0x1
-8010511e:	e8 ad fb ff ff       	call   80104cd0 <argptr>
-80105123:	83 c4 10             	add    $0x10,%esp
-80105126:	85 c0                	test   %eax,%eax
-80105128:	78 1e                	js     80105148 <sys_write+0x78>
+80106010:	83 ec 08             	sub    $0x8,%esp
+80106013:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106016:	50                   	push   %eax
+80106017:	6a 02                	push   $0x2
+80106019:	e8 72 fb ff ff       	call   80105b90 <argint>
+8010601e:	83 c4 10             	add    $0x10,%esp
+80106021:	85 c0                	test   %eax,%eax
+80106023:	78 33                	js     80106058 <sys_write+0x78>
+80106025:	83 ec 04             	sub    $0x4,%esp
+80106028:	ff 75 f0             	push   -0x10(%ebp)
+8010602b:	53                   	push   %ebx
+8010602c:	6a 01                	push   $0x1
+8010602e:	e8 ad fb ff ff       	call   80105be0 <argptr>
+80106033:	83 c4 10             	add    $0x10,%esp
+80106036:	85 c0                	test   %eax,%eax
+80106038:	78 1e                	js     80106058 <sys_write+0x78>
   return filewrite(f, p, n);
-8010512a:	83 ec 04             	sub    $0x4,%esp
-8010512d:	ff 75 f0             	push   -0x10(%ebp)
-80105130:	ff 75 f4             	push   -0xc(%ebp)
-80105133:	56                   	push   %esi
-80105134:	e8 77 bf ff ff       	call   801010b0 <filewrite>
-80105139:	83 c4 10             	add    $0x10,%esp
-}
-8010513c:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010513f:	5b                   	pop    %ebx
-80105140:	5e                   	pop    %esi
-80105141:	5d                   	pop    %ebp
-80105142:	c3                   	ret    
-80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105147:	90                   	nop
+8010603a:	83 ec 04             	sub    $0x4,%esp
+8010603d:	ff 75 f0             	push   -0x10(%ebp)
+80106040:	ff 75 f4             	push   -0xc(%ebp)
+80106043:	56                   	push   %esi
+80106044:	e8 67 b0 ff ff       	call   801010b0 <filewrite>
+80106049:	83 c4 10             	add    $0x10,%esp
+}
+8010604c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010604f:	5b                   	pop    %ebx
+80106050:	5e                   	pop    %esi
+80106051:	5d                   	pop    %ebp
+80106052:	c3                   	ret    
+80106053:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106057:	90                   	nop
     return -1;
-80105148:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010514d:	eb ed                	jmp    8010513c <sys_write+0x6c>
-8010514f:	90                   	nop
-
-80105150 <sys_close>:
-{
-80105150:	55                   	push   %ebp
-80105151:	89 e5                	mov    %esp,%ebp
-80105153:	56                   	push   %esi
-80105154:	53                   	push   %ebx
+80106058:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010605d:	eb ed                	jmp    8010604c <sys_write+0x6c>
+8010605f:	90                   	nop
+
+80106060 <sys_close>:
+{
+80106060:	55                   	push   %ebp
+80106061:	89 e5                	mov    %esp,%ebp
+80106063:	56                   	push   %esi
+80106064:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80105155:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106065:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105158:	83 ec 18             	sub    $0x18,%esp
+80106068:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-8010515b:	50                   	push   %eax
-8010515c:	6a 00                	push   $0x0
-8010515e:	e8 1d fb ff ff       	call   80104c80 <argint>
-80105163:	83 c4 10             	add    $0x10,%esp
-80105166:	85 c0                	test   %eax,%eax
-80105168:	78 3e                	js     801051a8 <sys_close+0x58>
+8010606b:	50                   	push   %eax
+8010606c:	6a 00                	push   $0x0
+8010606e:	e8 1d fb ff ff       	call   80105b90 <argint>
+80106073:	83 c4 10             	add    $0x10,%esp
+80106076:	85 c0                	test   %eax,%eax
+80106078:	78 3e                	js     801060b8 <sys_close+0x58>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-8010516a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-8010516e:	77 38                	ja     801051a8 <sys_close+0x58>
-80105170:	e8 3b e8 ff ff       	call   801039b0 <myproc>
-80105175:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80105178:	8d 5a 08             	lea    0x8(%edx),%ebx
-8010517b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
-8010517f:	85 f6                	test   %esi,%esi
-80105181:	74 25                	je     801051a8 <sys_close+0x58>
+8010607a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+8010607e:	77 38                	ja     801060b8 <sys_close+0x58>
+80106080:	e8 2b e2 ff ff       	call   801042b0 <myproc>
+80106085:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80106088:	8d 5a 08             	lea    0x8(%edx),%ebx
+8010608b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
+8010608f:	85 f6                	test   %esi,%esi
+80106091:	74 25                	je     801060b8 <sys_close+0x58>
   myproc()->ofile[fd] = 0;
-80105183:	e8 28 e8 ff ff       	call   801039b0 <myproc>
+80106093:	e8 18 e2 ff ff       	call   801042b0 <myproc>
   fileclose(f);
-80105188:	83 ec 0c             	sub    $0xc,%esp
+80106098:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-8010518b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
-80105192:	00 
+8010609b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
+801060a2:	00 
   fileclose(f);
-80105193:	56                   	push   %esi
-80105194:	e8 57 bd ff ff       	call   80100ef0 <fileclose>
+801060a3:	56                   	push   %esi
+801060a4:	e8 47 ae ff ff       	call   80100ef0 <fileclose>
   return 0;
-80105199:	83 c4 10             	add    $0x10,%esp
-8010519c:	31 c0                	xor    %eax,%eax
+801060a9:	83 c4 10             	add    $0x10,%esp
+801060ac:	31 c0                	xor    %eax,%eax
 }
-8010519e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801051a1:	5b                   	pop    %ebx
-801051a2:	5e                   	pop    %esi
-801051a3:	5d                   	pop    %ebp
-801051a4:	c3                   	ret    
-801051a5:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801051a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801051ad:	eb ef                	jmp    8010519e <sys_close+0x4e>
-801051af:	90                   	nop
-
-801051b0 <sys_fstat>:
-{
-801051b0:	55                   	push   %ebp
-801051b1:	89 e5                	mov    %esp,%ebp
-801051b3:	56                   	push   %esi
-801051b4:	53                   	push   %ebx
+801060ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801060b1:	5b                   	pop    %ebx
+801060b2:	5e                   	pop    %esi
+801060b3:	5d                   	pop    %ebp
+801060b4:	c3                   	ret    
+801060b5:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801060b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801060bd:	eb ef                	jmp    801060ae <sys_close+0x4e>
+801060bf:	90                   	nop
+
+801060c0 <sys_fstat>:
+{
+801060c0:	55                   	push   %ebp
+801060c1:	89 e5                	mov    %esp,%ebp
+801060c3:	56                   	push   %esi
+801060c4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-801051b5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+801060c5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-801051b8:	83 ec 18             	sub    $0x18,%esp
+801060c8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-801051bb:	53                   	push   %ebx
-801051bc:	6a 00                	push   $0x0
-801051be:	e8 bd fa ff ff       	call   80104c80 <argint>
-801051c3:	83 c4 10             	add    $0x10,%esp
-801051c6:	85 c0                	test   %eax,%eax
-801051c8:	78 46                	js     80105210 <sys_fstat+0x60>
+801060cb:	53                   	push   %ebx
+801060cc:	6a 00                	push   $0x0
+801060ce:	e8 bd fa ff ff       	call   80105b90 <argint>
+801060d3:	83 c4 10             	add    $0x10,%esp
+801060d6:	85 c0                	test   %eax,%eax
+801060d8:	78 46                	js     80106120 <sys_fstat+0x60>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-801051ca:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-801051ce:	77 40                	ja     80105210 <sys_fstat+0x60>
-801051d0:	e8 db e7 ff ff       	call   801039b0 <myproc>
-801051d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801051d8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-801051dc:	85 f6                	test   %esi,%esi
-801051de:	74 30                	je     80105210 <sys_fstat+0x60>
+801060da:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801060de:	77 40                	ja     80106120 <sys_fstat+0x60>
+801060e0:	e8 cb e1 ff ff       	call   801042b0 <myproc>
+801060e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801060e8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+801060ec:	85 f6                	test   %esi,%esi
+801060ee:	74 30                	je     80106120 <sys_fstat+0x60>
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-801051e0:	83 ec 04             	sub    $0x4,%esp
-801051e3:	6a 14                	push   $0x14
-801051e5:	53                   	push   %ebx
-801051e6:	6a 01                	push   $0x1
-801051e8:	e8 e3 fa ff ff       	call   80104cd0 <argptr>
-801051ed:	83 c4 10             	add    $0x10,%esp
-801051f0:	85 c0                	test   %eax,%eax
-801051f2:	78 1c                	js     80105210 <sys_fstat+0x60>
+801060f0:	83 ec 04             	sub    $0x4,%esp
+801060f3:	6a 14                	push   $0x14
+801060f5:	53                   	push   %ebx
+801060f6:	6a 01                	push   $0x1
+801060f8:	e8 e3 fa ff ff       	call   80105be0 <argptr>
+801060fd:	83 c4 10             	add    $0x10,%esp
+80106100:	85 c0                	test   %eax,%eax
+80106102:	78 1c                	js     80106120 <sys_fstat+0x60>
   return filestat(f, st);
-801051f4:	83 ec 08             	sub    $0x8,%esp
-801051f7:	ff 75 f4             	push   -0xc(%ebp)
-801051fa:	56                   	push   %esi
-801051fb:	e8 d0 bd ff ff       	call   80100fd0 <filestat>
-80105200:	83 c4 10             	add    $0x10,%esp
-}
-80105203:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105206:	5b                   	pop    %ebx
-80105207:	5e                   	pop    %esi
-80105208:	5d                   	pop    %ebp
-80105209:	c3                   	ret    
-8010520a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80105210:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105215:	eb ec                	jmp    80105203 <sys_fstat+0x53>
-80105217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010521e:	66 90                	xchg   %ax,%ax
-
-80105220 <sys_link>:
-{
-80105220:	55                   	push   %ebp
-80105221:	89 e5                	mov    %esp,%ebp
-80105223:	57                   	push   %edi
-80105224:	56                   	push   %esi
+80106104:	83 ec 08             	sub    $0x8,%esp
+80106107:	ff 75 f4             	push   -0xc(%ebp)
+8010610a:	56                   	push   %esi
+8010610b:	e8 c0 ae ff ff       	call   80100fd0 <filestat>
+80106110:	83 c4 10             	add    $0x10,%esp
+}
+80106113:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106116:	5b                   	pop    %ebx
+80106117:	5e                   	pop    %esi
+80106118:	5d                   	pop    %ebp
+80106119:	c3                   	ret    
+8010611a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80106120:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106125:	eb ec                	jmp    80106113 <sys_fstat+0x53>
+80106127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010612e:	66 90                	xchg   %ax,%ax
+
+80106130 <sys_link>:
+{
+80106130:	55                   	push   %ebp
+80106131:	89 e5                	mov    %esp,%ebp
+80106133:	57                   	push   %edi
+80106134:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80105225:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80106135:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80105228:	53                   	push   %ebx
-80105229:	83 ec 34             	sub    $0x34,%esp
+80106138:	53                   	push   %ebx
+80106139:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-8010522c:	50                   	push   %eax
-8010522d:	6a 00                	push   $0x0
-8010522f:	e8 0c fb ff ff       	call   80104d40 <argstr>
-80105234:	83 c4 10             	add    $0x10,%esp
-80105237:	85 c0                	test   %eax,%eax
-80105239:	0f 88 fb 00 00 00    	js     8010533a <sys_link+0x11a>
-8010523f:	83 ec 08             	sub    $0x8,%esp
-80105242:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80105245:	50                   	push   %eax
-80105246:	6a 01                	push   $0x1
-80105248:	e8 f3 fa ff ff       	call   80104d40 <argstr>
-8010524d:	83 c4 10             	add    $0x10,%esp
-80105250:	85 c0                	test   %eax,%eax
-80105252:	0f 88 e2 00 00 00    	js     8010533a <sys_link+0x11a>
+8010613c:	50                   	push   %eax
+8010613d:	6a 00                	push   $0x0
+8010613f:	e8 0c fb ff ff       	call   80105c50 <argstr>
+80106144:	83 c4 10             	add    $0x10,%esp
+80106147:	85 c0                	test   %eax,%eax
+80106149:	0f 88 fb 00 00 00    	js     8010624a <sys_link+0x11a>
+8010614f:	83 ec 08             	sub    $0x8,%esp
+80106152:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80106155:	50                   	push   %eax
+80106156:	6a 01                	push   $0x1
+80106158:	e8 f3 fa ff ff       	call   80105c50 <argstr>
+8010615d:	83 c4 10             	add    $0x10,%esp
+80106160:	85 c0                	test   %eax,%eax
+80106162:	0f 88 e2 00 00 00    	js     8010624a <sys_link+0x11a>
   begin_op();
-80105258:	e8 03 db ff ff       	call   80102d60 <begin_op>
+80106168:	e8 f3 cb ff ff       	call   80102d60 <begin_op>
   if((ip = namei(old)) == 0){
-8010525d:	83 ec 0c             	sub    $0xc,%esp
-80105260:	ff 75 d4             	push   -0x2c(%ebp)
-80105263:	e8 38 ce ff ff       	call   801020a0 <namei>
-80105268:	83 c4 10             	add    $0x10,%esp
-8010526b:	89 c3                	mov    %eax,%ebx
-8010526d:	85 c0                	test   %eax,%eax
-8010526f:	0f 84 e4 00 00 00    	je     80105359 <sys_link+0x139>
+8010616d:	83 ec 0c             	sub    $0xc,%esp
+80106170:	ff 75 d4             	push   -0x2c(%ebp)
+80106173:	e8 28 bf ff ff       	call   801020a0 <namei>
+80106178:	83 c4 10             	add    $0x10,%esp
+8010617b:	89 c3                	mov    %eax,%ebx
+8010617d:	85 c0                	test   %eax,%eax
+8010617f:	0f 84 e4 00 00 00    	je     80106269 <sys_link+0x139>
   ilock(ip);
-80105275:	83 ec 0c             	sub    $0xc,%esp
-80105278:	50                   	push   %eax
-80105279:	e8 02 c5 ff ff       	call   80101780 <ilock>
+80106185:	83 ec 0c             	sub    $0xc,%esp
+80106188:	50                   	push   %eax
+80106189:	e8 f2 b5 ff ff       	call   80101780 <ilock>
   if(ip->type == T_DIR){
-8010527e:	83 c4 10             	add    $0x10,%esp
-80105281:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105286:	0f 84 b5 00 00 00    	je     80105341 <sys_link+0x121>
+8010618e:	83 c4 10             	add    $0x10,%esp
+80106191:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80106196:	0f 84 b5 00 00 00    	je     80106251 <sys_link+0x121>
   iupdate(ip);
-8010528c:	83 ec 0c             	sub    $0xc,%esp
+8010619c:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-8010528f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+8010619f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80105294:	8d 7d da             	lea    -0x26(%ebp),%edi
+801061a4:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80105297:	53                   	push   %ebx
-80105298:	e8 33 c4 ff ff       	call   801016d0 <iupdate>
+801061a7:	53                   	push   %ebx
+801061a8:	e8 23 b5 ff ff       	call   801016d0 <iupdate>
   iunlock(ip);
-8010529d:	89 1c 24             	mov    %ebx,(%esp)
-801052a0:	e8 bb c5 ff ff       	call   80101860 <iunlock>
+801061ad:	89 1c 24             	mov    %ebx,(%esp)
+801061b0:	e8 ab b6 ff ff       	call   80101860 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-801052a5:	58                   	pop    %eax
-801052a6:	5a                   	pop    %edx
-801052a7:	57                   	push   %edi
-801052a8:	ff 75 d0             	push   -0x30(%ebp)
-801052ab:	e8 10 ce ff ff       	call   801020c0 <nameiparent>
-801052b0:	83 c4 10             	add    $0x10,%esp
-801052b3:	89 c6                	mov    %eax,%esi
-801052b5:	85 c0                	test   %eax,%eax
-801052b7:	74 5b                	je     80105314 <sys_link+0xf4>
+801061b5:	58                   	pop    %eax
+801061b6:	5a                   	pop    %edx
+801061b7:	57                   	push   %edi
+801061b8:	ff 75 d0             	push   -0x30(%ebp)
+801061bb:	e8 00 bf ff ff       	call   801020c0 <nameiparent>
+801061c0:	83 c4 10             	add    $0x10,%esp
+801061c3:	89 c6                	mov    %eax,%esi
+801061c5:	85 c0                	test   %eax,%eax
+801061c7:	74 5b                	je     80106224 <sys_link+0xf4>
   ilock(dp);
-801052b9:	83 ec 0c             	sub    $0xc,%esp
-801052bc:	50                   	push   %eax
-801052bd:	e8 be c4 ff ff       	call   80101780 <ilock>
+801061c9:	83 ec 0c             	sub    $0xc,%esp
+801061cc:	50                   	push   %eax
+801061cd:	e8 ae b5 ff ff       	call   80101780 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-801052c2:	8b 03                	mov    (%ebx),%eax
-801052c4:	83 c4 10             	add    $0x10,%esp
-801052c7:	39 06                	cmp    %eax,(%esi)
-801052c9:	75 3d                	jne    80105308 <sys_link+0xe8>
-801052cb:	83 ec 04             	sub    $0x4,%esp
-801052ce:	ff 73 04             	push   0x4(%ebx)
-801052d1:	57                   	push   %edi
-801052d2:	56                   	push   %esi
-801052d3:	e8 08 cd ff ff       	call   80101fe0 <dirlink>
-801052d8:	83 c4 10             	add    $0x10,%esp
-801052db:	85 c0                	test   %eax,%eax
-801052dd:	78 29                	js     80105308 <sys_link+0xe8>
+801061d2:	8b 03                	mov    (%ebx),%eax
+801061d4:	83 c4 10             	add    $0x10,%esp
+801061d7:	39 06                	cmp    %eax,(%esi)
+801061d9:	75 3d                	jne    80106218 <sys_link+0xe8>
+801061db:	83 ec 04             	sub    $0x4,%esp
+801061de:	ff 73 04             	push   0x4(%ebx)
+801061e1:	57                   	push   %edi
+801061e2:	56                   	push   %esi
+801061e3:	e8 f8 bd ff ff       	call   80101fe0 <dirlink>
+801061e8:	83 c4 10             	add    $0x10,%esp
+801061eb:	85 c0                	test   %eax,%eax
+801061ed:	78 29                	js     80106218 <sys_link+0xe8>
   iunlockput(dp);
-801052df:	83 ec 0c             	sub    $0xc,%esp
-801052e2:	56                   	push   %esi
-801052e3:	e8 28 c7 ff ff       	call   80101a10 <iunlockput>
+801061ef:	83 ec 0c             	sub    $0xc,%esp
+801061f2:	56                   	push   %esi
+801061f3:	e8 18 b8 ff ff       	call   80101a10 <iunlockput>
   iput(ip);
-801052e8:	89 1c 24             	mov    %ebx,(%esp)
-801052eb:	e8 c0 c5 ff ff       	call   801018b0 <iput>
+801061f8:	89 1c 24             	mov    %ebx,(%esp)
+801061fb:	e8 b0 b6 ff ff       	call   801018b0 <iput>
   end_op();
-801052f0:	e8 db da ff ff       	call   80102dd0 <end_op>
+80106200:	e8 cb cb ff ff       	call   80102dd0 <end_op>
   return 0;
-801052f5:	83 c4 10             	add    $0x10,%esp
-801052f8:	31 c0                	xor    %eax,%eax
+80106205:	83 c4 10             	add    $0x10,%esp
+80106208:	31 c0                	xor    %eax,%eax
 }
-801052fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052fd:	5b                   	pop    %ebx
-801052fe:	5e                   	pop    %esi
-801052ff:	5f                   	pop    %edi
-80105300:	5d                   	pop    %ebp
-80105301:	c3                   	ret    
-80105302:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010620a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010620d:	5b                   	pop    %ebx
+8010620e:	5e                   	pop    %esi
+8010620f:	5f                   	pop    %edi
+80106210:	5d                   	pop    %ebp
+80106211:	c3                   	ret    
+80106212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(dp);
-80105308:	83 ec 0c             	sub    $0xc,%esp
-8010530b:	56                   	push   %esi
-8010530c:	e8 ff c6 ff ff       	call   80101a10 <iunlockput>
+80106218:	83 ec 0c             	sub    $0xc,%esp
+8010621b:	56                   	push   %esi
+8010621c:	e8 ef b7 ff ff       	call   80101a10 <iunlockput>
     goto bad;
-80105311:	83 c4 10             	add    $0x10,%esp
+80106221:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80105314:	83 ec 0c             	sub    $0xc,%esp
-80105317:	53                   	push   %ebx
-80105318:	e8 63 c4 ff ff       	call   80101780 <ilock>
+80106224:	83 ec 0c             	sub    $0xc,%esp
+80106227:	53                   	push   %ebx
+80106228:	e8 53 b5 ff ff       	call   80101780 <ilock>
   ip->nlink--;
-8010531d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+8010622d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80105322:	89 1c 24             	mov    %ebx,(%esp)
-80105325:	e8 a6 c3 ff ff       	call   801016d0 <iupdate>
+80106232:	89 1c 24             	mov    %ebx,(%esp)
+80106235:	e8 96 b4 ff ff       	call   801016d0 <iupdate>
   iunlockput(ip);
-8010532a:	89 1c 24             	mov    %ebx,(%esp)
-8010532d:	e8 de c6 ff ff       	call   80101a10 <iunlockput>
+8010623a:	89 1c 24             	mov    %ebx,(%esp)
+8010623d:	e8 ce b7 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80105332:	e8 99 da ff ff       	call   80102dd0 <end_op>
+80106242:	e8 89 cb ff ff       	call   80102dd0 <end_op>
   return -1;
-80105337:	83 c4 10             	add    $0x10,%esp
-8010533a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010533f:	eb b9                	jmp    801052fa <sys_link+0xda>
+80106247:	83 c4 10             	add    $0x10,%esp
+8010624a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010624f:	eb b9                	jmp    8010620a <sys_link+0xda>
     iunlockput(ip);
-80105341:	83 ec 0c             	sub    $0xc,%esp
-80105344:	53                   	push   %ebx
-80105345:	e8 c6 c6 ff ff       	call   80101a10 <iunlockput>
+80106251:	83 ec 0c             	sub    $0xc,%esp
+80106254:	53                   	push   %ebx
+80106255:	e8 b6 b7 ff ff       	call   80101a10 <iunlockput>
     end_op();
-8010534a:	e8 81 da ff ff       	call   80102dd0 <end_op>
+8010625a:	e8 71 cb ff ff       	call   80102dd0 <end_op>
     return -1;
-8010534f:	83 c4 10             	add    $0x10,%esp
-80105352:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105357:	eb a1                	jmp    801052fa <sys_link+0xda>
+8010625f:	83 c4 10             	add    $0x10,%esp
+80106262:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106267:	eb a1                	jmp    8010620a <sys_link+0xda>
     end_op();
-80105359:	e8 72 da ff ff       	call   80102dd0 <end_op>
+80106269:	e8 62 cb ff ff       	call   80102dd0 <end_op>
     return -1;
-8010535e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105363:	eb 95                	jmp    801052fa <sys_link+0xda>
-80105365:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80105370 <sys_unlink>:
-{
-80105370:	55                   	push   %ebp
-80105371:	89 e5                	mov    %esp,%ebp
-80105373:	57                   	push   %edi
-80105374:	56                   	push   %esi
+8010626e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106273:	eb 95                	jmp    8010620a <sys_link+0xda>
+80106275:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010627c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106280 <sys_unlink>:
+{
+80106280:	55                   	push   %ebp
+80106281:	89 e5                	mov    %esp,%ebp
+80106283:	57                   	push   %edi
+80106284:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80105375:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80106285:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80105378:	53                   	push   %ebx
-80105379:	83 ec 54             	sub    $0x54,%esp
+80106288:	53                   	push   %ebx
+80106289:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-8010537c:	50                   	push   %eax
-8010537d:	6a 00                	push   $0x0
-8010537f:	e8 bc f9 ff ff       	call   80104d40 <argstr>
-80105384:	83 c4 10             	add    $0x10,%esp
-80105387:	85 c0                	test   %eax,%eax
-80105389:	0f 88 7a 01 00 00    	js     80105509 <sys_unlink+0x199>
+8010628c:	50                   	push   %eax
+8010628d:	6a 00                	push   $0x0
+8010628f:	e8 bc f9 ff ff       	call   80105c50 <argstr>
+80106294:	83 c4 10             	add    $0x10,%esp
+80106297:	85 c0                	test   %eax,%eax
+80106299:	0f 88 7a 01 00 00    	js     80106419 <sys_unlink+0x199>
   begin_op();
-8010538f:	e8 cc d9 ff ff       	call   80102d60 <begin_op>
+8010629f:	e8 bc ca ff ff       	call   80102d60 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105394:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-80105397:	83 ec 08             	sub    $0x8,%esp
-8010539a:	53                   	push   %ebx
-8010539b:	ff 75 c0             	push   -0x40(%ebp)
-8010539e:	e8 1d cd ff ff       	call   801020c0 <nameiparent>
-801053a3:	83 c4 10             	add    $0x10,%esp
-801053a6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
-801053a9:	85 c0                	test   %eax,%eax
-801053ab:	0f 84 62 01 00 00    	je     80105513 <sys_unlink+0x1a3>
+801062a4:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+801062a7:	83 ec 08             	sub    $0x8,%esp
+801062aa:	53                   	push   %ebx
+801062ab:	ff 75 c0             	push   -0x40(%ebp)
+801062ae:	e8 0d be ff ff       	call   801020c0 <nameiparent>
+801062b3:	83 c4 10             	add    $0x10,%esp
+801062b6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+801062b9:	85 c0                	test   %eax,%eax
+801062bb:	0f 84 62 01 00 00    	je     80106423 <sys_unlink+0x1a3>
   ilock(dp);
-801053b1:	8b 7d b4             	mov    -0x4c(%ebp),%edi
-801053b4:	83 ec 0c             	sub    $0xc,%esp
-801053b7:	57                   	push   %edi
-801053b8:	e8 c3 c3 ff ff       	call   80101780 <ilock>
+801062c1:	8b 7d b4             	mov    -0x4c(%ebp),%edi
+801062c4:	83 ec 0c             	sub    $0xc,%esp
+801062c7:	57                   	push   %edi
+801062c8:	e8 b3 b4 ff ff       	call   80101780 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-801053bd:	58                   	pop    %eax
-801053be:	5a                   	pop    %edx
-801053bf:	68 64 7d 10 80       	push   $0x80107d64
-801053c4:	53                   	push   %ebx
-801053c5:	e8 f6 c8 ff ff       	call   80101cc0 <namecmp>
-801053ca:	83 c4 10             	add    $0x10,%esp
-801053cd:	85 c0                	test   %eax,%eax
-801053cf:	0f 84 fb 00 00 00    	je     801054d0 <sys_unlink+0x160>
-801053d5:	83 ec 08             	sub    $0x8,%esp
-801053d8:	68 63 7d 10 80       	push   $0x80107d63
-801053dd:	53                   	push   %ebx
-801053de:	e8 dd c8 ff ff       	call   80101cc0 <namecmp>
-801053e3:	83 c4 10             	add    $0x10,%esp
-801053e6:	85 c0                	test   %eax,%eax
-801053e8:	0f 84 e2 00 00 00    	je     801054d0 <sys_unlink+0x160>
+801062cd:	58                   	pop    %eax
+801062ce:	5a                   	pop    %edx
+801062cf:	68 a0 8d 10 80       	push   $0x80108da0
+801062d4:	53                   	push   %ebx
+801062d5:	e8 e6 b9 ff ff       	call   80101cc0 <namecmp>
+801062da:	83 c4 10             	add    $0x10,%esp
+801062dd:	85 c0                	test   %eax,%eax
+801062df:	0f 84 fb 00 00 00    	je     801063e0 <sys_unlink+0x160>
+801062e5:	83 ec 08             	sub    $0x8,%esp
+801062e8:	68 9f 8d 10 80       	push   $0x80108d9f
+801062ed:	53                   	push   %ebx
+801062ee:	e8 cd b9 ff ff       	call   80101cc0 <namecmp>
+801062f3:	83 c4 10             	add    $0x10,%esp
+801062f6:	85 c0                	test   %eax,%eax
+801062f8:	0f 84 e2 00 00 00    	je     801063e0 <sys_unlink+0x160>
   if((ip = dirlookup(dp, name, &off)) == 0)
-801053ee:	83 ec 04             	sub    $0x4,%esp
-801053f1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-801053f4:	50                   	push   %eax
-801053f5:	53                   	push   %ebx
-801053f6:	57                   	push   %edi
-801053f7:	e8 e4 c8 ff ff       	call   80101ce0 <dirlookup>
-801053fc:	83 c4 10             	add    $0x10,%esp
-801053ff:	89 c3                	mov    %eax,%ebx
-80105401:	85 c0                	test   %eax,%eax
-80105403:	0f 84 c7 00 00 00    	je     801054d0 <sys_unlink+0x160>
+801062fe:	83 ec 04             	sub    $0x4,%esp
+80106301:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80106304:	50                   	push   %eax
+80106305:	53                   	push   %ebx
+80106306:	57                   	push   %edi
+80106307:	e8 d4 b9 ff ff       	call   80101ce0 <dirlookup>
+8010630c:	83 c4 10             	add    $0x10,%esp
+8010630f:	89 c3                	mov    %eax,%ebx
+80106311:	85 c0                	test   %eax,%eax
+80106313:	0f 84 c7 00 00 00    	je     801063e0 <sys_unlink+0x160>
   ilock(ip);
-80105409:	83 ec 0c             	sub    $0xc,%esp
-8010540c:	50                   	push   %eax
-8010540d:	e8 6e c3 ff ff       	call   80101780 <ilock>
+80106319:	83 ec 0c             	sub    $0xc,%esp
+8010631c:	50                   	push   %eax
+8010631d:	e8 5e b4 ff ff       	call   80101780 <ilock>
   if(ip->nlink < 1)
-80105412:	83 c4 10             	add    $0x10,%esp
-80105415:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010541a:	0f 8e 1c 01 00 00    	jle    8010553c <sys_unlink+0x1cc>
+80106322:	83 c4 10             	add    $0x10,%esp
+80106325:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010632a:	0f 8e 1c 01 00 00    	jle    8010644c <sys_unlink+0x1cc>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105420:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105425:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105428:	74 66                	je     80105490 <sys_unlink+0x120>
+80106330:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80106335:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80106338:	74 66                	je     801063a0 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-8010542a:	83 ec 04             	sub    $0x4,%esp
-8010542d:	6a 10                	push   $0x10
-8010542f:	6a 00                	push   $0x0
-80105431:	57                   	push   %edi
-80105432:	e8 89 f5 ff ff       	call   801049c0 <memset>
+8010633a:	83 ec 04             	sub    $0x4,%esp
+8010633d:	6a 10                	push   $0x10
+8010633f:	6a 00                	push   $0x0
+80106341:	57                   	push   %edi
+80106342:	e8 89 f5 ff ff       	call   801058d0 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105437:	6a 10                	push   $0x10
-80105439:	ff 75 c4             	push   -0x3c(%ebp)
-8010543c:	57                   	push   %edi
-8010543d:	ff 75 b4             	push   -0x4c(%ebp)
-80105440:	e8 4b c7 ff ff       	call   80101b90 <writei>
-80105445:	83 c4 20             	add    $0x20,%esp
-80105448:	83 f8 10             	cmp    $0x10,%eax
-8010544b:	0f 85 de 00 00 00    	jne    8010552f <sys_unlink+0x1bf>
+80106347:	6a 10                	push   $0x10
+80106349:	ff 75 c4             	push   -0x3c(%ebp)
+8010634c:	57                   	push   %edi
+8010634d:	ff 75 b4             	push   -0x4c(%ebp)
+80106350:	e8 3b b8 ff ff       	call   80101b90 <writei>
+80106355:	83 c4 20             	add    $0x20,%esp
+80106358:	83 f8 10             	cmp    $0x10,%eax
+8010635b:	0f 85 de 00 00 00    	jne    8010643f <sys_unlink+0x1bf>
   if(ip->type == T_DIR){
-80105451:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105456:	0f 84 94 00 00 00    	je     801054f0 <sys_unlink+0x180>
+80106361:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80106366:	0f 84 94 00 00 00    	je     80106400 <sys_unlink+0x180>
   iunlockput(dp);
-8010545c:	83 ec 0c             	sub    $0xc,%esp
-8010545f:	ff 75 b4             	push   -0x4c(%ebp)
-80105462:	e8 a9 c5 ff ff       	call   80101a10 <iunlockput>
+8010636c:	83 ec 0c             	sub    $0xc,%esp
+8010636f:	ff 75 b4             	push   -0x4c(%ebp)
+80106372:	e8 99 b6 ff ff       	call   80101a10 <iunlockput>
   ip->nlink--;
-80105467:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80106377:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-8010546c:	89 1c 24             	mov    %ebx,(%esp)
-8010546f:	e8 5c c2 ff ff       	call   801016d0 <iupdate>
+8010637c:	89 1c 24             	mov    %ebx,(%esp)
+8010637f:	e8 4c b3 ff ff       	call   801016d0 <iupdate>
   iunlockput(ip);
-80105474:	89 1c 24             	mov    %ebx,(%esp)
-80105477:	e8 94 c5 ff ff       	call   80101a10 <iunlockput>
+80106384:	89 1c 24             	mov    %ebx,(%esp)
+80106387:	e8 84 b6 ff ff       	call   80101a10 <iunlockput>
   end_op();
-8010547c:	e8 4f d9 ff ff       	call   80102dd0 <end_op>
+8010638c:	e8 3f ca ff ff       	call   80102dd0 <end_op>
   return 0;
-80105481:	83 c4 10             	add    $0x10,%esp
-80105484:	31 c0                	xor    %eax,%eax
+80106391:	83 c4 10             	add    $0x10,%esp
+80106394:	31 c0                	xor    %eax,%eax
 }
-80105486:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105489:	5b                   	pop    %ebx
-8010548a:	5e                   	pop    %esi
-8010548b:	5f                   	pop    %edi
-8010548c:	5d                   	pop    %ebp
-8010548d:	c3                   	ret    
-8010548e:	66 90                	xchg   %ax,%ax
+80106396:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106399:	5b                   	pop    %ebx
+8010639a:	5e                   	pop    %esi
+8010639b:	5f                   	pop    %edi
+8010639c:	5d                   	pop    %ebp
+8010639d:	c3                   	ret    
+8010639e:	66 90                	xchg   %ax,%ax
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105490:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105494:	76 94                	jbe    8010542a <sys_unlink+0xba>
-80105496:	be 20 00 00 00       	mov    $0x20,%esi
-8010549b:	eb 0b                	jmp    801054a8 <sys_unlink+0x138>
-8010549d:	8d 76 00             	lea    0x0(%esi),%esi
-801054a0:	83 c6 10             	add    $0x10,%esi
-801054a3:	3b 73 58             	cmp    0x58(%ebx),%esi
-801054a6:	73 82                	jae    8010542a <sys_unlink+0xba>
+801063a0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+801063a4:	76 94                	jbe    8010633a <sys_unlink+0xba>
+801063a6:	be 20 00 00 00       	mov    $0x20,%esi
+801063ab:	eb 0b                	jmp    801063b8 <sys_unlink+0x138>
+801063ad:	8d 76 00             	lea    0x0(%esi),%esi
+801063b0:	83 c6 10             	add    $0x10,%esi
+801063b3:	3b 73 58             	cmp    0x58(%ebx),%esi
+801063b6:	73 82                	jae    8010633a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801054a8:	6a 10                	push   $0x10
-801054aa:	56                   	push   %esi
-801054ab:	57                   	push   %edi
-801054ac:	53                   	push   %ebx
-801054ad:	e8 de c5 ff ff       	call   80101a90 <readi>
-801054b2:	83 c4 10             	add    $0x10,%esp
-801054b5:	83 f8 10             	cmp    $0x10,%eax
-801054b8:	75 68                	jne    80105522 <sys_unlink+0x1b2>
+801063b8:	6a 10                	push   $0x10
+801063ba:	56                   	push   %esi
+801063bb:	57                   	push   %edi
+801063bc:	53                   	push   %ebx
+801063bd:	e8 ce b6 ff ff       	call   80101a90 <readi>
+801063c2:	83 c4 10             	add    $0x10,%esp
+801063c5:	83 f8 10             	cmp    $0x10,%eax
+801063c8:	75 68                	jne    80106432 <sys_unlink+0x1b2>
     if(de.inum != 0)
-801054ba:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-801054bf:	74 df                	je     801054a0 <sys_unlink+0x130>
+801063ca:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801063cf:	74 df                	je     801063b0 <sys_unlink+0x130>
     iunlockput(ip);
-801054c1:	83 ec 0c             	sub    $0xc,%esp
-801054c4:	53                   	push   %ebx
-801054c5:	e8 46 c5 ff ff       	call   80101a10 <iunlockput>
+801063d1:	83 ec 0c             	sub    $0xc,%esp
+801063d4:	53                   	push   %ebx
+801063d5:	e8 36 b6 ff ff       	call   80101a10 <iunlockput>
     goto bad;
-801054ca:	83 c4 10             	add    $0x10,%esp
-801054cd:	8d 76 00             	lea    0x0(%esi),%esi
+801063da:	83 c4 10             	add    $0x10,%esp
+801063dd:	8d 76 00             	lea    0x0(%esi),%esi
   iunlockput(dp);
-801054d0:	83 ec 0c             	sub    $0xc,%esp
-801054d3:	ff 75 b4             	push   -0x4c(%ebp)
-801054d6:	e8 35 c5 ff ff       	call   80101a10 <iunlockput>
+801063e0:	83 ec 0c             	sub    $0xc,%esp
+801063e3:	ff 75 b4             	push   -0x4c(%ebp)
+801063e6:	e8 25 b6 ff ff       	call   80101a10 <iunlockput>
   end_op();
-801054db:	e8 f0 d8 ff ff       	call   80102dd0 <end_op>
+801063eb:	e8 e0 c9 ff ff       	call   80102dd0 <end_op>
   return -1;
-801054e0:	83 c4 10             	add    $0x10,%esp
-801054e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054e8:	eb 9c                	jmp    80105486 <sys_unlink+0x116>
-801054ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801063f0:	83 c4 10             	add    $0x10,%esp
+801063f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801063f8:	eb 9c                	jmp    80106396 <sys_unlink+0x116>
+801063fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     dp->nlink--;
-801054f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+80106400:	8b 45 b4             	mov    -0x4c(%ebp),%eax
     iupdate(dp);
-801054f3:	83 ec 0c             	sub    $0xc,%esp
+80106403:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-801054f6:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
+80106406:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
     iupdate(dp);
-801054fb:	50                   	push   %eax
-801054fc:	e8 cf c1 ff ff       	call   801016d0 <iupdate>
-80105501:	83 c4 10             	add    $0x10,%esp
-80105504:	e9 53 ff ff ff       	jmp    8010545c <sys_unlink+0xec>
+8010640b:	50                   	push   %eax
+8010640c:	e8 bf b2 ff ff       	call   801016d0 <iupdate>
+80106411:	83 c4 10             	add    $0x10,%esp
+80106414:	e9 53 ff ff ff       	jmp    8010636c <sys_unlink+0xec>
     return -1;
-80105509:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010550e:	e9 73 ff ff ff       	jmp    80105486 <sys_unlink+0x116>
+80106419:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010641e:	e9 73 ff ff ff       	jmp    80106396 <sys_unlink+0x116>
     end_op();
-80105513:	e8 b8 d8 ff ff       	call   80102dd0 <end_op>
+80106423:	e8 a8 c9 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105518:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010551d:	e9 64 ff ff ff       	jmp    80105486 <sys_unlink+0x116>
+80106428:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010642d:	e9 64 ff ff ff       	jmp    80106396 <sys_unlink+0x116>
       panic("isdirempty: readi");
-80105522:	83 ec 0c             	sub    $0xc,%esp
-80105525:	68 88 7d 10 80       	push   $0x80107d88
-8010552a:	e8 51 ae ff ff       	call   80100380 <panic>
+80106432:	83 ec 0c             	sub    $0xc,%esp
+80106435:	68 c4 8d 10 80       	push   $0x80108dc4
+8010643a:	e8 41 9f ff ff       	call   80100380 <panic>
     panic("unlink: writei");
-8010552f:	83 ec 0c             	sub    $0xc,%esp
-80105532:	68 9a 7d 10 80       	push   $0x80107d9a
-80105537:	e8 44 ae ff ff       	call   80100380 <panic>
+8010643f:	83 ec 0c             	sub    $0xc,%esp
+80106442:	68 d6 8d 10 80       	push   $0x80108dd6
+80106447:	e8 34 9f ff ff       	call   80100380 <panic>
     panic("unlink: nlink < 1");
-8010553c:	83 ec 0c             	sub    $0xc,%esp
-8010553f:	68 76 7d 10 80       	push   $0x80107d76
-80105544:	e8 37 ae ff ff       	call   80100380 <panic>
-80105549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010644c:	83 ec 0c             	sub    $0xc,%esp
+8010644f:	68 b2 8d 10 80       	push   $0x80108db2
+80106454:	e8 27 9f ff ff       	call   80100380 <panic>
+80106459:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105550 <sys_open>:
+80106460 <sys_open>:
 
 int
 sys_open(void)
 {
-80105550:	55                   	push   %ebp
-80105551:	89 e5                	mov    %esp,%ebp
-80105553:	57                   	push   %edi
-80105554:	56                   	push   %esi
+80106460:	55                   	push   %ebp
+80106461:	89 e5                	mov    %esp,%ebp
+80106463:	57                   	push   %edi
+80106464:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80105555:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80106465:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-80105558:	53                   	push   %ebx
-80105559:	83 ec 24             	sub    $0x24,%esp
+80106468:	53                   	push   %ebx
+80106469:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-8010555c:	50                   	push   %eax
-8010555d:	6a 00                	push   $0x0
-8010555f:	e8 dc f7 ff ff       	call   80104d40 <argstr>
-80105564:	83 c4 10             	add    $0x10,%esp
-80105567:	85 c0                	test   %eax,%eax
-80105569:	0f 88 8e 00 00 00    	js     801055fd <sys_open+0xad>
-8010556f:	83 ec 08             	sub    $0x8,%esp
-80105572:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105575:	50                   	push   %eax
-80105576:	6a 01                	push   $0x1
-80105578:	e8 03 f7 ff ff       	call   80104c80 <argint>
-8010557d:	83 c4 10             	add    $0x10,%esp
-80105580:	85 c0                	test   %eax,%eax
-80105582:	78 79                	js     801055fd <sys_open+0xad>
+8010646c:	50                   	push   %eax
+8010646d:	6a 00                	push   $0x0
+8010646f:	e8 dc f7 ff ff       	call   80105c50 <argstr>
+80106474:	83 c4 10             	add    $0x10,%esp
+80106477:	85 c0                	test   %eax,%eax
+80106479:	0f 88 8e 00 00 00    	js     8010650d <sys_open+0xad>
+8010647f:	83 ec 08             	sub    $0x8,%esp
+80106482:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106485:	50                   	push   %eax
+80106486:	6a 01                	push   $0x1
+80106488:	e8 03 f7 ff ff       	call   80105b90 <argint>
+8010648d:	83 c4 10             	add    $0x10,%esp
+80106490:	85 c0                	test   %eax,%eax
+80106492:	78 79                	js     8010650d <sys_open+0xad>
     return -1;
 
   begin_op();
-80105584:	e8 d7 d7 ff ff       	call   80102d60 <begin_op>
+80106494:	e8 c7 c8 ff ff       	call   80102d60 <begin_op>
 
   if(omode & O_CREATE){
-80105589:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-8010558d:	75 79                	jne    80105608 <sys_open+0xb8>
+80106499:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+8010649d:	75 79                	jne    80106518 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-8010558f:	83 ec 0c             	sub    $0xc,%esp
-80105592:	ff 75 e0             	push   -0x20(%ebp)
-80105595:	e8 06 cb ff ff       	call   801020a0 <namei>
-8010559a:	83 c4 10             	add    $0x10,%esp
-8010559d:	89 c6                	mov    %eax,%esi
-8010559f:	85 c0                	test   %eax,%eax
-801055a1:	0f 84 7e 00 00 00    	je     80105625 <sys_open+0xd5>
+8010649f:	83 ec 0c             	sub    $0xc,%esp
+801064a2:	ff 75 e0             	push   -0x20(%ebp)
+801064a5:	e8 f6 bb ff ff       	call   801020a0 <namei>
+801064aa:	83 c4 10             	add    $0x10,%esp
+801064ad:	89 c6                	mov    %eax,%esi
+801064af:	85 c0                	test   %eax,%eax
+801064b1:	0f 84 7e 00 00 00    	je     80106535 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-801055a7:	83 ec 0c             	sub    $0xc,%esp
-801055aa:	50                   	push   %eax
-801055ab:	e8 d0 c1 ff ff       	call   80101780 <ilock>
+801064b7:	83 ec 0c             	sub    $0xc,%esp
+801064ba:	50                   	push   %eax
+801064bb:	e8 c0 b2 ff ff       	call   80101780 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-801055b0:	83 c4 10             	add    $0x10,%esp
-801055b3:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-801055b8:	0f 84 c2 00 00 00    	je     80105680 <sys_open+0x130>
+801064c0:	83 c4 10             	add    $0x10,%esp
+801064c3:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+801064c8:	0f 84 c2 00 00 00    	je     80106590 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-801055be:	e8 6d b8 ff ff       	call   80100e30 <filealloc>
-801055c3:	89 c7                	mov    %eax,%edi
-801055c5:	85 c0                	test   %eax,%eax
-801055c7:	74 23                	je     801055ec <sys_open+0x9c>
+801064ce:	e8 5d a9 ff ff       	call   80100e30 <filealloc>
+801064d3:	89 c7                	mov    %eax,%edi
+801064d5:	85 c0                	test   %eax,%eax
+801064d7:	74 23                	je     801064fc <sys_open+0x9c>
   struct proc *curproc = myproc();
-801055c9:	e8 e2 e3 ff ff       	call   801039b0 <myproc>
+801064d9:	e8 d2 dd ff ff       	call   801042b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-801055ce:	31 db                	xor    %ebx,%ebx
+801064de:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-801055d0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-801055d4:	85 d2                	test   %edx,%edx
-801055d6:	74 60                	je     80105638 <sys_open+0xe8>
+801064e0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801064e4:	85 d2                	test   %edx,%edx
+801064e6:	74 60                	je     80106548 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-801055d8:	83 c3 01             	add    $0x1,%ebx
-801055db:	83 fb 10             	cmp    $0x10,%ebx
-801055de:	75 f0                	jne    801055d0 <sys_open+0x80>
+801064e8:	83 c3 01             	add    $0x1,%ebx
+801064eb:	83 fb 10             	cmp    $0x10,%ebx
+801064ee:	75 f0                	jne    801064e0 <sys_open+0x80>
     if(f)
       fileclose(f);
-801055e0:	83 ec 0c             	sub    $0xc,%esp
-801055e3:	57                   	push   %edi
-801055e4:	e8 07 b9 ff ff       	call   80100ef0 <fileclose>
-801055e9:	83 c4 10             	add    $0x10,%esp
+801064f0:	83 ec 0c             	sub    $0xc,%esp
+801064f3:	57                   	push   %edi
+801064f4:	e8 f7 a9 ff ff       	call   80100ef0 <fileclose>
+801064f9:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-801055ec:	83 ec 0c             	sub    $0xc,%esp
-801055ef:	56                   	push   %esi
-801055f0:	e8 1b c4 ff ff       	call   80101a10 <iunlockput>
+801064fc:	83 ec 0c             	sub    $0xc,%esp
+801064ff:	56                   	push   %esi
+80106500:	e8 0b b5 ff ff       	call   80101a10 <iunlockput>
     end_op();
-801055f5:	e8 d6 d7 ff ff       	call   80102dd0 <end_op>
+80106505:	e8 c6 c8 ff ff       	call   80102dd0 <end_op>
     return -1;
-801055fa:	83 c4 10             	add    $0x10,%esp
-801055fd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105602:	eb 6d                	jmp    80105671 <sys_open+0x121>
-80105604:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010650a:	83 c4 10             	add    $0x10,%esp
+8010650d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80106512:	eb 6d                	jmp    80106581 <sys_open+0x121>
+80106514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105608:	83 ec 0c             	sub    $0xc,%esp
-8010560b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010560e:	31 c9                	xor    %ecx,%ecx
-80105610:	ba 02 00 00 00       	mov    $0x2,%edx
-80105615:	6a 00                	push   $0x0
-80105617:	e8 14 f8 ff ff       	call   80104e30 <create>
+80106518:	83 ec 0c             	sub    $0xc,%esp
+8010651b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010651e:	31 c9                	xor    %ecx,%ecx
+80106520:	ba 02 00 00 00       	mov    $0x2,%edx
+80106525:	6a 00                	push   $0x0
+80106527:	e8 14 f8 ff ff       	call   80105d40 <create>
     if(ip == 0){
-8010561c:	83 c4 10             	add    $0x10,%esp
+8010652c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-8010561f:	89 c6                	mov    %eax,%esi
+8010652f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105621:	85 c0                	test   %eax,%eax
-80105623:	75 99                	jne    801055be <sys_open+0x6e>
+80106531:	85 c0                	test   %eax,%eax
+80106533:	75 99                	jne    801064ce <sys_open+0x6e>
       end_op();
-80105625:	e8 a6 d7 ff ff       	call   80102dd0 <end_op>
+80106535:	e8 96 c8 ff ff       	call   80102dd0 <end_op>
       return -1;
-8010562a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-8010562f:	eb 40                	jmp    80105671 <sys_open+0x121>
-80105631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010653a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010653f:	eb 40                	jmp    80106581 <sys_open+0x121>
+80106541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-80105638:	83 ec 0c             	sub    $0xc,%esp
+80106548:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-8010563b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+8010654b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-8010563f:	56                   	push   %esi
-80105640:	e8 1b c2 ff ff       	call   80101860 <iunlock>
+8010654f:	56                   	push   %esi
+80106550:	e8 0b b3 ff ff       	call   80101860 <iunlock>
   end_op();
-80105645:	e8 86 d7 ff ff       	call   80102dd0 <end_op>
+80106555:	e8 76 c8 ff ff       	call   80102dd0 <end_op>
 
   f->type = FD_INODE;
-8010564a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+8010655a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-80105650:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106560:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105653:	83 c4 10             	add    $0x10,%esp
+80106563:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-80105656:	89 77 10             	mov    %esi,0x10(%edi)
+80106566:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-80105659:	89 d0                	mov    %edx,%eax
+80106569:	89 d0                	mov    %edx,%eax
   f->off = 0;
-8010565b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+8010656b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-80105662:	f7 d0                	not    %eax
-80105664:	83 e0 01             	and    $0x1,%eax
+80106572:	f7 d0                	not    %eax
+80106574:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105667:	83 e2 03             	and    $0x3,%edx
+80106577:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-8010566a:	88 47 08             	mov    %al,0x8(%edi)
+8010657a:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-8010566d:	0f 95 47 09          	setne  0x9(%edi)
+8010657d:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-80105671:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105674:	89 d8                	mov    %ebx,%eax
-80105676:	5b                   	pop    %ebx
-80105677:	5e                   	pop    %esi
-80105678:	5f                   	pop    %edi
-80105679:	5d                   	pop    %ebp
-8010567a:	c3                   	ret    
-8010567b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010567f:	90                   	nop
+80106581:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106584:	89 d8                	mov    %ebx,%eax
+80106586:	5b                   	pop    %ebx
+80106587:	5e                   	pop    %esi
+80106588:	5f                   	pop    %edi
+80106589:	5d                   	pop    %ebp
+8010658a:	c3                   	ret    
+8010658b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010658f:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105680:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80105683:	85 c9                	test   %ecx,%ecx
-80105685:	0f 84 33 ff ff ff    	je     801055be <sys_open+0x6e>
-8010568b:	e9 5c ff ff ff       	jmp    801055ec <sys_open+0x9c>
+80106590:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106593:	85 c9                	test   %ecx,%ecx
+80106595:	0f 84 33 ff ff ff    	je     801064ce <sys_open+0x6e>
+8010659b:	e9 5c ff ff ff       	jmp    801064fc <sys_open+0x9c>
 
-80105690 <sys_mkdir>:
+801065a0 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105690:	55                   	push   %ebp
-80105691:	89 e5                	mov    %esp,%ebp
-80105693:	83 ec 18             	sub    $0x18,%esp
+801065a0:	55                   	push   %ebp
+801065a1:	89 e5                	mov    %esp,%ebp
+801065a3:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-80105696:	e8 c5 d6 ff ff       	call   80102d60 <begin_op>
+801065a6:	e8 b5 c7 ff ff       	call   80102d60 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010569b:	83 ec 08             	sub    $0x8,%esp
-8010569e:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056a1:	50                   	push   %eax
-801056a2:	6a 00                	push   $0x0
-801056a4:	e8 97 f6 ff ff       	call   80104d40 <argstr>
-801056a9:	83 c4 10             	add    $0x10,%esp
-801056ac:	85 c0                	test   %eax,%eax
-801056ae:	78 30                	js     801056e0 <sys_mkdir+0x50>
-801056b0:	83 ec 0c             	sub    $0xc,%esp
-801056b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
-801056b6:	31 c9                	xor    %ecx,%ecx
-801056b8:	ba 01 00 00 00       	mov    $0x1,%edx
-801056bd:	6a 00                	push   $0x0
-801056bf:	e8 6c f7 ff ff       	call   80104e30 <create>
-801056c4:	83 c4 10             	add    $0x10,%esp
-801056c7:	85 c0                	test   %eax,%eax
-801056c9:	74 15                	je     801056e0 <sys_mkdir+0x50>
+801065ab:	83 ec 08             	sub    $0x8,%esp
+801065ae:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801065b1:	50                   	push   %eax
+801065b2:	6a 00                	push   $0x0
+801065b4:	e8 97 f6 ff ff       	call   80105c50 <argstr>
+801065b9:	83 c4 10             	add    $0x10,%esp
+801065bc:	85 c0                	test   %eax,%eax
+801065be:	78 30                	js     801065f0 <sys_mkdir+0x50>
+801065c0:	83 ec 0c             	sub    $0xc,%esp
+801065c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801065c6:	31 c9                	xor    %ecx,%ecx
+801065c8:	ba 01 00 00 00       	mov    $0x1,%edx
+801065cd:	6a 00                	push   $0x0
+801065cf:	e8 6c f7 ff ff       	call   80105d40 <create>
+801065d4:	83 c4 10             	add    $0x10,%esp
+801065d7:	85 c0                	test   %eax,%eax
+801065d9:	74 15                	je     801065f0 <sys_mkdir+0x50>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801056cb:	83 ec 0c             	sub    $0xc,%esp
-801056ce:	50                   	push   %eax
-801056cf:	e8 3c c3 ff ff       	call   80101a10 <iunlockput>
+801065db:	83 ec 0c             	sub    $0xc,%esp
+801065de:	50                   	push   %eax
+801065df:	e8 2c b4 ff ff       	call   80101a10 <iunlockput>
   end_op();
-801056d4:	e8 f7 d6 ff ff       	call   80102dd0 <end_op>
+801065e4:	e8 e7 c7 ff ff       	call   80102dd0 <end_op>
   return 0;
-801056d9:	83 c4 10             	add    $0x10,%esp
-801056dc:	31 c0                	xor    %eax,%eax
+801065e9:	83 c4 10             	add    $0x10,%esp
+801065ec:	31 c0                	xor    %eax,%eax
 }
-801056de:	c9                   	leave  
-801056df:	c3                   	ret    
+801065ee:	c9                   	leave  
+801065ef:	c3                   	ret    
     end_op();
-801056e0:	e8 eb d6 ff ff       	call   80102dd0 <end_op>
+801065f0:	e8 db c7 ff ff       	call   80102dd0 <end_op>
     return -1;
-801056e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801065f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801056ea:	c9                   	leave  
-801056eb:	c3                   	ret    
-801056ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801065fa:	c9                   	leave  
+801065fb:	c3                   	ret    
+801065fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801056f0 <sys_mknod>:
+80106600 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-801056f0:	55                   	push   %ebp
-801056f1:	89 e5                	mov    %esp,%ebp
-801056f3:	83 ec 18             	sub    $0x18,%esp
+80106600:	55                   	push   %ebp
+80106601:	89 e5                	mov    %esp,%ebp
+80106603:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-801056f6:	e8 65 d6 ff ff       	call   80102d60 <begin_op>
+80106606:	e8 55 c7 ff ff       	call   80102d60 <begin_op>
   if((argstr(0, &path)) < 0 ||
-801056fb:	83 ec 08             	sub    $0x8,%esp
-801056fe:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105701:	50                   	push   %eax
-80105702:	6a 00                	push   $0x0
-80105704:	e8 37 f6 ff ff       	call   80104d40 <argstr>
-80105709:	83 c4 10             	add    $0x10,%esp
-8010570c:	85 c0                	test   %eax,%eax
-8010570e:	78 60                	js     80105770 <sys_mknod+0x80>
+8010660b:	83 ec 08             	sub    $0x8,%esp
+8010660e:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106611:	50                   	push   %eax
+80106612:	6a 00                	push   $0x0
+80106614:	e8 37 f6 ff ff       	call   80105c50 <argstr>
+80106619:	83 c4 10             	add    $0x10,%esp
+8010661c:	85 c0                	test   %eax,%eax
+8010661e:	78 60                	js     80106680 <sys_mknod+0x80>
      argint(1, &major) < 0 ||
-80105710:	83 ec 08             	sub    $0x8,%esp
-80105713:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105716:	50                   	push   %eax
-80105717:	6a 01                	push   $0x1
-80105719:	e8 62 f5 ff ff       	call   80104c80 <argint>
+80106620:	83 ec 08             	sub    $0x8,%esp
+80106623:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106626:	50                   	push   %eax
+80106627:	6a 01                	push   $0x1
+80106629:	e8 62 f5 ff ff       	call   80105b90 <argint>
   if((argstr(0, &path)) < 0 ||
-8010571e:	83 c4 10             	add    $0x10,%esp
-80105721:	85 c0                	test   %eax,%eax
-80105723:	78 4b                	js     80105770 <sys_mknod+0x80>
+8010662e:	83 c4 10             	add    $0x10,%esp
+80106631:	85 c0                	test   %eax,%eax
+80106633:	78 4b                	js     80106680 <sys_mknod+0x80>
      argint(2, &minor) < 0 ||
-80105725:	83 ec 08             	sub    $0x8,%esp
-80105728:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010572b:	50                   	push   %eax
-8010572c:	6a 02                	push   $0x2
-8010572e:	e8 4d f5 ff ff       	call   80104c80 <argint>
+80106635:	83 ec 08             	sub    $0x8,%esp
+80106638:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010663b:	50                   	push   %eax
+8010663c:	6a 02                	push   $0x2
+8010663e:	e8 4d f5 ff ff       	call   80105b90 <argint>
      argint(1, &major) < 0 ||
-80105733:	83 c4 10             	add    $0x10,%esp
-80105736:	85 c0                	test   %eax,%eax
-80105738:	78 36                	js     80105770 <sys_mknod+0x80>
+80106643:	83 c4 10             	add    $0x10,%esp
+80106646:	85 c0                	test   %eax,%eax
+80106648:	78 36                	js     80106680 <sys_mknod+0x80>
      (ip = create(path, T_DEV, major, minor)) == 0){
-8010573a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-8010573e:	83 ec 0c             	sub    $0xc,%esp
-80105741:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-80105745:	ba 03 00 00 00       	mov    $0x3,%edx
-8010574a:	50                   	push   %eax
-8010574b:	8b 45 ec             	mov    -0x14(%ebp),%eax
-8010574e:	e8 dd f6 ff ff       	call   80104e30 <create>
+8010664a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+8010664e:	83 ec 0c             	sub    $0xc,%esp
+80106651:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80106655:	ba 03 00 00 00       	mov    $0x3,%edx
+8010665a:	50                   	push   %eax
+8010665b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010665e:	e8 dd f6 ff ff       	call   80105d40 <create>
      argint(2, &minor) < 0 ||
-80105753:	83 c4 10             	add    $0x10,%esp
-80105756:	85 c0                	test   %eax,%eax
-80105758:	74 16                	je     80105770 <sys_mknod+0x80>
+80106663:	83 c4 10             	add    $0x10,%esp
+80106666:	85 c0                	test   %eax,%eax
+80106668:	74 16                	je     80106680 <sys_mknod+0x80>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010575a:	83 ec 0c             	sub    $0xc,%esp
-8010575d:	50                   	push   %eax
-8010575e:	e8 ad c2 ff ff       	call   80101a10 <iunlockput>
+8010666a:	83 ec 0c             	sub    $0xc,%esp
+8010666d:	50                   	push   %eax
+8010666e:	e8 9d b3 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80105763:	e8 68 d6 ff ff       	call   80102dd0 <end_op>
+80106673:	e8 58 c7 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105768:	83 c4 10             	add    $0x10,%esp
-8010576b:	31 c0                	xor    %eax,%eax
+80106678:	83 c4 10             	add    $0x10,%esp
+8010667b:	31 c0                	xor    %eax,%eax
 }
-8010576d:	c9                   	leave  
-8010576e:	c3                   	ret    
-8010576f:	90                   	nop
+8010667d:	c9                   	leave  
+8010667e:	c3                   	ret    
+8010667f:	90                   	nop
     end_op();
-80105770:	e8 5b d6 ff ff       	call   80102dd0 <end_op>
+80106680:	e8 4b c7 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105775:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106685:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010577a:	c9                   	leave  
-8010577b:	c3                   	ret    
-8010577c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010668a:	c9                   	leave  
+8010668b:	c3                   	ret    
+8010668c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105780 <sys_chdir>:
+80106690 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105780:	55                   	push   %ebp
-80105781:	89 e5                	mov    %esp,%ebp
-80105783:	56                   	push   %esi
-80105784:	53                   	push   %ebx
-80105785:	83 ec 10             	sub    $0x10,%esp
+80106690:	55                   	push   %ebp
+80106691:	89 e5                	mov    %esp,%ebp
+80106693:	56                   	push   %esi
+80106694:	53                   	push   %ebx
+80106695:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-80105788:	e8 23 e2 ff ff       	call   801039b0 <myproc>
-8010578d:	89 c6                	mov    %eax,%esi
+80106698:	e8 13 dc ff ff       	call   801042b0 <myproc>
+8010669d:	89 c6                	mov    %eax,%esi
   
   begin_op();
-8010578f:	e8 cc d5 ff ff       	call   80102d60 <begin_op>
+8010669f:	e8 bc c6 ff ff       	call   80102d60 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105794:	83 ec 08             	sub    $0x8,%esp
-80105797:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010579a:	50                   	push   %eax
-8010579b:	6a 00                	push   $0x0
-8010579d:	e8 9e f5 ff ff       	call   80104d40 <argstr>
-801057a2:	83 c4 10             	add    $0x10,%esp
-801057a5:	85 c0                	test   %eax,%eax
-801057a7:	78 77                	js     80105820 <sys_chdir+0xa0>
-801057a9:	83 ec 0c             	sub    $0xc,%esp
-801057ac:	ff 75 f4             	push   -0xc(%ebp)
-801057af:	e8 ec c8 ff ff       	call   801020a0 <namei>
-801057b4:	83 c4 10             	add    $0x10,%esp
-801057b7:	89 c3                	mov    %eax,%ebx
-801057b9:	85 c0                	test   %eax,%eax
-801057bb:	74 63                	je     80105820 <sys_chdir+0xa0>
+801066a4:	83 ec 08             	sub    $0x8,%esp
+801066a7:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801066aa:	50                   	push   %eax
+801066ab:	6a 00                	push   $0x0
+801066ad:	e8 9e f5 ff ff       	call   80105c50 <argstr>
+801066b2:	83 c4 10             	add    $0x10,%esp
+801066b5:	85 c0                	test   %eax,%eax
+801066b7:	78 77                	js     80106730 <sys_chdir+0xa0>
+801066b9:	83 ec 0c             	sub    $0xc,%esp
+801066bc:	ff 75 f4             	push   -0xc(%ebp)
+801066bf:	e8 dc b9 ff ff       	call   801020a0 <namei>
+801066c4:	83 c4 10             	add    $0x10,%esp
+801066c7:	89 c3                	mov    %eax,%ebx
+801066c9:	85 c0                	test   %eax,%eax
+801066cb:	74 63                	je     80106730 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-801057bd:	83 ec 0c             	sub    $0xc,%esp
-801057c0:	50                   	push   %eax
-801057c1:	e8 ba bf ff ff       	call   80101780 <ilock>
+801066cd:	83 ec 0c             	sub    $0xc,%esp
+801066d0:	50                   	push   %eax
+801066d1:	e8 aa b0 ff ff       	call   80101780 <ilock>
   if(ip->type != T_DIR){
-801057c6:	83 c4 10             	add    $0x10,%esp
-801057c9:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801057ce:	75 30                	jne    80105800 <sys_chdir+0x80>
+801066d6:	83 c4 10             	add    $0x10,%esp
+801066d9:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801066de:	75 30                	jne    80106710 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-801057d0:	83 ec 0c             	sub    $0xc,%esp
-801057d3:	53                   	push   %ebx
-801057d4:	e8 87 c0 ff ff       	call   80101860 <iunlock>
+801066e0:	83 ec 0c             	sub    $0xc,%esp
+801066e3:	53                   	push   %ebx
+801066e4:	e8 77 b1 ff ff       	call   80101860 <iunlock>
   iput(curproc->cwd);
-801057d9:	58                   	pop    %eax
-801057da:	ff 76 68             	push   0x68(%esi)
-801057dd:	e8 ce c0 ff ff       	call   801018b0 <iput>
+801066e9:	58                   	pop    %eax
+801066ea:	ff 76 68             	push   0x68(%esi)
+801066ed:	e8 be b1 ff ff       	call   801018b0 <iput>
   end_op();
-801057e2:	e8 e9 d5 ff ff       	call   80102dd0 <end_op>
+801066f2:	e8 d9 c6 ff ff       	call   80102dd0 <end_op>
   curproc->cwd = ip;
-801057e7:	89 5e 68             	mov    %ebx,0x68(%esi)
+801066f7:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-801057ea:	83 c4 10             	add    $0x10,%esp
-801057ed:	31 c0                	xor    %eax,%eax
+801066fa:	83 c4 10             	add    $0x10,%esp
+801066fd:	31 c0                	xor    %eax,%eax
 }
-801057ef:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801057f2:	5b                   	pop    %ebx
-801057f3:	5e                   	pop    %esi
-801057f4:	5d                   	pop    %ebp
-801057f5:	c3                   	ret    
-801057f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801057fd:	8d 76 00             	lea    0x0(%esi),%esi
+801066ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106702:	5b                   	pop    %ebx
+80106703:	5e                   	pop    %esi
+80106704:	5d                   	pop    %ebp
+80106705:	c3                   	ret    
+80106706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010670d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105800:	83 ec 0c             	sub    $0xc,%esp
-80105803:	53                   	push   %ebx
-80105804:	e8 07 c2 ff ff       	call   80101a10 <iunlockput>
+80106710:	83 ec 0c             	sub    $0xc,%esp
+80106713:	53                   	push   %ebx
+80106714:	e8 f7 b2 ff ff       	call   80101a10 <iunlockput>
     end_op();
-80105809:	e8 c2 d5 ff ff       	call   80102dd0 <end_op>
+80106719:	e8 b2 c6 ff ff       	call   80102dd0 <end_op>
     return -1;
-8010580e:	83 c4 10             	add    $0x10,%esp
-80105811:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105816:	eb d7                	jmp    801057ef <sys_chdir+0x6f>
-80105818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010581f:	90                   	nop
+8010671e:	83 c4 10             	add    $0x10,%esp
+80106721:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106726:	eb d7                	jmp    801066ff <sys_chdir+0x6f>
+80106728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010672f:	90                   	nop
     end_op();
-80105820:	e8 ab d5 ff ff       	call   80102dd0 <end_op>
+80106730:	e8 9b c6 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105825:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010582a:	eb c3                	jmp    801057ef <sys_chdir+0x6f>
-8010582c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106735:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010673a:	eb c3                	jmp    801066ff <sys_chdir+0x6f>
+8010673c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105830 <sys_exec>:
+80106740 <sys_exec>:
 
 int
 sys_exec(void)
 {
-80105830:	55                   	push   %ebp
-80105831:	89 e5                	mov    %esp,%ebp
-80105833:	57                   	push   %edi
-80105834:	56                   	push   %esi
+80106740:	55                   	push   %ebp
+80106741:	89 e5                	mov    %esp,%ebp
+80106743:	57                   	push   %edi
+80106744:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105835:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80106745:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-8010583b:	53                   	push   %ebx
-8010583c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+8010674b:	53                   	push   %ebx
+8010674c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105842:	50                   	push   %eax
-80105843:	6a 00                	push   $0x0
-80105845:	e8 f6 f4 ff ff       	call   80104d40 <argstr>
-8010584a:	83 c4 10             	add    $0x10,%esp
-8010584d:	85 c0                	test   %eax,%eax
-8010584f:	0f 88 87 00 00 00    	js     801058dc <sys_exec+0xac>
-80105855:	83 ec 08             	sub    $0x8,%esp
-80105858:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-8010585e:	50                   	push   %eax
-8010585f:	6a 01                	push   $0x1
-80105861:	e8 1a f4 ff ff       	call   80104c80 <argint>
-80105866:	83 c4 10             	add    $0x10,%esp
-80105869:	85 c0                	test   %eax,%eax
-8010586b:	78 6f                	js     801058dc <sys_exec+0xac>
+80106752:	50                   	push   %eax
+80106753:	6a 00                	push   $0x0
+80106755:	e8 f6 f4 ff ff       	call   80105c50 <argstr>
+8010675a:	83 c4 10             	add    $0x10,%esp
+8010675d:	85 c0                	test   %eax,%eax
+8010675f:	0f 88 87 00 00 00    	js     801067ec <sys_exec+0xac>
+80106765:	83 ec 08             	sub    $0x8,%esp
+80106768:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+8010676e:	50                   	push   %eax
+8010676f:	6a 01                	push   $0x1
+80106771:	e8 1a f4 ff ff       	call   80105b90 <argint>
+80106776:	83 c4 10             	add    $0x10,%esp
+80106779:	85 c0                	test   %eax,%eax
+8010677b:	78 6f                	js     801067ec <sys_exec+0xac>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-8010586d:	83 ec 04             	sub    $0x4,%esp
-80105870:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
+8010677d:	83 ec 04             	sub    $0x4,%esp
+80106780:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
   for(i=0;; i++){
-80105876:	31 db                	xor    %ebx,%ebx
+80106786:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-80105878:	68 80 00 00 00       	push   $0x80
-8010587d:	6a 00                	push   $0x0
-8010587f:	56                   	push   %esi
-80105880:	e8 3b f1 ff ff       	call   801049c0 <memset>
-80105885:	83 c4 10             	add    $0x10,%esp
-80105888:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010588f:	90                   	nop
+80106788:	68 80 00 00 00       	push   $0x80
+8010678d:	6a 00                	push   $0x0
+8010678f:	56                   	push   %esi
+80106790:	e8 3b f1 ff ff       	call   801058d0 <memset>
+80106795:	83 c4 10             	add    $0x10,%esp
+80106798:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010679f:	90                   	nop
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105890:	83 ec 08             	sub    $0x8,%esp
-80105893:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
-80105899:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
-801058a0:	50                   	push   %eax
-801058a1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-801058a7:	01 f8                	add    %edi,%eax
-801058a9:	50                   	push   %eax
-801058aa:	e8 41 f3 ff ff       	call   80104bf0 <fetchint>
-801058af:	83 c4 10             	add    $0x10,%esp
-801058b2:	85 c0                	test   %eax,%eax
-801058b4:	78 26                	js     801058dc <sys_exec+0xac>
+801067a0:	83 ec 08             	sub    $0x8,%esp
+801067a3:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
+801067a9:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
+801067b0:	50                   	push   %eax
+801067b1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+801067b7:	01 f8                	add    %edi,%eax
+801067b9:	50                   	push   %eax
+801067ba:	e8 41 f3 ff ff       	call   80105b00 <fetchint>
+801067bf:	83 c4 10             	add    $0x10,%esp
+801067c2:	85 c0                	test   %eax,%eax
+801067c4:	78 26                	js     801067ec <sys_exec+0xac>
       return -1;
     if(uarg == 0){
-801058b6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-801058bc:	85 c0                	test   %eax,%eax
-801058be:	74 30                	je     801058f0 <sys_exec+0xc0>
+801067c6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+801067cc:	85 c0                	test   %eax,%eax
+801067ce:	74 30                	je     80106800 <sys_exec+0xc0>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-801058c0:	83 ec 08             	sub    $0x8,%esp
-801058c3:	8d 14 3e             	lea    (%esi,%edi,1),%edx
-801058c6:	52                   	push   %edx
-801058c7:	50                   	push   %eax
-801058c8:	e8 63 f3 ff ff       	call   80104c30 <fetchstr>
-801058cd:	83 c4 10             	add    $0x10,%esp
-801058d0:	85 c0                	test   %eax,%eax
-801058d2:	78 08                	js     801058dc <sys_exec+0xac>
+801067d0:	83 ec 08             	sub    $0x8,%esp
+801067d3:	8d 14 3e             	lea    (%esi,%edi,1),%edx
+801067d6:	52                   	push   %edx
+801067d7:	50                   	push   %eax
+801067d8:	e8 63 f3 ff ff       	call   80105b40 <fetchstr>
+801067dd:	83 c4 10             	add    $0x10,%esp
+801067e0:	85 c0                	test   %eax,%eax
+801067e2:	78 08                	js     801067ec <sys_exec+0xac>
   for(i=0;; i++){
-801058d4:	83 c3 01             	add    $0x1,%ebx
+801067e4:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-801058d7:	83 fb 20             	cmp    $0x20,%ebx
-801058da:	75 b4                	jne    80105890 <sys_exec+0x60>
+801067e7:	83 fb 20             	cmp    $0x20,%ebx
+801067ea:	75 b4                	jne    801067a0 <sys_exec+0x60>
       return -1;
   }
   return exec(path, argv);
 }
-801058dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801067ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-801058df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801067ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801058e4:	5b                   	pop    %ebx
-801058e5:	5e                   	pop    %esi
-801058e6:	5f                   	pop    %edi
-801058e7:	5d                   	pop    %ebp
-801058e8:	c3                   	ret    
-801058e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801067f4:	5b                   	pop    %ebx
+801067f5:	5e                   	pop    %esi
+801067f6:	5f                   	pop    %edi
+801067f7:	5d                   	pop    %ebp
+801067f8:	c3                   	ret    
+801067f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       argv[i] = 0;
-801058f0:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-801058f7:	00 00 00 00 
+80106800:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80106807:	00 00 00 00 
   return exec(path, argv);
-801058fb:	83 ec 08             	sub    $0x8,%esp
-801058fe:	56                   	push   %esi
-801058ff:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
-80105905:	e8 a6 b1 ff ff       	call   80100ab0 <exec>
-8010590a:	83 c4 10             	add    $0x10,%esp
-}
-8010590d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105910:	5b                   	pop    %ebx
-80105911:	5e                   	pop    %esi
-80105912:	5f                   	pop    %edi
-80105913:	5d                   	pop    %ebp
-80105914:	c3                   	ret    
-80105915:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010680b:	83 ec 08             	sub    $0x8,%esp
+8010680e:	56                   	push   %esi
+8010680f:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
+80106815:	e8 96 a2 ff ff       	call   80100ab0 <exec>
+8010681a:	83 c4 10             	add    $0x10,%esp
+}
+8010681d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106820:	5b                   	pop    %ebx
+80106821:	5e                   	pop    %esi
+80106822:	5f                   	pop    %edi
+80106823:	5d                   	pop    %ebp
+80106824:	c3                   	ret    
+80106825:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010682c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105920 <sys_pipe>:
+80106830 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-80105920:	55                   	push   %ebp
-80105921:	89 e5                	mov    %esp,%ebp
-80105923:	57                   	push   %edi
-80105924:	56                   	push   %esi
+80106830:	55                   	push   %ebp
+80106831:	89 e5                	mov    %esp,%ebp
+80106833:	57                   	push   %edi
+80106834:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-80105925:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80106835:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-80105928:	53                   	push   %ebx
-80105929:	83 ec 20             	sub    $0x20,%esp
+80106838:	53                   	push   %ebx
+80106839:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-8010592c:	6a 08                	push   $0x8
-8010592e:	50                   	push   %eax
-8010592f:	6a 00                	push   $0x0
-80105931:	e8 9a f3 ff ff       	call   80104cd0 <argptr>
-80105936:	83 c4 10             	add    $0x10,%esp
-80105939:	85 c0                	test   %eax,%eax
-8010593b:	78 4a                	js     80105987 <sys_pipe+0x67>
+8010683c:	6a 08                	push   $0x8
+8010683e:	50                   	push   %eax
+8010683f:	6a 00                	push   $0x0
+80106841:	e8 9a f3 ff ff       	call   80105be0 <argptr>
+80106846:	83 c4 10             	add    $0x10,%esp
+80106849:	85 c0                	test   %eax,%eax
+8010684b:	78 4a                	js     80106897 <sys_pipe+0x67>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-8010593d:	83 ec 08             	sub    $0x8,%esp
-80105940:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105943:	50                   	push   %eax
-80105944:	8d 45 e0             	lea    -0x20(%ebp),%eax
-80105947:	50                   	push   %eax
-80105948:	e8 e3 da ff ff       	call   80103430 <pipealloc>
-8010594d:	83 c4 10             	add    $0x10,%esp
-80105950:	85 c0                	test   %eax,%eax
-80105952:	78 33                	js     80105987 <sys_pipe+0x67>
+8010684d:	83 ec 08             	sub    $0x8,%esp
+80106850:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106853:	50                   	push   %eax
+80106854:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80106857:	50                   	push   %eax
+80106858:	e8 d3 cb ff ff       	call   80103430 <pipealloc>
+8010685d:	83 c4 10             	add    $0x10,%esp
+80106860:	85 c0                	test   %eax,%eax
+80106862:	78 33                	js     80106897 <sys_pipe+0x67>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105954:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80106864:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-80105957:	31 db                	xor    %ebx,%ebx
+80106867:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-80105959:	e8 52 e0 ff ff       	call   801039b0 <myproc>
+80106869:	e8 42 da ff ff       	call   801042b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010595e:	66 90                	xchg   %ax,%ax
+8010686e:	66 90                	xchg   %ax,%ax
     if(curproc->ofile[fd] == 0){
-80105960:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-80105964:	85 f6                	test   %esi,%esi
-80105966:	74 28                	je     80105990 <sys_pipe+0x70>
+80106870:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80106874:	85 f6                	test   %esi,%esi
+80106876:	74 28                	je     801068a0 <sys_pipe+0x70>
   for(fd = 0; fd < NOFILE; fd++){
-80105968:	83 c3 01             	add    $0x1,%ebx
-8010596b:	83 fb 10             	cmp    $0x10,%ebx
-8010596e:	75 f0                	jne    80105960 <sys_pipe+0x40>
+80106878:	83 c3 01             	add    $0x1,%ebx
+8010687b:	83 fb 10             	cmp    $0x10,%ebx
+8010687e:	75 f0                	jne    80106870 <sys_pipe+0x40>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105970:	83 ec 0c             	sub    $0xc,%esp
-80105973:	ff 75 e0             	push   -0x20(%ebp)
-80105976:	e8 75 b5 ff ff       	call   80100ef0 <fileclose>
+80106880:	83 ec 0c             	sub    $0xc,%esp
+80106883:	ff 75 e0             	push   -0x20(%ebp)
+80106886:	e8 65 a6 ff ff       	call   80100ef0 <fileclose>
     fileclose(wf);
-8010597b:	58                   	pop    %eax
-8010597c:	ff 75 e4             	push   -0x1c(%ebp)
-8010597f:	e8 6c b5 ff ff       	call   80100ef0 <fileclose>
-    return -1;
-80105984:	83 c4 10             	add    $0x10,%esp
-80105987:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010598c:	eb 53                	jmp    801059e1 <sys_pipe+0xc1>
-8010598e:	66 90                	xchg   %ax,%ax
+8010688b:	58                   	pop    %eax
+8010688c:	ff 75 e4             	push   -0x1c(%ebp)
+8010688f:	e8 5c a6 ff ff       	call   80100ef0 <fileclose>
+    return -1;
+80106894:	83 c4 10             	add    $0x10,%esp
+80106897:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010689c:	eb 53                	jmp    801068f1 <sys_pipe+0xc1>
+8010689e:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105990:	8d 73 08             	lea    0x8(%ebx),%esi
-80105993:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+801068a0:	8d 73 08             	lea    0x8(%ebx),%esi
+801068a3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105997:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801068a7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010599a:	e8 11 e0 ff ff       	call   801039b0 <myproc>
+801068aa:	e8 01 da ff ff       	call   801042b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010599f:	31 d2                	xor    %edx,%edx
-801059a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068af:	31 d2                	xor    %edx,%edx
+801068b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-801059a8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-801059ac:	85 c9                	test   %ecx,%ecx
-801059ae:	74 20                	je     801059d0 <sys_pipe+0xb0>
+801068b8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801068bc:	85 c9                	test   %ecx,%ecx
+801068be:	74 20                	je     801068e0 <sys_pipe+0xb0>
   for(fd = 0; fd < NOFILE; fd++){
-801059b0:	83 c2 01             	add    $0x1,%edx
-801059b3:	83 fa 10             	cmp    $0x10,%edx
-801059b6:	75 f0                	jne    801059a8 <sys_pipe+0x88>
+801068c0:	83 c2 01             	add    $0x1,%edx
+801068c3:	83 fa 10             	cmp    $0x10,%edx
+801068c6:	75 f0                	jne    801068b8 <sys_pipe+0x88>
       myproc()->ofile[fd0] = 0;
-801059b8:	e8 f3 df ff ff       	call   801039b0 <myproc>
-801059bd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-801059c4:	00 
-801059c5:	eb a9                	jmp    80105970 <sys_pipe+0x50>
-801059c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801059ce:	66 90                	xchg   %ax,%ax
+801068c8:	e8 e3 d9 ff ff       	call   801042b0 <myproc>
+801068cd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+801068d4:	00 
+801068d5:	eb a9                	jmp    80106880 <sys_pipe+0x50>
+801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068de:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-801059d0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+801068e0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-801059d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801059d7:	89 18                	mov    %ebx,(%eax)
+801068e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801068e7:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-801059d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801059dc:	89 50 04             	mov    %edx,0x4(%eax)
+801068e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801068ec:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-801059df:	31 c0                	xor    %eax,%eax
+801068ef:	31 c0                	xor    %eax,%eax
 }
-801059e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801059e4:	5b                   	pop    %ebx
-801059e5:	5e                   	pop    %esi
-801059e6:	5f                   	pop    %edi
-801059e7:	5d                   	pop    %ebp
-801059e8:	c3                   	ret    
-801059e9:	66 90                	xchg   %ax,%ax
-801059eb:	66 90                	xchg   %ax,%ax
-801059ed:	66 90                	xchg   %ax,%ax
-801059ef:	90                   	nop
+801068f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801068f4:	5b                   	pop    %ebx
+801068f5:	5e                   	pop    %esi
+801068f6:	5f                   	pop    %edi
+801068f7:	5d                   	pop    %ebp
+801068f8:	c3                   	ret    
+801068f9:	66 90                	xchg   %ax,%ax
+801068fb:	66 90                	xchg   %ax,%ax
+801068fd:	66 90                	xchg   %ax,%ax
+801068ff:	90                   	nop
 
-801059f0 <sys_fork>:
-#include "proc.h"
+80106900 <sys_fork>:
+#include "processInfo.h"
 
 int
 sys_fork(void)
 {
   return fork();
-801059f0:	e9 5b e1 ff ff       	jmp    80103b50 <fork>
-801059f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801059fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106900:	e9 eb db ff ff       	jmp    801044f0 <fork>
+80106905:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010690c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105a00 <sys_exit>:
+80106910 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-80105a00:	55                   	push   %ebp
-80105a01:	89 e5                	mov    %esp,%ebp
-80105a03:	83 ec 08             	sub    $0x8,%esp
+80106910:	55                   	push   %ebp
+80106911:	89 e5                	mov    %esp,%ebp
+80106913:	83 ec 08             	sub    $0x8,%esp
   exit();
-80105a06:	e8 c5 e3 ff ff       	call   80103dd0 <exit>
+80106916:	e8 d5 df ff ff       	call   801048f0 <exit>
   return 0;  // not reached
 }
-80105a0b:	31 c0                	xor    %eax,%eax
-80105a0d:	c9                   	leave  
-80105a0e:	c3                   	ret    
-80105a0f:	90                   	nop
+8010691b:	31 c0                	xor    %eax,%eax
+8010691d:	c9                   	leave  
+8010691e:	c3                   	ret    
+8010691f:	90                   	nop
 
-80105a10 <sys_wait>:
+80106920 <sys_wait>:
 
 int
 sys_wait(void)
 {
   return wait();
-80105a10:	e9 bb e4 ff ff       	jmp    80103ed0 <wait>
-80105a15:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106920:	e9 bb e0 ff ff       	jmp    801049e0 <wait>
+80106925:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010692c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105a20 <sys_kill>:
+80106930 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-80105a20:	55                   	push   %ebp
-80105a21:	89 e5                	mov    %esp,%ebp
-80105a23:	83 ec 20             	sub    $0x20,%esp
+80106930:	55                   	push   %ebp
+80106931:	89 e5                	mov    %esp,%ebp
+80106933:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-80105a26:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105a29:	50                   	push   %eax
-80105a2a:	6a 00                	push   $0x0
-80105a2c:	e8 4f f2 ff ff       	call   80104c80 <argint>
-80105a31:	83 c4 10             	add    $0x10,%esp
-80105a34:	85 c0                	test   %eax,%eax
-80105a36:	78 18                	js     80105a50 <sys_kill+0x30>
+80106936:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106939:	50                   	push   %eax
+8010693a:	6a 00                	push   $0x0
+8010693c:	e8 4f f2 ff ff       	call   80105b90 <argint>
+80106941:	83 c4 10             	add    $0x10,%esp
+80106944:	85 c0                	test   %eax,%eax
+80106946:	78 18                	js     80106960 <sys_kill+0x30>
     return -1;
   return kill(pid);
-80105a38:	83 ec 0c             	sub    $0xc,%esp
-80105a3b:	ff 75 f4             	push   -0xc(%ebp)
-80105a3e:	e8 2d e7 ff ff       	call   80104170 <kill>
-80105a43:	83 c4 10             	add    $0x10,%esp
-}
-80105a46:	c9                   	leave  
-80105a47:	c3                   	ret    
-80105a48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a4f:	90                   	nop
-80105a50:	c9                   	leave  
-    return -1;
-80105a51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105a56:	c3                   	ret    
-80105a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a5e:	66 90                	xchg   %ax,%ax
+80106948:	83 ec 0c             	sub    $0xc,%esp
+8010694b:	ff 75 f4             	push   -0xc(%ebp)
+8010694e:	e8 3d e4 ff ff       	call   80104d90 <kill>
+80106953:	83 c4 10             	add    $0x10,%esp
+}
+80106956:	c9                   	leave  
+80106957:	c3                   	ret    
+80106958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010695f:	90                   	nop
+80106960:	c9                   	leave  
+    return -1;
+80106961:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106966:	c3                   	ret    
+80106967:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010696e:	66 90                	xchg   %ax,%ax
 
-80105a60 <sys_getpid>:
+80106970 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105a60:	55                   	push   %ebp
-80105a61:	89 e5                	mov    %esp,%ebp
-80105a63:	83 ec 08             	sub    $0x8,%esp
+80106970:	55                   	push   %ebp
+80106971:	89 e5                	mov    %esp,%ebp
+80106973:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-80105a66:	e8 45 df ff ff       	call   801039b0 <myproc>
-80105a6b:	8b 40 10             	mov    0x10(%eax),%eax
+80106976:	e8 35 d9 ff ff       	call   801042b0 <myproc>
+8010697b:	8b 40 10             	mov    0x10(%eax),%eax
 }
-80105a6e:	c9                   	leave  
-80105a6f:	c3                   	ret    
+8010697e:	c9                   	leave  
+8010697f:	c3                   	ret    
 
-80105a70 <sys_sbrk>:
+80106980 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105a70:	55                   	push   %ebp
-80105a71:	89 e5                	mov    %esp,%ebp
-80105a73:	53                   	push   %ebx
+80106980:	55                   	push   %ebp
+80106981:	89 e5                	mov    %esp,%ebp
+80106983:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105a74:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106984:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105a77:	83 ec 1c             	sub    $0x1c,%esp
+80106987:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-80105a7a:	50                   	push   %eax
-80105a7b:	6a 00                	push   $0x0
-80105a7d:	e8 fe f1 ff ff       	call   80104c80 <argint>
-80105a82:	83 c4 10             	add    $0x10,%esp
-80105a85:	85 c0                	test   %eax,%eax
-80105a87:	78 27                	js     80105ab0 <sys_sbrk+0x40>
+8010698a:	50                   	push   %eax
+8010698b:	6a 00                	push   $0x0
+8010698d:	e8 fe f1 ff ff       	call   80105b90 <argint>
+80106992:	83 c4 10             	add    $0x10,%esp
+80106995:	85 c0                	test   %eax,%eax
+80106997:	78 27                	js     801069c0 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-80105a89:	e8 22 df ff ff       	call   801039b0 <myproc>
+80106999:	e8 12 d9 ff ff       	call   801042b0 <myproc>
   if(growproc(n) < 0)
-80105a8e:	83 ec 0c             	sub    $0xc,%esp
+8010699e:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105a91:	8b 18                	mov    (%eax),%ebx
+801069a1:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105a93:	ff 75 f4             	push   -0xc(%ebp)
-80105a96:	e8 35 e0 ff ff       	call   80103ad0 <growproc>
-80105a9b:	83 c4 10             	add    $0x10,%esp
-80105a9e:	85 c0                	test   %eax,%eax
-80105aa0:	78 0e                	js     80105ab0 <sys_sbrk+0x40>
+801069a3:	ff 75 f4             	push   -0xc(%ebp)
+801069a6:	e8 c5 da ff ff       	call   80104470 <growproc>
+801069ab:	83 c4 10             	add    $0x10,%esp
+801069ae:	85 c0                	test   %eax,%eax
+801069b0:	78 0e                	js     801069c0 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105aa2:	89 d8                	mov    %ebx,%eax
-80105aa4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105aa7:	c9                   	leave  
-80105aa8:	c3                   	ret    
-80105aa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80105ab0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105ab5:	eb eb                	jmp    80105aa2 <sys_sbrk+0x32>
-80105ab7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105abe:	66 90                	xchg   %ax,%ax
+801069b2:	89 d8                	mov    %ebx,%eax
+801069b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801069b7:	c9                   	leave  
+801069b8:	c3                   	ret    
+801069b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+801069c0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801069c5:	eb eb                	jmp    801069b2 <sys_sbrk+0x32>
+801069c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069ce:	66 90                	xchg   %ax,%ax
 
-80105ac0 <sys_sleep>:
+801069d0 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105ac0:	55                   	push   %ebp
-80105ac1:	89 e5                	mov    %esp,%ebp
-80105ac3:	53                   	push   %ebx
+801069d0:	55                   	push   %ebp
+801069d1:	89 e5                	mov    %esp,%ebp
+801069d3:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105ac4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801069d4:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105ac7:	83 ec 1c             	sub    $0x1c,%esp
+801069d7:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-80105aca:	50                   	push   %eax
-80105acb:	6a 00                	push   $0x0
-80105acd:	e8 ae f1 ff ff       	call   80104c80 <argint>
-80105ad2:	83 c4 10             	add    $0x10,%esp
-80105ad5:	85 c0                	test   %eax,%eax
-80105ad7:	0f 88 8a 00 00 00    	js     80105b67 <sys_sleep+0xa7>
+801069da:	50                   	push   %eax
+801069db:	6a 00                	push   $0x0
+801069dd:	e8 ae f1 ff ff       	call   80105b90 <argint>
+801069e2:	83 c4 10             	add    $0x10,%esp
+801069e5:	85 c0                	test   %eax,%eax
+801069e7:	0f 88 8a 00 00 00    	js     80106a77 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-80105add:	83 ec 0c             	sub    $0xc,%esp
-80105ae0:	68 80 3d 11 80       	push   $0x80113d80
-80105ae5:	e8 16 ee ff ff       	call   80104900 <acquire>
+801069ed:	83 ec 0c             	sub    $0xc,%esp
+801069f0:	68 a0 53 11 80       	push   $0x801153a0
+801069f5:	e8 16 ee ff ff       	call   80105810 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-80105aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801069fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-80105aed:	8b 1d 60 3d 11 80    	mov    0x80113d60,%ebx
+801069fd:	8b 1d 80 53 11 80    	mov    0x80115380,%ebx
   while(ticks - ticks0 < n){
-80105af3:	83 c4 10             	add    $0x10,%esp
-80105af6:	85 d2                	test   %edx,%edx
-80105af8:	75 27                	jne    80105b21 <sys_sleep+0x61>
-80105afa:	eb 54                	jmp    80105b50 <sys_sleep+0x90>
-80105afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106a03:	83 c4 10             	add    $0x10,%esp
+80106a06:	85 d2                	test   %edx,%edx
+80106a08:	75 27                	jne    80106a31 <sys_sleep+0x61>
+80106a0a:	eb 54                	jmp    80106a60 <sys_sleep+0x90>
+80106a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-80105b00:	83 ec 08             	sub    $0x8,%esp
-80105b03:	68 80 3d 11 80       	push   $0x80113d80
-80105b08:	68 60 3d 11 80       	push   $0x80113d60
-80105b0d:	e8 3e e5 ff ff       	call   80104050 <sleep>
+80106a10:	83 ec 08             	sub    $0x8,%esp
+80106a13:	68 a0 53 11 80       	push   $0x801153a0
+80106a18:	68 80 53 11 80       	push   $0x80115380
+80106a1d:	e8 7e e2 ff ff       	call   80104ca0 <sleep>
   while(ticks - ticks0 < n){
-80105b12:	a1 60 3d 11 80       	mov    0x80113d60,%eax
-80105b17:	83 c4 10             	add    $0x10,%esp
-80105b1a:	29 d8                	sub    %ebx,%eax
-80105b1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-80105b1f:	73 2f                	jae    80105b50 <sys_sleep+0x90>
+80106a22:	a1 80 53 11 80       	mov    0x80115380,%eax
+80106a27:	83 c4 10             	add    $0x10,%esp
+80106a2a:	29 d8                	sub    %ebx,%eax
+80106a2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80106a2f:	73 2f                	jae    80106a60 <sys_sleep+0x90>
     if(myproc()->killed){
-80105b21:	e8 8a de ff ff       	call   801039b0 <myproc>
-80105b26:	8b 40 24             	mov    0x24(%eax),%eax
-80105b29:	85 c0                	test   %eax,%eax
-80105b2b:	74 d3                	je     80105b00 <sys_sleep+0x40>
+80106a31:	e8 7a d8 ff ff       	call   801042b0 <myproc>
+80106a36:	8b 40 24             	mov    0x24(%eax),%eax
+80106a39:	85 c0                	test   %eax,%eax
+80106a3b:	74 d3                	je     80106a10 <sys_sleep+0x40>
       release(&tickslock);
-80105b2d:	83 ec 0c             	sub    $0xc,%esp
-80105b30:	68 80 3d 11 80       	push   $0x80113d80
-80105b35:	e8 66 ed ff ff       	call   801048a0 <release>
+80106a3d:	83 ec 0c             	sub    $0xc,%esp
+80106a40:	68 a0 53 11 80       	push   $0x801153a0
+80106a45:	e8 66 ed ff ff       	call   801057b0 <release>
   }
   release(&tickslock);
   return 0;
 }
-80105b3a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106a4a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-80105b3d:	83 c4 10             	add    $0x10,%esp
-80105b40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106a4d:	83 c4 10             	add    $0x10,%esp
+80106a50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105b45:	c9                   	leave  
-80105b46:	c3                   	ret    
-80105b47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105b4e:	66 90                	xchg   %ax,%ax
+80106a55:	c9                   	leave  
+80106a56:	c3                   	ret    
+80106a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a5e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80105b50:	83 ec 0c             	sub    $0xc,%esp
-80105b53:	68 80 3d 11 80       	push   $0x80113d80
-80105b58:	e8 43 ed ff ff       	call   801048a0 <release>
+80106a60:	83 ec 0c             	sub    $0xc,%esp
+80106a63:	68 a0 53 11 80       	push   $0x801153a0
+80106a68:	e8 43 ed ff ff       	call   801057b0 <release>
   return 0;
-80105b5d:	83 c4 10             	add    $0x10,%esp
-80105b60:	31 c0                	xor    %eax,%eax
+80106a6d:	83 c4 10             	add    $0x10,%esp
+80106a70:	31 c0                	xor    %eax,%eax
 }
-80105b62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105b65:	c9                   	leave  
-80105b66:	c3                   	ret    
-    return -1;
-80105b67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105b6c:	eb f4                	jmp    80105b62 <sys_sleep+0xa2>
-80105b6e:	66 90                	xchg   %ax,%ax
+80106a72:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106a75:	c9                   	leave  
+80106a76:	c3                   	ret    
+    return -1;
+80106a77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106a7c:	eb f4                	jmp    80106a72 <sys_sleep+0xa2>
+80106a7e:	66 90                	xchg   %ax,%ax
 
-80105b70 <sys_uptime>:
+80106a80 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105b70:	55                   	push   %ebp
-80105b71:	89 e5                	mov    %esp,%ebp
-80105b73:	53                   	push   %ebx
-80105b74:	83 ec 10             	sub    $0x10,%esp
+80106a80:	55                   	push   %ebp
+80106a81:	89 e5                	mov    %esp,%ebp
+80106a83:	53                   	push   %ebx
+80106a84:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-80105b77:	68 80 3d 11 80       	push   $0x80113d80
-80105b7c:	e8 7f ed ff ff       	call   80104900 <acquire>
+80106a87:	68 a0 53 11 80       	push   $0x801153a0
+80106a8c:	e8 7f ed ff ff       	call   80105810 <acquire>
   xticks = ticks;
-80105b81:	8b 1d 60 3d 11 80    	mov    0x80113d60,%ebx
+80106a91:	8b 1d 80 53 11 80    	mov    0x80115380,%ebx
   release(&tickslock);
-80105b87:	c7 04 24 80 3d 11 80 	movl   $0x80113d80,(%esp)
-80105b8e:	e8 0d ed ff ff       	call   801048a0 <release>
+80106a97:	c7 04 24 a0 53 11 80 	movl   $0x801153a0,(%esp)
+80106a9e:	e8 0d ed ff ff       	call   801057b0 <release>
   return xticks;
 }
-80105b93:	89 d8                	mov    %ebx,%eax
-80105b95:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105b98:	c9                   	leave  
-80105b99:	c3                   	ret    
-80105b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106aa3:	89 d8                	mov    %ebx,%eax
+80106aa5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106aa8:	c9                   	leave  
+80106aa9:	c3                   	ret    
+80106aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80105ba0 <sys_thread_create>:
+80106ab0 <sys_thread_create>:
 
 int sys_thread_create(void){
-80105ba0:	55                   	push   %ebp
-80105ba1:	89 e5                	mov    %esp,%ebp
-80105ba3:	83 ec 1c             	sub    $0x1c,%esp
-  void (*fcn)(void*),*arg,*stack;
+80106ab0:	55                   	push   %ebp
+80106ab1:	89 e5                	mov    %esp,%ebp
+80106ab3:	83 ec 1c             	sub    $0x1c,%esp
+  void (*fcn)(void*);
+  void* arg;
+  void* stack;
   argptr(0,(void*) &fcn, sizeof(void(*)(void *)));
-80105ba6:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105ba9:	6a 04                	push   $0x4
-80105bab:	50                   	push   %eax
-80105bac:	6a 00                	push   $0x0
-80105bae:	e8 1d f1 ff ff       	call   80104cd0 <argptr>
+80106ab6:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106ab9:	6a 04                	push   $0x4
+80106abb:	50                   	push   %eax
+80106abc:	6a 00                	push   $0x0
+80106abe:	e8 1d f1 ff ff       	call   80105be0 <argptr>
   argptr(1, (void*) &arg, sizeof(void*));
-80105bb3:	83 c4 0c             	add    $0xc,%esp
-80105bb6:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105bb9:	6a 04                	push   $0x4
-80105bbb:	50                   	push   %eax
-80105bbc:	6a 01                	push   $0x1
-80105bbe:	e8 0d f1 ff ff       	call   80104cd0 <argptr>
+80106ac3:	83 c4 0c             	add    $0xc,%esp
+80106ac6:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106ac9:	6a 04                	push   $0x4
+80106acb:	50                   	push   %eax
+80106acc:	6a 01                	push   $0x1
+80106ace:	e8 0d f1 ff ff       	call   80105be0 <argptr>
   argptr(2, (void*) &stack, sizeof(void *));
-80105bc3:	83 c4 0c             	add    $0xc,%esp
-80105bc6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105bc9:	6a 04                	push   $0x4
-80105bcb:	50                   	push   %eax
-80105bcc:	6a 02                	push   $0x2
-80105bce:	e8 fd f0 ff ff       	call   80104cd0 <argptr>
+80106ad3:	83 c4 0c             	add    $0xc,%esp
+80106ad6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106ad9:	6a 04                	push   $0x4
+80106adb:	50                   	push   %eax
+80106adc:	6a 02                	push   $0x2
+80106ade:	e8 fd f0 ff ff       	call   80105be0 <argptr>
   return thread_create(fcn,arg,stack);
-80105bd3:	83 c4 0c             	add    $0xc,%esp
-80105bd6:	ff 75 f4             	push   -0xc(%ebp)
-80105bd9:	ff 75 f0             	push   -0x10(%ebp)
-80105bdc:	ff 75 ec             	push   -0x14(%ebp)
-80105bdf:	e8 cc e6 ff ff       	call   801042b0 <thread_create>
-}
-80105be4:	c9                   	leave  
-80105be5:	c3                   	ret    
-80105be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bed:	8d 76 00             	lea    0x0(%esi),%esi
+80106ae3:	83 c4 0c             	add    $0xc,%esp
+80106ae6:	ff 75 f4             	push   -0xc(%ebp)
+80106ae9:	ff 75 f0             	push   -0x10(%ebp)
+80106aec:	ff 75 ec             	push   -0x14(%ebp)
+80106aef:	e8 2c e4 ff ff       	call   80104f20 <thread_create>
+}
+80106af4:	c9                   	leave  
+80106af5:	c3                   	ret    
+80106af6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106afd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80105bf0 <sys_thread_join>:
+80106b00 <sys_thread_join>:
 
 int sys_thread_join(void){
   return thread_join();
-80105bf0:	e9 eb e7 ff ff       	jmp    801043e0 <thread_join>
-80105bf5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b00:	e9 4b e5 ff ff       	jmp    80105050 <thread_join>
+80106b05:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105c00 <sys_thread_exit>:
+80106b10 <sys_thread_exit>:
 }
 
 
 int sys_thread_exit(void){
   return thread_exit();
-80105c00:	e9 fb e8 ff ff       	jmp    80104500 <thread_exit>
-80105c05:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b10:	e9 5b e6 ff ff       	jmp    80105170 <thread_exit>
+80106b15:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106b20 <sys_getNumProc>:
+}
+
+int sys_getNumProc(void){
+  return getNumProc();
+80106b20:	e9 3b e7 ff ff       	jmp    80105260 <getNumProc>
+80106b25:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106b30 <sys_getMaxPid>:
+}
+
+int sys_getMaxPid(void){
+  return getMaxPid();
+80106b30:	e9 7b e7 ff ff       	jmp    801052b0 <getMaxPid>
+80106b35:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106b40 <sys_set_burst_time>:
+int sys_getBurstTime(void){
+  struct proc *p = myproc();
+  return p->burstTime;
+}*/
+
+int sys_set_burst_time(void){
+80106b40:	55                   	push   %ebp
+80106b41:	89 e5                	mov    %esp,%ebp
+80106b43:	83 ec 1c             	sub    $0x1c,%esp
+  int burst_time;
+  argptr(0,(void *)&burst_time, sizeof(burst_time));
+80106b46:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106b49:	6a 04                	push   $0x4
+80106b4b:	50                   	push   %eax
+80106b4c:	6a 00                	push   $0x0
+80106b4e:	e8 8d f0 ff ff       	call   80105be0 <argptr>
+
+  return set_burst_timeAssist(burst_time);
+80106b53:	58                   	pop    %eax
+80106b54:	ff 75 f4             	push   -0xc(%ebp)
+80106b57:	e8 a4 e7 ff ff       	call   80105300 <set_burst_timeAssist>
+}
+80106b5c:	c9                   	leave  
+80106b5d:	c3                   	ret    
+80106b5e:	66 90                	xchg   %ax,%ax
+
+80106b60 <sys_get_burst_time>:
+
+int sys_get_burst_time(void){
+  return get_burst_timeAssist();
+80106b60:	e9 db e7 ff ff       	jmp    80105340 <get_burst_timeAssist>
+80106b65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106b70 <sys_getProcInfo>:
+}
+
+
+int sys_getProcInfo(void){
+80106b70:	55                   	push   %ebp
+80106b71:	89 e5                	mov    %esp,%ebp
+80106b73:	83 ec 2c             	sub    $0x2c,%esp
+  int pid;
+  struct processInfo *info;
+  argptr(0,(void *) &pid,sizeof(pid));
+80106b76:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106b79:	6a 04                	push   $0x4
+80106b7b:	50                   	push   %eax
+80106b7c:	6a 00                	push   $0x0
+80106b7e:	e8 5d f0 ff ff       	call   80105be0 <argptr>
+  argptr(1,(void *) &info,sizeof(info));
+80106b83:	83 c4 0c             	add    $0xc,%esp
+80106b86:	8d 45 e8             	lea    -0x18(%ebp),%eax
+80106b89:	6a 04                	push   $0x4
+80106b8b:	50                   	push   %eax
+80106b8c:	6a 01                	push   $0x1
+80106b8e:	e8 4d f0 ff ff       	call   80105be0 <argptr>
+  struct processInfo tempInfo = getProcInfoHelp(pid);
+80106b93:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106b96:	5a                   	pop    %edx
+80106b97:	59                   	pop    %ecx
+80106b98:	ff 75 e4             	push   -0x1c(%ebp)
+80106b9b:	50                   	push   %eax
+80106b9c:	e8 cf e7 ff ff       	call   80105370 <getProcInfoHelp>
+80106ba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  if(tempInfo.ppid==-1)
+80106ba4:	83 c4 0c             	add    $0xc,%esp
+80106ba7:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106baa:	74 16                	je     80106bc2 <sys_getProcInfo+0x52>
+    return -1;
+  info->ppid = tempInfo.ppid;
+80106bac:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80106baf:	89 02                	mov    %eax,(%edx)
+  info->psize = tempInfo.psize;
+80106bb1:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80106bb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80106bb7:	89 50 04             	mov    %edx,0x4(%eax)
+  info->numberContextSwitches = tempInfo.numberContextSwitches;
+80106bba:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80106bbd:	89 50 08             	mov    %edx,0x8(%eax)
+  return 0;  
+80106bc0:	31 c0                	xor    %eax,%eax
+}
+80106bc2:	c9                   	leave  
+80106bc3:	c3                   	ret    
+80106bc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106bcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106bcf:	90                   	nop
 
-80105c10 <sys_draw>:
-}
+80106bd0 <sys_draw>:
 
 int 
 sys_draw(void){
-80105c10:	55                   	push   %ebp
-80105c11:	89 e5                	mov    %esp,%ebp
-80105c13:	83 ec 3c             	sub    $0x3c,%esp
+80106bd0:	55                   	push   %ebp
+80106bd1:	89 e5                	mov    %esp,%ebp
+80106bd3:	83 ec 2c             	sub    $0x2c,%esp
   void* buf;
   uint size;
   argptr(0,(void*)&buf,sizeof(buf));
-80105c16:	8d 45 cc             	lea    -0x34(%ebp),%eax
-80105c19:	6a 04                	push   $0x4
-80105c1b:	50                   	push   %eax
-80105c1c:	6a 00                	push   $0x0
-80105c1e:	e8 ad f0 ff ff       	call   80104cd0 <argptr>
+80106bd6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106bd9:	6a 04                	push   $0x4
+80106bdb:	50                   	push   %eax
+80106bdc:	6a 00                	push   $0x0
+80106bde:	e8 fd ef ff ff       	call   80105be0 <argptr>
   argptr(1,(void*)&size,sizeof(size));
-80105c23:	83 c4 0c             	add    $0xc,%esp
-80105c26:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80105c29:	6a 04                	push   $0x4
-80105c2b:	50                   	push   %eax
-80105c2c:	6a 01                	push   $0x1
-80105c2e:	e8 9d f0 ff ff       	call   80104cd0 <argptr>
-  char figure[] = "\n\
-80105c33:	b8 0a 00 00 00       	mov    $0xa,%eax
-     			---------------------- \n";
-  if(sizeof(figure)>size)return -1;
-80105c38:	83 c4 10             	add    $0x10,%esp
-  char figure[] = "\n\
-80105c3b:	c7 45 d6 0a 20 20 20 	movl   $0x2020200a,-0x2a(%ebp)
-80105c42:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106be3:	83 c4 0c             	add    $0xc,%esp
+80106be6:	8d 45 e8             	lea    -0x18(%ebp),%eax
+80106be9:	6a 04                	push   $0x4
+80106beb:	50                   	push   %eax
+80106bec:	6a 01                	push   $0x1
+80106bee:	e8 ed ef ff ff       	call   80105be0 <argptr>
+  char figure[] = "\nGroup M10\n";
   if(sizeof(figure)>size)return -1;
-80105c46:	8b 45 d0             	mov    -0x30(%ebp),%eax
-  char figure[] = "\n\
-80105c49:	c7 45 da 20 20 09 09 	movl   $0x9092020,-0x26(%ebp)
-80105c50:	c7 45 de 09 2d 2d 2d 	movl   $0x2d2d2d09,-0x22(%ebp)
-80105c57:	c7 45 e2 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x1e(%ebp)
-80105c5e:	c7 45 e6 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x1a(%ebp)
-80105c65:	c7 45 ea 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x16(%ebp)
-80105c6c:	c7 45 ee 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x12(%ebp)
-80105c73:	c7 45 f2 2d 2d 2d 20 	movl   $0x202d2d2d,-0xe(%ebp)
+80106bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80106bf6:	83 c4 10             	add    $0x10,%esp
+  char figure[] = "\nGroup M10\n";
+80106bf9:	c7 45 ec 0a 47 72 6f 	movl   $0x6f72470a,-0x14(%ebp)
+80106c00:	c7 45 f0 75 70 20 4d 	movl   $0x4d207075,-0x10(%ebp)
+80106c07:	c7 45 f4 31 30 0a 00 	movl   $0xa3031,-0xc(%ebp)
   if(sizeof(figure)>size)return -1;
-80105c7a:	83 f8 21             	cmp    $0x21,%eax
-80105c7d:	76 21                	jbe    80105ca0 <sys_draw+0x90>
+80106c0e:	83 f8 0b             	cmp    $0xb,%eax
+80106c11:	76 1d                	jbe    80106c30 <sys_draw+0x60>
   strncpy((char *)buf,figure,size);
-80105c7f:	83 ec 04             	sub    $0x4,%esp
-80105c82:	50                   	push   %eax
-80105c83:	8d 45 d6             	lea    -0x2a(%ebp),%eax
-80105c86:	50                   	push   %eax
-80105c87:	ff 75 cc             	push   -0x34(%ebp)
-80105c8a:	e8 91 ee ff ff       	call   80104b20 <strncpy>
+80106c13:	83 ec 04             	sub    $0x4,%esp
+80106c16:	50                   	push   %eax
+80106c17:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106c1a:	50                   	push   %eax
+80106c1b:	ff 75 e4             	push   -0x1c(%ebp)
+80106c1e:	e8 0d ee ff ff       	call   80105a30 <strncpy>
   return sizeof(figure);                
-80105c8f:	83 c4 10             	add    $0x10,%esp
-80105c92:	b8 22 00 00 00       	mov    $0x22,%eax
+80106c23:	83 c4 10             	add    $0x10,%esp
+80106c26:	b8 0c 00 00 00       	mov    $0xc,%eax
 }
-80105c97:	c9                   	leave  
-80105c98:	c3                   	ret    
-80105c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105ca0:	c9                   	leave  
+80106c2b:	c9                   	leave  
+80106c2c:	c3                   	ret    
+80106c2d:	8d 76 00             	lea    0x0(%esi),%esi
+80106c30:	c9                   	leave  
   if(sizeof(figure)>size)return -1;
-80105ca1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106c31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106c36:	c3                   	ret    
+80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c3e:	66 90                	xchg   %ax,%ax
+
+80106c40 <sys_getCurrentInfo>:
+
+int
+sys_getCurrentInfo(void)
+{
+80106c40:	55                   	push   %ebp
+80106c41:	89 e5                	mov    %esp,%ebp
+80106c43:	83 ec 1c             	sub    $0x1c,%esp
+  struct processInfo *info;
+  argptr(0,(void *)&info, sizeof(info));
+80106c46:	8d 45 e8             	lea    -0x18(%ebp),%eax
+80106c49:	6a 04                	push   $0x4
+80106c4b:	50                   	push   %eax
+80106c4c:	6a 00                	push   $0x0
+80106c4e:	e8 8d ef ff ff       	call   80105be0 <argptr>
+
+  struct processInfo temporaryInfo = getCurrentInfoAssist();
+80106c53:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106c56:	89 04 24             	mov    %eax,(%esp)
+80106c59:	e8 b2 e7 ff ff       	call   80105410 <getCurrentInfoAssist>
+80106c5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
+
+  if(temporaryInfo.ppid == -1)return -1;
+80106c61:	83 c4 0c             	add    $0xc,%esp
+80106c64:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106c67:	74 16                	je     80106c7f <sys_getCurrentInfo+0x3f>
+
+  info->ppid = temporaryInfo.ppid;
+80106c69:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80106c6c:	89 02                	mov    %eax,(%edx)
+  info->psize = temporaryInfo.psize;
+80106c6e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80106c71:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80106c74:	89 50 04             	mov    %edx,0x4(%eax)
+  info->numberContextSwitches = temporaryInfo.numberContextSwitches;
+80106c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80106c7a:	89 50 08             	mov    %edx,0x8(%eax)
+  return 0;
+80106c7d:	31 c0                	xor    %eax,%eax
 }
-80105ca6:	c3                   	ret    
+80106c7f:	c9                   	leave  
+80106c80:	c3                   	ret    
+80106c81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c8f:	90                   	nop
+
+80106c90 <sys_getCurrentPID>:
+
+int sys_getCurrentPID(void){
+  return getCurrentPIDAssist();
+80106c90:	e9 2b e8 ff ff       	jmp    801054c0 <getCurrentPIDAssist>
 
-80105ca7 <alltraps>:
+80106c95 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-80105ca7:	1e                   	push   %ds
+80106c95:	1e                   	push   %ds
   pushl %es
-80105ca8:	06                   	push   %es
+80106c96:	06                   	push   %es
   pushl %fs
-80105ca9:	0f a0                	push   %fs
+80106c97:	0f a0                	push   %fs
   pushl %gs
-80105cab:	0f a8                	push   %gs
+80106c99:	0f a8                	push   %gs
   pushal
-80105cad:	60                   	pusha  
+80106c9b:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105cae:	66 b8 10 00          	mov    $0x10,%ax
+80106c9c:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105cb2:	8e d8                	mov    %eax,%ds
+80106ca0:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-80105cb4:	8e c0                	mov    %eax,%es
+80106ca2:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-80105cb6:	54                   	push   %esp
+80106ca4:	54                   	push   %esp
   call trap
-80105cb7:	e8 c4 00 00 00       	call   80105d80 <trap>
+80106ca5:	e8 c6 00 00 00       	call   80106d70 <trap>
   addl $4, %esp
-80105cbc:	83 c4 04             	add    $0x4,%esp
+80106caa:	83 c4 04             	add    $0x4,%esp
 
-80105cbf <trapret>:
+80106cad <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105cbf:	61                   	popa   
+80106cad:	61                   	popa   
   popl %gs
-80105cc0:	0f a9                	pop    %gs
+80106cae:	0f a9                	pop    %gs
   popl %fs
-80105cc2:	0f a1                	pop    %fs
+80106cb0:	0f a1                	pop    %fs
   popl %es
-80105cc4:	07                   	pop    %es
+80106cb2:	07                   	pop    %es
   popl %ds
-80105cc5:	1f                   	pop    %ds
+80106cb3:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-80105cc6:	83 c4 08             	add    $0x8,%esp
+80106cb4:	83 c4 08             	add    $0x8,%esp
   iret
-80105cc9:	cf                   	iret   
-80105cca:	66 90                	xchg   %ax,%ax
-80105ccc:	66 90                	xchg   %ax,%ax
-80105cce:	66 90                	xchg   %ax,%ax
+80106cb7:	cf                   	iret   
+80106cb8:	66 90                	xchg   %ax,%ax
+80106cba:	66 90                	xchg   %ax,%ax
+80106cbc:	66 90                	xchg   %ax,%ax
+80106cbe:	66 90                	xchg   %ax,%ax
 
-80105cd0 <tvinit>:
+80106cc0 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-80105cd0:	55                   	push   %ebp
+80106cc0:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-80105cd1:	31 c0                	xor    %eax,%eax
+80106cc1:	31 c0                	xor    %eax,%eax
 {
-80105cd3:	89 e5                	mov    %esp,%ebp
-80105cd5:	83 ec 08             	sub    $0x8,%esp
-80105cd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105cdf:	90                   	nop
+80106cc3:	89 e5                	mov    %esp,%ebp
+80106cc5:	83 ec 08             	sub    $0x8,%esp
+80106cc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ccf:	90                   	nop
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105ce0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-80105ce7:	c7 04 c5 c2 3d 11 80 	movl   $0x8e000008,-0x7feec23e(,%eax,8)
-80105cee:	08 00 00 8e 
-80105cf2:	66 89 14 c5 c0 3d 11 	mov    %dx,-0x7feec240(,%eax,8)
-80105cf9:	80 
-80105cfa:	c1 ea 10             	shr    $0x10,%edx
-80105cfd:	66 89 14 c5 c6 3d 11 	mov    %dx,-0x7feec23a(,%eax,8)
-80105d04:	80 
+80106cd0:	8b 14 85 0c b0 10 80 	mov    -0x7fef4ff4(,%eax,4),%edx
+80106cd7:	c7 04 c5 e2 53 11 80 	movl   $0x8e000008,-0x7feeac1e(,%eax,8)
+80106cde:	08 00 00 8e 
+80106ce2:	66 89 14 c5 e0 53 11 	mov    %dx,-0x7feeac20(,%eax,8)
+80106ce9:	80 
+80106cea:	c1 ea 10             	shr    $0x10,%edx
+80106ced:	66 89 14 c5 e6 53 11 	mov    %dx,-0x7feeac1a(,%eax,8)
+80106cf4:	80 
   for(i = 0; i < 256; i++)
-80105d05:	83 c0 01             	add    $0x1,%eax
-80105d08:	3d 00 01 00 00       	cmp    $0x100,%eax
-80105d0d:	75 d1                	jne    80105ce0 <tvinit+0x10>
+80106cf5:	83 c0 01             	add    $0x1,%eax
+80106cf8:	3d 00 01 00 00       	cmp    $0x100,%eax
+80106cfd:	75 d1                	jne    80106cd0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-80105d0f:	83 ec 08             	sub    $0x8,%esp
+80106cff:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105d12:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-80105d17:	c7 05 c2 3f 11 80 08 	movl   $0xef000008,0x80113fc2
-80105d1e:	00 00 ef 
+80106d02:	a1 0c b1 10 80       	mov    0x8010b10c,%eax
+80106d07:	c7 05 e2 55 11 80 08 	movl   $0xef000008,0x801155e2
+80106d0e:	00 00 ef 
   initlock(&tickslock, "time");
-80105d21:	68 a9 7d 10 80       	push   $0x80107da9
-80105d26:	68 80 3d 11 80       	push   $0x80113d80
+80106d11:	68 e5 8d 10 80       	push   $0x80108de5
+80106d16:	68 a0 53 11 80       	push   $0x801153a0
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105d2b:	66 a3 c0 3f 11 80    	mov    %ax,0x80113fc0
-80105d31:	c1 e8 10             	shr    $0x10,%eax
-80105d34:	66 a3 c6 3f 11 80    	mov    %ax,0x80113fc6
+80106d1b:	66 a3 e0 55 11 80    	mov    %ax,0x801155e0
+80106d21:	c1 e8 10             	shr    $0x10,%eax
+80106d24:	66 a3 e6 55 11 80    	mov    %ax,0x801155e6
   initlock(&tickslock, "time");
-80105d3a:	e8 f1 e9 ff ff       	call   80104730 <initlock>
+80106d2a:	e8 11 e9 ff ff       	call   80105640 <initlock>
 }
-80105d3f:	83 c4 10             	add    $0x10,%esp
-80105d42:	c9                   	leave  
-80105d43:	c3                   	ret    
-80105d44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105d4f:	90                   	nop
+80106d2f:	83 c4 10             	add    $0x10,%esp
+80106d32:	c9                   	leave  
+80106d33:	c3                   	ret    
+80106d34:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d3f:	90                   	nop
 
-80105d50 <idtinit>:
+80106d40 <idtinit>:
 
 void
 idtinit(void)
 {
-80105d50:	55                   	push   %ebp
+80106d40:	55                   	push   %ebp
   pd[0] = size-1;
-80105d51:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-80105d56:	89 e5                	mov    %esp,%ebp
-80105d58:	83 ec 10             	sub    $0x10,%esp
-80105d5b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80106d41:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80106d46:	89 e5                	mov    %esp,%ebp
+80106d48:	83 ec 10             	sub    $0x10,%esp
+80106d4b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-80105d5f:	b8 c0 3d 11 80       	mov    $0x80113dc0,%eax
-80105d64:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80106d4f:	b8 e0 53 11 80       	mov    $0x801153e0,%eax
+80106d54:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-80105d68:	c1 e8 10             	shr    $0x10,%eax
-80105d6b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80106d58:	c1 e8 10             	shr    $0x10,%eax
+80106d5b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-80105d6f:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105d72:	0f 01 18             	lidtl  (%eax)
+80106d5f:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80106d62:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105d75:	c9                   	leave  
-80105d76:	c3                   	ret    
-80105d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d7e:	66 90                	xchg   %ax,%ax
+80106d65:	c9                   	leave  
+80106d66:	c3                   	ret    
+80106d67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d6e:	66 90                	xchg   %ax,%ax
 
-80105d80 <trap>:
+80106d70 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105d80:	55                   	push   %ebp
-80105d81:	89 e5                	mov    %esp,%ebp
-80105d83:	57                   	push   %edi
-80105d84:	56                   	push   %esi
-80105d85:	53                   	push   %ebx
-80105d86:	83 ec 1c             	sub    $0x1c,%esp
-80105d89:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80106d70:	55                   	push   %ebp
+80106d71:	89 e5                	mov    %esp,%ebp
+80106d73:	57                   	push   %edi
+80106d74:	56                   	push   %esi
+80106d75:	53                   	push   %ebx
+80106d76:	83 ec 0c             	sub    $0xc,%esp
+80106d79:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80105d8c:	8b 43 30             	mov    0x30(%ebx),%eax
-80105d8f:	83 f8 40             	cmp    $0x40,%eax
-80105d92:	0f 84 68 01 00 00    	je     80105f00 <trap+0x180>
+80106d7c:	8b 43 30             	mov    0x30(%ebx),%eax
+80106d7f:	83 f8 40             	cmp    $0x40,%eax
+80106d82:	0f 84 50 01 00 00    	je     80106ed8 <trap+0x168>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-80105d98:	83 e8 20             	sub    $0x20,%eax
-80105d9b:	83 f8 1f             	cmp    $0x1f,%eax
-80105d9e:	0f 87 8c 00 00 00    	ja     80105e30 <trap+0xb0>
-80105da4:	ff 24 85 50 7e 10 80 	jmp    *-0x7fef81b0(,%eax,4)
-80105dab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105daf:	90                   	nop
+80106d88:	83 e8 20             	sub    $0x20,%eax
+80106d8b:	83 f8 1f             	cmp    $0x1f,%eax
+80106d8e:	0f 87 84 00 00 00    	ja     80106e18 <trap+0xa8>
+80106d94:	ff 24 85 48 8e 10 80 	jmp    *-0x7fef71b8(,%eax,4)
+80106d9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d9f:	90                   	nop
       release(&tickslock);
     }
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_IDE:
     ideintr();
-80105db0:	e8 8b c4 ff ff       	call   80102240 <ideintr>
+80106da0:	e8 9b b4 ff ff       	call   80102240 <ideintr>
     lapiceoi();
-80105db5:	e8 56 cb ff ff       	call   80102910 <lapiceoi>
+80106da5:	e8 66 bb ff ff       	call   80102910 <lapiceoi>
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105dba:	e8 f1 db ff ff       	call   801039b0 <myproc>
-80105dbf:	85 c0                	test   %eax,%eax
-80105dc1:	74 1d                	je     80105de0 <trap+0x60>
-80105dc3:	e8 e8 db ff ff       	call   801039b0 <myproc>
-80105dc8:	8b 50 24             	mov    0x24(%eax),%edx
-80105dcb:	85 d2                	test   %edx,%edx
-80105dcd:	74 11                	je     80105de0 <trap+0x60>
-80105dcf:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105dd3:	83 e0 03             	and    $0x3,%eax
-80105dd6:	66 83 f8 03          	cmp    $0x3,%ax
-80105dda:	0f 84 e8 01 00 00    	je     80105fc8 <trap+0x248>
+80106daa:	e8 01 d5 ff ff       	call   801042b0 <myproc>
+80106daf:	85 c0                	test   %eax,%eax
+80106db1:	74 1d                	je     80106dd0 <trap+0x60>
+80106db3:	e8 f8 d4 ff ff       	call   801042b0 <myproc>
+80106db8:	8b 48 24             	mov    0x24(%eax),%ecx
+80106dbb:	85 c9                	test   %ecx,%ecx
+80106dbd:	74 11                	je     80106dd0 <trap+0x60>
+80106dbf:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106dc3:	83 e0 03             	and    $0x3,%eax
+80106dc6:	66 83 f8 03          	cmp    $0x3,%ax
+80106dca:	0f 84 d0 01 00 00    	je     80106fa0 <trap+0x230>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105de0:	e8 cb db ff ff       	call   801039b0 <myproc>
-80105de5:	85 c0                	test   %eax,%eax
-80105de7:	74 0f                	je     80105df8 <trap+0x78>
-80105de9:	e8 c2 db ff ff       	call   801039b0 <myproc>
-80105dee:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105df2:	0f 84 b8 00 00 00    	je     80105eb0 <trap+0x130>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+80106dd0:	e8 db d4 ff ff       	call   801042b0 <myproc>
+80106dd5:	85 c0                	test   %eax,%eax
+80106dd7:	74 0b                	je     80106de4 <trap+0x74>
+80106dd9:	e8 d2 d4 ff ff       	call   801042b0 <myproc>
+80106dde:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80106de2:	74 6c                	je     80106e50 <trap+0xe0>
+        new_yield();	
+  }
+  
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105df8:	e8 b3 db ff ff       	call   801039b0 <myproc>
-80105dfd:	85 c0                	test   %eax,%eax
-80105dff:	74 1d                	je     80105e1e <trap+0x9e>
-80105e01:	e8 aa db ff ff       	call   801039b0 <myproc>
-80105e06:	8b 40 24             	mov    0x24(%eax),%eax
-80105e09:	85 c0                	test   %eax,%eax
-80105e0b:	74 11                	je     80105e1e <trap+0x9e>
-80105e0d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105e11:	83 e0 03             	and    $0x3,%eax
-80105e14:	66 83 f8 03          	cmp    $0x3,%ax
-80105e18:	0f 84 0f 01 00 00    	je     80105f2d <trap+0x1ad>
+80106de4:	e8 c7 d4 ff ff       	call   801042b0 <myproc>
+80106de9:	85 c0                	test   %eax,%eax
+80106deb:	74 1d                	je     80106e0a <trap+0x9a>
+80106ded:	e8 be d4 ff ff       	call   801042b0 <myproc>
+80106df2:	8b 40 24             	mov    0x24(%eax),%eax
+80106df5:	85 c0                	test   %eax,%eax
+80106df7:	74 11                	je     80106e0a <trap+0x9a>
+80106df9:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106dfd:	83 e0 03             	and    $0x3,%eax
+80106e00:	66 83 f8 03          	cmp    $0x3,%ax
+80106e04:	0f 84 fb 00 00 00    	je     80106f05 <trap+0x195>
     exit();
 }
-80105e1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105e21:	5b                   	pop    %ebx
-80105e22:	5e                   	pop    %esi
-80105e23:	5f                   	pop    %edi
-80105e24:	5d                   	pop    %ebp
-80105e25:	c3                   	ret    
-80105e26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105e2d:	8d 76 00             	lea    0x0(%esi),%esi
+80106e0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e0d:	5b                   	pop    %ebx
+80106e0e:	5e                   	pop    %esi
+80106e0f:	5f                   	pop    %edi
+80106e10:	5d                   	pop    %ebp
+80106e11:	c3                   	ret    
+80106e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc() == 0 || (tf->cs&3) == 0){
-80105e30:	e8 7b db ff ff       	call   801039b0 <myproc>
-80105e35:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105e38:	85 c0                	test   %eax,%eax
-80105e3a:	0f 84 a2 01 00 00    	je     80105fe2 <trap+0x262>
-80105e40:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105e44:	0f 84 98 01 00 00    	je     80105fe2 <trap+0x262>
-
-static inline uint
-rcr2(void)
-{
-  uint val;
-  asm volatile("movl %%cr2,%0" : "=r" (val));
-80105e4a:	0f 20 d1             	mov    %cr2,%ecx
-80105e4d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105e50:	e8 3b db ff ff       	call   80103990 <cpuid>
-80105e55:	8b 73 30             	mov    0x30(%ebx),%esi
-80105e58:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80105e5b:	8b 43 34             	mov    0x34(%ebx),%eax
-80105e5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-            myproc()->pid, myproc()->name, tf->trapno,
-80105e61:	e8 4a db ff ff       	call   801039b0 <myproc>
-80105e66:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105e69:	e8 42 db ff ff       	call   801039b0 <myproc>
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105e6e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105e71:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105e74:	51                   	push   %ecx
-80105e75:	57                   	push   %edi
-80105e76:	52                   	push   %edx
-80105e77:	ff 75 e4             	push   -0x1c(%ebp)
-80105e7a:	56                   	push   %esi
-            myproc()->pid, myproc()->name, tf->trapno,
-80105e7b:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80105e7e:	83 c6 6c             	add    $0x6c,%esi
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105e81:	56                   	push   %esi
-80105e82:	ff 70 10             	push   0x10(%eax)
-80105e85:	68 0c 7e 10 80       	push   $0x80107e0c
-80105e8a:	e8 11 a8 ff ff       	call   801006a0 <cprintf>
+80106e18:	e8 93 d4 ff ff       	call   801042b0 <myproc>
+80106e1d:	85 c0                	test   %eax,%eax
+80106e1f:	0f 84 c1 01 00 00    	je     80106fe6 <trap+0x276>
+80106e25:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80106e29:	0f 84 b7 01 00 00    	je     80106fe6 <trap+0x276>
     myproc()->killed = 1;
-80105e8f:	83 c4 20             	add    $0x20,%esp
-80105e92:	e8 19 db ff ff       	call   801039b0 <myproc>
-80105e97:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80106e2f:	e8 7c d4 ff ff       	call   801042b0 <myproc>
+80106e34:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105e9e:	e8 0d db ff ff       	call   801039b0 <myproc>
-80105ea3:	85 c0                	test   %eax,%eax
-80105ea5:	0f 85 18 ff ff ff    	jne    80105dc3 <trap+0x43>
-80105eab:	e9 30 ff ff ff       	jmp    80105de0 <trap+0x60>
-  if(myproc() && myproc()->state == RUNNING &&
-80105eb0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105eb4:	0f 85 3e ff ff ff    	jne    80105df8 <trap+0x78>
-    yield();
-80105eba:	e8 41 e1 ff ff       	call   80104000 <yield>
-80105ebf:	e9 34 ff ff ff       	jmp    80105df8 <trap+0x78>
-80105ec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106e3b:	e8 70 d4 ff ff       	call   801042b0 <myproc>
+80106e40:	85 c0                	test   %eax,%eax
+80106e42:	0f 85 6b ff ff ff    	jne    80106db3 <trap+0x43>
+80106e48:	eb 86                	jmp    80106dd0 <trap+0x60>
+80106e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+80106e50:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80106e54:	75 8e                	jne    80106de4 <trap+0x74>
+     (myproc()->run_time)++;
+80106e56:	e8 55 d4 ff ff       	call   801042b0 <myproc>
+80106e5b:	83 80 88 00 00 00 01 	addl   $0x1,0x88(%eax)
+     if(myproc()->burst_time != 0){
+80106e62:	e8 49 d4 ff ff       	call   801042b0 <myproc>
+80106e67:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
+80106e6d:	85 d2                	test   %edx,%edx
+80106e6f:	0f 85 4b 01 00 00    	jne    80106fc0 <trap+0x250>
+     if((myproc()->run_time)%quant == 0)
+80106e75:	e8 36 d4 ff ff       	call   801042b0 <myproc>
+80106e7a:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
+80106e80:	99                   	cltd   
+80106e81:	f7 3d 08 b0 10 80    	idivl  0x8010b008
+80106e87:	85 d2                	test   %edx,%edx
+80106e89:	0f 85 55 ff ff ff    	jne    80106de4 <trap+0x74>
+        new_yield();	
+80106e8f:	e8 5c dd ff ff       	call   80104bf0 <new_yield>
+80106e94:	e9 4b ff ff ff       	jmp    80106de4 <trap+0x74>
+80106e99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105ec8:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105ecb:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105ecf:	e8 bc da ff ff       	call   80103990 <cpuid>
-80105ed4:	57                   	push   %edi
-80105ed5:	56                   	push   %esi
-80105ed6:	50                   	push   %eax
-80105ed7:	68 b4 7d 10 80       	push   $0x80107db4
-80105edc:	e8 bf a7 ff ff       	call   801006a0 <cprintf>
+80106ea0:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106ea3:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80106ea7:	e8 e4 d3 ff ff       	call   80104290 <cpuid>
+80106eac:	57                   	push   %edi
+80106ead:	56                   	push   %esi
+80106eae:	50                   	push   %eax
+80106eaf:	68 f0 8d 10 80       	push   $0x80108df0
+80106eb4:	e8 e7 97 ff ff       	call   801006a0 <cprintf>
     lapiceoi();
-80105ee1:	e8 2a ca ff ff       	call   80102910 <lapiceoi>
+80106eb9:	e8 52 ba ff ff       	call   80102910 <lapiceoi>
     break;
-80105ee6:	83 c4 10             	add    $0x10,%esp
+80106ebe:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105ee9:	e8 c2 da ff ff       	call   801039b0 <myproc>
-80105eee:	85 c0                	test   %eax,%eax
-80105ef0:	0f 85 cd fe ff ff    	jne    80105dc3 <trap+0x43>
-80105ef6:	e9 e5 fe ff ff       	jmp    80105de0 <trap+0x60>
-80105efb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105eff:	90                   	nop
+80106ec1:	e8 ea d3 ff ff       	call   801042b0 <myproc>
+80106ec6:	85 c0                	test   %eax,%eax
+80106ec8:	0f 85 e5 fe ff ff    	jne    80106db3 <trap+0x43>
+80106ece:	e9 fd fe ff ff       	jmp    80106dd0 <trap+0x60>
+80106ed3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106ed7:	90                   	nop
     if(myproc()->killed)
-80105f00:	e8 ab da ff ff       	call   801039b0 <myproc>
-80105f05:	8b 70 24             	mov    0x24(%eax),%esi
-80105f08:	85 f6                	test   %esi,%esi
-80105f0a:	0f 85 c8 00 00 00    	jne    80105fd8 <trap+0x258>
+80106ed8:	e8 d3 d3 ff ff       	call   801042b0 <myproc>
+80106edd:	8b 70 24             	mov    0x24(%eax),%esi
+80106ee0:	85 f6                	test   %esi,%esi
+80106ee2:	0f 85 c8 00 00 00    	jne    80106fb0 <trap+0x240>
     myproc()->tf = tf;
-80105f10:	e8 9b da ff ff       	call   801039b0 <myproc>
-80105f15:	89 58 18             	mov    %ebx,0x18(%eax)
+80106ee8:	e8 c3 d3 ff ff       	call   801042b0 <myproc>
+80106eed:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105f18:	e8 a3 ee ff ff       	call   80104dc0 <syscall>
+80106ef0:	e8 db ed ff ff       	call   80105cd0 <syscall>
     if(myproc()->killed)
-80105f1d:	e8 8e da ff ff       	call   801039b0 <myproc>
-80105f22:	8b 48 24             	mov    0x24(%eax),%ecx
-80105f25:	85 c9                	test   %ecx,%ecx
-80105f27:	0f 84 f1 fe ff ff    	je     80105e1e <trap+0x9e>
-}
-80105f2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105f30:	5b                   	pop    %ebx
-80105f31:	5e                   	pop    %esi
-80105f32:	5f                   	pop    %edi
-80105f33:	5d                   	pop    %ebp
+80106ef5:	e8 b6 d3 ff ff       	call   801042b0 <myproc>
+80106efa:	8b 58 24             	mov    0x24(%eax),%ebx
+80106efd:	85 db                	test   %ebx,%ebx
+80106eff:	0f 84 05 ff ff ff    	je     80106e0a <trap+0x9a>
+}
+80106f05:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106f08:	5b                   	pop    %ebx
+80106f09:	5e                   	pop    %esi
+80106f0a:	5f                   	pop    %edi
+80106f0b:	5d                   	pop    %ebp
       exit();
-80105f34:	e9 97 de ff ff       	jmp    80103dd0 <exit>
-80105f39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f0c:	e9 df d9 ff ff       	jmp    801048f0 <exit>
+80106f11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     uartintr();
-80105f40:	e8 3b 02 00 00       	call   80106180 <uartintr>
+80106f18:	e8 73 02 00 00       	call   80107190 <uartintr>
     lapiceoi();
-80105f45:	e8 c6 c9 ff ff       	call   80102910 <lapiceoi>
+80106f1d:	e8 ee b9 ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105f4a:	e8 61 da ff ff       	call   801039b0 <myproc>
-80105f4f:	85 c0                	test   %eax,%eax
-80105f51:	0f 85 6c fe ff ff    	jne    80105dc3 <trap+0x43>
-80105f57:	e9 84 fe ff ff       	jmp    80105de0 <trap+0x60>
-80105f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f22:	e8 89 d3 ff ff       	call   801042b0 <myproc>
+80106f27:	85 c0                	test   %eax,%eax
+80106f29:	0f 85 84 fe ff ff    	jne    80106db3 <trap+0x43>
+80106f2f:	e9 9c fe ff ff       	jmp    80106dd0 <trap+0x60>
+80106f34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     kbdintr();
-80105f60:	e8 6b c8 ff ff       	call   801027d0 <kbdintr>
+80106f38:	e8 93 b8 ff ff       	call   801027d0 <kbdintr>
     lapiceoi();
-80105f65:	e8 a6 c9 ff ff       	call   80102910 <lapiceoi>
+80106f3d:	e8 ce b9 ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105f6a:	e8 41 da ff ff       	call   801039b0 <myproc>
-80105f6f:	85 c0                	test   %eax,%eax
-80105f71:	0f 85 4c fe ff ff    	jne    80105dc3 <trap+0x43>
-80105f77:	e9 64 fe ff ff       	jmp    80105de0 <trap+0x60>
-80105f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f42:	e8 69 d3 ff ff       	call   801042b0 <myproc>
+80106f47:	85 c0                	test   %eax,%eax
+80106f49:	0f 85 64 fe ff ff    	jne    80106db3 <trap+0x43>
+80106f4f:	e9 7c fe ff ff       	jmp    80106dd0 <trap+0x60>
+80106f54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(cpuid() == 0){
-80105f80:	e8 0b da ff ff       	call   80103990 <cpuid>
-80105f85:	85 c0                	test   %eax,%eax
-80105f87:	0f 85 28 fe ff ff    	jne    80105db5 <trap+0x35>
+80106f58:	e8 33 d3 ff ff       	call   80104290 <cpuid>
+80106f5d:	85 c0                	test   %eax,%eax
+80106f5f:	0f 85 40 fe ff ff    	jne    80106da5 <trap+0x35>
       acquire(&tickslock);
-80105f8d:	83 ec 0c             	sub    $0xc,%esp
-80105f90:	68 80 3d 11 80       	push   $0x80113d80
-80105f95:	e8 66 e9 ff ff       	call   80104900 <acquire>
+80106f65:	83 ec 0c             	sub    $0xc,%esp
+80106f68:	68 a0 53 11 80       	push   $0x801153a0
+80106f6d:	e8 9e e8 ff ff       	call   80105810 <acquire>
       wakeup(&ticks);
-80105f9a:	c7 04 24 60 3d 11 80 	movl   $0x80113d60,(%esp)
+80106f72:	c7 04 24 80 53 11 80 	movl   $0x80115380,(%esp)
       ticks++;
-80105fa1:	83 05 60 3d 11 80 01 	addl   $0x1,0x80113d60
+80106f79:	83 05 80 53 11 80 01 	addl   $0x1,0x80115380
       wakeup(&ticks);
-80105fa8:	e8 63 e1 ff ff       	call   80104110 <wakeup>
+80106f80:	e8 db dd ff ff       	call   80104d60 <wakeup>
       release(&tickslock);
-80105fad:	c7 04 24 80 3d 11 80 	movl   $0x80113d80,(%esp)
-80105fb4:	e8 e7 e8 ff ff       	call   801048a0 <release>
-80105fb9:	83 c4 10             	add    $0x10,%esp
+80106f85:	c7 04 24 a0 53 11 80 	movl   $0x801153a0,(%esp)
+80106f8c:	e8 1f e8 ff ff       	call   801057b0 <release>
+80106f91:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105fbc:	e9 f4 fd ff ff       	jmp    80105db5 <trap+0x35>
-80105fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f94:	e9 0c fe ff ff       	jmp    80106da5 <trap+0x35>
+80106f99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     exit();
-80105fc8:	e8 03 de ff ff       	call   80103dd0 <exit>
-80105fcd:	e9 0e fe ff ff       	jmp    80105de0 <trap+0x60>
-80105fd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106fa0:	e8 4b d9 ff ff       	call   801048f0 <exit>
+80106fa5:	e9 26 fe ff ff       	jmp    80106dd0 <trap+0x60>
+80106faa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105fd8:	e8 f3 dd ff ff       	call   80103dd0 <exit>
-80105fdd:	e9 2e ff ff ff       	jmp    80105f10 <trap+0x190>
-80105fe2:	0f 20 d6             	mov    %cr2,%esi
+80106fb0:	e8 3b d9 ff ff       	call   801048f0 <exit>
+80106fb5:	e9 2e ff ff ff       	jmp    80106ee8 <trap+0x178>
+80106fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     	if(myproc()->burst_time == myproc()->run_time)
+80106fc0:	e8 eb d2 ff ff       	call   801042b0 <myproc>
+80106fc5:	8b b0 84 00 00 00    	mov    0x84(%eax),%esi
+80106fcb:	e8 e0 d2 ff ff       	call   801042b0 <myproc>
+80106fd0:	3b b0 88 00 00 00    	cmp    0x88(%eax),%esi
+80106fd6:	0f 85 99 fe ff ff    	jne    80106e75 <trap+0x105>
+        	exit();
+80106fdc:	e8 0f d9 ff ff       	call   801048f0 <exit>
+80106fe1:	e9 8f fe ff ff       	jmp    80106e75 <trap+0x105>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80106fe6:	0f 20 d7             	mov    %cr2,%edi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105fe5:	e8 a6 d9 ff ff       	call   80103990 <cpuid>
-80105fea:	83 ec 0c             	sub    $0xc,%esp
-80105fed:	56                   	push   %esi
-80105fee:	57                   	push   %edi
-80105fef:	50                   	push   %eax
-80105ff0:	ff 73 30             	push   0x30(%ebx)
-80105ff3:	68 d8 7d 10 80       	push   $0x80107dd8
-80105ff8:	e8 a3 a6 ff ff       	call   801006a0 <cprintf>
+80106fe9:	8b 73 38             	mov    0x38(%ebx),%esi
+80106fec:	e8 9f d2 ff ff       	call   80104290 <cpuid>
+80106ff1:	83 ec 0c             	sub    $0xc,%esp
+80106ff4:	57                   	push   %edi
+80106ff5:	56                   	push   %esi
+80106ff6:	50                   	push   %eax
+80106ff7:	ff 73 30             	push   0x30(%ebx)
+80106ffa:	68 14 8e 10 80       	push   $0x80108e14
+80106fff:	e8 9c 96 ff ff       	call   801006a0 <cprintf>
       panic("trap");
-80105ffd:	83 c4 14             	add    $0x14,%esp
-80106000:	68 ae 7d 10 80       	push   $0x80107dae
-80106005:	e8 76 a3 ff ff       	call   80100380 <panic>
-8010600a:	66 90                	xchg   %ax,%ax
-8010600c:	66 90                	xchg   %ax,%ax
-8010600e:	66 90                	xchg   %ax,%ax
+80107004:	83 c4 14             	add    $0x14,%esp
+80107007:	68 ea 8d 10 80       	push   $0x80108dea
+8010700c:	e8 6f 93 ff ff       	call   80100380 <panic>
+80107011:	66 90                	xchg   %ax,%ax
+80107013:	66 90                	xchg   %ax,%ax
+80107015:	66 90                	xchg   %ax,%ax
+80107017:	66 90                	xchg   %ax,%ax
+80107019:	66 90                	xchg   %ax,%ax
+8010701b:	66 90                	xchg   %ax,%ax
+8010701d:	66 90                	xchg   %ax,%ax
+8010701f:	90                   	nop
 
-80106010 <uartgetc>:
+80107020 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
   if(!uart)
-80106010:	a1 c0 45 11 80       	mov    0x801145c0,%eax
-80106015:	85 c0                	test   %eax,%eax
-80106017:	74 17                	je     80106030 <uartgetc+0x20>
+80107020:	a1 e0 5b 11 80       	mov    0x80115be0,%eax
+80107025:	85 c0                	test   %eax,%eax
+80107027:	74 17                	je     80107040 <uartgetc+0x20>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80106019:	ba fd 03 00 00       	mov    $0x3fd,%edx
-8010601e:	ec                   	in     (%dx),%al
+80107029:	ba fd 03 00 00       	mov    $0x3fd,%edx
+8010702e:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-8010601f:	a8 01                	test   $0x1,%al
-80106021:	74 0d                	je     80106030 <uartgetc+0x20>
-80106023:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80106028:	ec                   	in     (%dx),%al
+8010702f:	a8 01                	test   $0x1,%al
+80107031:	74 0d                	je     80107040 <uartgetc+0x20>
+80107033:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80107038:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80106029:	0f b6 c0             	movzbl %al,%eax
-8010602c:	c3                   	ret    
-8010602d:	8d 76 00             	lea    0x0(%esi),%esi
+80107039:	0f b6 c0             	movzbl %al,%eax
+8010703c:	c3                   	ret    
+8010703d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80106030:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107040:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106035:	c3                   	ret    
-80106036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010603d:	8d 76 00             	lea    0x0(%esi),%esi
+80107045:	c3                   	ret    
+80107046:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010704d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80106040 <uartinit>:
+80107050 <uartinit>:
 {
-80106040:	55                   	push   %ebp
+80107050:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80106041:	31 c9                	xor    %ecx,%ecx
-80106043:	89 c8                	mov    %ecx,%eax
-80106045:	89 e5                	mov    %esp,%ebp
-80106047:	57                   	push   %edi
-80106048:	bf fa 03 00 00       	mov    $0x3fa,%edi
-8010604d:	56                   	push   %esi
-8010604e:	89 fa                	mov    %edi,%edx
-80106050:	53                   	push   %ebx
-80106051:	83 ec 1c             	sub    $0x1c,%esp
-80106054:	ee                   	out    %al,(%dx)
-80106055:	be fb 03 00 00       	mov    $0x3fb,%esi
-8010605a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-8010605f:	89 f2                	mov    %esi,%edx
-80106061:	ee                   	out    %al,(%dx)
-80106062:	b8 0c 00 00 00       	mov    $0xc,%eax
-80106067:	ba f8 03 00 00       	mov    $0x3f8,%edx
-8010606c:	ee                   	out    %al,(%dx)
-8010606d:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-80106072:	89 c8                	mov    %ecx,%eax
-80106074:	89 da                	mov    %ebx,%edx
-80106076:	ee                   	out    %al,(%dx)
-80106077:	b8 03 00 00 00       	mov    $0x3,%eax
-8010607c:	89 f2                	mov    %esi,%edx
-8010607e:	ee                   	out    %al,(%dx)
-8010607f:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80106084:	89 c8                	mov    %ecx,%eax
-80106086:	ee                   	out    %al,(%dx)
-80106087:	b8 01 00 00 00       	mov    $0x1,%eax
-8010608c:	89 da                	mov    %ebx,%edx
-8010608e:	ee                   	out    %al,(%dx)
+80107051:	31 c9                	xor    %ecx,%ecx
+80107053:	89 c8                	mov    %ecx,%eax
+80107055:	89 e5                	mov    %esp,%ebp
+80107057:	57                   	push   %edi
+80107058:	bf fa 03 00 00       	mov    $0x3fa,%edi
+8010705d:	56                   	push   %esi
+8010705e:	89 fa                	mov    %edi,%edx
+80107060:	53                   	push   %ebx
+80107061:	83 ec 1c             	sub    $0x1c,%esp
+80107064:	ee                   	out    %al,(%dx)
+80107065:	be fb 03 00 00       	mov    $0x3fb,%esi
+8010706a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+8010706f:	89 f2                	mov    %esi,%edx
+80107071:	ee                   	out    %al,(%dx)
+80107072:	b8 0c 00 00 00       	mov    $0xc,%eax
+80107077:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010707c:	ee                   	out    %al,(%dx)
+8010707d:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+80107082:	89 c8                	mov    %ecx,%eax
+80107084:	89 da                	mov    %ebx,%edx
+80107086:	ee                   	out    %al,(%dx)
+80107087:	b8 03 00 00 00       	mov    $0x3,%eax
+8010708c:	89 f2                	mov    %esi,%edx
+8010708e:	ee                   	out    %al,(%dx)
+8010708f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80107094:	89 c8                	mov    %ecx,%eax
+80107096:	ee                   	out    %al,(%dx)
+80107097:	b8 01 00 00 00       	mov    $0x1,%eax
+8010709c:	89 da                	mov    %ebx,%edx
+8010709e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010608f:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80106094:	ec                   	in     (%dx),%al
+8010709f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+801070a4:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80106095:	3c ff                	cmp    $0xff,%al
-80106097:	74 78                	je     80106111 <uartinit+0xd1>
+801070a5:	3c ff                	cmp    $0xff,%al
+801070a7:	74 78                	je     80107121 <uartinit+0xd1>
   uart = 1;
-80106099:	c7 05 c0 45 11 80 01 	movl   $0x1,0x801145c0
-801060a0:	00 00 00 
-801060a3:	89 fa                	mov    %edi,%edx
-801060a5:	ec                   	in     (%dx),%al
-801060a6:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801060ab:	ec                   	in     (%dx),%al
+801070a9:	c7 05 e0 5b 11 80 01 	movl   $0x1,0x80115be0
+801070b0:	00 00 00 
+801070b3:	89 fa                	mov    %edi,%edx
+801070b5:	ec                   	in     (%dx),%al
+801070b6:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801070bb:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-801060ac:	83 ec 08             	sub    $0x8,%esp
+801070bc:	83 ec 08             	sub    $0x8,%esp
   for(p="xv6...\n"; *p; p++)
-801060af:	bf d0 7e 10 80       	mov    $0x80107ed0,%edi
-801060b4:	be fd 03 00 00       	mov    $0x3fd,%esi
+801070bf:	bf c8 8e 10 80       	mov    $0x80108ec8,%edi
+801070c4:	be fd 03 00 00       	mov    $0x3fd,%esi
   ioapicenable(IRQ_COM1, 0);
-801060b9:	6a 00                	push   $0x0
-801060bb:	6a 04                	push   $0x4
-801060bd:	e8 be c3 ff ff       	call   80102480 <ioapicenable>
+801070c9:	6a 00                	push   $0x0
+801070cb:	6a 04                	push   $0x4
+801070cd:	e8 ae b3 ff ff       	call   80102480 <ioapicenable>
   for(p="xv6...\n"; *p; p++)
-801060c2:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
+801070d2:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
   ioapicenable(IRQ_COM1, 0);
-801060c6:	83 c4 10             	add    $0x10,%esp
-801060c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070d6:	83 c4 10             	add    $0x10,%esp
+801070d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(!uart)
-801060d0:	a1 c0 45 11 80       	mov    0x801145c0,%eax
-801060d5:	bb 80 00 00 00       	mov    $0x80,%ebx
-801060da:	85 c0                	test   %eax,%eax
-801060dc:	75 14                	jne    801060f2 <uartinit+0xb2>
-801060de:	eb 23                	jmp    80106103 <uartinit+0xc3>
+801070e0:	a1 e0 5b 11 80       	mov    0x80115be0,%eax
+801070e5:	bb 80 00 00 00       	mov    $0x80,%ebx
+801070ea:	85 c0                	test   %eax,%eax
+801070ec:	75 14                	jne    80107102 <uartinit+0xb2>
+801070ee:	eb 23                	jmp    80107113 <uartinit+0xc3>
     microdelay(10);
-801060e0:	83 ec 0c             	sub    $0xc,%esp
-801060e3:	6a 0a                	push   $0xa
-801060e5:	e8 46 c8 ff ff       	call   80102930 <microdelay>
+801070f0:	83 ec 0c             	sub    $0xc,%esp
+801070f3:	6a 0a                	push   $0xa
+801070f5:	e8 36 b8 ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-801060ea:	83 c4 10             	add    $0x10,%esp
-801060ed:	83 eb 01             	sub    $0x1,%ebx
-801060f0:	74 07                	je     801060f9 <uartinit+0xb9>
-801060f2:	89 f2                	mov    %esi,%edx
-801060f4:	ec                   	in     (%dx),%al
-801060f5:	a8 20                	test   $0x20,%al
-801060f7:	74 e7                	je     801060e0 <uartinit+0xa0>
+801070fa:	83 c4 10             	add    $0x10,%esp
+801070fd:	83 eb 01             	sub    $0x1,%ebx
+80107100:	74 07                	je     80107109 <uartinit+0xb9>
+80107102:	89 f2                	mov    %esi,%edx
+80107104:	ec                   	in     (%dx),%al
+80107105:	a8 20                	test   $0x20,%al
+80107107:	74 e7                	je     801070f0 <uartinit+0xa0>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801060f9:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-801060fd:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80106102:	ee                   	out    %al,(%dx)
+80107109:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+8010710d:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80107112:	ee                   	out    %al,(%dx)
   for(p="xv6...\n"; *p; p++)
-80106103:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-80106107:	83 c7 01             	add    $0x1,%edi
-8010610a:	88 45 e7             	mov    %al,-0x19(%ebp)
-8010610d:	84 c0                	test   %al,%al
-8010610f:	75 bf                	jne    801060d0 <uartinit+0x90>
-}
-80106111:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106114:	5b                   	pop    %ebx
-80106115:	5e                   	pop    %esi
-80106116:	5f                   	pop    %edi
-80106117:	5d                   	pop    %ebp
-80106118:	c3                   	ret    
-80106119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107113:	0f b6 47 01          	movzbl 0x1(%edi),%eax
+80107117:	83 c7 01             	add    $0x1,%edi
+8010711a:	88 45 e7             	mov    %al,-0x19(%ebp)
+8010711d:	84 c0                	test   %al,%al
+8010711f:	75 bf                	jne    801070e0 <uartinit+0x90>
+}
+80107121:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107124:	5b                   	pop    %ebx
+80107125:	5e                   	pop    %esi
+80107126:	5f                   	pop    %edi
+80107127:	5d                   	pop    %ebp
+80107128:	c3                   	ret    
+80107129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106120 <uartputc>:
+80107130 <uartputc>:
   if(!uart)
-80106120:	a1 c0 45 11 80       	mov    0x801145c0,%eax
-80106125:	85 c0                	test   %eax,%eax
-80106127:	74 47                	je     80106170 <uartputc+0x50>
-{
-80106129:	55                   	push   %ebp
-8010612a:	89 e5                	mov    %esp,%ebp
-8010612c:	56                   	push   %esi
+80107130:	a1 e0 5b 11 80       	mov    0x80115be0,%eax
+80107135:	85 c0                	test   %eax,%eax
+80107137:	74 47                	je     80107180 <uartputc+0x50>
+{
+80107139:	55                   	push   %ebp
+8010713a:	89 e5                	mov    %esp,%ebp
+8010713c:	56                   	push   %esi
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010612d:	be fd 03 00 00       	mov    $0x3fd,%esi
-80106132:	53                   	push   %ebx
-80106133:	bb 80 00 00 00       	mov    $0x80,%ebx
-80106138:	eb 18                	jmp    80106152 <uartputc+0x32>
-8010613a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010713d:	be fd 03 00 00       	mov    $0x3fd,%esi
+80107142:	53                   	push   %ebx
+80107143:	bb 80 00 00 00       	mov    $0x80,%ebx
+80107148:	eb 18                	jmp    80107162 <uartputc+0x32>
+8010714a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     microdelay(10);
-80106140:	83 ec 0c             	sub    $0xc,%esp
-80106143:	6a 0a                	push   $0xa
-80106145:	e8 e6 c7 ff ff       	call   80102930 <microdelay>
+80107150:	83 ec 0c             	sub    $0xc,%esp
+80107153:	6a 0a                	push   $0xa
+80107155:	e8 d6 b7 ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-8010614a:	83 c4 10             	add    $0x10,%esp
-8010614d:	83 eb 01             	sub    $0x1,%ebx
-80106150:	74 07                	je     80106159 <uartputc+0x39>
-80106152:	89 f2                	mov    %esi,%edx
-80106154:	ec                   	in     (%dx),%al
-80106155:	a8 20                	test   $0x20,%al
-80106157:	74 e7                	je     80106140 <uartputc+0x20>
+8010715a:	83 c4 10             	add    $0x10,%esp
+8010715d:	83 eb 01             	sub    $0x1,%ebx
+80107160:	74 07                	je     80107169 <uartputc+0x39>
+80107162:	89 f2                	mov    %esi,%edx
+80107164:	ec                   	in     (%dx),%al
+80107165:	a8 20                	test   $0x20,%al
+80107167:	74 e7                	je     80107150 <uartputc+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80106159:	8b 45 08             	mov    0x8(%ebp),%eax
-8010615c:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80106161:	ee                   	out    %al,(%dx)
-}
-80106162:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106165:	5b                   	pop    %ebx
-80106166:	5e                   	pop    %esi
-80106167:	5d                   	pop    %ebp
-80106168:	c3                   	ret    
-80106169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106170:	c3                   	ret    
-80106171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106178:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010617f:	90                   	nop
+80107169:	8b 45 08             	mov    0x8(%ebp),%eax
+8010716c:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80107171:	ee                   	out    %al,(%dx)
+}
+80107172:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107175:	5b                   	pop    %ebx
+80107176:	5e                   	pop    %esi
+80107177:	5d                   	pop    %ebp
+80107178:	c3                   	ret    
+80107179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107180:	c3                   	ret    
+80107181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010718f:	90                   	nop
 
-80106180 <uartintr>:
+80107190 <uartintr>:
 
 void
 uartintr(void)
 {
-80106180:	55                   	push   %ebp
-80106181:	89 e5                	mov    %esp,%ebp
-80106183:	83 ec 14             	sub    $0x14,%esp
+80107190:	55                   	push   %ebp
+80107191:	89 e5                	mov    %esp,%ebp
+80107193:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80106186:	68 10 60 10 80       	push   $0x80106010
-8010618b:	e8 f0 a6 ff ff       	call   80100880 <consoleintr>
+80107196:	68 20 70 10 80       	push   $0x80107020
+8010719b:	e8 e0 96 ff ff       	call   80100880 <consoleintr>
 }
-80106190:	83 c4 10             	add    $0x10,%esp
-80106193:	c9                   	leave  
-80106194:	c3                   	ret    
+801071a0:	83 c4 10             	add    $0x10,%esp
+801071a3:	c9                   	leave  
+801071a4:	c3                   	ret    
 
-80106195 <vector0>:
+801071a5 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80106195:	6a 00                	push   $0x0
+801071a5:	6a 00                	push   $0x0
   pushl $0
-80106197:	6a 00                	push   $0x0
+801071a7:	6a 00                	push   $0x0
   jmp alltraps
-80106199:	e9 09 fb ff ff       	jmp    80105ca7 <alltraps>
+801071a9:	e9 e7 fa ff ff       	jmp    80106c95 <alltraps>
 
-8010619e <vector1>:
+801071ae <vector1>:
 .globl vector1
 vector1:
   pushl $0
-8010619e:	6a 00                	push   $0x0
+801071ae:	6a 00                	push   $0x0
   pushl $1
-801061a0:	6a 01                	push   $0x1
+801071b0:	6a 01                	push   $0x1
   jmp alltraps
-801061a2:	e9 00 fb ff ff       	jmp    80105ca7 <alltraps>
+801071b2:	e9 de fa ff ff       	jmp    80106c95 <alltraps>
 
-801061a7 <vector2>:
+801071b7 <vector2>:
 .globl vector2
 vector2:
   pushl $0
-801061a7:	6a 00                	push   $0x0
+801071b7:	6a 00                	push   $0x0
   pushl $2
-801061a9:	6a 02                	push   $0x2
+801071b9:	6a 02                	push   $0x2
   jmp alltraps
-801061ab:	e9 f7 fa ff ff       	jmp    80105ca7 <alltraps>
+801071bb:	e9 d5 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061b0 <vector3>:
+801071c0 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-801061b0:	6a 00                	push   $0x0
+801071c0:	6a 00                	push   $0x0
   pushl $3
-801061b2:	6a 03                	push   $0x3
+801071c2:	6a 03                	push   $0x3
   jmp alltraps
-801061b4:	e9 ee fa ff ff       	jmp    80105ca7 <alltraps>
+801071c4:	e9 cc fa ff ff       	jmp    80106c95 <alltraps>
 
-801061b9 <vector4>:
+801071c9 <vector4>:
 .globl vector4
 vector4:
   pushl $0
-801061b9:	6a 00                	push   $0x0
+801071c9:	6a 00                	push   $0x0
   pushl $4
-801061bb:	6a 04                	push   $0x4
+801071cb:	6a 04                	push   $0x4
   jmp alltraps
-801061bd:	e9 e5 fa ff ff       	jmp    80105ca7 <alltraps>
+801071cd:	e9 c3 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061c2 <vector5>:
+801071d2 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-801061c2:	6a 00                	push   $0x0
+801071d2:	6a 00                	push   $0x0
   pushl $5
-801061c4:	6a 05                	push   $0x5
+801071d4:	6a 05                	push   $0x5
   jmp alltraps
-801061c6:	e9 dc fa ff ff       	jmp    80105ca7 <alltraps>
+801071d6:	e9 ba fa ff ff       	jmp    80106c95 <alltraps>
 
-801061cb <vector6>:
+801071db <vector6>:
 .globl vector6
 vector6:
   pushl $0
-801061cb:	6a 00                	push   $0x0
+801071db:	6a 00                	push   $0x0
   pushl $6
-801061cd:	6a 06                	push   $0x6
+801071dd:	6a 06                	push   $0x6
   jmp alltraps
-801061cf:	e9 d3 fa ff ff       	jmp    80105ca7 <alltraps>
+801071df:	e9 b1 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061d4 <vector7>:
+801071e4 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-801061d4:	6a 00                	push   $0x0
+801071e4:	6a 00                	push   $0x0
   pushl $7
-801061d6:	6a 07                	push   $0x7
+801071e6:	6a 07                	push   $0x7
   jmp alltraps
-801061d8:	e9 ca fa ff ff       	jmp    80105ca7 <alltraps>
+801071e8:	e9 a8 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061dd <vector8>:
+801071ed <vector8>:
 .globl vector8
 vector8:
   pushl $8
-801061dd:	6a 08                	push   $0x8
+801071ed:	6a 08                	push   $0x8
   jmp alltraps
-801061df:	e9 c3 fa ff ff       	jmp    80105ca7 <alltraps>
+801071ef:	e9 a1 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061e4 <vector9>:
+801071f4 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-801061e4:	6a 00                	push   $0x0
+801071f4:	6a 00                	push   $0x0
   pushl $9
-801061e6:	6a 09                	push   $0x9
+801071f6:	6a 09                	push   $0x9
   jmp alltraps
-801061e8:	e9 ba fa ff ff       	jmp    80105ca7 <alltraps>
+801071f8:	e9 98 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061ed <vector10>:
+801071fd <vector10>:
 .globl vector10
 vector10:
   pushl $10
-801061ed:	6a 0a                	push   $0xa
+801071fd:	6a 0a                	push   $0xa
   jmp alltraps
-801061ef:	e9 b3 fa ff ff       	jmp    80105ca7 <alltraps>
+801071ff:	e9 91 fa ff ff       	jmp    80106c95 <alltraps>
 
-801061f4 <vector11>:
+80107204 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-801061f4:	6a 0b                	push   $0xb
+80107204:	6a 0b                	push   $0xb
   jmp alltraps
-801061f6:	e9 ac fa ff ff       	jmp    80105ca7 <alltraps>
+80107206:	e9 8a fa ff ff       	jmp    80106c95 <alltraps>
 
-801061fb <vector12>:
+8010720b <vector12>:
 .globl vector12
 vector12:
   pushl $12
-801061fb:	6a 0c                	push   $0xc
+8010720b:	6a 0c                	push   $0xc
   jmp alltraps
-801061fd:	e9 a5 fa ff ff       	jmp    80105ca7 <alltraps>
+8010720d:	e9 83 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106202 <vector13>:
+80107212 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80106202:	6a 0d                	push   $0xd
+80107212:	6a 0d                	push   $0xd
   jmp alltraps
-80106204:	e9 9e fa ff ff       	jmp    80105ca7 <alltraps>
+80107214:	e9 7c fa ff ff       	jmp    80106c95 <alltraps>
 
-80106209 <vector14>:
+80107219 <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80106209:	6a 0e                	push   $0xe
+80107219:	6a 0e                	push   $0xe
   jmp alltraps
-8010620b:	e9 97 fa ff ff       	jmp    80105ca7 <alltraps>
+8010721b:	e9 75 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106210 <vector15>:
+80107220 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80106210:	6a 00                	push   $0x0
+80107220:	6a 00                	push   $0x0
   pushl $15
-80106212:	6a 0f                	push   $0xf
+80107222:	6a 0f                	push   $0xf
   jmp alltraps
-80106214:	e9 8e fa ff ff       	jmp    80105ca7 <alltraps>
+80107224:	e9 6c fa ff ff       	jmp    80106c95 <alltraps>
 
-80106219 <vector16>:
+80107229 <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80106219:	6a 00                	push   $0x0
+80107229:	6a 00                	push   $0x0
   pushl $16
-8010621b:	6a 10                	push   $0x10
+8010722b:	6a 10                	push   $0x10
   jmp alltraps
-8010621d:	e9 85 fa ff ff       	jmp    80105ca7 <alltraps>
+8010722d:	e9 63 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106222 <vector17>:
+80107232 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80106222:	6a 11                	push   $0x11
+80107232:	6a 11                	push   $0x11
   jmp alltraps
-80106224:	e9 7e fa ff ff       	jmp    80105ca7 <alltraps>
+80107234:	e9 5c fa ff ff       	jmp    80106c95 <alltraps>
 
-80106229 <vector18>:
+80107239 <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80106229:	6a 00                	push   $0x0
+80107239:	6a 00                	push   $0x0
   pushl $18
-8010622b:	6a 12                	push   $0x12
+8010723b:	6a 12                	push   $0x12
   jmp alltraps
-8010622d:	e9 75 fa ff ff       	jmp    80105ca7 <alltraps>
+8010723d:	e9 53 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106232 <vector19>:
+80107242 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80106232:	6a 00                	push   $0x0
+80107242:	6a 00                	push   $0x0
   pushl $19
-80106234:	6a 13                	push   $0x13
+80107244:	6a 13                	push   $0x13
   jmp alltraps
-80106236:	e9 6c fa ff ff       	jmp    80105ca7 <alltraps>
+80107246:	e9 4a fa ff ff       	jmp    80106c95 <alltraps>
 
-8010623b <vector20>:
+8010724b <vector20>:
 .globl vector20
 vector20:
   pushl $0
-8010623b:	6a 00                	push   $0x0
+8010724b:	6a 00                	push   $0x0
   pushl $20
-8010623d:	6a 14                	push   $0x14
+8010724d:	6a 14                	push   $0x14
   jmp alltraps
-8010623f:	e9 63 fa ff ff       	jmp    80105ca7 <alltraps>
+8010724f:	e9 41 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106244 <vector21>:
+80107254 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80106244:	6a 00                	push   $0x0
+80107254:	6a 00                	push   $0x0
   pushl $21
-80106246:	6a 15                	push   $0x15
+80107256:	6a 15                	push   $0x15
   jmp alltraps
-80106248:	e9 5a fa ff ff       	jmp    80105ca7 <alltraps>
+80107258:	e9 38 fa ff ff       	jmp    80106c95 <alltraps>
 
-8010624d <vector22>:
+8010725d <vector22>:
 .globl vector22
 vector22:
   pushl $0
-8010624d:	6a 00                	push   $0x0
+8010725d:	6a 00                	push   $0x0
   pushl $22
-8010624f:	6a 16                	push   $0x16
+8010725f:	6a 16                	push   $0x16
   jmp alltraps
-80106251:	e9 51 fa ff ff       	jmp    80105ca7 <alltraps>
+80107261:	e9 2f fa ff ff       	jmp    80106c95 <alltraps>
 
-80106256 <vector23>:
+80107266 <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80106256:	6a 00                	push   $0x0
+80107266:	6a 00                	push   $0x0
   pushl $23
-80106258:	6a 17                	push   $0x17
+80107268:	6a 17                	push   $0x17
   jmp alltraps
-8010625a:	e9 48 fa ff ff       	jmp    80105ca7 <alltraps>
+8010726a:	e9 26 fa ff ff       	jmp    80106c95 <alltraps>
 
-8010625f <vector24>:
+8010726f <vector24>:
 .globl vector24
 vector24:
   pushl $0
-8010625f:	6a 00                	push   $0x0
+8010726f:	6a 00                	push   $0x0
   pushl $24
-80106261:	6a 18                	push   $0x18
+80107271:	6a 18                	push   $0x18
   jmp alltraps
-80106263:	e9 3f fa ff ff       	jmp    80105ca7 <alltraps>
+80107273:	e9 1d fa ff ff       	jmp    80106c95 <alltraps>
 
-80106268 <vector25>:
+80107278 <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80106268:	6a 00                	push   $0x0
+80107278:	6a 00                	push   $0x0
   pushl $25
-8010626a:	6a 19                	push   $0x19
+8010727a:	6a 19                	push   $0x19
   jmp alltraps
-8010626c:	e9 36 fa ff ff       	jmp    80105ca7 <alltraps>
+8010727c:	e9 14 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106271 <vector26>:
+80107281 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80106271:	6a 00                	push   $0x0
+80107281:	6a 00                	push   $0x0
   pushl $26
-80106273:	6a 1a                	push   $0x1a
+80107283:	6a 1a                	push   $0x1a
   jmp alltraps
-80106275:	e9 2d fa ff ff       	jmp    80105ca7 <alltraps>
+80107285:	e9 0b fa ff ff       	jmp    80106c95 <alltraps>
 
-8010627a <vector27>:
+8010728a <vector27>:
 .globl vector27
 vector27:
   pushl $0
-8010627a:	6a 00                	push   $0x0
+8010728a:	6a 00                	push   $0x0
   pushl $27
-8010627c:	6a 1b                	push   $0x1b
+8010728c:	6a 1b                	push   $0x1b
   jmp alltraps
-8010627e:	e9 24 fa ff ff       	jmp    80105ca7 <alltraps>
+8010728e:	e9 02 fa ff ff       	jmp    80106c95 <alltraps>
 
-80106283 <vector28>:
+80107293 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80106283:	6a 00                	push   $0x0
+80107293:	6a 00                	push   $0x0
   pushl $28
-80106285:	6a 1c                	push   $0x1c
+80107295:	6a 1c                	push   $0x1c
   jmp alltraps
-80106287:	e9 1b fa ff ff       	jmp    80105ca7 <alltraps>
+80107297:	e9 f9 f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010628c <vector29>:
+8010729c <vector29>:
 .globl vector29
 vector29:
   pushl $0
-8010628c:	6a 00                	push   $0x0
+8010729c:	6a 00                	push   $0x0
   pushl $29
-8010628e:	6a 1d                	push   $0x1d
+8010729e:	6a 1d                	push   $0x1d
   jmp alltraps
-80106290:	e9 12 fa ff ff       	jmp    80105ca7 <alltraps>
+801072a0:	e9 f0 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106295 <vector30>:
+801072a5 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80106295:	6a 00                	push   $0x0
+801072a5:	6a 00                	push   $0x0
   pushl $30
-80106297:	6a 1e                	push   $0x1e
+801072a7:	6a 1e                	push   $0x1e
   jmp alltraps
-80106299:	e9 09 fa ff ff       	jmp    80105ca7 <alltraps>
+801072a9:	e9 e7 f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010629e <vector31>:
+801072ae <vector31>:
 .globl vector31
 vector31:
   pushl $0
-8010629e:	6a 00                	push   $0x0
+801072ae:	6a 00                	push   $0x0
   pushl $31
-801062a0:	6a 1f                	push   $0x1f
+801072b0:	6a 1f                	push   $0x1f
   jmp alltraps
-801062a2:	e9 00 fa ff ff       	jmp    80105ca7 <alltraps>
+801072b2:	e9 de f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062a7 <vector32>:
+801072b7 <vector32>:
 .globl vector32
 vector32:
   pushl $0
-801062a7:	6a 00                	push   $0x0
+801072b7:	6a 00                	push   $0x0
   pushl $32
-801062a9:	6a 20                	push   $0x20
+801072b9:	6a 20                	push   $0x20
   jmp alltraps
-801062ab:	e9 f7 f9 ff ff       	jmp    80105ca7 <alltraps>
+801072bb:	e9 d5 f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062b0 <vector33>:
+801072c0 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-801062b0:	6a 00                	push   $0x0
+801072c0:	6a 00                	push   $0x0
   pushl $33
-801062b2:	6a 21                	push   $0x21
+801072c2:	6a 21                	push   $0x21
   jmp alltraps
-801062b4:	e9 ee f9 ff ff       	jmp    80105ca7 <alltraps>
+801072c4:	e9 cc f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062b9 <vector34>:
+801072c9 <vector34>:
 .globl vector34
 vector34:
   pushl $0
-801062b9:	6a 00                	push   $0x0
+801072c9:	6a 00                	push   $0x0
   pushl $34
-801062bb:	6a 22                	push   $0x22
+801072cb:	6a 22                	push   $0x22
   jmp alltraps
-801062bd:	e9 e5 f9 ff ff       	jmp    80105ca7 <alltraps>
+801072cd:	e9 c3 f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062c2 <vector35>:
+801072d2 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-801062c2:	6a 00                	push   $0x0
+801072d2:	6a 00                	push   $0x0
   pushl $35
-801062c4:	6a 23                	push   $0x23
+801072d4:	6a 23                	push   $0x23
   jmp alltraps
-801062c6:	e9 dc f9 ff ff       	jmp    80105ca7 <alltraps>
+801072d6:	e9 ba f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062cb <vector36>:
+801072db <vector36>:
 .globl vector36
 vector36:
   pushl $0
-801062cb:	6a 00                	push   $0x0
+801072db:	6a 00                	push   $0x0
   pushl $36
-801062cd:	6a 24                	push   $0x24
+801072dd:	6a 24                	push   $0x24
   jmp alltraps
-801062cf:	e9 d3 f9 ff ff       	jmp    80105ca7 <alltraps>
+801072df:	e9 b1 f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062d4 <vector37>:
+801072e4 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-801062d4:	6a 00                	push   $0x0
+801072e4:	6a 00                	push   $0x0
   pushl $37
-801062d6:	6a 25                	push   $0x25
+801072e6:	6a 25                	push   $0x25
   jmp alltraps
-801062d8:	e9 ca f9 ff ff       	jmp    80105ca7 <alltraps>
+801072e8:	e9 a8 f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062dd <vector38>:
+801072ed <vector38>:
 .globl vector38
 vector38:
   pushl $0
-801062dd:	6a 00                	push   $0x0
+801072ed:	6a 00                	push   $0x0
   pushl $38
-801062df:	6a 26                	push   $0x26
+801072ef:	6a 26                	push   $0x26
   jmp alltraps
-801062e1:	e9 c1 f9 ff ff       	jmp    80105ca7 <alltraps>
+801072f1:	e9 9f f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062e6 <vector39>:
+801072f6 <vector39>:
 .globl vector39
 vector39:
   pushl $0
-801062e6:	6a 00                	push   $0x0
+801072f6:	6a 00                	push   $0x0
   pushl $39
-801062e8:	6a 27                	push   $0x27
+801072f8:	6a 27                	push   $0x27
   jmp alltraps
-801062ea:	e9 b8 f9 ff ff       	jmp    80105ca7 <alltraps>
+801072fa:	e9 96 f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062ef <vector40>:
+801072ff <vector40>:
 .globl vector40
 vector40:
   pushl $0
-801062ef:	6a 00                	push   $0x0
+801072ff:	6a 00                	push   $0x0
   pushl $40
-801062f1:	6a 28                	push   $0x28
+80107301:	6a 28                	push   $0x28
   jmp alltraps
-801062f3:	e9 af f9 ff ff       	jmp    80105ca7 <alltraps>
+80107303:	e9 8d f9 ff ff       	jmp    80106c95 <alltraps>
 
-801062f8 <vector41>:
+80107308 <vector41>:
 .globl vector41
 vector41:
   pushl $0
-801062f8:	6a 00                	push   $0x0
+80107308:	6a 00                	push   $0x0
   pushl $41
-801062fa:	6a 29                	push   $0x29
+8010730a:	6a 29                	push   $0x29
   jmp alltraps
-801062fc:	e9 a6 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010730c:	e9 84 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106301 <vector42>:
+80107311 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80106301:	6a 00                	push   $0x0
+80107311:	6a 00                	push   $0x0
   pushl $42
-80106303:	6a 2a                	push   $0x2a
+80107313:	6a 2a                	push   $0x2a
   jmp alltraps
-80106305:	e9 9d f9 ff ff       	jmp    80105ca7 <alltraps>
+80107315:	e9 7b f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010630a <vector43>:
+8010731a <vector43>:
 .globl vector43
 vector43:
   pushl $0
-8010630a:	6a 00                	push   $0x0
+8010731a:	6a 00                	push   $0x0
   pushl $43
-8010630c:	6a 2b                	push   $0x2b
+8010731c:	6a 2b                	push   $0x2b
   jmp alltraps
-8010630e:	e9 94 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010731e:	e9 72 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106313 <vector44>:
+80107323 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80106313:	6a 00                	push   $0x0
+80107323:	6a 00                	push   $0x0
   pushl $44
-80106315:	6a 2c                	push   $0x2c
+80107325:	6a 2c                	push   $0x2c
   jmp alltraps
-80106317:	e9 8b f9 ff ff       	jmp    80105ca7 <alltraps>
+80107327:	e9 69 f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010631c <vector45>:
+8010732c <vector45>:
 .globl vector45
 vector45:
   pushl $0
-8010631c:	6a 00                	push   $0x0
+8010732c:	6a 00                	push   $0x0
   pushl $45
-8010631e:	6a 2d                	push   $0x2d
+8010732e:	6a 2d                	push   $0x2d
   jmp alltraps
-80106320:	e9 82 f9 ff ff       	jmp    80105ca7 <alltraps>
+80107330:	e9 60 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106325 <vector46>:
+80107335 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80106325:	6a 00                	push   $0x0
+80107335:	6a 00                	push   $0x0
   pushl $46
-80106327:	6a 2e                	push   $0x2e
+80107337:	6a 2e                	push   $0x2e
   jmp alltraps
-80106329:	e9 79 f9 ff ff       	jmp    80105ca7 <alltraps>
+80107339:	e9 57 f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010632e <vector47>:
+8010733e <vector47>:
 .globl vector47
 vector47:
   pushl $0
-8010632e:	6a 00                	push   $0x0
+8010733e:	6a 00                	push   $0x0
   pushl $47
-80106330:	6a 2f                	push   $0x2f
+80107340:	6a 2f                	push   $0x2f
   jmp alltraps
-80106332:	e9 70 f9 ff ff       	jmp    80105ca7 <alltraps>
+80107342:	e9 4e f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106337 <vector48>:
+80107347 <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80106337:	6a 00                	push   $0x0
+80107347:	6a 00                	push   $0x0
   pushl $48
-80106339:	6a 30                	push   $0x30
+80107349:	6a 30                	push   $0x30
   jmp alltraps
-8010633b:	e9 67 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010734b:	e9 45 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106340 <vector49>:
+80107350 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80106340:	6a 00                	push   $0x0
+80107350:	6a 00                	push   $0x0
   pushl $49
-80106342:	6a 31                	push   $0x31
+80107352:	6a 31                	push   $0x31
   jmp alltraps
-80106344:	e9 5e f9 ff ff       	jmp    80105ca7 <alltraps>
+80107354:	e9 3c f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106349 <vector50>:
+80107359 <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80106349:	6a 00                	push   $0x0
+80107359:	6a 00                	push   $0x0
   pushl $50
-8010634b:	6a 32                	push   $0x32
+8010735b:	6a 32                	push   $0x32
   jmp alltraps
-8010634d:	e9 55 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010735d:	e9 33 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106352 <vector51>:
+80107362 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80106352:	6a 00                	push   $0x0
+80107362:	6a 00                	push   $0x0
   pushl $51
-80106354:	6a 33                	push   $0x33
+80107364:	6a 33                	push   $0x33
   jmp alltraps
-80106356:	e9 4c f9 ff ff       	jmp    80105ca7 <alltraps>
+80107366:	e9 2a f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010635b <vector52>:
+8010736b <vector52>:
 .globl vector52
 vector52:
   pushl $0
-8010635b:	6a 00                	push   $0x0
+8010736b:	6a 00                	push   $0x0
   pushl $52
-8010635d:	6a 34                	push   $0x34
+8010736d:	6a 34                	push   $0x34
   jmp alltraps
-8010635f:	e9 43 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010736f:	e9 21 f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106364 <vector53>:
+80107374 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80106364:	6a 00                	push   $0x0
+80107374:	6a 00                	push   $0x0
   pushl $53
-80106366:	6a 35                	push   $0x35
+80107376:	6a 35                	push   $0x35
   jmp alltraps
-80106368:	e9 3a f9 ff ff       	jmp    80105ca7 <alltraps>
+80107378:	e9 18 f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010636d <vector54>:
+8010737d <vector54>:
 .globl vector54
 vector54:
   pushl $0
-8010636d:	6a 00                	push   $0x0
+8010737d:	6a 00                	push   $0x0
   pushl $54
-8010636f:	6a 36                	push   $0x36
+8010737f:	6a 36                	push   $0x36
   jmp alltraps
-80106371:	e9 31 f9 ff ff       	jmp    80105ca7 <alltraps>
+80107381:	e9 0f f9 ff ff       	jmp    80106c95 <alltraps>
 
-80106376 <vector55>:
+80107386 <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80106376:	6a 00                	push   $0x0
+80107386:	6a 00                	push   $0x0
   pushl $55
-80106378:	6a 37                	push   $0x37
+80107388:	6a 37                	push   $0x37
   jmp alltraps
-8010637a:	e9 28 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010738a:	e9 06 f9 ff ff       	jmp    80106c95 <alltraps>
 
-8010637f <vector56>:
+8010738f <vector56>:
 .globl vector56
 vector56:
   pushl $0
-8010637f:	6a 00                	push   $0x0
+8010738f:	6a 00                	push   $0x0
   pushl $56
-80106381:	6a 38                	push   $0x38
+80107391:	6a 38                	push   $0x38
   jmp alltraps
-80106383:	e9 1f f9 ff ff       	jmp    80105ca7 <alltraps>
+80107393:	e9 fd f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106388 <vector57>:
+80107398 <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80106388:	6a 00                	push   $0x0
+80107398:	6a 00                	push   $0x0
   pushl $57
-8010638a:	6a 39                	push   $0x39
+8010739a:	6a 39                	push   $0x39
   jmp alltraps
-8010638c:	e9 16 f9 ff ff       	jmp    80105ca7 <alltraps>
+8010739c:	e9 f4 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106391 <vector58>:
+801073a1 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80106391:	6a 00                	push   $0x0
+801073a1:	6a 00                	push   $0x0
   pushl $58
-80106393:	6a 3a                	push   $0x3a
+801073a3:	6a 3a                	push   $0x3a
   jmp alltraps
-80106395:	e9 0d f9 ff ff       	jmp    80105ca7 <alltraps>
+801073a5:	e9 eb f8 ff ff       	jmp    80106c95 <alltraps>
 
-8010639a <vector59>:
+801073aa <vector59>:
 .globl vector59
 vector59:
   pushl $0
-8010639a:	6a 00                	push   $0x0
+801073aa:	6a 00                	push   $0x0
   pushl $59
-8010639c:	6a 3b                	push   $0x3b
+801073ac:	6a 3b                	push   $0x3b
   jmp alltraps
-8010639e:	e9 04 f9 ff ff       	jmp    80105ca7 <alltraps>
+801073ae:	e9 e2 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063a3 <vector60>:
+801073b3 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-801063a3:	6a 00                	push   $0x0
+801073b3:	6a 00                	push   $0x0
   pushl $60
-801063a5:	6a 3c                	push   $0x3c
+801073b5:	6a 3c                	push   $0x3c
   jmp alltraps
-801063a7:	e9 fb f8 ff ff       	jmp    80105ca7 <alltraps>
+801073b7:	e9 d9 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063ac <vector61>:
+801073bc <vector61>:
 .globl vector61
 vector61:
   pushl $0
-801063ac:	6a 00                	push   $0x0
+801073bc:	6a 00                	push   $0x0
   pushl $61
-801063ae:	6a 3d                	push   $0x3d
+801073be:	6a 3d                	push   $0x3d
   jmp alltraps
-801063b0:	e9 f2 f8 ff ff       	jmp    80105ca7 <alltraps>
+801073c0:	e9 d0 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063b5 <vector62>:
+801073c5 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-801063b5:	6a 00                	push   $0x0
+801073c5:	6a 00                	push   $0x0
   pushl $62
-801063b7:	6a 3e                	push   $0x3e
+801073c7:	6a 3e                	push   $0x3e
   jmp alltraps
-801063b9:	e9 e9 f8 ff ff       	jmp    80105ca7 <alltraps>
+801073c9:	e9 c7 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063be <vector63>:
+801073ce <vector63>:
 .globl vector63
 vector63:
   pushl $0
-801063be:	6a 00                	push   $0x0
+801073ce:	6a 00                	push   $0x0
   pushl $63
-801063c0:	6a 3f                	push   $0x3f
+801073d0:	6a 3f                	push   $0x3f
   jmp alltraps
-801063c2:	e9 e0 f8 ff ff       	jmp    80105ca7 <alltraps>
+801073d2:	e9 be f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063c7 <vector64>:
+801073d7 <vector64>:
 .globl vector64
 vector64:
   pushl $0
-801063c7:	6a 00                	push   $0x0
+801073d7:	6a 00                	push   $0x0
   pushl $64
-801063c9:	6a 40                	push   $0x40
+801073d9:	6a 40                	push   $0x40
   jmp alltraps
-801063cb:	e9 d7 f8 ff ff       	jmp    80105ca7 <alltraps>
+801073db:	e9 b5 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063d0 <vector65>:
+801073e0 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-801063d0:	6a 00                	push   $0x0
+801073e0:	6a 00                	push   $0x0
   pushl $65
-801063d2:	6a 41                	push   $0x41
+801073e2:	6a 41                	push   $0x41
   jmp alltraps
-801063d4:	e9 ce f8 ff ff       	jmp    80105ca7 <alltraps>
+801073e4:	e9 ac f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063d9 <vector66>:
+801073e9 <vector66>:
 .globl vector66
 vector66:
   pushl $0
-801063d9:	6a 00                	push   $0x0
+801073e9:	6a 00                	push   $0x0
   pushl $66
-801063db:	6a 42                	push   $0x42
+801073eb:	6a 42                	push   $0x42
   jmp alltraps
-801063dd:	e9 c5 f8 ff ff       	jmp    80105ca7 <alltraps>
+801073ed:	e9 a3 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063e2 <vector67>:
+801073f2 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-801063e2:	6a 00                	push   $0x0
+801073f2:	6a 00                	push   $0x0
   pushl $67
-801063e4:	6a 43                	push   $0x43
+801073f4:	6a 43                	push   $0x43
   jmp alltraps
-801063e6:	e9 bc f8 ff ff       	jmp    80105ca7 <alltraps>
+801073f6:	e9 9a f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063eb <vector68>:
+801073fb <vector68>:
 .globl vector68
 vector68:
   pushl $0
-801063eb:	6a 00                	push   $0x0
+801073fb:	6a 00                	push   $0x0
   pushl $68
-801063ed:	6a 44                	push   $0x44
+801073fd:	6a 44                	push   $0x44
   jmp alltraps
-801063ef:	e9 b3 f8 ff ff       	jmp    80105ca7 <alltraps>
+801073ff:	e9 91 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063f4 <vector69>:
+80107404 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-801063f4:	6a 00                	push   $0x0
+80107404:	6a 00                	push   $0x0
   pushl $69
-801063f6:	6a 45                	push   $0x45
+80107406:	6a 45                	push   $0x45
   jmp alltraps
-801063f8:	e9 aa f8 ff ff       	jmp    80105ca7 <alltraps>
+80107408:	e9 88 f8 ff ff       	jmp    80106c95 <alltraps>
 
-801063fd <vector70>:
+8010740d <vector70>:
 .globl vector70
 vector70:
   pushl $0
-801063fd:	6a 00                	push   $0x0
+8010740d:	6a 00                	push   $0x0
   pushl $70
-801063ff:	6a 46                	push   $0x46
+8010740f:	6a 46                	push   $0x46
   jmp alltraps
-80106401:	e9 a1 f8 ff ff       	jmp    80105ca7 <alltraps>
+80107411:	e9 7f f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106406 <vector71>:
+80107416 <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80106406:	6a 00                	push   $0x0
+80107416:	6a 00                	push   $0x0
   pushl $71
-80106408:	6a 47                	push   $0x47
+80107418:	6a 47                	push   $0x47
   jmp alltraps
-8010640a:	e9 98 f8 ff ff       	jmp    80105ca7 <alltraps>
+8010741a:	e9 76 f8 ff ff       	jmp    80106c95 <alltraps>
 
-8010640f <vector72>:
+8010741f <vector72>:
 .globl vector72
 vector72:
   pushl $0
-8010640f:	6a 00                	push   $0x0
+8010741f:	6a 00                	push   $0x0
   pushl $72
-80106411:	6a 48                	push   $0x48
+80107421:	6a 48                	push   $0x48
   jmp alltraps
-80106413:	e9 8f f8 ff ff       	jmp    80105ca7 <alltraps>
+80107423:	e9 6d f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106418 <vector73>:
+80107428 <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80106418:	6a 00                	push   $0x0
+80107428:	6a 00                	push   $0x0
   pushl $73
-8010641a:	6a 49                	push   $0x49
+8010742a:	6a 49                	push   $0x49
   jmp alltraps
-8010641c:	e9 86 f8 ff ff       	jmp    80105ca7 <alltraps>
+8010742c:	e9 64 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106421 <vector74>:
+80107431 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80106421:	6a 00                	push   $0x0
+80107431:	6a 00                	push   $0x0
   pushl $74
-80106423:	6a 4a                	push   $0x4a
+80107433:	6a 4a                	push   $0x4a
   jmp alltraps
-80106425:	e9 7d f8 ff ff       	jmp    80105ca7 <alltraps>
+80107435:	e9 5b f8 ff ff       	jmp    80106c95 <alltraps>
 
-8010642a <vector75>:
+8010743a <vector75>:
 .globl vector75
 vector75:
   pushl $0
-8010642a:	6a 00                	push   $0x0
+8010743a:	6a 00                	push   $0x0
   pushl $75
-8010642c:	6a 4b                	push   $0x4b
+8010743c:	6a 4b                	push   $0x4b
   jmp alltraps
-8010642e:	e9 74 f8 ff ff       	jmp    80105ca7 <alltraps>
+8010743e:	e9 52 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106433 <vector76>:
+80107443 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80106433:	6a 00                	push   $0x0
+80107443:	6a 00                	push   $0x0
   pushl $76
-80106435:	6a 4c                	push   $0x4c
+80107445:	6a 4c                	push   $0x4c
   jmp alltraps
-80106437:	e9 6b f8 ff ff       	jmp    80105ca7 <alltraps>
+80107447:	e9 49 f8 ff ff       	jmp    80106c95 <alltraps>
 
-8010643c <vector77>:
+8010744c <vector77>:
 .globl vector77
 vector77:
   pushl $0
-8010643c:	6a 00                	push   $0x0
+8010744c:	6a 00                	push   $0x0
   pushl $77
-8010643e:	6a 4d                	push   $0x4d
+8010744e:	6a 4d                	push   $0x4d
   jmp alltraps
-80106440:	e9 62 f8 ff ff       	jmp    80105ca7 <alltraps>
+80107450:	e9 40 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106445 <vector78>:
+80107455 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80106445:	6a 00                	push   $0x0
+80107455:	6a 00                	push   $0x0
   pushl $78
-80106447:	6a 4e                	push   $0x4e
+80107457:	6a 4e                	push   $0x4e
   jmp alltraps
-80106449:	e9 59 f8 ff ff       	jmp    80105ca7 <alltraps>
+80107459:	e9 37 f8 ff ff       	jmp    80106c95 <alltraps>
 
-8010644e <vector79>:
+8010745e <vector79>:
 .globl vector79
 vector79:
   pushl $0
-8010644e:	6a 00                	push   $0x0
+8010745e:	6a 00                	push   $0x0
   pushl $79
-80106450:	6a 4f                	push   $0x4f
+80107460:	6a 4f                	push   $0x4f
   jmp alltraps
-80106452:	e9 50 f8 ff ff       	jmp    80105ca7 <alltraps>
+80107462:	e9 2e f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106457 <vector80>:
+80107467 <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80106457:	6a 00                	push   $0x0
+80107467:	6a 00                	push   $0x0
   pushl $80
-80106459:	6a 50                	push   $0x50
+80107469:	6a 50                	push   $0x50
   jmp alltraps
-8010645b:	e9 47 f8 ff ff       	jmp    80105ca7 <alltraps>
+8010746b:	e9 25 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106460 <vector81>:
+80107470 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80106460:	6a 00                	push   $0x0
+80107470:	6a 00                	push   $0x0
   pushl $81
-80106462:	6a 51                	push   $0x51
+80107472:	6a 51                	push   $0x51
   jmp alltraps
-80106464:	e9 3e f8 ff ff       	jmp    80105ca7 <alltraps>
+80107474:	e9 1c f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106469 <vector82>:
+80107479 <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80106469:	6a 00                	push   $0x0
+80107479:	6a 00                	push   $0x0
   pushl $82
-8010646b:	6a 52                	push   $0x52
+8010747b:	6a 52                	push   $0x52
   jmp alltraps
-8010646d:	e9 35 f8 ff ff       	jmp    80105ca7 <alltraps>
+8010747d:	e9 13 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106472 <vector83>:
+80107482 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106472:	6a 00                	push   $0x0
+80107482:	6a 00                	push   $0x0
   pushl $83
-80106474:	6a 53                	push   $0x53
+80107484:	6a 53                	push   $0x53
   jmp alltraps
-80106476:	e9 2c f8 ff ff       	jmp    80105ca7 <alltraps>
+80107486:	e9 0a f8 ff ff       	jmp    80106c95 <alltraps>
 
-8010647b <vector84>:
+8010748b <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010647b:	6a 00                	push   $0x0
+8010748b:	6a 00                	push   $0x0
   pushl $84
-8010647d:	6a 54                	push   $0x54
+8010748d:	6a 54                	push   $0x54
   jmp alltraps
-8010647f:	e9 23 f8 ff ff       	jmp    80105ca7 <alltraps>
+8010748f:	e9 01 f8 ff ff       	jmp    80106c95 <alltraps>
 
-80106484 <vector85>:
+80107494 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106484:	6a 00                	push   $0x0
+80107494:	6a 00                	push   $0x0
   pushl $85
-80106486:	6a 55                	push   $0x55
+80107496:	6a 55                	push   $0x55
   jmp alltraps
-80106488:	e9 1a f8 ff ff       	jmp    80105ca7 <alltraps>
+80107498:	e9 f8 f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010648d <vector86>:
+8010749d <vector86>:
 .globl vector86
 vector86:
   pushl $0
-8010648d:	6a 00                	push   $0x0
+8010749d:	6a 00                	push   $0x0
   pushl $86
-8010648f:	6a 56                	push   $0x56
+8010749f:	6a 56                	push   $0x56
   jmp alltraps
-80106491:	e9 11 f8 ff ff       	jmp    80105ca7 <alltraps>
+801074a1:	e9 ef f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106496 <vector87>:
+801074a6 <vector87>:
 .globl vector87
 vector87:
   pushl $0
-80106496:	6a 00                	push   $0x0
+801074a6:	6a 00                	push   $0x0
   pushl $87
-80106498:	6a 57                	push   $0x57
+801074a8:	6a 57                	push   $0x57
   jmp alltraps
-8010649a:	e9 08 f8 ff ff       	jmp    80105ca7 <alltraps>
+801074aa:	e9 e6 f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010649f <vector88>:
+801074af <vector88>:
 .globl vector88
 vector88:
   pushl $0
-8010649f:	6a 00                	push   $0x0
+801074af:	6a 00                	push   $0x0
   pushl $88
-801064a1:	6a 58                	push   $0x58
+801074b1:	6a 58                	push   $0x58
   jmp alltraps
-801064a3:	e9 ff f7 ff ff       	jmp    80105ca7 <alltraps>
+801074b3:	e9 dd f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064a8 <vector89>:
+801074b8 <vector89>:
 .globl vector89
 vector89:
   pushl $0
-801064a8:	6a 00                	push   $0x0
+801074b8:	6a 00                	push   $0x0
   pushl $89
-801064aa:	6a 59                	push   $0x59
+801074ba:	6a 59                	push   $0x59
   jmp alltraps
-801064ac:	e9 f6 f7 ff ff       	jmp    80105ca7 <alltraps>
+801074bc:	e9 d4 f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064b1 <vector90>:
+801074c1 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-801064b1:	6a 00                	push   $0x0
+801074c1:	6a 00                	push   $0x0
   pushl $90
-801064b3:	6a 5a                	push   $0x5a
+801074c3:	6a 5a                	push   $0x5a
   jmp alltraps
-801064b5:	e9 ed f7 ff ff       	jmp    80105ca7 <alltraps>
+801074c5:	e9 cb f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064ba <vector91>:
+801074ca <vector91>:
 .globl vector91
 vector91:
   pushl $0
-801064ba:	6a 00                	push   $0x0
+801074ca:	6a 00                	push   $0x0
   pushl $91
-801064bc:	6a 5b                	push   $0x5b
+801074cc:	6a 5b                	push   $0x5b
   jmp alltraps
-801064be:	e9 e4 f7 ff ff       	jmp    80105ca7 <alltraps>
+801074ce:	e9 c2 f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064c3 <vector92>:
+801074d3 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-801064c3:	6a 00                	push   $0x0
+801074d3:	6a 00                	push   $0x0
   pushl $92
-801064c5:	6a 5c                	push   $0x5c
+801074d5:	6a 5c                	push   $0x5c
   jmp alltraps
-801064c7:	e9 db f7 ff ff       	jmp    80105ca7 <alltraps>
+801074d7:	e9 b9 f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064cc <vector93>:
+801074dc <vector93>:
 .globl vector93
 vector93:
   pushl $0
-801064cc:	6a 00                	push   $0x0
+801074dc:	6a 00                	push   $0x0
   pushl $93
-801064ce:	6a 5d                	push   $0x5d
+801074de:	6a 5d                	push   $0x5d
   jmp alltraps
-801064d0:	e9 d2 f7 ff ff       	jmp    80105ca7 <alltraps>
+801074e0:	e9 b0 f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064d5 <vector94>:
+801074e5 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-801064d5:	6a 00                	push   $0x0
+801074e5:	6a 00                	push   $0x0
   pushl $94
-801064d7:	6a 5e                	push   $0x5e
+801074e7:	6a 5e                	push   $0x5e
   jmp alltraps
-801064d9:	e9 c9 f7 ff ff       	jmp    80105ca7 <alltraps>
+801074e9:	e9 a7 f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064de <vector95>:
+801074ee <vector95>:
 .globl vector95
 vector95:
   pushl $0
-801064de:	6a 00                	push   $0x0
+801074ee:	6a 00                	push   $0x0
   pushl $95
-801064e0:	6a 5f                	push   $0x5f
+801074f0:	6a 5f                	push   $0x5f
   jmp alltraps
-801064e2:	e9 c0 f7 ff ff       	jmp    80105ca7 <alltraps>
+801074f2:	e9 9e f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064e7 <vector96>:
+801074f7 <vector96>:
 .globl vector96
 vector96:
   pushl $0
-801064e7:	6a 00                	push   $0x0
+801074f7:	6a 00                	push   $0x0
   pushl $96
-801064e9:	6a 60                	push   $0x60
+801074f9:	6a 60                	push   $0x60
   jmp alltraps
-801064eb:	e9 b7 f7 ff ff       	jmp    80105ca7 <alltraps>
+801074fb:	e9 95 f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064f0 <vector97>:
+80107500 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-801064f0:	6a 00                	push   $0x0
+80107500:	6a 00                	push   $0x0
   pushl $97
-801064f2:	6a 61                	push   $0x61
+80107502:	6a 61                	push   $0x61
   jmp alltraps
-801064f4:	e9 ae f7 ff ff       	jmp    80105ca7 <alltraps>
+80107504:	e9 8c f7 ff ff       	jmp    80106c95 <alltraps>
 
-801064f9 <vector98>:
+80107509 <vector98>:
 .globl vector98
 vector98:
   pushl $0
-801064f9:	6a 00                	push   $0x0
+80107509:	6a 00                	push   $0x0
   pushl $98
-801064fb:	6a 62                	push   $0x62
+8010750b:	6a 62                	push   $0x62
   jmp alltraps
-801064fd:	e9 a5 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010750d:	e9 83 f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106502 <vector99>:
+80107512 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106502:	6a 00                	push   $0x0
+80107512:	6a 00                	push   $0x0
   pushl $99
-80106504:	6a 63                	push   $0x63
+80107514:	6a 63                	push   $0x63
   jmp alltraps
-80106506:	e9 9c f7 ff ff       	jmp    80105ca7 <alltraps>
+80107516:	e9 7a f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010650b <vector100>:
+8010751b <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010650b:	6a 00                	push   $0x0
+8010751b:	6a 00                	push   $0x0
   pushl $100
-8010650d:	6a 64                	push   $0x64
+8010751d:	6a 64                	push   $0x64
   jmp alltraps
-8010650f:	e9 93 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010751f:	e9 71 f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106514 <vector101>:
+80107524 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-80106514:	6a 00                	push   $0x0
+80107524:	6a 00                	push   $0x0
   pushl $101
-80106516:	6a 65                	push   $0x65
+80107526:	6a 65                	push   $0x65
   jmp alltraps
-80106518:	e9 8a f7 ff ff       	jmp    80105ca7 <alltraps>
+80107528:	e9 68 f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010651d <vector102>:
+8010752d <vector102>:
 .globl vector102
 vector102:
   pushl $0
-8010651d:	6a 00                	push   $0x0
+8010752d:	6a 00                	push   $0x0
   pushl $102
-8010651f:	6a 66                	push   $0x66
+8010752f:	6a 66                	push   $0x66
   jmp alltraps
-80106521:	e9 81 f7 ff ff       	jmp    80105ca7 <alltraps>
+80107531:	e9 5f f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106526 <vector103>:
+80107536 <vector103>:
 .globl vector103
 vector103:
   pushl $0
-80106526:	6a 00                	push   $0x0
+80107536:	6a 00                	push   $0x0
   pushl $103
-80106528:	6a 67                	push   $0x67
+80107538:	6a 67                	push   $0x67
   jmp alltraps
-8010652a:	e9 78 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010753a:	e9 56 f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010652f <vector104>:
+8010753f <vector104>:
 .globl vector104
 vector104:
   pushl $0
-8010652f:	6a 00                	push   $0x0
+8010753f:	6a 00                	push   $0x0
   pushl $104
-80106531:	6a 68                	push   $0x68
+80107541:	6a 68                	push   $0x68
   jmp alltraps
-80106533:	e9 6f f7 ff ff       	jmp    80105ca7 <alltraps>
+80107543:	e9 4d f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106538 <vector105>:
+80107548 <vector105>:
 .globl vector105
 vector105:
   pushl $0
-80106538:	6a 00                	push   $0x0
+80107548:	6a 00                	push   $0x0
   pushl $105
-8010653a:	6a 69                	push   $0x69
+8010754a:	6a 69                	push   $0x69
   jmp alltraps
-8010653c:	e9 66 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010754c:	e9 44 f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106541 <vector106>:
+80107551 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-80106541:	6a 00                	push   $0x0
+80107551:	6a 00                	push   $0x0
   pushl $106
-80106543:	6a 6a                	push   $0x6a
+80107553:	6a 6a                	push   $0x6a
   jmp alltraps
-80106545:	e9 5d f7 ff ff       	jmp    80105ca7 <alltraps>
+80107555:	e9 3b f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010654a <vector107>:
+8010755a <vector107>:
 .globl vector107
 vector107:
   pushl $0
-8010654a:	6a 00                	push   $0x0
+8010755a:	6a 00                	push   $0x0
   pushl $107
-8010654c:	6a 6b                	push   $0x6b
+8010755c:	6a 6b                	push   $0x6b
   jmp alltraps
-8010654e:	e9 54 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010755e:	e9 32 f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106553 <vector108>:
+80107563 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-80106553:	6a 00                	push   $0x0
+80107563:	6a 00                	push   $0x0
   pushl $108
-80106555:	6a 6c                	push   $0x6c
+80107565:	6a 6c                	push   $0x6c
   jmp alltraps
-80106557:	e9 4b f7 ff ff       	jmp    80105ca7 <alltraps>
+80107567:	e9 29 f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010655c <vector109>:
+8010756c <vector109>:
 .globl vector109
 vector109:
   pushl $0
-8010655c:	6a 00                	push   $0x0
+8010756c:	6a 00                	push   $0x0
   pushl $109
-8010655e:	6a 6d                	push   $0x6d
+8010756e:	6a 6d                	push   $0x6d
   jmp alltraps
-80106560:	e9 42 f7 ff ff       	jmp    80105ca7 <alltraps>
+80107570:	e9 20 f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106565 <vector110>:
+80107575 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-80106565:	6a 00                	push   $0x0
+80107575:	6a 00                	push   $0x0
   pushl $110
-80106567:	6a 6e                	push   $0x6e
+80107577:	6a 6e                	push   $0x6e
   jmp alltraps
-80106569:	e9 39 f7 ff ff       	jmp    80105ca7 <alltraps>
+80107579:	e9 17 f7 ff ff       	jmp    80106c95 <alltraps>
 
-8010656e <vector111>:
+8010757e <vector111>:
 .globl vector111
 vector111:
   pushl $0
-8010656e:	6a 00                	push   $0x0
+8010757e:	6a 00                	push   $0x0
   pushl $111
-80106570:	6a 6f                	push   $0x6f
+80107580:	6a 6f                	push   $0x6f
   jmp alltraps
-80106572:	e9 30 f7 ff ff       	jmp    80105ca7 <alltraps>
+80107582:	e9 0e f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106577 <vector112>:
+80107587 <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80106577:	6a 00                	push   $0x0
+80107587:	6a 00                	push   $0x0
   pushl $112
-80106579:	6a 70                	push   $0x70
+80107589:	6a 70                	push   $0x70
   jmp alltraps
-8010657b:	e9 27 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010758b:	e9 05 f7 ff ff       	jmp    80106c95 <alltraps>
 
-80106580 <vector113>:
+80107590 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106580:	6a 00                	push   $0x0
+80107590:	6a 00                	push   $0x0
   pushl $113
-80106582:	6a 71                	push   $0x71
+80107592:	6a 71                	push   $0x71
   jmp alltraps
-80106584:	e9 1e f7 ff ff       	jmp    80105ca7 <alltraps>
+80107594:	e9 fc f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106589 <vector114>:
+80107599 <vector114>:
 .globl vector114
 vector114:
   pushl $0
-80106589:	6a 00                	push   $0x0
+80107599:	6a 00                	push   $0x0
   pushl $114
-8010658b:	6a 72                	push   $0x72
+8010759b:	6a 72                	push   $0x72
   jmp alltraps
-8010658d:	e9 15 f7 ff ff       	jmp    80105ca7 <alltraps>
+8010759d:	e9 f3 f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106592 <vector115>:
+801075a2 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106592:	6a 00                	push   $0x0
+801075a2:	6a 00                	push   $0x0
   pushl $115
-80106594:	6a 73                	push   $0x73
+801075a4:	6a 73                	push   $0x73
   jmp alltraps
-80106596:	e9 0c f7 ff ff       	jmp    80105ca7 <alltraps>
+801075a6:	e9 ea f6 ff ff       	jmp    80106c95 <alltraps>
 
-8010659b <vector116>:
+801075ab <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010659b:	6a 00                	push   $0x0
+801075ab:	6a 00                	push   $0x0
   pushl $116
-8010659d:	6a 74                	push   $0x74
+801075ad:	6a 74                	push   $0x74
   jmp alltraps
-8010659f:	e9 03 f7 ff ff       	jmp    80105ca7 <alltraps>
+801075af:	e9 e1 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065a4 <vector117>:
+801075b4 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-801065a4:	6a 00                	push   $0x0
+801075b4:	6a 00                	push   $0x0
   pushl $117
-801065a6:	6a 75                	push   $0x75
+801075b6:	6a 75                	push   $0x75
   jmp alltraps
-801065a8:	e9 fa f6 ff ff       	jmp    80105ca7 <alltraps>
+801075b8:	e9 d8 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065ad <vector118>:
+801075bd <vector118>:
 .globl vector118
 vector118:
   pushl $0
-801065ad:	6a 00                	push   $0x0
+801075bd:	6a 00                	push   $0x0
   pushl $118
-801065af:	6a 76                	push   $0x76
+801075bf:	6a 76                	push   $0x76
   jmp alltraps
-801065b1:	e9 f1 f6 ff ff       	jmp    80105ca7 <alltraps>
+801075c1:	e9 cf f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065b6 <vector119>:
+801075c6 <vector119>:
 .globl vector119
 vector119:
   pushl $0
-801065b6:	6a 00                	push   $0x0
+801075c6:	6a 00                	push   $0x0
   pushl $119
-801065b8:	6a 77                	push   $0x77
+801075c8:	6a 77                	push   $0x77
   jmp alltraps
-801065ba:	e9 e8 f6 ff ff       	jmp    80105ca7 <alltraps>
+801075ca:	e9 c6 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065bf <vector120>:
+801075cf <vector120>:
 .globl vector120
 vector120:
   pushl $0
-801065bf:	6a 00                	push   $0x0
+801075cf:	6a 00                	push   $0x0
   pushl $120
-801065c1:	6a 78                	push   $0x78
+801075d1:	6a 78                	push   $0x78
   jmp alltraps
-801065c3:	e9 df f6 ff ff       	jmp    80105ca7 <alltraps>
+801075d3:	e9 bd f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065c8 <vector121>:
+801075d8 <vector121>:
 .globl vector121
 vector121:
   pushl $0
-801065c8:	6a 00                	push   $0x0
+801075d8:	6a 00                	push   $0x0
   pushl $121
-801065ca:	6a 79                	push   $0x79
+801075da:	6a 79                	push   $0x79
   jmp alltraps
-801065cc:	e9 d6 f6 ff ff       	jmp    80105ca7 <alltraps>
+801075dc:	e9 b4 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065d1 <vector122>:
+801075e1 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-801065d1:	6a 00                	push   $0x0
+801075e1:	6a 00                	push   $0x0
   pushl $122
-801065d3:	6a 7a                	push   $0x7a
+801075e3:	6a 7a                	push   $0x7a
   jmp alltraps
-801065d5:	e9 cd f6 ff ff       	jmp    80105ca7 <alltraps>
+801075e5:	e9 ab f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065da <vector123>:
+801075ea <vector123>:
 .globl vector123
 vector123:
   pushl $0
-801065da:	6a 00                	push   $0x0
+801075ea:	6a 00                	push   $0x0
   pushl $123
-801065dc:	6a 7b                	push   $0x7b
+801075ec:	6a 7b                	push   $0x7b
   jmp alltraps
-801065de:	e9 c4 f6 ff ff       	jmp    80105ca7 <alltraps>
+801075ee:	e9 a2 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065e3 <vector124>:
+801075f3 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-801065e3:	6a 00                	push   $0x0
+801075f3:	6a 00                	push   $0x0
   pushl $124
-801065e5:	6a 7c                	push   $0x7c
+801075f5:	6a 7c                	push   $0x7c
   jmp alltraps
-801065e7:	e9 bb f6 ff ff       	jmp    80105ca7 <alltraps>
+801075f7:	e9 99 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065ec <vector125>:
+801075fc <vector125>:
 .globl vector125
 vector125:
   pushl $0
-801065ec:	6a 00                	push   $0x0
+801075fc:	6a 00                	push   $0x0
   pushl $125
-801065ee:	6a 7d                	push   $0x7d
+801075fe:	6a 7d                	push   $0x7d
   jmp alltraps
-801065f0:	e9 b2 f6 ff ff       	jmp    80105ca7 <alltraps>
+80107600:	e9 90 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065f5 <vector126>:
+80107605 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-801065f5:	6a 00                	push   $0x0
+80107605:	6a 00                	push   $0x0
   pushl $126
-801065f7:	6a 7e                	push   $0x7e
+80107607:	6a 7e                	push   $0x7e
   jmp alltraps
-801065f9:	e9 a9 f6 ff ff       	jmp    80105ca7 <alltraps>
+80107609:	e9 87 f6 ff ff       	jmp    80106c95 <alltraps>
 
-801065fe <vector127>:
+8010760e <vector127>:
 .globl vector127
 vector127:
   pushl $0
-801065fe:	6a 00                	push   $0x0
+8010760e:	6a 00                	push   $0x0
   pushl $127
-80106600:	6a 7f                	push   $0x7f
+80107610:	6a 7f                	push   $0x7f
   jmp alltraps
-80106602:	e9 a0 f6 ff ff       	jmp    80105ca7 <alltraps>
+80107612:	e9 7e f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106607 <vector128>:
+80107617 <vector128>:
 .globl vector128
 vector128:
   pushl $0
-80106607:	6a 00                	push   $0x0
+80107617:	6a 00                	push   $0x0
   pushl $128
-80106609:	68 80 00 00 00       	push   $0x80
+80107619:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-8010660e:	e9 94 f6 ff ff       	jmp    80105ca7 <alltraps>
+8010761e:	e9 72 f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106613 <vector129>:
+80107623 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-80106613:	6a 00                	push   $0x0
+80107623:	6a 00                	push   $0x0
   pushl $129
-80106615:	68 81 00 00 00       	push   $0x81
+80107625:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-8010661a:	e9 88 f6 ff ff       	jmp    80105ca7 <alltraps>
+8010762a:	e9 66 f6 ff ff       	jmp    80106c95 <alltraps>
 
-8010661f <vector130>:
+8010762f <vector130>:
 .globl vector130
 vector130:
   pushl $0
-8010661f:	6a 00                	push   $0x0
+8010762f:	6a 00                	push   $0x0
   pushl $130
-80106621:	68 82 00 00 00       	push   $0x82
+80107631:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-80106626:	e9 7c f6 ff ff       	jmp    80105ca7 <alltraps>
+80107636:	e9 5a f6 ff ff       	jmp    80106c95 <alltraps>
 
-8010662b <vector131>:
+8010763b <vector131>:
 .globl vector131
 vector131:
   pushl $0
-8010662b:	6a 00                	push   $0x0
+8010763b:	6a 00                	push   $0x0
   pushl $131
-8010662d:	68 83 00 00 00       	push   $0x83
+8010763d:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-80106632:	e9 70 f6 ff ff       	jmp    80105ca7 <alltraps>
+80107642:	e9 4e f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106637 <vector132>:
+80107647 <vector132>:
 .globl vector132
 vector132:
   pushl $0
-80106637:	6a 00                	push   $0x0
+80107647:	6a 00                	push   $0x0
   pushl $132
-80106639:	68 84 00 00 00       	push   $0x84
+80107649:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-8010663e:	e9 64 f6 ff ff       	jmp    80105ca7 <alltraps>
+8010764e:	e9 42 f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106643 <vector133>:
+80107653 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-80106643:	6a 00                	push   $0x0
+80107653:	6a 00                	push   $0x0
   pushl $133
-80106645:	68 85 00 00 00       	push   $0x85
+80107655:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-8010664a:	e9 58 f6 ff ff       	jmp    80105ca7 <alltraps>
+8010765a:	e9 36 f6 ff ff       	jmp    80106c95 <alltraps>
 
-8010664f <vector134>:
+8010765f <vector134>:
 .globl vector134
 vector134:
   pushl $0
-8010664f:	6a 00                	push   $0x0
+8010765f:	6a 00                	push   $0x0
   pushl $134
-80106651:	68 86 00 00 00       	push   $0x86
+80107661:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-80106656:	e9 4c f6 ff ff       	jmp    80105ca7 <alltraps>
+80107666:	e9 2a f6 ff ff       	jmp    80106c95 <alltraps>
 
-8010665b <vector135>:
+8010766b <vector135>:
 .globl vector135
 vector135:
   pushl $0
-8010665b:	6a 00                	push   $0x0
+8010766b:	6a 00                	push   $0x0
   pushl $135
-8010665d:	68 87 00 00 00       	push   $0x87
+8010766d:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-80106662:	e9 40 f6 ff ff       	jmp    80105ca7 <alltraps>
+80107672:	e9 1e f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106667 <vector136>:
+80107677 <vector136>:
 .globl vector136
 vector136:
   pushl $0
-80106667:	6a 00                	push   $0x0
+80107677:	6a 00                	push   $0x0
   pushl $136
-80106669:	68 88 00 00 00       	push   $0x88
+80107679:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-8010666e:	e9 34 f6 ff ff       	jmp    80105ca7 <alltraps>
+8010767e:	e9 12 f6 ff ff       	jmp    80106c95 <alltraps>
 
-80106673 <vector137>:
+80107683 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106673:	6a 00                	push   $0x0
+80107683:	6a 00                	push   $0x0
   pushl $137
-80106675:	68 89 00 00 00       	push   $0x89
+80107685:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010667a:	e9 28 f6 ff ff       	jmp    80105ca7 <alltraps>
+8010768a:	e9 06 f6 ff ff       	jmp    80106c95 <alltraps>
 
-8010667f <vector138>:
+8010768f <vector138>:
 .globl vector138
 vector138:
   pushl $0
-8010667f:	6a 00                	push   $0x0
+8010768f:	6a 00                	push   $0x0
   pushl $138
-80106681:	68 8a 00 00 00       	push   $0x8a
+80107691:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-80106686:	e9 1c f6 ff ff       	jmp    80105ca7 <alltraps>
+80107696:	e9 fa f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010668b <vector139>:
+8010769b <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010668b:	6a 00                	push   $0x0
+8010769b:	6a 00                	push   $0x0
   pushl $139
-8010668d:	68 8b 00 00 00       	push   $0x8b
+8010769d:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106692:	e9 10 f6 ff ff       	jmp    80105ca7 <alltraps>
+801076a2:	e9 ee f5 ff ff       	jmp    80106c95 <alltraps>
 
-80106697 <vector140>:
+801076a7 <vector140>:
 .globl vector140
 vector140:
   pushl $0
-80106697:	6a 00                	push   $0x0
+801076a7:	6a 00                	push   $0x0
   pushl $140
-80106699:	68 8c 00 00 00       	push   $0x8c
+801076a9:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-8010669e:	e9 04 f6 ff ff       	jmp    80105ca7 <alltraps>
+801076ae:	e9 e2 f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066a3 <vector141>:
+801076b3 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-801066a3:	6a 00                	push   $0x0
+801076b3:	6a 00                	push   $0x0
   pushl $141
-801066a5:	68 8d 00 00 00       	push   $0x8d
+801076b5:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-801066aa:	e9 f8 f5 ff ff       	jmp    80105ca7 <alltraps>
+801076ba:	e9 d6 f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066af <vector142>:
+801076bf <vector142>:
 .globl vector142
 vector142:
   pushl $0
-801066af:	6a 00                	push   $0x0
+801076bf:	6a 00                	push   $0x0
   pushl $142
-801066b1:	68 8e 00 00 00       	push   $0x8e
+801076c1:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-801066b6:	e9 ec f5 ff ff       	jmp    80105ca7 <alltraps>
+801076c6:	e9 ca f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066bb <vector143>:
+801076cb <vector143>:
 .globl vector143
 vector143:
   pushl $0
-801066bb:	6a 00                	push   $0x0
+801076cb:	6a 00                	push   $0x0
   pushl $143
-801066bd:	68 8f 00 00 00       	push   $0x8f
+801076cd:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-801066c2:	e9 e0 f5 ff ff       	jmp    80105ca7 <alltraps>
+801076d2:	e9 be f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066c7 <vector144>:
+801076d7 <vector144>:
 .globl vector144
 vector144:
   pushl $0
-801066c7:	6a 00                	push   $0x0
+801076d7:	6a 00                	push   $0x0
   pushl $144
-801066c9:	68 90 00 00 00       	push   $0x90
+801076d9:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-801066ce:	e9 d4 f5 ff ff       	jmp    80105ca7 <alltraps>
+801076de:	e9 b2 f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066d3 <vector145>:
+801076e3 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-801066d3:	6a 00                	push   $0x0
+801076e3:	6a 00                	push   $0x0
   pushl $145
-801066d5:	68 91 00 00 00       	push   $0x91
+801076e5:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-801066da:	e9 c8 f5 ff ff       	jmp    80105ca7 <alltraps>
+801076ea:	e9 a6 f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066df <vector146>:
+801076ef <vector146>:
 .globl vector146
 vector146:
   pushl $0
-801066df:	6a 00                	push   $0x0
+801076ef:	6a 00                	push   $0x0
   pushl $146
-801066e1:	68 92 00 00 00       	push   $0x92
+801076f1:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-801066e6:	e9 bc f5 ff ff       	jmp    80105ca7 <alltraps>
+801076f6:	e9 9a f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066eb <vector147>:
+801076fb <vector147>:
 .globl vector147
 vector147:
   pushl $0
-801066eb:	6a 00                	push   $0x0
+801076fb:	6a 00                	push   $0x0
   pushl $147
-801066ed:	68 93 00 00 00       	push   $0x93
+801076fd:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-801066f2:	e9 b0 f5 ff ff       	jmp    80105ca7 <alltraps>
+80107702:	e9 8e f5 ff ff       	jmp    80106c95 <alltraps>
 
-801066f7 <vector148>:
+80107707 <vector148>:
 .globl vector148
 vector148:
   pushl $0
-801066f7:	6a 00                	push   $0x0
+80107707:	6a 00                	push   $0x0
   pushl $148
-801066f9:	68 94 00 00 00       	push   $0x94
+80107709:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-801066fe:	e9 a4 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010770e:	e9 82 f5 ff ff       	jmp    80106c95 <alltraps>
 
-80106703 <vector149>:
+80107713 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106703:	6a 00                	push   $0x0
+80107713:	6a 00                	push   $0x0
   pushl $149
-80106705:	68 95 00 00 00       	push   $0x95
+80107715:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010670a:	e9 98 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010771a:	e9 76 f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010670f <vector150>:
+8010771f <vector150>:
 .globl vector150
 vector150:
   pushl $0
-8010670f:	6a 00                	push   $0x0
+8010771f:	6a 00                	push   $0x0
   pushl $150
-80106711:	68 96 00 00 00       	push   $0x96
+80107721:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-80106716:	e9 8c f5 ff ff       	jmp    80105ca7 <alltraps>
+80107726:	e9 6a f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010671b <vector151>:
+8010772b <vector151>:
 .globl vector151
 vector151:
   pushl $0
-8010671b:	6a 00                	push   $0x0
+8010772b:	6a 00                	push   $0x0
   pushl $151
-8010671d:	68 97 00 00 00       	push   $0x97
+8010772d:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-80106722:	e9 80 f5 ff ff       	jmp    80105ca7 <alltraps>
+80107732:	e9 5e f5 ff ff       	jmp    80106c95 <alltraps>
 
-80106727 <vector152>:
+80107737 <vector152>:
 .globl vector152
 vector152:
   pushl $0
-80106727:	6a 00                	push   $0x0
+80107737:	6a 00                	push   $0x0
   pushl $152
-80106729:	68 98 00 00 00       	push   $0x98
+80107739:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-8010672e:	e9 74 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010773e:	e9 52 f5 ff ff       	jmp    80106c95 <alltraps>
 
-80106733 <vector153>:
+80107743 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-80106733:	6a 00                	push   $0x0
+80107743:	6a 00                	push   $0x0
   pushl $153
-80106735:	68 99 00 00 00       	push   $0x99
+80107745:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-8010673a:	e9 68 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010774a:	e9 46 f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010673f <vector154>:
+8010774f <vector154>:
 .globl vector154
 vector154:
   pushl $0
-8010673f:	6a 00                	push   $0x0
+8010774f:	6a 00                	push   $0x0
   pushl $154
-80106741:	68 9a 00 00 00       	push   $0x9a
+80107751:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-80106746:	e9 5c f5 ff ff       	jmp    80105ca7 <alltraps>
+80107756:	e9 3a f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010674b <vector155>:
+8010775b <vector155>:
 .globl vector155
 vector155:
   pushl $0
-8010674b:	6a 00                	push   $0x0
+8010775b:	6a 00                	push   $0x0
   pushl $155
-8010674d:	68 9b 00 00 00       	push   $0x9b
+8010775d:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-80106752:	e9 50 f5 ff ff       	jmp    80105ca7 <alltraps>
+80107762:	e9 2e f5 ff ff       	jmp    80106c95 <alltraps>
 
-80106757 <vector156>:
+80107767 <vector156>:
 .globl vector156
 vector156:
   pushl $0
-80106757:	6a 00                	push   $0x0
+80107767:	6a 00                	push   $0x0
   pushl $156
-80106759:	68 9c 00 00 00       	push   $0x9c
+80107769:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-8010675e:	e9 44 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010776e:	e9 22 f5 ff ff       	jmp    80106c95 <alltraps>
 
-80106763 <vector157>:
+80107773 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-80106763:	6a 00                	push   $0x0
+80107773:	6a 00                	push   $0x0
   pushl $157
-80106765:	68 9d 00 00 00       	push   $0x9d
+80107775:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-8010676a:	e9 38 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010777a:	e9 16 f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010676f <vector158>:
+8010777f <vector158>:
 .globl vector158
 vector158:
   pushl $0
-8010676f:	6a 00                	push   $0x0
+8010777f:	6a 00                	push   $0x0
   pushl $158
-80106771:	68 9e 00 00 00       	push   $0x9e
+80107781:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106776:	e9 2c f5 ff ff       	jmp    80105ca7 <alltraps>
+80107786:	e9 0a f5 ff ff       	jmp    80106c95 <alltraps>
 
-8010677b <vector159>:
+8010778b <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010677b:	6a 00                	push   $0x0
+8010778b:	6a 00                	push   $0x0
   pushl $159
-8010677d:	68 9f 00 00 00       	push   $0x9f
+8010778d:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106782:	e9 20 f5 ff ff       	jmp    80105ca7 <alltraps>
+80107792:	e9 fe f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106787 <vector160>:
+80107797 <vector160>:
 .globl vector160
 vector160:
   pushl $0
-80106787:	6a 00                	push   $0x0
+80107797:	6a 00                	push   $0x0
   pushl $160
-80106789:	68 a0 00 00 00       	push   $0xa0
+80107799:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-8010678e:	e9 14 f5 ff ff       	jmp    80105ca7 <alltraps>
+8010779e:	e9 f2 f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106793 <vector161>:
+801077a3 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106793:	6a 00                	push   $0x0
+801077a3:	6a 00                	push   $0x0
   pushl $161
-80106795:	68 a1 00 00 00       	push   $0xa1
+801077a5:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010679a:	e9 08 f5 ff ff       	jmp    80105ca7 <alltraps>
+801077aa:	e9 e6 f4 ff ff       	jmp    80106c95 <alltraps>
 
-8010679f <vector162>:
+801077af <vector162>:
 .globl vector162
 vector162:
   pushl $0
-8010679f:	6a 00                	push   $0x0
+801077af:	6a 00                	push   $0x0
   pushl $162
-801067a1:	68 a2 00 00 00       	push   $0xa2
+801077b1:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-801067a6:	e9 fc f4 ff ff       	jmp    80105ca7 <alltraps>
+801077b6:	e9 da f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067ab <vector163>:
+801077bb <vector163>:
 .globl vector163
 vector163:
   pushl $0
-801067ab:	6a 00                	push   $0x0
+801077bb:	6a 00                	push   $0x0
   pushl $163
-801067ad:	68 a3 00 00 00       	push   $0xa3
+801077bd:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-801067b2:	e9 f0 f4 ff ff       	jmp    80105ca7 <alltraps>
+801077c2:	e9 ce f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067b7 <vector164>:
+801077c7 <vector164>:
 .globl vector164
 vector164:
   pushl $0
-801067b7:	6a 00                	push   $0x0
+801077c7:	6a 00                	push   $0x0
   pushl $164
-801067b9:	68 a4 00 00 00       	push   $0xa4
+801077c9:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-801067be:	e9 e4 f4 ff ff       	jmp    80105ca7 <alltraps>
+801077ce:	e9 c2 f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067c3 <vector165>:
+801077d3 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-801067c3:	6a 00                	push   $0x0
+801077d3:	6a 00                	push   $0x0
   pushl $165
-801067c5:	68 a5 00 00 00       	push   $0xa5
+801077d5:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-801067ca:	e9 d8 f4 ff ff       	jmp    80105ca7 <alltraps>
+801077da:	e9 b6 f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067cf <vector166>:
+801077df <vector166>:
 .globl vector166
 vector166:
   pushl $0
-801067cf:	6a 00                	push   $0x0
+801077df:	6a 00                	push   $0x0
   pushl $166
-801067d1:	68 a6 00 00 00       	push   $0xa6
+801077e1:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-801067d6:	e9 cc f4 ff ff       	jmp    80105ca7 <alltraps>
+801077e6:	e9 aa f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067db <vector167>:
+801077eb <vector167>:
 .globl vector167
 vector167:
   pushl $0
-801067db:	6a 00                	push   $0x0
+801077eb:	6a 00                	push   $0x0
   pushl $167
-801067dd:	68 a7 00 00 00       	push   $0xa7
+801077ed:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-801067e2:	e9 c0 f4 ff ff       	jmp    80105ca7 <alltraps>
+801077f2:	e9 9e f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067e7 <vector168>:
+801077f7 <vector168>:
 .globl vector168
 vector168:
   pushl $0
-801067e7:	6a 00                	push   $0x0
+801077f7:	6a 00                	push   $0x0
   pushl $168
-801067e9:	68 a8 00 00 00       	push   $0xa8
+801077f9:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-801067ee:	e9 b4 f4 ff ff       	jmp    80105ca7 <alltraps>
+801077fe:	e9 92 f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067f3 <vector169>:
+80107803 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-801067f3:	6a 00                	push   $0x0
+80107803:	6a 00                	push   $0x0
   pushl $169
-801067f5:	68 a9 00 00 00       	push   $0xa9
+80107805:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-801067fa:	e9 a8 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010780a:	e9 86 f4 ff ff       	jmp    80106c95 <alltraps>
 
-801067ff <vector170>:
+8010780f <vector170>:
 .globl vector170
 vector170:
   pushl $0
-801067ff:	6a 00                	push   $0x0
+8010780f:	6a 00                	push   $0x0
   pushl $170
-80106801:	68 aa 00 00 00       	push   $0xaa
+80107811:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-80106806:	e9 9c f4 ff ff       	jmp    80105ca7 <alltraps>
+80107816:	e9 7a f4 ff ff       	jmp    80106c95 <alltraps>
 
-8010680b <vector171>:
+8010781b <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010680b:	6a 00                	push   $0x0
+8010781b:	6a 00                	push   $0x0
   pushl $171
-8010680d:	68 ab 00 00 00       	push   $0xab
+8010781d:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-80106812:	e9 90 f4 ff ff       	jmp    80105ca7 <alltraps>
+80107822:	e9 6e f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106817 <vector172>:
+80107827 <vector172>:
 .globl vector172
 vector172:
   pushl $0
-80106817:	6a 00                	push   $0x0
+80107827:	6a 00                	push   $0x0
   pushl $172
-80106819:	68 ac 00 00 00       	push   $0xac
+80107829:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-8010681e:	e9 84 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010782e:	e9 62 f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106823 <vector173>:
+80107833 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-80106823:	6a 00                	push   $0x0
+80107833:	6a 00                	push   $0x0
   pushl $173
-80106825:	68 ad 00 00 00       	push   $0xad
+80107835:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-8010682a:	e9 78 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010783a:	e9 56 f4 ff ff       	jmp    80106c95 <alltraps>
 
-8010682f <vector174>:
+8010783f <vector174>:
 .globl vector174
 vector174:
   pushl $0
-8010682f:	6a 00                	push   $0x0
+8010783f:	6a 00                	push   $0x0
   pushl $174
-80106831:	68 ae 00 00 00       	push   $0xae
+80107841:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-80106836:	e9 6c f4 ff ff       	jmp    80105ca7 <alltraps>
+80107846:	e9 4a f4 ff ff       	jmp    80106c95 <alltraps>
 
-8010683b <vector175>:
+8010784b <vector175>:
 .globl vector175
 vector175:
   pushl $0
-8010683b:	6a 00                	push   $0x0
+8010784b:	6a 00                	push   $0x0
   pushl $175
-8010683d:	68 af 00 00 00       	push   $0xaf
+8010784d:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-80106842:	e9 60 f4 ff ff       	jmp    80105ca7 <alltraps>
+80107852:	e9 3e f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106847 <vector176>:
+80107857 <vector176>:
 .globl vector176
 vector176:
   pushl $0
-80106847:	6a 00                	push   $0x0
+80107857:	6a 00                	push   $0x0
   pushl $176
-80106849:	68 b0 00 00 00       	push   $0xb0
+80107859:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-8010684e:	e9 54 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010785e:	e9 32 f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106853 <vector177>:
+80107863 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-80106853:	6a 00                	push   $0x0
+80107863:	6a 00                	push   $0x0
   pushl $177
-80106855:	68 b1 00 00 00       	push   $0xb1
+80107865:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-8010685a:	e9 48 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010786a:	e9 26 f4 ff ff       	jmp    80106c95 <alltraps>
 
-8010685f <vector178>:
+8010786f <vector178>:
 .globl vector178
 vector178:
   pushl $0
-8010685f:	6a 00                	push   $0x0
+8010786f:	6a 00                	push   $0x0
   pushl $178
-80106861:	68 b2 00 00 00       	push   $0xb2
+80107871:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-80106866:	e9 3c f4 ff ff       	jmp    80105ca7 <alltraps>
+80107876:	e9 1a f4 ff ff       	jmp    80106c95 <alltraps>
 
-8010686b <vector179>:
+8010787b <vector179>:
 .globl vector179
 vector179:
   pushl $0
-8010686b:	6a 00                	push   $0x0
+8010787b:	6a 00                	push   $0x0
   pushl $179
-8010686d:	68 b3 00 00 00       	push   $0xb3
+8010787d:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106872:	e9 30 f4 ff ff       	jmp    80105ca7 <alltraps>
+80107882:	e9 0e f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106877 <vector180>:
+80107887 <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106877:	6a 00                	push   $0x0
+80107887:	6a 00                	push   $0x0
   pushl $180
-80106879:	68 b4 00 00 00       	push   $0xb4
+80107889:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-8010687e:	e9 24 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010788e:	e9 02 f4 ff ff       	jmp    80106c95 <alltraps>
 
-80106883 <vector181>:
+80107893 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106883:	6a 00                	push   $0x0
+80107893:	6a 00                	push   $0x0
   pushl $181
-80106885:	68 b5 00 00 00       	push   $0xb5
+80107895:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010688a:	e9 18 f4 ff ff       	jmp    80105ca7 <alltraps>
+8010789a:	e9 f6 f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010688f <vector182>:
+8010789f <vector182>:
 .globl vector182
 vector182:
   pushl $0
-8010688f:	6a 00                	push   $0x0
+8010789f:	6a 00                	push   $0x0
   pushl $182
-80106891:	68 b6 00 00 00       	push   $0xb6
+801078a1:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-80106896:	e9 0c f4 ff ff       	jmp    80105ca7 <alltraps>
+801078a6:	e9 ea f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010689b <vector183>:
+801078ab <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010689b:	6a 00                	push   $0x0
+801078ab:	6a 00                	push   $0x0
   pushl $183
-8010689d:	68 b7 00 00 00       	push   $0xb7
+801078ad:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-801068a2:	e9 00 f4 ff ff       	jmp    80105ca7 <alltraps>
+801078b2:	e9 de f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068a7 <vector184>:
+801078b7 <vector184>:
 .globl vector184
 vector184:
   pushl $0
-801068a7:	6a 00                	push   $0x0
+801078b7:	6a 00                	push   $0x0
   pushl $184
-801068a9:	68 b8 00 00 00       	push   $0xb8
+801078b9:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-801068ae:	e9 f4 f3 ff ff       	jmp    80105ca7 <alltraps>
+801078be:	e9 d2 f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068b3 <vector185>:
+801078c3 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-801068b3:	6a 00                	push   $0x0
+801078c3:	6a 00                	push   $0x0
   pushl $185
-801068b5:	68 b9 00 00 00       	push   $0xb9
+801078c5:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-801068ba:	e9 e8 f3 ff ff       	jmp    80105ca7 <alltraps>
+801078ca:	e9 c6 f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068bf <vector186>:
+801078cf <vector186>:
 .globl vector186
 vector186:
   pushl $0
-801068bf:	6a 00                	push   $0x0
+801078cf:	6a 00                	push   $0x0
   pushl $186
-801068c1:	68 ba 00 00 00       	push   $0xba
+801078d1:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-801068c6:	e9 dc f3 ff ff       	jmp    80105ca7 <alltraps>
+801078d6:	e9 ba f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068cb <vector187>:
+801078db <vector187>:
 .globl vector187
 vector187:
   pushl $0
-801068cb:	6a 00                	push   $0x0
+801078db:	6a 00                	push   $0x0
   pushl $187
-801068cd:	68 bb 00 00 00       	push   $0xbb
+801078dd:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-801068d2:	e9 d0 f3 ff ff       	jmp    80105ca7 <alltraps>
+801078e2:	e9 ae f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068d7 <vector188>:
+801078e7 <vector188>:
 .globl vector188
 vector188:
   pushl $0
-801068d7:	6a 00                	push   $0x0
+801078e7:	6a 00                	push   $0x0
   pushl $188
-801068d9:	68 bc 00 00 00       	push   $0xbc
+801078e9:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-801068de:	e9 c4 f3 ff ff       	jmp    80105ca7 <alltraps>
+801078ee:	e9 a2 f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068e3 <vector189>:
+801078f3 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-801068e3:	6a 00                	push   $0x0
+801078f3:	6a 00                	push   $0x0
   pushl $189
-801068e5:	68 bd 00 00 00       	push   $0xbd
+801078f5:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-801068ea:	e9 b8 f3 ff ff       	jmp    80105ca7 <alltraps>
+801078fa:	e9 96 f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068ef <vector190>:
+801078ff <vector190>:
 .globl vector190
 vector190:
   pushl $0
-801068ef:	6a 00                	push   $0x0
+801078ff:	6a 00                	push   $0x0
   pushl $190
-801068f1:	68 be 00 00 00       	push   $0xbe
+80107901:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-801068f6:	e9 ac f3 ff ff       	jmp    80105ca7 <alltraps>
+80107906:	e9 8a f3 ff ff       	jmp    80106c95 <alltraps>
 
-801068fb <vector191>:
+8010790b <vector191>:
 .globl vector191
 vector191:
   pushl $0
-801068fb:	6a 00                	push   $0x0
+8010790b:	6a 00                	push   $0x0
   pushl $191
-801068fd:	68 bf 00 00 00       	push   $0xbf
+8010790d:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106902:	e9 a0 f3 ff ff       	jmp    80105ca7 <alltraps>
+80107912:	e9 7e f3 ff ff       	jmp    80106c95 <alltraps>
 
-80106907 <vector192>:
+80107917 <vector192>:
 .globl vector192
 vector192:
   pushl $0
-80106907:	6a 00                	push   $0x0
+80107917:	6a 00                	push   $0x0
   pushl $192
-80106909:	68 c0 00 00 00       	push   $0xc0
+80107919:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-8010690e:	e9 94 f3 ff ff       	jmp    80105ca7 <alltraps>
+8010791e:	e9 72 f3 ff ff       	jmp    80106c95 <alltraps>
 
-80106913 <vector193>:
+80107923 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-80106913:	6a 00                	push   $0x0
+80107923:	6a 00                	push   $0x0
   pushl $193
-80106915:	68 c1 00 00 00       	push   $0xc1
+80107925:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-8010691a:	e9 88 f3 ff ff       	jmp    80105ca7 <alltraps>
+8010792a:	e9 66 f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010691f <vector194>:
+8010792f <vector194>:
 .globl vector194
 vector194:
   pushl $0
-8010691f:	6a 00                	push   $0x0
+8010792f:	6a 00                	push   $0x0
   pushl $194
-80106921:	68 c2 00 00 00       	push   $0xc2
+80107931:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-80106926:	e9 7c f3 ff ff       	jmp    80105ca7 <alltraps>
+80107936:	e9 5a f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010692b <vector195>:
+8010793b <vector195>:
 .globl vector195
 vector195:
   pushl $0
-8010692b:	6a 00                	push   $0x0
+8010793b:	6a 00                	push   $0x0
   pushl $195
-8010692d:	68 c3 00 00 00       	push   $0xc3
+8010793d:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-80106932:	e9 70 f3 ff ff       	jmp    80105ca7 <alltraps>
+80107942:	e9 4e f3 ff ff       	jmp    80106c95 <alltraps>
 
-80106937 <vector196>:
+80107947 <vector196>:
 .globl vector196
 vector196:
   pushl $0
-80106937:	6a 00                	push   $0x0
+80107947:	6a 00                	push   $0x0
   pushl $196
-80106939:	68 c4 00 00 00       	push   $0xc4
+80107949:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-8010693e:	e9 64 f3 ff ff       	jmp    80105ca7 <alltraps>
+8010794e:	e9 42 f3 ff ff       	jmp    80106c95 <alltraps>
 
-80106943 <vector197>:
+80107953 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-80106943:	6a 00                	push   $0x0
+80107953:	6a 00                	push   $0x0
   pushl $197
-80106945:	68 c5 00 00 00       	push   $0xc5
+80107955:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-8010694a:	e9 58 f3 ff ff       	jmp    80105ca7 <alltraps>
+8010795a:	e9 36 f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010694f <vector198>:
+8010795f <vector198>:
 .globl vector198
 vector198:
   pushl $0
-8010694f:	6a 00                	push   $0x0
+8010795f:	6a 00                	push   $0x0
   pushl $198
-80106951:	68 c6 00 00 00       	push   $0xc6
+80107961:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-80106956:	e9 4c f3 ff ff       	jmp    80105ca7 <alltraps>
+80107966:	e9 2a f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010695b <vector199>:
+8010796b <vector199>:
 .globl vector199
 vector199:
   pushl $0
-8010695b:	6a 00                	push   $0x0
+8010796b:	6a 00                	push   $0x0
   pushl $199
-8010695d:	68 c7 00 00 00       	push   $0xc7
+8010796d:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-80106962:	e9 40 f3 ff ff       	jmp    80105ca7 <alltraps>
+80107972:	e9 1e f3 ff ff       	jmp    80106c95 <alltraps>
 
-80106967 <vector200>:
+80107977 <vector200>:
 .globl vector200
 vector200:
   pushl $0
-80106967:	6a 00                	push   $0x0
+80107977:	6a 00                	push   $0x0
   pushl $200
-80106969:	68 c8 00 00 00       	push   $0xc8
+80107979:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-8010696e:	e9 34 f3 ff ff       	jmp    80105ca7 <alltraps>
+8010797e:	e9 12 f3 ff ff       	jmp    80106c95 <alltraps>
 
-80106973 <vector201>:
+80107983 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106973:	6a 00                	push   $0x0
+80107983:	6a 00                	push   $0x0
   pushl $201
-80106975:	68 c9 00 00 00       	push   $0xc9
+80107985:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010697a:	e9 28 f3 ff ff       	jmp    80105ca7 <alltraps>
+8010798a:	e9 06 f3 ff ff       	jmp    80106c95 <alltraps>
 
-8010697f <vector202>:
+8010798f <vector202>:
 .globl vector202
 vector202:
   pushl $0
-8010697f:	6a 00                	push   $0x0
+8010798f:	6a 00                	push   $0x0
   pushl $202
-80106981:	68 ca 00 00 00       	push   $0xca
+80107991:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-80106986:	e9 1c f3 ff ff       	jmp    80105ca7 <alltraps>
+80107996:	e9 fa f2 ff ff       	jmp    80106c95 <alltraps>
 
-8010698b <vector203>:
+8010799b <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010698b:	6a 00                	push   $0x0
+8010799b:	6a 00                	push   $0x0
   pushl $203
-8010698d:	68 cb 00 00 00       	push   $0xcb
+8010799d:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106992:	e9 10 f3 ff ff       	jmp    80105ca7 <alltraps>
+801079a2:	e9 ee f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106997 <vector204>:
+801079a7 <vector204>:
 .globl vector204
 vector204:
   pushl $0
-80106997:	6a 00                	push   $0x0
+801079a7:	6a 00                	push   $0x0
   pushl $204
-80106999:	68 cc 00 00 00       	push   $0xcc
+801079a9:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-8010699e:	e9 04 f3 ff ff       	jmp    80105ca7 <alltraps>
+801079ae:	e9 e2 f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069a3 <vector205>:
+801079b3 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-801069a3:	6a 00                	push   $0x0
+801079b3:	6a 00                	push   $0x0
   pushl $205
-801069a5:	68 cd 00 00 00       	push   $0xcd
+801079b5:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-801069aa:	e9 f8 f2 ff ff       	jmp    80105ca7 <alltraps>
+801079ba:	e9 d6 f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069af <vector206>:
+801079bf <vector206>:
 .globl vector206
 vector206:
   pushl $0
-801069af:	6a 00                	push   $0x0
+801079bf:	6a 00                	push   $0x0
   pushl $206
-801069b1:	68 ce 00 00 00       	push   $0xce
+801079c1:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-801069b6:	e9 ec f2 ff ff       	jmp    80105ca7 <alltraps>
+801079c6:	e9 ca f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069bb <vector207>:
+801079cb <vector207>:
 .globl vector207
 vector207:
   pushl $0
-801069bb:	6a 00                	push   $0x0
+801079cb:	6a 00                	push   $0x0
   pushl $207
-801069bd:	68 cf 00 00 00       	push   $0xcf
+801079cd:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-801069c2:	e9 e0 f2 ff ff       	jmp    80105ca7 <alltraps>
+801079d2:	e9 be f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069c7 <vector208>:
+801079d7 <vector208>:
 .globl vector208
 vector208:
   pushl $0
-801069c7:	6a 00                	push   $0x0
+801079d7:	6a 00                	push   $0x0
   pushl $208
-801069c9:	68 d0 00 00 00       	push   $0xd0
+801079d9:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-801069ce:	e9 d4 f2 ff ff       	jmp    80105ca7 <alltraps>
+801079de:	e9 b2 f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069d3 <vector209>:
+801079e3 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-801069d3:	6a 00                	push   $0x0
+801079e3:	6a 00                	push   $0x0
   pushl $209
-801069d5:	68 d1 00 00 00       	push   $0xd1
+801079e5:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-801069da:	e9 c8 f2 ff ff       	jmp    80105ca7 <alltraps>
+801079ea:	e9 a6 f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069df <vector210>:
+801079ef <vector210>:
 .globl vector210
 vector210:
   pushl $0
-801069df:	6a 00                	push   $0x0
+801079ef:	6a 00                	push   $0x0
   pushl $210
-801069e1:	68 d2 00 00 00       	push   $0xd2
+801079f1:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-801069e6:	e9 bc f2 ff ff       	jmp    80105ca7 <alltraps>
+801079f6:	e9 9a f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069eb <vector211>:
+801079fb <vector211>:
 .globl vector211
 vector211:
   pushl $0
-801069eb:	6a 00                	push   $0x0
+801079fb:	6a 00                	push   $0x0
   pushl $211
-801069ed:	68 d3 00 00 00       	push   $0xd3
+801079fd:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-801069f2:	e9 b0 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a02:	e9 8e f2 ff ff       	jmp    80106c95 <alltraps>
 
-801069f7 <vector212>:
+80107a07 <vector212>:
 .globl vector212
 vector212:
   pushl $0
-801069f7:	6a 00                	push   $0x0
+80107a07:	6a 00                	push   $0x0
   pushl $212
-801069f9:	68 d4 00 00 00       	push   $0xd4
+80107a09:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-801069fe:	e9 a4 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a0e:	e9 82 f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a03 <vector213>:
+80107a13 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106a03:	6a 00                	push   $0x0
+80107a13:	6a 00                	push   $0x0
   pushl $213
-80106a05:	68 d5 00 00 00       	push   $0xd5
+80107a15:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-80106a0a:	e9 98 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a1a:	e9 76 f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a0f <vector214>:
+80107a1f <vector214>:
 .globl vector214
 vector214:
   pushl $0
-80106a0f:	6a 00                	push   $0x0
+80107a1f:	6a 00                	push   $0x0
   pushl $214
-80106a11:	68 d6 00 00 00       	push   $0xd6
+80107a21:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-80106a16:	e9 8c f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a26:	e9 6a f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a1b <vector215>:
+80107a2b <vector215>:
 .globl vector215
 vector215:
   pushl $0
-80106a1b:	6a 00                	push   $0x0
+80107a2b:	6a 00                	push   $0x0
   pushl $215
-80106a1d:	68 d7 00 00 00       	push   $0xd7
+80107a2d:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-80106a22:	e9 80 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a32:	e9 5e f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a27 <vector216>:
+80107a37 <vector216>:
 .globl vector216
 vector216:
   pushl $0
-80106a27:	6a 00                	push   $0x0
+80107a37:	6a 00                	push   $0x0
   pushl $216
-80106a29:	68 d8 00 00 00       	push   $0xd8
+80107a39:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-80106a2e:	e9 74 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a3e:	e9 52 f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a33 <vector217>:
+80107a43 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-80106a33:	6a 00                	push   $0x0
+80107a43:	6a 00                	push   $0x0
   pushl $217
-80106a35:	68 d9 00 00 00       	push   $0xd9
+80107a45:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-80106a3a:	e9 68 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a4a:	e9 46 f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a3f <vector218>:
+80107a4f <vector218>:
 .globl vector218
 vector218:
   pushl $0
-80106a3f:	6a 00                	push   $0x0
+80107a4f:	6a 00                	push   $0x0
   pushl $218
-80106a41:	68 da 00 00 00       	push   $0xda
+80107a51:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-80106a46:	e9 5c f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a56:	e9 3a f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a4b <vector219>:
+80107a5b <vector219>:
 .globl vector219
 vector219:
   pushl $0
-80106a4b:	6a 00                	push   $0x0
+80107a5b:	6a 00                	push   $0x0
   pushl $219
-80106a4d:	68 db 00 00 00       	push   $0xdb
+80107a5d:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-80106a52:	e9 50 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a62:	e9 2e f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a57 <vector220>:
+80107a67 <vector220>:
 .globl vector220
 vector220:
   pushl $0
-80106a57:	6a 00                	push   $0x0
+80107a67:	6a 00                	push   $0x0
   pushl $220
-80106a59:	68 dc 00 00 00       	push   $0xdc
+80107a69:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-80106a5e:	e9 44 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a6e:	e9 22 f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a63 <vector221>:
+80107a73 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-80106a63:	6a 00                	push   $0x0
+80107a73:	6a 00                	push   $0x0
   pushl $221
-80106a65:	68 dd 00 00 00       	push   $0xdd
+80107a75:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-80106a6a:	e9 38 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a7a:	e9 16 f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a6f <vector222>:
+80107a7f <vector222>:
 .globl vector222
 vector222:
   pushl $0
-80106a6f:	6a 00                	push   $0x0
+80107a7f:	6a 00                	push   $0x0
   pushl $222
-80106a71:	68 de 00 00 00       	push   $0xde
+80107a81:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-80106a76:	e9 2c f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a86:	e9 0a f2 ff ff       	jmp    80106c95 <alltraps>
 
-80106a7b <vector223>:
+80107a8b <vector223>:
 .globl vector223
 vector223:
   pushl $0
-80106a7b:	6a 00                	push   $0x0
+80107a8b:	6a 00                	push   $0x0
   pushl $223
-80106a7d:	68 df 00 00 00       	push   $0xdf
+80107a8d:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106a82:	e9 20 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a92:	e9 fe f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106a87 <vector224>:
+80107a97 <vector224>:
 .globl vector224
 vector224:
   pushl $0
-80106a87:	6a 00                	push   $0x0
+80107a97:	6a 00                	push   $0x0
   pushl $224
-80106a89:	68 e0 00 00 00       	push   $0xe0
+80107a99:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-80106a8e:	e9 14 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107a9e:	e9 f2 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106a93 <vector225>:
+80107aa3 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106a93:	6a 00                	push   $0x0
+80107aa3:	6a 00                	push   $0x0
   pushl $225
-80106a95:	68 e1 00 00 00       	push   $0xe1
+80107aa5:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-80106a9a:	e9 08 f2 ff ff       	jmp    80105ca7 <alltraps>
+80107aaa:	e9 e6 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106a9f <vector226>:
+80107aaf <vector226>:
 .globl vector226
 vector226:
   pushl $0
-80106a9f:	6a 00                	push   $0x0
+80107aaf:	6a 00                	push   $0x0
   pushl $226
-80106aa1:	68 e2 00 00 00       	push   $0xe2
+80107ab1:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-80106aa6:	e9 fc f1 ff ff       	jmp    80105ca7 <alltraps>
+80107ab6:	e9 da f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106aab <vector227>:
+80107abb <vector227>:
 .globl vector227
 vector227:
   pushl $0
-80106aab:	6a 00                	push   $0x0
+80107abb:	6a 00                	push   $0x0
   pushl $227
-80106aad:	68 e3 00 00 00       	push   $0xe3
+80107abd:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106ab2:	e9 f0 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107ac2:	e9 ce f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106ab7 <vector228>:
+80107ac7 <vector228>:
 .globl vector228
 vector228:
   pushl $0
-80106ab7:	6a 00                	push   $0x0
+80107ac7:	6a 00                	push   $0x0
   pushl $228
-80106ab9:	68 e4 00 00 00       	push   $0xe4
+80107ac9:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-80106abe:	e9 e4 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107ace:	e9 c2 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106ac3 <vector229>:
+80107ad3 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106ac3:	6a 00                	push   $0x0
+80107ad3:	6a 00                	push   $0x0
   pushl $229
-80106ac5:	68 e5 00 00 00       	push   $0xe5
+80107ad5:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-80106aca:	e9 d8 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107ada:	e9 b6 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106acf <vector230>:
+80107adf <vector230>:
 .globl vector230
 vector230:
   pushl $0
-80106acf:	6a 00                	push   $0x0
+80107adf:	6a 00                	push   $0x0
   pushl $230
-80106ad1:	68 e6 00 00 00       	push   $0xe6
+80107ae1:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-80106ad6:	e9 cc f1 ff ff       	jmp    80105ca7 <alltraps>
+80107ae6:	e9 aa f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106adb <vector231>:
+80107aeb <vector231>:
 .globl vector231
 vector231:
   pushl $0
-80106adb:	6a 00                	push   $0x0
+80107aeb:	6a 00                	push   $0x0
   pushl $231
-80106add:	68 e7 00 00 00       	push   $0xe7
+80107aed:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106ae2:	e9 c0 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107af2:	e9 9e f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106ae7 <vector232>:
+80107af7 <vector232>:
 .globl vector232
 vector232:
   pushl $0
-80106ae7:	6a 00                	push   $0x0
+80107af7:	6a 00                	push   $0x0
   pushl $232
-80106ae9:	68 e8 00 00 00       	push   $0xe8
+80107af9:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-80106aee:	e9 b4 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107afe:	e9 92 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106af3 <vector233>:
+80107b03 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106af3:	6a 00                	push   $0x0
+80107b03:	6a 00                	push   $0x0
   pushl $233
-80106af5:	68 e9 00 00 00       	push   $0xe9
+80107b05:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-80106afa:	e9 a8 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b0a:	e9 86 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106aff <vector234>:
+80107b0f <vector234>:
 .globl vector234
 vector234:
   pushl $0
-80106aff:	6a 00                	push   $0x0
+80107b0f:	6a 00                	push   $0x0
   pushl $234
-80106b01:	68 ea 00 00 00       	push   $0xea
+80107b11:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-80106b06:	e9 9c f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b16:	e9 7a f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b0b <vector235>:
+80107b1b <vector235>:
 .globl vector235
 vector235:
   pushl $0
-80106b0b:	6a 00                	push   $0x0
+80107b1b:	6a 00                	push   $0x0
   pushl $235
-80106b0d:	68 eb 00 00 00       	push   $0xeb
+80107b1d:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-80106b12:	e9 90 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b22:	e9 6e f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b17 <vector236>:
+80107b27 <vector236>:
 .globl vector236
 vector236:
   pushl $0
-80106b17:	6a 00                	push   $0x0
+80107b27:	6a 00                	push   $0x0
   pushl $236
-80106b19:	68 ec 00 00 00       	push   $0xec
+80107b29:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-80106b1e:	e9 84 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b2e:	e9 62 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b23 <vector237>:
+80107b33 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-80106b23:	6a 00                	push   $0x0
+80107b33:	6a 00                	push   $0x0
   pushl $237
-80106b25:	68 ed 00 00 00       	push   $0xed
+80107b35:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-80106b2a:	e9 78 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b3a:	e9 56 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b2f <vector238>:
+80107b3f <vector238>:
 .globl vector238
 vector238:
   pushl $0
-80106b2f:	6a 00                	push   $0x0
+80107b3f:	6a 00                	push   $0x0
   pushl $238
-80106b31:	68 ee 00 00 00       	push   $0xee
+80107b41:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-80106b36:	e9 6c f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b46:	e9 4a f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b3b <vector239>:
+80107b4b <vector239>:
 .globl vector239
 vector239:
   pushl $0
-80106b3b:	6a 00                	push   $0x0
+80107b4b:	6a 00                	push   $0x0
   pushl $239
-80106b3d:	68 ef 00 00 00       	push   $0xef
+80107b4d:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-80106b42:	e9 60 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b52:	e9 3e f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b47 <vector240>:
+80107b57 <vector240>:
 .globl vector240
 vector240:
   pushl $0
-80106b47:	6a 00                	push   $0x0
+80107b57:	6a 00                	push   $0x0
   pushl $240
-80106b49:	68 f0 00 00 00       	push   $0xf0
+80107b59:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-80106b4e:	e9 54 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b5e:	e9 32 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b53 <vector241>:
+80107b63 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-80106b53:	6a 00                	push   $0x0
+80107b63:	6a 00                	push   $0x0
   pushl $241
-80106b55:	68 f1 00 00 00       	push   $0xf1
+80107b65:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-80106b5a:	e9 48 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b6a:	e9 26 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b5f <vector242>:
+80107b6f <vector242>:
 .globl vector242
 vector242:
   pushl $0
-80106b5f:	6a 00                	push   $0x0
+80107b6f:	6a 00                	push   $0x0
   pushl $242
-80106b61:	68 f2 00 00 00       	push   $0xf2
+80107b71:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-80106b66:	e9 3c f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b76:	e9 1a f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b6b <vector243>:
+80107b7b <vector243>:
 .globl vector243
 vector243:
   pushl $0
-80106b6b:	6a 00                	push   $0x0
+80107b7b:	6a 00                	push   $0x0
   pushl $243
-80106b6d:	68 f3 00 00 00       	push   $0xf3
+80107b7d:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106b72:	e9 30 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b82:	e9 0e f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b77 <vector244>:
+80107b87 <vector244>:
 .globl vector244
 vector244:
   pushl $0
-80106b77:	6a 00                	push   $0x0
+80107b87:	6a 00                	push   $0x0
   pushl $244
-80106b79:	68 f4 00 00 00       	push   $0xf4
+80107b89:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-80106b7e:	e9 24 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b8e:	e9 02 f1 ff ff       	jmp    80106c95 <alltraps>
 
-80106b83 <vector245>:
+80107b93 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106b83:	6a 00                	push   $0x0
+80107b93:	6a 00                	push   $0x0
   pushl $245
-80106b85:	68 f5 00 00 00       	push   $0xf5
+80107b95:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-80106b8a:	e9 18 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107b9a:	e9 f6 f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106b8f <vector246>:
+80107b9f <vector246>:
 .globl vector246
 vector246:
   pushl $0
-80106b8f:	6a 00                	push   $0x0
+80107b9f:	6a 00                	push   $0x0
   pushl $246
-80106b91:	68 f6 00 00 00       	push   $0xf6
+80107ba1:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-80106b96:	e9 0c f1 ff ff       	jmp    80105ca7 <alltraps>
+80107ba6:	e9 ea f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106b9b <vector247>:
+80107bab <vector247>:
 .globl vector247
 vector247:
   pushl $0
-80106b9b:	6a 00                	push   $0x0
+80107bab:	6a 00                	push   $0x0
   pushl $247
-80106b9d:	68 f7 00 00 00       	push   $0xf7
+80107bad:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106ba2:	e9 00 f1 ff ff       	jmp    80105ca7 <alltraps>
+80107bb2:	e9 de f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106ba7 <vector248>:
+80107bb7 <vector248>:
 .globl vector248
 vector248:
   pushl $0
-80106ba7:	6a 00                	push   $0x0
+80107bb7:	6a 00                	push   $0x0
   pushl $248
-80106ba9:	68 f8 00 00 00       	push   $0xf8
+80107bb9:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-80106bae:	e9 f4 f0 ff ff       	jmp    80105ca7 <alltraps>
+80107bbe:	e9 d2 f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106bb3 <vector249>:
+80107bc3 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106bb3:	6a 00                	push   $0x0
+80107bc3:	6a 00                	push   $0x0
   pushl $249
-80106bb5:	68 f9 00 00 00       	push   $0xf9
+80107bc5:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-80106bba:	e9 e8 f0 ff ff       	jmp    80105ca7 <alltraps>
+80107bca:	e9 c6 f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106bbf <vector250>:
+80107bcf <vector250>:
 .globl vector250
 vector250:
   pushl $0
-80106bbf:	6a 00                	push   $0x0
+80107bcf:	6a 00                	push   $0x0
   pushl $250
-80106bc1:	68 fa 00 00 00       	push   $0xfa
+80107bd1:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-80106bc6:	e9 dc f0 ff ff       	jmp    80105ca7 <alltraps>
+80107bd6:	e9 ba f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106bcb <vector251>:
+80107bdb <vector251>:
 .globl vector251
 vector251:
   pushl $0
-80106bcb:	6a 00                	push   $0x0
+80107bdb:	6a 00                	push   $0x0
   pushl $251
-80106bcd:	68 fb 00 00 00       	push   $0xfb
+80107bdd:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106bd2:	e9 d0 f0 ff ff       	jmp    80105ca7 <alltraps>
+80107be2:	e9 ae f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106bd7 <vector252>:
+80107be7 <vector252>:
 .globl vector252
 vector252:
   pushl $0
-80106bd7:	6a 00                	push   $0x0
+80107be7:	6a 00                	push   $0x0
   pushl $252
-80106bd9:	68 fc 00 00 00       	push   $0xfc
+80107be9:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-80106bde:	e9 c4 f0 ff ff       	jmp    80105ca7 <alltraps>
+80107bee:	e9 a2 f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106be3 <vector253>:
+80107bf3 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106be3:	6a 00                	push   $0x0
+80107bf3:	6a 00                	push   $0x0
   pushl $253
-80106be5:	68 fd 00 00 00       	push   $0xfd
+80107bf5:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-80106bea:	e9 b8 f0 ff ff       	jmp    80105ca7 <alltraps>
+80107bfa:	e9 96 f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106bef <vector254>:
+80107bff <vector254>:
 .globl vector254
 vector254:
   pushl $0
-80106bef:	6a 00                	push   $0x0
+80107bff:	6a 00                	push   $0x0
   pushl $254
-80106bf1:	68 fe 00 00 00       	push   $0xfe
+80107c01:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-80106bf6:	e9 ac f0 ff ff       	jmp    80105ca7 <alltraps>
+80107c06:	e9 8a f0 ff ff       	jmp    80106c95 <alltraps>
 
-80106bfb <vector255>:
+80107c0b <vector255>:
 .globl vector255
 vector255:
   pushl $0
-80106bfb:	6a 00                	push   $0x0
+80107c0b:	6a 00                	push   $0x0
   pushl $255
-80106bfd:	68 ff 00 00 00       	push   $0xff
+80107c0d:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106c02:	e9 a0 f0 ff ff       	jmp    80105ca7 <alltraps>
-80106c07:	66 90                	xchg   %ax,%ax
-80106c09:	66 90                	xchg   %ax,%ax
-80106c0b:	66 90                	xchg   %ax,%ax
-80106c0d:	66 90                	xchg   %ax,%ax
-80106c0f:	90                   	nop
+80107c12:	e9 7e f0 ff ff       	jmp    80106c95 <alltraps>
+80107c17:	66 90                	xchg   %ax,%ax
+80107c19:	66 90                	xchg   %ax,%ax
+80107c1b:	66 90                	xchg   %ax,%ax
+80107c1d:	66 90                	xchg   %ax,%ax
+80107c1f:	90                   	nop
 
-80106c10 <deallocuvm.part.0>:
+80107c20 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106c10:	55                   	push   %ebp
-80106c11:	89 e5                	mov    %esp,%ebp
-80106c13:	57                   	push   %edi
-80106c14:	56                   	push   %esi
-80106c15:	53                   	push   %ebx
+80107c20:	55                   	push   %ebp
+80107c21:	89 e5                	mov    %esp,%ebp
+80107c23:	57                   	push   %edi
+80107c24:	56                   	push   %esi
+80107c25:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-80106c16:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
-80106c1c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80107c26:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+80107c2c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106c22:	83 ec 1c             	sub    $0x1c,%esp
-80106c25:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80107c32:	83 ec 1c             	sub    $0x1c,%esp
+80107c35:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-80106c28:	39 d3                	cmp    %edx,%ebx
-80106c2a:	73 49                	jae    80106c75 <deallocuvm.part.0+0x65>
-80106c2c:	89 c7                	mov    %eax,%edi
-80106c2e:	eb 0c                	jmp    80106c3c <deallocuvm.part.0+0x2c>
+80107c38:	39 d3                	cmp    %edx,%ebx
+80107c3a:	73 49                	jae    80107c85 <deallocuvm.part.0+0x65>
+80107c3c:	89 c7                	mov    %eax,%edi
+80107c3e:	eb 0c                	jmp    80107c4c <deallocuvm.part.0+0x2c>
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106c30:	83 c0 01             	add    $0x1,%eax
-80106c33:	c1 e0 16             	shl    $0x16,%eax
-80106c36:	89 c3                	mov    %eax,%ebx
+80107c40:	83 c0 01             	add    $0x1,%eax
+80107c43:	c1 e0 16             	shl    $0x16,%eax
+80107c46:	89 c3                	mov    %eax,%ebx
   for(; a  < oldsz; a += PGSIZE){
-80106c38:	39 da                	cmp    %ebx,%edx
-80106c3a:	76 39                	jbe    80106c75 <deallocuvm.part.0+0x65>
+80107c48:	39 da                	cmp    %ebx,%edx
+80107c4a:	76 39                	jbe    80107c85 <deallocuvm.part.0+0x65>
   pde = &pgdir[PDX(va)];
-80106c3c:	89 d8                	mov    %ebx,%eax
-80106c3e:	c1 e8 16             	shr    $0x16,%eax
+80107c4c:	89 d8                	mov    %ebx,%eax
+80107c4e:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-80106c41:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
-80106c44:	f6 c1 01             	test   $0x1,%cl
-80106c47:	74 e7                	je     80106c30 <deallocuvm.part.0+0x20>
+80107c51:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
+80107c54:	f6 c1 01             	test   $0x1,%cl
+80107c57:	74 e7                	je     80107c40 <deallocuvm.part.0+0x20>
   return &pgtab[PTX(va)];
-80106c49:	89 de                	mov    %ebx,%esi
+80107c59:	89 de                	mov    %ebx,%esi
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106c4b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+80107c5b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-80106c51:	c1 ee 0a             	shr    $0xa,%esi
-80106c54:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
-80106c5a:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
+80107c61:	c1 ee 0a             	shr    $0xa,%esi
+80107c64:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
+80107c6a:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
     if(!pte)
-80106c61:	85 f6                	test   %esi,%esi
-80106c63:	74 cb                	je     80106c30 <deallocuvm.part.0+0x20>
+80107c71:	85 f6                	test   %esi,%esi
+80107c73:	74 cb                	je     80107c40 <deallocuvm.part.0+0x20>
     else if((*pte & PTE_P) != 0){
-80106c65:	8b 06                	mov    (%esi),%eax
-80106c67:	a8 01                	test   $0x1,%al
-80106c69:	75 15                	jne    80106c80 <deallocuvm.part.0+0x70>
+80107c75:	8b 06                	mov    (%esi),%eax
+80107c77:	a8 01                	test   $0x1,%al
+80107c79:	75 15                	jne    80107c90 <deallocuvm.part.0+0x70>
   for(; a  < oldsz; a += PGSIZE){
-80106c6b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106c71:	39 da                	cmp    %ebx,%edx
-80106c73:	77 c7                	ja     80106c3c <deallocuvm.part.0+0x2c>
+80107c7b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107c81:	39 da                	cmp    %ebx,%edx
+80107c83:	77 c7                	ja     80107c4c <deallocuvm.part.0+0x2c>
       kfree(v);
       *pte = 0;
     }
   }
   return newsz;
 }
-80106c75:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106c78:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106c7b:	5b                   	pop    %ebx
-80106c7c:	5e                   	pop    %esi
-80106c7d:	5f                   	pop    %edi
-80106c7e:	5d                   	pop    %ebp
-80106c7f:	c3                   	ret    
+80107c85:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107c88:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107c8b:	5b                   	pop    %ebx
+80107c8c:	5e                   	pop    %esi
+80107c8d:	5f                   	pop    %edi
+80107c8e:	5d                   	pop    %ebp
+80107c8f:	c3                   	ret    
       if(pa == 0)
-80106c80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106c85:	74 25                	je     80106cac <deallocuvm.part.0+0x9c>
+80107c90:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107c95:	74 25                	je     80107cbc <deallocuvm.part.0+0x9c>
       kfree(v);
-80106c87:	83 ec 0c             	sub    $0xc,%esp
+80107c97:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-80106c8a:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c8f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80107c9a:	05 00 00 00 80       	add    $0x80000000,%eax
+80107c9f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-80106c92:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107ca2:	81 c3 00 10 00 00    	add    $0x1000,%ebx
       kfree(v);
-80106c98:	50                   	push   %eax
-80106c99:	e8 22 b8 ff ff       	call   801024c0 <kfree>
+80107ca8:	50                   	push   %eax
+80107ca9:	e8 12 a8 ff ff       	call   801024c0 <kfree>
       *pte = 0;
-80106c9e:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80107cae:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
   for(; a  < oldsz; a += PGSIZE){
-80106ca4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106ca7:	83 c4 10             	add    $0x10,%esp
-80106caa:	eb 8c                	jmp    80106c38 <deallocuvm.part.0+0x28>
+80107cb4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107cb7:	83 c4 10             	add    $0x10,%esp
+80107cba:	eb 8c                	jmp    80107c48 <deallocuvm.part.0+0x28>
         panic("kfree");
-80106cac:	83 ec 0c             	sub    $0xc,%esp
-80106caf:	68 66 78 10 80       	push   $0x80107866
-80106cb4:	e8 c7 96 ff ff       	call   80100380 <panic>
-80106cb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106cc0 <mappages>:
-{
-80106cc0:	55                   	push   %ebp
-80106cc1:	89 e5                	mov    %esp,%ebp
-80106cc3:	57                   	push   %edi
-80106cc4:	56                   	push   %esi
-80106cc5:	53                   	push   %ebx
+80107cbc:	83 ec 0c             	sub    $0xc,%esp
+80107cbf:	68 86 88 10 80       	push   $0x80108886
+80107cc4:	e8 b7 86 ff ff       	call   80100380 <panic>
+80107cc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107cd0 <mappages>:
+{
+80107cd0:	55                   	push   %ebp
+80107cd1:	89 e5                	mov    %esp,%ebp
+80107cd3:	57                   	push   %edi
+80107cd4:	56                   	push   %esi
+80107cd5:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106cc6:	89 d3                	mov    %edx,%ebx
-80106cc8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80107cd6:	89 d3                	mov    %edx,%ebx
+80107cd8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 {
-80106cce:	83 ec 1c             	sub    $0x1c,%esp
-80106cd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107cde:	83 ec 1c             	sub    $0x1c,%esp
+80107ce1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106cd4:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-80106cd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106cdd:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106ce0:	8b 45 08             	mov    0x8(%ebp),%eax
-80106ce3:	29 d8                	sub    %ebx,%eax
-80106ce5:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106ce8:	eb 3d                	jmp    80106d27 <mappages+0x67>
-80106cea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107ce4:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80107ce8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107ced:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80107cf0:	8b 45 08             	mov    0x8(%ebp),%eax
+80107cf3:	29 d8                	sub    %ebx,%eax
+80107cf5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107cf8:	eb 3d                	jmp    80107d37 <mappages+0x67>
+80107cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106cf0:	89 da                	mov    %ebx,%edx
+80107d00:	89 da                	mov    %ebx,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106cf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107d02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80106cf7:	c1 ea 0a             	shr    $0xa,%edx
-80106cfa:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106d00:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80107d07:	c1 ea 0a             	shr    $0xa,%edx
+80107d0a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80107d10:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106d07:	85 c0                	test   %eax,%eax
-80106d09:	74 75                	je     80106d80 <mappages+0xc0>
+80107d17:	85 c0                	test   %eax,%eax
+80107d19:	74 75                	je     80107d90 <mappages+0xc0>
     if(*pte & PTE_P)
-80106d0b:	f6 00 01             	testb  $0x1,(%eax)
-80106d0e:	0f 85 86 00 00 00    	jne    80106d9a <mappages+0xda>
+80107d1b:	f6 00 01             	testb  $0x1,(%eax)
+80107d1e:	0f 85 86 00 00 00    	jne    80107daa <mappages+0xda>
     *pte = pa | perm | PTE_P;
-80106d14:	0b 75 0c             	or     0xc(%ebp),%esi
-80106d17:	83 ce 01             	or     $0x1,%esi
-80106d1a:	89 30                	mov    %esi,(%eax)
+80107d24:	0b 75 0c             	or     0xc(%ebp),%esi
+80107d27:	83 ce 01             	or     $0x1,%esi
+80107d2a:	89 30                	mov    %esi,(%eax)
     if(a == last)
-80106d1c:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
-80106d1f:	74 6f                	je     80106d90 <mappages+0xd0>
+80107d2c:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
+80107d2f:	74 6f                	je     80107da0 <mappages+0xd0>
     a += PGSIZE;
-80106d21:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107d31:	81 c3 00 10 00 00    	add    $0x1000,%ebx
   for(;;){
-80106d27:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107d37:	8b 45 e0             	mov    -0x20(%ebp),%eax
   pde = &pgdir[PDX(va)];
-80106d2a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106d2d:	8d 34 18             	lea    (%eax,%ebx,1),%esi
-80106d30:	89 d8                	mov    %ebx,%eax
-80106d32:	c1 e8 16             	shr    $0x16,%eax
-80106d35:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
+80107d3a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107d3d:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+80107d40:	89 d8                	mov    %ebx,%eax
+80107d42:	c1 e8 16             	shr    $0x16,%eax
+80107d45:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
   if(*pde & PTE_P){
-80106d38:	8b 07                	mov    (%edi),%eax
-80106d3a:	a8 01                	test   $0x1,%al
-80106d3c:	75 b2                	jne    80106cf0 <mappages+0x30>
+80107d48:	8b 07                	mov    (%edi),%eax
+80107d4a:	a8 01                	test   $0x1,%al
+80107d4c:	75 b2                	jne    80107d00 <mappages+0x30>
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-80106d3e:	e8 3d b9 ff ff       	call   80102680 <kalloc>
-80106d43:	85 c0                	test   %eax,%eax
-80106d45:	74 39                	je     80106d80 <mappages+0xc0>
+80107d4e:	e8 2d a9 ff ff       	call   80102680 <kalloc>
+80107d53:	85 c0                	test   %eax,%eax
+80107d55:	74 39                	je     80107d90 <mappages+0xc0>
     memset(pgtab, 0, PGSIZE);
-80106d47:	83 ec 04             	sub    $0x4,%esp
-80106d4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80106d4d:	68 00 10 00 00       	push   $0x1000
-80106d52:	6a 00                	push   $0x0
-80106d54:	50                   	push   %eax
-80106d55:	e8 66 dc ff ff       	call   801049c0 <memset>
+80107d57:	83 ec 04             	sub    $0x4,%esp
+80107d5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80107d5d:	68 00 10 00 00       	push   $0x1000
+80107d62:	6a 00                	push   $0x0
+80107d64:	50                   	push   %eax
+80107d65:	e8 66 db ff ff       	call   801058d0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106d5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
+80107d6a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   return &pgtab[PTX(va)];
-80106d5d:	83 c4 10             	add    $0x10,%esp
+80107d6d:	83 c4 10             	add    $0x10,%esp
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106d60:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
-80106d66:	83 c8 07             	or     $0x7,%eax
-80106d69:	89 07                	mov    %eax,(%edi)
+80107d70:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
+80107d76:	83 c8 07             	or     $0x7,%eax
+80107d79:	89 07                	mov    %eax,(%edi)
   return &pgtab[PTX(va)];
-80106d6b:	89 d8                	mov    %ebx,%eax
-80106d6d:	c1 e8 0a             	shr    $0xa,%eax
-80106d70:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106d75:	01 d0                	add    %edx,%eax
-80106d77:	eb 92                	jmp    80106d0b <mappages+0x4b>
-80106d79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107d7b:	89 d8                	mov    %ebx,%eax
+80107d7d:	c1 e8 0a             	shr    $0xa,%eax
+80107d80:	25 fc 0f 00 00       	and    $0xffc,%eax
+80107d85:	01 d0                	add    %edx,%eax
+80107d87:	eb 92                	jmp    80107d1b <mappages+0x4b>
+80107d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 }
-80106d80:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107d90:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106d83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80107d93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106d88:	5b                   	pop    %ebx
-80106d89:	5e                   	pop    %esi
-80106d8a:	5f                   	pop    %edi
-80106d8b:	5d                   	pop    %ebp
-80106d8c:	c3                   	ret    
-80106d8d:	8d 76 00             	lea    0x0(%esi),%esi
-80106d90:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107d98:	5b                   	pop    %ebx
+80107d99:	5e                   	pop    %esi
+80107d9a:	5f                   	pop    %edi
+80107d9b:	5d                   	pop    %ebp
+80107d9c:	c3                   	ret    
+80107d9d:	8d 76 00             	lea    0x0(%esi),%esi
+80107da0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106d93:	31 c0                	xor    %eax,%eax
+80107da3:	31 c0                	xor    %eax,%eax
 }
-80106d95:	5b                   	pop    %ebx
-80106d96:	5e                   	pop    %esi
-80106d97:	5f                   	pop    %edi
-80106d98:	5d                   	pop    %ebp
-80106d99:	c3                   	ret    
+80107da5:	5b                   	pop    %ebx
+80107da6:	5e                   	pop    %esi
+80107da7:	5f                   	pop    %edi
+80107da8:	5d                   	pop    %ebp
+80107da9:	c3                   	ret    
       panic("remap");
-80106d9a:	83 ec 0c             	sub    $0xc,%esp
-80106d9d:	68 d8 7e 10 80       	push   $0x80107ed8
-80106da2:	e8 d9 95 ff ff       	call   80100380 <panic>
-80106da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dae:	66 90                	xchg   %ax,%ax
-
-80106db0 <seginit>:
-{
-80106db0:	55                   	push   %ebp
-80106db1:	89 e5                	mov    %esp,%ebp
-80106db3:	83 ec 18             	sub    $0x18,%esp
+80107daa:	83 ec 0c             	sub    $0xc,%esp
+80107dad:	68 d0 8e 10 80       	push   $0x80108ed0
+80107db2:	e8 c9 85 ff ff       	call   80100380 <panic>
+80107db7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107dbe:	66 90                	xchg   %ax,%ax
+
+80107dc0 <seginit>:
+{
+80107dc0:	55                   	push   %ebp
+80107dc1:	89 e5                	mov    %esp,%ebp
+80107dc3:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-80106db6:	e8 d5 cb ff ff       	call   80103990 <cpuid>
+80107dc6:	e8 c5 c4 ff ff       	call   80104290 <cpuid>
   pd[0] = size-1;
-80106dbb:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106dc0:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-80106dc6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+80107dcb:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80107dd0:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80107dd6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80106dca:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
-80106dd1:	ff 00 00 
-80106dd4:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
-80106ddb:	9a cf 00 
+80107dda:	c7 80 18 28 11 80 ff 	movl   $0xffff,-0x7feed7e8(%eax)
+80107de1:	ff 00 00 
+80107de4:	c7 80 1c 28 11 80 00 	movl   $0xcf9a00,-0x7feed7e4(%eax)
+80107deb:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106dde:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
-80106de5:	ff 00 00 
-80106de8:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
-80106def:	92 cf 00 
+80107dee:	c7 80 20 28 11 80 ff 	movl   $0xffff,-0x7feed7e0(%eax)
+80107df5:	ff 00 00 
+80107df8:	c7 80 24 28 11 80 00 	movl   $0xcf9200,-0x7feed7dc(%eax)
+80107dff:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106df2:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
-80106df9:	ff 00 00 
-80106dfc:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
-80106e03:	fa cf 00 
+80107e02:	c7 80 28 28 11 80 ff 	movl   $0xffff,-0x7feed7d8(%eax)
+80107e09:	ff 00 00 
+80107e0c:	c7 80 2c 28 11 80 00 	movl   $0xcffa00,-0x7feed7d4(%eax)
+80107e13:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106e06:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
-80106e0d:	ff 00 00 
-80106e10:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
-80106e17:	f2 cf 00 
+80107e16:	c7 80 30 28 11 80 ff 	movl   $0xffff,-0x7feed7d0(%eax)
+80107e1d:	ff 00 00 
+80107e20:	c7 80 34 28 11 80 00 	movl   $0xcff200,-0x7feed7cc(%eax)
+80107e27:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-80106e1a:	05 10 18 11 80       	add    $0x80111810,%eax
+80107e2a:	05 10 28 11 80       	add    $0x80112810,%eax
   pd[1] = (uint)p;
-80106e1f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80107e2f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-80106e23:	c1 e8 10             	shr    $0x10,%eax
-80106e26:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80107e33:	c1 e8 10             	shr    $0x10,%eax
+80107e36:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-80106e2a:	8d 45 f2             	lea    -0xe(%ebp),%eax
-80106e2d:	0f 01 10             	lgdtl  (%eax)
+80107e3a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80107e3d:	0f 01 10             	lgdtl  (%eax)
 }
-80106e30:	c9                   	leave  
-80106e31:	c3                   	ret    
-80106e32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107e40:	c9                   	leave  
+80107e41:	c3                   	ret    
+80107e42:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106e40 <switchkvm>:
+80107e50 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106e40:	a1 c4 45 11 80       	mov    0x801145c4,%eax
-80106e45:	05 00 00 00 80       	add    $0x80000000,%eax
+80107e50:	a1 e4 5b 11 80       	mov    0x80115be4,%eax
+80107e55:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106e4a:	0f 22 d8             	mov    %eax,%cr3
+80107e5a:	0f 22 d8             	mov    %eax,%cr3
 }
-80106e4d:	c3                   	ret    
-80106e4e:	66 90                	xchg   %ax,%ax
+80107e5d:	c3                   	ret    
+80107e5e:	66 90                	xchg   %ax,%ax
 
-80106e50 <switchuvm>:
+80107e60 <switchuvm>:
 {
-80106e50:	55                   	push   %ebp
-80106e51:	89 e5                	mov    %esp,%ebp
-80106e53:	57                   	push   %edi
-80106e54:	56                   	push   %esi
-80106e55:	53                   	push   %ebx
-80106e56:	83 ec 1c             	sub    $0x1c,%esp
-80106e59:	8b 75 08             	mov    0x8(%ebp),%esi
+80107e60:	55                   	push   %ebp
+80107e61:	89 e5                	mov    %esp,%ebp
+80107e63:	57                   	push   %edi
+80107e64:	56                   	push   %esi
+80107e65:	53                   	push   %ebx
+80107e66:	83 ec 1c             	sub    $0x1c,%esp
+80107e69:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-80106e5c:	85 f6                	test   %esi,%esi
-80106e5e:	0f 84 cb 00 00 00    	je     80106f2f <switchuvm+0xdf>
+80107e6c:	85 f6                	test   %esi,%esi
+80107e6e:	0f 84 cb 00 00 00    	je     80107f3f <switchuvm+0xdf>
   if(p->kstack == 0)
-80106e64:	8b 46 08             	mov    0x8(%esi),%eax
-80106e67:	85 c0                	test   %eax,%eax
-80106e69:	0f 84 da 00 00 00    	je     80106f49 <switchuvm+0xf9>
+80107e74:	8b 46 08             	mov    0x8(%esi),%eax
+80107e77:	85 c0                	test   %eax,%eax
+80107e79:	0f 84 da 00 00 00    	je     80107f59 <switchuvm+0xf9>
   if(p->pgdir == 0)
-80106e6f:	8b 46 04             	mov    0x4(%esi),%eax
-80106e72:	85 c0                	test   %eax,%eax
-80106e74:	0f 84 c2 00 00 00    	je     80106f3c <switchuvm+0xec>
+80107e7f:	8b 46 04             	mov    0x4(%esi),%eax
+80107e82:	85 c0                	test   %eax,%eax
+80107e84:	0f 84 c2 00 00 00    	je     80107f4c <switchuvm+0xec>
   pushcli();
-80106e7a:	e8 31 d9 ff ff       	call   801047b0 <pushcli>
+80107e8a:	e8 31 d8 ff ff       	call   801056c0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106e7f:	e8 ac ca ff ff       	call   80103930 <mycpu>
-80106e84:	89 c3                	mov    %eax,%ebx
-80106e86:	e8 a5 ca ff ff       	call   80103930 <mycpu>
-80106e8b:	89 c7                	mov    %eax,%edi
-80106e8d:	e8 9e ca ff ff       	call   80103930 <mycpu>
-80106e92:	83 c7 08             	add    $0x8,%edi
-80106e95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106e98:	e8 93 ca ff ff       	call   80103930 <mycpu>
-80106e9d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106ea0:	ba 67 00 00 00       	mov    $0x67,%edx
-80106ea5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106eac:	83 c0 08             	add    $0x8,%eax
-80106eaf:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80107e8f:	e8 9c c3 ff ff       	call   80104230 <mycpu>
+80107e94:	89 c3                	mov    %eax,%ebx
+80107e96:	e8 95 c3 ff ff       	call   80104230 <mycpu>
+80107e9b:	89 c7                	mov    %eax,%edi
+80107e9d:	e8 8e c3 ff ff       	call   80104230 <mycpu>
+80107ea2:	83 c7 08             	add    $0x8,%edi
+80107ea5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107ea8:	e8 83 c3 ff ff       	call   80104230 <mycpu>
+80107ead:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107eb0:	ba 67 00 00 00       	mov    $0x67,%edx
+80107eb5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107ebc:	83 c0 08             	add    $0x8,%eax
+80107ebf:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106eb6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80107ec6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106ebb:	83 c1 08             	add    $0x8,%ecx
-80106ebe:	c1 e8 18             	shr    $0x18,%eax
-80106ec1:	c1 e9 10             	shr    $0x10,%ecx
-80106ec4:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106eca:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106ed0:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106ed5:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80107ecb:	83 c1 08             	add    $0x8,%ecx
+80107ece:	c1 e8 18             	shr    $0x18,%eax
+80107ed1:	c1 e9 10             	shr    $0x10,%ecx
+80107ed4:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80107eda:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80107ee0:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107ee5:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106edc:	bb 10 00 00 00       	mov    $0x10,%ebx
+80107eec:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106ee1:	e8 4a ca ff ff       	call   80103930 <mycpu>
-80106ee6:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80107ef1:	e8 3a c3 ff ff       	call   80104230 <mycpu>
+80107ef6:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106eed:	e8 3e ca ff ff       	call   80103930 <mycpu>
-80106ef2:	66 89 58 10          	mov    %bx,0x10(%eax)
+80107efd:	e8 2e c3 ff ff       	call   80104230 <mycpu>
+80107f02:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106ef6:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106ef9:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106eff:	e8 2c ca ff ff       	call   80103930 <mycpu>
-80106f04:	89 58 0c             	mov    %ebx,0xc(%eax)
+80107f06:	8b 5e 08             	mov    0x8(%esi),%ebx
+80107f09:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107f0f:	e8 1c c3 ff ff       	call   80104230 <mycpu>
+80107f14:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106f07:	e8 24 ca ff ff       	call   80103930 <mycpu>
-80106f0c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80107f17:	e8 14 c3 ff ff       	call   80104230 <mycpu>
+80107f1c:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106f10:	b8 28 00 00 00       	mov    $0x28,%eax
-80106f15:	0f 00 d8             	ltr    %ax
+80107f20:	b8 28 00 00 00       	mov    $0x28,%eax
+80107f25:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106f18:	8b 46 04             	mov    0x4(%esi),%eax
-80106f1b:	05 00 00 00 80       	add    $0x80000000,%eax
+80107f28:	8b 46 04             	mov    0x4(%esi),%eax
+80107f2b:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106f20:	0f 22 d8             	mov    %eax,%cr3
+80107f30:	0f 22 d8             	mov    %eax,%cr3
 }
-80106f23:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106f26:	5b                   	pop    %ebx
-80106f27:	5e                   	pop    %esi
-80106f28:	5f                   	pop    %edi
-80106f29:	5d                   	pop    %ebp
+80107f33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107f36:	5b                   	pop    %ebx
+80107f37:	5e                   	pop    %esi
+80107f38:	5f                   	pop    %edi
+80107f39:	5d                   	pop    %ebp
   popcli();
-80106f2a:	e9 d1 d8 ff ff       	jmp    80104800 <popcli>
+80107f3a:	e9 d1 d7 ff ff       	jmp    80105710 <popcli>
     panic("switchuvm: no process");
-80106f2f:	83 ec 0c             	sub    $0xc,%esp
-80106f32:	68 de 7e 10 80       	push   $0x80107ede
-80106f37:	e8 44 94 ff ff       	call   80100380 <panic>
+80107f3f:	83 ec 0c             	sub    $0xc,%esp
+80107f42:	68 d6 8e 10 80       	push   $0x80108ed6
+80107f47:	e8 34 84 ff ff       	call   80100380 <panic>
     panic("switchuvm: no pgdir");
-80106f3c:	83 ec 0c             	sub    $0xc,%esp
-80106f3f:	68 09 7f 10 80       	push   $0x80107f09
-80106f44:	e8 37 94 ff ff       	call   80100380 <panic>
+80107f4c:	83 ec 0c             	sub    $0xc,%esp
+80107f4f:	68 01 8f 10 80       	push   $0x80108f01
+80107f54:	e8 27 84 ff ff       	call   80100380 <panic>
     panic("switchuvm: no kstack");
-80106f49:	83 ec 0c             	sub    $0xc,%esp
-80106f4c:	68 f4 7e 10 80       	push   $0x80107ef4
-80106f51:	e8 2a 94 ff ff       	call   80100380 <panic>
-80106f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106f60 <inituvm>:
-{
-80106f60:	55                   	push   %ebp
-80106f61:	89 e5                	mov    %esp,%ebp
-80106f63:	57                   	push   %edi
-80106f64:	56                   	push   %esi
-80106f65:	53                   	push   %ebx
-80106f66:	83 ec 1c             	sub    $0x1c,%esp
-80106f69:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106f6c:	8b 75 10             	mov    0x10(%ebp),%esi
-80106f6f:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106f72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107f59:	83 ec 0c             	sub    $0xc,%esp
+80107f5c:	68 ec 8e 10 80       	push   $0x80108eec
+80107f61:	e8 1a 84 ff ff       	call   80100380 <panic>
+80107f66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107f6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107f70 <inituvm>:
+{
+80107f70:	55                   	push   %ebp
+80107f71:	89 e5                	mov    %esp,%ebp
+80107f73:	57                   	push   %edi
+80107f74:	56                   	push   %esi
+80107f75:	53                   	push   %ebx
+80107f76:	83 ec 1c             	sub    $0x1c,%esp
+80107f79:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107f7c:	8b 75 10             	mov    0x10(%ebp),%esi
+80107f7f:	8b 7d 08             	mov    0x8(%ebp),%edi
+80107f82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106f75:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106f7b:	77 4b                	ja     80106fc8 <inituvm+0x68>
+80107f85:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80107f8b:	77 4b                	ja     80107fd8 <inituvm+0x68>
   mem = kalloc();
-80106f7d:	e8 fe b6 ff ff       	call   80102680 <kalloc>
+80107f8d:	e8 ee a6 ff ff       	call   80102680 <kalloc>
   memset(mem, 0, PGSIZE);
-80106f82:	83 ec 04             	sub    $0x4,%esp
-80106f85:	68 00 10 00 00       	push   $0x1000
+80107f92:	83 ec 04             	sub    $0x4,%esp
+80107f95:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106f8a:	89 c3                	mov    %eax,%ebx
+80107f9a:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106f8c:	6a 00                	push   $0x0
-80106f8e:	50                   	push   %eax
-80106f8f:	e8 2c da ff ff       	call   801049c0 <memset>
+80107f9c:	6a 00                	push   $0x0
+80107f9e:	50                   	push   %eax
+80107f9f:	e8 2c d9 ff ff       	call   801058d0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106f94:	58                   	pop    %eax
-80106f95:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106f9b:	5a                   	pop    %edx
-80106f9c:	6a 06                	push   $0x6
-80106f9e:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106fa3:	31 d2                	xor    %edx,%edx
-80106fa5:	50                   	push   %eax
-80106fa6:	89 f8                	mov    %edi,%eax
-80106fa8:	e8 13 fd ff ff       	call   80106cc0 <mappages>
+80107fa4:	58                   	pop    %eax
+80107fa5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107fab:	5a                   	pop    %edx
+80107fac:	6a 06                	push   $0x6
+80107fae:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107fb3:	31 d2                	xor    %edx,%edx
+80107fb5:	50                   	push   %eax
+80107fb6:	89 f8                	mov    %edi,%eax
+80107fb8:	e8 13 fd ff ff       	call   80107cd0 <mappages>
   memmove(mem, init, sz);
-80106fad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106fb0:	89 75 10             	mov    %esi,0x10(%ebp)
-80106fb3:	83 c4 10             	add    $0x10,%esp
-80106fb6:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106fb9:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106fbc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fbf:	5b                   	pop    %ebx
-80106fc0:	5e                   	pop    %esi
-80106fc1:	5f                   	pop    %edi
-80106fc2:	5d                   	pop    %ebp
+80107fbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107fc0:	89 75 10             	mov    %esi,0x10(%ebp)
+80107fc3:	83 c4 10             	add    $0x10,%esp
+80107fc6:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80107fc9:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80107fcc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107fcf:	5b                   	pop    %ebx
+80107fd0:	5e                   	pop    %esi
+80107fd1:	5f                   	pop    %edi
+80107fd2:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106fc3:	e9 98 da ff ff       	jmp    80104a60 <memmove>
+80107fd3:	e9 98 d9 ff ff       	jmp    80105970 <memmove>
     panic("inituvm: more than a page");
-80106fc8:	83 ec 0c             	sub    $0xc,%esp
-80106fcb:	68 1d 7f 10 80       	push   $0x80107f1d
-80106fd0:	e8 ab 93 ff ff       	call   80100380 <panic>
-80106fd5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106fdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106fe0 <loaduvm>:
-{
-80106fe0:	55                   	push   %ebp
-80106fe1:	89 e5                	mov    %esp,%ebp
-80106fe3:	57                   	push   %edi
-80106fe4:	56                   	push   %esi
-80106fe5:	53                   	push   %ebx
-80106fe6:	83 ec 1c             	sub    $0x1c,%esp
-80106fe9:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106fec:	8b 75 18             	mov    0x18(%ebp),%esi
+80107fd8:	83 ec 0c             	sub    $0xc,%esp
+80107fdb:	68 15 8f 10 80       	push   $0x80108f15
+80107fe0:	e8 9b 83 ff ff       	call   80100380 <panic>
+80107fe5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107fec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80107ff0 <loaduvm>:
+{
+80107ff0:	55                   	push   %ebp
+80107ff1:	89 e5                	mov    %esp,%ebp
+80107ff3:	57                   	push   %edi
+80107ff4:	56                   	push   %esi
+80107ff5:	53                   	push   %ebx
+80107ff6:	83 ec 1c             	sub    $0x1c,%esp
+80107ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107ffc:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106fef:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106ff4:	0f 85 bb 00 00 00    	jne    801070b5 <loaduvm+0xd5>
+80107fff:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80108004:	0f 85 bb 00 00 00    	jne    801080c5 <loaduvm+0xd5>
   for(i = 0; i < sz; i += PGSIZE){
-80106ffa:	01 f0                	add    %esi,%eax
-80106ffc:	89 f3                	mov    %esi,%ebx
-80106ffe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010800a:	01 f0                	add    %esi,%eax
+8010800c:	89 f3                	mov    %esi,%ebx
+8010800e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80107001:	8b 45 14             	mov    0x14(%ebp),%eax
-80107004:	01 f0                	add    %esi,%eax
-80107006:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80108011:	8b 45 14             	mov    0x14(%ebp),%eax
+80108014:	01 f0                	add    %esi,%eax
+80108016:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80107009:	85 f6                	test   %esi,%esi
-8010700b:	0f 84 87 00 00 00    	je     80107098 <loaduvm+0xb8>
-80107011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80108019:	85 f6                	test   %esi,%esi
+8010801b:	0f 84 87 00 00 00    	je     801080a8 <loaduvm+0xb8>
+80108021:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   pde = &pgdir[PDX(va)];
-80107018:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80108028:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   if(*pde & PTE_P){
-8010701b:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010701e:	29 d8                	sub    %ebx,%eax
+8010802b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010802e:	29 d8                	sub    %ebx,%eax
   pde = &pgdir[PDX(va)];
-80107020:	89 c2                	mov    %eax,%edx
-80107022:	c1 ea 16             	shr    $0x16,%edx
+80108030:	89 c2                	mov    %eax,%edx
+80108032:	c1 ea 16             	shr    $0x16,%edx
   if(*pde & PTE_P){
-80107025:	8b 14 91             	mov    (%ecx,%edx,4),%edx
-80107028:	f6 c2 01             	test   $0x1,%dl
-8010702b:	75 13                	jne    80107040 <loaduvm+0x60>
+80108035:	8b 14 91             	mov    (%ecx,%edx,4),%edx
+80108038:	f6 c2 01             	test   $0x1,%dl
+8010803b:	75 13                	jne    80108050 <loaduvm+0x60>
       panic("loaduvm: address should exist");
-8010702d:	83 ec 0c             	sub    $0xc,%esp
-80107030:	68 37 7f 10 80       	push   $0x80107f37
-80107035:	e8 46 93 ff ff       	call   80100380 <panic>
-8010703a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010803d:	83 ec 0c             	sub    $0xc,%esp
+80108040:	68 2f 8f 10 80       	push   $0x80108f2f
+80108045:	e8 36 83 ff ff       	call   80100380 <panic>
+8010804a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80107040:	c1 e8 0a             	shr    $0xa,%eax
+80108050:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107043:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80108053:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80107049:	25 fc 0f 00 00       	and    $0xffc,%eax
-8010704e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80108059:	25 fc 0f 00 00       	and    $0xffc,%eax
+8010805e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80107055:	85 c0                	test   %eax,%eax
-80107057:	74 d4                	je     8010702d <loaduvm+0x4d>
+80108065:	85 c0                	test   %eax,%eax
+80108067:	74 d4                	je     8010803d <loaduvm+0x4d>
     pa = PTE_ADDR(*pte);
-80107059:	8b 00                	mov    (%eax),%eax
+80108069:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-8010705b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010806b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-8010705e:	bf 00 10 00 00       	mov    $0x1000,%edi
+8010806e:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80107063:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108073:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80107068:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-8010706e:	0f 46 fb             	cmovbe %ebx,%edi
+80108078:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+8010807e:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80107071:	29 d9                	sub    %ebx,%ecx
-80107073:	05 00 00 00 80       	add    $0x80000000,%eax
-80107078:	57                   	push   %edi
-80107079:	51                   	push   %ecx
-8010707a:	50                   	push   %eax
-8010707b:	ff 75 10             	push   0x10(%ebp)
-8010707e:	e8 0d aa ff ff       	call   80101a90 <readi>
-80107083:	83 c4 10             	add    $0x10,%esp
-80107086:	39 f8                	cmp    %edi,%eax
-80107088:	75 1e                	jne    801070a8 <loaduvm+0xc8>
+80108081:	29 d9                	sub    %ebx,%ecx
+80108083:	05 00 00 00 80       	add    $0x80000000,%eax
+80108088:	57                   	push   %edi
+80108089:	51                   	push   %ecx
+8010808a:	50                   	push   %eax
+8010808b:	ff 75 10             	push   0x10(%ebp)
+8010808e:	e8 fd 99 ff ff       	call   80101a90 <readi>
+80108093:	83 c4 10             	add    $0x10,%esp
+80108096:	39 f8                	cmp    %edi,%eax
+80108098:	75 1e                	jne    801080b8 <loaduvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-8010708a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80107090:	89 f0                	mov    %esi,%eax
-80107092:	29 d8                	sub    %ebx,%eax
-80107094:	39 c6                	cmp    %eax,%esi
-80107096:	77 80                	ja     80107018 <loaduvm+0x38>
+8010809a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+801080a0:	89 f0                	mov    %esi,%eax
+801080a2:	29 d8                	sub    %ebx,%eax
+801080a4:	39 c6                	cmp    %eax,%esi
+801080a6:	77 80                	ja     80108028 <loaduvm+0x38>
 }
-80107098:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801080a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-8010709b:	31 c0                	xor    %eax,%eax
+801080ab:	31 c0                	xor    %eax,%eax
 }
-8010709d:	5b                   	pop    %ebx
-8010709e:	5e                   	pop    %esi
-8010709f:	5f                   	pop    %edi
-801070a0:	5d                   	pop    %ebp
-801070a1:	c3                   	ret    
-801070a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801070a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801080ad:	5b                   	pop    %ebx
+801080ae:	5e                   	pop    %esi
+801080af:	5f                   	pop    %edi
+801080b0:	5d                   	pop    %ebp
+801080b1:	c3                   	ret    
+801080b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801080b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801070ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801080bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801070b0:	5b                   	pop    %ebx
-801070b1:	5e                   	pop    %esi
-801070b2:	5f                   	pop    %edi
-801070b3:	5d                   	pop    %ebp
-801070b4:	c3                   	ret    
+801080c0:	5b                   	pop    %ebx
+801080c1:	5e                   	pop    %esi
+801080c2:	5f                   	pop    %edi
+801080c3:	5d                   	pop    %ebp
+801080c4:	c3                   	ret    
     panic("loaduvm: addr must be page aligned");
-801070b5:	83 ec 0c             	sub    $0xc,%esp
-801070b8:	68 d8 7f 10 80       	push   $0x80107fd8
-801070bd:	e8 be 92 ff ff       	call   80100380 <panic>
-801070c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801070c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801070d0 <allocuvm>:
-{
-801070d0:	55                   	push   %ebp
-801070d1:	89 e5                	mov    %esp,%ebp
-801070d3:	57                   	push   %edi
-801070d4:	56                   	push   %esi
-801070d5:	53                   	push   %ebx
-801070d6:	83 ec 1c             	sub    $0x1c,%esp
+801080c5:	83 ec 0c             	sub    $0xc,%esp
+801080c8:	68 d0 8f 10 80       	push   $0x80108fd0
+801080cd:	e8 ae 82 ff ff       	call   80100380 <panic>
+801080d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801080d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801080e0 <allocuvm>:
+{
+801080e0:	55                   	push   %ebp
+801080e1:	89 e5                	mov    %esp,%ebp
+801080e3:	57                   	push   %edi
+801080e4:	56                   	push   %esi
+801080e5:	53                   	push   %ebx
+801080e6:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-801070d9:	8b 45 10             	mov    0x10(%ebp),%eax
+801080e9:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-801070dc:	8b 7d 08             	mov    0x8(%ebp),%edi
+801080ec:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-801070df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801070e2:	85 c0                	test   %eax,%eax
-801070e4:	0f 88 b6 00 00 00    	js     801071a0 <allocuvm+0xd0>
+801080ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801080f2:	85 c0                	test   %eax,%eax
+801080f4:	0f 88 b6 00 00 00    	js     801081b0 <allocuvm+0xd0>
   if(newsz < oldsz)
-801070ea:	3b 45 0c             	cmp    0xc(%ebp),%eax
+801080fa:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-801070ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+801080fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-801070f0:	0f 82 9a 00 00 00    	jb     80107190 <allocuvm+0xc0>
+80108100:	0f 82 9a 00 00 00    	jb     801081a0 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-801070f6:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-801070fc:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80108106:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+8010810c:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80107102:	39 75 10             	cmp    %esi,0x10(%ebp)
-80107105:	77 44                	ja     8010714b <allocuvm+0x7b>
-80107107:	e9 87 00 00 00       	jmp    80107193 <allocuvm+0xc3>
-8010710c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80108112:	39 75 10             	cmp    %esi,0x10(%ebp)
+80108115:	77 44                	ja     8010815b <allocuvm+0x7b>
+80108117:	e9 87 00 00 00       	jmp    801081a3 <allocuvm+0xc3>
+8010811c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     memset(mem, 0, PGSIZE);
-80107110:	83 ec 04             	sub    $0x4,%esp
-80107113:	68 00 10 00 00       	push   $0x1000
-80107118:	6a 00                	push   $0x0
-8010711a:	50                   	push   %eax
-8010711b:	e8 a0 d8 ff ff       	call   801049c0 <memset>
+80108120:	83 ec 04             	sub    $0x4,%esp
+80108123:	68 00 10 00 00       	push   $0x1000
+80108128:	6a 00                	push   $0x0
+8010812a:	50                   	push   %eax
+8010812b:	e8 a0 d7 ff ff       	call   801058d0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80107120:	58                   	pop    %eax
-80107121:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80107127:	5a                   	pop    %edx
-80107128:	6a 06                	push   $0x6
-8010712a:	b9 00 10 00 00       	mov    $0x1000,%ecx
-8010712f:	89 f2                	mov    %esi,%edx
-80107131:	50                   	push   %eax
-80107132:	89 f8                	mov    %edi,%eax
-80107134:	e8 87 fb ff ff       	call   80106cc0 <mappages>
-80107139:	83 c4 10             	add    $0x10,%esp
-8010713c:	85 c0                	test   %eax,%eax
-8010713e:	78 78                	js     801071b8 <allocuvm+0xe8>
+80108130:	58                   	pop    %eax
+80108131:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80108137:	5a                   	pop    %edx
+80108138:	6a 06                	push   $0x6
+8010813a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+8010813f:	89 f2                	mov    %esi,%edx
+80108141:	50                   	push   %eax
+80108142:	89 f8                	mov    %edi,%eax
+80108144:	e8 87 fb ff ff       	call   80107cd0 <mappages>
+80108149:	83 c4 10             	add    $0x10,%esp
+8010814c:	85 c0                	test   %eax,%eax
+8010814e:	78 78                	js     801081c8 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80107140:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80107146:	39 75 10             	cmp    %esi,0x10(%ebp)
-80107149:	76 48                	jbe    80107193 <allocuvm+0xc3>
+80108150:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80108156:	39 75 10             	cmp    %esi,0x10(%ebp)
+80108159:	76 48                	jbe    801081a3 <allocuvm+0xc3>
     mem = kalloc();
-8010714b:	e8 30 b5 ff ff       	call   80102680 <kalloc>
-80107150:	89 c3                	mov    %eax,%ebx
+8010815b:	e8 20 a5 ff ff       	call   80102680 <kalloc>
+80108160:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80107152:	85 c0                	test   %eax,%eax
-80107154:	75 ba                	jne    80107110 <allocuvm+0x40>
+80108162:	85 c0                	test   %eax,%eax
+80108164:	75 ba                	jne    80108120 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80107156:	83 ec 0c             	sub    $0xc,%esp
-80107159:	68 55 7f 10 80       	push   $0x80107f55
-8010715e:	e8 3d 95 ff ff       	call   801006a0 <cprintf>
+80108166:	83 ec 0c             	sub    $0xc,%esp
+80108169:	68 4d 8f 10 80       	push   $0x80108f4d
+8010816e:	e8 2d 85 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80107163:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107166:	83 c4 10             	add    $0x10,%esp
-80107169:	39 45 10             	cmp    %eax,0x10(%ebp)
-8010716c:	74 32                	je     801071a0 <allocuvm+0xd0>
-8010716e:	8b 55 10             	mov    0x10(%ebp),%edx
-80107171:	89 c1                	mov    %eax,%ecx
-80107173:	89 f8                	mov    %edi,%eax
-80107175:	e8 96 fa ff ff       	call   80106c10 <deallocuvm.part.0>
+80108173:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108176:	83 c4 10             	add    $0x10,%esp
+80108179:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010817c:	74 32                	je     801081b0 <allocuvm+0xd0>
+8010817e:	8b 55 10             	mov    0x10(%ebp),%edx
+80108181:	89 c1                	mov    %eax,%ecx
+80108183:	89 f8                	mov    %edi,%eax
+80108185:	e8 96 fa ff ff       	call   80107c20 <deallocuvm.part.0>
       return 0;
-8010717a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010818a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80107181:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80107184:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107187:	5b                   	pop    %ebx
-80107188:	5e                   	pop    %esi
-80107189:	5f                   	pop    %edi
-8010718a:	5d                   	pop    %ebp
-8010718b:	c3                   	ret    
-8010718c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80108191:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80108194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80108197:	5b                   	pop    %ebx
+80108198:	5e                   	pop    %esi
+80108199:	5f                   	pop    %edi
+8010819a:	5d                   	pop    %ebp
+8010819b:	c3                   	ret    
+8010819c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80107190:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801081a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80107193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80107196:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107199:	5b                   	pop    %ebx
-8010719a:	5e                   	pop    %esi
-8010719b:	5f                   	pop    %edi
-8010719c:	5d                   	pop    %ebp
-8010719d:	c3                   	ret    
-8010719e:	66 90                	xchg   %ax,%ax
+801081a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801081a6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801081a9:	5b                   	pop    %ebx
+801081aa:	5e                   	pop    %esi
+801081ab:	5f                   	pop    %edi
+801081ac:	5d                   	pop    %ebp
+801081ad:	c3                   	ret    
+801081ae:	66 90                	xchg   %ax,%ax
     return 0;
-801071a0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801081b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-801071a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801071aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801071ad:	5b                   	pop    %ebx
-801071ae:	5e                   	pop    %esi
-801071af:	5f                   	pop    %edi
-801071b0:	5d                   	pop    %ebp
-801071b1:	c3                   	ret    
-801071b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801081b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801081ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801081bd:	5b                   	pop    %ebx
+801081be:	5e                   	pop    %esi
+801081bf:	5f                   	pop    %edi
+801081c0:	5d                   	pop    %ebp
+801081c1:	c3                   	ret    
+801081c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-801071b8:	83 ec 0c             	sub    $0xc,%esp
-801071bb:	68 6d 7f 10 80       	push   $0x80107f6d
-801071c0:	e8 db 94 ff ff       	call   801006a0 <cprintf>
+801081c8:	83 ec 0c             	sub    $0xc,%esp
+801081cb:	68 65 8f 10 80       	push   $0x80108f65
+801081d0:	e8 cb 84 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-801071c5:	8b 45 0c             	mov    0xc(%ebp),%eax
-801071c8:	83 c4 10             	add    $0x10,%esp
-801071cb:	39 45 10             	cmp    %eax,0x10(%ebp)
-801071ce:	74 0c                	je     801071dc <allocuvm+0x10c>
-801071d0:	8b 55 10             	mov    0x10(%ebp),%edx
-801071d3:	89 c1                	mov    %eax,%ecx
-801071d5:	89 f8                	mov    %edi,%eax
-801071d7:	e8 34 fa ff ff       	call   80106c10 <deallocuvm.part.0>
+801081d5:	8b 45 0c             	mov    0xc(%ebp),%eax
+801081d8:	83 c4 10             	add    $0x10,%esp
+801081db:	39 45 10             	cmp    %eax,0x10(%ebp)
+801081de:	74 0c                	je     801081ec <allocuvm+0x10c>
+801081e0:	8b 55 10             	mov    0x10(%ebp),%edx
+801081e3:	89 c1                	mov    %eax,%ecx
+801081e5:	89 f8                	mov    %edi,%eax
+801081e7:	e8 34 fa ff ff       	call   80107c20 <deallocuvm.part.0>
       kfree(mem);
-801071dc:	83 ec 0c             	sub    $0xc,%esp
-801071df:	53                   	push   %ebx
-801071e0:	e8 db b2 ff ff       	call   801024c0 <kfree>
+801081ec:	83 ec 0c             	sub    $0xc,%esp
+801081ef:	53                   	push   %ebx
+801081f0:	e8 cb a2 ff ff       	call   801024c0 <kfree>
       return 0;
-801071e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-801071ec:	83 c4 10             	add    $0x10,%esp
+801081f5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801081fc:	83 c4 10             	add    $0x10,%esp
 }
-801071ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801071f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801071f5:	5b                   	pop    %ebx
-801071f6:	5e                   	pop    %esi
-801071f7:	5f                   	pop    %edi
-801071f8:	5d                   	pop    %ebp
-801071f9:	c3                   	ret    
-801071fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80107200 <deallocuvm>:
-{
-80107200:	55                   	push   %ebp
-80107201:	89 e5                	mov    %esp,%ebp
-80107203:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107206:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80107209:	8b 45 08             	mov    0x8(%ebp),%eax
+801081ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80108202:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80108205:	5b                   	pop    %ebx
+80108206:	5e                   	pop    %esi
+80108207:	5f                   	pop    %edi
+80108208:	5d                   	pop    %ebp
+80108209:	c3                   	ret    
+8010820a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80108210 <deallocuvm>:
+{
+80108210:	55                   	push   %ebp
+80108211:	89 e5                	mov    %esp,%ebp
+80108213:	8b 55 0c             	mov    0xc(%ebp),%edx
+80108216:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80108219:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-8010720c:	39 d1                	cmp    %edx,%ecx
-8010720e:	73 10                	jae    80107220 <deallocuvm+0x20>
+8010821c:	39 d1                	cmp    %edx,%ecx
+8010821e:	73 10                	jae    80108230 <deallocuvm+0x20>
 }
-80107210:	5d                   	pop    %ebp
-80107211:	e9 fa f9 ff ff       	jmp    80106c10 <deallocuvm.part.0>
-80107216:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010721d:	8d 76 00             	lea    0x0(%esi),%esi
-80107220:	89 d0                	mov    %edx,%eax
-80107222:	5d                   	pop    %ebp
-80107223:	c3                   	ret    
-80107224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010722b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010722f:	90                   	nop
+80108220:	5d                   	pop    %ebp
+80108221:	e9 fa f9 ff ff       	jmp    80107c20 <deallocuvm.part.0>
+80108226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010822d:	8d 76 00             	lea    0x0(%esi),%esi
+80108230:	89 d0                	mov    %edx,%eax
+80108232:	5d                   	pop    %ebp
+80108233:	c3                   	ret    
+80108234:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010823b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010823f:	90                   	nop
 
-80107230 <freevm>:
+80108240 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80107230:	55                   	push   %ebp
-80107231:	89 e5                	mov    %esp,%ebp
-80107233:	57                   	push   %edi
-80107234:	56                   	push   %esi
-80107235:	53                   	push   %ebx
-80107236:	83 ec 0c             	sub    $0xc,%esp
-80107239:	8b 75 08             	mov    0x8(%ebp),%esi
+80108240:	55                   	push   %ebp
+80108241:	89 e5                	mov    %esp,%ebp
+80108243:	57                   	push   %edi
+80108244:	56                   	push   %esi
+80108245:	53                   	push   %ebx
+80108246:	83 ec 0c             	sub    $0xc,%esp
+80108249:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-8010723c:	85 f6                	test   %esi,%esi
-8010723e:	74 59                	je     80107299 <freevm+0x69>
+8010824c:	85 f6                	test   %esi,%esi
+8010824e:	74 59                	je     801082a9 <freevm+0x69>
   if(newsz >= oldsz)
-80107240:	31 c9                	xor    %ecx,%ecx
-80107242:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80107247:	89 f0                	mov    %esi,%eax
-80107249:	89 f3                	mov    %esi,%ebx
-8010724b:	e8 c0 f9 ff ff       	call   80106c10 <deallocuvm.part.0>
+80108250:	31 c9                	xor    %ecx,%ecx
+80108252:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80108257:	89 f0                	mov    %esi,%eax
+80108259:	89 f3                	mov    %esi,%ebx
+8010825b:	e8 c0 f9 ff ff       	call   80107c20 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80107250:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80107256:	eb 0f                	jmp    80107267 <freevm+0x37>
-80107258:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010725f:	90                   	nop
-80107260:	83 c3 04             	add    $0x4,%ebx
-80107263:	39 df                	cmp    %ebx,%edi
-80107265:	74 23                	je     8010728a <freevm+0x5a>
+80108260:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80108266:	eb 0f                	jmp    80108277 <freevm+0x37>
+80108268:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010826f:	90                   	nop
+80108270:	83 c3 04             	add    $0x4,%ebx
+80108273:	39 df                	cmp    %ebx,%edi
+80108275:	74 23                	je     8010829a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80107267:	8b 03                	mov    (%ebx),%eax
-80107269:	a8 01                	test   $0x1,%al
-8010726b:	74 f3                	je     80107260 <freevm+0x30>
+80108277:	8b 03                	mov    (%ebx),%eax
+80108279:	a8 01                	test   $0x1,%al
+8010827b:	74 f3                	je     80108270 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-8010726d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010827d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80107272:	83 ec 0c             	sub    $0xc,%esp
+80108282:	83 ec 0c             	sub    $0xc,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80107275:	83 c3 04             	add    $0x4,%ebx
+80108285:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80107278:	05 00 00 00 80       	add    $0x80000000,%eax
+80108288:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-8010727d:	50                   	push   %eax
-8010727e:	e8 3d b2 ff ff       	call   801024c0 <kfree>
-80107283:	83 c4 10             	add    $0x10,%esp
+8010828d:	50                   	push   %eax
+8010828e:	e8 2d a2 ff ff       	call   801024c0 <kfree>
+80108293:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80107286:	39 df                	cmp    %ebx,%edi
-80107288:	75 dd                	jne    80107267 <freevm+0x37>
+80108296:	39 df                	cmp    %ebx,%edi
+80108298:	75 dd                	jne    80108277 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-8010728a:	89 75 08             	mov    %esi,0x8(%ebp)
+8010829a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-8010728d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107290:	5b                   	pop    %ebx
-80107291:	5e                   	pop    %esi
-80107292:	5f                   	pop    %edi
-80107293:	5d                   	pop    %ebp
+8010829d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801082a0:	5b                   	pop    %ebx
+801082a1:	5e                   	pop    %esi
+801082a2:	5f                   	pop    %edi
+801082a3:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80107294:	e9 27 b2 ff ff       	jmp    801024c0 <kfree>
+801082a4:	e9 17 a2 ff ff       	jmp    801024c0 <kfree>
     panic("freevm: no pgdir");
-80107299:	83 ec 0c             	sub    $0xc,%esp
-8010729c:	68 89 7f 10 80       	push   $0x80107f89
-801072a1:	e8 da 90 ff ff       	call   80100380 <panic>
-801072a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801072ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801072b0 <setupkvm>:
-{
-801072b0:	55                   	push   %ebp
-801072b1:	89 e5                	mov    %esp,%ebp
-801072b3:	56                   	push   %esi
-801072b4:	53                   	push   %ebx
+801082a9:	83 ec 0c             	sub    $0xc,%esp
+801082ac:	68 81 8f 10 80       	push   $0x80108f81
+801082b1:	e8 ca 80 ff ff       	call   80100380 <panic>
+801082b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801082bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801082c0 <setupkvm>:
+{
+801082c0:	55                   	push   %ebp
+801082c1:	89 e5                	mov    %esp,%ebp
+801082c3:	56                   	push   %esi
+801082c4:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-801072b5:	e8 c6 b3 ff ff       	call   80102680 <kalloc>
-801072ba:	89 c6                	mov    %eax,%esi
-801072bc:	85 c0                	test   %eax,%eax
-801072be:	74 42                	je     80107302 <setupkvm+0x52>
+801082c5:	e8 b6 a3 ff ff       	call   80102680 <kalloc>
+801082ca:	89 c6                	mov    %eax,%esi
+801082cc:	85 c0                	test   %eax,%eax
+801082ce:	74 42                	je     80108312 <setupkvm+0x52>
   memset(pgdir, 0, PGSIZE);
-801072c0:	83 ec 04             	sub    $0x4,%esp
+801082d0:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-801072c3:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+801082d3:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
   memset(pgdir, 0, PGSIZE);
-801072c8:	68 00 10 00 00       	push   $0x1000
-801072cd:	6a 00                	push   $0x0
-801072cf:	50                   	push   %eax
-801072d0:	e8 eb d6 ff ff       	call   801049c0 <memset>
-801072d5:	83 c4 10             	add    $0x10,%esp
+801082d8:	68 00 10 00 00       	push   $0x1000
+801082dd:	6a 00                	push   $0x0
+801082df:	50                   	push   %eax
+801082e0:	e8 eb d5 ff ff       	call   801058d0 <memset>
+801082e5:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-801072d8:	8b 43 04             	mov    0x4(%ebx),%eax
+801082e8:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-801072db:	83 ec 08             	sub    $0x8,%esp
-801072de:	8b 4b 08             	mov    0x8(%ebx),%ecx
-801072e1:	ff 73 0c             	push   0xc(%ebx)
-801072e4:	8b 13                	mov    (%ebx),%edx
-801072e6:	50                   	push   %eax
-801072e7:	29 c1                	sub    %eax,%ecx
-801072e9:	89 f0                	mov    %esi,%eax
-801072eb:	e8 d0 f9 ff ff       	call   80106cc0 <mappages>
-801072f0:	83 c4 10             	add    $0x10,%esp
-801072f3:	85 c0                	test   %eax,%eax
-801072f5:	78 19                	js     80107310 <setupkvm+0x60>
+801082eb:	83 ec 08             	sub    $0x8,%esp
+801082ee:	8b 4b 08             	mov    0x8(%ebx),%ecx
+801082f1:	ff 73 0c             	push   0xc(%ebx)
+801082f4:	8b 13                	mov    (%ebx),%edx
+801082f6:	50                   	push   %eax
+801082f7:	29 c1                	sub    %eax,%ecx
+801082f9:	89 f0                	mov    %esi,%eax
+801082fb:	e8 d0 f9 ff ff       	call   80107cd0 <mappages>
+80108300:	83 c4 10             	add    $0x10,%esp
+80108303:	85 c0                	test   %eax,%eax
+80108305:	78 19                	js     80108320 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-801072f7:	83 c3 10             	add    $0x10,%ebx
-801072fa:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80107300:	75 d6                	jne    801072d8 <setupkvm+0x28>
-}
-80107302:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80107305:	89 f0                	mov    %esi,%eax
-80107307:	5b                   	pop    %ebx
-80107308:	5e                   	pop    %esi
-80107309:	5d                   	pop    %ebp
-8010730a:	c3                   	ret    
-8010730b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010730f:	90                   	nop
+80108307:	83 c3 10             	add    $0x10,%ebx
+8010830a:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+80108310:	75 d6                	jne    801082e8 <setupkvm+0x28>
+}
+80108312:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80108315:	89 f0                	mov    %esi,%eax
+80108317:	5b                   	pop    %ebx
+80108318:	5e                   	pop    %esi
+80108319:	5d                   	pop    %ebp
+8010831a:	c3                   	ret    
+8010831b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010831f:	90                   	nop
       freevm(pgdir);
-80107310:	83 ec 0c             	sub    $0xc,%esp
-80107313:	56                   	push   %esi
+80108320:	83 ec 0c             	sub    $0xc,%esp
+80108323:	56                   	push   %esi
       return 0;
-80107314:	31 f6                	xor    %esi,%esi
+80108324:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80107316:	e8 15 ff ff ff       	call   80107230 <freevm>
+80108326:	e8 15 ff ff ff       	call   80108240 <freevm>
       return 0;
-8010731b:	83 c4 10             	add    $0x10,%esp
+8010832b:	83 c4 10             	add    $0x10,%esp
 }
-8010731e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80107321:	89 f0                	mov    %esi,%eax
-80107323:	5b                   	pop    %ebx
-80107324:	5e                   	pop    %esi
-80107325:	5d                   	pop    %ebp
-80107326:	c3                   	ret    
-80107327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010732e:	66 90                	xchg   %ax,%ax
-
-80107330 <kvmalloc>:
-{
-80107330:	55                   	push   %ebp
-80107331:	89 e5                	mov    %esp,%ebp
-80107333:	83 ec 08             	sub    $0x8,%esp
+8010832e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80108331:	89 f0                	mov    %esi,%eax
+80108333:	5b                   	pop    %ebx
+80108334:	5e                   	pop    %esi
+80108335:	5d                   	pop    %ebp
+80108336:	c3                   	ret    
+80108337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010833e:	66 90                	xchg   %ax,%ax
+
+80108340 <kvmalloc>:
+{
+80108340:	55                   	push   %ebp
+80108341:	89 e5                	mov    %esp,%ebp
+80108343:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80107336:	e8 75 ff ff ff       	call   801072b0 <setupkvm>
-8010733b:	a3 c4 45 11 80       	mov    %eax,0x801145c4
+80108346:	e8 75 ff ff ff       	call   801082c0 <setupkvm>
+8010834b:	a3 e4 5b 11 80       	mov    %eax,0x80115be4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80107340:	05 00 00 00 80       	add    $0x80000000,%eax
-80107345:	0f 22 d8             	mov    %eax,%cr3
+80108350:	05 00 00 00 80       	add    $0x80000000,%eax
+80108355:	0f 22 d8             	mov    %eax,%cr3
 }
-80107348:	c9                   	leave  
-80107349:	c3                   	ret    
-8010734a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80108358:	c9                   	leave  
+80108359:	c3                   	ret    
+8010835a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80107350 <clearpteu>:
+80108360 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80107350:	55                   	push   %ebp
-80107351:	89 e5                	mov    %esp,%ebp
-80107353:	83 ec 08             	sub    $0x8,%esp
-80107356:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108360:	55                   	push   %ebp
+80108361:	89 e5                	mov    %esp,%ebp
+80108363:	83 ec 08             	sub    $0x8,%esp
+80108366:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-80107359:	8b 55 08             	mov    0x8(%ebp),%edx
+80108369:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-8010735c:	89 c1                	mov    %eax,%ecx
-8010735e:	c1 e9 16             	shr    $0x16,%ecx
+8010836c:	89 c1                	mov    %eax,%ecx
+8010836e:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-80107361:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80107364:	f6 c2 01             	test   $0x1,%dl
-80107367:	75 17                	jne    80107380 <clearpteu+0x30>
+80108371:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+80108374:	f6 c2 01             	test   $0x1,%dl
+80108377:	75 17                	jne    80108390 <clearpteu+0x30>
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
   if(pte == 0)
     panic("clearpteu");
-80107369:	83 ec 0c             	sub    $0xc,%esp
-8010736c:	68 9a 7f 10 80       	push   $0x80107f9a
-80107371:	e8 0a 90 ff ff       	call   80100380 <panic>
-80107376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010737d:	8d 76 00             	lea    0x0(%esi),%esi
+80108379:	83 ec 0c             	sub    $0xc,%esp
+8010837c:	68 92 8f 10 80       	push   $0x80108f92
+80108381:	e8 fa 7f ff ff       	call   80100380 <panic>
+80108386:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010838d:	8d 76 00             	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80107380:	c1 e8 0a             	shr    $0xa,%eax
+80108390:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107383:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80108393:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80107389:	25 fc 0f 00 00       	and    $0xffc,%eax
-8010738e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80108399:	25 fc 0f 00 00       	and    $0xffc,%eax
+8010839e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
   if(pte == 0)
-80107395:	85 c0                	test   %eax,%eax
-80107397:	74 d0                	je     80107369 <clearpteu+0x19>
+801083a5:	85 c0                	test   %eax,%eax
+801083a7:	74 d0                	je     80108379 <clearpteu+0x19>
   *pte &= ~PTE_U;
-80107399:	83 20 fb             	andl   $0xfffffffb,(%eax)
+801083a9:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-8010739c:	c9                   	leave  
-8010739d:	c3                   	ret    
-8010739e:	66 90                	xchg   %ax,%ax
+801083ac:	c9                   	leave  
+801083ad:	c3                   	ret    
+801083ae:	66 90                	xchg   %ax,%ax
 
-801073a0 <copyuvm>:
+801083b0 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-801073a0:	55                   	push   %ebp
-801073a1:	89 e5                	mov    %esp,%ebp
-801073a3:	57                   	push   %edi
-801073a4:	56                   	push   %esi
-801073a5:	53                   	push   %ebx
-801073a6:	83 ec 1c             	sub    $0x1c,%esp
+801083b0:	55                   	push   %ebp
+801083b1:	89 e5                	mov    %esp,%ebp
+801083b3:	57                   	push   %edi
+801083b4:	56                   	push   %esi
+801083b5:	53                   	push   %ebx
+801083b6:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-801073a9:	e8 02 ff ff ff       	call   801072b0 <setupkvm>
-801073ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801073b1:	85 c0                	test   %eax,%eax
-801073b3:	0f 84 bd 00 00 00    	je     80107476 <copyuvm+0xd6>
+801083b9:	e8 02 ff ff ff       	call   801082c0 <setupkvm>
+801083be:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801083c1:	85 c0                	test   %eax,%eax
+801083c3:	0f 84 bd 00 00 00    	je     80108486 <copyuvm+0xd6>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-801073b9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801073bc:	85 c9                	test   %ecx,%ecx
-801073be:	0f 84 b2 00 00 00    	je     80107476 <copyuvm+0xd6>
-801073c4:	31 f6                	xor    %esi,%esi
-801073c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801073cd:	8d 76 00             	lea    0x0(%esi),%esi
+801083c9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801083cc:	85 c9                	test   %ecx,%ecx
+801083ce:	0f 84 b2 00 00 00    	je     80108486 <copyuvm+0xd6>
+801083d4:	31 f6                	xor    %esi,%esi
+801083d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801083dd:	8d 76 00             	lea    0x0(%esi),%esi
   if(*pde & PTE_P){
-801073d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801083e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
   pde = &pgdir[PDX(va)];
-801073d3:	89 f0                	mov    %esi,%eax
-801073d5:	c1 e8 16             	shr    $0x16,%eax
+801083e3:	89 f0                	mov    %esi,%eax
+801083e5:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-801073d8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
-801073db:	a8 01                	test   $0x1,%al
-801073dd:	75 11                	jne    801073f0 <copyuvm+0x50>
+801083e8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
+801083eb:	a8 01                	test   $0x1,%al
+801083ed:	75 11                	jne    80108400 <copyuvm+0x50>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
-801073df:	83 ec 0c             	sub    $0xc,%esp
-801073e2:	68 a4 7f 10 80       	push   $0x80107fa4
-801073e7:	e8 94 8f ff ff       	call   80100380 <panic>
-801073ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801083ef:	83 ec 0c             	sub    $0xc,%esp
+801083f2:	68 9c 8f 10 80       	push   $0x80108f9c
+801083f7:	e8 84 7f ff ff       	call   80100380 <panic>
+801083fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return &pgtab[PTX(va)];
-801073f0:	89 f2                	mov    %esi,%edx
+80108400:	89 f2                	mov    %esi,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801073f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108402:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-801073f7:	c1 ea 0a             	shr    $0xa,%edx
-801073fa:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80107400:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80108407:	c1 ea 0a             	shr    $0xa,%edx
+8010840a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80108410:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80107407:	85 c0                	test   %eax,%eax
-80107409:	74 d4                	je     801073df <copyuvm+0x3f>
+80108417:	85 c0                	test   %eax,%eax
+80108419:	74 d4                	je     801083ef <copyuvm+0x3f>
     if(!(*pte & PTE_P))
-8010740b:	8b 00                	mov    (%eax),%eax
-8010740d:	a8 01                	test   $0x1,%al
-8010740f:	0f 84 9f 00 00 00    	je     801074b4 <copyuvm+0x114>
+8010841b:	8b 00                	mov    (%eax),%eax
+8010841d:	a8 01                	test   $0x1,%al
+8010841f:	0f 84 9f 00 00 00    	je     801084c4 <copyuvm+0x114>
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
-80107415:	89 c7                	mov    %eax,%edi
+80108425:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80107417:	25 ff 0f 00 00       	and    $0xfff,%eax
-8010741c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80108427:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010842c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-8010741f:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+8010842f:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80107425:	e8 56 b2 ff ff       	call   80102680 <kalloc>
-8010742a:	89 c3                	mov    %eax,%ebx
-8010742c:	85 c0                	test   %eax,%eax
-8010742e:	74 64                	je     80107494 <copyuvm+0xf4>
+80108435:	e8 46 a2 ff ff       	call   80102680 <kalloc>
+8010843a:	89 c3                	mov    %eax,%ebx
+8010843c:	85 c0                	test   %eax,%eax
+8010843e:	74 64                	je     801084a4 <copyuvm+0xf4>
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80107430:	83 ec 04             	sub    $0x4,%esp
-80107433:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80107439:	68 00 10 00 00       	push   $0x1000
-8010743e:	57                   	push   %edi
-8010743f:	50                   	push   %eax
-80107440:	e8 1b d6 ff ff       	call   80104a60 <memmove>
+80108440:	83 ec 04             	sub    $0x4,%esp
+80108443:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80108449:	68 00 10 00 00       	push   $0x1000
+8010844e:	57                   	push   %edi
+8010844f:	50                   	push   %eax
+80108450:	e8 1b d5 ff ff       	call   80105970 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80107445:	58                   	pop    %eax
-80107446:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-8010744c:	5a                   	pop    %edx
-8010744d:	ff 75 e4             	push   -0x1c(%ebp)
-80107450:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80107455:	89 f2                	mov    %esi,%edx
-80107457:	50                   	push   %eax
-80107458:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010745b:	e8 60 f8 ff ff       	call   80106cc0 <mappages>
-80107460:	83 c4 10             	add    $0x10,%esp
-80107463:	85 c0                	test   %eax,%eax
-80107465:	78 21                	js     80107488 <copyuvm+0xe8>
+80108455:	58                   	pop    %eax
+80108456:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010845c:	5a                   	pop    %edx
+8010845d:	ff 75 e4             	push   -0x1c(%ebp)
+80108460:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80108465:	89 f2                	mov    %esi,%edx
+80108467:	50                   	push   %eax
+80108468:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010846b:	e8 60 f8 ff ff       	call   80107cd0 <mappages>
+80108470:	83 c4 10             	add    $0x10,%esp
+80108473:	85 c0                	test   %eax,%eax
+80108475:	78 21                	js     80108498 <copyuvm+0xe8>
   for(i = 0; i < sz; i += PGSIZE){
-80107467:	81 c6 00 10 00 00    	add    $0x1000,%esi
-8010746d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80107470:	0f 87 5a ff ff ff    	ja     801073d0 <copyuvm+0x30>
+80108477:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010847d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80108480:	0f 87 5a ff ff ff    	ja     801083e0 <copyuvm+0x30>
   return d;
 
 bad:
   freevm(d);
   return 0;
 }
-80107476:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80107479:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010747c:	5b                   	pop    %ebx
-8010747d:	5e                   	pop    %esi
-8010747e:	5f                   	pop    %edi
-8010747f:	5d                   	pop    %ebp
-80107480:	c3                   	ret    
-80107481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80108486:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80108489:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010848c:	5b                   	pop    %ebx
+8010848d:	5e                   	pop    %esi
+8010848e:	5f                   	pop    %edi
+8010848f:	5d                   	pop    %ebp
+80108490:	c3                   	ret    
+80108491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       kfree(mem);
-80107488:	83 ec 0c             	sub    $0xc,%esp
-8010748b:	53                   	push   %ebx
-8010748c:	e8 2f b0 ff ff       	call   801024c0 <kfree>
+80108498:	83 ec 0c             	sub    $0xc,%esp
+8010849b:	53                   	push   %ebx
+8010849c:	e8 1f a0 ff ff       	call   801024c0 <kfree>
       goto bad;
-80107491:	83 c4 10             	add    $0x10,%esp
+801084a1:	83 c4 10             	add    $0x10,%esp
   freevm(d);
-80107494:	83 ec 0c             	sub    $0xc,%esp
-80107497:	ff 75 e0             	push   -0x20(%ebp)
-8010749a:	e8 91 fd ff ff       	call   80107230 <freevm>
+801084a4:	83 ec 0c             	sub    $0xc,%esp
+801084a7:	ff 75 e0             	push   -0x20(%ebp)
+801084aa:	e8 91 fd ff ff       	call   80108240 <freevm>
   return 0;
-8010749f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-801074a6:	83 c4 10             	add    $0x10,%esp
+801084af:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+801084b6:	83 c4 10             	add    $0x10,%esp
 }
-801074a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801074ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801074af:	5b                   	pop    %ebx
-801074b0:	5e                   	pop    %esi
-801074b1:	5f                   	pop    %edi
-801074b2:	5d                   	pop    %ebp
-801074b3:	c3                   	ret    
+801084b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801084bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801084bf:	5b                   	pop    %ebx
+801084c0:	5e                   	pop    %esi
+801084c1:	5f                   	pop    %edi
+801084c2:	5d                   	pop    %ebp
+801084c3:	c3                   	ret    
       panic("copyuvm: page not present");
-801074b4:	83 ec 0c             	sub    $0xc,%esp
-801074b7:	68 be 7f 10 80       	push   $0x80107fbe
-801074bc:	e8 bf 8e ff ff       	call   80100380 <panic>
-801074c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801074c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801074cf:	90                   	nop
+801084c4:	83 ec 0c             	sub    $0xc,%esp
+801084c7:	68 b6 8f 10 80       	push   $0x80108fb6
+801084cc:	e8 af 7e ff ff       	call   80100380 <panic>
+801084d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801084d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801084df:	90                   	nop
 
-801074d0 <uva2ka>:
+801084e0 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-801074d0:	55                   	push   %ebp
-801074d1:	89 e5                	mov    %esp,%ebp
-801074d3:	8b 45 0c             	mov    0xc(%ebp),%eax
+801084e0:	55                   	push   %ebp
+801084e1:	89 e5                	mov    %esp,%ebp
+801084e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-801074d6:	8b 55 08             	mov    0x8(%ebp),%edx
+801084e6:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-801074d9:	89 c1                	mov    %eax,%ecx
-801074db:	c1 e9 16             	shr    $0x16,%ecx
+801084e9:	89 c1                	mov    %eax,%ecx
+801084eb:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-801074de:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-801074e1:	f6 c2 01             	test   $0x1,%dl
-801074e4:	0f 84 00 01 00 00    	je     801075ea <uva2ka.cold>
+801084ee:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+801084f1:	f6 c2 01             	test   $0x1,%dl
+801084f4:	0f 84 00 01 00 00    	je     801085fa <uva2ka.cold>
   return &pgtab[PTX(va)];
-801074ea:	c1 e8 0c             	shr    $0xc,%eax
+801084fa:	c1 e8 0c             	shr    $0xc,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801074ed:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+801084fd:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   if((*pte & PTE_P) == 0)
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-801074f3:	5d                   	pop    %ebp
+80108503:	5d                   	pop    %ebp
   return &pgtab[PTX(va)];
-801074f4:	25 ff 03 00 00       	and    $0x3ff,%eax
+80108504:	25 ff 03 00 00       	and    $0x3ff,%eax
   if((*pte & PTE_P) == 0)
-801074f9:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
+80108509:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
   if((*pte & PTE_U) == 0)
-80107500:	89 c2                	mov    %eax,%edx
+80108510:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107502:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80108512:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107507:	83 e2 05             	and    $0x5,%edx
+80108517:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010750a:	05 00 00 00 80       	add    $0x80000000,%eax
-8010750f:	83 fa 05             	cmp    $0x5,%edx
-80107512:	ba 00 00 00 00       	mov    $0x0,%edx
-80107517:	0f 45 c2             	cmovne %edx,%eax
-}
-8010751a:	c3                   	ret    
-8010751b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010751f:	90                   	nop
+8010851a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010851f:	83 fa 05             	cmp    $0x5,%edx
+80108522:	ba 00 00 00 00       	mov    $0x0,%edx
+80108527:	0f 45 c2             	cmovne %edx,%eax
+}
+8010852a:	c3                   	ret    
+8010852b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010852f:	90                   	nop
 
-80107520 <copyout>:
+80108530 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107520:	55                   	push   %ebp
-80107521:	89 e5                	mov    %esp,%ebp
-80107523:	57                   	push   %edi
-80107524:	56                   	push   %esi
-80107525:	53                   	push   %ebx
-80107526:	83 ec 0c             	sub    $0xc,%esp
-80107529:	8b 75 14             	mov    0x14(%ebp),%esi
-8010752c:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010752f:	8b 55 10             	mov    0x10(%ebp),%edx
+80108530:	55                   	push   %ebp
+80108531:	89 e5                	mov    %esp,%ebp
+80108533:	57                   	push   %edi
+80108534:	56                   	push   %esi
+80108535:	53                   	push   %ebx
+80108536:	83 ec 0c             	sub    $0xc,%esp
+80108539:	8b 75 14             	mov    0x14(%ebp),%esi
+8010853c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010853f:	8b 55 10             	mov    0x10(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107532:	85 f6                	test   %esi,%esi
-80107534:	75 51                	jne    80107587 <copyout+0x67>
-80107536:	e9 a5 00 00 00       	jmp    801075e0 <copyout+0xc0>
-8010753b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010753f:	90                   	nop
+80108542:	85 f6                	test   %esi,%esi
+80108544:	75 51                	jne    80108597 <copyout+0x67>
+80108546:	e9 a5 00 00 00       	jmp    801085f0 <copyout+0xc0>
+8010854b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010854f:	90                   	nop
   return (char*)P2V(PTE_ADDR(*pte));
-80107540:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-80107546:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
+80108550:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80108556:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
-8010754c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
-80107552:	74 75                	je     801075c9 <copyout+0xa9>
+8010855c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
+80108562:	74 75                	je     801085d9 <copyout+0xa9>
       return -1;
     n = PGSIZE - (va - va0);
-80107554:	89 fb                	mov    %edi,%ebx
+80108564:	89 fb                	mov    %edi,%ebx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107556:	89 55 10             	mov    %edx,0x10(%ebp)
+80108566:	89 55 10             	mov    %edx,0x10(%ebp)
     n = PGSIZE - (va - va0);
-80107559:	29 c3                	sub    %eax,%ebx
-8010755b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80107561:	39 f3                	cmp    %esi,%ebx
-80107563:	0f 47 de             	cmova  %esi,%ebx
+80108569:	29 c3                	sub    %eax,%ebx
+8010856b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80108571:	39 f3                	cmp    %esi,%ebx
+80108573:	0f 47 de             	cmova  %esi,%ebx
     memmove(pa0 + (va - va0), buf, n);
-80107566:	29 f8                	sub    %edi,%eax
-80107568:	83 ec 04             	sub    $0x4,%esp
-8010756b:	01 c1                	add    %eax,%ecx
-8010756d:	53                   	push   %ebx
-8010756e:	52                   	push   %edx
-8010756f:	51                   	push   %ecx
-80107570:	e8 eb d4 ff ff       	call   80104a60 <memmove>
+80108576:	29 f8                	sub    %edi,%eax
+80108578:	83 ec 04             	sub    $0x4,%esp
+8010857b:	01 c1                	add    %eax,%ecx
+8010857d:	53                   	push   %ebx
+8010857e:	52                   	push   %edx
+8010857f:	51                   	push   %ecx
+80108580:	e8 eb d3 ff ff       	call   80105970 <memmove>
     len -= n;
     buf += n;
-80107575:	8b 55 10             	mov    0x10(%ebp),%edx
+80108585:	8b 55 10             	mov    0x10(%ebp),%edx
     va = va0 + PGSIZE;
-80107578:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
+80108588:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
   while(len > 0){
-8010757e:	83 c4 10             	add    $0x10,%esp
+8010858e:	83 c4 10             	add    $0x10,%esp
     buf += n;
-80107581:	01 da                	add    %ebx,%edx
+80108591:	01 da                	add    %ebx,%edx
   while(len > 0){
-80107583:	29 de                	sub    %ebx,%esi
-80107585:	74 59                	je     801075e0 <copyout+0xc0>
+80108593:	29 de                	sub    %ebx,%esi
+80108595:	74 59                	je     801085f0 <copyout+0xc0>
   if(*pde & PTE_P){
-80107587:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80108597:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pde = &pgdir[PDX(va)];
-8010758a:	89 c1                	mov    %eax,%ecx
+8010859a:	89 c1                	mov    %eax,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-8010758c:	89 c7                	mov    %eax,%edi
+8010859c:	89 c7                	mov    %eax,%edi
   pde = &pgdir[PDX(va)];
-8010758e:	c1 e9 16             	shr    $0x16,%ecx
+8010859e:	c1 e9 16             	shr    $0x16,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-80107591:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+801085a1:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
   if(*pde & PTE_P){
-80107597:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
-8010759a:	f6 c1 01             	test   $0x1,%cl
-8010759d:	0f 84 4e 00 00 00    	je     801075f1 <copyout.cold>
+801085a7:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
+801085aa:	f6 c1 01             	test   $0x1,%cl
+801085ad:	0f 84 4e 00 00 00    	je     80108601 <copyout.cold>
   return &pgtab[PTX(va)];
-801075a3:	89 fb                	mov    %edi,%ebx
+801085b3:	89 fb                	mov    %edi,%ebx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801075a5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+801085b5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-801075ab:	c1 eb 0c             	shr    $0xc,%ebx
-801075ae:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
+801085bb:	c1 eb 0c             	shr    $0xc,%ebx
+801085be:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   if((*pte & PTE_P) == 0)
-801075b4:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
+801085c4:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
   if((*pte & PTE_U) == 0)
-801075bb:	89 d9                	mov    %ebx,%ecx
-801075bd:	83 e1 05             	and    $0x5,%ecx
-801075c0:	83 f9 05             	cmp    $0x5,%ecx
-801075c3:	0f 84 77 ff ff ff    	je     80107540 <copyout+0x20>
+801085cb:	89 d9                	mov    %ebx,%ecx
+801085cd:	83 e1 05             	and    $0x5,%ecx
+801085d0:	83 f9 05             	cmp    $0x5,%ecx
+801085d3:	0f 84 77 ff ff ff    	je     80108550 <copyout+0x20>
   }
   return 0;
 }
-801075c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801085d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801075cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801085dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801075d1:	5b                   	pop    %ebx
-801075d2:	5e                   	pop    %esi
-801075d3:	5f                   	pop    %edi
-801075d4:	5d                   	pop    %ebp
-801075d5:	c3                   	ret    
-801075d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801075dd:	8d 76 00             	lea    0x0(%esi),%esi
-801075e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801085e1:	5b                   	pop    %ebx
+801085e2:	5e                   	pop    %esi
+801085e3:	5f                   	pop    %edi
+801085e4:	5d                   	pop    %ebp
+801085e5:	c3                   	ret    
+801085e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801085ed:	8d 76 00             	lea    0x0(%esi),%esi
+801085f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801075e3:	31 c0                	xor    %eax,%eax
+801085f3:	31 c0                	xor    %eax,%eax
 }
-801075e5:	5b                   	pop    %ebx
-801075e6:	5e                   	pop    %esi
-801075e7:	5f                   	pop    %edi
-801075e8:	5d                   	pop    %ebp
-801075e9:	c3                   	ret    
+801085f5:	5b                   	pop    %ebx
+801085f6:	5e                   	pop    %esi
+801085f7:	5f                   	pop    %edi
+801085f8:	5d                   	pop    %ebp
+801085f9:	c3                   	ret    
 
-801075ea <uva2ka.cold>:
+801085fa <uva2ka.cold>:
   if((*pte & PTE_P) == 0)
-801075ea:	a1 00 00 00 00       	mov    0x0,%eax
-801075ef:	0f 0b                	ud2    
+801085fa:	a1 00 00 00 00       	mov    0x0,%eax
+801085ff:	0f 0b                	ud2    
 
-801075f1 <copyout.cold>:
-801075f1:	a1 00 00 00 00       	mov    0x0,%eax
-801075f6:	0f 0b                	ud2    
+80108601 <copyout.cold>:
+80108601:	a1 00 00 00 00       	mov    0x0,%eax
+80108606:	0f 0b                	ud2    
diff -ruN xv6-public/kernel.sym xv6-public-with-hybrid/kernel.sym
--- xv6-public/kernel.sym	2022-09-06 09:47:05.949369000 +0530
+++ xv6-public-with-hybrid/kernel.sym	2022-10-07 18:50:12.056918522 +0530
@@ -1,10 +1,10 @@
 00000000 bio.c
 00000000 console.c
-8010ef20 cons
-8010ef58 panicked
+8010ff20 cons
+8010ff58 panicked
 80100400 consputc.part.0
 80100600 printint
-80107670 digits.0
+80108690 digits.0
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -15,19 +15,19 @@
 80101d90 namex
 00000000 ide.c
 801020e0 idestart
-80111600 idelock
-801115e0 havedisk1
-801115e4 idequeue
+80112600 idelock
+801125e0 havedisk1
+801125e4 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8011167c shift.1
-801079a0 shiftcode
-801078a0 togglecode
-80107880 charcode.0
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
+8011267c shift.1
+801089c0 shiftcode
+801088c0 togglecode
+801088a0 charcode.0
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
 00000000 lapic.c
 00000000 log.c
 80102bc0 install_trans
@@ -40,472 +40,505 @@
 00000000 picirq.c
 00000000 pipe.c
 00000000 proc.c
-801037b0 wakeup1
-801037f0 allocproc
-8010a000 first.1
-80113d54 initproc
-80107c5c states.0
+801037b0 allocproc
+8010b000 first.1
+80103900 insertIntoPQ.part.0
+80103980 insertIntoPQ2.part.0
+80103a00 wakeup1
+80115374 initproc
+80108c80 states.0
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80107ce0 syscalls
+80108d00 syscalls
 00000000 sysfile.c
-80104e30 create
+80105d40 create
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80106010 uartgetc
-801145c0 uart
+80107020 uartgetc
+80115be0 uart
 00000000 vm.c
-80106c10 deallocuvm.part.0
-80106cc0 mappages
-8010a420 kmap
-801075ea uva2ka.cold
-801075f1 copyout.cold
+80107c20 deallocuvm.part.0
+80107cd0 mappages
+8010b420 kmap
+801085fa uva2ka.cold
+80108601 copyout.cold
+801040f0 changeKey2
 80100280 consoleread
-80106b5f vector242
-801065b6 vector119
+80107b6f vector242
+801075c6 vector119
 8010000c entry
-80106496 vector87
-8010648d vector86
-80104b80 safestrcpy
-80105150 sys_close
-80106bcb vector251
-801064ba vector91
-801062b0 vector33
-8010679f vector162
-80104000 yield
-801116a0 log
-80111640 kmem
-80106a03 vector213
-80106553 vector108
-80106040 uartinit
-8010630a vector43
+801074a6 vector87
+8010749d vector86
+80105a90 safestrcpy
+80106060 sys_close
+80107bdb vector251
+801074ca vector91
+801072c0 vector33
+801077af vector162
+80104b10 yield
+801126a0 log
+80112640 kmem
+80107a13 vector213
+80107563 vector108
+80107050 uartinit
+8010731a vector43
 80102910 lapiceoi
-801067c3 vector165
-801068b3 vector185
+801077d3 vector165
+801078c3 vector185
 801023d0 ioapicinit
-80106592 vector115
+801075a2 vector115
 80101020 fileread
-801065d1 vector122
-80105a70 sys_sbrk
-80111780 ioapicid
-80104500 thread_exit
-80106757 vector156
-80106b83 vector245
-80111634 ioapic
-801068e3 vector189
-801061d4 vector7
-801063ac vector61
-8010625f vector24
-8010656e vector111
-80106967 vector200
-801063e2 vector67
-8010667f vector138
-80106421 vector74
-80103d10 sched
-80104a60 memmove
-80106388 vector57
-80104dc0 syscall
-80106a0f vector214
-80106502 vector99
-80103990 cpuid
+801075e1 vector122
+80106980 sys_sbrk
+80112780 ioapicid
+80105170 thread_exit
+80107767 vector156
+80107b93 vector245
+80112634 ioapic
+8010b008 quant
+801078f3 vector189
+801071e4 vector7
+801073bc vector61
+8010726f vector24
+8010757e vector111
+80107977 vector200
+801073f2 vector67
+80103c20 insertIntoPQ2
+80106b30 sys_getMaxPid
+8010768f vector138
+80107431 vector74
+80104830 sched
+80105970 memmove
+80107398 vector57
+80105cd0 syscall
+80107a1f vector214
+80107512 vector99
+80104290 cpuid
 80101b90 writei
-801066a3 vector141
-801059f0 sys_fork
-8010a520 bcache
-80106817 vector172
-80106b53 vector241
-80104750 getcallerpcs
-80105690 sys_mkdir
-80106be3 vector253
-801061b0 vector3
-801061a7 vector2
+801076b3 vector141
+80106900 sys_fork
+8010b520 bcache
+80107827 vector172
+80107b63 vector241
+80105660 getcallerpcs
+801065a0 sys_mkdir
+80107bf3 vector253
+801071c0 vector3
+801071b7 vector2
 80101cc0 namecmp
-80106aab vector227
-801069df vector210
-80104d40 argstr
-80106a87 vector224
-801062f8 vector41
+80107abb vector227
+801079ef vector210
+80105c50 argstr
+80107a97 vector224
+80107308 vector41
 801006a0 cprintf
 80100ea0 filedup
 801020a0 namei
-80106244 vector21
+80107254 vector21
 80100040 binit
-80106853 vector177
-801065ad vector118
-801063fd vector70
-801063f4 vector69
-80106b23 vector237
-801063c7 vector64
-8010627a vector27
-80106637 vector132
-801068bf vector186
-80105050 sys_read
-80106a33 vector217
-80104bf0 fetchint
-801072b0 setupkvm
-80104ac0 memcpy
-80107230 freevm
-8010619e vector1
-8010685f vector178
-801062dd vector38
+80107863 vector177
+801075bd vector118
+8010740d vector70
+80107404 vector69
+80107b33 vector237
+801073d7 vector64
+8010728a vector27
+80107647 vector132
+801078cf vector186
+80105f60 sys_read
+80107a43 vector217
+80105b00 fetchint
+801082c0 setupkvm
+801059d0 memcpy
+80108240 freevm
+801071ae vector1
+8010786f vector178
+801072ed vector38
 801024c0 kfree
-80106b2f vector238
-80103930 mycpu
+80107b3f vector238
+80104230 mycpu
 801018b0 iput
-80106643 vector133
-80106418 vector73
-801066c7 vector144
-80106bef vector254
+80107653 vector133
+80107428 vector73
+801076d7 vector144
+80107bff vector254
 80101520 readsb
-8010a004 nextpid
-80106514 vector101
-801069eb vector211
+8010b004 nextpid
+80107524 vector101
+801079fb vector211
 80103210 mpinit
-8010682f vector174
-80106b6b vector243
+8010783f vector174
+80107b7b vector243
 80100e10 fileinit
-80104730 initlock
-80106607 vector128
-80107520 copyout
-80106460 vector81
-80104050 sleep
+80106b40 sys_set_burst_time
+80105640 initlock
+80107617 vector128
+80108530 copyout
+80107470 vector81
+80104ca0 sleep
 80102930 microdelay
-80106202 vector13
-80106352 vector51
-80106219 vector16
-8010ee80 input
-80106b47 vector240
-8010636d vector54
-80106232 vector19
-801064c3 vector92
-80106b77 vector244
+80107212 vector13
+80107362 vector51
+80107229 vector16
+8010fe80 input
+80107b57 vector240
+8010737d vector54
+80107242 vector19
+801074d3 vector92
+80107b87 vector244
+80103b30 isFull
 80101a60 stati
-80106697 vector140
-80105a20 sys_kill
-8010631c vector45
-8010644e vector79
+801076a7 vector140
+80106930 sys_kill
+8010732c vector45
+8010745e vector79
 80103530 pipeclose
-80106ac3 vector229
-8010676f vector158
-801051b0 sys_fstat
+80107ad3 vector229
+8010777f vector158
+801060c0 sys_fstat
 80100590 consolewrite
-801062e6 vector39
-801067e7 vector168
-80105ba0 sys_thread_create
+801072f6 vector39
+801077f7 vector168
+80106ab0 sys_thread_create
 80102dd0 end_op
-801062c2 vector35
-80106580 vector113
+801072d2 vector35
+80107590 vector113
 80102560 freerange
-801065ec vector125
-801070d0 allocuvm
-80105cbf trapret
-80106a27 vector216
-801063be vector63
-80106271 vector26
-80106913 vector193
+801075fc vector125
+801080e0 allocuvm
+80105410 getCurrentInfoAssist
+80106cad trapret
+80107a37 vector216
+80104bf0 new_yield
+801073ce vector63
+80107281 vector26
+80107923 vector193
 801027f0 lapicinit
-80106937 vector196
-801069d3 vector209
-801061b9 vector4
-801067ff vector170
-801145d0 stack
-80106667 vector136
-801061ed vector10
-801069af vector206
+80107947 vector196
+801079e3 vector209
+801071c9 vector4
+8010780f vector170
+80115bf0 stack
+80112f00 priorityQ
+80107677 vector136
+801071fd vector10
+801079bf vector206
 80101860 iunlock
-80105ac0 sys_sleep
-80106bfb vector255
-80106883 vector181
-8010639a vector59
-80106484 vector85
-8010647b vector84
-8010689b vector183
-8010677b vector159
-801069f7 vector212
-80105220 sys_link
-8010632e vector47
-80106ab7 vector228
-80106301 vector42
-80106589 vector114
-801074d0 uva2ka
-8010683b vector175
-801066bb vector143
+80103d60 heapify2
+801069d0 sys_sleep
+80107c0b vector255
+80107893 vector181
+801073aa vector59
+80107494 vector85
+8010748b vector84
+801078ab vector183
+8010778b vector159
+80103e50 extractMin
+80107a07 vector212
+80106130 sys_link
+8010733e vector47
+80107ac7 vector228
+80107311 vector42
+80107599 vector114
+801084e0 uva2ka
+8010784b vector175
+801076cb vector143
 80100e30 filealloc
-80104110 wakeup
-8010661f vector130
-80106b8f vector246
-801061e4 vector9
-801066af vector142
-8010650b vector100
-80106973 vector201
-80107350 clearpteu
-801039b0 myproc
-80105cd0 tvinit
-801063a3 vector60
-80106256 vector23
+80104d60 wakeup
+80105340 get_burst_timeAssist
+8010762f vector130
+80107b9f vector246
+801071f4 vector9
+801076bf vector142
+8010751b vector100
+80107983 vector201
+80108360 clearpteu
+801042b0 myproc
+80106cc0 tvinit
+80106b60 sys_get_burst_time
+801073b3 vector60
+80107266 vector23
 80101750 idup
-80106b17 vector236
+80107b27 vector236
 801027d0 kbdintr
-80105550 sys_open
-80106adb vector231
-801063d9 vector66
-8010628c vector29
+80106460 sys_open
+80107aeb vector231
+801073e9 vector66
+8010729c vector29
 80101a90 readi
-8010665b vector135
+8010766b vector135
 80100880 consoleintr
-80104170 kill
-8010643c vector77
+80104d90 kill
+8010744c vector77
 80101610 ialloc
-80106877 vector180
-801145c4 kpgdir
-801069c7 vector208
+80107887 vector180
+80115be4 kpgdir
+801079d7 vector208
 801029d0 cmostime
-80106180 uartintr
-801064f9 vector98
-801064f0 vector97
-80106847 vector176
-8010691f vector194
-801062a7 vector32
-801155d0 end
-8010695b vector199
-8010662b vector131
-80106bd7 vector252
+80107190 uartintr
+80107509 vector98
+80107500 vector97
+80107857 vector176
+80112dc0 priorityQ2
+8010792f vector194
+801072b7 vector32
+80106b70 sys_getProcInfo
+80116bf0 end
+8010796b vector199
+8010763b vector131
+80105300 set_burst_timeAssist
+80107be7 vector252
 801010b0 filewrite
-80106195 vector0
-80104c80 argint
+801071a5 vector0
+80105b90 argint
 80100ab0 exec
-801066d3 vector145
-801050d0 sys_write
-801048a0 release
-80104c30 fetchstr
-8010654a vector107
-801062ef vector40
-80103ed0 wait
-8010651d vector102
-80109000 entrypgdir
+801076e3 vector145
+80105fe0 sys_write
+801057b0 release
+80105b40 fetchstr
+8010755a vector107
+80112d20 defaultParent
+801072ff vector40
+801049e0 wait
+8010752d vector102
+8010a000 entrypgdir
 0010000c _start
-8010637f vector56
-801063eb vector68
-801061cb vector6
-8010a48c _binary_initcode_end
+8010738f vector56
+801073fb vector68
+801071db vector6
+8010b48c _binary_initcode_end
 80100000 multiboot_header
-80106613 vector129
-80103c70 scheduler
+80107623 vector129
+80104660 scheduler
 80101ce0 dirlookup
-80106943 vector197
+80107953 vector197
 80100ef0 fileclose
 80102d60 begin_op
-80106727 vector152
-80107330 kvmalloc
-80106acf vector230
-80104ad0 strncmp
-801062d4 vector37
-801069a3 vector205
-80106793 vector161
-80113d80 tickslock
+80107737 vector152
+80108340 kvmalloc
+80107adf vector230
+801059e0 strncmp
+801072e4 vector37
+801079b3 vector205
+801077a3 vector161
+80103f20 extractMin2
+801153a0 tickslock
 801035d0 pipewrite
-80104b20 strncpy
-80106406 vector71
-801073a0 copyuvm
-8010ef60 ftable
-80106787 vector160
-80104cd0 argptr
-80106a1b vector215
-80106763 vector157
-80104fd0 sys_dup
-80106577 vector112
+80105a30 strncpy
+80107416 vector71
+801083b0 copyuvm
+8010ff60 ftable
+80107797 vector160
+80105be0 argptr
+80107a2b vector215
+80106c40 sys_getCurrentInfo
+80107773 vector157
+80105ee0 sys_dup
+80107587 vector112
 80100380 panic
-801038c0 forkret
-8010688f vector182
-801061fb vector12
-80104a10 memcmp
+801038b0 forkret
+8010789f vector182
+8010720b vector12
+80105920 memcmp
 801026f0 kbdgetc
-8010655c vector109
-8010623b vector20
-80103b50 fork
-80106364 vector53
-80106229 vector18
+8010756c vector109
+8010724b vector20
+801044f0 fork
+80107374 vector53
+80107239 vector18
+80103ff0 changeKey
 0000008a _binary_entryother_size
-801117a0 cpus
-801046a0 releasesleep
-801064de vector95
-80104860 holding
-801115b4 sb
-80104900 acquire
-80106a9f vector226
+801127a0 cpus
+801055b0 releasesleep
+801074ee vector95
+80105770 holding
+801125b4 sb
+80105810 acquire
+80107aaf vector226
 801020c0 nameiparent
-80106340 vector49
-80106313 vector44
-80111680 lapic
-80106445 vector78
-80105ca7 alltraps
-80106823 vector173
-801065a4 vector117
-80106469 vector82
-80106a6f vector222
-801061dd vector8
-80106703 vector149
+80107350 vector49
+80107323 vector44
+80112680 lapic
+80107455 vector78
+80106c95 alltraps
+80107833 vector173
+801075b4 vector117
+80107479 vector82
+80107a7f vector222
+80106b20 sys_getNumProc
+801071ed vector8
+80107713 vector149
 801016d0 iupdate
-80108000 data
-801049c0 memset
-80106ae7 vector232
+80109000 data
+801058d0 memset
+80107af7 vector232
 80103060 main
-80106e40 switchkvm
-80106541 vector106
-80106a57 vector220
-801064b1 vector90
-801067ab vector163
-80106aff vector234
+80107e50 switchkvm
+80107551 vector106
+80107a67 vector220
+801074c1 vector90
+801077bb vector163
+80107b0f vector234
 80102f40 log_write
-80104640 acquiresleep
-80105370 sys_unlink
-801063b5 vector62
-80106268 vector25
-8010694f vector198
-801065bf vector120
-8010a48c _binary_entryother_start
+80105550 acquiresleep
+80106280 sys_unlink
+801073c5 vector62
+80107278 vector25
+8010795f vector198
+801075cf vector120
+8010b48c _binary_entryother_start
 80102610 kinit1
-80106349 vector50
-80106210 vector15
-8010671b vector151
-80106472 vector83
-801064a8 vector89
-8010649f vector88
-80105d80 trap
-80105b70 sys_uptime
-8010686b vector179
-801062b9 vector34
-80106325 vector46
-8010664f vector134
-80106a7b vector223
-80113dc0 idt
-80106a3f vector218
-80103910 pinit
-80107200 deallocuvm
-80106a93 vector225
+80107359 vector50
+80107220 vector15
+8010772b vector151
+80107482 vector83
+801074b8 vector89
+801074af vector88
+80106d70 trap
+80106a80 sys_uptime
+8010787b vector179
+801072c9 vector34
+80107335 vector46
+8010765f vector134
+80107a8b vector223
+80105370 getProcInfoHelp
+801153e0 idt
+80103b80 isFull2
+80107a4f vector218
+801041f0 pinit
+80108210 deallocuvm
+80107aa3 vector225
 801028f0 lapicid
-801068cb vector187
-80103ad0 growproc
-801046e0 holdingsleep
-80111784 ncpu
-80106295 vector30
-801039e0 userinit
+801078db vector187
+80104470 growproc
+801055f0 holdingsleep
+801052b0 getMaxPid
+80112784 ncpu
+801072a5 vector30
+801042e0 userinit
 801000d0 bread
-801065fe vector127
+8010760e vector127
 801036d0 piperead
-80113d60 ticks
-80106907 vector192
-801067cf vector166
+80115380 ticks
+80107917 vector192
+801077df vector166
 80100a60 consoleinit
-80106433 vector76
-8010642a vector75
+80107443 vector76
+8010743a vector75
 80102240 ideintr
-8010692b vector195
-8010670f vector150
-80106391 vector58
-80106ba7 vector248
-801065da vector123
-801064e7 vector96
-8010629e vector31
-8010698b vector203
-8010668b vector139
-80106733 vector153
-801067b7 vector164
-801041f0 procdump
-801065c8 vector121
-80106120 uartputc
-801061c2 vector5
-801067db vector167
-8010674b vector155
-80106bb3 vector249
+8010793b vector195
+8010771f vector150
+801073a1 vector58
+80107bb7 vector248
+801075ea vector123
+801074f7 vector96
+801072ae vector31
+8010799b vector203
+8010769b vector139
+80107743 vector153
+801077c7 vector164
+80104e60 procdump
+801075d8 vector121
+80107130 uartputc
+801071d2 vector5
+801077eb vector167
+8010775b vector155
+80105260 getNumProc
+80107bc3 vector249
 801001f0 brelse
-80106bbf vector250
-801065e3 vector124
-80106565 vector110
-80106997 vector204
+80107bcf vector250
+801075f3 vector124
+80107575 vector110
+801079a7 vector204
 80101780 ilock
-80105830 sys_exec
-80106673 vector137
-8010a460 _binary_initcode_start
-80104bdb swtch
-80106b9b vector247
-8010624d vector22
-8010697f vector202
-80106db0 seginit
+80106740 sys_exec
+80107683 vector137
+8010b460 _binary_initcode_start
+80105aeb swtch
+80107bab vector247
+8010725d vector22
+8010798f vector202
+80107dc0 seginit
 80101a10 iunlockput
-8010640f vector72
-80106376 vector55
-801065f5 vector126
-801063d0 vector65
-80106283 vector28
-8010a516 _binary_entryother_end
-801067f3 vector169
+8010741f vector72
+80107386 vector55
+80107605 vector126
+801073e0 vector65
+80107293 vector28
+8010b516 _binary_entryother_end
+80107803 vector169
+80106c90 sys_getCurrentPID
 801001b0 bwrite
-80106af3 vector233
-80105d50 idtinit
-80103dd0 exit
-80105a10 sys_wait
-80105a00 sys_exit
+80107b03 vector233
+80103c70 heapify
+80106d40 idtinit
+801048f0 exit
+80106920 sys_wait
+80106910 sys_exit
 80101fe0 dirlink
 0000002c _binary_initcode_size
-801066eb vector147
-80104600 initsleeplock
+801076fb vector147
+80105510 initsleeplock
 801021c0 ideinit
-80106fe0 loaduvm
-8010652f vector104
-8010659b vector116
-80111d20 ptable
+80107ff0 loaduvm
+8010753f vector104
+801075ab vector116
+80113040 ptable
 80102480 ioapicenable
-80104800 popcli
-8010a008 vectors
-8010635b vector52
-80106222 vector17
-801068a7 vector184
-80104bc0 strlen
-80105920 sys_pipe
+80105710 popcli
+8010b00c vectors
+8010736b vector52
+80107232 vector17
+801078b7 vector184
+80105ad0 strlen
+80103a90 isEmpty
+80106830 sys_pipe
 80101560 iinit
 80103410 picinit
-801069bb vector207
-80106f60 inituvm
-801068ef vector190
-80105bf0 sys_thread_join
-80106b3b vector239
-801064d5 vector94
-801064cc vector93
+801079cb vector207
+80107f70 inituvm
+801078ff vector190
+80106b00 sys_thread_join
+80107b4b vector239
+801074e5 vector94
+801074dc vector93
 80102cc0 initlog
-801068d7 vector188
-801042b0 thread_create
-80106337 vector48
+80103ae0 isEmpty2
+801078e7 vector188
+80104f20 thread_create
+80107347 vector48
 801022e0 iderw
-80105c00 sys_thread_exit
-80106a4b vector219
-801066f7 vector148
-80106a63 vector221
+80106b10 sys_thread_exit
+80107a5b vector219
+80107707 vector148
+80107a73 vector221
 80102680 kalloc
-8010f900 devsw
-80105a60 sys_getpid
-80105c10 sys_draw
-80106457 vector80
-8010680b vector171
-8010673f vector154
-801062cb vector36
+80110900 devsw
+80106970 sys_getpid
+80106bd0 sys_draw
+80107467 vector80
+8010781b vector171
+8010774f vector154
+801072db vector36
 80103430 pipealloc
-80106b0b vector235
-80106538 vector105
-80105780 sys_chdir
-8010f960 icache
-801066df vector146
-801068fb vector191
-80106526 vector103
-801043e0 thread_join
-801056f0 sys_mknod
+80107b1b vector235
+80107548 vector105
+80106690 sys_chdir
+80110960 icache
+801076ef vector146
+80103bd0 insertIntoPQ
+8010790b vector191
+80107536 vector103
+80105050 thread_join
+801054c0 getCurrentPIDAssist
+80106600 sys_mknod
 80102940 lapicstartap
-80106e50 switchuvm
-801047b0 pushcli
+80107e60 switchuvm
+801056c0 pushcli
 801025b0 kinit2
-801061f4 vector11
-80106209 vector14
+80107204 vector11
+80107219 vector14
 80100fd0 filestat
Binary files xv6-public/_kill and xv6-public-with-hybrid/_kill differ
diff -ruN xv6-public/kill.asm xv6-public-with-hybrid/kill.asm
--- xv6-public/kill.asm	2022-09-06 09:47:09.881673000 +0530
+++ xv6-public-with-hybrid/kill.asm	2022-10-07 18:50:00.060954486 +0530
@@ -53,9 +53,9 @@
     printf(2, "usage: kill pid...\n");
   4a:	50                   	push   %eax
   4b:	50                   	push   %eax
-  4c:	68 58 07 00 00       	push   $0x758
+  4c:	68 b8 09 00 00       	push   $0x9b8
   51:	6a 02                	push   $0x2
-  53:	e8 d8 03 00 00       	call   430 <printf>
+  53:	e8 08 04 00 00       	call   460 <printf>
     exit();
   58:	e8 56 02 00 00       	call   2b3 <exit>
   5d:	66 90                	xchg   %ax,%ax
@@ -605,572 +605,887 @@
  36a:	c3                   	ret    
 
 0000036b <draw>:
+SYSCALL(draw)
  36b:	b8 19 00 00 00       	mov    $0x19,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
- 373:	66 90                	xchg   %ax,%ax
- 375:	66 90                	xchg   %ax,%ax
- 377:	66 90                	xchg   %ax,%ax
- 379:	66 90                	xchg   %ax,%ax
- 37b:	66 90                	xchg   %ax,%ax
- 37d:	66 90                	xchg   %ax,%ax
- 37f:	90                   	nop
 
-00000380 <printint>:
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 383:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 393:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 39b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 3a3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
- 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 38c:	89 d1                	mov    %edx,%ecx
+ 3bc:	89 d1                	mov    %edx,%ecx
 {
- 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 391:	85 d2                	test   %edx,%edx
- 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
- 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 39d:	74 79                	je     418 <printint+0x98>
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
     neg = 1;
- 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3a6:	f7 d9                	neg    %ecx
+ 3d6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3a8:	31 db                	xor    %ebx,%ebx
- 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 c8                	mov    %ecx,%eax
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	89 cf                	mov    %ecx,%edi
- 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 cc 07 00 00 	movzbl 0x7cc(%edx),%edx
- 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3c3:	89 d8                	mov    %ebx,%eax
- 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 2c 0a 00 00 	movzbl 0xa2c(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
   if(neg)
- 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3d6:	85 c9                	test   %ecx,%ecx
- 3d8:	74 0c                	je     3e6 <printint+0x66>
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
     buf[i++] = '-';
- 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3df:	89 d8                	mov    %ebx,%eax
+ 40f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ed:	eb 07                	jmp    3f6 <printint+0x76>
- 3ef:	90                   	nop
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
     putc(fd, buf[i]);
- 3f0:	0f b6 13             	movzbl (%ebx),%edx
- 3f3:	83 eb 01             	sub    $0x1,%ebx
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3f6:	83 ec 04             	sub    $0x4,%esp
- 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3fc:	6a 01                	push   $0x1
- 3fe:	56                   	push   %esi
- 3ff:	57                   	push   %edi
- 400:	e8 ce fe ff ff       	call   2d3 <write>
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 9e fe ff ff       	call   2d3 <write>
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x70>
-}
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 41f:	eb 87                	jmp    3a8 <printint+0x28>
- 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42f:	90                   	nop
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
 
-00000430 <printf>:
+00000460 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 2c             	sub    $0x2c,%esp
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 469:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 46c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 43f:	0f b6 13             	movzbl (%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	74 6a                	je     4b0 <printf+0x80>
+ 46f:	0f b6 13             	movzbl (%ebx),%edx
+ 472:	84 d2                	test   %dl,%dl
+ 474:	74 6a                	je     4e0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 446:	8d 45 10             	lea    0x10(%ebp),%eax
- 449:	83 c3 01             	add    $0x1,%ebx
+ 476:	8d 45 10             	lea    0x10(%ebp),%eax
+ 479:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 47c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 44f:	31 c9                	xor    %ecx,%ecx
+ 47f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 454:	eb 36                	jmp    48c <printf+0x5c>
- 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45d:	8d 76 00             	lea    0x0(%esi),%esi
- 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 481:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 484:	eb 36                	jmp    4bc <printf+0x5c>
+ 486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+ 490:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 493:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	74 15                	je     482 <printf+0x52>
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 15                	je     4b2 <printf+0x52>
   write(fd, &c, 1);
- 46d:	83 ec 04             	sub    $0x4,%esp
- 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 473:	6a 01                	push   $0x1
- 475:	57                   	push   %edi
- 476:	56                   	push   %esi
- 477:	e8 57 fe ff ff       	call   2d3 <write>
- 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	56                   	push   %esi
+ 4a7:	e8 27 fe ff ff       	call   2d3 <write>
+ 4ac:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 47f:	83 c4 10             	add    $0x10,%esp
+ 4af:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 482:	0f b6 13             	movzbl (%ebx),%edx
- 485:	83 c3 01             	add    $0x1,%ebx
- 488:	84 d2                	test   %dl,%dl
- 48a:	74 24                	je     4b0 <printf+0x80>
+ 4b2:	0f b6 13             	movzbl (%ebx),%edx
+ 4b5:	83 c3 01             	add    $0x1,%ebx
+ 4b8:	84 d2                	test   %dl,%dl
+ 4ba:	74 24                	je     4e0 <printf+0x80>
     c = fmt[i] & 0xff;
- 48c:	0f b6 c2             	movzbl %dl,%eax
+ 4bc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 48f:	85 c9                	test   %ecx,%ecx
- 491:	74 cd                	je     460 <printf+0x30>
+ 4bf:	85 c9                	test   %ecx,%ecx
+ 4c1:	74 cd                	je     490 <printf+0x30>
       }
     } else if(state == '%'){
- 493:	83 f9 25             	cmp    $0x25,%ecx
- 496:	75 ea                	jne    482 <printf+0x52>
+ 4c3:	83 f9 25             	cmp    $0x25,%ecx
+ 4c6:	75 ea                	jne    4b2 <printf+0x52>
       if(c == 'd'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
- 4a1:	83 e8 63             	sub    $0x63,%eax
- 4a4:	83 f8 15             	cmp    $0x15,%eax
- 4a7:	77 17                	ja     4c0 <printf+0x90>
- 4a9:	ff 24 85 74 07 00 00 	jmp    *0x774(,%eax,4)
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	0f 84 07 01 00 00    	je     5d8 <printf+0x178>
+ 4d1:	83 e8 63             	sub    $0x63,%eax
+ 4d4:	83 f8 15             	cmp    $0x15,%eax
+ 4d7:	77 17                	ja     4f0 <printf+0x90>
+ 4d9:	ff 24 85 d4 09 00 00 	jmp    *0x9d4(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4b3:	5b                   	pop    %ebx
- 4b4:	5e                   	pop    %esi
- 4b5:	5f                   	pop    %edi
- 4b6:	5d                   	pop    %ebp
- 4b7:	c3                   	ret    
- 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4bf:	90                   	nop
+ 4e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e3:	5b                   	pop    %ebx
+ 4e4:	5e                   	pop    %esi
+ 4e5:	5f                   	pop    %edi
+ 4e6:	5d                   	pop    %ebp
+ 4e7:	c3                   	ret    
+ 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
   write(fd, &c, 1);
- 4c0:	83 ec 04             	sub    $0x4,%esp
- 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4c6:	6a 01                	push   $0x1
- 4c8:	57                   	push   %edi
- 4c9:	56                   	push   %esi
- 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ce:	e8 00 fe ff ff       	call   2d3 <write>
+ 4f0:	83 ec 04             	sub    $0x4,%esp
+ 4f3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4f6:	6a 01                	push   $0x1
+ 4f8:	57                   	push   %edi
+ 4f9:	56                   	push   %esi
+ 4fa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4fe:	e8 d0 fd ff ff       	call   2d3 <write>
         putc(fd, c);
- 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 503:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4d7:	83 c4 0c             	add    $0xc,%esp
- 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4dd:	6a 01                	push   $0x1
- 4df:	57                   	push   %edi
- 4e0:	56                   	push   %esi
- 4e1:	e8 ed fd ff ff       	call   2d3 <write>
+ 507:	83 c4 0c             	add    $0xc,%esp
+ 50a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 50d:	6a 01                	push   $0x1
+ 50f:	57                   	push   %edi
+ 510:	56                   	push   %esi
+ 511:	e8 bd fd ff ff       	call   2d3 <write>
         putc(fd, c);
- 4e6:	83 c4 10             	add    $0x10,%esp
+ 516:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4e9:	31 c9                	xor    %ecx,%ecx
- 4eb:	eb 95                	jmp    482 <printf+0x52>
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 519:	31 c9                	xor    %ecx,%ecx
+ 51b:	eb 95                	jmp    4b2 <printf+0x52>
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	83 ec 0c             	sub    $0xc,%esp
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4f8:	6a 00                	push   $0x0
- 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4fd:	8b 10                	mov    (%eax),%edx
- 4ff:	89 f0                	mov    %esi,%eax
- 501:	e8 7a fe ff ff       	call   380 <printint>
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 52d:	8b 10                	mov    (%eax),%edx
+ 52f:	89 f0                	mov    %esi,%eax
+ 531:	e8 7a fe ff ff       	call   3b0 <printint>
         ap++;
- 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 50a:	83 c4 10             	add    $0x10,%esp
+ 536:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 53a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 50d:	31 c9                	xor    %ecx,%ecx
- 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	31 c9                	xor    %ecx,%ecx
+ 53f:	e9 6e ff ff ff       	jmp    4b2 <printf+0x52>
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 51b:	8b 10                	mov    (%eax),%edx
+ 548:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 54b:	8b 10                	mov    (%eax),%edx
         ap++;
- 51d:	83 c0 04             	add    $0x4,%eax
- 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 54d:	83 c0 04             	add    $0x4,%eax
+ 550:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 523:	85 d2                	test   %edx,%edx
- 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+ 553:	85 d2                	test   %edx,%edx
+ 555:	0f 84 8d 00 00 00    	je     5e8 <printf+0x188>
         while(*s != 0){
- 52b:	0f b6 02             	movzbl (%edx),%eax
+ 55b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 52e:	31 c9                	xor    %ecx,%ecx
+ 55e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 530:	84 c0                	test   %al,%al
- 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
- 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 53b:	89 d3                	mov    %edx,%ebx
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 560:	84 c0                	test   %al,%al
+ 562:	0f 84 4a ff ff ff    	je     4b2 <printf+0x52>
+ 568:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 56b:	89 d3                	mov    %edx,%ebx
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 540:	83 ec 04             	sub    $0x4,%esp
+ 570:	83 ec 04             	sub    $0x4,%esp
           s++;
- 543:	83 c3 01             	add    $0x1,%ebx
- 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 573:	83 c3 01             	add    $0x1,%ebx
+ 576:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 549:	6a 01                	push   $0x1
- 54b:	57                   	push   %edi
- 54c:	56                   	push   %esi
- 54d:	e8 81 fd ff ff       	call   2d3 <write>
+ 579:	6a 01                	push   $0x1
+ 57b:	57                   	push   %edi
+ 57c:	56                   	push   %esi
+ 57d:	e8 51 fd ff ff       	call   2d3 <write>
         while(*s != 0){
- 552:	0f b6 03             	movzbl (%ebx),%eax
- 555:	83 c4 10             	add    $0x10,%esp
- 558:	84 c0                	test   %al,%al
- 55a:	75 e4                	jne    540 <printf+0x110>
+ 582:	0f b6 03             	movzbl (%ebx),%eax
+ 585:	83 c4 10             	add    $0x10,%esp
+ 588:	84 c0                	test   %al,%al
+ 58a:	75 e4                	jne    570 <printf+0x110>
       state = 0;
- 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 55f:	31 c9                	xor    %ecx,%ecx
- 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
- 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 58c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 58f:	31 c9                	xor    %ecx,%ecx
+ 591:	e9 1c ff ff ff       	jmp    4b2 <printf+0x52>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
- 57f:	90                   	nop
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	e9 7b ff ff ff       	jmp    52a <printf+0xca>
+ 5af:	90                   	nop
         putc(fd, *ap);
- 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 586:	8b 00                	mov    (%eax),%eax
+ 5b6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
- 58a:	57                   	push   %edi
- 58b:	56                   	push   %esi
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	57                   	push   %edi
+ 5bb:	56                   	push   %esi
         putc(fd, *ap);
- 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5bc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 58f:	e8 3f fd ff ff       	call   2d3 <write>
+ 5bf:	e8 0f fd ff ff       	call   2d3 <write>
         ap++;
- 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 598:	83 c4 10             	add    $0x10,%esp
+ 5c4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5c8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 59b:	31 c9                	xor    %ecx,%ecx
- 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
- 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5cb:	31 c9                	xor    %ecx,%ecx
+ 5cd:	e9 e0 fe ff ff       	jmp    4b2 <printf+0x52>
+ 5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5d8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5ab:	83 ec 04             	sub    $0x4,%esp
- 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
- 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5b7:	90                   	nop
+ 5db:	83 ec 04             	sub    $0x4,%esp
+ 5de:	e9 2a ff ff ff       	jmp    50d <printf+0xad>
+ 5e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5e7:	90                   	nop
           s = "(null)";
- 5b8:	ba 6c 07 00 00       	mov    $0x76c,%edx
+ 5e8:	ba cc 09 00 00       	mov    $0x9cc,%edx
         while(*s != 0){
- 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5c5:	89 d3                	mov    %edx,%ebx
- 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
- 5cc:	66 90                	xchg   %ax,%ax
- 5ce:	66 90                	xchg   %ax,%ax
+ 5ed:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5f0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f5:	89 d3                	mov    %edx,%ebx
+ 5f7:	e9 74 ff ff ff       	jmp    570 <printf+0x110>
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
 
-000005d0 <free>:
+00000600 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5d0:	55                   	push   %ebp
+ 600:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	a1 84 0a 00 00       	mov    0xa84,%eax
+ 601:	a1 80 0d 00 00       	mov    0xd80,%eax
 {
- 5d6:	89 e5                	mov    %esp,%ebp
- 5d8:	57                   	push   %edi
- 5d9:	56                   	push   %esi
- 5da:	53                   	push   %ebx
- 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 60e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5e8:	89 c2                	mov    %eax,%edx
- 5ea:	8b 00                	mov    (%eax),%eax
- 5ec:	39 ca                	cmp    %ecx,%edx
- 5ee:	73 30                	jae    620 <free+0x50>
- 5f0:	39 c1                	cmp    %eax,%ecx
- 5f2:	72 04                	jb     5f8 <free+0x28>
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 618:	89 c2                	mov    %eax,%edx
+ 61a:	8b 00                	mov    (%eax),%eax
+ 61c:	39 ca                	cmp    %ecx,%edx
+ 61e:	73 30                	jae    650 <free+0x50>
+ 620:	39 c1                	cmp    %eax,%ecx
+ 622:	72 04                	jb     628 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f4:	39 c2                	cmp    %eax,%edx
- 5f6:	72 f0                	jb     5e8 <free+0x18>
+ 624:	39 c2                	cmp    %eax,%edx
+ 626:	72 f0                	jb     618 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 f8                	cmp    %edi,%eax
- 600:	74 30                	je     632 <free+0x62>
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	74 30                	je     662 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 632:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 605:	8b 42 04             	mov    0x4(%edx),%eax
- 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 3a                	je     649 <free+0x79>
+ 635:	8b 42 04             	mov    0x4(%edx),%eax
+ 638:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 3a                	je     679 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 60f:	89 0a                	mov    %ecx,(%edx)
+ 63f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 641:	5b                   	pop    %ebx
   freep = p;
- 612:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 642:	89 15 80 0d 00 00    	mov    %edx,0xd80
 }
- 618:	5e                   	pop    %esi
- 619:	5f                   	pop    %edi
- 61a:	5d                   	pop    %ebp
- 61b:	c3                   	ret    
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 648:	5e                   	pop    %esi
+ 649:	5f                   	pop    %edi
+ 64a:	5d                   	pop    %ebp
+ 64b:	c3                   	ret    
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 620:	39 c2                	cmp    %eax,%edx
- 622:	72 c4                	jb     5e8 <free+0x18>
- 624:	39 c1                	cmp    %eax,%ecx
- 626:	73 c0                	jae    5e8 <free+0x18>
+ 650:	39 c2                	cmp    %eax,%edx
+ 652:	72 c4                	jb     618 <free+0x18>
+ 654:	39 c1                	cmp    %eax,%ecx
+ 656:	73 c0                	jae    618 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62e:	39 f8                	cmp    %edi,%eax
- 630:	75 d0                	jne    602 <free+0x32>
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 f8                	cmp    %edi,%eax
+ 660:	75 d0                	jne    632 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 632:	03 70 04             	add    0x4(%eax),%esi
- 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 662:	03 70 04             	add    0x4(%eax),%esi
+ 665:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 638:	8b 02                	mov    (%edx),%eax
- 63a:	8b 00                	mov    (%eax),%eax
- 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 668:	8b 02                	mov    (%edx),%eax
+ 66a:	8b 00                	mov    (%eax),%eax
+ 66c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 63f:	8b 42 04             	mov    0x4(%edx),%eax
- 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 645:	39 f1                	cmp    %esi,%ecx
- 647:	75 c6                	jne    60f <free+0x3f>
+ 66f:	8b 42 04             	mov    0x4(%edx),%eax
+ 672:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 675:	39 f1                	cmp    %esi,%ecx
+ 677:	75 c6                	jne    63f <free+0x3f>
     p->s.size += bp->s.size;
- 649:	03 43 fc             	add    -0x4(%ebx),%eax
+ 679:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 64c:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 67c:	89 15 80 0d 00 00    	mov    %edx,0xd80
     p->s.size += bp->s.size;
- 652:	89 42 04             	mov    %eax,0x4(%edx)
+ 682:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 658:	89 0a                	mov    %ecx,(%edx)
+ 685:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 688:	89 0a                	mov    %ecx,(%edx)
 }
- 65a:	5b                   	pop    %ebx
- 65b:	5e                   	pop    %esi
- 65c:	5f                   	pop    %edi
- 65d:	5d                   	pop    %ebp
- 65e:	c3                   	ret    
- 65f:	90                   	nop
+ 68a:	5b                   	pop    %ebx
+ 68b:	5e                   	pop    %esi
+ 68c:	5f                   	pop    %edi
+ 68d:	5d                   	pop    %ebp
+ 68e:	c3                   	ret    
+ 68f:	90                   	nop
 
-00000660 <malloc>:
+00000690 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 1c             	sub    $0x1c,%esp
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 669:	8b 45 08             	mov    0x8(%ebp),%eax
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 66c:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 69c:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 672:	8d 70 07             	lea    0x7(%eax),%esi
- 675:	c1 ee 03             	shr    $0x3,%esi
- 678:	83 c6 01             	add    $0x1,%esi
+ 6a2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a5:	c1 ee 03             	shr    $0x3,%esi
+ 6a8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 67b:	85 ff                	test   %edi,%edi
- 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 6ab:	85 ff                	test   %edi,%edi
+ 6ad:	0f 84 9d 00 00 00    	je     750 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 683:	8b 17                	mov    (%edi),%edx
+ 6b3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 685:	8b 4a 04             	mov    0x4(%edx),%ecx
- 688:	39 f1                	cmp    %esi,%ecx
- 68a:	73 6a                	jae    6f6 <malloc+0x96>
- 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 691:	39 de                	cmp    %ebx,%esi
- 693:	0f 43 de             	cmovae %esi,%ebx
+ 6b5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6b8:	39 f1                	cmp    %esi,%ecx
+ 6ba:	73 6a                	jae    726 <malloc+0x96>
+ 6bc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c1:	39 de                	cmp    %ebx,%esi
+ 6c3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
- 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6c6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6d0:	eb 17                	jmp    6e9 <malloc+0x59>
+ 6d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a8:	8b 02                	mov    (%edx),%eax
+ 6d8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ad:	39 f1                	cmp    %esi,%ecx
- 6af:	73 4f                	jae    700 <malloc+0xa0>
+ 6da:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dd:	39 f1                	cmp    %esi,%ecx
+ 6df:	73 4f                	jae    730 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
- 6b7:	89 c2                	mov    %eax,%edx
- 6b9:	39 d7                	cmp    %edx,%edi
- 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+ 6e1:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 6e7:	89 c2                	mov    %eax,%edx
+ 6e9:	39 d7                	cmp    %edx,%edi
+ 6eb:	75 eb                	jne    6d8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6bd:	83 ec 0c             	sub    $0xc,%esp
- 6c0:	ff 75 e4             	push   -0x1c(%ebp)
- 6c3:	e8 73 fc ff ff       	call   33b <sbrk>
+ 6ed:	83 ec 0c             	sub    $0xc,%esp
+ 6f0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6f3:	e8 43 fc ff ff       	call   33b <sbrk>
   if(p == (char*)-1)
- 6c8:	83 c4 10             	add    $0x10,%esp
- 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ce:	74 1c                	je     6ec <malloc+0x8c>
+ 6f8:	83 c4 10             	add    $0x10,%esp
+ 6fb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6fe:	74 1c                	je     71c <malloc+0x8c>
   hp->s.size = nu;
- 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 700:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6d3:	83 ec 0c             	sub    $0xc,%esp
- 6d6:	83 c0 08             	add    $0x8,%eax
- 6d9:	50                   	push   %eax
- 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+ 703:	83 ec 0c             	sub    $0xc,%esp
+ 706:	83 c0 08             	add    $0x8,%eax
+ 709:	50                   	push   %eax
+ 70a:	e8 f1 fe ff ff       	call   600 <free>
   return freep;
- 6df:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+ 70f:	8b 15 80 0d 00 00    	mov    0xd80,%edx
       if((p = morecore(nunits)) == 0)
- 6e5:	83 c4 10             	add    $0x10,%esp
- 6e8:	85 d2                	test   %edx,%edx
- 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	85 d2                	test   %edx,%edx
+ 71a:	75 bc                	jne    6d8 <malloc+0x48>
         return 0;
   }
 }
- 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6ef:	31 c0                	xor    %eax,%eax
+ 71f:	31 c0                	xor    %eax,%eax
 }
- 6f1:	5b                   	pop    %ebx
- 6f2:	5e                   	pop    %esi
- 6f3:	5f                   	pop    %edi
- 6f4:	5d                   	pop    %ebp
- 6f5:	c3                   	ret    
+ 721:	5b                   	pop    %ebx
+ 722:	5e                   	pop    %esi
+ 723:	5f                   	pop    %edi
+ 724:	5d                   	pop    %ebp
+ 725:	c3                   	ret    
     if(p->s.size >= nunits){
- 6f6:	89 d0                	mov    %edx,%eax
- 6f8:	89 fa                	mov    %edi,%edx
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 726:	89 d0                	mov    %edx,%eax
+ 728:	89 fa                	mov    %edi,%edx
+ 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 700:	39 ce                	cmp    %ecx,%esi
- 702:	74 4c                	je     750 <malloc+0xf0>
+ 730:	39 ce                	cmp    %ecx,%esi
+ 732:	74 4c                	je     780 <malloc+0xf0>
         p->s.size -= nunits;
- 704:	29 f1                	sub    %esi,%ecx
- 706:	89 48 04             	mov    %ecx,0x4(%eax)
+ 734:	29 f1                	sub    %esi,%ecx
+ 736:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 739:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 70c:	89 70 04             	mov    %esi,0x4(%eax)
+ 73c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 70f:	89 15 84 0a 00 00    	mov    %edx,0xa84
+ 73f:	89 15 80 0d 00 00    	mov    %edx,0xd80
 }
- 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 745:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 718:	83 c0 08             	add    $0x8,%eax
+ 748:	83 c0 08             	add    $0x8,%eax
 }
- 71b:	5b                   	pop    %ebx
- 71c:	5e                   	pop    %esi
- 71d:	5f                   	pop    %edi
- 71e:	5d                   	pop    %ebp
- 71f:	c3                   	ret    
+ 74b:	5b                   	pop    %ebx
+ 74c:	5e                   	pop    %esi
+ 74d:	5f                   	pop    %edi
+ 74e:	5d                   	pop    %ebp
+ 74f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
- 727:	0a 00 00 
+ 750:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 757:	0d 00 00 
     base.s.size = 0;
- 72a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+ 75a:	bf 84 0d 00 00       	mov    $0xd84,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
- 736:	0a 00 00 
+ 75f:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 766:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 fa                	mov    %edi,%edx
+ 769:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 73b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
- 742:	00 00 00 
+ 76b:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
+ 772:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 775:	e9 42 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 08                	mov    (%eax),%ecx
- 752:	89 0a                	mov    %ecx,(%edx)
- 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b9                	jmp    73f <malloc+0xaf>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 790:	55                   	push   %ebp
+ 791:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 796:	89 e5                	mov    %esp,%ebp
+ 798:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 79b:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    for (mti=1; mti<N; mti++)
+ 7a1:	eb 08                	jmp    7ab <sgenrand+0x1b>
+ 7a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7a7:	90                   	nop
+ 7a8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7ab:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7b1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7b3:	3d 5c 17 00 00       	cmp    $0x175c,%eax
+ 7b8:	75 ee                	jne    7a8 <sgenrand+0x18>
+ 7ba:	c7 05 74 0d 00 00 70 	movl   $0x270,0xd74
+ 7c1:	02 00 00 
+}
+ 7c4:	5d                   	pop    %ebp
+ 7c5:	c3                   	ret    
+ 7c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007d0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7d0:	a1 74 0d 00 00       	mov    0xd74,%eax
+ 7d5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7da:	7f 3d                	jg     819 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7dc:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 7e3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7e6:	89 15 74 0d 00 00    	mov    %edx,0xd74
+    y ^= TEMPERING_SHIFT_U(y);
+ 7ec:	89 ca                	mov    %ecx,%edx
+ 7ee:	c1 ea 0b             	shr    $0xb,%edx
+ 7f1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7f3:	89 d0                	mov    %edx,%eax
+ 7f5:	c1 e0 07             	shl    $0x7,%eax
+ 7f8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7fd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7ff:	89 c2                	mov    %eax,%edx
+ 801:	c1 e2 0f             	shl    $0xf,%edx
+ 804:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 80a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 80c:	89 d0                	mov    %edx,%eax
+ 80e:	c1 e8 12             	shr    $0x12,%eax
+ 811:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 813:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 818:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 819:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 81e:	0f 84 d4 00 00 00    	je     8f8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 824:	31 c0                	xor    %eax,%eax
+ 826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 830:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 837:	83 c0 01             	add    $0x1,%eax
+ 83a:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 841:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 847:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 84d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 84f:	89 d1                	mov    %edx,%ecx
+ 851:	83 e2 01             	and    $0x1,%edx
+ 854:	d1 e9                	shr    %ecx
+ 856:	33 0c 85 d0 13 00 00 	xor    0x13d0(,%eax,4),%ecx
+ 85d:	33 0c 95 40 0a 00 00 	xor    0xa40(,%edx,4),%ecx
+ 864:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 86b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 870:	75 be                	jne    830 <genrand+0x60>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 878:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 87f:	83 c0 01             	add    $0x1,%eax
+ 882:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 889:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 88f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 895:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 897:	89 d1                	mov    %edx,%ecx
+ 899:	83 e2 01             	and    $0x1,%edx
+ 89c:	d1 e9                	shr    %ecx
+ 89e:	33 0c 85 10 0a 00 00 	xor    0xa10(,%eax,4),%ecx
+ 8a5:	33 0c 95 40 0a 00 00 	xor    0xa40(,%edx,4),%ecx
+ 8ac:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8b8:	75 be                	jne    878 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ba:	8b 0d a0 0d 00 00    	mov    0xda0,%ecx
+ 8c0:	a1 5c 17 00 00       	mov    0x175c,%eax
+ 8c5:	89 ca                	mov    %ecx,%edx
+ 8c7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8cc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d4:	89 c2                	mov    %eax,%edx
+ 8d6:	83 e0 01             	and    $0x1,%eax
+ 8d9:	d1 ea                	shr    %edx
+ 8db:	33 15 d0 13 00 00    	xor    0x13d0,%edx
+ 8e1:	33 14 85 40 0a 00 00 	xor    0xa40(,%eax,4),%edx
+ 8e8:	89 15 5c 17 00 00    	mov    %edx,0x175c
+ 8ee:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8f3:	e9 ee fe ff ff       	jmp    7e6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8f8:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 8fd:	b9 5c 17 00 00       	mov    $0x175c,%ecx
+ 902:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 907:	c7 05 a0 0d 00 00 05 	movl   $0x1105,0xda0
+ 90e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 911:	eb 08                	jmp    91b <genrand+0x14b>
+ 913:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 917:	90                   	nop
+ 918:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 91b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 921:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 923:	39 c1                	cmp    %eax,%ecx
+ 925:	75 f1                	jne    918 <genrand+0x148>
+ 927:	e9 f8 fe ff ff       	jmp    824 <genrand+0x54>
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 930:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 931:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 933:	89 e5                	mov    %esp,%ebp
+ 935:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 936:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 939:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 93a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 93f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 942:	89 d8                	mov    %ebx,%eax
+ 944:	f7 f1                	div    %ecx
+ 946:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 948:	29 d3                	sub    %edx,%ebx
+ 94a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 950:	e8 7b fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 955:	39 d8                	cmp    %ebx,%eax
+ 957:	73 f7                	jae    950 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 959:	31 d2                	xor    %edx,%edx
+}
+ 95b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 95c:	f7 f6                	div    %esi
+}
+ 95e:	5e                   	pop    %esi
+ 95f:	5d                   	pop    %ebp
+ 960:	c3                   	ret    
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+
+00000970 <randomrange>:
+
+int randomrange(int low, int high){
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 0c             	sub    $0xc,%esp
+ 979:	8b 75 08             	mov    0x8(%ebp),%esi
+ 97c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 97f:	39 f0                	cmp    %esi,%eax
+ 981:	7d 06                	jge    989 <randomrange+0x19>
+ 983:	89 f2                	mov    %esi,%edx
+ 985:	89 c6                	mov    %eax,%esi
+ 987:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 989:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 98b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 990:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 992:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 995:	89 d8                	mov    %ebx,%eax
+ 997:	f7 f1                	div    %ecx
+ 999:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 99b:	29 d3                	sub    %edx,%ebx
+ 99d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 9a0:	e8 2b fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9a5:	39 d8                	cmp    %ebx,%eax
+ 9a7:	73 f7                	jae    9a0 <randomrange+0x30>
+  return x/bin_size;
+ 9a9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 9ab:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9ae:	f7 f7                	div    %edi
+}
+ 9b0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9b1:	01 f0                	add    %esi,%eax
+}
+ 9b3:	5e                   	pop    %esi
+ 9b4:	5f                   	pop    %edi
+ 9b5:	5d                   	pop    %ebp
+ 9b6:	c3                   	ret    
diff -ruN xv6-public/kill.d xv6-public-with-hybrid/kill.d
--- xv6-public/kill.d	2022-09-06 09:47:09.833707000 +0530
+++ xv6-public-with-hybrid/kill.d	2022-10-07 18:49:59.976954732 +0530
@@ -1 +1,2 @@
-kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/kill.o and xv6-public-with-hybrid/kill.o differ
diff -ruN xv6-public/kill.sym xv6-public-with-hybrid/kill.sym
--- xv6-public/kill.sym	2022-09-06 09:47:09.893664000 +0530
+++ xv6-public-with-hybrid/kill.sym	2022-10-07 18:50:00.068954463 +0530
@@ -1,20 +1,28 @@
 00000000 kill.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007cc digits.0
+000003b0 printint
+00000a2c digits.0
 00000000 umalloc.c
-00000a84 freep
-00000a88 base
+00000d80 freep
+00000d84 base
+00000000 random.c
+00000da0 mt
+00000d74 mti
+00000a40 mag01.0
 00000060 strcpy
-00000430 printf
+00000790 sgenrand
+00000460 printf
 00000363 thread_exit
 00000280 memmove
 000002fb mknod
 00000180 gets
 00000333 getpid
-00000660 malloc
+00000690 malloc
 00000343 sleep
+00000393 get_burst_time
+00000930 random_at_most
+0000039b getCurrentInfo
 000002c3 pipe
 000002d3 write
 0000030b fstat
@@ -27,14 +35,19 @@
 000002ab fork
 0000033b sbrk
 0000034b uptime
-00000a84 __bss_start
+00000d78 __bss_start
 00000120 memset
 00000000 main
+0000038b set_burst_time
 00000090 strcmp
 0000032b dup
+0000037b getMaxPid
+000007d0 genrand
+00000373 getNumProc
+00000383 getProcInfo
 000001f0 stat
-00000a84 _edata
-00000a90 _end
+00000d78 _edata
+00001760 _end
 00000313 link
 000002b3 exit
 00000240 atoi
@@ -43,7 +56,9 @@
 000002f3 open
 00000140 strchr
 00000353 thread_create
+000003a3 getCurrentPID
+00000970 randomrange
 0000031b mkdir
 000002db close
 0000035b thread_join
-000005d0 free
+00000600 free
Binary files xv6-public/lapic.o and xv6-public-with-hybrid/lapic.o differ
Binary files xv6-public/_ln and xv6-public-with-hybrid/_ln differ
diff -ruN xv6-public/ln.asm xv6-public-with-hybrid/ln.asm
--- xv6-public/ln.asm	2022-09-06 09:47:09.977605000 +0530
+++ xv6-public-with-hybrid/ln.asm	2022-10-07 18:50:00.248953937 +0530
@@ -27,9 +27,9 @@
     printf(2, "Usage: ln old new\n");
   17:	52                   	push   %edx
   18:	52                   	push   %edx
-  19:	68 58 07 00 00       	push   $0x758
+  19:	68 b8 09 00 00       	push   $0x9b8
   1e:	6a 02                	push   $0x2
-  20:	e8 0b 04 00 00       	call   430 <printf>
+  20:	e8 3b 04 00 00       	call   460 <printf>
     exit();
   25:	e8 89 02 00 00       	call   2b3 <exit>
   }
@@ -48,9 +48,9 @@
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
   43:	ff 73 08             	push   0x8(%ebx)
   46:	ff 73 04             	push   0x4(%ebx)
-  49:	68 6b 07 00 00       	push   $0x76b
+  49:	68 cb 09 00 00       	push   $0x9cb
   4e:	6a 02                	push   $0x2
-  50:	e8 db 03 00 00       	call   430 <printf>
+  50:	e8 0b 04 00 00       	call   460 <printf>
   55:	83 c4 10             	add    $0x10,%esp
   58:	eb e4                	jmp    3e <main+0x3e>
   5a:	66 90                	xchg   %ax,%ax
@@ -601,572 +601,887 @@
  36a:	c3                   	ret    
 
 0000036b <draw>:
+SYSCALL(draw)
  36b:	b8 19 00 00 00       	mov    $0x19,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
- 373:	66 90                	xchg   %ax,%ax
- 375:	66 90                	xchg   %ax,%ax
- 377:	66 90                	xchg   %ax,%ax
- 379:	66 90                	xchg   %ax,%ax
- 37b:	66 90                	xchg   %ax,%ax
- 37d:	66 90                	xchg   %ax,%ax
- 37f:	90                   	nop
 
-00000380 <printint>:
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 383:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 38b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 393:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 39b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 3a3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
- 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 38c:	89 d1                	mov    %edx,%ecx
+ 3bc:	89 d1                	mov    %edx,%ecx
 {
- 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 391:	85 d2                	test   %edx,%edx
- 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
- 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 39d:	74 79                	je     418 <printint+0x98>
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
     neg = 1;
- 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3a6:	f7 d9                	neg    %ecx
+ 3d6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3a8:	31 db                	xor    %ebx,%ebx
- 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 c8                	mov    %ecx,%eax
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	89 cf                	mov    %ecx,%edi
- 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 e0 07 00 00 	movzbl 0x7e0(%edx),%edx
- 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3c3:	89 d8                	mov    %ebx,%eax
- 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 40 0a 00 00 	movzbl 0xa40(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
   if(neg)
- 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3d6:	85 c9                	test   %ecx,%ecx
- 3d8:	74 0c                	je     3e6 <printint+0x66>
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
     buf[i++] = '-';
- 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3df:	89 d8                	mov    %ebx,%eax
+ 40f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ed:	eb 07                	jmp    3f6 <printint+0x76>
- 3ef:	90                   	nop
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
     putc(fd, buf[i]);
- 3f0:	0f b6 13             	movzbl (%ebx),%edx
- 3f3:	83 eb 01             	sub    $0x1,%ebx
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3f6:	83 ec 04             	sub    $0x4,%esp
- 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3fc:	6a 01                	push   $0x1
- 3fe:	56                   	push   %esi
- 3ff:	57                   	push   %edi
- 400:	e8 ce fe ff ff       	call   2d3 <write>
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 9e fe ff ff       	call   2d3 <write>
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x70>
-}
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 41f:	eb 87                	jmp    3a8 <printint+0x28>
- 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42f:	90                   	nop
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
 
-00000430 <printf>:
+00000460 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 2c             	sub    $0x2c,%esp
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 469:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 46c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 43f:	0f b6 13             	movzbl (%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	74 6a                	je     4b0 <printf+0x80>
+ 46f:	0f b6 13             	movzbl (%ebx),%edx
+ 472:	84 d2                	test   %dl,%dl
+ 474:	74 6a                	je     4e0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 446:	8d 45 10             	lea    0x10(%ebp),%eax
- 449:	83 c3 01             	add    $0x1,%ebx
+ 476:	8d 45 10             	lea    0x10(%ebp),%eax
+ 479:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 47c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 44f:	31 c9                	xor    %ecx,%ecx
+ 47f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 454:	eb 36                	jmp    48c <printf+0x5c>
- 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45d:	8d 76 00             	lea    0x0(%esi),%esi
- 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 481:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 484:	eb 36                	jmp    4bc <printf+0x5c>
+ 486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+ 490:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 493:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	74 15                	je     482 <printf+0x52>
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 15                	je     4b2 <printf+0x52>
   write(fd, &c, 1);
- 46d:	83 ec 04             	sub    $0x4,%esp
- 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 473:	6a 01                	push   $0x1
- 475:	57                   	push   %edi
- 476:	56                   	push   %esi
- 477:	e8 57 fe ff ff       	call   2d3 <write>
- 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	56                   	push   %esi
+ 4a7:	e8 27 fe ff ff       	call   2d3 <write>
+ 4ac:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 47f:	83 c4 10             	add    $0x10,%esp
+ 4af:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 482:	0f b6 13             	movzbl (%ebx),%edx
- 485:	83 c3 01             	add    $0x1,%ebx
- 488:	84 d2                	test   %dl,%dl
- 48a:	74 24                	je     4b0 <printf+0x80>
+ 4b2:	0f b6 13             	movzbl (%ebx),%edx
+ 4b5:	83 c3 01             	add    $0x1,%ebx
+ 4b8:	84 d2                	test   %dl,%dl
+ 4ba:	74 24                	je     4e0 <printf+0x80>
     c = fmt[i] & 0xff;
- 48c:	0f b6 c2             	movzbl %dl,%eax
+ 4bc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 48f:	85 c9                	test   %ecx,%ecx
- 491:	74 cd                	je     460 <printf+0x30>
+ 4bf:	85 c9                	test   %ecx,%ecx
+ 4c1:	74 cd                	je     490 <printf+0x30>
       }
     } else if(state == '%'){
- 493:	83 f9 25             	cmp    $0x25,%ecx
- 496:	75 ea                	jne    482 <printf+0x52>
+ 4c3:	83 f9 25             	cmp    $0x25,%ecx
+ 4c6:	75 ea                	jne    4b2 <printf+0x52>
       if(c == 'd'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
- 4a1:	83 e8 63             	sub    $0x63,%eax
- 4a4:	83 f8 15             	cmp    $0x15,%eax
- 4a7:	77 17                	ja     4c0 <printf+0x90>
- 4a9:	ff 24 85 88 07 00 00 	jmp    *0x788(,%eax,4)
+ 4c8:	83 f8 25             	cmp    $0x25,%eax
+ 4cb:	0f 84 07 01 00 00    	je     5d8 <printf+0x178>
+ 4d1:	83 e8 63             	sub    $0x63,%eax
+ 4d4:	83 f8 15             	cmp    $0x15,%eax
+ 4d7:	77 17                	ja     4f0 <printf+0x90>
+ 4d9:	ff 24 85 e8 09 00 00 	jmp    *0x9e8(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4b3:	5b                   	pop    %ebx
- 4b4:	5e                   	pop    %esi
- 4b5:	5f                   	pop    %edi
- 4b6:	5d                   	pop    %ebp
- 4b7:	c3                   	ret    
- 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4bf:	90                   	nop
+ 4e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e3:	5b                   	pop    %ebx
+ 4e4:	5e                   	pop    %esi
+ 4e5:	5f                   	pop    %edi
+ 4e6:	5d                   	pop    %ebp
+ 4e7:	c3                   	ret    
+ 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
   write(fd, &c, 1);
- 4c0:	83 ec 04             	sub    $0x4,%esp
- 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4c6:	6a 01                	push   $0x1
- 4c8:	57                   	push   %edi
- 4c9:	56                   	push   %esi
- 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ce:	e8 00 fe ff ff       	call   2d3 <write>
+ 4f0:	83 ec 04             	sub    $0x4,%esp
+ 4f3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4f6:	6a 01                	push   $0x1
+ 4f8:	57                   	push   %edi
+ 4f9:	56                   	push   %esi
+ 4fa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4fe:	e8 d0 fd ff ff       	call   2d3 <write>
         putc(fd, c);
- 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 503:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4d7:	83 c4 0c             	add    $0xc,%esp
- 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4dd:	6a 01                	push   $0x1
- 4df:	57                   	push   %edi
- 4e0:	56                   	push   %esi
- 4e1:	e8 ed fd ff ff       	call   2d3 <write>
+ 507:	83 c4 0c             	add    $0xc,%esp
+ 50a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 50d:	6a 01                	push   $0x1
+ 50f:	57                   	push   %edi
+ 510:	56                   	push   %esi
+ 511:	e8 bd fd ff ff       	call   2d3 <write>
         putc(fd, c);
- 4e6:	83 c4 10             	add    $0x10,%esp
+ 516:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4e9:	31 c9                	xor    %ecx,%ecx
- 4eb:	eb 95                	jmp    482 <printf+0x52>
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 519:	31 c9                	xor    %ecx,%ecx
+ 51b:	eb 95                	jmp    4b2 <printf+0x52>
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	83 ec 0c             	sub    $0xc,%esp
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4f8:	6a 00                	push   $0x0
- 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4fd:	8b 10                	mov    (%eax),%edx
- 4ff:	89 f0                	mov    %esi,%eax
- 501:	e8 7a fe ff ff       	call   380 <printint>
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 52d:	8b 10                	mov    (%eax),%edx
+ 52f:	89 f0                	mov    %esi,%eax
+ 531:	e8 7a fe ff ff       	call   3b0 <printint>
         ap++;
- 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 50a:	83 c4 10             	add    $0x10,%esp
+ 536:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 53a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 50d:	31 c9                	xor    %ecx,%ecx
- 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	31 c9                	xor    %ecx,%ecx
+ 53f:	e9 6e ff ff ff       	jmp    4b2 <printf+0x52>
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 51b:	8b 10                	mov    (%eax),%edx
+ 548:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 54b:	8b 10                	mov    (%eax),%edx
         ap++;
- 51d:	83 c0 04             	add    $0x4,%eax
- 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 54d:	83 c0 04             	add    $0x4,%eax
+ 550:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 523:	85 d2                	test   %edx,%edx
- 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+ 553:	85 d2                	test   %edx,%edx
+ 555:	0f 84 8d 00 00 00    	je     5e8 <printf+0x188>
         while(*s != 0){
- 52b:	0f b6 02             	movzbl (%edx),%eax
+ 55b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 52e:	31 c9                	xor    %ecx,%ecx
+ 55e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 530:	84 c0                	test   %al,%al
- 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
- 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 53b:	89 d3                	mov    %edx,%ebx
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 560:	84 c0                	test   %al,%al
+ 562:	0f 84 4a ff ff ff    	je     4b2 <printf+0x52>
+ 568:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 56b:	89 d3                	mov    %edx,%ebx
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 540:	83 ec 04             	sub    $0x4,%esp
+ 570:	83 ec 04             	sub    $0x4,%esp
           s++;
- 543:	83 c3 01             	add    $0x1,%ebx
- 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 573:	83 c3 01             	add    $0x1,%ebx
+ 576:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 549:	6a 01                	push   $0x1
- 54b:	57                   	push   %edi
- 54c:	56                   	push   %esi
- 54d:	e8 81 fd ff ff       	call   2d3 <write>
+ 579:	6a 01                	push   $0x1
+ 57b:	57                   	push   %edi
+ 57c:	56                   	push   %esi
+ 57d:	e8 51 fd ff ff       	call   2d3 <write>
         while(*s != 0){
- 552:	0f b6 03             	movzbl (%ebx),%eax
- 555:	83 c4 10             	add    $0x10,%esp
- 558:	84 c0                	test   %al,%al
- 55a:	75 e4                	jne    540 <printf+0x110>
+ 582:	0f b6 03             	movzbl (%ebx),%eax
+ 585:	83 c4 10             	add    $0x10,%esp
+ 588:	84 c0                	test   %al,%al
+ 58a:	75 e4                	jne    570 <printf+0x110>
       state = 0;
- 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 55f:	31 c9                	xor    %ecx,%ecx
- 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
- 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 58c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 58f:	31 c9                	xor    %ecx,%ecx
+ 591:	e9 1c ff ff ff       	jmp    4b2 <printf+0x52>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
- 57f:	90                   	nop
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	e9 7b ff ff ff       	jmp    52a <printf+0xca>
+ 5af:	90                   	nop
         putc(fd, *ap);
- 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
+ 5b3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 586:	8b 00                	mov    (%eax),%eax
+ 5b6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
- 58a:	57                   	push   %edi
- 58b:	56                   	push   %esi
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	57                   	push   %edi
+ 5bb:	56                   	push   %esi
         putc(fd, *ap);
- 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5bc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 58f:	e8 3f fd ff ff       	call   2d3 <write>
+ 5bf:	e8 0f fd ff ff       	call   2d3 <write>
         ap++;
- 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 598:	83 c4 10             	add    $0x10,%esp
+ 5c4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5c8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 59b:	31 c9                	xor    %ecx,%ecx
- 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
- 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5cb:	31 c9                	xor    %ecx,%ecx
+ 5cd:	e9 e0 fe ff ff       	jmp    4b2 <printf+0x52>
+ 5d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5d8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5ab:	83 ec 04             	sub    $0x4,%esp
- 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
- 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5b7:	90                   	nop
+ 5db:	83 ec 04             	sub    $0x4,%esp
+ 5de:	e9 2a ff ff ff       	jmp    50d <printf+0xad>
+ 5e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5e7:	90                   	nop
           s = "(null)";
- 5b8:	ba 7f 07 00 00       	mov    $0x77f,%edx
+ 5e8:	ba df 09 00 00       	mov    $0x9df,%edx
         while(*s != 0){
- 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5c5:	89 d3                	mov    %edx,%ebx
- 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
- 5cc:	66 90                	xchg   %ax,%ax
- 5ce:	66 90                	xchg   %ax,%ax
+ 5ed:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5f0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f5:	89 d3                	mov    %edx,%ebx
+ 5f7:	e9 74 ff ff ff       	jmp    570 <printf+0x110>
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
 
-000005d0 <free>:
+00000600 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5d0:	55                   	push   %ebp
+ 600:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	a1 8c 0a 00 00       	mov    0xa8c,%eax
+ 601:	a1 80 0d 00 00       	mov    0xd80,%eax
 {
- 5d6:	89 e5                	mov    %esp,%ebp
- 5d8:	57                   	push   %edi
- 5d9:	56                   	push   %esi
- 5da:	53                   	push   %ebx
- 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 606:	89 e5                	mov    %esp,%ebp
+ 608:	57                   	push   %edi
+ 609:	56                   	push   %esi
+ 60a:	53                   	push   %ebx
+ 60b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 60e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5e8:	89 c2                	mov    %eax,%edx
- 5ea:	8b 00                	mov    (%eax),%eax
- 5ec:	39 ca                	cmp    %ecx,%edx
- 5ee:	73 30                	jae    620 <free+0x50>
- 5f0:	39 c1                	cmp    %eax,%ecx
- 5f2:	72 04                	jb     5f8 <free+0x28>
+ 611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 618:	89 c2                	mov    %eax,%edx
+ 61a:	8b 00                	mov    (%eax),%eax
+ 61c:	39 ca                	cmp    %ecx,%edx
+ 61e:	73 30                	jae    650 <free+0x50>
+ 620:	39 c1                	cmp    %eax,%ecx
+ 622:	72 04                	jb     628 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f4:	39 c2                	cmp    %eax,%edx
- 5f6:	72 f0                	jb     5e8 <free+0x18>
+ 624:	39 c2                	cmp    %eax,%edx
+ 626:	72 f0                	jb     618 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 f8                	cmp    %edi,%eax
- 600:	74 30                	je     632 <free+0x62>
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	74 30                	je     662 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 632:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 605:	8b 42 04             	mov    0x4(%edx),%eax
- 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 3a                	je     649 <free+0x79>
+ 635:	8b 42 04             	mov    0x4(%edx),%eax
+ 638:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 63b:	39 f1                	cmp    %esi,%ecx
+ 63d:	74 3a                	je     679 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 60f:	89 0a                	mov    %ecx,(%edx)
+ 63f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 641:	5b                   	pop    %ebx
   freep = p;
- 612:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+ 642:	89 15 80 0d 00 00    	mov    %edx,0xd80
 }
- 618:	5e                   	pop    %esi
- 619:	5f                   	pop    %edi
- 61a:	5d                   	pop    %ebp
- 61b:	c3                   	ret    
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 648:	5e                   	pop    %esi
+ 649:	5f                   	pop    %edi
+ 64a:	5d                   	pop    %ebp
+ 64b:	c3                   	ret    
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 620:	39 c2                	cmp    %eax,%edx
- 622:	72 c4                	jb     5e8 <free+0x18>
- 624:	39 c1                	cmp    %eax,%ecx
- 626:	73 c0                	jae    5e8 <free+0x18>
+ 650:	39 c2                	cmp    %eax,%edx
+ 652:	72 c4                	jb     618 <free+0x18>
+ 654:	39 c1                	cmp    %eax,%ecx
+ 656:	73 c0                	jae    618 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62e:	39 f8                	cmp    %edi,%eax
- 630:	75 d0                	jne    602 <free+0x32>
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 f8                	cmp    %edi,%eax
+ 660:	75 d0                	jne    632 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 632:	03 70 04             	add    0x4(%eax),%esi
- 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 662:	03 70 04             	add    0x4(%eax),%esi
+ 665:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 638:	8b 02                	mov    (%edx),%eax
- 63a:	8b 00                	mov    (%eax),%eax
- 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 668:	8b 02                	mov    (%edx),%eax
+ 66a:	8b 00                	mov    (%eax),%eax
+ 66c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 63f:	8b 42 04             	mov    0x4(%edx),%eax
- 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 645:	39 f1                	cmp    %esi,%ecx
- 647:	75 c6                	jne    60f <free+0x3f>
+ 66f:	8b 42 04             	mov    0x4(%edx),%eax
+ 672:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 675:	39 f1                	cmp    %esi,%ecx
+ 677:	75 c6                	jne    63f <free+0x3f>
     p->s.size += bp->s.size;
- 649:	03 43 fc             	add    -0x4(%ebx),%eax
+ 679:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 64c:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+ 67c:	89 15 80 0d 00 00    	mov    %edx,0xd80
     p->s.size += bp->s.size;
- 652:	89 42 04             	mov    %eax,0x4(%edx)
+ 682:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 658:	89 0a                	mov    %ecx,(%edx)
+ 685:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 688:	89 0a                	mov    %ecx,(%edx)
 }
- 65a:	5b                   	pop    %ebx
- 65b:	5e                   	pop    %esi
- 65c:	5f                   	pop    %edi
- 65d:	5d                   	pop    %ebp
- 65e:	c3                   	ret    
- 65f:	90                   	nop
+ 68a:	5b                   	pop    %ebx
+ 68b:	5e                   	pop    %esi
+ 68c:	5f                   	pop    %edi
+ 68d:	5d                   	pop    %ebp
+ 68e:	c3                   	ret    
+ 68f:	90                   	nop
 
-00000660 <malloc>:
+00000690 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 1c             	sub    $0x1c,%esp
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 669:	8b 45 08             	mov    0x8(%ebp),%eax
+ 699:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 66c:	8b 3d 8c 0a 00 00    	mov    0xa8c,%edi
+ 69c:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 672:	8d 70 07             	lea    0x7(%eax),%esi
- 675:	c1 ee 03             	shr    $0x3,%esi
- 678:	83 c6 01             	add    $0x1,%esi
+ 6a2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a5:	c1 ee 03             	shr    $0x3,%esi
+ 6a8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 67b:	85 ff                	test   %edi,%edi
- 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 6ab:	85 ff                	test   %edi,%edi
+ 6ad:	0f 84 9d 00 00 00    	je     750 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 683:	8b 17                	mov    (%edi),%edx
+ 6b3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 685:	8b 4a 04             	mov    0x4(%edx),%ecx
- 688:	39 f1                	cmp    %esi,%ecx
- 68a:	73 6a                	jae    6f6 <malloc+0x96>
- 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 691:	39 de                	cmp    %ebx,%esi
- 693:	0f 43 de             	cmovae %esi,%ebx
+ 6b5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6b8:	39 f1                	cmp    %esi,%ecx
+ 6ba:	73 6a                	jae    726 <malloc+0x96>
+ 6bc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6c1:	39 de                	cmp    %ebx,%esi
+ 6c3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
- 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6c6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6d0:	eb 17                	jmp    6e9 <malloc+0x59>
+ 6d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a8:	8b 02                	mov    (%edx),%eax
+ 6d8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ad:	39 f1                	cmp    %esi,%ecx
- 6af:	73 4f                	jae    700 <malloc+0xa0>
+ 6da:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dd:	39 f1                	cmp    %esi,%ecx
+ 6df:	73 4f                	jae    730 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	8b 3d 8c 0a 00 00    	mov    0xa8c,%edi
- 6b7:	89 c2                	mov    %eax,%edx
- 6b9:	39 d7                	cmp    %edx,%edi
- 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+ 6e1:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 6e7:	89 c2                	mov    %eax,%edx
+ 6e9:	39 d7                	cmp    %edx,%edi
+ 6eb:	75 eb                	jne    6d8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6bd:	83 ec 0c             	sub    $0xc,%esp
- 6c0:	ff 75 e4             	push   -0x1c(%ebp)
- 6c3:	e8 73 fc ff ff       	call   33b <sbrk>
+ 6ed:	83 ec 0c             	sub    $0xc,%esp
+ 6f0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6f3:	e8 43 fc ff ff       	call   33b <sbrk>
   if(p == (char*)-1)
- 6c8:	83 c4 10             	add    $0x10,%esp
- 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ce:	74 1c                	je     6ec <malloc+0x8c>
+ 6f8:	83 c4 10             	add    $0x10,%esp
+ 6fb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6fe:	74 1c                	je     71c <malloc+0x8c>
   hp->s.size = nu;
- 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 700:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6d3:	83 ec 0c             	sub    $0xc,%esp
- 6d6:	83 c0 08             	add    $0x8,%eax
- 6d9:	50                   	push   %eax
- 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+ 703:	83 ec 0c             	sub    $0xc,%esp
+ 706:	83 c0 08             	add    $0x8,%eax
+ 709:	50                   	push   %eax
+ 70a:	e8 f1 fe ff ff       	call   600 <free>
   return freep;
- 6df:	8b 15 8c 0a 00 00    	mov    0xa8c,%edx
+ 70f:	8b 15 80 0d 00 00    	mov    0xd80,%edx
       if((p = morecore(nunits)) == 0)
- 6e5:	83 c4 10             	add    $0x10,%esp
- 6e8:	85 d2                	test   %edx,%edx
- 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	85 d2                	test   %edx,%edx
+ 71a:	75 bc                	jne    6d8 <malloc+0x48>
         return 0;
   }
 }
- 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6ef:	31 c0                	xor    %eax,%eax
+ 71f:	31 c0                	xor    %eax,%eax
 }
- 6f1:	5b                   	pop    %ebx
- 6f2:	5e                   	pop    %esi
- 6f3:	5f                   	pop    %edi
- 6f4:	5d                   	pop    %ebp
- 6f5:	c3                   	ret    
+ 721:	5b                   	pop    %ebx
+ 722:	5e                   	pop    %esi
+ 723:	5f                   	pop    %edi
+ 724:	5d                   	pop    %ebp
+ 725:	c3                   	ret    
     if(p->s.size >= nunits){
- 6f6:	89 d0                	mov    %edx,%eax
- 6f8:	89 fa                	mov    %edi,%edx
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 726:	89 d0                	mov    %edx,%eax
+ 728:	89 fa                	mov    %edi,%edx
+ 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 700:	39 ce                	cmp    %ecx,%esi
- 702:	74 4c                	je     750 <malloc+0xf0>
+ 730:	39 ce                	cmp    %ecx,%esi
+ 732:	74 4c                	je     780 <malloc+0xf0>
         p->s.size -= nunits;
- 704:	29 f1                	sub    %esi,%ecx
- 706:	89 48 04             	mov    %ecx,0x4(%eax)
+ 734:	29 f1                	sub    %esi,%ecx
+ 736:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 739:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 70c:	89 70 04             	mov    %esi,0x4(%eax)
+ 73c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 70f:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+ 73f:	89 15 80 0d 00 00    	mov    %edx,0xd80
 }
- 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 745:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 718:	83 c0 08             	add    $0x8,%eax
+ 748:	83 c0 08             	add    $0x8,%eax
 }
- 71b:	5b                   	pop    %ebx
- 71c:	5e                   	pop    %esi
- 71d:	5f                   	pop    %edi
- 71e:	5d                   	pop    %ebp
- 71f:	c3                   	ret    
+ 74b:	5b                   	pop    %ebx
+ 74c:	5e                   	pop    %esi
+ 74d:	5f                   	pop    %edi
+ 74e:	5d                   	pop    %ebp
+ 74f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 8c 0a 00 00 90 	movl   $0xa90,0xa8c
- 727:	0a 00 00 
+ 750:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
+ 757:	0d 00 00 
     base.s.size = 0;
- 72a:	bf 90 0a 00 00       	mov    $0xa90,%edi
+ 75a:	bf 84 0d 00 00       	mov    $0xd84,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 90 0a 00 00 90 	movl   $0xa90,0xa90
- 736:	0a 00 00 
+ 75f:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
+ 766:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 fa                	mov    %edi,%edx
+ 769:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 73b:	c7 05 94 0a 00 00 00 	movl   $0x0,0xa94
- 742:	00 00 00 
+ 76b:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
+ 772:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 775:	e9 42 ff ff ff       	jmp    6bc <malloc+0x2c>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 08                	mov    (%eax),%ecx
- 752:	89 0a                	mov    %ecx,(%edx)
- 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb b9                	jmp    73f <malloc+0xaf>
+ 786:	66 90                	xchg   %ax,%ax
+ 788:	66 90                	xchg   %ax,%ax
+ 78a:	66 90                	xchg   %ax,%ax
+ 78c:	66 90                	xchg   %ax,%ax
+ 78e:	66 90                	xchg   %ax,%ax
+
+00000790 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 790:	55                   	push   %ebp
+ 791:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 796:	89 e5                	mov    %esp,%ebp
+ 798:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 79b:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    for (mti=1; mti<N; mti++)
+ 7a1:	eb 08                	jmp    7ab <sgenrand+0x1b>
+ 7a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7a7:	90                   	nop
+ 7a8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7ab:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7b1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7b3:	3d 5c 17 00 00       	cmp    $0x175c,%eax
+ 7b8:	75 ee                	jne    7a8 <sgenrand+0x18>
+ 7ba:	c7 05 7c 0d 00 00 70 	movl   $0x270,0xd7c
+ 7c1:	02 00 00 
+}
+ 7c4:	5d                   	pop    %ebp
+ 7c5:	c3                   	ret    
+ 7c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007d0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7d0:	a1 7c 0d 00 00       	mov    0xd7c,%eax
+ 7d5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7da:	7f 3d                	jg     819 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7dc:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 7e3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7e6:	89 15 7c 0d 00 00    	mov    %edx,0xd7c
+    y ^= TEMPERING_SHIFT_U(y);
+ 7ec:	89 ca                	mov    %ecx,%edx
+ 7ee:	c1 ea 0b             	shr    $0xb,%edx
+ 7f1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7f3:	89 d0                	mov    %edx,%eax
+ 7f5:	c1 e0 07             	shl    $0x7,%eax
+ 7f8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7fd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7ff:	89 c2                	mov    %eax,%edx
+ 801:	c1 e2 0f             	shl    $0xf,%edx
+ 804:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 80a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 80c:	89 d0                	mov    %edx,%eax
+ 80e:	c1 e8 12             	shr    $0x12,%eax
+ 811:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 813:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 818:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 819:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 81e:	0f 84 d4 00 00 00    	je     8f8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 824:	31 c0                	xor    %eax,%eax
+ 826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 82d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 830:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 837:	83 c0 01             	add    $0x1,%eax
+ 83a:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 841:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 847:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 84d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 84f:	89 d1                	mov    %edx,%ecx
+ 851:	83 e2 01             	and    $0x1,%edx
+ 854:	d1 e9                	shr    %ecx
+ 856:	33 0c 85 d0 13 00 00 	xor    0x13d0(,%eax,4),%ecx
+ 85d:	33 0c 95 54 0a 00 00 	xor    0xa54(,%edx,4),%ecx
+ 864:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 86b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 870:	75 be                	jne    830 <genrand+0x60>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 878:	8b 0c 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%ecx
+ 87f:	83 c0 01             	add    $0x1,%eax
+ 882:	8b 14 85 a0 0d 00 00 	mov    0xda0(,%eax,4),%edx
+ 889:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 88f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 895:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 897:	89 d1                	mov    %edx,%ecx
+ 899:	83 e2 01             	and    $0x1,%edx
+ 89c:	d1 e9                	shr    %ecx
+ 89e:	33 0c 85 10 0a 00 00 	xor    0xa10(,%eax,4),%ecx
+ 8a5:	33 0c 95 54 0a 00 00 	xor    0xa54(,%edx,4),%ecx
+ 8ac:	89 0c 85 9c 0d 00 00 	mov    %ecx,0xd9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8b3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8b8:	75 be                	jne    878 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8ba:	8b 0d a0 0d 00 00    	mov    0xda0,%ecx
+ 8c0:	a1 5c 17 00 00       	mov    0x175c,%eax
+ 8c5:	89 ca                	mov    %ecx,%edx
+ 8c7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8cc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d4:	89 c2                	mov    %eax,%edx
+ 8d6:	83 e0 01             	and    $0x1,%eax
+ 8d9:	d1 ea                	shr    %edx
+ 8db:	33 15 d0 13 00 00    	xor    0x13d0,%edx
+ 8e1:	33 14 85 54 0a 00 00 	xor    0xa54(,%eax,4),%edx
+ 8e8:	89 15 5c 17 00 00    	mov    %edx,0x175c
+ 8ee:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8f3:	e9 ee fe ff ff       	jmp    7e6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8f8:	b8 a4 0d 00 00       	mov    $0xda4,%eax
+ 8fd:	b9 5c 17 00 00       	mov    $0x175c,%ecx
+ 902:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 907:	c7 05 a0 0d 00 00 05 	movl   $0x1105,0xda0
+ 90e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 911:	eb 08                	jmp    91b <genrand+0x14b>
+ 913:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 917:	90                   	nop
+ 918:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 91b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 921:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 923:	39 c1                	cmp    %eax,%ecx
+ 925:	75 f1                	jne    918 <genrand+0x148>
+ 927:	e9 f8 fe ff ff       	jmp    824 <genrand+0x54>
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 930:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 931:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 933:	89 e5                	mov    %esp,%ebp
+ 935:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 936:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 939:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 93a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 93f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 942:	89 d8                	mov    %ebx,%eax
+ 944:	f7 f1                	div    %ecx
+ 946:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 948:	29 d3                	sub    %edx,%ebx
+ 94a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 950:	e8 7b fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 955:	39 d8                	cmp    %ebx,%eax
+ 957:	73 f7                	jae    950 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 959:	31 d2                	xor    %edx,%edx
+}
+ 95b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 95c:	f7 f6                	div    %esi
+}
+ 95e:	5e                   	pop    %esi
+ 95f:	5d                   	pop    %ebp
+ 960:	c3                   	ret    
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 96f:	90                   	nop
+
+00000970 <randomrange>:
+
+int randomrange(int low, int high){
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 0c             	sub    $0xc,%esp
+ 979:	8b 75 08             	mov    0x8(%ebp),%esi
+ 97c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 97f:	39 f0                	cmp    %esi,%eax
+ 981:	7d 06                	jge    989 <randomrange+0x19>
+ 983:	89 f2                	mov    %esi,%edx
+ 985:	89 c6                	mov    %eax,%esi
+ 987:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 989:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 98b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 990:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 992:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 995:	89 d8                	mov    %ebx,%eax
+ 997:	f7 f1                	div    %ecx
+ 999:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 99b:	29 d3                	sub    %edx,%ebx
+ 99d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 9a0:	e8 2b fe ff ff       	call   7d0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9a5:	39 d8                	cmp    %ebx,%eax
+ 9a7:	73 f7                	jae    9a0 <randomrange+0x30>
+  return x/bin_size;
+ 9a9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 9ab:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9ae:	f7 f7                	div    %edi
+}
+ 9b0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9b1:	01 f0                	add    %esi,%eax
+}
+ 9b3:	5e                   	pop    %esi
+ 9b4:	5f                   	pop    %edi
+ 9b5:	5d                   	pop    %ebp
+ 9b6:	c3                   	ret    
diff -ruN xv6-public/ln.d xv6-public-with-hybrid/ln.d
--- xv6-public/ln.d	2022-09-06 09:47:09.933636000 +0530
+++ xv6-public-with-hybrid/ln.d	2022-10-07 18:50:00.184954125 +0530
@@ -1 +1 @@
-ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/ln.o and xv6-public-with-hybrid/ln.o differ
diff -ruN xv6-public/ln.sym xv6-public-with-hybrid/ln.sym
--- xv6-public/ln.sym	2022-09-06 09:47:09.993594000 +0530
+++ xv6-public-with-hybrid/ln.sym	2022-10-07 18:50:00.260953903 +0530
@@ -1,20 +1,28 @@
 00000000 ln.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007e0 digits.0
+000003b0 printint
+00000a40 digits.0
 00000000 umalloc.c
-00000a8c freep
-00000a90 base
+00000d80 freep
+00000d84 base
+00000000 random.c
+00000da0 mt
+00000d7c mti
+00000a54 mag01.0
 00000060 strcpy
-00000430 printf
+00000790 sgenrand
+00000460 printf
 00000363 thread_exit
 00000280 memmove
 000002fb mknod
 00000180 gets
 00000333 getpid
-00000660 malloc
+00000690 malloc
 00000343 sleep
+00000393 get_burst_time
+00000930 random_at_most
+0000039b getCurrentInfo
 000002c3 pipe
 000002d3 write
 0000030b fstat
@@ -27,14 +35,19 @@
 000002ab fork
 0000033b sbrk
 0000034b uptime
-00000a8c __bss_start
+00000d80 __bss_start
 00000120 memset
 00000000 main
+0000038b set_burst_time
 00000090 strcmp
 0000032b dup
+0000037b getMaxPid
+000007d0 genrand
+00000373 getNumProc
+00000383 getProcInfo
 000001f0 stat
-00000a8c _edata
-00000a98 _end
+00000d80 _edata
+00001760 _end
 00000313 link
 000002b3 exit
 00000240 atoi
@@ -43,7 +56,9 @@
 000002f3 open
 00000140 strchr
 00000353 thread_create
+000003a3 getCurrentPID
+00000970 randomrange
 0000031b mkdir
 000002db close
 0000035b thread_join
-000005d0 free
+00000600 free
Binary files xv6-public/log.o and xv6-public-with-hybrid/log.o differ
Binary files xv6-public/_ls and xv6-public-with-hybrid/_ls differ
diff -ruN xv6-public/ls.asm xv6-public-with-hybrid/ls.asm
--- xv6-public/ls.asm	2022-09-06 09:47:10.133734000 +0530
+++ xv6-public-with-hybrid/ls.asm	2022-10-07 18:50:00.536953096 +0530
@@ -50,7 +50,7 @@
   3d:	e8 51 05 00 00       	call   593 <exit>
     ls(".");
   42:	83 ec 0c             	sub    $0xc,%esp
-  45:	68 80 0a 00 00       	push   $0xa80
+  45:	68 e0 0c 00 00       	push   $0xce0
   4a:	e8 b1 00 00 00       	call   100 <ls>
     exit();
   4f:	e8 3f 05 00 00       	call   593 <exit>
@@ -100,21 +100,21 @@
   ab:	83 c4 0c             	add    $0xc,%esp
   ae:	50                   	push   %eax
   af:	53                   	push   %ebx
-  b0:	68 14 0e 00 00       	push   $0xe14
+  b0:	68 20 11 00 00       	push   $0x1120
   b5:	e8 a6 04 00 00       	call   560 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ba:	89 1c 24             	mov    %ebx,(%esp)
   bd:	e8 0e 03 00 00       	call   3d0 <strlen>
   c2:	89 1c 24             	mov    %ebx,(%esp)
   return buf;
-  c5:	bb 14 0e 00 00       	mov    $0xe14,%ebx
+  c5:	bb 20 11 00 00       	mov    $0x1120,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ca:	89 c6                	mov    %eax,%esi
   cc:	e8 ff 02 00 00       	call   3d0 <strlen>
   d1:	ba 0e 00 00 00       	mov    $0xe,%edx
   d6:	83 c4 0c             	add    $0xc,%esp
   d9:	29 f2                	sub    %esi,%edx
-  db:	05 14 0e 00 00       	add    $0xe14,%eax
+  db:	05 20 11 00 00       	add    $0x1120,%eax
   e0:	52                   	push   %edx
   e1:	6a 20                	push   $0x20
   e3:	50                   	push   %eax
@@ -191,9 +191,9 @@
  194:	56                   	push   %esi
  195:	6a 02                	push   $0x2
  197:	50                   	push   %eax
- 198:	68 60 0a 00 00       	push   $0xa60
+ 198:	68 c0 0c 00 00       	push   $0xcc0
  19d:	6a 01                	push   $0x1
- 19f:	e8 6c 05 00 00       	call   710 <printf>
+ 19f:	e8 9c 05 00 00       	call   740 <printf>
     break;
  1a4:	83 c4 20             	add    $0x20,%esp
  1a7:	eb a9                	jmp    152 <ls+0x52>
@@ -278,9 +278,9 @@
  29a:	52                   	push   %edx
  29b:	ff b5 b4 fd ff ff    	push   -0x24c(%ebp)
  2a1:	50                   	push   %eax
- 2a2:	68 60 0a 00 00       	push   $0xa60
+ 2a2:	68 c0 0c 00 00       	push   $0xcc0
  2a7:	6a 01                	push   $0x1
- 2a9:	e8 62 04 00 00       	call   710 <printf>
+ 2a9:	e8 92 04 00 00       	call   740 <printf>
  2ae:	83 c4 20             	add    $0x20,%esp
  2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
  2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -288,9 +288,9 @@
     printf(2, "ls: cannot open %s\n", path);
  2c0:	83 ec 04             	sub    $0x4,%esp
  2c3:	57                   	push   %edi
- 2c4:	68 38 0a 00 00       	push   $0xa38
+ 2c4:	68 98 0c 00 00       	push   $0xc98
  2c9:	6a 02                	push   $0x2
- 2cb:	e8 40 04 00 00       	call   710 <printf>
+ 2cb:	e8 70 04 00 00       	call   740 <printf>
     return;
  2d0:	83 c4 10             	add    $0x10,%esp
 }
@@ -304,9 +304,9 @@
  2df:	90                   	nop
       printf(1, "ls: path too long\n");
  2e0:	83 ec 08             	sub    $0x8,%esp
- 2e3:	68 6d 0a 00 00       	push   $0xa6d
+ 2e3:	68 cd 0c 00 00       	push   $0xccd
  2e8:	6a 01                	push   $0x1
- 2ea:	e8 21 04 00 00       	call   710 <printf>
+ 2ea:	e8 51 04 00 00       	call   740 <printf>
       break;
  2ef:	83 c4 10             	add    $0x10,%esp
  2f2:	e9 5b fe ff ff       	jmp    152 <ls+0x52>
@@ -315,9 +315,9 @@
     printf(2, "ls: cannot stat %s\n", path);
  300:	83 ec 04             	sub    $0x4,%esp
  303:	57                   	push   %edi
- 304:	68 4c 0a 00 00       	push   $0xa4c
+ 304:	68 ac 0c 00 00       	push   $0xcac
  309:	6a 02                	push   $0x2
- 30b:	e8 00 04 00 00       	call   710 <printf>
+ 30b:	e8 30 04 00 00       	call   740 <printf>
     close(fd);
  310:	89 1c 24             	mov    %ebx,(%esp)
  313:	e8 a3 02 00 00       	call   5bb <close>
@@ -335,9 +335,9 @@
         printf(1, "ls: cannot stat %s\n", buf);
  328:	83 ec 04             	sub    $0x4,%esp
  32b:	57                   	push   %edi
- 32c:	68 4c 0a 00 00       	push   $0xa4c
+ 32c:	68 ac 0c 00 00       	push   $0xcac
  331:	6a 01                	push   $0x1
- 333:	e8 d8 03 00 00       	call   710 <printf>
+ 333:	e8 08 04 00 00       	call   740 <printf>
         continue;
  338:	83 c4 10             	add    $0x10,%esp
  33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
@@ -886,572 +886,887 @@
  64a:	c3                   	ret    
 
 0000064b <draw>:
+SYSCALL(draw)
  64b:	b8 19 00 00 00       	mov    $0x19,%eax
  650:	cd 40                	int    $0x40
  652:	c3                   	ret    
- 653:	66 90                	xchg   %ax,%ax
- 655:	66 90                	xchg   %ax,%ax
- 657:	66 90                	xchg   %ax,%ax
- 659:	66 90                	xchg   %ax,%ax
- 65b:	66 90                	xchg   %ax,%ax
- 65d:	66 90                	xchg   %ax,%ax
- 65f:	90                   	nop
 
-00000660 <printint>:
+00000653 <getNumProc>:
+SYSCALL(getNumProc)
+ 653:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 65b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 663:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 66b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 673:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+
+0000067b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 67b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 680:	cd 40                	int    $0x40
+ 682:	c3                   	ret    
+
+00000683 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 683:	b8 20 00 00 00       	mov    $0x20,%eax
+ 688:	cd 40                	int    $0x40
+ 68a:	c3                   	ret    
+ 68b:	66 90                	xchg   %ax,%ax
+ 68d:	66 90                	xchg   %ax,%ax
+ 68f:	90                   	nop
+
+00000690 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 3c             	sub    $0x3c,%esp
- 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 3c             	sub    $0x3c,%esp
+ 699:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 66c:	89 d1                	mov    %edx,%ecx
+ 69c:	89 d1                	mov    %edx,%ecx
 {
- 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 69e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 671:	85 d2                	test   %edx,%edx
- 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
- 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 67d:	74 79                	je     6f8 <printint+0x98>
+ 6a1:	85 d2                	test   %edx,%edx
+ 6a3:	0f 89 7f 00 00 00    	jns    728 <printint+0x98>
+ 6a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 6ad:	74 79                	je     728 <printint+0x98>
     neg = 1;
- 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 6af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 686:	f7 d9                	neg    %ecx
+ 6b6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 688:	31 db                	xor    %ebx,%ebx
- 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 68d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b8:	31 db                	xor    %ebx,%ebx
+ 6ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 690:	89 c8                	mov    %ecx,%eax
- 692:	31 d2                	xor    %edx,%edx
- 694:	89 cf                	mov    %ecx,%edi
- 696:	f7 75 c4             	divl   -0x3c(%ebp)
- 699:	0f b6 92 e4 0a 00 00 	movzbl 0xae4(%edx),%edx
- 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 6a3:	89 d8                	mov    %ebx,%eax
- 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 6c0:	89 c8                	mov    %ecx,%eax
+ 6c2:	31 d2                	xor    %edx,%edx
+ 6c4:	89 cf                	mov    %ecx,%edi
+ 6c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6c9:	0f b6 92 44 0d 00 00 	movzbl 0xd44(%edx),%edx
+ 6d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6d3:	89 d8                	mov    %ebx,%eax
+ 6d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6b1:	76 dd                	jbe    690 <printint+0x30>
+ 6de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6e1:	76 dd                	jbe    6c0 <printint+0x30>
   if(neg)
- 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6b6:	85 c9                	test   %ecx,%ecx
- 6b8:	74 0c                	je     6c6 <printint+0x66>
+ 6e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6e6:	85 c9                	test   %ecx,%ecx
+ 6e8:	74 0c                	je     6f6 <printint+0x66>
     buf[i++] = '-';
- 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6bf:	89 d8                	mov    %ebx,%eax
+ 6ef:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6cd:	eb 07                	jmp    6d6 <printint+0x76>
- 6cf:	90                   	nop
+ 6f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6fd:	eb 07                	jmp    706 <printint+0x76>
+ 6ff:	90                   	nop
     putc(fd, buf[i]);
- 6d0:	0f b6 13             	movzbl (%ebx),%edx
- 6d3:	83 eb 01             	sub    $0x1,%ebx
+ 700:	0f b6 13             	movzbl (%ebx),%edx
+ 703:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6d6:	83 ec 04             	sub    $0x4,%esp
- 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6dc:	6a 01                	push   $0x1
- 6de:	56                   	push   %esi
- 6df:	57                   	push   %edi
- 6e0:	e8 ce fe ff ff       	call   5b3 <write>
+ 706:	83 ec 04             	sub    $0x4,%esp
+ 709:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 70c:	6a 01                	push   $0x1
+ 70e:	56                   	push   %esi
+ 70f:	57                   	push   %edi
+ 710:	e8 9e fe ff ff       	call   5b3 <write>
   while(--i >= 0)
- 6e5:	83 c4 10             	add    $0x10,%esp
- 6e8:	39 de                	cmp    %ebx,%esi
- 6ea:	75 e4                	jne    6d0 <printint+0x70>
-}
- 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6ef:	5b                   	pop    %ebx
- 6f0:	5e                   	pop    %esi
- 6f1:	5f                   	pop    %edi
- 6f2:	5d                   	pop    %ebp
- 6f3:	c3                   	ret    
- 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	39 de                	cmp    %ebx,%esi
+ 71a:	75 e4                	jne    700 <printint+0x70>
+}
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71f:	5b                   	pop    %ebx
+ 720:	5e                   	pop    %esi
+ 721:	5f                   	pop    %edi
+ 722:	5d                   	pop    %ebp
+ 723:	c3                   	ret    
+ 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 6ff:	eb 87                	jmp    688 <printint+0x28>
- 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 70f:	90                   	nop
+ 728:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 72f:	eb 87                	jmp    6b8 <printint+0x28>
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
 
-00000710 <printf>:
+00000740 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 710:	55                   	push   %ebp
- 711:	89 e5                	mov    %esp,%ebp
- 713:	57                   	push   %edi
- 714:	56                   	push   %esi
- 715:	53                   	push   %ebx
- 716:	83 ec 2c             	sub    $0x2c,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 719:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 749:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 71c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 74c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 71f:	0f b6 13             	movzbl (%ebx),%edx
- 722:	84 d2                	test   %dl,%dl
- 724:	74 6a                	je     790 <printf+0x80>
+ 74f:	0f b6 13             	movzbl (%ebx),%edx
+ 752:	84 d2                	test   %dl,%dl
+ 754:	74 6a                	je     7c0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 726:	8d 45 10             	lea    0x10(%ebp),%eax
- 729:	83 c3 01             	add    $0x1,%ebx
+ 756:	8d 45 10             	lea    0x10(%ebp),%eax
+ 759:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 72c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 75c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 72f:	31 c9                	xor    %ecx,%ecx
+ 75f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 731:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 734:	eb 36                	jmp    76c <printf+0x5c>
- 736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 73d:	8d 76 00             	lea    0x0(%esi),%esi
- 740:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 761:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 764:	eb 36                	jmp    79c <printf+0x5c>
+ 766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 770:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 743:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 773:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 748:	83 f8 25             	cmp    $0x25,%eax
- 74b:	74 15                	je     762 <printf+0x52>
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	74 15                	je     792 <printf+0x52>
   write(fd, &c, 1);
- 74d:	83 ec 04             	sub    $0x4,%esp
- 750:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 753:	6a 01                	push   $0x1
- 755:	57                   	push   %edi
- 756:	56                   	push   %esi
- 757:	e8 57 fe ff ff       	call   5b3 <write>
- 75c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 77d:	83 ec 04             	sub    $0x4,%esp
+ 780:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 783:	6a 01                	push   $0x1
+ 785:	57                   	push   %edi
+ 786:	56                   	push   %esi
+ 787:	e8 27 fe ff ff       	call   5b3 <write>
+ 78c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 75f:	83 c4 10             	add    $0x10,%esp
+ 78f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 762:	0f b6 13             	movzbl (%ebx),%edx
- 765:	83 c3 01             	add    $0x1,%ebx
- 768:	84 d2                	test   %dl,%dl
- 76a:	74 24                	je     790 <printf+0x80>
+ 792:	0f b6 13             	movzbl (%ebx),%edx
+ 795:	83 c3 01             	add    $0x1,%ebx
+ 798:	84 d2                	test   %dl,%dl
+ 79a:	74 24                	je     7c0 <printf+0x80>
     c = fmt[i] & 0xff;
- 76c:	0f b6 c2             	movzbl %dl,%eax
+ 79c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 76f:	85 c9                	test   %ecx,%ecx
- 771:	74 cd                	je     740 <printf+0x30>
+ 79f:	85 c9                	test   %ecx,%ecx
+ 7a1:	74 cd                	je     770 <printf+0x30>
       }
     } else if(state == '%'){
- 773:	83 f9 25             	cmp    $0x25,%ecx
- 776:	75 ea                	jne    762 <printf+0x52>
+ 7a3:	83 f9 25             	cmp    $0x25,%ecx
+ 7a6:	75 ea                	jne    792 <printf+0x52>
       if(c == 'd'){
- 778:	83 f8 25             	cmp    $0x25,%eax
- 77b:	0f 84 07 01 00 00    	je     888 <printf+0x178>
- 781:	83 e8 63             	sub    $0x63,%eax
- 784:	83 f8 15             	cmp    $0x15,%eax
- 787:	77 17                	ja     7a0 <printf+0x90>
- 789:	ff 24 85 8c 0a 00 00 	jmp    *0xa8c(,%eax,4)
+ 7a8:	83 f8 25             	cmp    $0x25,%eax
+ 7ab:	0f 84 07 01 00 00    	je     8b8 <printf+0x178>
+ 7b1:	83 e8 63             	sub    $0x63,%eax
+ 7b4:	83 f8 15             	cmp    $0x15,%eax
+ 7b7:	77 17                	ja     7d0 <printf+0x90>
+ 7b9:	ff 24 85 ec 0c 00 00 	jmp    *0xcec(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 790:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 793:	5b                   	pop    %ebx
- 794:	5e                   	pop    %esi
- 795:	5f                   	pop    %edi
- 796:	5d                   	pop    %ebp
- 797:	c3                   	ret    
- 798:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 79f:	90                   	nop
+ 7c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cf:	90                   	nop
   write(fd, &c, 1);
- 7a0:	83 ec 04             	sub    $0x4,%esp
- 7a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 7a6:	6a 01                	push   $0x1
- 7a8:	57                   	push   %edi
- 7a9:	56                   	push   %esi
- 7aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7ae:	e8 00 fe ff ff       	call   5b3 <write>
+ 7d0:	83 ec 04             	sub    $0x4,%esp
+ 7d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 7d6:	6a 01                	push   $0x1
+ 7d8:	57                   	push   %edi
+ 7d9:	56                   	push   %esi
+ 7da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7de:	e8 d0 fd ff ff       	call   5b3 <write>
         putc(fd, c);
- 7b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 7e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 7b7:	83 c4 0c             	add    $0xc,%esp
- 7ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 7bd:	6a 01                	push   $0x1
- 7bf:	57                   	push   %edi
- 7c0:	56                   	push   %esi
- 7c1:	e8 ed fd ff ff       	call   5b3 <write>
+ 7e7:	83 c4 0c             	add    $0xc,%esp
+ 7ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7ed:	6a 01                	push   $0x1
+ 7ef:	57                   	push   %edi
+ 7f0:	56                   	push   %esi
+ 7f1:	e8 bd fd ff ff       	call   5b3 <write>
         putc(fd, c);
- 7c6:	83 c4 10             	add    $0x10,%esp
+ 7f6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7c9:	31 c9                	xor    %ecx,%ecx
- 7cb:	eb 95                	jmp    762 <printf+0x52>
- 7cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 7f9:	31 c9                	xor    %ecx,%ecx
+ 7fb:	eb 95                	jmp    792 <printf+0x52>
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 7d0:	83 ec 0c             	sub    $0xc,%esp
- 7d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7d8:	6a 00                	push   $0x0
- 7da:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7dd:	8b 10                	mov    (%eax),%edx
- 7df:	89 f0                	mov    %esi,%eax
- 7e1:	e8 7a fe ff ff       	call   660 <printint>
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 80d:	8b 10                	mov    (%eax),%edx
+ 80f:	89 f0                	mov    %esi,%eax
+ 811:	e8 7a fe ff ff       	call   690 <printint>
         ap++;
- 7e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 7ea:	83 c4 10             	add    $0x10,%esp
+ 816:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 81a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7ed:	31 c9                	xor    %ecx,%ecx
- 7ef:	e9 6e ff ff ff       	jmp    762 <printf+0x52>
- 7f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 81d:	31 c9                	xor    %ecx,%ecx
+ 81f:	e9 6e ff ff ff       	jmp    792 <printf+0x52>
+ 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 7f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7fb:	8b 10                	mov    (%eax),%edx
+ 828:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 82b:	8b 10                	mov    (%eax),%edx
         ap++;
- 7fd:	83 c0 04             	add    $0x4,%eax
- 800:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 82d:	83 c0 04             	add    $0x4,%eax
+ 830:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 803:	85 d2                	test   %edx,%edx
- 805:	0f 84 8d 00 00 00    	je     898 <printf+0x188>
+ 833:	85 d2                	test   %edx,%edx
+ 835:	0f 84 8d 00 00 00    	je     8c8 <printf+0x188>
         while(*s != 0){
- 80b:	0f b6 02             	movzbl (%edx),%eax
+ 83b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 80e:	31 c9                	xor    %ecx,%ecx
+ 83e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 810:	84 c0                	test   %al,%al
- 812:	0f 84 4a ff ff ff    	je     762 <printf+0x52>
- 818:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 81b:	89 d3                	mov    %edx,%ebx
- 81d:	8d 76 00             	lea    0x0(%esi),%esi
+ 840:	84 c0                	test   %al,%al
+ 842:	0f 84 4a ff ff ff    	je     792 <printf+0x52>
+ 848:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 84b:	89 d3                	mov    %edx,%ebx
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 820:	83 ec 04             	sub    $0x4,%esp
+ 850:	83 ec 04             	sub    $0x4,%esp
           s++;
- 823:	83 c3 01             	add    $0x1,%ebx
- 826:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 853:	83 c3 01             	add    $0x1,%ebx
+ 856:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 829:	6a 01                	push   $0x1
- 82b:	57                   	push   %edi
- 82c:	56                   	push   %esi
- 82d:	e8 81 fd ff ff       	call   5b3 <write>
+ 859:	6a 01                	push   $0x1
+ 85b:	57                   	push   %edi
+ 85c:	56                   	push   %esi
+ 85d:	e8 51 fd ff ff       	call   5b3 <write>
         while(*s != 0){
- 832:	0f b6 03             	movzbl (%ebx),%eax
- 835:	83 c4 10             	add    $0x10,%esp
- 838:	84 c0                	test   %al,%al
- 83a:	75 e4                	jne    820 <printf+0x110>
+ 862:	0f b6 03             	movzbl (%ebx),%eax
+ 865:	83 c4 10             	add    $0x10,%esp
+ 868:	84 c0                	test   %al,%al
+ 86a:	75 e4                	jne    850 <printf+0x110>
       state = 0;
- 83c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 83f:	31 c9                	xor    %ecx,%ecx
- 841:	e9 1c ff ff ff       	jmp    762 <printf+0x52>
- 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 84d:	8d 76 00             	lea    0x0(%esi),%esi
+ 86c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 86f:	31 c9                	xor    %ecx,%ecx
+ 871:	e9 1c ff ff ff       	jmp    792 <printf+0x52>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 850:	83 ec 0c             	sub    $0xc,%esp
- 853:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 858:	6a 01                	push   $0x1
- 85a:	e9 7b ff ff ff       	jmp    7da <printf+0xca>
- 85f:	90                   	nop
+ 880:	83 ec 0c             	sub    $0xc,%esp
+ 883:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 888:	6a 01                	push   $0x1
+ 88a:	e9 7b ff ff ff       	jmp    80a <printf+0xca>
+ 88f:	90                   	nop
         putc(fd, *ap);
- 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 863:	83 ec 04             	sub    $0x4,%esp
+ 893:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 866:	8b 00                	mov    (%eax),%eax
+ 896:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 868:	6a 01                	push   $0x1
- 86a:	57                   	push   %edi
- 86b:	56                   	push   %esi
+ 898:	6a 01                	push   $0x1
+ 89a:	57                   	push   %edi
+ 89b:	56                   	push   %esi
         putc(fd, *ap);
- 86c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 89c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 86f:	e8 3f fd ff ff       	call   5b3 <write>
+ 89f:	e8 0f fd ff ff       	call   5b3 <write>
         ap++;
- 874:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 878:	83 c4 10             	add    $0x10,%esp
+ 8a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 8a8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 87b:	31 c9                	xor    %ecx,%ecx
- 87d:	e9 e0 fe ff ff       	jmp    762 <printf+0x52>
- 882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 8ab:	31 c9                	xor    %ecx,%ecx
+ 8ad:	e9 e0 fe ff ff       	jmp    792 <printf+0x52>
+ 8b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 888:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 8b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 88b:	83 ec 04             	sub    $0x4,%esp
- 88e:	e9 2a ff ff ff       	jmp    7bd <printf+0xad>
- 893:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 897:	90                   	nop
+ 8bb:	83 ec 04             	sub    $0x4,%esp
+ 8be:	e9 2a ff ff ff       	jmp    7ed <printf+0xad>
+ 8c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8c7:	90                   	nop
           s = "(null)";
- 898:	ba 82 0a 00 00       	mov    $0xa82,%edx
+ 8c8:	ba e2 0c 00 00       	mov    $0xce2,%edx
         while(*s != 0){
- 89d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 8a0:	b8 28 00 00 00       	mov    $0x28,%eax
- 8a5:	89 d3                	mov    %edx,%ebx
- 8a7:	e9 74 ff ff ff       	jmp    820 <printf+0x110>
- 8ac:	66 90                	xchg   %ax,%ax
- 8ae:	66 90                	xchg   %ax,%ax
+ 8cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 8d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8d5:	89 d3                	mov    %edx,%ebx
+ 8d7:	e9 74 ff ff ff       	jmp    850 <printf+0x110>
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
 
-000008b0 <free>:
+000008e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8b0:	55                   	push   %ebp
+ 8e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8b1:	a1 24 0e 00 00       	mov    0xe24,%eax
+ 8e1:	a1 30 11 00 00       	mov    0x1130,%eax
 {
- 8b6:	89 e5                	mov    %esp,%ebp
- 8b8:	57                   	push   %edi
- 8b9:	56                   	push   %esi
- 8ba:	53                   	push   %ebx
- 8bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	57                   	push   %edi
+ 8e9:	56                   	push   %esi
+ 8ea:	53                   	push   %ebx
+ 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 8be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 8c8:	89 c2                	mov    %eax,%edx
- 8ca:	8b 00                	mov    (%eax),%eax
- 8cc:	39 ca                	cmp    %ecx,%edx
- 8ce:	73 30                	jae    900 <free+0x50>
- 8d0:	39 c1                	cmp    %eax,%ecx
- 8d2:	72 04                	jb     8d8 <free+0x28>
+ 8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8f8:	89 c2                	mov    %eax,%edx
+ 8fa:	8b 00                	mov    (%eax),%eax
+ 8fc:	39 ca                	cmp    %ecx,%edx
+ 8fe:	73 30                	jae    930 <free+0x50>
+ 900:	39 c1                	cmp    %eax,%ecx
+ 902:	72 04                	jb     908 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8d4:	39 c2                	cmp    %eax,%edx
- 8d6:	72 f0                	jb     8c8 <free+0x18>
+ 904:	39 c2                	cmp    %eax,%edx
+ 906:	72 f0                	jb     8f8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 8d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8de:	39 f8                	cmp    %edi,%eax
- 8e0:	74 30                	je     912 <free+0x62>
+ 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90e:	39 f8                	cmp    %edi,%eax
+ 910:	74 30                	je     942 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 8e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 912:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 8e5:	8b 42 04             	mov    0x4(%edx),%eax
- 8e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 8eb:	39 f1                	cmp    %esi,%ecx
- 8ed:	74 3a                	je     929 <free+0x79>
+ 915:	8b 42 04             	mov    0x4(%edx),%eax
+ 918:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 91b:	39 f1                	cmp    %esi,%ecx
+ 91d:	74 3a                	je     959 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 8ef:	89 0a                	mov    %ecx,(%edx)
+ 91f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 8f1:	5b                   	pop    %ebx
+ 921:	5b                   	pop    %ebx
   freep = p;
- 8f2:	89 15 24 0e 00 00    	mov    %edx,0xe24
+ 922:	89 15 30 11 00 00    	mov    %edx,0x1130
 }
- 8f8:	5e                   	pop    %esi
- 8f9:	5f                   	pop    %edi
- 8fa:	5d                   	pop    %ebp
- 8fb:	c3                   	ret    
- 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 928:	5e                   	pop    %esi
+ 929:	5f                   	pop    %edi
+ 92a:	5d                   	pop    %ebp
+ 92b:	c3                   	ret    
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 900:	39 c2                	cmp    %eax,%edx
- 902:	72 c4                	jb     8c8 <free+0x18>
- 904:	39 c1                	cmp    %eax,%ecx
- 906:	73 c0                	jae    8c8 <free+0x18>
+ 930:	39 c2                	cmp    %eax,%edx
+ 932:	72 c4                	jb     8f8 <free+0x18>
+ 934:	39 c1                	cmp    %eax,%ecx
+ 936:	73 c0                	jae    8f8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 90e:	39 f8                	cmp    %edi,%eax
- 910:	75 d0                	jne    8e2 <free+0x32>
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 f8                	cmp    %edi,%eax
+ 940:	75 d0                	jne    912 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 912:	03 70 04             	add    0x4(%eax),%esi
- 915:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 942:	03 70 04             	add    0x4(%eax),%esi
+ 945:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 918:	8b 02                	mov    (%edx),%eax
- 91a:	8b 00                	mov    (%eax),%eax
- 91c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 948:	8b 02                	mov    (%edx),%eax
+ 94a:	8b 00                	mov    (%eax),%eax
+ 94c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 91f:	8b 42 04             	mov    0x4(%edx),%eax
- 922:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 925:	39 f1                	cmp    %esi,%ecx
- 927:	75 c6                	jne    8ef <free+0x3f>
+ 94f:	8b 42 04             	mov    0x4(%edx),%eax
+ 952:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 955:	39 f1                	cmp    %esi,%ecx
+ 957:	75 c6                	jne    91f <free+0x3f>
     p->s.size += bp->s.size;
- 929:	03 43 fc             	add    -0x4(%ebx),%eax
+ 959:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 92c:	89 15 24 0e 00 00    	mov    %edx,0xe24
+ 95c:	89 15 30 11 00 00    	mov    %edx,0x1130
     p->s.size += bp->s.size;
- 932:	89 42 04             	mov    %eax,0x4(%edx)
+ 962:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 935:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 938:	89 0a                	mov    %ecx,(%edx)
+ 965:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 968:	89 0a                	mov    %ecx,(%edx)
 }
- 93a:	5b                   	pop    %ebx
- 93b:	5e                   	pop    %esi
- 93c:	5f                   	pop    %edi
- 93d:	5d                   	pop    %ebp
- 93e:	c3                   	ret    
- 93f:	90                   	nop
+ 96a:	5b                   	pop    %ebx
+ 96b:	5e                   	pop    %esi
+ 96c:	5f                   	pop    %edi
+ 96d:	5d                   	pop    %ebp
+ 96e:	c3                   	ret    
+ 96f:	90                   	nop
 
-00000940 <malloc>:
+00000970 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 940:	55                   	push   %ebp
- 941:	89 e5                	mov    %esp,%ebp
- 943:	57                   	push   %edi
- 944:	56                   	push   %esi
- 945:	53                   	push   %ebx
- 946:	83 ec 1c             	sub    $0x1c,%esp
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 949:	8b 45 08             	mov    0x8(%ebp),%eax
+ 979:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 94c:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
+ 97c:	8b 3d 30 11 00 00    	mov    0x1130,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 952:	8d 70 07             	lea    0x7(%eax),%esi
- 955:	c1 ee 03             	shr    $0x3,%esi
- 958:	83 c6 01             	add    $0x1,%esi
+ 982:	8d 70 07             	lea    0x7(%eax),%esi
+ 985:	c1 ee 03             	shr    $0x3,%esi
+ 988:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 95b:	85 ff                	test   %edi,%edi
- 95d:	0f 84 9d 00 00 00    	je     a00 <malloc+0xc0>
+ 98b:	85 ff                	test   %edi,%edi
+ 98d:	0f 84 9d 00 00 00    	je     a30 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 963:	8b 17                	mov    (%edi),%edx
+ 993:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 965:	8b 4a 04             	mov    0x4(%edx),%ecx
- 968:	39 f1                	cmp    %esi,%ecx
- 96a:	73 6a                	jae    9d6 <malloc+0x96>
- 96c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 971:	39 de                	cmp    %ebx,%esi
- 973:	0f 43 de             	cmovae %esi,%ebx
+ 995:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 998:	39 f1                	cmp    %esi,%ecx
+ 99a:	73 6a                	jae    a06 <malloc+0x96>
+ 99c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9a1:	39 de                	cmp    %ebx,%esi
+ 9a3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 976:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 97d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 980:	eb 17                	jmp    999 <malloc+0x59>
- 982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 9ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9b0:	eb 17                	jmp    9c9 <malloc+0x59>
+ 9b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 988:	8b 02                	mov    (%edx),%eax
+ 9b8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 98a:	8b 48 04             	mov    0x4(%eax),%ecx
- 98d:	39 f1                	cmp    %esi,%ecx
- 98f:	73 4f                	jae    9e0 <malloc+0xa0>
+ 9ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bd:	39 f1                	cmp    %esi,%ecx
+ 9bf:	73 4f                	jae    a10 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 991:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
- 997:	89 c2                	mov    %eax,%edx
- 999:	39 d7                	cmp    %edx,%edi
- 99b:	75 eb                	jne    988 <malloc+0x48>
+ 9c1:	8b 3d 30 11 00 00    	mov    0x1130,%edi
+ 9c7:	89 c2                	mov    %eax,%edx
+ 9c9:	39 d7                	cmp    %edx,%edi
+ 9cb:	75 eb                	jne    9b8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 99d:	83 ec 0c             	sub    $0xc,%esp
- 9a0:	ff 75 e4             	push   -0x1c(%ebp)
- 9a3:	e8 73 fc ff ff       	call   61b <sbrk>
+ 9cd:	83 ec 0c             	sub    $0xc,%esp
+ 9d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 9d3:	e8 43 fc ff ff       	call   61b <sbrk>
   if(p == (char*)-1)
- 9a8:	83 c4 10             	add    $0x10,%esp
- 9ab:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9ae:	74 1c                	je     9cc <malloc+0x8c>
+ 9d8:	83 c4 10             	add    $0x10,%esp
+ 9db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9de:	74 1c                	je     9fc <malloc+0x8c>
   hp->s.size = nu;
- 9b0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 9e0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9b3:	83 ec 0c             	sub    $0xc,%esp
- 9b6:	83 c0 08             	add    $0x8,%eax
- 9b9:	50                   	push   %eax
- 9ba:	e8 f1 fe ff ff       	call   8b0 <free>
+ 9e3:	83 ec 0c             	sub    $0xc,%esp
+ 9e6:	83 c0 08             	add    $0x8,%eax
+ 9e9:	50                   	push   %eax
+ 9ea:	e8 f1 fe ff ff       	call   8e0 <free>
   return freep;
- 9bf:	8b 15 24 0e 00 00    	mov    0xe24,%edx
+ 9ef:	8b 15 30 11 00 00    	mov    0x1130,%edx
       if((p = morecore(nunits)) == 0)
- 9c5:	83 c4 10             	add    $0x10,%esp
- 9c8:	85 d2                	test   %edx,%edx
- 9ca:	75 bc                	jne    988 <malloc+0x48>
+ 9f5:	83 c4 10             	add    $0x10,%esp
+ 9f8:	85 d2                	test   %edx,%edx
+ 9fa:	75 bc                	jne    9b8 <malloc+0x48>
         return 0;
   }
 }
- 9cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9cf:	31 c0                	xor    %eax,%eax
+ 9ff:	31 c0                	xor    %eax,%eax
 }
- 9d1:	5b                   	pop    %ebx
- 9d2:	5e                   	pop    %esi
- 9d3:	5f                   	pop    %edi
- 9d4:	5d                   	pop    %ebp
- 9d5:	c3                   	ret    
+ a01:	5b                   	pop    %ebx
+ a02:	5e                   	pop    %esi
+ a03:	5f                   	pop    %edi
+ a04:	5d                   	pop    %ebp
+ a05:	c3                   	ret    
     if(p->s.size >= nunits){
- 9d6:	89 d0                	mov    %edx,%eax
- 9d8:	89 fa                	mov    %edi,%edx
- 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a06:	89 d0                	mov    %edx,%eax
+ a08:	89 fa                	mov    %edi,%edx
+ a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 9e0:	39 ce                	cmp    %ecx,%esi
- 9e2:	74 4c                	je     a30 <malloc+0xf0>
+ a10:	39 ce                	cmp    %ecx,%esi
+ a12:	74 4c                	je     a60 <malloc+0xf0>
         p->s.size -= nunits;
- 9e4:	29 f1                	sub    %esi,%ecx
- 9e6:	89 48 04             	mov    %ecx,0x4(%eax)
+ a14:	29 f1                	sub    %esi,%ecx
+ a16:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 9e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ a19:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 9ec:	89 70 04             	mov    %esi,0x4(%eax)
+ a1c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 9ef:	89 15 24 0e 00 00    	mov    %edx,0xe24
+ a1f:	89 15 30 11 00 00    	mov    %edx,0x1130
 }
- 9f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a25:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 9f8:	83 c0 08             	add    $0x8,%eax
+ a28:	83 c0 08             	add    $0x8,%eax
 }
- 9fb:	5b                   	pop    %ebx
- 9fc:	5e                   	pop    %esi
- 9fd:	5f                   	pop    %edi
- 9fe:	5d                   	pop    %ebp
- 9ff:	c3                   	ret    
+ a2b:	5b                   	pop    %ebx
+ a2c:	5e                   	pop    %esi
+ a2d:	5f                   	pop    %edi
+ a2e:	5d                   	pop    %ebp
+ a2f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- a00:	c7 05 24 0e 00 00 28 	movl   $0xe28,0xe24
- a07:	0e 00 00 
+ a30:	c7 05 30 11 00 00 34 	movl   $0x1134,0x1130
+ a37:	11 00 00 
     base.s.size = 0;
- a0a:	bf 28 0e 00 00       	mov    $0xe28,%edi
+ a3a:	bf 34 11 00 00       	mov    $0x1134,%edi
     base.s.ptr = freep = prevp = &base;
- a0f:	c7 05 28 0e 00 00 28 	movl   $0xe28,0xe28
- a16:	0e 00 00 
+ a3f:	c7 05 34 11 00 00 34 	movl   $0x1134,0x1134
+ a46:	11 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a19:	89 fa                	mov    %edi,%edx
+ a49:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- a1b:	c7 05 2c 0e 00 00 00 	movl   $0x0,0xe2c
- a22:	00 00 00 
+ a4b:	c7 05 38 11 00 00 00 	movl   $0x0,0x1138
+ a52:	00 00 00 
     if(p->s.size >= nunits){
- a25:	e9 42 ff ff ff       	jmp    96c <malloc+0x2c>
- a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a55:	e9 42 ff ff ff       	jmp    99c <malloc+0x2c>
+ a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a30:	8b 08                	mov    (%eax),%ecx
- a32:	89 0a                	mov    %ecx,(%edx)
- a34:	eb b9                	jmp    9ef <malloc+0xaf>
+ a60:	8b 08                	mov    (%eax),%ecx
+ a62:	89 0a                	mov    %ecx,(%edx)
+ a64:	eb b9                	jmp    a1f <malloc+0xaf>
+ a66:	66 90                	xchg   %ax,%ax
+ a68:	66 90                	xchg   %ax,%ax
+ a6a:	66 90                	xchg   %ax,%ax
+ a6c:	66 90                	xchg   %ax,%ax
+ a6e:	66 90                	xchg   %ax,%ax
+
+00000a70 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ a70:	55                   	push   %ebp
+ a71:	b8 44 11 00 00       	mov    $0x1144,%eax
+ a76:	89 e5                	mov    %esp,%ebp
+ a78:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ a7b:	89 15 40 11 00 00    	mov    %edx,0x1140
+    for (mti=1; mti<N; mti++)
+ a81:	eb 08                	jmp    a8b <sgenrand+0x1b>
+ a83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a87:	90                   	nop
+ a88:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a8b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a91:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a93:	3d fc 1a 00 00       	cmp    $0x1afc,%eax
+ a98:	75 ee                	jne    a88 <sgenrand+0x18>
+ a9a:	c7 05 04 11 00 00 70 	movl   $0x270,0x1104
+ aa1:	02 00 00 
+}
+ aa4:	5d                   	pop    %ebp
+ aa5:	c3                   	ret    
+ aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ aad:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000ab0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ ab0:	a1 04 11 00 00       	mov    0x1104,%eax
+ ab5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ aba:	7f 3d                	jg     af9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ abc:	8b 0c 85 40 11 00 00 	mov    0x1140(,%eax,4),%ecx
+ ac3:	8d 50 01             	lea    0x1(%eax),%edx
+ ac6:	89 15 04 11 00 00    	mov    %edx,0x1104
+    y ^= TEMPERING_SHIFT_U(y);
+ acc:	89 ca                	mov    %ecx,%edx
+ ace:	c1 ea 0b             	shr    $0xb,%edx
+ ad1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ ad3:	89 d0                	mov    %edx,%eax
+ ad5:	c1 e0 07             	shl    $0x7,%eax
+ ad8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ add:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ adf:	89 c2                	mov    %eax,%edx
+ ae1:	c1 e2 0f             	shl    $0xf,%edx
+ ae4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ aea:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ aec:	89 d0                	mov    %edx,%eax
+ aee:	c1 e8 12             	shr    $0x12,%eax
+ af1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ af3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ af8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ af9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ afe:	0f 84 d4 00 00 00    	je     bd8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ b04:	31 c0                	xor    %eax,%eax
+ b06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b0d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b10:	8b 0c 85 40 11 00 00 	mov    0x1140(,%eax,4),%ecx
+ b17:	83 c0 01             	add    $0x1,%eax
+ b1a:	8b 14 85 40 11 00 00 	mov    0x1140(,%eax,4),%edx
+ b21:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b27:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b2d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ b2f:	89 d1                	mov    %edx,%ecx
+ b31:	83 e2 01             	and    $0x1,%edx
+ b34:	d1 e9                	shr    %ecx
+ b36:	33 0c 85 70 17 00 00 	xor    0x1770(,%eax,4),%ecx
+ b3d:	33 0c 95 58 0d 00 00 	xor    0xd58(,%edx,4),%ecx
+ b44:	89 0c 85 3c 11 00 00 	mov    %ecx,0x113c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b4b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b50:	75 be                	jne    b10 <genrand+0x60>
+ b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b58:	8b 0c 85 40 11 00 00 	mov    0x1140(,%eax,4),%ecx
+ b5f:	83 c0 01             	add    $0x1,%eax
+ b62:	8b 14 85 40 11 00 00 	mov    0x1140(,%eax,4),%edx
+ b69:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b6f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b75:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ b77:	89 d1                	mov    %edx,%ecx
+ b79:	83 e2 01             	and    $0x1,%edx
+ b7c:	d1 e9                	shr    %ecx
+ b7e:	33 0c 85 b0 0d 00 00 	xor    0xdb0(,%eax,4),%ecx
+ b85:	33 0c 95 58 0d 00 00 	xor    0xd58(,%edx,4),%ecx
+ b8c:	89 0c 85 3c 11 00 00 	mov    %ecx,0x113c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ b93:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ b98:	75 be                	jne    b58 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ b9a:	8b 0d 40 11 00 00    	mov    0x1140,%ecx
+ ba0:	a1 fc 1a 00 00       	mov    0x1afc,%eax
+ ba5:	89 ca                	mov    %ecx,%edx
+ ba7:	25 00 00 00 80       	and    $0x80000000,%eax
+ bac:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ bb2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ bb4:	89 c2                	mov    %eax,%edx
+ bb6:	83 e0 01             	and    $0x1,%eax
+ bb9:	d1 ea                	shr    %edx
+ bbb:	33 15 70 17 00 00    	xor    0x1770,%edx
+ bc1:	33 14 85 58 0d 00 00 	xor    0xd58(,%eax,4),%edx
+ bc8:	89 15 fc 1a 00 00    	mov    %edx,0x1afc
+ bce:	ba 01 00 00 00       	mov    $0x1,%edx
+ bd3:	e9 ee fe ff ff       	jmp    ac6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ bd8:	b8 44 11 00 00       	mov    $0x1144,%eax
+ bdd:	b9 fc 1a 00 00       	mov    $0x1afc,%ecx
+ be2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ be7:	c7 05 40 11 00 00 05 	movl   $0x1105,0x1140
+ bee:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ bf1:	eb 08                	jmp    bfb <genrand+0x14b>
+ bf3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ bf7:	90                   	nop
+ bf8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ bfb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ c01:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ c03:	39 c1                	cmp    %eax,%ecx
+ c05:	75 f1                	jne    bf8 <genrand+0x148>
+ c07:	e9 f8 fe ff ff       	jmp    b04 <genrand+0x54>
+ c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c10 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ c10:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ c11:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ c13:	89 e5                	mov    %esp,%ebp
+ c15:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ c16:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ c19:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ c1a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ c1f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c22:	89 d8                	mov    %ebx,%eax
+ c24:	f7 f1                	div    %ecx
+ c26:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ c28:	29 d3                	sub    %edx,%ebx
+ c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ c30:	e8 7b fe ff ff       	call   ab0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ c35:	39 d8                	cmp    %ebx,%eax
+ c37:	73 f7                	jae    c30 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ c39:	31 d2                	xor    %edx,%edx
+}
+ c3b:	5b                   	pop    %ebx
+  return x/bin_size;
+ c3c:	f7 f6                	div    %esi
+}
+ c3e:	5e                   	pop    %esi
+ c3f:	5d                   	pop    %ebp
+ c40:	c3                   	ret    
+ c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c4f:	90                   	nop
+
+00000c50 <randomrange>:
+
+int randomrange(int low, int high){
+ c50:	55                   	push   %ebp
+ c51:	89 e5                	mov    %esp,%ebp
+ c53:	57                   	push   %edi
+ c54:	56                   	push   %esi
+ c55:	53                   	push   %ebx
+ c56:	83 ec 0c             	sub    $0xc,%esp
+ c59:	8b 75 08             	mov    0x8(%ebp),%esi
+ c5c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c5f:	39 f0                	cmp    %esi,%eax
+ c61:	7d 06                	jge    c69 <randomrange+0x19>
+ c63:	89 f2                	mov    %esi,%edx
+ c65:	89 c6                	mov    %eax,%esi
+ c67:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c69:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c6b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ c70:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ c72:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c75:	89 d8                	mov    %ebx,%eax
+ c77:	f7 f1                	div    %ecx
+ c79:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ c7b:	29 d3                	sub    %edx,%ebx
+ c7d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ c80:	e8 2b fe ff ff       	call   ab0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ c85:	39 d8                	cmp    %ebx,%eax
+ c87:	73 f7                	jae    c80 <randomrange+0x30>
+  return x/bin_size;
+ c89:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ c8b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ c8e:	f7 f7                	div    %edi
+}
+ c90:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ c91:	01 f0                	add    %esi,%eax
+}
+ c93:	5e                   	pop    %esi
+ c94:	5f                   	pop    %edi
+ c95:	5d                   	pop    %ebp
+ c96:	c3                   	ret    
diff -ruN xv6-public/ls.d xv6-public-with-hybrid/ls.d
--- xv6-public/ls.d	2022-09-06 09:47:10.085680000 +0530
+++ xv6-public-with-hybrid/ls.d	2022-10-07 18:50:00.464953307 +0530
@@ -1 +1,2 @@
-ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h \
+ fs.h
Binary files xv6-public/ls.o and xv6-public-with-hybrid/ls.o differ
diff -ruN xv6-public/ls.sym xv6-public-with-hybrid/ls.sym
--- xv6-public/ls.sym	2022-09-06 09:47:10.149752000 +0530
+++ xv6-public-with-hybrid/ls.sym	2022-10-07 18:50:00.548953062 +0530
@@ -1,22 +1,30 @@
 00000000 ls.c
-00000e14 buf.0
+00001120 buf.0
 00000000 ulib.c
 00000000 printf.c
-00000660 printint
-00000ae4 digits.0
+00000690 printint
+00000d44 digits.0
 00000000 umalloc.c
-00000e24 freep
-00000e28 base
+00001130 freep
+00001134 base
+00000000 random.c
+00001140 mt
+00001104 mti
+00000d58 mag01.0
 00000340 strcpy
 00000060 fmtname
-00000710 printf
+00000a70 sgenrand
+00000740 printf
 00000643 thread_exit
 00000560 memmove
 000005db mknod
 00000460 gets
 00000613 getpid
-00000940 malloc
+00000970 malloc
 00000623 sleep
+00000673 get_burst_time
+00000c10 random_at_most
+0000067b getCurrentInfo
 000005a3 pipe
 000005b3 write
 000005eb fstat
@@ -29,14 +37,19 @@
 0000058b fork
 0000061b sbrk
 0000062b uptime
-00000e14 __bss_start
+00001108 __bss_start
 00000400 memset
 00000000 main
+0000066b set_burst_time
 00000370 strcmp
 0000060b dup
+0000065b getMaxPid
+00000ab0 genrand
+00000653 getNumProc
+00000663 getProcInfo
 000004d0 stat
-00000e14 _edata
-00000e30 _end
+00001108 _edata
+00001b00 _end
 000005f3 link
 00000100 ls
 00000593 exit
@@ -46,7 +59,9 @@
 000005d3 open
 00000420 strchr
 00000633 thread_create
+00000683 getCurrentPID
+00000c50 randomrange
 000005fb mkdir
 000005bb close
 0000063b thread_join
-000008b0 free
+000008e0 free
Binary files xv6-public/main.o and xv6-public-with-hybrid/main.o differ
diff -ruN xv6-public/Makefile xv6-public-with-hybrid/Makefile
--- xv6-public/Makefile	2022-09-05 21:49:13.165538000 +0530
+++ xv6-public-with-hybrid/Makefile	2022-10-06 14:36:22.150063000 +0530
@@ -143,7 +143,7 @@
 vectors.S: vectors.pl
 	./vectors.pl > vectors.S
 
-ULIB = ulib.o usys.o printf.o umalloc.o
+ULIB = ulib.o usys.o printf.o umalloc.o random.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
@@ -182,6 +182,13 @@
 	_zombie\
 	_thread\
 	_Drawtest\
+	_testNumProc\
+	_testMaxPid\
+	_testProcInfo\
+	_test_BurstTime\
+	_test_scheduler\
+	_ioProcTester\
+	_cpuProcTester\
 	
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -251,7 +258,7 @@
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c  wc.c zombie.c thread.c Drawtest.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c testNumProc.c testMaxPid.c testProcInfo.c test_BurstTime.c test_scheduler.c random.c cpuProcTester.c ioProcTester.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
Binary files xv6-public/_mkdir and xv6-public-with-hybrid/_mkdir differ
diff -ruN xv6-public/mkdir.asm xv6-public-with-hybrid/mkdir.asm
--- xv6-public/mkdir.asm	2022-09-06 09:47:10.241854000 +0530
+++ xv6-public-with-hybrid/mkdir.asm	2022-10-07 18:50:00.768952418 +0530
@@ -59,18 +59,18 @@
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	push   (%ebx)
-  53:	68 8f 07 00 00       	push   $0x78f
+  53:	68 ef 09 00 00       	push   $0x9ef
   58:	6a 02                	push   $0x2
-  5a:	e8 f1 03 00 00       	call   450 <printf>
+  5a:	e8 21 04 00 00       	call   480 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: mkdir files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 78 07 00 00       	push   $0x778
+  66:	68 d8 09 00 00       	push   $0x9d8
   6b:	6a 02                	push   $0x2
-  6d:	e8 de 03 00 00       	call   450 <printf>
+  6d:	e8 0e 04 00 00       	call   480 <printf>
     exit();
   72:	e8 5c 02 00 00       	call   2d3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -623,572 +623,887 @@
  38a:	c3                   	ret    
 
 0000038b <draw>:
+SYSCALL(draw)
  38b:	b8 19 00 00 00       	mov    $0x19,%eax
  390:	cd 40                	int    $0x40
  392:	c3                   	ret    
- 393:	66 90                	xchg   %ax,%ax
- 395:	66 90                	xchg   %ax,%ax
- 397:	66 90                	xchg   %ax,%ax
- 399:	66 90                	xchg   %ax,%ax
- 39b:	66 90                	xchg   %ax,%ax
- 39d:	66 90                	xchg   %ax,%ax
- 39f:	90                   	nop
 
-000003a0 <printint>:
+00000393 <getNumProc>:
+SYSCALL(getNumProc)
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 39b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 3a3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3ab:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3b3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3bb:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 3c3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+ 3cb:	66 90                	xchg   %ax,%ax
+ 3cd:	66 90                	xchg   %ax,%ax
+ 3cf:	90                   	nop
+
+000003d0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
- 3a4:	56                   	push   %esi
- 3a5:	53                   	push   %ebx
- 3a6:	83 ec 3c             	sub    $0x3c,%esp
- 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+ 3d6:	83 ec 3c             	sub    $0x3c,%esp
+ 3d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 3ac:	89 d1                	mov    %edx,%ecx
+ 3dc:	89 d1                	mov    %edx,%ecx
 {
- 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3de:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3b1:	85 d2                	test   %edx,%edx
- 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
- 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3bd:	74 79                	je     438 <printint+0x98>
+ 3e1:	85 d2                	test   %edx,%edx
+ 3e3:	0f 89 7f 00 00 00    	jns    468 <printint+0x98>
+ 3e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ed:	74 79                	je     468 <printint+0x98>
     neg = 1;
- 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3c6:	f7 d9                	neg    %ecx
+ 3f6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3c8:	31 db                	xor    %ebx,%ebx
- 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f8:	31 db                	xor    %ebx,%ebx
+ 3fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3d0:	89 c8                	mov    %ecx,%eax
- 3d2:	31 d2                	xor    %edx,%edx
- 3d4:	89 cf                	mov    %ecx,%edi
- 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3d9:	0f b6 92 0c 08 00 00 	movzbl 0x80c(%edx),%edx
- 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3e3:	89 d8                	mov    %ebx,%eax
- 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 400:	89 c8                	mov    %ecx,%eax
+ 402:	31 d2                	xor    %edx,%edx
+ 404:	89 cf                	mov    %ecx,%edi
+ 406:	f7 75 c4             	divl   -0x3c(%ebp)
+ 409:	0f b6 92 6c 0a 00 00 	movzbl 0xa6c(%edx),%edx
+ 410:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 413:	89 d8                	mov    %ebx,%eax
+ 415:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 418:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 41b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+ 41e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 421:	76 dd                	jbe    400 <printint+0x30>
   if(neg)
- 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3f6:	85 c9                	test   %ecx,%ecx
- 3f8:	74 0c                	je     406 <printint+0x66>
+ 423:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 426:	85 c9                	test   %ecx,%ecx
+ 428:	74 0c                	je     436 <printint+0x66>
     buf[i++] = '-';
- 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 42a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ff:	89 d8                	mov    %ebx,%eax
+ 42f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 431:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 40d:	eb 07                	jmp    416 <printint+0x76>
- 40f:	90                   	nop
+ 436:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 439:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 43d:	eb 07                	jmp    446 <printint+0x76>
+ 43f:	90                   	nop
     putc(fd, buf[i]);
- 410:	0f b6 13             	movzbl (%ebx),%edx
- 413:	83 eb 01             	sub    $0x1,%ebx
+ 440:	0f b6 13             	movzbl (%ebx),%edx
+ 443:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 416:	83 ec 04             	sub    $0x4,%esp
- 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 41c:	6a 01                	push   $0x1
- 41e:	56                   	push   %esi
- 41f:	57                   	push   %edi
- 420:	e8 ce fe ff ff       	call   2f3 <write>
+ 446:	83 ec 04             	sub    $0x4,%esp
+ 449:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 44c:	6a 01                	push   $0x1
+ 44e:	56                   	push   %esi
+ 44f:	57                   	push   %edi
+ 450:	e8 9e fe ff ff       	call   2f3 <write>
   while(--i >= 0)
- 425:	83 c4 10             	add    $0x10,%esp
- 428:	39 de                	cmp    %ebx,%esi
- 42a:	75 e4                	jne    410 <printint+0x70>
-}
- 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 42f:	5b                   	pop    %ebx
- 430:	5e                   	pop    %esi
- 431:	5f                   	pop    %edi
- 432:	5d                   	pop    %ebp
- 433:	c3                   	ret    
- 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	39 de                	cmp    %ebx,%esi
+ 45a:	75 e4                	jne    440 <printint+0x70>
+}
+ 45c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 45f:	5b                   	pop    %ebx
+ 460:	5e                   	pop    %esi
+ 461:	5f                   	pop    %edi
+ 462:	5d                   	pop    %ebp
+ 463:	c3                   	ret    
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 43f:	eb 87                	jmp    3c8 <printint+0x28>
- 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 44f:	90                   	nop
+ 468:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 46f:	eb 87                	jmp    3f8 <printint+0x28>
+ 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 478:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
 
-00000450 <printf>:
+00000480 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 450:	55                   	push   %ebp
- 451:	89 e5                	mov    %esp,%ebp
- 453:	57                   	push   %edi
- 454:	56                   	push   %esi
- 455:	53                   	push   %ebx
- 456:	83 ec 2c             	sub    $0x2c,%esp
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 489:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 45c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 48c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 45f:	0f b6 13             	movzbl (%ebx),%edx
- 462:	84 d2                	test   %dl,%dl
- 464:	74 6a                	je     4d0 <printf+0x80>
+ 48f:	0f b6 13             	movzbl (%ebx),%edx
+ 492:	84 d2                	test   %dl,%dl
+ 494:	74 6a                	je     500 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 466:	8d 45 10             	lea    0x10(%ebp),%eax
- 469:	83 c3 01             	add    $0x1,%ebx
+ 496:	8d 45 10             	lea    0x10(%ebp),%eax
+ 499:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 49c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 46f:	31 c9                	xor    %ecx,%ecx
+ 49f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 474:	eb 36                	jmp    4ac <printf+0x5c>
- 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 47d:	8d 76 00             	lea    0x0(%esi),%esi
- 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 4a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4a4:	eb 36                	jmp    4dc <printf+0x5c>
+ 4a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 483:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 4b3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 488:	83 f8 25             	cmp    $0x25,%eax
- 48b:	74 15                	je     4a2 <printf+0x52>
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	74 15                	je     4d2 <printf+0x52>
   write(fd, &c, 1);
- 48d:	83 ec 04             	sub    $0x4,%esp
- 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	56                   	push   %esi
- 497:	e8 57 fe ff ff       	call   2f3 <write>
- 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 4bd:	83 ec 04             	sub    $0x4,%esp
+ 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	56                   	push   %esi
+ 4c7:	e8 27 fe ff ff       	call   2f3 <write>
+ 4cc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 49f:	83 c4 10             	add    $0x10,%esp
+ 4cf:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4a2:	0f b6 13             	movzbl (%ebx),%edx
- 4a5:	83 c3 01             	add    $0x1,%ebx
- 4a8:	84 d2                	test   %dl,%dl
- 4aa:	74 24                	je     4d0 <printf+0x80>
+ 4d2:	0f b6 13             	movzbl (%ebx),%edx
+ 4d5:	83 c3 01             	add    $0x1,%ebx
+ 4d8:	84 d2                	test   %dl,%dl
+ 4da:	74 24                	je     500 <printf+0x80>
     c = fmt[i] & 0xff;
- 4ac:	0f b6 c2             	movzbl %dl,%eax
+ 4dc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 4af:	85 c9                	test   %ecx,%ecx
- 4b1:	74 cd                	je     480 <printf+0x30>
+ 4df:	85 c9                	test   %ecx,%ecx
+ 4e1:	74 cd                	je     4b0 <printf+0x30>
       }
     } else if(state == '%'){
- 4b3:	83 f9 25             	cmp    $0x25,%ecx
- 4b6:	75 ea                	jne    4a2 <printf+0x52>
+ 4e3:	83 f9 25             	cmp    $0x25,%ecx
+ 4e6:	75 ea                	jne    4d2 <printf+0x52>
       if(c == 'd'){
- 4b8:	83 f8 25             	cmp    $0x25,%eax
- 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
- 4c1:	83 e8 63             	sub    $0x63,%eax
- 4c4:	83 f8 15             	cmp    $0x15,%eax
- 4c7:	77 17                	ja     4e0 <printf+0x90>
- 4c9:	ff 24 85 b4 07 00 00 	jmp    *0x7b4(,%eax,4)
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	0f 84 07 01 00 00    	je     5f8 <printf+0x178>
+ 4f1:	83 e8 63             	sub    $0x63,%eax
+ 4f4:	83 f8 15             	cmp    $0x15,%eax
+ 4f7:	77 17                	ja     510 <printf+0x90>
+ 4f9:	ff 24 85 14 0a 00 00 	jmp    *0xa14(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4d3:	5b                   	pop    %ebx
- 4d4:	5e                   	pop    %esi
- 4d5:	5f                   	pop    %edi
- 4d6:	5d                   	pop    %ebp
- 4d7:	c3                   	ret    
- 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4df:	90                   	nop
+ 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 503:	5b                   	pop    %ebx
+ 504:	5e                   	pop    %esi
+ 505:	5f                   	pop    %edi
+ 506:	5d                   	pop    %ebp
+ 507:	c3                   	ret    
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
   write(fd, &c, 1);
- 4e0:	83 ec 04             	sub    $0x4,%esp
- 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4e6:	6a 01                	push   $0x1
- 4e8:	57                   	push   %edi
- 4e9:	56                   	push   %esi
- 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ee:	e8 00 fe ff ff       	call   2f3 <write>
+ 510:	83 ec 04             	sub    $0x4,%esp
+ 513:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 516:	6a 01                	push   $0x1
+ 518:	57                   	push   %edi
+ 519:	56                   	push   %esi
+ 51a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 51e:	e8 d0 fd ff ff       	call   2f3 <write>
         putc(fd, c);
- 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 523:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4f7:	83 c4 0c             	add    $0xc,%esp
- 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4fd:	6a 01                	push   $0x1
- 4ff:	57                   	push   %edi
- 500:	56                   	push   %esi
- 501:	e8 ed fd ff ff       	call   2f3 <write>
+ 527:	83 c4 0c             	add    $0xc,%esp
+ 52a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 52d:	6a 01                	push   $0x1
+ 52f:	57                   	push   %edi
+ 530:	56                   	push   %esi
+ 531:	e8 bd fd ff ff       	call   2f3 <write>
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 536:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 509:	31 c9                	xor    %ecx,%ecx
- 50b:	eb 95                	jmp    4a2 <printf+0x52>
- 50d:	8d 76 00             	lea    0x0(%esi),%esi
+ 539:	31 c9                	xor    %ecx,%ecx
+ 53b:	eb 95                	jmp    4d2 <printf+0x52>
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 510:	83 ec 0c             	sub    $0xc,%esp
- 513:	b9 10 00 00 00       	mov    $0x10,%ecx
- 518:	6a 00                	push   $0x0
- 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 51d:	8b 10                	mov    (%eax),%edx
- 51f:	89 f0                	mov    %esi,%eax
- 521:	e8 7a fe ff ff       	call   3a0 <printint>
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 54d:	8b 10                	mov    (%eax),%edx
+ 54f:	89 f0                	mov    %esi,%eax
+ 551:	e8 7a fe ff ff       	call   3d0 <printint>
         ap++;
- 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 52a:	83 c4 10             	add    $0x10,%esp
+ 556:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 55a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52d:	31 c9                	xor    %ecx,%ecx
- 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
- 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	31 c9                	xor    %ecx,%ecx
+ 55f:	e9 6e ff ff ff       	jmp    4d2 <printf+0x52>
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 53b:	8b 10                	mov    (%eax),%edx
+ 568:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 56b:	8b 10                	mov    (%eax),%edx
         ap++;
- 53d:	83 c0 04             	add    $0x4,%eax
- 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 56d:	83 c0 04             	add    $0x4,%eax
+ 570:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 543:	85 d2                	test   %edx,%edx
- 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
+ 573:	85 d2                	test   %edx,%edx
+ 575:	0f 84 8d 00 00 00    	je     608 <printf+0x188>
         while(*s != 0){
- 54b:	0f b6 02             	movzbl (%edx),%eax
+ 57b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 54e:	31 c9                	xor    %ecx,%ecx
+ 57e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 550:	84 c0                	test   %al,%al
- 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
- 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 55b:	89 d3                	mov    %edx,%ebx
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
+ 580:	84 c0                	test   %al,%al
+ 582:	0f 84 4a ff ff ff    	je     4d2 <printf+0x52>
+ 588:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 58b:	89 d3                	mov    %edx,%ebx
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 560:	83 ec 04             	sub    $0x4,%esp
+ 590:	83 ec 04             	sub    $0x4,%esp
           s++;
- 563:	83 c3 01             	add    $0x1,%ebx
- 566:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 593:	83 c3 01             	add    $0x1,%ebx
+ 596:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 569:	6a 01                	push   $0x1
- 56b:	57                   	push   %edi
- 56c:	56                   	push   %esi
- 56d:	e8 81 fd ff ff       	call   2f3 <write>
+ 599:	6a 01                	push   $0x1
+ 59b:	57                   	push   %edi
+ 59c:	56                   	push   %esi
+ 59d:	e8 51 fd ff ff       	call   2f3 <write>
         while(*s != 0){
- 572:	0f b6 03             	movzbl (%ebx),%eax
- 575:	83 c4 10             	add    $0x10,%esp
- 578:	84 c0                	test   %al,%al
- 57a:	75 e4                	jne    560 <printf+0x110>
+ 5a2:	0f b6 03             	movzbl (%ebx),%eax
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	84 c0                	test   %al,%al
+ 5aa:	75 e4                	jne    590 <printf+0x110>
       state = 0;
- 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 57f:	31 c9                	xor    %ecx,%ecx
- 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5af:	31 c9                	xor    %ecx,%ecx
+ 5b1:	e9 1c ff ff ff       	jmp    4d2 <printf+0x52>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 590:	83 ec 0c             	sub    $0xc,%esp
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 598:	6a 01                	push   $0x1
- 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
- 59f:	90                   	nop
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	e9 7b ff ff ff       	jmp    54a <printf+0xca>
+ 5cf:	90                   	nop
         putc(fd, *ap);
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5d3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5a6:	8b 00                	mov    (%eax),%eax
+ 5d6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5a8:	6a 01                	push   $0x1
- 5aa:	57                   	push   %edi
- 5ab:	56                   	push   %esi
+ 5d8:	6a 01                	push   $0x1
+ 5da:	57                   	push   %edi
+ 5db:	56                   	push   %esi
         putc(fd, *ap);
- 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5dc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5af:	e8 3f fd ff ff       	call   2f3 <write>
+ 5df:	e8 0f fd ff ff       	call   2f3 <write>
         ap++;
- 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 5b8:	83 c4 10             	add    $0x10,%esp
+ 5e4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5e8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5bb:	31 c9                	xor    %ecx,%ecx
- 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
- 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5eb:	31 c9                	xor    %ecx,%ecx
+ 5ed:	e9 e0 fe ff ff       	jmp    4d2 <printf+0x52>
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5f8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5cb:	83 ec 04             	sub    $0x4,%esp
- 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
- 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5d7:	90                   	nop
+ 5fb:	83 ec 04             	sub    $0x4,%esp
+ 5fe:	e9 2a ff ff ff       	jmp    52d <printf+0xad>
+ 603:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 607:	90                   	nop
           s = "(null)";
- 5d8:	ba ab 07 00 00       	mov    $0x7ab,%edx
+ 608:	ba 0b 0a 00 00       	mov    $0xa0b,%edx
         while(*s != 0){
- 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5e5:	89 d3                	mov    %edx,%ebx
- 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
- 5ec:	66 90                	xchg   %ax,%ax
- 5ee:	66 90                	xchg   %ax,%ax
+ 60d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 610:	b8 28 00 00 00       	mov    $0x28,%eax
+ 615:	89 d3                	mov    %edx,%ebx
+ 617:	e9 74 ff ff ff       	jmp    590 <printf+0x110>
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
 
-000005f0 <free>:
+00000620 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5f0:	55                   	push   %ebp
+ 620:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f1:	a1 c4 0a 00 00       	mov    0xac4,%eax
+ 621:	a1 c0 0d 00 00       	mov    0xdc0,%eax
 {
- 5f6:	89 e5                	mov    %esp,%ebp
- 5f8:	57                   	push   %edi
- 5f9:	56                   	push   %esi
- 5fa:	53                   	push   %ebx
- 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 626:	89 e5                	mov    %esp,%ebp
+ 628:	57                   	push   %edi
+ 629:	56                   	push   %esi
+ 62a:	53                   	push   %ebx
+ 62b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 62e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 608:	89 c2                	mov    %eax,%edx
- 60a:	8b 00                	mov    (%eax),%eax
- 60c:	39 ca                	cmp    %ecx,%edx
- 60e:	73 30                	jae    640 <free+0x50>
- 610:	39 c1                	cmp    %eax,%ecx
- 612:	72 04                	jb     618 <free+0x28>
+ 631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 638:	89 c2                	mov    %eax,%edx
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	39 ca                	cmp    %ecx,%edx
+ 63e:	73 30                	jae    670 <free+0x50>
+ 640:	39 c1                	cmp    %eax,%ecx
+ 642:	72 04                	jb     648 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 614:	39 c2                	cmp    %eax,%edx
- 616:	72 f0                	jb     608 <free+0x18>
+ 644:	39 c2                	cmp    %eax,%edx
+ 646:	72 f0                	jb     638 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61e:	39 f8                	cmp    %edi,%eax
- 620:	74 30                	je     652 <free+0x62>
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	74 30                	je     682 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 652:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 625:	8b 42 04             	mov    0x4(%edx),%eax
- 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 62b:	39 f1                	cmp    %esi,%ecx
- 62d:	74 3a                	je     669 <free+0x79>
+ 655:	8b 42 04             	mov    0x4(%edx),%eax
+ 658:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 3a                	je     699 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 62f:	89 0a                	mov    %ecx,(%edx)
+ 65f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 631:	5b                   	pop    %ebx
+ 661:	5b                   	pop    %ebx
   freep = p;
- 632:	89 15 c4 0a 00 00    	mov    %edx,0xac4
+ 662:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
 }
- 638:	5e                   	pop    %esi
- 639:	5f                   	pop    %edi
- 63a:	5d                   	pop    %ebp
- 63b:	c3                   	ret    
- 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 c2                	cmp    %eax,%edx
- 642:	72 c4                	jb     608 <free+0x18>
- 644:	39 c1                	cmp    %eax,%ecx
- 646:	73 c0                	jae    608 <free+0x18>
+ 670:	39 c2                	cmp    %eax,%edx
+ 672:	72 c4                	jb     638 <free+0x18>
+ 674:	39 c1                	cmp    %eax,%ecx
+ 676:	73 c0                	jae    638 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 f8                	cmp    %edi,%eax
- 650:	75 d0                	jne    622 <free+0x32>
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 f8                	cmp    %edi,%eax
+ 680:	75 d0                	jne    652 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 652:	03 70 04             	add    0x4(%eax),%esi
- 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 682:	03 70 04             	add    0x4(%eax),%esi
+ 685:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 658:	8b 02                	mov    (%edx),%eax
- 65a:	8b 00                	mov    (%eax),%eax
- 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 688:	8b 02                	mov    (%edx),%eax
+ 68a:	8b 00                	mov    (%eax),%eax
+ 68c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 65f:	8b 42 04             	mov    0x4(%edx),%eax
- 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 665:	39 f1                	cmp    %esi,%ecx
- 667:	75 c6                	jne    62f <free+0x3f>
+ 68f:	8b 42 04             	mov    0x4(%edx),%eax
+ 692:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 695:	39 f1                	cmp    %esi,%ecx
+ 697:	75 c6                	jne    65f <free+0x3f>
     p->s.size += bp->s.size;
- 669:	03 43 fc             	add    -0x4(%ebx),%eax
+ 699:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 66c:	89 15 c4 0a 00 00    	mov    %edx,0xac4
+ 69c:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
     p->s.size += bp->s.size;
- 672:	89 42 04             	mov    %eax,0x4(%edx)
+ 6a2:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 678:	89 0a                	mov    %ecx,(%edx)
+ 6a5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6a8:	89 0a                	mov    %ecx,(%edx)
 }
- 67a:	5b                   	pop    %ebx
- 67b:	5e                   	pop    %esi
- 67c:	5f                   	pop    %edi
- 67d:	5d                   	pop    %ebp
- 67e:	c3                   	ret    
- 67f:	90                   	nop
+ 6aa:	5b                   	pop    %ebx
+ 6ab:	5e                   	pop    %esi
+ 6ac:	5f                   	pop    %edi
+ 6ad:	5d                   	pop    %ebp
+ 6ae:	c3                   	ret    
+ 6af:	90                   	nop
 
-00000680 <malloc>:
+000006b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 680:	55                   	push   %ebp
- 681:	89 e5                	mov    %esp,%ebp
- 683:	57                   	push   %edi
- 684:	56                   	push   %esi
- 685:	53                   	push   %ebx
- 686:	83 ec 1c             	sub    $0x1c,%esp
+ 6b0:	55                   	push   %ebp
+ 6b1:	89 e5                	mov    %esp,%ebp
+ 6b3:	57                   	push   %edi
+ 6b4:	56                   	push   %esi
+ 6b5:	53                   	push   %ebx
+ 6b6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 689:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6b9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 68c:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
+ 6bc:	8b 3d c0 0d 00 00    	mov    0xdc0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 692:	8d 70 07             	lea    0x7(%eax),%esi
- 695:	c1 ee 03             	shr    $0x3,%esi
- 698:	83 c6 01             	add    $0x1,%esi
+ 6c2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c5:	c1 ee 03             	shr    $0x3,%esi
+ 6c8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 69b:	85 ff                	test   %edi,%edi
- 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+ 6cb:	85 ff                	test   %edi,%edi
+ 6cd:	0f 84 9d 00 00 00    	je     770 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a3:	8b 17                	mov    (%edi),%edx
+ 6d3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6a8:	39 f1                	cmp    %esi,%ecx
- 6aa:	73 6a                	jae    716 <malloc+0x96>
- 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6b1:	39 de                	cmp    %ebx,%esi
- 6b3:	0f 43 de             	cmovae %esi,%ebx
+ 6d5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d8:	39 f1                	cmp    %esi,%ecx
+ 6da:	73 6a                	jae    746 <malloc+0x96>
+ 6dc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6e1:	39 de                	cmp    %ebx,%esi
+ 6e3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
- 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6e6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6f0:	eb 17                	jmp    709 <malloc+0x59>
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c8:	8b 02                	mov    (%edx),%eax
+ 6f8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cd:	39 f1                	cmp    %esi,%ecx
- 6cf:	73 4f                	jae    720 <malloc+0xa0>
+ 6fa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fd:	39 f1                	cmp    %esi,%ecx
+ 6ff:	73 4f                	jae    750 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6d1:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
- 6d7:	89 c2                	mov    %eax,%edx
- 6d9:	39 d7                	cmp    %edx,%edi
- 6db:	75 eb                	jne    6c8 <malloc+0x48>
+ 701:	8b 3d c0 0d 00 00    	mov    0xdc0,%edi
+ 707:	89 c2                	mov    %eax,%edx
+ 709:	39 d7                	cmp    %edx,%edi
+ 70b:	75 eb                	jne    6f8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6dd:	83 ec 0c             	sub    $0xc,%esp
- 6e0:	ff 75 e4             	push   -0x1c(%ebp)
- 6e3:	e8 73 fc ff ff       	call   35b <sbrk>
+ 70d:	83 ec 0c             	sub    $0xc,%esp
+ 710:	ff 75 e4             	push   -0x1c(%ebp)
+ 713:	e8 43 fc ff ff       	call   35b <sbrk>
   if(p == (char*)-1)
- 6e8:	83 c4 10             	add    $0x10,%esp
- 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ee:	74 1c                	je     70c <malloc+0x8c>
+ 718:	83 c4 10             	add    $0x10,%esp
+ 71b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 71e:	74 1c                	je     73c <malloc+0x8c>
   hp->s.size = nu;
- 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 720:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6f3:	83 ec 0c             	sub    $0xc,%esp
- 6f6:	83 c0 08             	add    $0x8,%eax
- 6f9:	50                   	push   %eax
- 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
+ 723:	83 ec 0c             	sub    $0xc,%esp
+ 726:	83 c0 08             	add    $0x8,%eax
+ 729:	50                   	push   %eax
+ 72a:	e8 f1 fe ff ff       	call   620 <free>
   return freep;
- 6ff:	8b 15 c4 0a 00 00    	mov    0xac4,%edx
+ 72f:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
       if((p = morecore(nunits)) == 0)
- 705:	83 c4 10             	add    $0x10,%esp
- 708:	85 d2                	test   %edx,%edx
- 70a:	75 bc                	jne    6c8 <malloc+0x48>
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	85 d2                	test   %edx,%edx
+ 73a:	75 bc                	jne    6f8 <malloc+0x48>
         return 0;
   }
 }
- 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 70f:	31 c0                	xor    %eax,%eax
+ 73f:	31 c0                	xor    %eax,%eax
 }
- 711:	5b                   	pop    %ebx
- 712:	5e                   	pop    %esi
- 713:	5f                   	pop    %edi
- 714:	5d                   	pop    %ebp
- 715:	c3                   	ret    
+ 741:	5b                   	pop    %ebx
+ 742:	5e                   	pop    %esi
+ 743:	5f                   	pop    %edi
+ 744:	5d                   	pop    %ebp
+ 745:	c3                   	ret    
     if(p->s.size >= nunits){
- 716:	89 d0                	mov    %edx,%eax
- 718:	89 fa                	mov    %edi,%edx
- 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 746:	89 d0                	mov    %edx,%eax
+ 748:	89 fa                	mov    %edi,%edx
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 720:	39 ce                	cmp    %ecx,%esi
- 722:	74 4c                	je     770 <malloc+0xf0>
+ 750:	39 ce                	cmp    %ecx,%esi
+ 752:	74 4c                	je     7a0 <malloc+0xf0>
         p->s.size -= nunits;
- 724:	29 f1                	sub    %esi,%ecx
- 726:	89 48 04             	mov    %ecx,0x4(%eax)
+ 754:	29 f1                	sub    %esi,%ecx
+ 756:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 759:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 72c:	89 70 04             	mov    %esi,0x4(%eax)
+ 75c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 72f:	89 15 c4 0a 00 00    	mov    %edx,0xac4
+ 75f:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
 }
- 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 765:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 738:	83 c0 08             	add    $0x8,%eax
+ 768:	83 c0 08             	add    $0x8,%eax
 }
- 73b:	5b                   	pop    %ebx
- 73c:	5e                   	pop    %esi
- 73d:	5f                   	pop    %edi
- 73e:	5d                   	pop    %ebp
- 73f:	c3                   	ret    
+ 76b:	5b                   	pop    %ebx
+ 76c:	5e                   	pop    %esi
+ 76d:	5f                   	pop    %edi
+ 76e:	5d                   	pop    %ebp
+ 76f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 740:	c7 05 c4 0a 00 00 c8 	movl   $0xac8,0xac4
- 747:	0a 00 00 
+ 770:	c7 05 c0 0d 00 00 c4 	movl   $0xdc4,0xdc0
+ 777:	0d 00 00 
     base.s.size = 0;
- 74a:	bf c8 0a 00 00       	mov    $0xac8,%edi
+ 77a:	bf c4 0d 00 00       	mov    $0xdc4,%edi
     base.s.ptr = freep = prevp = &base;
- 74f:	c7 05 c8 0a 00 00 c8 	movl   $0xac8,0xac8
- 756:	0a 00 00 
+ 77f:	c7 05 c4 0d 00 00 c4 	movl   $0xdc4,0xdc4
+ 786:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 759:	89 fa                	mov    %edi,%edx
+ 789:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 75b:	c7 05 cc 0a 00 00 00 	movl   $0x0,0xacc
- 762:	00 00 00 
+ 78b:	c7 05 c8 0d 00 00 00 	movl   $0x0,0xdc8
+ 792:	00 00 00 
     if(p->s.size >= nunits){
- 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
- 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 795:	e9 42 ff ff ff       	jmp    6dc <malloc+0x2c>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 770:	8b 08                	mov    (%eax),%ecx
- 772:	89 0a                	mov    %ecx,(%edx)
- 774:	eb b9                	jmp    72f <malloc+0xaf>
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb b9                	jmp    75f <malloc+0xaf>
+ 7a6:	66 90                	xchg   %ax,%ax
+ 7a8:	66 90                	xchg   %ax,%ax
+ 7aa:	66 90                	xchg   %ax,%ax
+ 7ac:	66 90                	xchg   %ax,%ax
+ 7ae:	66 90                	xchg   %ax,%ax
+
+000007b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7b0:	55                   	push   %ebp
+ 7b1:	b8 e4 0d 00 00       	mov    $0xde4,%eax
+ 7b6:	89 e5                	mov    %esp,%ebp
+ 7b8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7bb:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+    for (mti=1; mti<N; mti++)
+ 7c1:	eb 08                	jmp    7cb <sgenrand+0x1b>
+ 7c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7c7:	90                   	nop
+ 7c8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7cb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7d1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7d3:	3d 9c 17 00 00       	cmp    $0x179c,%eax
+ 7d8:	75 ee                	jne    7c8 <sgenrand+0x18>
+ 7da:	c7 05 b4 0d 00 00 70 	movl   $0x270,0xdb4
+ 7e1:	02 00 00 
+}
+ 7e4:	5d                   	pop    %ebp
+ 7e5:	c3                   	ret    
+ 7e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007f0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7f0:	a1 b4 0d 00 00       	mov    0xdb4,%eax
+ 7f5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7fa:	7f 3d                	jg     839 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7fc:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 803:	8d 50 01             	lea    0x1(%eax),%edx
+ 806:	89 15 b4 0d 00 00    	mov    %edx,0xdb4
+    y ^= TEMPERING_SHIFT_U(y);
+ 80c:	89 ca                	mov    %ecx,%edx
+ 80e:	c1 ea 0b             	shr    $0xb,%edx
+ 811:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 813:	89 d0                	mov    %edx,%eax
+ 815:	c1 e0 07             	shl    $0x7,%eax
+ 818:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 81d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 81f:	89 c2                	mov    %eax,%edx
+ 821:	c1 e2 0f             	shl    $0xf,%edx
+ 824:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 82a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 82c:	89 d0                	mov    %edx,%eax
+ 82e:	c1 e8 12             	shr    $0x12,%eax
+ 831:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 833:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 838:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 839:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 83e:	0f 84 d4 00 00 00    	je     918 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 844:	31 c0                	xor    %eax,%eax
+ 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 850:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 857:	83 c0 01             	add    $0x1,%eax
+ 85a:	8b 14 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%edx
+ 861:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 867:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 86d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 86f:	89 d1                	mov    %edx,%ecx
+ 871:	83 e2 01             	and    $0x1,%edx
+ 874:	d1 e9                	shr    %ecx
+ 876:	33 0c 85 10 14 00 00 	xor    0x1410(,%eax,4),%ecx
+ 87d:	33 0c 95 80 0a 00 00 	xor    0xa80(,%edx,4),%ecx
+ 884:	89 0c 85 dc 0d 00 00 	mov    %ecx,0xddc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 88b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 890:	75 be                	jne    850 <genrand+0x60>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 898:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 89f:	83 c0 01             	add    $0x1,%eax
+ 8a2:	8b 14 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%edx
+ 8a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8b7:	89 d1                	mov    %edx,%ecx
+ 8b9:	83 e2 01             	and    $0x1,%edx
+ 8bc:	d1 e9                	shr    %ecx
+ 8be:	33 0c 85 50 0a 00 00 	xor    0xa50(,%eax,4),%ecx
+ 8c5:	33 0c 95 80 0a 00 00 	xor    0xa80(,%edx,4),%ecx
+ 8cc:	89 0c 85 dc 0d 00 00 	mov    %ecx,0xddc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8d8:	75 be                	jne    898 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8da:	8b 0d e0 0d 00 00    	mov    0xde0,%ecx
+ 8e0:	a1 9c 17 00 00       	mov    0x179c,%eax
+ 8e5:	89 ca                	mov    %ecx,%edx
+ 8e7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8ec:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8f2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8f4:	89 c2                	mov    %eax,%edx
+ 8f6:	83 e0 01             	and    $0x1,%eax
+ 8f9:	d1 ea                	shr    %edx
+ 8fb:	33 15 10 14 00 00    	xor    0x1410,%edx
+ 901:	33 14 85 80 0a 00 00 	xor    0xa80(,%eax,4),%edx
+ 908:	89 15 9c 17 00 00    	mov    %edx,0x179c
+ 90e:	ba 01 00 00 00       	mov    $0x1,%edx
+ 913:	e9 ee fe ff ff       	jmp    806 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 918:	b8 e4 0d 00 00       	mov    $0xde4,%eax
+ 91d:	b9 9c 17 00 00       	mov    $0x179c,%ecx
+ 922:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 927:	c7 05 e0 0d 00 00 05 	movl   $0x1105,0xde0
+ 92e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 931:	eb 08                	jmp    93b <genrand+0x14b>
+ 933:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 937:	90                   	nop
+ 938:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 93b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 941:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 943:	39 c1                	cmp    %eax,%ecx
+ 945:	75 f1                	jne    938 <genrand+0x148>
+ 947:	e9 f8 fe ff ff       	jmp    844 <genrand+0x54>
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 950:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 951:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 953:	89 e5                	mov    %esp,%ebp
+ 955:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 956:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 959:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 95a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 95f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 962:	89 d8                	mov    %ebx,%eax
+ 964:	f7 f1                	div    %ecx
+ 966:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 968:	29 d3                	sub    %edx,%ebx
+ 96a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 970:	e8 7b fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+}
+ 97b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 97c:	f7 f6                	div    %esi
+}
+ 97e:	5e                   	pop    %esi
+ 97f:	5d                   	pop    %ebp
+ 980:	c3                   	ret    
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98f:	90                   	nop
+
+00000990 <randomrange>:
+
+int randomrange(int low, int high){
+ 990:	55                   	push   %ebp
+ 991:	89 e5                	mov    %esp,%ebp
+ 993:	57                   	push   %edi
+ 994:	56                   	push   %esi
+ 995:	53                   	push   %ebx
+ 996:	83 ec 0c             	sub    $0xc,%esp
+ 999:	8b 75 08             	mov    0x8(%ebp),%esi
+ 99c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 99f:	39 f0                	cmp    %esi,%eax
+ 9a1:	7d 06                	jge    9a9 <randomrange+0x19>
+ 9a3:	89 f2                	mov    %esi,%edx
+ 9a5:	89 c6                	mov    %eax,%esi
+ 9a7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9a9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9ab:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9b0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9b2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b5:	89 d8                	mov    %ebx,%eax
+ 9b7:	f7 f1                	div    %ecx
+ 9b9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 9bb:	29 d3                	sub    %edx,%ebx
+ 9bd:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 9c0:	e8 2b fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9c5:	39 d8                	cmp    %ebx,%eax
+ 9c7:	73 f7                	jae    9c0 <randomrange+0x30>
+  return x/bin_size;
+ 9c9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 9cb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9ce:	f7 f7                	div    %edi
+}
+ 9d0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9d1:	01 f0                	add    %esi,%eax
+}
+ 9d3:	5e                   	pop    %esi
+ 9d4:	5f                   	pop    %edi
+ 9d5:	5d                   	pop    %ebp
+ 9d6:	c3                   	ret    
diff -ruN xv6-public/mkdir.d xv6-public-with-hybrid/mkdir.d
--- xv6-public/mkdir.d	2022-09-06 09:47:10.197805000 +0530
+++ xv6-public-with-hybrid/mkdir.d	2022-10-07 18:50:00.672952700 +0530
@@ -1 +1,2 @@
-mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/mkdir.o and xv6-public-with-hybrid/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-public-with-hybrid/mkdir.sym
--- xv6-public/mkdir.sym	2022-09-06 09:47:10.249863000 +0530
+++ xv6-public-with-hybrid/mkdir.sym	2022-10-07 18:50:00.788952360 +0530
@@ -1,20 +1,28 @@
 00000000 mkdir.c
 00000000 ulib.c
 00000000 printf.c
-000003a0 printint
-0000080c digits.0
+000003d0 printint
+00000a6c digits.0
 00000000 umalloc.c
-00000ac4 freep
-00000ac8 base
+00000dc0 freep
+00000dc4 base
+00000000 random.c
+00000de0 mt
+00000db4 mti
+00000a80 mag01.0
 00000080 strcpy
-00000450 printf
+000007b0 sgenrand
+00000480 printf
 00000383 thread_exit
 000002a0 memmove
 0000031b mknod
 000001a0 gets
 00000353 getpid
-00000680 malloc
+000006b0 malloc
 00000363 sleep
+000003b3 get_burst_time
+00000950 random_at_most
+000003bb getCurrentInfo
 000002e3 pipe
 000002f3 write
 0000032b fstat
@@ -27,14 +35,19 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000ac4 __bss_start
+00000db8 __bss_start
 00000140 memset
 00000000 main
+000003ab set_burst_time
 000000b0 strcmp
 0000034b dup
+0000039b getMaxPid
+000007f0 genrand
+00000393 getNumProc
+000003a3 getProcInfo
 00000210 stat
-00000ac4 _edata
-00000ad0 _end
+00000db8 _edata
+000017a0 _end
 00000333 link
 000002d3 exit
 00000260 atoi
@@ -43,7 +56,9 @@
 00000313 open
 00000160 strchr
 00000373 thread_create
+000003c3 getCurrentPID
+00000990 randomrange
 0000033b mkdir
 000002fb close
 0000037b thread_join
-000005f0 free
+00000620 free
Binary files xv6-public/mp.o and xv6-public-with-hybrid/mp.o differ
Binary files xv6-public/picirq.o and xv6-public-with-hybrid/picirq.o differ
Binary files xv6-public/pipe.o and xv6-public-with-hybrid/pipe.o differ
diff -ruN xv6-public/printf.d xv6-public-with-hybrid/printf.d
--- xv6-public/printf.d	2022-09-06 09:47:09.222253000 +0530
+++ xv6-public-with-hybrid/printf.d	2022-10-07 18:49:58.356959432 +0530
@@ -1 +1,2 @@
-printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/printf.o and xv6-public-with-hybrid/printf.o differ
diff -ruN xv6-public/proc.c xv6-public-with-hybrid/proc.c
--- xv6-public/proc.c	2022-09-05 21:26:26.380271000 +0530
+++ xv6-public-with-hybrid/proc.c	2022-10-07 12:43:29.847352547 +0530
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
 struct {
   struct spinlock lock;
@@ -14,16 +15,309 @@
 
 static struct proc *initproc;
 
+int quant = 1000;
+
+//implementation of Priority Queue
+struct {
+	int sze;
+	struct spinlock lock;
+	struct proc* proc[NPROC+1];
+} priorityQ;
+
+struct {
+	int sze;
+	struct spinlock lock;
+	struct proc* proc[NPROC+1];
+} priorityQ2;
+
+
+int isEmpty(){
+	acquire(&priorityQ.lock);
+	if(priorityQ.sze == 0){
+		release(&priorityQ.lock);
+		return 1;
+	}
+	else{
+		release(&priorityQ.lock);
+		return 0;
+	}
+}
+
+int isEmpty2(){
+	acquire(&priorityQ2.lock);
+	if(priorityQ2.sze == 0){
+		release(&priorityQ2.lock);
+		return 1;
+	}
+	else{
+		release(&priorityQ2.lock);
+		return 0;
+	}
+}
+
+int isFull(){
+	acquire(&priorityQ.lock);
+	if(priorityQ.sze==NPROC){
+		release(&priorityQ.lock);
+		return 1;
+	}
+	else{
+		release(&priorityQ.lock);
+		return 0;
+	}
+}
+
+int isFull2(){
+	acquire(&priorityQ2.lock);
+	if(priorityQ2.sze==NPROC){
+		release(&priorityQ2.lock);
+		return 1;
+	}
+	else{
+		release(&priorityQ2.lock);
+		return 0;
+	}
+}
+
+void insertIntoPQ(struct proc *p){
+	if(isFull())
+		return;
+
+	acquire(&priorityQ.lock);
+	priorityQ.sze++;
+	priorityQ.proc[priorityQ.sze]=p;
+	int curr=priorityQ.sze;
+	while(!(curr<=1) && ((priorityQ.proc[curr]->burst_time)<(priorityQ.proc[curr/2]->burst_time))){
+		struct proc* temp=priorityQ.proc[curr];
+		priorityQ.proc[curr]=priorityQ.proc[curr/2];
+		priorityQ.proc[curr/2]=temp;
+		curr/=2;
+	}
+	release(&priorityQ.lock);
+}
+
+void insertIntoPQ2(struct proc *p){
+	if(isFull2())
+		return;
+
+	acquire(&priorityQ2.lock);
+	priorityQ2.sze++;
+	priorityQ2.proc[priorityQ2.sze]=p;
+	int curr=priorityQ2.sze;
+	while(curr>1 && ((priorityQ2.proc[curr]->burst_time)<(priorityQ2.proc[curr/2]->burst_time))){
+		struct proc* temp=priorityQ2.proc[curr];
+		priorityQ2.proc[curr]=priorityQ2.proc[curr/2];
+		priorityQ2.proc[curr/2]=temp;
+		curr/=2;
+	}
+	release(&priorityQ2.lock);
+}
+
+
+void heapify(int curr){
+
+	acquire(&priorityQ.lock);
+	while(curr*2<=priorityQ.sze){
+		if(curr*2+1<=priorityQ.sze){
+			if((priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2]->burst_time)&&(priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2+1]->burst_time))
+				break;
+			else{
+				if((priorityQ.proc[curr*2]->burst_time)<=(priorityQ.proc[curr*2+1]->burst_time)){
+					struct proc* temp=priorityQ.proc[curr*2];
+					priorityQ.proc[curr*2]=priorityQ.proc[curr];
+					priorityQ.proc[curr]=temp;
+					curr*=2;
+				} else {
+					struct proc* temp=priorityQ.proc[curr*2+1];
+					priorityQ.proc[curr*2+1]=priorityQ.proc[curr];
+					priorityQ.proc[curr]=temp;
+					curr*=2;
+					curr++;
+				}
+			}
+		} else {
+			if((priorityQ.proc[curr]->burst_time)<=(priorityQ.proc[curr*2]->burst_time))
+				break;
+			else{
+				struct proc* temp=priorityQ.proc[curr*2];
+				priorityQ.proc[curr*2]=priorityQ.proc[curr];
+				priorityQ.proc[curr]=temp;
+				curr*=2;
+			}
+		}
+	}
+	release(&priorityQ.lock);
+}
+
+void heapify2(int curr){
+
+	acquire(&priorityQ2.lock);
+	while(curr*2<=priorityQ2.sze){
+		if(curr*2+1<=priorityQ2.sze){
+			if((priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2]->burst_time)&&(priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2+1]->burst_time))
+				break;
+			else{
+				if((priorityQ2.proc[curr*2]->burst_time)<=(priorityQ2.proc[curr*2+1]->burst_time)){
+					struct proc* temp=priorityQ2.proc[curr*2];
+					priorityQ2.proc[curr*2]=priorityQ2.proc[curr];
+					priorityQ2.proc[curr]=temp;
+					curr*=2;
+				} else {
+					struct proc* temp=priorityQ2.proc[curr*2+1];
+					priorityQ2.proc[curr*2+1]=priorityQ2.proc[curr];
+					priorityQ2.proc[curr]=temp;
+					curr*=2;
+					curr++;
+				}
+			}
+		} else {
+			if((priorityQ2.proc[curr]->burst_time)<=(priorityQ2.proc[curr*2]->burst_time))
+				break;
+			else{
+				struct proc* temp=priorityQ2.proc[curr*2];
+				priorityQ2.proc[curr*2]=priorityQ2.proc[curr];
+				priorityQ2.proc[curr]=temp;
+				curr*=2;
+			}
+		}
+	}
+	release(&priorityQ2.lock);
+}
+
+struct proc * extractMin(){
+
+	if(isEmpty())
+		return 0;
+
+	acquire(&priorityQ.lock);
+	struct proc* minimum=priorityQ.proc[1];
+	if(priorityQ.sze==1)
+	{
+		priorityQ.sze=0;
+		release(&priorityQ.lock);
+	}
+	else{
+		priorityQ.proc[1] = priorityQ.proc[priorityQ.sze];
+		priorityQ.sze--;
+		release(&priorityQ.lock);
+
+		heapify(1);
+	}
+	return minimum;
+}
+
+struct proc * extractMin2(){
+
+	if(isEmpty2())
+		return 0;
+
+	acquire(&priorityQ2.lock);
+	struct proc* minimum=priorityQ2.proc[1];
+	if(priorityQ2.sze==1)
+	{
+		priorityQ2.sze=0;
+		release(&priorityQ2.lock);
+	}
+	else{
+		priorityQ2.proc[1] = priorityQ2.proc[priorityQ2.sze];
+		priorityQ2.sze--;
+		release(&priorityQ2.lock);
+
+		heapify2(1);
+	}
+	return minimum;
+}
+
+void changeKey(int pid, int newBT){
+
+	acquire(&priorityQ.lock);
+
+	struct proc* p;
+	int curr=-1;
+	for(int i=1;i<=priorityQ.sze;i++){
+		if(priorityQ.proc[i]->pid == pid){
+			p=priorityQ.proc[i];
+			curr=i;
+			break;
+		}
+	}
+
+	if(curr==-1){
+		release(&priorityQ.lock);
+		return;
+	}
+
+
+	if(curr==priorityQ.sze){
+		priorityQ.sze--;
+		release(&priorityQ.lock);
+	}
+	else{
+		priorityQ.proc[curr]=priorityQ.proc[priorityQ.sze];
+		priorityQ.sze--;
+		release(&priorityQ.lock);
+
+		heapify(curr);
+	}
+
+	p->burst_time=newBT;
+	insertIntoPQ(p);
+
+}
+
+void changeKey2(int pid, int newBT){
+
+	acquire(&priorityQ2.lock);
+
+	struct proc* p;
+	int curr=-1;
+	for(int i=1;i<=priorityQ2.sze;i++){
+		if(priorityQ2.proc[i]->pid == pid){
+			p=priorityQ2.proc[i];
+			curr=i;
+			break;
+		}
+	}
+
+	if(curr==-1){
+		release(&priorityQ2.lock);
+		return;
+	}
+
+
+	if(curr==priorityQ2.sze){
+		priorityQ2.sze--;
+		release(&priorityQ2.lock);
+	}
+	else{
+		priorityQ2.proc[curr]=priorityQ2.proc[priorityQ2.sze];
+		priorityQ2.sze--;
+		release(&priorityQ2.lock);
+
+		heapify2(curr);
+	}
+
+	p->burst_time=newBT;
+	insertIntoPQ2(p);
+
+}
+
+
+
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+struct proc defaultParent;
+
 void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  initlock(&priorityQ.lock, "priorityQ");
+  initlock(&priorityQ2.lock, "priorityQ2");
 }
 
 // Must be called with interrupts disabled
@@ -88,7 +382,10 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->numSwitches = 0;
+  p->parent = &defaultParent;
+  p->burst_time = 0;
+  p->run_time = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -120,6 +417,14 @@
 void
 userinit(void)
 {
+  acquire(&priorityQ.lock);
+  priorityQ2.sze = 0;
+  release(&priorityQ.lock);
+
+  acquire(&priorityQ2.lock);
+  priorityQ2.sze = 0;
+  release(&priorityQ2.lock);
+
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
@@ -147,9 +452,14 @@
   // writes to be visible, and the lock is also needed
   // because the assignment might not be atomic.
   acquire(&ptable.lock);
-
+  
+  short check = (p->state!=RUNNABLE);
   p->state = RUNNABLE;
 
+  //Insert Process Into Queue
+  if(check)
+  	insertIntoPQ(p);
+
   release(&ptable.lock);
 }
 
@@ -214,8 +524,13 @@
 
   acquire(&ptable.lock);
 
+  short check = (np->state!=RUNNABLE);
   np->state = RUNNABLE;
 
+  //Insert Process Into Queue
+  if(check)
+  	insertIntoPQ(np);
+
   release(&ptable.lock);
 
   return pid;
@@ -319,39 +634,70 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
-void
-scheduler(void)
-{
+void scheduler(void){
+  defaultParent.pid = -2;
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
+    /*
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
+      if(p->state != RUNNABLE) continue;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      (p->numSwitches)++;
       swtch(&(c->scheduler), p->context);
       switchkvm();
-
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
     }
+    release(&ptable.lock);*/
+    /*
+    // NEW Shortest Job Scheduler
+    acquire(&ptable.lock);
+  	if((p = extractMin()) == 0){release(&ptable.lock);continue;}
+  	if(p->state!=RUNNABLE){release(&ptable.lock);continue;}
+  	c->proc = p;
+  	switchuvm(p);
+  	p->state = RUNNING;
+  	(p->numSwitches)++;
+  	swtch(&(c->scheduler), p->context);
+  	switchkvm();
+  	c->proc = 0;
+    release(&ptable.lock);*/
+    // New Hybrid Scheduler
+    acquire(&ptable.lock);
+    if(isEmpty()){
+      if(isEmpty2()){ 
+      	goto label;
+      }
+      while(!isEmpty2()){
+        if((p = extractMin2()) == 0){release(&ptable.lock);break;}
+        insertIntoPQ(p);
+      }
+    }
+    label:
+  	if((p = extractMin()) == 0){release(&ptable.lock);continue;}
+  	if(p->state!=RUNNABLE) 
+  		{release(&ptable.lock);continue;}
+  	c->proc = p;
+  	switchuvm(p);
+  	p->state = RUNNING;
+  	(p->numSwitches)++;
+  	swtch(&(c->scheduler), p->context);
+  	switchkvm();
+  	c->proc = 0;
+  	
     release(&ptable.lock);
-
   }
 }
 
@@ -382,15 +728,32 @@
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
-{
+void yield(void){
   acquire(&ptable.lock);  //DOC: yieldlock
+  short check = (myproc()->state != RUNNABLE);
+  myproc()->state = RUNNABLE;
+
+  //Insert Process Into Queue
+  if(check)
+  insertIntoPQ(myproc());
+  
+  sched();
+  release(&ptable.lock);
+}
+
+void new_yield(void){
+  acquire(&ptable.lock);
+
   myproc()->state = RUNNABLE;
+
+  insertIntoPQ2(myproc());
+
   sched();
   release(&ptable.lock);
+
 }
 
+
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
@@ -460,8 +823,13 @@
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
+    	short check = (p->state !=RUNNABLE);
+
       p->state = RUNNABLE;
+      if(check)
+      	insertIntoPQ(p);
+    }
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +854,14 @@
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if(p->state == SLEEPING){
+        short check = (p->state != RUNNABLE);
+
         p->state = RUNNABLE;
+
+        if(check)
+    	insertIntoPQ(p);
+    }
       release(&ptable.lock);
       return 0;
     }
@@ -533,118 +907,225 @@
   }
 }
 
-// implemented by us
-
 int thread_create(void (*fcn)(void *),void *arg,void* stack){
-  if((uint)stack==0) // if no memory is allocated to the stack return -1
+  if((uint)stack==0)
   {
     return -1;
   }
-  int i,pid;  // pid is the process id 
-  struct proc *newproc;			//new process / child process
-  struct proc *current_proc = myproc();  //Current process in which thread is being created
-
-  if((newproc=allocproc())==0)return -1;  // allocating a new process to child if not successful return -1
-  newproc->pgdir = current_proc->pgdir;        // making sure both have same page directory
-  newproc->sz = current_proc->sz;              // making sure both have same size
-  newproc->parent = current_proc;              // pointing parent to child
-  *newproc->tf = *current_proc->tf;            // same trap frame
-
-  newproc->isThread = 1;                  // telling new process it is a thread
-
-  newproc->tf->eax = 0;                   // when new process gets finished 0 will be returned
-
-  newproc->tf->eip = (int)fcn;            // this is the function on which thread will work
-
-  newproc->tf->esp = (int) stack + 4096;  
-  newproc->tf->esp -= 4;
-  *((int*)(newproc->tf->esp)) = (int) arg;
-  newproc->tf->esp-=4;
-  *((int*)(newproc->tf->esp)) = 0xffffffff;
-  for(i=0;i<NOFILE;++i)
+  int i,pid; 
+  struct proc *np;  //Create this pointer to alloacate to the new process created by the thread_create() system call
+  struct proc *curproc = myproc();  //Gets referemce to the Current process in which thread is being created
+
+  if((np=allocproc())==0)return -1; //If the process could not be created return -1  
+
+
+  //The page directory,size,parent process and memory allocated to this process is same as the current process
+  np->pgdir = curproc->pgdir;
+  np->sz = curproc->sz;
+  np->parent = curproc;
+  *np->tf = *curproc->tf;   //Equates all variables in the current processs to the new thread...basically this will be the set of all shared variables
+
+  np->isThread = 1;   //Is this process a thread?...Used in thread join later
+
+  np->tf->eax = 0;
+
+  np->tf->eip = (int)fcn;   //Sets the instruction pointer to the beginning of the reference to the function call reference (fcn)
+
+  np->tf->esp = (int) stack + 4096;   //Allocates 4096 bytes of stack memory to the thread
+  np->tf->esp -= 4;  //Decrement stack pointer to store the local variable arg
+  *((int*)(np->tf->esp)) = (int) arg;  //Store the local variable arg
+  np->tf->esp-=4;  //Decrement the stack pointer to store the initial Program Counter value
+  *((int*)(np->tf->esp)) = 0xffffffff;  //Store the initial program counter value
+
+
+  /*Since the files of a process and its threaded process is same..so we check all files to see if it is opened in the parent process
+  If yes then we also open them in the threaded process. This is done using the below for loop*/
+
+  for(i=0;i<NOFILE;++i)   //NOFILE denotes the total number of files opened in the kernel
   {
-  	if(current_proc->ofile[i])
+  	if(curproc->ofile[i])   //If the file is opened in the parent process
 	{
-		newproc->ofile[i] = filedup(current_proc->ofile[i]); // copying all opened files from current process to new process
+		np->ofile[i] = filedup(curproc->ofile[i]);   //open it in the newly created threaded process
 	}	
   }	
-  newproc->cwd = idup(current_proc->cwd);
-  safestrcpy(newproc->name,current_proc->name,sizeof(current_proc->name));
-  pid = newproc->pid;
-  acquire(&ptable.lock);
-  newproc->state = RUNNABLE;
-  release(&ptable.lock);
-  return pid;	
+	np->cwd = idup(curproc->cwd);  //Equates directory of parent and threaded process as they are same
+	safestrcpy(np->name,curproc->name,sizeof(curproc->name));
+	pid = np->pid;  //We will return the value in the end...basically it is the id os the newly created thread
+	acquire(&ptable.lock);
+	np->state = RUNNABLE;
+	release(&ptable.lock);
+	return pid;	
 }
 
 int thread_join(void){
-	struct proc *i;
-	int havekids; // havekids is the boolean value to check if the thread has any child or not 
-	int pid;
-	struct proc *current_proc = myproc(); //Current process in which thread is being created
+	struct proc *p; //Process pointer for looping over all the proccesses
+	int havekids, pid;  //havekids denotes whether there are any child processes for the current process
+	struct proc *curproc = myproc();  //Pointer to the current process
 
-	acquire(&ptable.lock);
+	acquire(&ptable.lock);  //Acquire a lock and choose a process to kill in the below while loops
 	while(1){
-		havekids = 0;  
-		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
-			if(i->isThread!=0 && i->parent==current_proc){ //if the process is a thread and child of the current process
-				havekids = 1;
-				if(i->state==ZOMBIE){ //if it's in zombie state then re-initialiaze to make it available to be  used by other processes and return 
-					pid = i->pid;
-					i->kstack = 0;
-					i->pid = 0;
-					i->parent = 0;
-					i->name[0] = 0;
-					i->killed = 0;
-					i->state = UNUSED;
-					release(&ptable.lock);
-					return pid;
-				}
+		havekids = 0;
+    //Continue looping through all process until you find a process which is a child of the current process and a thread we created
+		for(p = ptable.proc;p< &ptable.proc[NPROC];++p){
+			if(p->isThread==0||p->parent!=curproc)
+			{
+				continue;
 			}	
-			
+			havekids = 1; /*We found a thread to kill now we execute that by setting the state to zombie and then set
+      other attributes to NULL/0  */
+			if(p->state==ZOMBIE){
+				pid = p->pid;
+				p->kstack = 0;
+				p->pid = 0;
+				p->parent = 0;
+				p->name[0] = 0;
+				p->killed = 0;
+				p->state = UNUSED;
+				release(&ptable.lock);
+				return pid; //We return the process id of the terminated thread
+			}
 		}
-		if(!havekids||current_proc->killed){// if it doesn't have any child or the current process itself is aborted then return -1
+    //If the current process terminates or the process does not have any kids we return -1 and release the aquired lock
+		if(!havekids||curproc->killed){
 			release(&ptable.lock);
 			return -1;
 		}
-		sleep(current_proc,&ptable.lock); // wait for any thread to complete its execution
+		sleep(curproc,&ptable.lock);
 	}
 
 }
 
 
 int thread_exit(){
-	struct proc *current_proc = myproc();
-	struct proc *i;
-	int file;
+	struct proc *curproc = myproc();  //reference to the process which we have to kill
+	struct proc *p;     //Used in looping through the processes 
+	int fd; 
 
-	if(current_proc==initproc)
+	if(curproc==initproc)
 	{
-		panic("exit init");
+		panic("init exiting");  
 	}
-	for(file = 0;file<NOFILE;file++){
-		if(current_proc->ofile[file]){ 
-			fileclose(current_proc->ofile[file]); // closing all opened files of current process
-			current_proc->ofile[file] = 0;
+
+  //Check all the files opened by the current process and close them one by one by setting the reference to NULL
+	for(fd = 0;fd<NOFILE;fd++){
+		if(curproc->ofile[fd]){
+			fileclose(curproc->ofile[fd]);
+			curproc->ofile[fd] = 0;
 		}
 	}
 	begin_op();
-	iput(current_proc->cwd);
+	iput(curproc->cwd);
 	end_op();
-	current_proc->cwd = 0;
+	curproc->cwd = 0;
 	acquire(&ptable.lock);
 
-	wakeup1(current_proc->parent);
+	wakeup1(curproc->parent);
 	
-	for(i=ptable.proc;i<&ptable.proc[NPROC];++i){
-		if(i->parent==current_proc){
-			i->parent = initproc;
-			if(i->state==ZOMBIE){
+	for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+		if(p->parent==curproc){
+			p->parent = initproc;
+			if(p->state==ZOMBIE){
 				wakeup1(initproc);
 			}
 		}
 	}
-	current_proc->state = ZOMBIE;
+	curproc->state = ZOMBIE;
 	sched();
-	panic("exit zombie");
+	panic("zombie exit");
+}
+
+int getNumProc(void){
+  int ans = 0;
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p=ptable.proc;p<&ptable.proc[NPROC];++p){
+    if(p->state!=UNUSED)
+      ++ans;
+  }
+  release(&ptable.lock);
+  return ans;
+}
+
+int getMaxPid(void){
+  int ans = -1;
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc;p<&ptable.proc[NPROC];++p)
+    if(p->pid>ans)
+      ans = p->pid;
+  release(&ptable.lock);
+  return ans;  
+}
+
+int set_burst_timeAssist(int burst_time){
+	struct proc *p = myproc();
+	p->burst_time = burst_time;
+	if(burst_time < quant){
+		quant = burst_time;
+	}
+        yield();
+
+	return 0;
+}
+
+int get_burst_timeAssist(){
+	struct proc *p = myproc();
+
+	return p->burst_time;
+
+}
+
+struct processInfo getProcInfoHelp(int pid){
+  struct proc *p;
+  struct processInfo temp = {-1,0,0};
+  acquire(&ptable.lock);
+  for(p = ptable.proc;p<&ptable.proc[NPROC];++p)
+  {
+    if(p->state!=UNUSED)
+    {
+      if(p->pid==pid){
+        temp.ppid = p->parent->pid;
+        temp.psize = p->sz;
+        temp.numberContextSwitches = p->numSwitches;
+        release(&ptable.lock);
+        return temp;
+      }
+    } 
+  }    
+      release(&ptable.lock);
+      return temp;
 }
+
+struct processInfo getCurrentInfoAssist(){
+
+  struct proc *p;
+  struct processInfo temp = {-1,0,0};
+
+  acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != UNUSED){
+        // printf(1, "%d\n", p->pid);
+        if(p == myproc()) {
+          temp.ppid = p->parent->pid;
+          temp.psize = p->sz;
+          temp.numberContextSwitches = p->numSwitches;
+          release(&ptable.lock);
+          return temp;
+        }
+      }
+    }
+    release(&ptable.lock);
+
+    return temp;
+
+}
+
+int getCurrentPIDAssist(void){
+  if(!myproc())return -1;
+  return myproc()->pid;
+}
+
+
+
+
+
diff -ruN xv6-public/proc.d xv6-public-with-hybrid/proc.d
--- xv6-public/proc.d	2022-09-06 09:47:04.642677000 +0530
+++ xv6-public-with-hybrid/proc.d	2022-10-07 18:50:08.988927910 +0530
@@ -1,2 +1,2 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h x86.h proc.h spinlock.h processInfo.h
diff -ruN xv6-public/processInfo.h xv6-public-with-hybrid/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/processInfo.h	2022-09-26 12:01:47.000000000 +0530
@@ -0,0 +1,5 @@
+struct processInfo{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
\ No newline at end of file
diff -ruN xv6-public/proc.h xv6-public-with-hybrid/proc.h
--- xv6-public/proc.h	2022-09-05 12:34:58.465656000 +0530
+++ xv6-public-with-hybrid/proc.h	2022-10-06 16:09:13.130906521 +0530
@@ -49,9 +49,17 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];
-  int isThread;               // Process name (debugging) // implemented by us denotes whether the process is thread or not
+  int isThread;
+  int numSwitches;               // Process name (debugging)
+  int burst_time;                //Added by us 
+  int run_time;
 };
 
+struct processInfo getProcInfoHelp(int);
+int set_burst_timeAssist(int burst_time);
+int get_burst_timeAssist();
+struct processInfo getCurrentInfoAssist();
+int getCurrentPIDAssist(void);
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
Binary files xv6-public/proc.o and xv6-public-with-hybrid/proc.o differ
diff -ruN xv6-public/random.c xv6-public-with-hybrid/random.c
--- xv6-public/random.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/random.c	2022-10-06 14:03:52.021831000 +0530
@@ -0,0 +1,101 @@
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
+
+int randomrange(int low, int high){
+  if(high<low){
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+  return val;
+}
diff -ruN xv6-public/random.d xv6-public-with-hybrid/random.d
--- xv6-public/random.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/random.d	2022-10-07 18:49:58.716958391 +0530
@@ -0,0 +1 @@
+random.o: random.c /usr/include/stdc-predef.h
Binary files xv6-public/random.o and xv6-public-with-hybrid/random.o differ
Binary files xv6-public/_rm and xv6-public-with-hybrid/_rm differ
diff -ruN xv6-public/rm.asm xv6-public-with-hybrid/rm.asm
--- xv6-public/rm.asm	2022-09-06 09:47:10.313935000 +0530
+++ xv6-public-with-hybrid/rm.asm	2022-10-07 18:50:00.964951846 +0530
@@ -59,18 +59,18 @@
       printf(2, "rm: %s failed to delete\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	push   (%ebx)
-  53:	68 8c 07 00 00       	push   $0x78c
+  53:	68 ec 09 00 00       	push   $0x9ec
   58:	6a 02                	push   $0x2
-  5a:	e8 f1 03 00 00       	call   450 <printf>
+  5a:	e8 21 04 00 00       	call   480 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: rm files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 78 07 00 00       	push   $0x778
+  66:	68 d8 09 00 00       	push   $0x9d8
   6b:	6a 02                	push   $0x2
-  6d:	e8 de 03 00 00       	call   450 <printf>
+  6d:	e8 0e 04 00 00       	call   480 <printf>
     exit();
   72:	e8 5c 02 00 00       	call   2d3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -623,572 +623,887 @@
  38a:	c3                   	ret    
 
 0000038b <draw>:
+SYSCALL(draw)
  38b:	b8 19 00 00 00       	mov    $0x19,%eax
  390:	cd 40                	int    $0x40
  392:	c3                   	ret    
- 393:	66 90                	xchg   %ax,%ax
- 395:	66 90                	xchg   %ax,%ax
- 397:	66 90                	xchg   %ax,%ax
- 399:	66 90                	xchg   %ax,%ax
- 39b:	66 90                	xchg   %ax,%ax
- 39d:	66 90                	xchg   %ax,%ax
- 39f:	90                   	nop
 
-000003a0 <printint>:
+00000393 <getNumProc>:
+SYSCALL(getNumProc)
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 39b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 3a3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3ab:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3b3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3bb:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 3c3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+ 3cb:	66 90                	xchg   %ax,%ax
+ 3cd:	66 90                	xchg   %ax,%ax
+ 3cf:	90                   	nop
+
+000003d0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
- 3a4:	56                   	push   %esi
- 3a5:	53                   	push   %ebx
- 3a6:	83 ec 3c             	sub    $0x3c,%esp
- 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+ 3d6:	83 ec 3c             	sub    $0x3c,%esp
+ 3d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 3ac:	89 d1                	mov    %edx,%ecx
+ 3dc:	89 d1                	mov    %edx,%ecx
 {
- 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3de:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 3b1:	85 d2                	test   %edx,%edx
- 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
- 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3bd:	74 79                	je     438 <printint+0x98>
+ 3e1:	85 d2                	test   %edx,%edx
+ 3e3:	0f 89 7f 00 00 00    	jns    468 <printint+0x98>
+ 3e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ed:	74 79                	je     468 <printint+0x98>
     neg = 1;
- 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3c6:	f7 d9                	neg    %ecx
+ 3f6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3c8:	31 db                	xor    %ebx,%ebx
- 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3f8:	31 db                	xor    %ebx,%ebx
+ 3fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3d0:	89 c8                	mov    %ecx,%eax
- 3d2:	31 d2                	xor    %edx,%edx
- 3d4:	89 cf                	mov    %ecx,%edi
- 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3d9:	0f b6 92 04 08 00 00 	movzbl 0x804(%edx),%edx
- 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3e3:	89 d8                	mov    %ebx,%eax
- 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 400:	89 c8                	mov    %ecx,%eax
+ 402:	31 d2                	xor    %edx,%edx
+ 404:	89 cf                	mov    %ecx,%edi
+ 406:	f7 75 c4             	divl   -0x3c(%ebp)
+ 409:	0f b6 92 64 0a 00 00 	movzbl 0xa64(%edx),%edx
+ 410:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 413:	89 d8                	mov    %ebx,%eax
+ 415:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 418:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 41b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+ 41e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 421:	76 dd                	jbe    400 <printint+0x30>
   if(neg)
- 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3f6:	85 c9                	test   %ecx,%ecx
- 3f8:	74 0c                	je     406 <printint+0x66>
+ 423:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 426:	85 c9                	test   %ecx,%ecx
+ 428:	74 0c                	je     436 <printint+0x66>
     buf[i++] = '-';
- 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 42a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3ff:	89 d8                	mov    %ebx,%eax
+ 42f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 431:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 40d:	eb 07                	jmp    416 <printint+0x76>
- 40f:	90                   	nop
+ 436:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 439:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 43d:	eb 07                	jmp    446 <printint+0x76>
+ 43f:	90                   	nop
     putc(fd, buf[i]);
- 410:	0f b6 13             	movzbl (%ebx),%edx
- 413:	83 eb 01             	sub    $0x1,%ebx
+ 440:	0f b6 13             	movzbl (%ebx),%edx
+ 443:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 416:	83 ec 04             	sub    $0x4,%esp
- 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 41c:	6a 01                	push   $0x1
- 41e:	56                   	push   %esi
- 41f:	57                   	push   %edi
- 420:	e8 ce fe ff ff       	call   2f3 <write>
+ 446:	83 ec 04             	sub    $0x4,%esp
+ 449:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 44c:	6a 01                	push   $0x1
+ 44e:	56                   	push   %esi
+ 44f:	57                   	push   %edi
+ 450:	e8 9e fe ff ff       	call   2f3 <write>
   while(--i >= 0)
- 425:	83 c4 10             	add    $0x10,%esp
- 428:	39 de                	cmp    %ebx,%esi
- 42a:	75 e4                	jne    410 <printint+0x70>
-}
- 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 42f:	5b                   	pop    %ebx
- 430:	5e                   	pop    %esi
- 431:	5f                   	pop    %edi
- 432:	5d                   	pop    %ebp
- 433:	c3                   	ret    
- 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	39 de                	cmp    %ebx,%esi
+ 45a:	75 e4                	jne    440 <printint+0x70>
+}
+ 45c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 45f:	5b                   	pop    %ebx
+ 460:	5e                   	pop    %esi
+ 461:	5f                   	pop    %edi
+ 462:	5d                   	pop    %ebp
+ 463:	c3                   	ret    
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 43f:	eb 87                	jmp    3c8 <printint+0x28>
- 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 44f:	90                   	nop
+ 468:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 46f:	eb 87                	jmp    3f8 <printint+0x28>
+ 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 478:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
 
-00000450 <printf>:
+00000480 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 450:	55                   	push   %ebp
- 451:	89 e5                	mov    %esp,%ebp
- 453:	57                   	push   %edi
- 454:	56                   	push   %esi
- 455:	53                   	push   %ebx
- 456:	83 ec 2c             	sub    $0x2c,%esp
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 489:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 45c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 48c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 45f:	0f b6 13             	movzbl (%ebx),%edx
- 462:	84 d2                	test   %dl,%dl
- 464:	74 6a                	je     4d0 <printf+0x80>
+ 48f:	0f b6 13             	movzbl (%ebx),%edx
+ 492:	84 d2                	test   %dl,%dl
+ 494:	74 6a                	je     500 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 466:	8d 45 10             	lea    0x10(%ebp),%eax
- 469:	83 c3 01             	add    $0x1,%ebx
+ 496:	8d 45 10             	lea    0x10(%ebp),%eax
+ 499:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 49c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 46f:	31 c9                	xor    %ecx,%ecx
+ 49f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 474:	eb 36                	jmp    4ac <printf+0x5c>
- 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 47d:	8d 76 00             	lea    0x0(%esi),%esi
- 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 4a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4a4:	eb 36                	jmp    4dc <printf+0x5c>
+ 4a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 483:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 4b3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 488:	83 f8 25             	cmp    $0x25,%eax
- 48b:	74 15                	je     4a2 <printf+0x52>
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	74 15                	je     4d2 <printf+0x52>
   write(fd, &c, 1);
- 48d:	83 ec 04             	sub    $0x4,%esp
- 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	56                   	push   %esi
- 497:	e8 57 fe ff ff       	call   2f3 <write>
- 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 4bd:	83 ec 04             	sub    $0x4,%esp
+ 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	56                   	push   %esi
+ 4c7:	e8 27 fe ff ff       	call   2f3 <write>
+ 4cc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 49f:	83 c4 10             	add    $0x10,%esp
+ 4cf:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4a2:	0f b6 13             	movzbl (%ebx),%edx
- 4a5:	83 c3 01             	add    $0x1,%ebx
- 4a8:	84 d2                	test   %dl,%dl
- 4aa:	74 24                	je     4d0 <printf+0x80>
+ 4d2:	0f b6 13             	movzbl (%ebx),%edx
+ 4d5:	83 c3 01             	add    $0x1,%ebx
+ 4d8:	84 d2                	test   %dl,%dl
+ 4da:	74 24                	je     500 <printf+0x80>
     c = fmt[i] & 0xff;
- 4ac:	0f b6 c2             	movzbl %dl,%eax
+ 4dc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 4af:	85 c9                	test   %ecx,%ecx
- 4b1:	74 cd                	je     480 <printf+0x30>
+ 4df:	85 c9                	test   %ecx,%ecx
+ 4e1:	74 cd                	je     4b0 <printf+0x30>
       }
     } else if(state == '%'){
- 4b3:	83 f9 25             	cmp    $0x25,%ecx
- 4b6:	75 ea                	jne    4a2 <printf+0x52>
+ 4e3:	83 f9 25             	cmp    $0x25,%ecx
+ 4e6:	75 ea                	jne    4d2 <printf+0x52>
       if(c == 'd'){
- 4b8:	83 f8 25             	cmp    $0x25,%eax
- 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
- 4c1:	83 e8 63             	sub    $0x63,%eax
- 4c4:	83 f8 15             	cmp    $0x15,%eax
- 4c7:	77 17                	ja     4e0 <printf+0x90>
- 4c9:	ff 24 85 ac 07 00 00 	jmp    *0x7ac(,%eax,4)
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	0f 84 07 01 00 00    	je     5f8 <printf+0x178>
+ 4f1:	83 e8 63             	sub    $0x63,%eax
+ 4f4:	83 f8 15             	cmp    $0x15,%eax
+ 4f7:	77 17                	ja     510 <printf+0x90>
+ 4f9:	ff 24 85 0c 0a 00 00 	jmp    *0xa0c(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4d3:	5b                   	pop    %ebx
- 4d4:	5e                   	pop    %esi
- 4d5:	5f                   	pop    %edi
- 4d6:	5d                   	pop    %ebp
- 4d7:	c3                   	ret    
- 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4df:	90                   	nop
+ 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 503:	5b                   	pop    %ebx
+ 504:	5e                   	pop    %esi
+ 505:	5f                   	pop    %edi
+ 506:	5d                   	pop    %ebp
+ 507:	c3                   	ret    
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
   write(fd, &c, 1);
- 4e0:	83 ec 04             	sub    $0x4,%esp
- 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4e6:	6a 01                	push   $0x1
- 4e8:	57                   	push   %edi
- 4e9:	56                   	push   %esi
- 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ee:	e8 00 fe ff ff       	call   2f3 <write>
+ 510:	83 ec 04             	sub    $0x4,%esp
+ 513:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 516:	6a 01                	push   $0x1
+ 518:	57                   	push   %edi
+ 519:	56                   	push   %esi
+ 51a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 51e:	e8 d0 fd ff ff       	call   2f3 <write>
         putc(fd, c);
- 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 523:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4f7:	83 c4 0c             	add    $0xc,%esp
- 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4fd:	6a 01                	push   $0x1
- 4ff:	57                   	push   %edi
- 500:	56                   	push   %esi
- 501:	e8 ed fd ff ff       	call   2f3 <write>
+ 527:	83 c4 0c             	add    $0xc,%esp
+ 52a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 52d:	6a 01                	push   $0x1
+ 52f:	57                   	push   %edi
+ 530:	56                   	push   %esi
+ 531:	e8 bd fd ff ff       	call   2f3 <write>
         putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
+ 536:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 509:	31 c9                	xor    %ecx,%ecx
- 50b:	eb 95                	jmp    4a2 <printf+0x52>
- 50d:	8d 76 00             	lea    0x0(%esi),%esi
+ 539:	31 c9                	xor    %ecx,%ecx
+ 53b:	eb 95                	jmp    4d2 <printf+0x52>
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 510:	83 ec 0c             	sub    $0xc,%esp
- 513:	b9 10 00 00 00       	mov    $0x10,%ecx
- 518:	6a 00                	push   $0x0
- 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 51d:	8b 10                	mov    (%eax),%edx
- 51f:	89 f0                	mov    %esi,%eax
- 521:	e8 7a fe ff ff       	call   3a0 <printint>
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 54d:	8b 10                	mov    (%eax),%edx
+ 54f:	89 f0                	mov    %esi,%eax
+ 551:	e8 7a fe ff ff       	call   3d0 <printint>
         ap++;
- 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 52a:	83 c4 10             	add    $0x10,%esp
+ 556:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 55a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 52d:	31 c9                	xor    %ecx,%ecx
- 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
- 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	31 c9                	xor    %ecx,%ecx
+ 55f:	e9 6e ff ff ff       	jmp    4d2 <printf+0x52>
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 53b:	8b 10                	mov    (%eax),%edx
+ 568:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 56b:	8b 10                	mov    (%eax),%edx
         ap++;
- 53d:	83 c0 04             	add    $0x4,%eax
- 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 56d:	83 c0 04             	add    $0x4,%eax
+ 570:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 543:	85 d2                	test   %edx,%edx
- 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
+ 573:	85 d2                	test   %edx,%edx
+ 575:	0f 84 8d 00 00 00    	je     608 <printf+0x188>
         while(*s != 0){
- 54b:	0f b6 02             	movzbl (%edx),%eax
+ 57b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 54e:	31 c9                	xor    %ecx,%ecx
+ 57e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 550:	84 c0                	test   %al,%al
- 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
- 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 55b:	89 d3                	mov    %edx,%ebx
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
+ 580:	84 c0                	test   %al,%al
+ 582:	0f 84 4a ff ff ff    	je     4d2 <printf+0x52>
+ 588:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 58b:	89 d3                	mov    %edx,%ebx
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 560:	83 ec 04             	sub    $0x4,%esp
+ 590:	83 ec 04             	sub    $0x4,%esp
           s++;
- 563:	83 c3 01             	add    $0x1,%ebx
- 566:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 593:	83 c3 01             	add    $0x1,%ebx
+ 596:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 569:	6a 01                	push   $0x1
- 56b:	57                   	push   %edi
- 56c:	56                   	push   %esi
- 56d:	e8 81 fd ff ff       	call   2f3 <write>
+ 599:	6a 01                	push   $0x1
+ 59b:	57                   	push   %edi
+ 59c:	56                   	push   %esi
+ 59d:	e8 51 fd ff ff       	call   2f3 <write>
         while(*s != 0){
- 572:	0f b6 03             	movzbl (%ebx),%eax
- 575:	83 c4 10             	add    $0x10,%esp
- 578:	84 c0                	test   %al,%al
- 57a:	75 e4                	jne    560 <printf+0x110>
+ 5a2:	0f b6 03             	movzbl (%ebx),%eax
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	84 c0                	test   %al,%al
+ 5aa:	75 e4                	jne    590 <printf+0x110>
       state = 0;
- 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 57f:	31 c9                	xor    %ecx,%ecx
- 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
+ 5ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5af:	31 c9                	xor    %ecx,%ecx
+ 5b1:	e9 1c ff ff ff       	jmp    4d2 <printf+0x52>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 590:	83 ec 0c             	sub    $0xc,%esp
- 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 598:	6a 01                	push   $0x1
- 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
- 59f:	90                   	nop
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	e9 7b ff ff ff       	jmp    54a <printf+0xca>
+ 5cf:	90                   	nop
         putc(fd, *ap);
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5d3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5a6:	8b 00                	mov    (%eax),%eax
+ 5d6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5a8:	6a 01                	push   $0x1
- 5aa:	57                   	push   %edi
- 5ab:	56                   	push   %esi
+ 5d8:	6a 01                	push   $0x1
+ 5da:	57                   	push   %edi
+ 5db:	56                   	push   %esi
         putc(fd, *ap);
- 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5dc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5af:	e8 3f fd ff ff       	call   2f3 <write>
+ 5df:	e8 0f fd ff ff       	call   2f3 <write>
         ap++;
- 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 5b8:	83 c4 10             	add    $0x10,%esp
+ 5e4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5e8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5bb:	31 c9                	xor    %ecx,%ecx
- 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
- 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5eb:	31 c9                	xor    %ecx,%ecx
+ 5ed:	e9 e0 fe ff ff       	jmp    4d2 <printf+0x52>
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5f8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5cb:	83 ec 04             	sub    $0x4,%esp
- 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
- 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5d7:	90                   	nop
+ 5fb:	83 ec 04             	sub    $0x4,%esp
+ 5fe:	e9 2a ff ff ff       	jmp    52d <printf+0xad>
+ 603:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 607:	90                   	nop
           s = "(null)";
- 5d8:	ba a5 07 00 00       	mov    $0x7a5,%edx
+ 608:	ba 05 0a 00 00       	mov    $0xa05,%edx
         while(*s != 0){
- 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5e5:	89 d3                	mov    %edx,%ebx
- 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
- 5ec:	66 90                	xchg   %ax,%ax
- 5ee:	66 90                	xchg   %ax,%ax
+ 60d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 610:	b8 28 00 00 00       	mov    $0x28,%eax
+ 615:	89 d3                	mov    %edx,%ebx
+ 617:	e9 74 ff ff ff       	jmp    590 <printf+0x110>
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
 
-000005f0 <free>:
+00000620 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5f0:	55                   	push   %ebp
+ 620:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f1:	a1 bc 0a 00 00       	mov    0xabc,%eax
+ 621:	a1 c0 0d 00 00       	mov    0xdc0,%eax
 {
- 5f6:	89 e5                	mov    %esp,%ebp
- 5f8:	57                   	push   %edi
- 5f9:	56                   	push   %esi
- 5fa:	53                   	push   %ebx
- 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 626:	89 e5                	mov    %esp,%ebp
+ 628:	57                   	push   %edi
+ 629:	56                   	push   %esi
+ 62a:	53                   	push   %ebx
+ 62b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 62e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 608:	89 c2                	mov    %eax,%edx
- 60a:	8b 00                	mov    (%eax),%eax
- 60c:	39 ca                	cmp    %ecx,%edx
- 60e:	73 30                	jae    640 <free+0x50>
- 610:	39 c1                	cmp    %eax,%ecx
- 612:	72 04                	jb     618 <free+0x28>
+ 631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 638:	89 c2                	mov    %eax,%edx
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	39 ca                	cmp    %ecx,%edx
+ 63e:	73 30                	jae    670 <free+0x50>
+ 640:	39 c1                	cmp    %eax,%ecx
+ 642:	72 04                	jb     648 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 614:	39 c2                	cmp    %eax,%edx
- 616:	72 f0                	jb     608 <free+0x18>
+ 644:	39 c2                	cmp    %eax,%edx
+ 646:	72 f0                	jb     638 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61e:	39 f8                	cmp    %edi,%eax
- 620:	74 30                	je     652 <free+0x62>
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	74 30                	je     682 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 652:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 625:	8b 42 04             	mov    0x4(%edx),%eax
- 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 62b:	39 f1                	cmp    %esi,%ecx
- 62d:	74 3a                	je     669 <free+0x79>
+ 655:	8b 42 04             	mov    0x4(%edx),%eax
+ 658:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 3a                	je     699 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 62f:	89 0a                	mov    %ecx,(%edx)
+ 65f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 631:	5b                   	pop    %ebx
+ 661:	5b                   	pop    %ebx
   freep = p;
- 632:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+ 662:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
 }
- 638:	5e                   	pop    %esi
- 639:	5f                   	pop    %edi
- 63a:	5d                   	pop    %ebp
- 63b:	c3                   	ret    
- 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 c2                	cmp    %eax,%edx
- 642:	72 c4                	jb     608 <free+0x18>
- 644:	39 c1                	cmp    %eax,%ecx
- 646:	73 c0                	jae    608 <free+0x18>
+ 670:	39 c2                	cmp    %eax,%edx
+ 672:	72 c4                	jb     638 <free+0x18>
+ 674:	39 c1                	cmp    %eax,%ecx
+ 676:	73 c0                	jae    638 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 f8                	cmp    %edi,%eax
- 650:	75 d0                	jne    622 <free+0x32>
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 f8                	cmp    %edi,%eax
+ 680:	75 d0                	jne    652 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 652:	03 70 04             	add    0x4(%eax),%esi
- 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 682:	03 70 04             	add    0x4(%eax),%esi
+ 685:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 658:	8b 02                	mov    (%edx),%eax
- 65a:	8b 00                	mov    (%eax),%eax
- 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 688:	8b 02                	mov    (%edx),%eax
+ 68a:	8b 00                	mov    (%eax),%eax
+ 68c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 65f:	8b 42 04             	mov    0x4(%edx),%eax
- 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 665:	39 f1                	cmp    %esi,%ecx
- 667:	75 c6                	jne    62f <free+0x3f>
+ 68f:	8b 42 04             	mov    0x4(%edx),%eax
+ 692:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 695:	39 f1                	cmp    %esi,%ecx
+ 697:	75 c6                	jne    65f <free+0x3f>
     p->s.size += bp->s.size;
- 669:	03 43 fc             	add    -0x4(%ebx),%eax
+ 699:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 66c:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+ 69c:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
     p->s.size += bp->s.size;
- 672:	89 42 04             	mov    %eax,0x4(%edx)
+ 6a2:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 678:	89 0a                	mov    %ecx,(%edx)
+ 6a5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6a8:	89 0a                	mov    %ecx,(%edx)
 }
- 67a:	5b                   	pop    %ebx
- 67b:	5e                   	pop    %esi
- 67c:	5f                   	pop    %edi
- 67d:	5d                   	pop    %ebp
- 67e:	c3                   	ret    
- 67f:	90                   	nop
+ 6aa:	5b                   	pop    %ebx
+ 6ab:	5e                   	pop    %esi
+ 6ac:	5f                   	pop    %edi
+ 6ad:	5d                   	pop    %ebp
+ 6ae:	c3                   	ret    
+ 6af:	90                   	nop
 
-00000680 <malloc>:
+000006b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 680:	55                   	push   %ebp
- 681:	89 e5                	mov    %esp,%ebp
- 683:	57                   	push   %edi
- 684:	56                   	push   %esi
- 685:	53                   	push   %ebx
- 686:	83 ec 1c             	sub    $0x1c,%esp
+ 6b0:	55                   	push   %ebp
+ 6b1:	89 e5                	mov    %esp,%ebp
+ 6b3:	57                   	push   %edi
+ 6b4:	56                   	push   %esi
+ 6b5:	53                   	push   %ebx
+ 6b6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 689:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6b9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 68c:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+ 6bc:	8b 3d c0 0d 00 00    	mov    0xdc0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 692:	8d 70 07             	lea    0x7(%eax),%esi
- 695:	c1 ee 03             	shr    $0x3,%esi
- 698:	83 c6 01             	add    $0x1,%esi
+ 6c2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c5:	c1 ee 03             	shr    $0x3,%esi
+ 6c8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 69b:	85 ff                	test   %edi,%edi
- 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+ 6cb:	85 ff                	test   %edi,%edi
+ 6cd:	0f 84 9d 00 00 00    	je     770 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a3:	8b 17                	mov    (%edi),%edx
+ 6d3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6a8:	39 f1                	cmp    %esi,%ecx
- 6aa:	73 6a                	jae    716 <malloc+0x96>
- 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6b1:	39 de                	cmp    %ebx,%esi
- 6b3:	0f 43 de             	cmovae %esi,%ebx
+ 6d5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d8:	39 f1                	cmp    %esi,%ecx
+ 6da:	73 6a                	jae    746 <malloc+0x96>
+ 6dc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6e1:	39 de                	cmp    %ebx,%esi
+ 6e3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
- 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6e6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6f0:	eb 17                	jmp    709 <malloc+0x59>
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c8:	8b 02                	mov    (%edx),%eax
+ 6f8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cd:	39 f1                	cmp    %esi,%ecx
- 6cf:	73 4f                	jae    720 <malloc+0xa0>
+ 6fa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fd:	39 f1                	cmp    %esi,%ecx
+ 6ff:	73 4f                	jae    750 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6d1:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
- 6d7:	89 c2                	mov    %eax,%edx
- 6d9:	39 d7                	cmp    %edx,%edi
- 6db:	75 eb                	jne    6c8 <malloc+0x48>
+ 701:	8b 3d c0 0d 00 00    	mov    0xdc0,%edi
+ 707:	89 c2                	mov    %eax,%edx
+ 709:	39 d7                	cmp    %edx,%edi
+ 70b:	75 eb                	jne    6f8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6dd:	83 ec 0c             	sub    $0xc,%esp
- 6e0:	ff 75 e4             	push   -0x1c(%ebp)
- 6e3:	e8 73 fc ff ff       	call   35b <sbrk>
+ 70d:	83 ec 0c             	sub    $0xc,%esp
+ 710:	ff 75 e4             	push   -0x1c(%ebp)
+ 713:	e8 43 fc ff ff       	call   35b <sbrk>
   if(p == (char*)-1)
- 6e8:	83 c4 10             	add    $0x10,%esp
- 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ee:	74 1c                	je     70c <malloc+0x8c>
+ 718:	83 c4 10             	add    $0x10,%esp
+ 71b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 71e:	74 1c                	je     73c <malloc+0x8c>
   hp->s.size = nu;
- 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 720:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6f3:	83 ec 0c             	sub    $0xc,%esp
- 6f6:	83 c0 08             	add    $0x8,%eax
- 6f9:	50                   	push   %eax
- 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
+ 723:	83 ec 0c             	sub    $0xc,%esp
+ 726:	83 c0 08             	add    $0x8,%eax
+ 729:	50                   	push   %eax
+ 72a:	e8 f1 fe ff ff       	call   620 <free>
   return freep;
- 6ff:	8b 15 bc 0a 00 00    	mov    0xabc,%edx
+ 72f:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
       if((p = morecore(nunits)) == 0)
- 705:	83 c4 10             	add    $0x10,%esp
- 708:	85 d2                	test   %edx,%edx
- 70a:	75 bc                	jne    6c8 <malloc+0x48>
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	85 d2                	test   %edx,%edx
+ 73a:	75 bc                	jne    6f8 <malloc+0x48>
         return 0;
   }
 }
- 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 70f:	31 c0                	xor    %eax,%eax
+ 73f:	31 c0                	xor    %eax,%eax
 }
- 711:	5b                   	pop    %ebx
- 712:	5e                   	pop    %esi
- 713:	5f                   	pop    %edi
- 714:	5d                   	pop    %ebp
- 715:	c3                   	ret    
+ 741:	5b                   	pop    %ebx
+ 742:	5e                   	pop    %esi
+ 743:	5f                   	pop    %edi
+ 744:	5d                   	pop    %ebp
+ 745:	c3                   	ret    
     if(p->s.size >= nunits){
- 716:	89 d0                	mov    %edx,%eax
- 718:	89 fa                	mov    %edi,%edx
- 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 746:	89 d0                	mov    %edx,%eax
+ 748:	89 fa                	mov    %edi,%edx
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 720:	39 ce                	cmp    %ecx,%esi
- 722:	74 4c                	je     770 <malloc+0xf0>
+ 750:	39 ce                	cmp    %ecx,%esi
+ 752:	74 4c                	je     7a0 <malloc+0xf0>
         p->s.size -= nunits;
- 724:	29 f1                	sub    %esi,%ecx
- 726:	89 48 04             	mov    %ecx,0x4(%eax)
+ 754:	29 f1                	sub    %esi,%ecx
+ 756:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 759:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 72c:	89 70 04             	mov    %esi,0x4(%eax)
+ 75c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 72f:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+ 75f:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
 }
- 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 765:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 738:	83 c0 08             	add    $0x8,%eax
+ 768:	83 c0 08             	add    $0x8,%eax
 }
- 73b:	5b                   	pop    %ebx
- 73c:	5e                   	pop    %esi
- 73d:	5f                   	pop    %edi
- 73e:	5d                   	pop    %ebp
- 73f:	c3                   	ret    
+ 76b:	5b                   	pop    %ebx
+ 76c:	5e                   	pop    %esi
+ 76d:	5f                   	pop    %edi
+ 76e:	5d                   	pop    %ebp
+ 76f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 740:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
- 747:	0a 00 00 
+ 770:	c7 05 c0 0d 00 00 c4 	movl   $0xdc4,0xdc0
+ 777:	0d 00 00 
     base.s.size = 0;
- 74a:	bf c0 0a 00 00       	mov    $0xac0,%edi
+ 77a:	bf c4 0d 00 00       	mov    $0xdc4,%edi
     base.s.ptr = freep = prevp = &base;
- 74f:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
- 756:	0a 00 00 
+ 77f:	c7 05 c4 0d 00 00 c4 	movl   $0xdc4,0xdc4
+ 786:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 759:	89 fa                	mov    %edi,%edx
+ 789:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 75b:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
- 762:	00 00 00 
+ 78b:	c7 05 c8 0d 00 00 00 	movl   $0x0,0xdc8
+ 792:	00 00 00 
     if(p->s.size >= nunits){
- 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
- 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 795:	e9 42 ff ff ff       	jmp    6dc <malloc+0x2c>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 770:	8b 08                	mov    (%eax),%ecx
- 772:	89 0a                	mov    %ecx,(%edx)
- 774:	eb b9                	jmp    72f <malloc+0xaf>
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb b9                	jmp    75f <malloc+0xaf>
+ 7a6:	66 90                	xchg   %ax,%ax
+ 7a8:	66 90                	xchg   %ax,%ax
+ 7aa:	66 90                	xchg   %ax,%ax
+ 7ac:	66 90                	xchg   %ax,%ax
+ 7ae:	66 90                	xchg   %ax,%ax
+
+000007b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7b0:	55                   	push   %ebp
+ 7b1:	b8 e4 0d 00 00       	mov    $0xde4,%eax
+ 7b6:	89 e5                	mov    %esp,%ebp
+ 7b8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7bb:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+    for (mti=1; mti<N; mti++)
+ 7c1:	eb 08                	jmp    7cb <sgenrand+0x1b>
+ 7c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7c7:	90                   	nop
+ 7c8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7cb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7d1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7d3:	3d 9c 17 00 00       	cmp    $0x179c,%eax
+ 7d8:	75 ee                	jne    7c8 <sgenrand+0x18>
+ 7da:	c7 05 ac 0d 00 00 70 	movl   $0x270,0xdac
+ 7e1:	02 00 00 
+}
+ 7e4:	5d                   	pop    %ebp
+ 7e5:	c3                   	ret    
+ 7e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007f0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7f0:	a1 ac 0d 00 00       	mov    0xdac,%eax
+ 7f5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7fa:	7f 3d                	jg     839 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7fc:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 803:	8d 50 01             	lea    0x1(%eax),%edx
+ 806:	89 15 ac 0d 00 00    	mov    %edx,0xdac
+    y ^= TEMPERING_SHIFT_U(y);
+ 80c:	89 ca                	mov    %ecx,%edx
+ 80e:	c1 ea 0b             	shr    $0xb,%edx
+ 811:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 813:	89 d0                	mov    %edx,%eax
+ 815:	c1 e0 07             	shl    $0x7,%eax
+ 818:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 81d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 81f:	89 c2                	mov    %eax,%edx
+ 821:	c1 e2 0f             	shl    $0xf,%edx
+ 824:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 82a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 82c:	89 d0                	mov    %edx,%eax
+ 82e:	c1 e8 12             	shr    $0x12,%eax
+ 831:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 833:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 838:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 839:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 83e:	0f 84 d4 00 00 00    	je     918 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 844:	31 c0                	xor    %eax,%eax
+ 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 850:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 857:	83 c0 01             	add    $0x1,%eax
+ 85a:	8b 14 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%edx
+ 861:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 867:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 86d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 86f:	89 d1                	mov    %edx,%ecx
+ 871:	83 e2 01             	and    $0x1,%edx
+ 874:	d1 e9                	shr    %ecx
+ 876:	33 0c 85 10 14 00 00 	xor    0x1410(,%eax,4),%ecx
+ 87d:	33 0c 95 78 0a 00 00 	xor    0xa78(,%edx,4),%ecx
+ 884:	89 0c 85 dc 0d 00 00 	mov    %ecx,0xddc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 88b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 890:	75 be                	jne    850 <genrand+0x60>
+ 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 898:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 89f:	83 c0 01             	add    $0x1,%eax
+ 8a2:	8b 14 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%edx
+ 8a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8b7:	89 d1                	mov    %edx,%ecx
+ 8b9:	83 e2 01             	and    $0x1,%edx
+ 8bc:	d1 e9                	shr    %ecx
+ 8be:	33 0c 85 50 0a 00 00 	xor    0xa50(,%eax,4),%ecx
+ 8c5:	33 0c 95 78 0a 00 00 	xor    0xa78(,%edx,4),%ecx
+ 8cc:	89 0c 85 dc 0d 00 00 	mov    %ecx,0xddc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8d8:	75 be                	jne    898 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8da:	8b 0d e0 0d 00 00    	mov    0xde0,%ecx
+ 8e0:	a1 9c 17 00 00       	mov    0x179c,%eax
+ 8e5:	89 ca                	mov    %ecx,%edx
+ 8e7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8ec:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8f2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8f4:	89 c2                	mov    %eax,%edx
+ 8f6:	83 e0 01             	and    $0x1,%eax
+ 8f9:	d1 ea                	shr    %edx
+ 8fb:	33 15 10 14 00 00    	xor    0x1410,%edx
+ 901:	33 14 85 78 0a 00 00 	xor    0xa78(,%eax,4),%edx
+ 908:	89 15 9c 17 00 00    	mov    %edx,0x179c
+ 90e:	ba 01 00 00 00       	mov    $0x1,%edx
+ 913:	e9 ee fe ff ff       	jmp    806 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 918:	b8 e4 0d 00 00       	mov    $0xde4,%eax
+ 91d:	b9 9c 17 00 00       	mov    $0x179c,%ecx
+ 922:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 927:	c7 05 e0 0d 00 00 05 	movl   $0x1105,0xde0
+ 92e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 931:	eb 08                	jmp    93b <genrand+0x14b>
+ 933:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 937:	90                   	nop
+ 938:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 93b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 941:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 943:	39 c1                	cmp    %eax,%ecx
+ 945:	75 f1                	jne    938 <genrand+0x148>
+ 947:	e9 f8 fe ff ff       	jmp    844 <genrand+0x54>
+ 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000950 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 950:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 951:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 953:	89 e5                	mov    %esp,%ebp
+ 955:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 956:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 959:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 95a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 95f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 962:	89 d8                	mov    %ebx,%eax
+ 964:	f7 f1                	div    %ecx
+ 966:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 968:	29 d3                	sub    %edx,%ebx
+ 96a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 970:	e8 7b fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+}
+ 97b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 97c:	f7 f6                	div    %esi
+}
+ 97e:	5e                   	pop    %esi
+ 97f:	5d                   	pop    %ebp
+ 980:	c3                   	ret    
+ 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 98f:	90                   	nop
+
+00000990 <randomrange>:
+
+int randomrange(int low, int high){
+ 990:	55                   	push   %ebp
+ 991:	89 e5                	mov    %esp,%ebp
+ 993:	57                   	push   %edi
+ 994:	56                   	push   %esi
+ 995:	53                   	push   %ebx
+ 996:	83 ec 0c             	sub    $0xc,%esp
+ 999:	8b 75 08             	mov    0x8(%ebp),%esi
+ 99c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 99f:	39 f0                	cmp    %esi,%eax
+ 9a1:	7d 06                	jge    9a9 <randomrange+0x19>
+ 9a3:	89 f2                	mov    %esi,%edx
+ 9a5:	89 c6                	mov    %eax,%esi
+ 9a7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9a9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9ab:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9b0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9b2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9b5:	89 d8                	mov    %ebx,%eax
+ 9b7:	f7 f1                	div    %ecx
+ 9b9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 9bb:	29 d3                	sub    %edx,%ebx
+ 9bd:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 9c0:	e8 2b fe ff ff       	call   7f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9c5:	39 d8                	cmp    %ebx,%eax
+ 9c7:	73 f7                	jae    9c0 <randomrange+0x30>
+  return x/bin_size;
+ 9c9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 9cb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9ce:	f7 f7                	div    %edi
+}
+ 9d0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9d1:	01 f0                	add    %esi,%eax
+}
+ 9d3:	5e                   	pop    %esi
+ 9d4:	5f                   	pop    %edi
+ 9d5:	5d                   	pop    %ebp
+ 9d6:	c3                   	ret    
diff -ruN xv6-public/rm.d xv6-public-with-hybrid/rm.d
--- xv6-public/rm.d	2022-09-06 09:47:10.297917000 +0530
+++ xv6-public-with-hybrid/rm.d	2022-10-07 18:50:00.904952021 +0530
@@ -1 +1 @@
-rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/rm.o and xv6-public-with-hybrid/rm.o differ
diff -ruN xv6-public/rm.sym xv6-public-with-hybrid/rm.sym
--- xv6-public/rm.sym	2022-09-06 09:47:10.317939000 +0530
+++ xv6-public-with-hybrid/rm.sym	2022-10-07 18:50:00.980951799 +0530
@@ -1,20 +1,28 @@
 00000000 rm.c
 00000000 ulib.c
 00000000 printf.c
-000003a0 printint
-00000804 digits.0
+000003d0 printint
+00000a64 digits.0
 00000000 umalloc.c
-00000abc freep
-00000ac0 base
+00000dc0 freep
+00000dc4 base
+00000000 random.c
+00000de0 mt
+00000dac mti
+00000a78 mag01.0
 00000080 strcpy
-00000450 printf
+000007b0 sgenrand
+00000480 printf
 00000383 thread_exit
 000002a0 memmove
 0000031b mknod
 000001a0 gets
 00000353 getpid
-00000680 malloc
+000006b0 malloc
 00000363 sleep
+000003b3 get_burst_time
+00000950 random_at_most
+000003bb getCurrentInfo
 000002e3 pipe
 000002f3 write
 0000032b fstat
@@ -27,14 +35,19 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000abc __bss_start
+00000db0 __bss_start
 00000140 memset
 00000000 main
+000003ab set_burst_time
 000000b0 strcmp
 0000034b dup
+0000039b getMaxPid
+000007f0 genrand
+00000393 getNumProc
+000003a3 getProcInfo
 00000210 stat
-00000abc _edata
-00000ac8 _end
+00000db0 _edata
+000017a0 _end
 00000333 link
 000002d3 exit
 00000260 atoi
@@ -43,7 +56,9 @@
 00000313 open
 00000160 strchr
 00000373 thread_create
+000003c3 getCurrentPID
+00000990 randomrange
 0000033b mkdir
 000002fb close
 0000037b thread_join
-000005f0 free
+00000620 free
Binary files xv6-public/_sh and xv6-public-with-hybrid/_sh differ
diff -ruN xv6-public/sh.asm xv6-public-with-hybrid/sh.asm
--- xv6-public/sh.asm	2022-09-06 09:47:10.570221000 +0530
+++ xv6-public-with-hybrid/sh.asm	2022-10-07 18:50:01.428950484 +0530
@@ -32,7 +32,7 @@
   while((fd = open("console", O_RDWR)) >= 0){
       21:	83 ec 08             	sub    $0x8,%esp
       24:	6a 02                	push   $0x2
-      26:	68 69 13 00 00       	push   $0x1369
+      26:	68 c9 15 00 00       	push   $0x15c9
       2b:	e8 33 0e 00 00       	call   e63 <open>
       30:	83 c4 10             	add    $0x10,%esp
       33:	85 c0                	test   %eax,%eax
@@ -45,7 +45,7 @@
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      40:	80 3d 02 1a 00 00 20 	cmpb   $0x20,0x1a02
+      40:	80 3d 02 1d 00 00 20 	cmpb   $0x20,0x1d02
       47:	0f 84 88 00 00 00    	je     d5 <main+0xd5>
       4d:	8d 76 00             	lea    0x0(%esi),%esi
 int
@@ -65,30 +65,30 @@
       62:	e8 c4 0d 00 00       	call   e2b <wait>
   printf(2, "$ ");
       67:	83 ec 08             	sub    $0x8,%esp
-      6a:	68 c8 12 00 00       	push   $0x12c8
+      6a:	68 28 15 00 00       	push   $0x1528
       6f:	6a 02                	push   $0x2
-      71:	e8 2a 0f 00 00       	call   fa0 <printf>
+      71:	e8 5a 0f 00 00       	call   fd0 <printf>
   memset(buf, 0, nbuf);
       76:	83 c4 0c             	add    $0xc,%esp
       79:	6a 64                	push   $0x64
       7b:	6a 00                	push   $0x0
-      7d:	68 00 1a 00 00       	push   $0x1a00
+      7d:	68 00 1d 00 00       	push   $0x1d00
       82:	e8 09 0c 00 00       	call   c90 <memset>
   gets(buf, nbuf);
       87:	58                   	pop    %eax
       88:	5a                   	pop    %edx
       89:	6a 64                	push   $0x64
-      8b:	68 00 1a 00 00       	push   $0x1a00
+      8b:	68 00 1d 00 00       	push   $0x1d00
       90:	e8 5b 0c 00 00       	call   cf0 <gets>
   if(buf[0] == 0) // EOF
-      95:	0f b6 05 00 1a 00 00 	movzbl 0x1a00,%eax
+      95:	0f b6 05 00 1d 00 00 	movzbl 0x1d00,%eax
       9c:	83 c4 10             	add    $0x10,%esp
       9f:	84 c0                	test   %al,%al
       a1:	74 77                	je     11a <main+0x11a>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
       a3:	3c 63                	cmp    $0x63,%al
       a5:	75 a9                	jne    50 <main+0x50>
-      a7:	80 3d 01 1a 00 00 64 	cmpb   $0x64,0x1a01
+      a7:	80 3d 01 1d 00 00 64 	cmpb   $0x64,0x1d01
       ae:	75 a0                	jne    50 <main+0x50>
       b0:	eb 8e                	jmp    40 <main+0x40>
       close(fd);
@@ -100,18 +100,18 @@
       be:	eb a7                	jmp    67 <main+0x67>
       runcmd(parsecmd(buf));
       c0:	83 ec 0c             	sub    $0xc,%esp
-      c3:	68 00 1a 00 00       	push   $0x1a00
+      c3:	68 00 1d 00 00       	push   $0x1d00
       c8:	e8 93 0a 00 00       	call   b60 <parsecmd>
       cd:	89 04 24             	mov    %eax,(%esp)
       d0:	e8 db 00 00 00       	call   1b0 <runcmd>
       buf[strlen(buf)-1] = 0;  // chop \n
       d5:	83 ec 0c             	sub    $0xc,%esp
-      d8:	68 00 1a 00 00       	push   $0x1a00
+      d8:	68 00 1d 00 00       	push   $0x1d00
       dd:	e8 7e 0b 00 00       	call   c60 <strlen>
       if(chdir(buf+3) < 0)
-      e2:	c7 04 24 03 1a 00 00 	movl   $0x1a03,(%esp)
+      e2:	c7 04 24 03 1d 00 00 	movl   $0x1d03,(%esp)
       buf[strlen(buf)-1] = 0;  // chop \n
-      e9:	c6 80 ff 19 00 00 00 	movb   $0x0,0x19ff(%eax)
+      e9:	c6 80 ff 1c 00 00 00 	movb   $0x0,0x1cff(%eax)
       if(chdir(buf+3) < 0)
       f0:	e8 9e 0d 00 00       	call   e93 <chdir>
       f5:	83 c4 10             	add    $0x10,%esp
@@ -119,17 +119,17 @@
       fa:	0f 89 67 ff ff ff    	jns    67 <main+0x67>
         printf(2, "cannot cd %s\n", buf+3);
      100:	51                   	push   %ecx
-     101:	68 03 1a 00 00       	push   $0x1a03
-     106:	68 71 13 00 00       	push   $0x1371
+     101:	68 03 1d 00 00       	push   $0x1d03
+     106:	68 d1 15 00 00       	push   $0x15d1
      10b:	6a 02                	push   $0x2
-     10d:	e8 8e 0e 00 00       	call   fa0 <printf>
+     10d:	e8 be 0e 00 00       	call   fd0 <printf>
      112:	83 c4 10             	add    $0x10,%esp
      115:	e9 4d ff ff ff       	jmp    67 <main+0x67>
   exit();
      11a:	e8 04 0d 00 00       	call   e23 <exit>
     panic("fork");
      11f:	83 ec 0c             	sub    $0xc,%esp
-     122:	68 cb 12 00 00       	push   $0x12cb
+     122:	68 2b 15 00 00       	push   $0x152b
      127:	e8 44 00 00 00       	call   170 <panic>
      12c:	66 90                	xchg   %ax,%ax
      12e:	66 90                	xchg   %ax,%ax
@@ -144,9 +144,9 @@
      138:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
      13b:	83 ec 08             	sub    $0x8,%esp
-     13e:	68 c8 12 00 00       	push   $0x12c8
+     13e:	68 28 15 00 00       	push   $0x1528
      143:	6a 02                	push   $0x2
-     145:	e8 56 0e 00 00       	call   fa0 <printf>
+     145:	e8 86 0e 00 00       	call   fd0 <printf>
   memset(buf, 0, nbuf);
      14a:	83 c4 0c             	add    $0xc,%esp
      14d:	56                   	push   %esi
@@ -178,9 +178,9 @@
      173:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
      176:	ff 75 08             	push   0x8(%ebp)
-     179:	68 65 13 00 00       	push   $0x1365
+     179:	68 c5 15 00 00       	push   $0x15c5
      17e:	6a 02                	push   $0x2
-     180:	e8 1b 0e 00 00       	call   fa0 <printf>
+     180:	e8 4b 0e 00 00       	call   fd0 <printf>
   exit();
      185:	e8 99 0c 00 00       	call   e23 <exit>
      18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -201,7 +201,7 @@
      1a1:	c3                   	ret    
     panic("fork");
      1a2:	83 ec 0c             	sub    $0xc,%esp
-     1a5:	68 cb 12 00 00       	push   $0x12cb
+     1a5:	68 2b 15 00 00       	push   $0x152b
      1aa:	e8 c1 ff ff ff       	call   170 <panic>
      1af:	90                   	nop
 
@@ -219,7 +219,7 @@
      1be:	83 3b 05             	cmpl   $0x5,(%ebx)
      1c1:	0f 87 e3 00 00 00    	ja     2aa <runcmd+0xfa>
      1c7:	8b 03                	mov    (%ebx),%eax
-     1c9:	ff 24 85 80 13 00 00 	jmp    *0x1380(,%eax,4)
+     1c9:	ff 24 85 e0 15 00 00 	jmp    *0x15e0(,%eax,4)
     if(ecmd->argv[0] == 0)
      1d0:	8b 43 04             	mov    0x4(%ebx),%eax
      1d3:	85 c0                	test   %eax,%eax
@@ -234,9 +234,9 @@
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      1e3:	83 c4 0c             	add    $0xc,%esp
      1e6:	ff 73 04             	push   0x4(%ebx)
-     1e9:	68 d7 12 00 00       	push   $0x12d7
+     1e9:	68 37 15 00 00       	push   $0x1537
      1ee:	6a 02                	push   $0x2
-     1f0:	e8 ab 0d 00 00       	call   fa0 <printf>
+     1f0:	e8 db 0d 00 00       	call   fd0 <printf>
     break;
      1f5:	83 c4 10             	add    $0x10,%esp
      1f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -308,19 +308,19 @@
      2a5:	e8 06 ff ff ff       	call   1b0 <runcmd>
     panic("runcmd");
      2aa:	83 ec 0c             	sub    $0xc,%esp
-     2ad:	68 d0 12 00 00       	push   $0x12d0
+     2ad:	68 30 15 00 00       	push   $0x1530
      2b2:	e8 b9 fe ff ff       	call   170 <panic>
       printf(2, "open %s failed\n", rcmd->file);
      2b7:	51                   	push   %ecx
      2b8:	ff 73 08             	push   0x8(%ebx)
-     2bb:	68 e7 12 00 00       	push   $0x12e7
+     2bb:	68 47 15 00 00       	push   $0x1547
      2c0:	6a 02                	push   $0x2
-     2c2:	e8 d9 0c 00 00       	call   fa0 <printf>
+     2c2:	e8 09 0d 00 00       	call   fd0 <printf>
       exit();
      2c7:	e8 57 0b 00 00       	call   e23 <exit>
       panic("pipe");
      2cc:	83 ec 0c             	sub    $0xc,%esp
-     2cf:	68 f7 12 00 00       	push   $0x12f7
+     2cf:	68 57 15 00 00       	push   $0x1557
      2d4:	e8 97 fe ff ff       	call   170 <panic>
       close(1);
      2d9:	83 ec 0c             	sub    $0xc,%esp
@@ -380,7 +380,7 @@
 
   cmd = malloc(sizeof(*cmd));
      347:	6a 54                	push   $0x54
-     349:	e8 82 0e 00 00       	call   11d0 <malloc>
+     349:	e8 b2 0e 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      34e:	83 c4 0c             	add    $0xc,%esp
      351:	6a 54                	push   $0x54
@@ -413,7 +413,7 @@
 
   cmd = malloc(sizeof(*cmd));
      377:	6a 18                	push   $0x18
-     379:	e8 52 0e 00 00       	call   11d0 <malloc>
+     379:	e8 82 0e 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      37e:	83 c4 0c             	add    $0xc,%esp
      381:	6a 18                	push   $0x18
@@ -464,7 +464,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3c7:	6a 0c                	push   $0xc
-     3c9:	e8 02 0e 00 00       	call   11d0 <malloc>
+     3c9:	e8 32 0e 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3ce:	83 c4 0c             	add    $0xc,%esp
      3d1:	6a 0c                	push   $0xc
@@ -506,7 +506,7 @@
 
   cmd = malloc(sizeof(*cmd));
      407:	6a 0c                	push   $0xc
-     409:	e8 c2 0d 00 00       	call   11d0 <malloc>
+     409:	e8 f2 0d 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      40e:	83 c4 0c             	add    $0xc,%esp
      411:	6a 0c                	push   $0xc
@@ -548,7 +548,7 @@
 
   cmd = malloc(sizeof(*cmd));
      447:	6a 08                	push   $0x8
-     449:	e8 82 0d 00 00       	call   11d0 <malloc>
+     449:	e8 b2 0d 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      44e:	83 c4 0c             	add    $0xc,%esp
      451:	6a 08                	push   $0x8
@@ -608,7 +608,7 @@
      497:	0f be 07             	movsbl (%edi),%eax
      49a:	83 ec 08             	sub    $0x8,%esp
      49d:	50                   	push   %eax
-     49e:	68 ec 19 00 00       	push   $0x19ec
+     49e:	68 dc 1c 00 00       	push   $0x1cdc
      4a3:	e8 08 08 00 00       	call   cb0 <strchr>
      4a8:	83 c4 10             	add    $0x10,%esp
      4ab:	85 c0                	test   %eax,%eax
@@ -653,7 +653,7 @@
      4e7:	0f be 07             	movsbl (%edi),%eax
      4ea:	83 ec 08             	sub    $0x8,%esp
      4ed:	50                   	push   %eax
-     4ee:	68 ec 19 00 00       	push   $0x19ec
+     4ee:	68 dc 1c 00 00       	push   $0x1cdc
      4f3:	e8 b8 07 00 00       	call   cb0 <strchr>
      4f8:	83 c4 10             	add    $0x10,%esp
      4fb:	85 c0                	test   %eax,%eax
@@ -687,7 +687,7 @@
      528:	0f be 07             	movsbl (%edi),%eax
      52b:	83 ec 08             	sub    $0x8,%esp
      52e:	50                   	push   %eax
-     52f:	68 e4 19 00 00       	push   $0x19e4
+     52f:	68 d4 1c 00 00       	push   $0x1cd4
      534:	e8 77 07 00 00       	call   cb0 <strchr>
      539:	83 c4 10             	add    $0x10,%esp
      53c:	85 c0                	test   %eax,%eax
@@ -701,7 +701,7 @@
      54a:	83 ec 08             	sub    $0x8,%esp
      54d:	0f be f0             	movsbl %al,%esi
      550:	56                   	push   %esi
-     551:	68 ec 19 00 00       	push   $0x19ec
+     551:	68 dc 1c 00 00       	push   $0x1cdc
      556:	e8 55 07 00 00       	call   cb0 <strchr>
      55b:	83 c4 10             	add    $0x10,%esp
      55e:	85 c0                	test   %eax,%eax
@@ -781,7 +781,7 @@
      5f7:	0f be 03             	movsbl (%ebx),%eax
      5fa:	83 ec 08             	sub    $0x8,%esp
      5fd:	50                   	push   %eax
-     5fe:	68 ec 19 00 00       	push   $0x19ec
+     5fe:	68 dc 1c 00 00       	push   $0x1cdc
      603:	e8 a8 06 00 00       	call   cb0 <strchr>
      608:	83 c4 10             	add    $0x10,%esp
      60b:	85 c0                	test   %eax,%eax
@@ -843,7 +843,7 @@
   while(peek(ps, es, "<>")){
      65f:	90                   	nop
      660:	83 ec 04             	sub    $0x4,%esp
-     663:	68 19 13 00 00       	push   $0x1319
+     663:	68 79 15 00 00       	push   $0x1579
      668:	53                   	push   %ebx
      669:	56                   	push   %esi
      66a:	e8 61 ff ff ff       	call   5d0 <peek>
@@ -892,7 +892,7 @@
      6bc:	89 55 d0             	mov    %edx,-0x30(%ebp)
      6bf:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
   cmd = malloc(sizeof(*cmd));
-     6c2:	e8 09 0b 00 00       	call   11d0 <malloc>
+     6c2:	e8 39 0b 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      6c7:	83 c4 0c             	add    $0xc,%esp
      6ca:	6a 18                	push   $0x18
@@ -937,7 +937,7 @@
      71b:	89 55 d0             	mov    %edx,-0x30(%ebp)
      71e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
   cmd = malloc(sizeof(*cmd));
-     721:	e8 aa 0a 00 00       	call   11d0 <malloc>
+     721:	e8 da 0a 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      726:	83 c4 0c             	add    $0xc,%esp
      729:	6a 18                	push   $0x18
@@ -986,7 +986,7 @@
      77a:	c3                   	ret    
       panic("missing file for redirection");
      77b:	83 ec 0c             	sub    $0xc,%esp
-     77e:	68 fc 12 00 00       	push   $0x12fc
+     77e:	68 5c 15 00 00       	push   $0x155c
      783:	e8 e8 f9 ff ff       	call   170 <panic>
      788:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      78f:	90                   	nop
@@ -1012,7 +1012,7 @@
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     79f:	68 1c 13 00 00       	push   $0x131c
+     79f:	68 7c 15 00 00       	push   $0x157c
      7a4:	57                   	push   %edi
      7a5:	56                   	push   %esi
      7a6:	e8 25 fe ff ff       	call   5d0 <peek>
@@ -1023,7 +1023,7 @@
      7b6:	83 ec 0c             	sub    $0xc,%esp
      7b9:	89 c3                	mov    %eax,%ebx
      7bb:	6a 54                	push   $0x54
-     7bd:	e8 0e 0a 00 00       	call   11d0 <malloc>
+     7bd:	e8 3e 0a 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      7c2:	83 c4 0c             	add    $0xc,%esp
      7c5:	6a 54                	push   $0x54
@@ -1069,7 +1069,7 @@
      800:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
      803:	83 ec 04             	sub    $0x4,%esp
-     806:	68 33 13 00 00       	push   $0x1333
+     806:	68 93 15 00 00       	push   $0x1593
      80b:	57                   	push   %edi
      80c:	56                   	push   %esi
      80d:	e8 be fd ff ff       	call   5d0 <peek>
@@ -1104,7 +1104,7 @@
      84b:	75 a3                	jne    7f0 <parseexec+0x60>
       panic("too many args");
      84d:	83 ec 0c             	sub    $0xc,%esp
-     850:	68 25 13 00 00       	push   $0x1325
+     850:	68 85 15 00 00       	push   $0x1585
      855:	e8 16 f9 ff ff       	call   170 <panic>
      85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1140,7 +1140,7 @@
      895:	c3                   	ret    
       panic("syntax");
      896:	83 ec 0c             	sub    $0xc,%esp
-     899:	68 1e 13 00 00       	push   $0x131e
+     899:	68 7e 15 00 00       	push   $0x157e
      89e:	e8 cd f8 ff ff       	call   170 <panic>
      8a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -1161,7 +1161,7 @@
      8c1:	e8 ca fe ff ff       	call   790 <parseexec>
   if(peek(ps, es, "|")){
      8c6:	83 c4 0c             	add    $0xc,%esp
-     8c9:	68 38 13 00 00       	push   $0x1338
+     8c9:	68 98 15 00 00       	push   $0x1598
   cmd = parseexec(ps, es);
      8ce:	89 c3                	mov    %eax,%ebx
   if(peek(ps, es, "|")){
@@ -1198,7 +1198,7 @@
     cmd = pipecmd(cmd, parsepipe(ps, es));
      90b:	89 c7                	mov    %eax,%edi
   cmd = malloc(sizeof(*cmd));
-     90d:	e8 be 08 00 00       	call   11d0 <malloc>
+     90d:	e8 ee 08 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      912:	83 c4 0c             	add    $0xc,%esp
      915:	6a 0c                	push   $0xc
@@ -1257,7 +1257,7 @@
      966:	e8 05 fb ff ff       	call   470 <gettoken>
   cmd = malloc(sizeof(*cmd));
      96b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-     972:	e8 59 08 00 00       	call   11d0 <malloc>
+     972:	e8 89 08 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      977:	83 c4 0c             	add    $0xc,%esp
      97a:	6a 08                	push   $0x8
@@ -1276,7 +1276,7 @@
      996:	89 d3                	mov    %edx,%ebx
   while(peek(ps, es, "&")){
      998:	83 ec 04             	sub    $0x4,%esp
-     99b:	68 3a 13 00 00       	push   $0x133a
+     99b:	68 9a 15 00 00       	push   $0x159a
      9a0:	57                   	push   %edi
      9a1:	56                   	push   %esi
      9a2:	e8 29 fc ff ff       	call   5d0 <peek>
@@ -1285,7 +1285,7 @@
      9ac:	75 b2                	jne    960 <parseline+0x20>
   if(peek(ps, es, ";")){
      9ae:	83 ec 04             	sub    $0x4,%esp
-     9b1:	68 36 13 00 00       	push   $0x1336
+     9b1:	68 96 15 00 00       	push   $0x1596
      9b6:	57                   	push   %edi
      9b7:	56                   	push   %esi
      9b8:	e8 13 fc ff ff       	call   5d0 <peek>
@@ -1318,7 +1318,7 @@
     cmd = listcmd(cmd, parseline(ps, es));
      9eb:	89 c7                	mov    %eax,%edi
   cmd = malloc(sizeof(*cmd));
-     9ed:	e8 de 07 00 00       	call   11d0 <malloc>
+     9ed:	e8 0e 08 00 00       	call   1200 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      9f2:	83 c4 0c             	add    $0xc,%esp
      9f5:	6a 0c                	push   $0xc
@@ -1359,7 +1359,7 @@
      a29:	8b 5d 08             	mov    0x8(%ebp),%ebx
      a2c:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     a2f:	68 1c 13 00 00       	push   $0x131c
+     a2f:	68 7c 15 00 00       	push   $0x157c
      a34:	56                   	push   %esi
      a35:	53                   	push   %ebx
      a36:	e8 95 fb ff ff       	call   5d0 <peek>
@@ -1380,7 +1380,7 @@
      a51:	e8 ea fe ff ff       	call   940 <parseline>
   if(!peek(ps, es, ")"))
      a56:	83 c4 0c             	add    $0xc,%esp
-     a59:	68 58 13 00 00       	push   $0x1358
+     a59:	68 b8 15 00 00       	push   $0x15b8
   cmd = parseline(ps, es);
      a5e:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
@@ -1411,11 +1411,11 @@
      a8b:	c3                   	ret    
     panic("parseblock");
      a8c:	83 ec 0c             	sub    $0xc,%esp
-     a8f:	68 3c 13 00 00       	push   $0x133c
+     a8f:	68 9c 15 00 00       	push   $0x159c
      a94:	e8 d7 f6 ff ff       	call   170 <panic>
     panic("syntax - missing )");
      a99:	83 ec 0c             	sub    $0xc,%esp
-     a9c:	68 47 13 00 00       	push   $0x1347
+     a9c:	68 a7 15 00 00       	push   $0x15a7
      aa1:	e8 ca f6 ff ff       	call   170 <panic>
      aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      aad:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1445,7 +1445,7 @@
      ac2:	83 3b 05             	cmpl   $0x5,(%ebx)
      ac5:	77 61                	ja     b28 <nulterminate+0x78>
      ac7:	8b 03                	mov    (%ebx),%eax
-     ac9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)
+     ac9:	ff 24 85 f8 15 00 00 	jmp    *0x15f8(,%eax,4)
     nulterminate(pcmd->right);
     break;
 
@@ -1558,7 +1558,7 @@
      b7b:	e8 c0 fd ff ff       	call   940 <parseline>
   peek(&s, es, "");
      b80:	83 c4 0c             	add    $0xc,%esp
-     b83:	68 e6 12 00 00       	push   $0x12e6
+     b83:	68 46 15 00 00       	push   $0x1546
   cmd = parseline(&s, es);
      b88:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
@@ -1585,11 +1585,11 @@
     printf(2, "leftovers: %s\n", s);
      bae:	52                   	push   %edx
      baf:	50                   	push   %eax
-     bb0:	68 5a 13 00 00       	push   $0x135a
+     bb0:	68 ba 15 00 00       	push   $0x15ba
      bb5:	6a 02                	push   $0x2
-     bb7:	e8 e4 03 00 00       	call   fa0 <printf>
+     bb7:	e8 14 04 00 00       	call   fd0 <printf>
     panic("syntax");
-     bbc:	c7 04 24 1e 13 00 00 	movl   $0x131e,(%esp)
+     bbc:	c7 04 24 7e 15 00 00 	movl   $0x157e,(%esp)
      bc3:	e8 a8 f5 ff ff       	call   170 <panic>
      bc8:	66 90                	xchg   %ax,%ax
      bca:	66 90                	xchg   %ax,%ax
@@ -2140,572 +2140,887 @@
      eda:	c3                   	ret    
 
 00000edb <draw>:
+SYSCALL(draw)
      edb:	b8 19 00 00 00       	mov    $0x19,%eax
      ee0:	cd 40                	int    $0x40
      ee2:	c3                   	ret    
-     ee3:	66 90                	xchg   %ax,%ax
-     ee5:	66 90                	xchg   %ax,%ax
-     ee7:	66 90                	xchg   %ax,%ax
-     ee9:	66 90                	xchg   %ax,%ax
-     eeb:	66 90                	xchg   %ax,%ax
-     eed:	66 90                	xchg   %ax,%ax
-     eef:	90                   	nop
 
-00000ef0 <printint>:
+00000ee3 <getNumProc>:
+SYSCALL(getNumProc)
+     ee3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     ee8:	cd 40                	int    $0x40
+     eea:	c3                   	ret    
+
+00000eeb <getMaxPid>:
+SYSCALL(getMaxPid)
+     eeb:	b8 1b 00 00 00       	mov    $0x1b,%eax
+     ef0:	cd 40                	int    $0x40
+     ef2:	c3                   	ret    
+
+00000ef3 <getProcInfo>:
+SYSCALL(getProcInfo)
+     ef3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+     ef8:	cd 40                	int    $0x40
+     efa:	c3                   	ret    
+
+00000efb <set_burst_time>:
+SYSCALL(set_burst_time)
+     efb:	b8 1d 00 00 00       	mov    $0x1d,%eax
+     f00:	cd 40                	int    $0x40
+     f02:	c3                   	ret    
+
+00000f03 <get_burst_time>:
+SYSCALL(get_burst_time)
+     f03:	b8 1e 00 00 00       	mov    $0x1e,%eax
+     f08:	cd 40                	int    $0x40
+     f0a:	c3                   	ret    
+
+00000f0b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+     f0b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+     f10:	cd 40                	int    $0x40
+     f12:	c3                   	ret    
+
+00000f13 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+     f13:	b8 20 00 00 00       	mov    $0x20,%eax
+     f18:	cd 40                	int    $0x40
+     f1a:	c3                   	ret    
+     f1b:	66 90                	xchg   %ax,%ax
+     f1d:	66 90                	xchg   %ax,%ax
+     f1f:	90                   	nop
+
+00000f20 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     ef0:	55                   	push   %ebp
-     ef1:	89 e5                	mov    %esp,%ebp
-     ef3:	57                   	push   %edi
-     ef4:	56                   	push   %esi
-     ef5:	53                   	push   %ebx
-     ef6:	83 ec 3c             	sub    $0x3c,%esp
-     ef9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+     f20:	55                   	push   %ebp
+     f21:	89 e5                	mov    %esp,%ebp
+     f23:	57                   	push   %edi
+     f24:	56                   	push   %esi
+     f25:	53                   	push   %ebx
+     f26:	83 ec 3c             	sub    $0x3c,%esp
+     f29:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-     efc:	89 d1                	mov    %edx,%ecx
+     f2c:	89 d1                	mov    %edx,%ecx
 {
-     efe:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     f2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-     f01:	85 d2                	test   %edx,%edx
-     f03:	0f 89 7f 00 00 00    	jns    f88 <printint+0x98>
-     f09:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     f0d:	74 79                	je     f88 <printint+0x98>
+     f31:	85 d2                	test   %edx,%edx
+     f33:	0f 89 7f 00 00 00    	jns    fb8 <printint+0x98>
+     f39:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     f3d:	74 79                	je     fb8 <printint+0x98>
     neg = 1;
-     f0f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+     f3f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-     f16:	f7 d9                	neg    %ecx
+     f46:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-     f18:	31 db                	xor    %ebx,%ebx
-     f1a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-     f1d:	8d 76 00             	lea    0x0(%esi),%esi
+     f48:	31 db                	xor    %ebx,%ebx
+     f4a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     f4d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-     f20:	89 c8                	mov    %ecx,%eax
-     f22:	31 d2                	xor    %edx,%edx
-     f24:	89 cf                	mov    %ecx,%edi
-     f26:	f7 75 c4             	divl   -0x3c(%ebp)
-     f29:	0f b6 92 10 14 00 00 	movzbl 0x1410(%edx),%edx
-     f30:	89 45 c0             	mov    %eax,-0x40(%ebp)
-     f33:	89 d8                	mov    %ebx,%eax
-     f35:	8d 5b 01             	lea    0x1(%ebx),%ebx
+     f50:	89 c8                	mov    %ecx,%eax
+     f52:	31 d2                	xor    %edx,%edx
+     f54:	89 cf                	mov    %ecx,%edi
+     f56:	f7 75 c4             	divl   -0x3c(%ebp)
+     f59:	0f b6 92 70 16 00 00 	movzbl 0x1670(%edx),%edx
+     f60:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     f63:	89 d8                	mov    %ebx,%eax
+     f65:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-     f38:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+     f68:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-     f3b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+     f6b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-     f3e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-     f41:	76 dd                	jbe    f20 <printint+0x30>
+     f6e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     f71:	76 dd                	jbe    f50 <printint+0x30>
   if(neg)
-     f43:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-     f46:	85 c9                	test   %ecx,%ecx
-     f48:	74 0c                	je     f56 <printint+0x66>
+     f73:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     f76:	85 c9                	test   %ecx,%ecx
+     f78:	74 0c                	je     f86 <printint+0x66>
     buf[i++] = '-';
-     f4a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+     f7a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-     f4f:	89 d8                	mov    %ebx,%eax
+     f7f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-     f51:	ba 2d 00 00 00       	mov    $0x2d,%edx
+     f81:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-     f56:	8b 7d b8             	mov    -0x48(%ebp),%edi
-     f59:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-     f5d:	eb 07                	jmp    f66 <printint+0x76>
-     f5f:	90                   	nop
+     f86:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     f89:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     f8d:	eb 07                	jmp    f96 <printint+0x76>
+     f8f:	90                   	nop
     putc(fd, buf[i]);
-     f60:	0f b6 13             	movzbl (%ebx),%edx
-     f63:	83 eb 01             	sub    $0x1,%ebx
+     f90:	0f b6 13             	movzbl (%ebx),%edx
+     f93:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-     f66:	83 ec 04             	sub    $0x4,%esp
-     f69:	88 55 d7             	mov    %dl,-0x29(%ebp)
-     f6c:	6a 01                	push   $0x1
-     f6e:	56                   	push   %esi
-     f6f:	57                   	push   %edi
-     f70:	e8 ce fe ff ff       	call   e43 <write>
+     f96:	83 ec 04             	sub    $0x4,%esp
+     f99:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     f9c:	6a 01                	push   $0x1
+     f9e:	56                   	push   %esi
+     f9f:	57                   	push   %edi
+     fa0:	e8 9e fe ff ff       	call   e43 <write>
   while(--i >= 0)
-     f75:	83 c4 10             	add    $0x10,%esp
-     f78:	39 de                	cmp    %ebx,%esi
-     f7a:	75 e4                	jne    f60 <printint+0x70>
-}
-     f7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     f7f:	5b                   	pop    %ebx
-     f80:	5e                   	pop    %esi
-     f81:	5f                   	pop    %edi
-     f82:	5d                   	pop    %ebp
-     f83:	c3                   	ret    
-     f84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     fa5:	83 c4 10             	add    $0x10,%esp
+     fa8:	39 de                	cmp    %ebx,%esi
+     faa:	75 e4                	jne    f90 <printint+0x70>
+}
+     fac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     faf:	5b                   	pop    %ebx
+     fb0:	5e                   	pop    %esi
+     fb1:	5f                   	pop    %edi
+     fb2:	5d                   	pop    %ebp
+     fb3:	c3                   	ret    
+     fb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-     f88:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-     f8f:	eb 87                	jmp    f18 <printint+0x28>
-     f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f9f:	90                   	nop
+     fb8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     fbf:	eb 87                	jmp    f48 <printint+0x28>
+     fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fcf:	90                   	nop
 
-00000fa0 <printf>:
+00000fd0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     fa0:	55                   	push   %ebp
-     fa1:	89 e5                	mov    %esp,%ebp
-     fa3:	57                   	push   %edi
-     fa4:	56                   	push   %esi
-     fa5:	53                   	push   %ebx
-     fa6:	83 ec 2c             	sub    $0x2c,%esp
+     fd0:	55                   	push   %ebp
+     fd1:	89 e5                	mov    %esp,%ebp
+     fd3:	57                   	push   %edi
+     fd4:	56                   	push   %esi
+     fd5:	53                   	push   %ebx
+     fd6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     fa9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     fd9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
-     fac:	8b 75 08             	mov    0x8(%ebp),%esi
+     fdc:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
-     faf:	0f b6 13             	movzbl (%ebx),%edx
-     fb2:	84 d2                	test   %dl,%dl
-     fb4:	74 6a                	je     1020 <printf+0x80>
+     fdf:	0f b6 13             	movzbl (%ebx),%edx
+     fe2:	84 d2                	test   %dl,%dl
+     fe4:	74 6a                	je     1050 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
-     fb6:	8d 45 10             	lea    0x10(%ebp),%eax
-     fb9:	83 c3 01             	add    $0x1,%ebx
+     fe6:	8d 45 10             	lea    0x10(%ebp),%eax
+     fe9:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
-     fbc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+     fec:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-     fbf:	31 c9                	xor    %ecx,%ecx
+     fef:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
-     fc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     fc4:	eb 36                	jmp    ffc <printf+0x5c>
-     fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fcd:	8d 76 00             	lea    0x0(%esi),%esi
-     fd0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+     ff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     ff4:	eb 36                	jmp    102c <printf+0x5c>
+     ff6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ffd:	8d 76 00             	lea    0x0(%esi),%esi
+    1000:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-     fd3:	b9 25 00 00 00       	mov    $0x25,%ecx
+    1003:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
-     fd8:	83 f8 25             	cmp    $0x25,%eax
-     fdb:	74 15                	je     ff2 <printf+0x52>
+    1008:	83 f8 25             	cmp    $0x25,%eax
+    100b:	74 15                	je     1022 <printf+0x52>
   write(fd, &c, 1);
-     fdd:	83 ec 04             	sub    $0x4,%esp
-     fe0:	88 55 e7             	mov    %dl,-0x19(%ebp)
-     fe3:	6a 01                	push   $0x1
-     fe5:	57                   	push   %edi
-     fe6:	56                   	push   %esi
-     fe7:	e8 57 fe ff ff       	call   e43 <write>
-     fec:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+    100d:	83 ec 04             	sub    $0x4,%esp
+    1010:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    1013:	6a 01                	push   $0x1
+    1015:	57                   	push   %edi
+    1016:	56                   	push   %esi
+    1017:	e8 27 fe ff ff       	call   e43 <write>
+    101c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
-     fef:	83 c4 10             	add    $0x10,%esp
+    101f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-     ff2:	0f b6 13             	movzbl (%ebx),%edx
-     ff5:	83 c3 01             	add    $0x1,%ebx
-     ff8:	84 d2                	test   %dl,%dl
-     ffa:	74 24                	je     1020 <printf+0x80>
+    1022:	0f b6 13             	movzbl (%ebx),%edx
+    1025:	83 c3 01             	add    $0x1,%ebx
+    1028:	84 d2                	test   %dl,%dl
+    102a:	74 24                	je     1050 <printf+0x80>
     c = fmt[i] & 0xff;
-     ffc:	0f b6 c2             	movzbl %dl,%eax
+    102c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
-     fff:	85 c9                	test   %ecx,%ecx
-    1001:	74 cd                	je     fd0 <printf+0x30>
+    102f:	85 c9                	test   %ecx,%ecx
+    1031:	74 cd                	je     1000 <printf+0x30>
       }
     } else if(state == '%'){
-    1003:	83 f9 25             	cmp    $0x25,%ecx
-    1006:	75 ea                	jne    ff2 <printf+0x52>
+    1033:	83 f9 25             	cmp    $0x25,%ecx
+    1036:	75 ea                	jne    1022 <printf+0x52>
       if(c == 'd'){
-    1008:	83 f8 25             	cmp    $0x25,%eax
-    100b:	0f 84 07 01 00 00    	je     1118 <printf+0x178>
-    1011:	83 e8 63             	sub    $0x63,%eax
-    1014:	83 f8 15             	cmp    $0x15,%eax
-    1017:	77 17                	ja     1030 <printf+0x90>
-    1019:	ff 24 85 b8 13 00 00 	jmp    *0x13b8(,%eax,4)
+    1038:	83 f8 25             	cmp    $0x25,%eax
+    103b:	0f 84 07 01 00 00    	je     1148 <printf+0x178>
+    1041:	83 e8 63             	sub    $0x63,%eax
+    1044:	83 f8 15             	cmp    $0x15,%eax
+    1047:	77 17                	ja     1060 <printf+0x90>
+    1049:	ff 24 85 18 16 00 00 	jmp    *0x1618(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
-    1020:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1023:	5b                   	pop    %ebx
-    1024:	5e                   	pop    %esi
-    1025:	5f                   	pop    %edi
-    1026:	5d                   	pop    %ebp
-    1027:	c3                   	ret    
-    1028:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    102f:	90                   	nop
+    1050:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1053:	5b                   	pop    %ebx
+    1054:	5e                   	pop    %esi
+    1055:	5f                   	pop    %edi
+    1056:	5d                   	pop    %ebp
+    1057:	c3                   	ret    
+    1058:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    105f:	90                   	nop
   write(fd, &c, 1);
-    1030:	83 ec 04             	sub    $0x4,%esp
-    1033:	88 55 d4             	mov    %dl,-0x2c(%ebp)
-    1036:	6a 01                	push   $0x1
-    1038:	57                   	push   %edi
-    1039:	56                   	push   %esi
-    103a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    103e:	e8 00 fe ff ff       	call   e43 <write>
+    1060:	83 ec 04             	sub    $0x4,%esp
+    1063:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+    1066:	6a 01                	push   $0x1
+    1068:	57                   	push   %edi
+    1069:	56                   	push   %esi
+    106a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    106e:	e8 d0 fd ff ff       	call   e43 <write>
         putc(fd, c);
-    1043:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+    1073:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
-    1047:	83 c4 0c             	add    $0xc,%esp
-    104a:	88 55 e7             	mov    %dl,-0x19(%ebp)
-    104d:	6a 01                	push   $0x1
-    104f:	57                   	push   %edi
-    1050:	56                   	push   %esi
-    1051:	e8 ed fd ff ff       	call   e43 <write>
+    1077:	83 c4 0c             	add    $0xc,%esp
+    107a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    107d:	6a 01                	push   $0x1
+    107f:	57                   	push   %edi
+    1080:	56                   	push   %esi
+    1081:	e8 bd fd ff ff       	call   e43 <write>
         putc(fd, c);
-    1056:	83 c4 10             	add    $0x10,%esp
+    1086:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    1059:	31 c9                	xor    %ecx,%ecx
-    105b:	eb 95                	jmp    ff2 <printf+0x52>
-    105d:	8d 76 00             	lea    0x0(%esi),%esi
+    1089:	31 c9                	xor    %ecx,%ecx
+    108b:	eb 95                	jmp    1022 <printf+0x52>
+    108d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
-    1060:	83 ec 0c             	sub    $0xc,%esp
-    1063:	b9 10 00 00 00       	mov    $0x10,%ecx
-    1068:	6a 00                	push   $0x0
-    106a:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    106d:	8b 10                	mov    (%eax),%edx
-    106f:	89 f0                	mov    %esi,%eax
-    1071:	e8 7a fe ff ff       	call   ef0 <printint>
+    1090:	83 ec 0c             	sub    $0xc,%esp
+    1093:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1098:	6a 00                	push   $0x0
+    109a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    109d:	8b 10                	mov    (%eax),%edx
+    109f:	89 f0                	mov    %esi,%eax
+    10a1:	e8 7a fe ff ff       	call   f20 <printint>
         ap++;
-    1076:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
-    107a:	83 c4 10             	add    $0x10,%esp
+    10a6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    10aa:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    107d:	31 c9                	xor    %ecx,%ecx
-    107f:	e9 6e ff ff ff       	jmp    ff2 <printf+0x52>
-    1084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10ad:	31 c9                	xor    %ecx,%ecx
+    10af:	e9 6e ff ff ff       	jmp    1022 <printf+0x52>
+    10b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
-    1088:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    108b:	8b 10                	mov    (%eax),%edx
+    10b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    10bb:	8b 10                	mov    (%eax),%edx
         ap++;
-    108d:	83 c0 04             	add    $0x4,%eax
-    1090:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    10bd:	83 c0 04             	add    $0x4,%eax
+    10c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    1093:	85 d2                	test   %edx,%edx
-    1095:	0f 84 8d 00 00 00    	je     1128 <printf+0x188>
+    10c3:	85 d2                	test   %edx,%edx
+    10c5:	0f 84 8d 00 00 00    	je     1158 <printf+0x188>
         while(*s != 0){
-    109b:	0f b6 02             	movzbl (%edx),%eax
+    10cb:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
-    109e:	31 c9                	xor    %ecx,%ecx
+    10ce:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
-    10a0:	84 c0                	test   %al,%al
-    10a2:	0f 84 4a ff ff ff    	je     ff2 <printf+0x52>
-    10a8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
-    10ab:	89 d3                	mov    %edx,%ebx
-    10ad:	8d 76 00             	lea    0x0(%esi),%esi
+    10d0:	84 c0                	test   %al,%al
+    10d2:	0f 84 4a ff ff ff    	je     1022 <printf+0x52>
+    10d8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    10db:	89 d3                	mov    %edx,%ebx
+    10dd:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
-    10b0:	83 ec 04             	sub    $0x4,%esp
+    10e0:	83 ec 04             	sub    $0x4,%esp
           s++;
-    10b3:	83 c3 01             	add    $0x1,%ebx
-    10b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+    10e3:	83 c3 01             	add    $0x1,%ebx
+    10e6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    10b9:	6a 01                	push   $0x1
-    10bb:	57                   	push   %edi
-    10bc:	56                   	push   %esi
-    10bd:	e8 81 fd ff ff       	call   e43 <write>
+    10e9:	6a 01                	push   $0x1
+    10eb:	57                   	push   %edi
+    10ec:	56                   	push   %esi
+    10ed:	e8 51 fd ff ff       	call   e43 <write>
         while(*s != 0){
-    10c2:	0f b6 03             	movzbl (%ebx),%eax
-    10c5:	83 c4 10             	add    $0x10,%esp
-    10c8:	84 c0                	test   %al,%al
-    10ca:	75 e4                	jne    10b0 <printf+0x110>
+    10f2:	0f b6 03             	movzbl (%ebx),%eax
+    10f5:	83 c4 10             	add    $0x10,%esp
+    10f8:	84 c0                	test   %al,%al
+    10fa:	75 e4                	jne    10e0 <printf+0x110>
       state = 0;
-    10cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
-    10cf:	31 c9                	xor    %ecx,%ecx
-    10d1:	e9 1c ff ff ff       	jmp    ff2 <printf+0x52>
-    10d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    10dd:	8d 76 00             	lea    0x0(%esi),%esi
+    10fc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+    10ff:	31 c9                	xor    %ecx,%ecx
+    1101:	e9 1c ff ff ff       	jmp    1022 <printf+0x52>
+    1106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    110d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
-    10e0:	83 ec 0c             	sub    $0xc,%esp
-    10e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    10e8:	6a 01                	push   $0x1
-    10ea:	e9 7b ff ff ff       	jmp    106a <printf+0xca>
-    10ef:	90                   	nop
+    1110:	83 ec 0c             	sub    $0xc,%esp
+    1113:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1118:	6a 01                	push   $0x1
+    111a:	e9 7b ff ff ff       	jmp    109a <printf+0xca>
+    111f:	90                   	nop
         putc(fd, *ap);
-    10f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1120:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
-    10f3:	83 ec 04             	sub    $0x4,%esp
+    1123:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    10f6:	8b 00                	mov    (%eax),%eax
+    1126:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
-    10f8:	6a 01                	push   $0x1
-    10fa:	57                   	push   %edi
-    10fb:	56                   	push   %esi
+    1128:	6a 01                	push   $0x1
+    112a:	57                   	push   %edi
+    112b:	56                   	push   %esi
         putc(fd, *ap);
-    10fc:	88 45 e7             	mov    %al,-0x19(%ebp)
+    112c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    10ff:	e8 3f fd ff ff       	call   e43 <write>
+    112f:	e8 0f fd ff ff       	call   e43 <write>
         ap++;
-    1104:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
-    1108:	83 c4 10             	add    $0x10,%esp
+    1134:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    1138:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    110b:	31 c9                	xor    %ecx,%ecx
-    110d:	e9 e0 fe ff ff       	jmp    ff2 <printf+0x52>
-    1112:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    113b:	31 c9                	xor    %ecx,%ecx
+    113d:	e9 e0 fe ff ff       	jmp    1022 <printf+0x52>
+    1142:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
-    1118:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    1148:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
-    111b:	83 ec 04             	sub    $0x4,%esp
-    111e:	e9 2a ff ff ff       	jmp    104d <printf+0xad>
-    1123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    1127:	90                   	nop
+    114b:	83 ec 04             	sub    $0x4,%esp
+    114e:	e9 2a ff ff ff       	jmp    107d <printf+0xad>
+    1153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1157:	90                   	nop
           s = "(null)";
-    1128:	ba b0 13 00 00       	mov    $0x13b0,%edx
+    1158:	ba 10 16 00 00       	mov    $0x1610,%edx
         while(*s != 0){
-    112d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
-    1130:	b8 28 00 00 00       	mov    $0x28,%eax
-    1135:	89 d3                	mov    %edx,%ebx
-    1137:	e9 74 ff ff ff       	jmp    10b0 <printf+0x110>
-    113c:	66 90                	xchg   %ax,%ax
-    113e:	66 90                	xchg   %ax,%ax
+    115d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    1160:	b8 28 00 00 00       	mov    $0x28,%eax
+    1165:	89 d3                	mov    %edx,%ebx
+    1167:	e9 74 ff ff ff       	jmp    10e0 <printf+0x110>
+    116c:	66 90                	xchg   %ax,%ax
+    116e:	66 90                	xchg   %ax,%ax
 
-00001140 <free>:
+00001170 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    1140:	55                   	push   %ebp
+    1170:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1141:	a1 64 1a 00 00       	mov    0x1a64,%eax
+    1171:	a1 64 1d 00 00       	mov    0x1d64,%eax
 {
-    1146:	89 e5                	mov    %esp,%ebp
-    1148:	57                   	push   %edi
-    1149:	56                   	push   %esi
-    114a:	53                   	push   %ebx
-    114b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1176:	89 e5                	mov    %esp,%ebp
+    1178:	57                   	push   %edi
+    1179:	56                   	push   %esi
+    117a:	53                   	push   %ebx
+    117b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
-    114e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    117e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1151:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    1158:	89 c2                	mov    %eax,%edx
-    115a:	8b 00                	mov    (%eax),%eax
-    115c:	39 ca                	cmp    %ecx,%edx
-    115e:	73 30                	jae    1190 <free+0x50>
-    1160:	39 c1                	cmp    %eax,%ecx
-    1162:	72 04                	jb     1168 <free+0x28>
+    1181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1188:	89 c2                	mov    %eax,%edx
+    118a:	8b 00                	mov    (%eax),%eax
+    118c:	39 ca                	cmp    %ecx,%edx
+    118e:	73 30                	jae    11c0 <free+0x50>
+    1190:	39 c1                	cmp    %eax,%ecx
+    1192:	72 04                	jb     1198 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1164:	39 c2                	cmp    %eax,%edx
-    1166:	72 f0                	jb     1158 <free+0x18>
+    1194:	39 c2                	cmp    %eax,%edx
+    1196:	72 f0                	jb     1188 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    1168:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    116b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    116e:	39 f8                	cmp    %edi,%eax
-    1170:	74 30                	je     11a2 <free+0x62>
+    1198:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    119b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    119e:	39 f8                	cmp    %edi,%eax
+    11a0:	74 30                	je     11d2 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
-    1172:	89 43 f8             	mov    %eax,-0x8(%ebx)
+    11a2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
-    1175:	8b 42 04             	mov    0x4(%edx),%eax
-    1178:	8d 34 c2             	lea    (%edx,%eax,8),%esi
-    117b:	39 f1                	cmp    %esi,%ecx
-    117d:	74 3a                	je     11b9 <free+0x79>
+    11a5:	8b 42 04             	mov    0x4(%edx),%eax
+    11a8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    11ab:	39 f1                	cmp    %esi,%ecx
+    11ad:	74 3a                	je     11e9 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
-    117f:	89 0a                	mov    %ecx,(%edx)
+    11af:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
-    1181:	5b                   	pop    %ebx
+    11b1:	5b                   	pop    %ebx
   freep = p;
-    1182:	89 15 64 1a 00 00    	mov    %edx,0x1a64
+    11b2:	89 15 64 1d 00 00    	mov    %edx,0x1d64
 }
-    1188:	5e                   	pop    %esi
-    1189:	5f                   	pop    %edi
-    118a:	5d                   	pop    %ebp
-    118b:	c3                   	ret    
-    118c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    11b8:	5e                   	pop    %esi
+    11b9:	5f                   	pop    %edi
+    11ba:	5d                   	pop    %ebp
+    11bb:	c3                   	ret    
+    11bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1190:	39 c2                	cmp    %eax,%edx
-    1192:	72 c4                	jb     1158 <free+0x18>
-    1194:	39 c1                	cmp    %eax,%ecx
-    1196:	73 c0                	jae    1158 <free+0x18>
+    11c0:	39 c2                	cmp    %eax,%edx
+    11c2:	72 c4                	jb     1188 <free+0x18>
+    11c4:	39 c1                	cmp    %eax,%ecx
+    11c6:	73 c0                	jae    1188 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
-    1198:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    119b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    119e:	39 f8                	cmp    %edi,%eax
-    11a0:	75 d0                	jne    1172 <free+0x32>
+    11c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    11cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    11ce:	39 f8                	cmp    %edi,%eax
+    11d0:	75 d0                	jne    11a2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
-    11a2:	03 70 04             	add    0x4(%eax),%esi
-    11a5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    11d2:	03 70 04             	add    0x4(%eax),%esi
+    11d5:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    11a8:	8b 02                	mov    (%edx),%eax
-    11aa:	8b 00                	mov    (%eax),%eax
-    11ac:	89 43 f8             	mov    %eax,-0x8(%ebx)
+    11d8:	8b 02                	mov    (%edx),%eax
+    11da:	8b 00                	mov    (%eax),%eax
+    11dc:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
-    11af:	8b 42 04             	mov    0x4(%edx),%eax
-    11b2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
-    11b5:	39 f1                	cmp    %esi,%ecx
-    11b7:	75 c6                	jne    117f <free+0x3f>
+    11df:	8b 42 04             	mov    0x4(%edx),%eax
+    11e2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    11e5:	39 f1                	cmp    %esi,%ecx
+    11e7:	75 c6                	jne    11af <free+0x3f>
     p->s.size += bp->s.size;
-    11b9:	03 43 fc             	add    -0x4(%ebx),%eax
+    11e9:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
-    11bc:	89 15 64 1a 00 00    	mov    %edx,0x1a64
+    11ec:	89 15 64 1d 00 00    	mov    %edx,0x1d64
     p->s.size += bp->s.size;
-    11c2:	89 42 04             	mov    %eax,0x4(%edx)
+    11f2:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
-    11c5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
-    11c8:	89 0a                	mov    %ecx,(%edx)
+    11f5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+    11f8:	89 0a                	mov    %ecx,(%edx)
 }
-    11ca:	5b                   	pop    %ebx
-    11cb:	5e                   	pop    %esi
-    11cc:	5f                   	pop    %edi
-    11cd:	5d                   	pop    %ebp
-    11ce:	c3                   	ret    
-    11cf:	90                   	nop
+    11fa:	5b                   	pop    %ebx
+    11fb:	5e                   	pop    %esi
+    11fc:	5f                   	pop    %edi
+    11fd:	5d                   	pop    %ebp
+    11fe:	c3                   	ret    
+    11ff:	90                   	nop
 
-000011d0 <malloc>:
+00001200 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    11d0:	55                   	push   %ebp
-    11d1:	89 e5                	mov    %esp,%ebp
-    11d3:	57                   	push   %edi
-    11d4:	56                   	push   %esi
-    11d5:	53                   	push   %ebx
-    11d6:	83 ec 1c             	sub    $0x1c,%esp
+    1200:	55                   	push   %ebp
+    1201:	89 e5                	mov    %esp,%ebp
+    1203:	57                   	push   %edi
+    1204:	56                   	push   %esi
+    1205:	53                   	push   %ebx
+    1206:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11d9:	8b 45 08             	mov    0x8(%ebp),%eax
+    1209:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    11dc:	8b 3d 64 1a 00 00    	mov    0x1a64,%edi
+    120c:	8b 3d 64 1d 00 00    	mov    0x1d64,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11e2:	8d 70 07             	lea    0x7(%eax),%esi
-    11e5:	c1 ee 03             	shr    $0x3,%esi
-    11e8:	83 c6 01             	add    $0x1,%esi
+    1212:	8d 70 07             	lea    0x7(%eax),%esi
+    1215:	c1 ee 03             	shr    $0x3,%esi
+    1218:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    11eb:	85 ff                	test   %edi,%edi
-    11ed:	0f 84 9d 00 00 00    	je     1290 <malloc+0xc0>
+    121b:	85 ff                	test   %edi,%edi
+    121d:	0f 84 9d 00 00 00    	je     12c0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11f3:	8b 17                	mov    (%edi),%edx
+    1223:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
-    11f5:	8b 4a 04             	mov    0x4(%edx),%ecx
-    11f8:	39 f1                	cmp    %esi,%ecx
-    11fa:	73 6a                	jae    1266 <malloc+0x96>
-    11fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    1201:	39 de                	cmp    %ebx,%esi
-    1203:	0f 43 de             	cmovae %esi,%ebx
+    1225:	8b 4a 04             	mov    0x4(%edx),%ecx
+    1228:	39 f1                	cmp    %esi,%ecx
+    122a:	73 6a                	jae    1296 <malloc+0x96>
+    122c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    1231:	39 de                	cmp    %ebx,%esi
+    1233:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    1206:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
-    120d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    1210:	eb 17                	jmp    1229 <malloc+0x59>
-    1212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1236:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    123d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    1240:	eb 17                	jmp    1259 <malloc+0x59>
+    1242:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1218:	8b 02                	mov    (%edx),%eax
+    1248:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
-    121a:	8b 48 04             	mov    0x4(%eax),%ecx
-    121d:	39 f1                	cmp    %esi,%ecx
-    121f:	73 4f                	jae    1270 <malloc+0xa0>
+    124a:	8b 48 04             	mov    0x4(%eax),%ecx
+    124d:	39 f1                	cmp    %esi,%ecx
+    124f:	73 4f                	jae    12a0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    1221:	8b 3d 64 1a 00 00    	mov    0x1a64,%edi
-    1227:	89 c2                	mov    %eax,%edx
-    1229:	39 d7                	cmp    %edx,%edi
-    122b:	75 eb                	jne    1218 <malloc+0x48>
+    1251:	8b 3d 64 1d 00 00    	mov    0x1d64,%edi
+    1257:	89 c2                	mov    %eax,%edx
+    1259:	39 d7                	cmp    %edx,%edi
+    125b:	75 eb                	jne    1248 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
-    122d:	83 ec 0c             	sub    $0xc,%esp
-    1230:	ff 75 e4             	push   -0x1c(%ebp)
-    1233:	e8 73 fc ff ff       	call   eab <sbrk>
+    125d:	83 ec 0c             	sub    $0xc,%esp
+    1260:	ff 75 e4             	push   -0x1c(%ebp)
+    1263:	e8 43 fc ff ff       	call   eab <sbrk>
   if(p == (char*)-1)
-    1238:	83 c4 10             	add    $0x10,%esp
-    123b:	83 f8 ff             	cmp    $0xffffffff,%eax
-    123e:	74 1c                	je     125c <malloc+0x8c>
+    1268:	83 c4 10             	add    $0x10,%esp
+    126b:	83 f8 ff             	cmp    $0xffffffff,%eax
+    126e:	74 1c                	je     128c <malloc+0x8c>
   hp->s.size = nu;
-    1240:	89 58 04             	mov    %ebx,0x4(%eax)
+    1270:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    1243:	83 ec 0c             	sub    $0xc,%esp
-    1246:	83 c0 08             	add    $0x8,%eax
-    1249:	50                   	push   %eax
-    124a:	e8 f1 fe ff ff       	call   1140 <free>
+    1273:	83 ec 0c             	sub    $0xc,%esp
+    1276:	83 c0 08             	add    $0x8,%eax
+    1279:	50                   	push   %eax
+    127a:	e8 f1 fe ff ff       	call   1170 <free>
   return freep;
-    124f:	8b 15 64 1a 00 00    	mov    0x1a64,%edx
+    127f:	8b 15 64 1d 00 00    	mov    0x1d64,%edx
       if((p = morecore(nunits)) == 0)
-    1255:	83 c4 10             	add    $0x10,%esp
-    1258:	85 d2                	test   %edx,%edx
-    125a:	75 bc                	jne    1218 <malloc+0x48>
+    1285:	83 c4 10             	add    $0x10,%esp
+    1288:	85 d2                	test   %edx,%edx
+    128a:	75 bc                	jne    1248 <malloc+0x48>
         return 0;
   }
 }
-    125c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    128c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    125f:	31 c0                	xor    %eax,%eax
+    128f:	31 c0                	xor    %eax,%eax
 }
-    1261:	5b                   	pop    %ebx
-    1262:	5e                   	pop    %esi
-    1263:	5f                   	pop    %edi
-    1264:	5d                   	pop    %ebp
-    1265:	c3                   	ret    
+    1291:	5b                   	pop    %ebx
+    1292:	5e                   	pop    %esi
+    1293:	5f                   	pop    %edi
+    1294:	5d                   	pop    %ebp
+    1295:	c3                   	ret    
     if(p->s.size >= nunits){
-    1266:	89 d0                	mov    %edx,%eax
-    1268:	89 fa                	mov    %edi,%edx
-    126a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1296:	89 d0                	mov    %edx,%eax
+    1298:	89 fa                	mov    %edi,%edx
+    129a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
-    1270:	39 ce                	cmp    %ecx,%esi
-    1272:	74 4c                	je     12c0 <malloc+0xf0>
+    12a0:	39 ce                	cmp    %ecx,%esi
+    12a2:	74 4c                	je     12f0 <malloc+0xf0>
         p->s.size -= nunits;
-    1274:	29 f1                	sub    %esi,%ecx
-    1276:	89 48 04             	mov    %ecx,0x4(%eax)
+    12a4:	29 f1                	sub    %esi,%ecx
+    12a6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
-    1279:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+    12a9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
-    127c:	89 70 04             	mov    %esi,0x4(%eax)
+    12ac:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
-    127f:	89 15 64 1a 00 00    	mov    %edx,0x1a64
+    12af:	89 15 64 1d 00 00    	mov    %edx,0x1d64
 }
-    1285:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    12b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    1288:	83 c0 08             	add    $0x8,%eax
+    12b8:	83 c0 08             	add    $0x8,%eax
 }
-    128b:	5b                   	pop    %ebx
-    128c:	5e                   	pop    %esi
-    128d:	5f                   	pop    %edi
-    128e:	5d                   	pop    %ebp
-    128f:	c3                   	ret    
+    12bb:	5b                   	pop    %ebx
+    12bc:	5e                   	pop    %esi
+    12bd:	5f                   	pop    %edi
+    12be:	5d                   	pop    %ebp
+    12bf:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
-    1290:	c7 05 64 1a 00 00 68 	movl   $0x1a68,0x1a64
-    1297:	1a 00 00 
+    12c0:	c7 05 64 1d 00 00 68 	movl   $0x1d68,0x1d64
+    12c7:	1d 00 00 
     base.s.size = 0;
-    129a:	bf 68 1a 00 00       	mov    $0x1a68,%edi
+    12ca:	bf 68 1d 00 00       	mov    $0x1d68,%edi
     base.s.ptr = freep = prevp = &base;
-    129f:	c7 05 68 1a 00 00 68 	movl   $0x1a68,0x1a68
-    12a6:	1a 00 00 
+    12cf:	c7 05 68 1d 00 00 68 	movl   $0x1d68,0x1d68
+    12d6:	1d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    12a9:	89 fa                	mov    %edi,%edx
+    12d9:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
-    12ab:	c7 05 6c 1a 00 00 00 	movl   $0x0,0x1a6c
-    12b2:	00 00 00 
+    12db:	c7 05 6c 1d 00 00 00 	movl   $0x0,0x1d6c
+    12e2:	00 00 00 
     if(p->s.size >= nunits){
-    12b5:	e9 42 ff ff ff       	jmp    11fc <malloc+0x2c>
-    12ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    12e5:	e9 42 ff ff ff       	jmp    122c <malloc+0x2c>
+    12ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    12c0:	8b 08                	mov    (%eax),%ecx
-    12c2:	89 0a                	mov    %ecx,(%edx)
-    12c4:	eb b9                	jmp    127f <malloc+0xaf>
+    12f0:	8b 08                	mov    (%eax),%ecx
+    12f2:	89 0a                	mov    %ecx,(%edx)
+    12f4:	eb b9                	jmp    12af <malloc+0xaf>
+    12f6:	66 90                	xchg   %ax,%ax
+    12f8:	66 90                	xchg   %ax,%ax
+    12fa:	66 90                	xchg   %ax,%ax
+    12fc:	66 90                	xchg   %ax,%ax
+    12fe:	66 90                	xchg   %ax,%ax
+
+00001300 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    1300:	55                   	push   %ebp
+    1301:	b8 84 1d 00 00       	mov    $0x1d84,%eax
+    1306:	89 e5                	mov    %esp,%ebp
+    1308:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    130b:	89 15 80 1d 00 00    	mov    %edx,0x1d80
+    for (mti=1; mti<N; mti++)
+    1311:	eb 08                	jmp    131b <sgenrand+0x1b>
+    1313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1317:	90                   	nop
+    1318:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    131b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    1321:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    1323:	3d 3c 27 00 00       	cmp    $0x273c,%eax
+    1328:	75 ee                	jne    1318 <sgenrand+0x18>
+    132a:	c7 05 e4 1c 00 00 70 	movl   $0x270,0x1ce4
+    1331:	02 00 00 
+}
+    1334:	5d                   	pop    %ebp
+    1335:	c3                   	ret    
+    1336:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    133d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00001340 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+    1340:	a1 e4 1c 00 00       	mov    0x1ce4,%eax
+    1345:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    134a:	7f 3d                	jg     1389 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    134c:	8b 0c 85 80 1d 00 00 	mov    0x1d80(,%eax,4),%ecx
+    1353:	8d 50 01             	lea    0x1(%eax),%edx
+    1356:	89 15 e4 1c 00 00    	mov    %edx,0x1ce4
+    y ^= TEMPERING_SHIFT_U(y);
+    135c:	89 ca                	mov    %ecx,%edx
+    135e:	c1 ea 0b             	shr    $0xb,%edx
+    1361:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    1363:	89 d0                	mov    %edx,%eax
+    1365:	c1 e0 07             	shl    $0x7,%eax
+    1368:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+    136d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    136f:	89 c2                	mov    %eax,%edx
+    1371:	c1 e2 0f             	shl    $0xf,%edx
+    1374:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+    137a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+    137c:	89 d0                	mov    %edx,%eax
+    137e:	c1 e8 12             	shr    $0x12,%eax
+    1381:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+    1383:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+    1388:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+    1389:	3d 71 02 00 00       	cmp    $0x271,%eax
+    138e:	0f 84 d4 00 00 00    	je     1468 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+    1394:	31 c0                	xor    %eax,%eax
+    1396:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    139d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    13a0:	8b 0c 85 80 1d 00 00 	mov    0x1d80(,%eax,4),%ecx
+    13a7:	83 c0 01             	add    $0x1,%eax
+    13aa:	8b 14 85 80 1d 00 00 	mov    0x1d80(,%eax,4),%edx
+    13b1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    13b7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    13bd:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+    13bf:	89 d1                	mov    %edx,%ecx
+    13c1:	83 e2 01             	and    $0x1,%edx
+    13c4:	d1 e9                	shr    %ecx
+    13c6:	33 0c 85 b0 23 00 00 	xor    0x23b0(,%eax,4),%ecx
+    13cd:	33 0c 95 84 16 00 00 	xor    0x1684(,%edx,4),%ecx
+    13d4:	89 0c 85 7c 1d 00 00 	mov    %ecx,0x1d7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+    13db:	3d e3 00 00 00       	cmp    $0xe3,%eax
+    13e0:	75 be                	jne    13a0 <genrand+0x60>
+    13e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+    13e8:	8b 0c 85 80 1d 00 00 	mov    0x1d80(,%eax,4),%ecx
+    13ef:	83 c0 01             	add    $0x1,%eax
+    13f2:	8b 14 85 80 1d 00 00 	mov    0x1d80(,%eax,4),%edx
+    13f9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+    13ff:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    1405:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+    1407:	89 d1                	mov    %edx,%ecx
+    1409:	83 e2 01             	and    $0x1,%edx
+    140c:	d1 e9                	shr    %ecx
+    140e:	33 0c 85 f0 19 00 00 	xor    0x19f0(,%eax,4),%ecx
+    1415:	33 0c 95 84 16 00 00 	xor    0x1684(,%edx,4),%ecx
+    141c:	89 0c 85 7c 1d 00 00 	mov    %ecx,0x1d7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+    1423:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+    1428:	75 be                	jne    13e8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+    142a:	8b 0d 80 1d 00 00    	mov    0x1d80,%ecx
+    1430:	a1 3c 27 00 00       	mov    0x273c,%eax
+    1435:	89 ca                	mov    %ecx,%edx
+    1437:	25 00 00 00 80       	and    $0x80000000,%eax
+    143c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+    1442:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+    1444:	89 c2                	mov    %eax,%edx
+    1446:	83 e0 01             	and    $0x1,%eax
+    1449:	d1 ea                	shr    %edx
+    144b:	33 15 b0 23 00 00    	xor    0x23b0,%edx
+    1451:	33 14 85 84 16 00 00 	xor    0x1684(,%eax,4),%edx
+    1458:	89 15 3c 27 00 00    	mov    %edx,0x273c
+    145e:	ba 01 00 00 00       	mov    $0x1,%edx
+    1463:	e9 ee fe ff ff       	jmp    1356 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+    1468:	b8 84 1d 00 00       	mov    $0x1d84,%eax
+    146d:	b9 3c 27 00 00       	mov    $0x273c,%ecx
+    1472:	ba 05 11 00 00       	mov    $0x1105,%edx
+    1477:	c7 05 80 1d 00 00 05 	movl   $0x1105,0x1d80
+    147e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+    1481:	eb 08                	jmp    148b <genrand+0x14b>
+    1483:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1487:	90                   	nop
+    1488:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+    148b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+    1491:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+    1493:	39 c1                	cmp    %eax,%ecx
+    1495:	75 f1                	jne    1488 <genrand+0x148>
+    1497:	e9 f8 fe ff ff       	jmp    1394 <genrand+0x54>
+    149c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000014a0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+    14a0:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    14a1:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+    14a3:	89 e5                	mov    %esp,%ebp
+    14a5:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+    14a6:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+    14a9:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+    14aa:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+    14af:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    14b2:	89 d8                	mov    %ebx,%eax
+    14b4:	f7 f1                	div    %ecx
+    14b6:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+    14b8:	29 d3                	sub    %edx,%ebx
+    14ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+    14c0:	e8 7b fe ff ff       	call   1340 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+    14c5:	39 d8                	cmp    %ebx,%eax
+    14c7:	73 f7                	jae    14c0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+    14c9:	31 d2                	xor    %edx,%edx
+}
+    14cb:	5b                   	pop    %ebx
+  return x/bin_size;
+    14cc:	f7 f6                	div    %esi
+}
+    14ce:	5e                   	pop    %esi
+    14cf:	5d                   	pop    %ebp
+    14d0:	c3                   	ret    
+    14d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    14d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    14df:	90                   	nop
+
+000014e0 <randomrange>:
+
+int randomrange(int low, int high){
+    14e0:	55                   	push   %ebp
+    14e1:	89 e5                	mov    %esp,%ebp
+    14e3:	57                   	push   %edi
+    14e4:	56                   	push   %esi
+    14e5:	53                   	push   %ebx
+    14e6:	83 ec 0c             	sub    $0xc,%esp
+    14e9:	8b 75 08             	mov    0x8(%ebp),%esi
+    14ec:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+    14ef:	39 f0                	cmp    %esi,%eax
+    14f1:	7d 06                	jge    14f9 <randomrange+0x19>
+    14f3:	89 f2                	mov    %esi,%edx
+    14f5:	89 c6                	mov    %eax,%esi
+    14f7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+    14f9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+    14fb:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    1500:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+    1502:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+    1505:	89 d8                	mov    %ebx,%eax
+    1507:	f7 f1                	div    %ecx
+    1509:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+    150b:	29 d3                	sub    %edx,%ebx
+    150d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+    1510:	e8 2b fe ff ff       	call   1340 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+    1515:	39 d8                	cmp    %ebx,%eax
+    1517:	73 f7                	jae    1510 <randomrange+0x30>
+  return x/bin_size;
+    1519:	31 d2                	xor    %edx,%edx
+  return val;
+}
+    151b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+    151e:	f7 f7                	div    %edi
+}
+    1520:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+    1521:	01 f0                	add    %esi,%eax
+}
+    1523:	5e                   	pop    %esi
+    1524:	5f                   	pop    %edi
+    1525:	5d                   	pop    %ebp
+    1526:	c3                   	ret    
diff -ruN xv6-public/sh.d xv6-public-with-hybrid/sh.d
--- xv6-public/sh.d	2022-09-06 09:47:10.542190000 +0530
+++ xv6-public-with-hybrid/sh.d	2022-10-07 18:50:01.368950661 +0530
@@ -1 +1,2 @@
-sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h processInfo.h \
+ fcntl.h
Binary files xv6-public/sh.o and xv6-public-with-hybrid/sh.o differ
diff -ruN xv6-public/sh.sym xv6-public-with-hybrid/sh.sym
--- xv6-public/sh.sym	2022-09-06 09:47:10.574226000 +0530
+++ xv6-public-with-hybrid/sh.sym	2022-10-07 18:50:01.440950450 +0530
@@ -1,14 +1,19 @@
 00000000 sh.c
-00001a00 buf.0
+00001d00 buf.0
 00000000 ulib.c
 00000000 printf.c
-00000ef0 printint
-00001410 digits.0
+00000f20 printint
+00001670 digits.0
 00000000 umalloc.c
-00001a64 freep
-00001a68 base
+00001d64 freep
+00001d68 base
+00000000 random.c
+00001d80 mt
+00001ce4 mti
+00001684 mag01.0
 00000bd0 strcpy
-00000fa0 printf
+00001300 sgenrand
+00000fd0 printf
 00000ed3 thread_exit
 00000df0 memmove
 00000e6b mknod
@@ -21,10 +26,13 @@
 000005d0 peek
 00000650 parseredirs
 00000470 gettoken
-000011d0 malloc
+00001200 malloc
 00000eb3 sleep
-000019ec whitespace
+00000f03 get_burst_time
+00001cdc whitespace
+000014a0 random_at_most
 00000190 fork1
+00000f0b getCurrentInfo
 00000ab0 nulterminate
 00000e33 pipe
 00000130 getcmd
@@ -37,7 +45,7 @@
 00000a20 parseblock
 00000e5b exec
 00000e2b wait
-000019e4 symbols
+00001cd4 symbols
 00000e3b read
 00000790 parseexec
 00000e73 unlink
@@ -45,16 +53,21 @@
 00000e1b fork
 00000eab sbrk
 00000ebb uptime
-000019f2 __bss_start
+00001ce8 __bss_start
 00000c90 memset
 00000000 main
+00000efb set_burst_time
 00000c00 strcmp
 00000e9b dup
 000003c0 pipecmd
 00000370 redircmd
+00000eeb getMaxPid
+00001340 genrand
+00000ee3 getNumProc
+00000ef3 getProcInfo
 00000d60 stat
-000019f2 _edata
-00001a70 _end
+00001ce8 _edata
+00002740 _end
 00000e83 link
 00000e23 exit
 00000db0 atoi
@@ -63,8 +76,10 @@
 00000e63 open
 00000cb0 strchr
 00000ec3 thread_create
+00000f13 getCurrentPID
+000014e0 randomrange
 00000e8b mkdir
 00000e4b close
 00000ecb thread_join
 00000400 listcmd
-00001140 free
+00001170 free
Binary files xv6-public/sleeplock.o and xv6-public-with-hybrid/sleeplock.o differ
Binary files xv6-public/spinlock.o and xv6-public-with-hybrid/spinlock.o differ
Binary files xv6-public/_stressfs and xv6-public-with-hybrid/_stressfs differ
diff -ruN xv6-public/stressfs.asm xv6-public-with-hybrid/stressfs.asm
--- xv6-public/stressfs.asm	2022-09-06 09:47:10.634293000 +0530
+++ xv6-public-with-hybrid/stressfs.asm	2022-10-07 18:50:01.648949839 +0530
@@ -38,7 +38,7 @@
   char path[] = "stressfs0";
   24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
   printf(1, "stressfs starting\n");
-  2b:	68 38 08 00 00       	push   $0x838
+  2b:	68 98 0a 00 00       	push   $0xa98
   30:	6a 01                	push   $0x1
   char path[] = "stressfs0";
   32:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
@@ -46,7 +46,7 @@
   3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
   43:	73 66 73 
   printf(1, "stressfs starting\n");
-  46:	e8 c5 04 00 00       	call   510 <printf>
+  46:	e8 f5 04 00 00       	call   540 <printf>
   memset(data, 'a', sizeof(data));
   4b:	83 c4 0c             	add    $0xc,%esp
   4e:	68 00 02 00 00       	push   $0x200
@@ -73,9 +73,9 @@
   fd = open(path, O_CREATE | O_RDWR);
   7c:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
-  81:	68 4b 08 00 00       	push   $0x84b
+  81:	68 ab 0a 00 00       	push   $0xaab
   86:	6a 01                	push   $0x1
-  88:	e8 83 04 00 00       	call   510 <printf>
+  88:	e8 b3 04 00 00       	call   540 <printf>
   path[8] += i;
   8d:	89 f8                	mov    %edi,%eax
   fd = open(path, O_CREATE | O_RDWR);
@@ -111,9 +111,9 @@
   printf(1, "read\n");
   d0:	58                   	pop    %eax
   d1:	5a                   	pop    %edx
-  d2:	68 55 08 00 00       	push   $0x855
+  d2:	68 b5 0a 00 00       	push   $0xab5
   d7:	6a 01                	push   $0x1
-  d9:	e8 32 04 00 00       	call   510 <printf>
+  d9:	e8 62 04 00 00       	call   540 <printf>
 
   fd = open(path, O_RDONLY);
   de:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
@@ -704,572 +704,887 @@
  44a:	c3                   	ret    
 
 0000044b <draw>:
+SYSCALL(draw)
  44b:	b8 19 00 00 00       	mov    $0x19,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
- 453:	66 90                	xchg   %ax,%ax
- 455:	66 90                	xchg   %ax,%ax
- 457:	66 90                	xchg   %ax,%ax
- 459:	66 90                	xchg   %ax,%ax
- 45b:	66 90                	xchg   %ax,%ax
- 45d:	66 90                	xchg   %ax,%ax
- 45f:	90                   	nop
 
-00000460 <printint>:
+00000453 <getNumProc>:
+SYSCALL(getNumProc)
+ 453:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 45b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 463:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 46b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 473:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 47b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 483:	b8 20 00 00 00       	mov    $0x20,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+ 48b:	66 90                	xchg   %ax,%ax
+ 48d:	66 90                	xchg   %ax,%ax
+ 48f:	90                   	nop
+
+00000490 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 460:	55                   	push   %ebp
- 461:	89 e5                	mov    %esp,%ebp
- 463:	57                   	push   %edi
- 464:	56                   	push   %esi
- 465:	53                   	push   %ebx
- 466:	83 ec 3c             	sub    $0x3c,%esp
- 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+ 495:	53                   	push   %ebx
+ 496:	83 ec 3c             	sub    $0x3c,%esp
+ 499:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 46c:	89 d1                	mov    %edx,%ecx
+ 49c:	89 d1                	mov    %edx,%ecx
 {
- 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 49e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 471:	85 d2                	test   %edx,%edx
- 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
- 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 47d:	74 79                	je     4f8 <printint+0x98>
+ 4a1:	85 d2                	test   %edx,%edx
+ 4a3:	0f 89 7f 00 00 00    	jns    528 <printint+0x98>
+ 4a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4ad:	74 79                	je     528 <printint+0x98>
     neg = 1;
- 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 4af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 486:	f7 d9                	neg    %ecx
+ 4b6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 488:	31 db                	xor    %ebx,%ebx
- 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 48d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b8:	31 db                	xor    %ebx,%ebx
+ 4ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 490:	89 c8                	mov    %ecx,%eax
- 492:	31 d2                	xor    %edx,%edx
- 494:	89 cf                	mov    %ecx,%edi
- 496:	f7 75 c4             	divl   -0x3c(%ebp)
- 499:	0f b6 92 bc 08 00 00 	movzbl 0x8bc(%edx),%edx
- 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4a3:	89 d8                	mov    %ebx,%eax
- 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 4c0:	89 c8                	mov    %ecx,%eax
+ 4c2:	31 d2                	xor    %edx,%edx
+ 4c4:	89 cf                	mov    %ecx,%edi
+ 4c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4c9:	0f b6 92 1c 0b 00 00 	movzbl 0xb1c(%edx),%edx
+ 4d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4d3:	89 d8                	mov    %ebx,%eax
+ 4d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4b1:	76 dd                	jbe    490 <printint+0x30>
+ 4de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4e1:	76 dd                	jbe    4c0 <printint+0x30>
   if(neg)
- 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4b6:	85 c9                	test   %ecx,%ecx
- 4b8:	74 0c                	je     4c6 <printint+0x66>
+ 4e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4e6:	85 c9                	test   %ecx,%ecx
+ 4e8:	74 0c                	je     4f6 <printint+0x66>
     buf[i++] = '-';
- 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4bf:	89 d8                	mov    %ebx,%eax
+ 4ef:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4cd:	eb 07                	jmp    4d6 <printint+0x76>
- 4cf:	90                   	nop
+ 4f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4fd:	eb 07                	jmp    506 <printint+0x76>
+ 4ff:	90                   	nop
     putc(fd, buf[i]);
- 4d0:	0f b6 13             	movzbl (%ebx),%edx
- 4d3:	83 eb 01             	sub    $0x1,%ebx
+ 500:	0f b6 13             	movzbl (%ebx),%edx
+ 503:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 4d6:	83 ec 04             	sub    $0x4,%esp
- 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4dc:	6a 01                	push   $0x1
- 4de:	56                   	push   %esi
- 4df:	57                   	push   %edi
- 4e0:	e8 ce fe ff ff       	call   3b3 <write>
+ 506:	83 ec 04             	sub    $0x4,%esp
+ 509:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 50c:	6a 01                	push   $0x1
+ 50e:	56                   	push   %esi
+ 50f:	57                   	push   %edi
+ 510:	e8 9e fe ff ff       	call   3b3 <write>
   while(--i >= 0)
- 4e5:	83 c4 10             	add    $0x10,%esp
- 4e8:	39 de                	cmp    %ebx,%esi
- 4ea:	75 e4                	jne    4d0 <printint+0x70>
-}
- 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4ef:	5b                   	pop    %ebx
- 4f0:	5e                   	pop    %esi
- 4f1:	5f                   	pop    %edi
- 4f2:	5d                   	pop    %ebp
- 4f3:	c3                   	ret    
- 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 515:	83 c4 10             	add    $0x10,%esp
+ 518:	39 de                	cmp    %ebx,%esi
+ 51a:	75 e4                	jne    500 <printint+0x70>
+}
+ 51c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 51f:	5b                   	pop    %ebx
+ 520:	5e                   	pop    %esi
+ 521:	5f                   	pop    %edi
+ 522:	5d                   	pop    %ebp
+ 523:	c3                   	ret    
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4ff:	eb 87                	jmp    488 <printint+0x28>
- 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 50f:	90                   	nop
+ 528:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 52f:	eb 87                	jmp    4b8 <printint+0x28>
+ 531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 538:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	90                   	nop
 
-00000510 <printf>:
+00000540 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 510:	55                   	push   %ebp
- 511:	89 e5                	mov    %esp,%ebp
- 513:	57                   	push   %edi
- 514:	56                   	push   %esi
- 515:	53                   	push   %ebx
- 516:	83 ec 2c             	sub    $0x2c,%esp
+ 540:	55                   	push   %ebp
+ 541:	89 e5                	mov    %esp,%ebp
+ 543:	57                   	push   %edi
+ 544:	56                   	push   %esi
+ 545:	53                   	push   %ebx
+ 546:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 519:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 549:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 51c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 54c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 51f:	0f b6 13             	movzbl (%ebx),%edx
- 522:	84 d2                	test   %dl,%dl
- 524:	74 6a                	je     590 <printf+0x80>
+ 54f:	0f b6 13             	movzbl (%ebx),%edx
+ 552:	84 d2                	test   %dl,%dl
+ 554:	74 6a                	je     5c0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 526:	8d 45 10             	lea    0x10(%ebp),%eax
- 529:	83 c3 01             	add    $0x1,%ebx
+ 556:	8d 45 10             	lea    0x10(%ebp),%eax
+ 559:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 52c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 55c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 52f:	31 c9                	xor    %ecx,%ecx
+ 55f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 534:	eb 36                	jmp    56c <printf+0x5c>
- 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
- 540:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	eb 36                	jmp    59c <printf+0x5c>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 570:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 543:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 573:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 548:	83 f8 25             	cmp    $0x25,%eax
- 54b:	74 15                	je     562 <printf+0x52>
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	74 15                	je     592 <printf+0x52>
   write(fd, &c, 1);
- 54d:	83 ec 04             	sub    $0x4,%esp
- 550:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 553:	6a 01                	push   $0x1
- 555:	57                   	push   %edi
- 556:	56                   	push   %esi
- 557:	e8 57 fe ff ff       	call   3b3 <write>
- 55c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 57d:	83 ec 04             	sub    $0x4,%esp
+ 580:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	56                   	push   %esi
+ 587:	e8 27 fe ff ff       	call   3b3 <write>
+ 58c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 55f:	83 c4 10             	add    $0x10,%esp
+ 58f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 562:	0f b6 13             	movzbl (%ebx),%edx
- 565:	83 c3 01             	add    $0x1,%ebx
- 568:	84 d2                	test   %dl,%dl
- 56a:	74 24                	je     590 <printf+0x80>
+ 592:	0f b6 13             	movzbl (%ebx),%edx
+ 595:	83 c3 01             	add    $0x1,%ebx
+ 598:	84 d2                	test   %dl,%dl
+ 59a:	74 24                	je     5c0 <printf+0x80>
     c = fmt[i] & 0xff;
- 56c:	0f b6 c2             	movzbl %dl,%eax
+ 59c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 56f:	85 c9                	test   %ecx,%ecx
- 571:	74 cd                	je     540 <printf+0x30>
+ 59f:	85 c9                	test   %ecx,%ecx
+ 5a1:	74 cd                	je     570 <printf+0x30>
       }
     } else if(state == '%'){
- 573:	83 f9 25             	cmp    $0x25,%ecx
- 576:	75 ea                	jne    562 <printf+0x52>
+ 5a3:	83 f9 25             	cmp    $0x25,%ecx
+ 5a6:	75 ea                	jne    592 <printf+0x52>
       if(c == 'd'){
- 578:	83 f8 25             	cmp    $0x25,%eax
- 57b:	0f 84 07 01 00 00    	je     688 <printf+0x178>
- 581:	83 e8 63             	sub    $0x63,%eax
- 584:	83 f8 15             	cmp    $0x15,%eax
- 587:	77 17                	ja     5a0 <printf+0x90>
- 589:	ff 24 85 64 08 00 00 	jmp    *0x864(,%eax,4)
+ 5a8:	83 f8 25             	cmp    $0x25,%eax
+ 5ab:	0f 84 07 01 00 00    	je     6b8 <printf+0x178>
+ 5b1:	83 e8 63             	sub    $0x63,%eax
+ 5b4:	83 f8 15             	cmp    $0x15,%eax
+ 5b7:	77 17                	ja     5d0 <printf+0x90>
+ 5b9:	ff 24 85 c4 0a 00 00 	jmp    *0xac4(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 590:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 593:	5b                   	pop    %ebx
- 594:	5e                   	pop    %esi
- 595:	5f                   	pop    %edi
- 596:	5d                   	pop    %ebp
- 597:	c3                   	ret    
- 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
+ 5c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5c3:	5b                   	pop    %ebx
+ 5c4:	5e                   	pop    %esi
+ 5c5:	5f                   	pop    %edi
+ 5c6:	5d                   	pop    %ebp
+ 5c7:	c3                   	ret    
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
   write(fd, &c, 1);
- 5a0:	83 ec 04             	sub    $0x4,%esp
- 5a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 5a6:	6a 01                	push   $0x1
- 5a8:	57                   	push   %edi
- 5a9:	56                   	push   %esi
- 5aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5ae:	e8 00 fe ff ff       	call   3b3 <write>
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+ 5d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5d6:	6a 01                	push   $0x1
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5de:	e8 d0 fd ff ff       	call   3b3 <write>
         putc(fd, c);
- 5b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 5e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 5b7:	83 c4 0c             	add    $0xc,%esp
- 5ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 5bd:	6a 01                	push   $0x1
- 5bf:	57                   	push   %edi
- 5c0:	56                   	push   %esi
- 5c1:	e8 ed fd ff ff       	call   3b3 <write>
+ 5e7:	83 c4 0c             	add    $0xc,%esp
+ 5ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5ed:	6a 01                	push   $0x1
+ 5ef:	57                   	push   %edi
+ 5f0:	56                   	push   %esi
+ 5f1:	e8 bd fd ff ff       	call   3b3 <write>
         putc(fd, c);
- 5c6:	83 c4 10             	add    $0x10,%esp
+ 5f6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5c9:	31 c9                	xor    %ecx,%ecx
- 5cb:	eb 95                	jmp    562 <printf+0x52>
- 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 5f9:	31 c9                	xor    %ecx,%ecx
+ 5fb:	eb 95                	jmp    592 <printf+0x52>
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5d0:	83 ec 0c             	sub    $0xc,%esp
- 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5d8:	6a 00                	push   $0x0
- 5da:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5dd:	8b 10                	mov    (%eax),%edx
- 5df:	89 f0                	mov    %esi,%eax
- 5e1:	e8 7a fe ff ff       	call   460 <printint>
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 608:	6a 00                	push   $0x0
+ 60a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 60d:	8b 10                	mov    (%eax),%edx
+ 60f:	89 f0                	mov    %esi,%eax
+ 611:	e8 7a fe ff ff       	call   490 <printint>
         ap++;
- 5e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 5ea:	83 c4 10             	add    $0x10,%esp
+ 616:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 61a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5ed:	31 c9                	xor    %ecx,%ecx
- 5ef:	e9 6e ff ff ff       	jmp    562 <printf+0x52>
- 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61d:	31 c9                	xor    %ecx,%ecx
+ 61f:	e9 6e ff ff ff       	jmp    592 <printf+0x52>
+ 624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5fb:	8b 10                	mov    (%eax),%edx
+ 628:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 62b:	8b 10                	mov    (%eax),%edx
         ap++;
- 5fd:	83 c0 04             	add    $0x4,%eax
- 600:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 62d:	83 c0 04             	add    $0x4,%eax
+ 630:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 603:	85 d2                	test   %edx,%edx
- 605:	0f 84 8d 00 00 00    	je     698 <printf+0x188>
+ 633:	85 d2                	test   %edx,%edx
+ 635:	0f 84 8d 00 00 00    	je     6c8 <printf+0x188>
         while(*s != 0){
- 60b:	0f b6 02             	movzbl (%edx),%eax
+ 63b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 60e:	31 c9                	xor    %ecx,%ecx
+ 63e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 610:	84 c0                	test   %al,%al
- 612:	0f 84 4a ff ff ff    	je     562 <printf+0x52>
- 618:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 61b:	89 d3                	mov    %edx,%ebx
- 61d:	8d 76 00             	lea    0x0(%esi),%esi
+ 640:	84 c0                	test   %al,%al
+ 642:	0f 84 4a ff ff ff    	je     592 <printf+0x52>
+ 648:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 64b:	89 d3                	mov    %edx,%ebx
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 620:	83 ec 04             	sub    $0x4,%esp
+ 650:	83 ec 04             	sub    $0x4,%esp
           s++;
- 623:	83 c3 01             	add    $0x1,%ebx
- 626:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 653:	83 c3 01             	add    $0x1,%ebx
+ 656:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 629:	6a 01                	push   $0x1
- 62b:	57                   	push   %edi
- 62c:	56                   	push   %esi
- 62d:	e8 81 fd ff ff       	call   3b3 <write>
+ 659:	6a 01                	push   $0x1
+ 65b:	57                   	push   %edi
+ 65c:	56                   	push   %esi
+ 65d:	e8 51 fd ff ff       	call   3b3 <write>
         while(*s != 0){
- 632:	0f b6 03             	movzbl (%ebx),%eax
- 635:	83 c4 10             	add    $0x10,%esp
- 638:	84 c0                	test   %al,%al
- 63a:	75 e4                	jne    620 <printf+0x110>
+ 662:	0f b6 03             	movzbl (%ebx),%eax
+ 665:	83 c4 10             	add    $0x10,%esp
+ 668:	84 c0                	test   %al,%al
+ 66a:	75 e4                	jne    650 <printf+0x110>
       state = 0;
- 63c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 63f:	31 c9                	xor    %ecx,%ecx
- 641:	e9 1c ff ff ff       	jmp    562 <printf+0x52>
- 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 64d:	8d 76 00             	lea    0x0(%esi),%esi
+ 66c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 66f:	31 c9                	xor    %ecx,%ecx
+ 671:	e9 1c ff ff ff       	jmp    592 <printf+0x52>
+ 676:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 650:	83 ec 0c             	sub    $0xc,%esp
- 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 658:	6a 01                	push   $0x1
- 65a:	e9 7b ff ff ff       	jmp    5da <printf+0xca>
- 65f:	90                   	nop
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 688:	6a 01                	push   $0x1
+ 68a:	e9 7b ff ff ff       	jmp    60a <printf+0xca>
+ 68f:	90                   	nop
         putc(fd, *ap);
- 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 690:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 663:	83 ec 04             	sub    $0x4,%esp
+ 693:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 666:	8b 00                	mov    (%eax),%eax
+ 696:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 668:	6a 01                	push   $0x1
- 66a:	57                   	push   %edi
- 66b:	56                   	push   %esi
+ 698:	6a 01                	push   $0x1
+ 69a:	57                   	push   %edi
+ 69b:	56                   	push   %esi
         putc(fd, *ap);
- 66c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 69c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 66f:	e8 3f fd ff ff       	call   3b3 <write>
+ 69f:	e8 0f fd ff ff       	call   3b3 <write>
         ap++;
- 674:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 678:	83 c4 10             	add    $0x10,%esp
+ 6a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 6a8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 67b:	31 c9                	xor    %ecx,%ecx
- 67d:	e9 e0 fe ff ff       	jmp    562 <printf+0x52>
- 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6ab:	31 c9                	xor    %ecx,%ecx
+ 6ad:	e9 e0 fe ff ff       	jmp    592 <printf+0x52>
+ 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 688:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 6b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 68b:	83 ec 04             	sub    $0x4,%esp
- 68e:	e9 2a ff ff ff       	jmp    5bd <printf+0xad>
- 693:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 697:	90                   	nop
+ 6bb:	83 ec 04             	sub    $0x4,%esp
+ 6be:	e9 2a ff ff ff       	jmp    5ed <printf+0xad>
+ 6c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c7:	90                   	nop
           s = "(null)";
- 698:	ba 5b 08 00 00       	mov    $0x85b,%edx
+ 6c8:	ba bb 0a 00 00       	mov    $0xabb,%edx
         while(*s != 0){
- 69d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 6a0:	b8 28 00 00 00       	mov    $0x28,%eax
- 6a5:	89 d3                	mov    %edx,%ebx
- 6a7:	e9 74 ff ff ff       	jmp    620 <printf+0x110>
- 6ac:	66 90                	xchg   %ax,%ax
- 6ae:	66 90                	xchg   %ax,%ax
+ 6cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6d5:	89 d3                	mov    %edx,%ebx
+ 6d7:	e9 74 ff ff ff       	jmp    650 <printf+0x110>
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
 
-000006b0 <free>:
+000006e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6b0:	55                   	push   %ebp
+ 6e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b1:	a1 74 0b 00 00       	mov    0xb74,%eax
+ 6e1:	a1 80 0e 00 00       	mov    0xe80,%eax
 {
- 6b6:	89 e5                	mov    %esp,%ebp
- 6b8:	57                   	push   %edi
- 6b9:	56                   	push   %esi
- 6ba:	53                   	push   %ebx
- 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6e6:	89 e5                	mov    %esp,%ebp
+ 6e8:	57                   	push   %edi
+ 6e9:	56                   	push   %esi
+ 6ea:	53                   	push   %ebx
+ 6eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 6be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6c8:	89 c2                	mov    %eax,%edx
- 6ca:	8b 00                	mov    (%eax),%eax
- 6cc:	39 ca                	cmp    %ecx,%edx
- 6ce:	73 30                	jae    700 <free+0x50>
- 6d0:	39 c1                	cmp    %eax,%ecx
- 6d2:	72 04                	jb     6d8 <free+0x28>
+ 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6f8:	89 c2                	mov    %eax,%edx
+ 6fa:	8b 00                	mov    (%eax),%eax
+ 6fc:	39 ca                	cmp    %ecx,%edx
+ 6fe:	73 30                	jae    730 <free+0x50>
+ 700:	39 c1                	cmp    %eax,%ecx
+ 702:	72 04                	jb     708 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6d4:	39 c2                	cmp    %eax,%edx
- 6d6:	72 f0                	jb     6c8 <free+0x18>
+ 704:	39 c2                	cmp    %eax,%edx
+ 706:	72 f0                	jb     6f8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6de:	39 f8                	cmp    %edi,%eax
- 6e0:	74 30                	je     712 <free+0x62>
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 f8                	cmp    %edi,%eax
+ 710:	74 30                	je     742 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 6e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 712:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 6e5:	8b 42 04             	mov    0x4(%edx),%eax
- 6e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6eb:	39 f1                	cmp    %esi,%ecx
- 6ed:	74 3a                	je     729 <free+0x79>
+ 715:	8b 42 04             	mov    0x4(%edx),%eax
+ 718:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 71b:	39 f1                	cmp    %esi,%ecx
+ 71d:	74 3a                	je     759 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 6ef:	89 0a                	mov    %ecx,(%edx)
+ 71f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 6f1:	5b                   	pop    %ebx
+ 721:	5b                   	pop    %ebx
   freep = p;
- 6f2:	89 15 74 0b 00 00    	mov    %edx,0xb74
+ 722:	89 15 80 0e 00 00    	mov    %edx,0xe80
 }
- 6f8:	5e                   	pop    %esi
- 6f9:	5f                   	pop    %edi
- 6fa:	5d                   	pop    %ebp
- 6fb:	c3                   	ret    
- 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 700:	39 c2                	cmp    %eax,%edx
- 702:	72 c4                	jb     6c8 <free+0x18>
- 704:	39 c1                	cmp    %eax,%ecx
- 706:	73 c0                	jae    6c8 <free+0x18>
+ 730:	39 c2                	cmp    %eax,%edx
+ 732:	72 c4                	jb     6f8 <free+0x18>
+ 734:	39 c1                	cmp    %eax,%ecx
+ 736:	73 c0                	jae    6f8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 70e:	39 f8                	cmp    %edi,%eax
- 710:	75 d0                	jne    6e2 <free+0x32>
+ 738:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 73b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 73e:	39 f8                	cmp    %edi,%eax
+ 740:	75 d0                	jne    712 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 712:	03 70 04             	add    0x4(%eax),%esi
- 715:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 742:	03 70 04             	add    0x4(%eax),%esi
+ 745:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 718:	8b 02                	mov    (%edx),%eax
- 71a:	8b 00                	mov    (%eax),%eax
- 71c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 748:	8b 02                	mov    (%edx),%eax
+ 74a:	8b 00                	mov    (%eax),%eax
+ 74c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 71f:	8b 42 04             	mov    0x4(%edx),%eax
- 722:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 725:	39 f1                	cmp    %esi,%ecx
- 727:	75 c6                	jne    6ef <free+0x3f>
+ 74f:	8b 42 04             	mov    0x4(%edx),%eax
+ 752:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 755:	39 f1                	cmp    %esi,%ecx
+ 757:	75 c6                	jne    71f <free+0x3f>
     p->s.size += bp->s.size;
- 729:	03 43 fc             	add    -0x4(%ebx),%eax
+ 759:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 72c:	89 15 74 0b 00 00    	mov    %edx,0xb74
+ 75c:	89 15 80 0e 00 00    	mov    %edx,0xe80
     p->s.size += bp->s.size;
- 732:	89 42 04             	mov    %eax,0x4(%edx)
+ 762:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 735:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 738:	89 0a                	mov    %ecx,(%edx)
+ 765:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 768:	89 0a                	mov    %ecx,(%edx)
 }
- 73a:	5b                   	pop    %ebx
- 73b:	5e                   	pop    %esi
- 73c:	5f                   	pop    %edi
- 73d:	5d                   	pop    %ebp
- 73e:	c3                   	ret    
- 73f:	90                   	nop
+ 76a:	5b                   	pop    %ebx
+ 76b:	5e                   	pop    %esi
+ 76c:	5f                   	pop    %edi
+ 76d:	5d                   	pop    %ebp
+ 76e:	c3                   	ret    
+ 76f:	90                   	nop
 
-00000740 <malloc>:
+00000770 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 740:	55                   	push   %ebp
- 741:	89 e5                	mov    %esp,%ebp
- 743:	57                   	push   %edi
- 744:	56                   	push   %esi
- 745:	53                   	push   %ebx
- 746:	83 ec 1c             	sub    $0x1c,%esp
+ 770:	55                   	push   %ebp
+ 771:	89 e5                	mov    %esp,%ebp
+ 773:	57                   	push   %edi
+ 774:	56                   	push   %esi
+ 775:	53                   	push   %ebx
+ 776:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 749:	8b 45 08             	mov    0x8(%ebp),%eax
+ 779:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 74c:	8b 3d 74 0b 00 00    	mov    0xb74,%edi
+ 77c:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 752:	8d 70 07             	lea    0x7(%eax),%esi
- 755:	c1 ee 03             	shr    $0x3,%esi
- 758:	83 c6 01             	add    $0x1,%esi
+ 782:	8d 70 07             	lea    0x7(%eax),%esi
+ 785:	c1 ee 03             	shr    $0x3,%esi
+ 788:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 75b:	85 ff                	test   %edi,%edi
- 75d:	0f 84 9d 00 00 00    	je     800 <malloc+0xc0>
+ 78b:	85 ff                	test   %edi,%edi
+ 78d:	0f 84 9d 00 00 00    	je     830 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 763:	8b 17                	mov    (%edi),%edx
+ 793:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 765:	8b 4a 04             	mov    0x4(%edx),%ecx
- 768:	39 f1                	cmp    %esi,%ecx
- 76a:	73 6a                	jae    7d6 <malloc+0x96>
- 76c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 771:	39 de                	cmp    %ebx,%esi
- 773:	0f 43 de             	cmovae %esi,%ebx
+ 795:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 798:	39 f1                	cmp    %esi,%ecx
+ 79a:	73 6a                	jae    806 <malloc+0x96>
+ 79c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7a1:	39 de                	cmp    %ebx,%esi
+ 7a3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 776:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 77d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 780:	eb 17                	jmp    799 <malloc+0x59>
- 782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7b0:	eb 17                	jmp    7c9 <malloc+0x59>
+ 7b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 788:	8b 02                	mov    (%edx),%eax
+ 7b8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 78a:	8b 48 04             	mov    0x4(%eax),%ecx
- 78d:	39 f1                	cmp    %esi,%ecx
- 78f:	73 4f                	jae    7e0 <malloc+0xa0>
+ 7ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7bd:	39 f1                	cmp    %esi,%ecx
+ 7bf:	73 4f                	jae    810 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 791:	8b 3d 74 0b 00 00    	mov    0xb74,%edi
- 797:	89 c2                	mov    %eax,%edx
- 799:	39 d7                	cmp    %edx,%edi
- 79b:	75 eb                	jne    788 <malloc+0x48>
+ 7c1:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
+ 7c7:	89 c2                	mov    %eax,%edx
+ 7c9:	39 d7                	cmp    %edx,%edi
+ 7cb:	75 eb                	jne    7b8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 79d:	83 ec 0c             	sub    $0xc,%esp
- 7a0:	ff 75 e4             	push   -0x1c(%ebp)
- 7a3:	e8 73 fc ff ff       	call   41b <sbrk>
+ 7cd:	83 ec 0c             	sub    $0xc,%esp
+ 7d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7d3:	e8 43 fc ff ff       	call   41b <sbrk>
   if(p == (char*)-1)
- 7a8:	83 c4 10             	add    $0x10,%esp
- 7ab:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7ae:	74 1c                	je     7cc <malloc+0x8c>
+ 7d8:	83 c4 10             	add    $0x10,%esp
+ 7db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7de:	74 1c                	je     7fc <malloc+0x8c>
   hp->s.size = nu;
- 7b0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7e0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7b3:	83 ec 0c             	sub    $0xc,%esp
- 7b6:	83 c0 08             	add    $0x8,%eax
- 7b9:	50                   	push   %eax
- 7ba:	e8 f1 fe ff ff       	call   6b0 <free>
+ 7e3:	83 ec 0c             	sub    $0xc,%esp
+ 7e6:	83 c0 08             	add    $0x8,%eax
+ 7e9:	50                   	push   %eax
+ 7ea:	e8 f1 fe ff ff       	call   6e0 <free>
   return freep;
- 7bf:	8b 15 74 0b 00 00    	mov    0xb74,%edx
+ 7ef:	8b 15 80 0e 00 00    	mov    0xe80,%edx
       if((p = morecore(nunits)) == 0)
- 7c5:	83 c4 10             	add    $0x10,%esp
- 7c8:	85 d2                	test   %edx,%edx
- 7ca:	75 bc                	jne    788 <malloc+0x48>
+ 7f5:	83 c4 10             	add    $0x10,%esp
+ 7f8:	85 d2                	test   %edx,%edx
+ 7fa:	75 bc                	jne    7b8 <malloc+0x48>
         return 0;
   }
 }
- 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7cf:	31 c0                	xor    %eax,%eax
+ 7ff:	31 c0                	xor    %eax,%eax
 }
- 7d1:	5b                   	pop    %ebx
- 7d2:	5e                   	pop    %esi
- 7d3:	5f                   	pop    %edi
- 7d4:	5d                   	pop    %ebp
- 7d5:	c3                   	ret    
+ 801:	5b                   	pop    %ebx
+ 802:	5e                   	pop    %esi
+ 803:	5f                   	pop    %edi
+ 804:	5d                   	pop    %ebp
+ 805:	c3                   	ret    
     if(p->s.size >= nunits){
- 7d6:	89 d0                	mov    %edx,%eax
- 7d8:	89 fa                	mov    %edi,%edx
- 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 806:	89 d0                	mov    %edx,%eax
+ 808:	89 fa                	mov    %edi,%edx
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 7e0:	39 ce                	cmp    %ecx,%esi
- 7e2:	74 4c                	je     830 <malloc+0xf0>
+ 810:	39 ce                	cmp    %ecx,%esi
+ 812:	74 4c                	je     860 <malloc+0xf0>
         p->s.size -= nunits;
- 7e4:	29 f1                	sub    %esi,%ecx
- 7e6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 814:	29 f1                	sub    %esi,%ecx
+ 816:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 7e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 819:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 7ec:	89 70 04             	mov    %esi,0x4(%eax)
+ 81c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 7ef:	89 15 74 0b 00 00    	mov    %edx,0xb74
+ 81f:	89 15 80 0e 00 00    	mov    %edx,0xe80
 }
- 7f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 825:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7f8:	83 c0 08             	add    $0x8,%eax
+ 828:	83 c0 08             	add    $0x8,%eax
 }
- 7fb:	5b                   	pop    %ebx
- 7fc:	5e                   	pop    %esi
- 7fd:	5f                   	pop    %edi
- 7fe:	5d                   	pop    %ebp
- 7ff:	c3                   	ret    
+ 82b:	5b                   	pop    %ebx
+ 82c:	5e                   	pop    %esi
+ 82d:	5f                   	pop    %edi
+ 82e:	5d                   	pop    %ebp
+ 82f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 800:	c7 05 74 0b 00 00 78 	movl   $0xb78,0xb74
- 807:	0b 00 00 
+ 830:	c7 05 80 0e 00 00 84 	movl   $0xe84,0xe80
+ 837:	0e 00 00 
     base.s.size = 0;
- 80a:	bf 78 0b 00 00       	mov    $0xb78,%edi
+ 83a:	bf 84 0e 00 00       	mov    $0xe84,%edi
     base.s.ptr = freep = prevp = &base;
- 80f:	c7 05 78 0b 00 00 78 	movl   $0xb78,0xb78
- 816:	0b 00 00 
+ 83f:	c7 05 84 0e 00 00 84 	movl   $0xe84,0xe84
+ 846:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 819:	89 fa                	mov    %edi,%edx
+ 849:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 81b:	c7 05 7c 0b 00 00 00 	movl   $0x0,0xb7c
- 822:	00 00 00 
+ 84b:	c7 05 88 0e 00 00 00 	movl   $0x0,0xe88
+ 852:	00 00 00 
     if(p->s.size >= nunits){
- 825:	e9 42 ff ff ff       	jmp    76c <malloc+0x2c>
- 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 855:	e9 42 ff ff ff       	jmp    79c <malloc+0x2c>
+ 85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 830:	8b 08                	mov    (%eax),%ecx
- 832:	89 0a                	mov    %ecx,(%edx)
- 834:	eb b9                	jmp    7ef <malloc+0xaf>
+ 860:	8b 08                	mov    (%eax),%ecx
+ 862:	89 0a                	mov    %ecx,(%edx)
+ 864:	eb b9                	jmp    81f <malloc+0xaf>
+ 866:	66 90                	xchg   %ax,%ax
+ 868:	66 90                	xchg   %ax,%ax
+ 86a:	66 90                	xchg   %ax,%ax
+ 86c:	66 90                	xchg   %ax,%ax
+ 86e:	66 90                	xchg   %ax,%ax
+
+00000870 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 870:	55                   	push   %ebp
+ 871:	b8 a4 0e 00 00       	mov    $0xea4,%eax
+ 876:	89 e5                	mov    %esp,%ebp
+ 878:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 87b:	89 15 a0 0e 00 00    	mov    %edx,0xea0
+    for (mti=1; mti<N; mti++)
+ 881:	eb 08                	jmp    88b <sgenrand+0x1b>
+ 883:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 887:	90                   	nop
+ 888:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 88b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 891:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 893:	3d 5c 18 00 00       	cmp    $0x185c,%eax
+ 898:	75 ee                	jne    888 <sgenrand+0x18>
+ 89a:	c7 05 64 0e 00 00 70 	movl   $0x270,0xe64
+ 8a1:	02 00 00 
+}
+ 8a4:	5d                   	pop    %ebp
+ 8a5:	c3                   	ret    
+ 8a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000008b0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 8b0:	a1 64 0e 00 00       	mov    0xe64,%eax
+ 8b5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8ba:	7f 3d                	jg     8f9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8bc:	8b 0c 85 a0 0e 00 00 	mov    0xea0(,%eax,4),%ecx
+ 8c3:	8d 50 01             	lea    0x1(%eax),%edx
+ 8c6:	89 15 64 0e 00 00    	mov    %edx,0xe64
+    y ^= TEMPERING_SHIFT_U(y);
+ 8cc:	89 ca                	mov    %ecx,%edx
+ 8ce:	c1 ea 0b             	shr    $0xb,%edx
+ 8d1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 8d3:	89 d0                	mov    %edx,%eax
+ 8d5:	c1 e0 07             	shl    $0x7,%eax
+ 8d8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 8dd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 8df:	89 c2                	mov    %eax,%edx
+ 8e1:	c1 e2 0f             	shl    $0xf,%edx
+ 8e4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 8ea:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 8ec:	89 d0                	mov    %edx,%eax
+ 8ee:	c1 e8 12             	shr    $0x12,%eax
+ 8f1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 8f3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 8f8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 8f9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 8fe:	0f 84 d4 00 00 00    	je     9d8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 904:	31 c0                	xor    %eax,%eax
+ 906:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 90d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 910:	8b 0c 85 a0 0e 00 00 	mov    0xea0(,%eax,4),%ecx
+ 917:	83 c0 01             	add    $0x1,%eax
+ 91a:	8b 14 85 a0 0e 00 00 	mov    0xea0(,%eax,4),%edx
+ 921:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 927:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 92d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 92f:	89 d1                	mov    %edx,%ecx
+ 931:	83 e2 01             	and    $0x1,%edx
+ 934:	d1 e9                	shr    %ecx
+ 936:	33 0c 85 d0 14 00 00 	xor    0x14d0(,%eax,4),%ecx
+ 93d:	33 0c 95 30 0b 00 00 	xor    0xb30(,%edx,4),%ecx
+ 944:	89 0c 85 9c 0e 00 00 	mov    %ecx,0xe9c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 94b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 950:	75 be                	jne    910 <genrand+0x60>
+ 952:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 958:	8b 0c 85 a0 0e 00 00 	mov    0xea0(,%eax,4),%ecx
+ 95f:	83 c0 01             	add    $0x1,%eax
+ 962:	8b 14 85 a0 0e 00 00 	mov    0xea0(,%eax,4),%edx
+ 969:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 96f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 975:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 977:	89 d1                	mov    %edx,%ecx
+ 979:	83 e2 01             	and    $0x1,%edx
+ 97c:	d1 e9                	shr    %ecx
+ 97e:	33 0c 85 10 0b 00 00 	xor    0xb10(,%eax,4),%ecx
+ 985:	33 0c 95 30 0b 00 00 	xor    0xb30(,%edx,4),%ecx
+ 98c:	89 0c 85 9c 0e 00 00 	mov    %ecx,0xe9c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 993:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 998:	75 be                	jne    958 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 99a:	8b 0d a0 0e 00 00    	mov    0xea0,%ecx
+ 9a0:	a1 5c 18 00 00       	mov    0x185c,%eax
+ 9a5:	89 ca                	mov    %ecx,%edx
+ 9a7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 9ac:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9b2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9b4:	89 c2                	mov    %eax,%edx
+ 9b6:	83 e0 01             	and    $0x1,%eax
+ 9b9:	d1 ea                	shr    %edx
+ 9bb:	33 15 d0 14 00 00    	xor    0x14d0,%edx
+ 9c1:	33 14 85 30 0b 00 00 	xor    0xb30(,%eax,4),%edx
+ 9c8:	89 15 5c 18 00 00    	mov    %edx,0x185c
+ 9ce:	ba 01 00 00 00       	mov    $0x1,%edx
+ 9d3:	e9 ee fe ff ff       	jmp    8c6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 9d8:	b8 a4 0e 00 00       	mov    $0xea4,%eax
+ 9dd:	b9 5c 18 00 00       	mov    $0x185c,%ecx
+ 9e2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 9e7:	c7 05 a0 0e 00 00 05 	movl   $0x1105,0xea0
+ 9ee:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 9f1:	eb 08                	jmp    9fb <genrand+0x14b>
+ 9f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 9f7:	90                   	nop
+ 9f8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 9fb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a01:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a03:	39 c1                	cmp    %eax,%ecx
+ a05:	75 f1                	jne    9f8 <genrand+0x148>
+ a07:	e9 f8 fe ff ff       	jmp    904 <genrand+0x54>
+ a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a10 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a10:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a11:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a13:	89 e5                	mov    %esp,%ebp
+ a15:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a16:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a19:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a1a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a1f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a22:	89 d8                	mov    %ebx,%eax
+ a24:	f7 f1                	div    %ecx
+ a26:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a28:	29 d3                	sub    %edx,%ebx
+ a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ a30:	e8 7b fe ff ff       	call   8b0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a35:	39 d8                	cmp    %ebx,%eax
+ a37:	73 f7                	jae    a30 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a39:	31 d2                	xor    %edx,%edx
+}
+ a3b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a3c:	f7 f6                	div    %esi
+}
+ a3e:	5e                   	pop    %esi
+ a3f:	5d                   	pop    %ebp
+ a40:	c3                   	ret    
+ a41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4f:	90                   	nop
+
+00000a50 <randomrange>:
+
+int randomrange(int low, int high){
+ a50:	55                   	push   %ebp
+ a51:	89 e5                	mov    %esp,%ebp
+ a53:	57                   	push   %edi
+ a54:	56                   	push   %esi
+ a55:	53                   	push   %ebx
+ a56:	83 ec 0c             	sub    $0xc,%esp
+ a59:	8b 75 08             	mov    0x8(%ebp),%esi
+ a5c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a5f:	39 f0                	cmp    %esi,%eax
+ a61:	7d 06                	jge    a69 <randomrange+0x19>
+ a63:	89 f2                	mov    %esi,%edx
+ a65:	89 c6                	mov    %eax,%esi
+ a67:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ a69:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ a6b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ a70:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ a72:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a75:	89 d8                	mov    %ebx,%eax
+ a77:	f7 f1                	div    %ecx
+ a79:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ a7b:	29 d3                	sub    %edx,%ebx
+ a7d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ a80:	e8 2b fe ff ff       	call   8b0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a85:	39 d8                	cmp    %ebx,%eax
+ a87:	73 f7                	jae    a80 <randomrange+0x30>
+  return x/bin_size;
+ a89:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ a8b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ a8e:	f7 f7                	div    %edi
+}
+ a90:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ a91:	01 f0                	add    %esi,%eax
+}
+ a93:	5e                   	pop    %esi
+ a94:	5f                   	pop    %edi
+ a95:	5d                   	pop    %ebp
+ a96:	c3                   	ret    
diff -ruN xv6-public/stressfs.d xv6-public-with-hybrid/stressfs.d
--- xv6-public/stressfs.d	2022-09-06 09:47:10.614270000 +0530
+++ xv6-public-with-hybrid/stressfs.d	2022-10-07 18:50:01.580950039 +0530
@@ -1,2 +1,2 @@
 stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
- fs.h fcntl.h
+ processInfo.h fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-public-with-hybrid/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-public-with-hybrid/stressfs.sym
--- xv6-public/stressfs.sym	2022-09-06 09:47:10.642302000 +0530
+++ xv6-public-with-hybrid/stressfs.sym	2022-10-07 18:50:01.664949792 +0530
@@ -1,20 +1,28 @@
 00000000 stressfs.c
 00000000 ulib.c
 00000000 printf.c
-00000460 printint
-000008bc digits.0
+00000490 printint
+00000b1c digits.0
 00000000 umalloc.c
-00000b74 freep
-00000b78 base
+00000e80 freep
+00000e84 base
+00000000 random.c
+00000ea0 mt
+00000e64 mti
+00000b30 mag01.0
 00000140 strcpy
-00000510 printf
+00000870 sgenrand
+00000540 printf
 00000443 thread_exit
 00000360 memmove
 000003db mknod
 00000260 gets
 00000413 getpid
-00000740 malloc
+00000770 malloc
 00000423 sleep
+00000473 get_burst_time
+00000a10 random_at_most
+0000047b getCurrentInfo
 000003a3 pipe
 000003b3 write
 000003eb fstat
@@ -27,14 +35,19 @@
 0000038b fork
 0000041b sbrk
 0000042b uptime
-00000b74 __bss_start
+00000e68 __bss_start
 00000200 memset
 00000000 main
+0000046b set_burst_time
 00000170 strcmp
 0000040b dup
+0000045b getMaxPid
+000008b0 genrand
+00000453 getNumProc
+00000463 getProcInfo
 000002d0 stat
-00000b74 _edata
-00000b80 _end
+00000e68 _edata
+00001860 _end
 000003f3 link
 00000393 exit
 00000320 atoi
@@ -43,7 +56,9 @@
 000003d3 open
 00000220 strchr
 00000433 thread_create
+00000483 getCurrentPID
+00000a50 randomrange
 000003fb mkdir
 000003bb close
 0000043b thread_join
-000006b0 free
+000006e0 free
Binary files xv6-public/string.o and xv6-public-with-hybrid/string.o differ
Binary files xv6-public/swtch.o and xv6-public-with-hybrid/swtch.o differ
diff -ruN xv6-public/syscall.c xv6-public-with-hybrid/syscall.c
--- xv6-public/syscall.c	2022-09-03 13:44:42.000000000 +0530
+++ xv6-public-with-hybrid/syscall.c	2022-10-06 14:15:52.787539000 +0530
@@ -107,6 +107,13 @@
 extern int sys_thread_join(void);
 extern int sys_thread_exit(void);
 extern int sys_draw(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
+extern int sys_getCurrentInfo(void);
+extern int sys_getCurrentPID(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -134,6 +141,13 @@
 [SYS_thread_join]    sys_thread_join,
 [SYS_thread_exit]    sys_thread_exit,
 [SYS_draw]    sys_draw,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPid] sys_getMaxPid,
+[SYS_getProcInfo] sys_getProcInfo,
+[SYS_set_burst_time] sys_set_burst_time,
+[SYS_get_burst_time] sys_get_burst_time,
+[SYS_getCurrentInfo] sys_getCurrentInfo,
+[SYS_getCurrentPID] sys_getCurrentPID,
 };
 
 void
diff -ruN xv6-public/syscall.h xv6-public-with-hybrid/syscall.h
--- xv6-public/syscall.h	2022-09-03 13:45:22.000000000 +0530
+++ xv6-public-with-hybrid/syscall.h	2022-10-06 14:16:29.679978000 +0530
@@ -23,4 +23,11 @@
 #define SYS_thread_create 22
 #define SYS_thread_exit 23
 #define SYS_thread_join 24
-#define SYS_draw   25
\ No newline at end of file
+#define SYS_draw   25
+#define SYS_getNumProc 26
+#define SYS_getMaxPid 27
+#define SYS_getProcInfo 28
+#define SYS_set_burst_time 29
+#define SYS_get_burst_time 30
+#define SYS_getCurrentInfo 31
+#define SYS_getCurrentPID 32
Binary files xv6-public/syscall.o and xv6-public-with-hybrid/syscall.o differ
Binary files xv6-public/sysfile.o and xv6-public-with-hybrid/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-public-with-hybrid/sysproc.c
--- xv6-public/sysproc.c	2022-09-05 23:15:59.225843000 +0530
+++ xv6-public-with-hybrid/sysproc.c	2022-10-06 14:18:05.045051000 +0530
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "processInfo.h"
 
 int
 sys_fork(void)
@@ -91,7 +92,9 @@
 }
 
 int sys_thread_create(void){
-  void (*fcn)(void*),*arg,*stack;
+  void (*fcn)(void*);
+  void* arg;
+  void* stack;
   argptr(0,(void*) &fcn, sizeof(void(*)(void *)));
   argptr(1, (void*) &arg, sizeof(void*));
   argptr(2, (void*) &stack, sizeof(void *));
@@ -107,15 +110,79 @@
   return thread_exit();
 }
 
+int sys_getNumProc(void){
+  return getNumProc();
+}
+
+int sys_getMaxPid(void){
+  return getMaxPid();
+}
+/*
+int sys_setBurstTime(void){
+  struct proc * p = myproc();
+  p->burstTime = 5;
+  return 0;
+}
+
+int sys_getBurstTime(void){
+  struct proc *p = myproc();
+  return p->burstTime;
+}*/
+
+int sys_set_burst_time(void){
+  int burst_time;
+  argptr(0,(void *)&burst_time, sizeof(burst_time));
+
+  return set_burst_timeAssist(burst_time);
+}
+
+int sys_get_burst_time(void){
+  return get_burst_timeAssist();
+}
+
+
+int sys_getProcInfo(void){
+  int pid;
+  struct processInfo *info;
+  argptr(0,(void *) &pid,sizeof(pid));
+  argptr(1,(void *) &info,sizeof(info));
+  struct processInfo tempInfo = getProcInfoHelp(pid);
+  if(tempInfo.ppid==-1)
+    return -1;
+  info->ppid = tempInfo.ppid;
+  info->psize = tempInfo.psize;
+  info->numberContextSwitches = tempInfo.numberContextSwitches;
+  return 0;  
+}
+
 int 
 sys_draw(void){
   void* buf;
   uint size;
   argptr(0,(void*)&buf,sizeof(buf));
   argptr(1,(void*)&size,sizeof(size));
-  char figure[] = "\n\
-     			---------------------- \n";
+  char figure[] = "\nGroup M10\n";
   if(sizeof(figure)>size)return -1;
   strncpy((char *)buf,figure,size);
   return sizeof(figure);                
 }
+
+int
+sys_getCurrentInfo(void)
+{
+  struct processInfo *info;
+  argptr(0,(void *)&info, sizeof(info));
+
+  struct processInfo temporaryInfo = getCurrentInfoAssist();
+
+  if(temporaryInfo.ppid == -1)return -1;
+
+  info->ppid = temporaryInfo.ppid;
+  info->psize = temporaryInfo.psize;
+  info->numberContextSwitches = temporaryInfo.numberContextSwitches;
+  return 0;
+}
+
+int sys_getCurrentPID(void){
+  return getCurrentPIDAssist();
+}
diff -ruN xv6-public/sysproc.d xv6-public-with-hybrid/sysproc.d
--- xv6-public/sysproc.d	2022-09-06 09:47:05.282032000 +0530
+++ xv6-public-with-hybrid/sysproc.d	2022-10-07 18:50:10.480923360 +0530
@@ -1,2 +1,2 @@
 sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h
+ date.h param.h memlayout.h mmu.h proc.h processInfo.h
Binary files xv6-public/sysproc.o and xv6-public-with-hybrid/sysproc.o differ
Binary files xv6-public/_test_BurstTime and xv6-public-with-hybrid/_test_BurstTime differ
diff -ruN xv6-public/test_BurstTime.asm xv6-public-with-hybrid/test_BurstTime.asm
--- xv6-public/test_BurstTime.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_BurstTime.asm	2022-10-07 18:50:03.340944852 +0530
@@ -0,0 +1,1472 @@
+
+_test_BurstTime:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+
+int main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 0c             	sub    $0xc,%esp
+	printf(1,"This is a sample process to test set_burst_time and get_burst_time system calls.\n");
+  11:	68 a8 09 00 00       	push   $0x9a8
+  16:	6a 01                	push   $0x1
+  18:	e8 33 04 00 00       	call   450 <printf>
+	set_burst_time(3);
+  1d:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
+  24:	e8 52 03 00 00       	call   37b <set_burst_time>
+	printf(1,"Burst time has been set to %d\n.", get_burst_time());
+  29:	e8 55 03 00 00       	call   383 <get_burst_time>
+  2e:	83 c4 0c             	add    $0xc,%esp
+  31:	50                   	push   %eax
+  32:	68 fc 09 00 00       	push   $0x9fc
+  37:	6a 01                	push   $0x1
+  39:	e8 12 04 00 00       	call   450 <printf>
+	exit();
+  3e:	e8 60 02 00 00       	call   2a3 <exit>
+  43:	66 90                	xchg   %ax,%ax
+  45:	66 90                	xchg   %ax,%ax
+  47:	66 90                	xchg   %ax,%ax
+  49:	66 90                	xchg   %ax,%ax
+  4b:	66 90                	xchg   %ax,%ax
+  4d:	66 90                	xchg   %ax,%ax
+  4f:	90                   	nop
+
+00000050 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  50:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  51:	31 c0                	xor    %eax,%eax
+{
+  53:	89 e5                	mov    %esp,%ebp
+  55:	53                   	push   %ebx
+  56:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  59:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  60:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  64:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  67:	83 c0 01             	add    $0x1,%eax
+  6a:	84 d2                	test   %dl,%dl
+  6c:	75 f2                	jne    60 <strcpy+0x10>
+    ;
+  return os;
+}
+  6e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  71:	89 c8                	mov    %ecx,%eax
+  73:	c9                   	leave  
+  74:	c3                   	ret    
+  75:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000080 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 55 08             	mov    0x8(%ebp),%edx
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  8a:	0f b6 02             	movzbl (%edx),%eax
+  8d:	84 c0                	test   %al,%al
+  8f:	75 17                	jne    a8 <strcmp+0x28>
+  91:	eb 3a                	jmp    cd <strcmp+0x4d>
+  93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  97:	90                   	nop
+  98:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  9c:	83 c2 01             	add    $0x1,%edx
+  9f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  a2:	84 c0                	test   %al,%al
+  a4:	74 1a                	je     c0 <strcmp+0x40>
+    p++, q++;
+  a6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  a8:	0f b6 19             	movzbl (%ecx),%ebx
+  ab:	38 c3                	cmp    %al,%bl
+  ad:	74 e9                	je     98 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  af:	29 d8                	sub    %ebx,%eax
+}
+  b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  b4:	c9                   	leave  
+  b5:	c3                   	ret    
+  b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  c0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  c4:	31 c0                	xor    %eax,%eax
+  c6:	29 d8                	sub    %ebx,%eax
+}
+  c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  cb:	c9                   	leave  
+  cc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  cd:	0f b6 19             	movzbl (%ecx),%ebx
+  d0:	31 c0                	xor    %eax,%eax
+  d2:	eb db                	jmp    af <strcmp+0x2f>
+  d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  df:	90                   	nop
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 3a 00             	cmpb   $0x0,(%edx)
+  e9:	74 15                	je     100 <strlen+0x20>
+  eb:	31 c0                	xor    %eax,%eax
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c0 01             	add    $0x1,%eax
+  f3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  f7:	89 c1                	mov    %eax,%ecx
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	89 c8                	mov    %ecx,%eax
+  fd:	5d                   	pop    %ebp
+  fe:	c3                   	ret    
+  ff:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 100:	31 c9                	xor    %ecx,%ecx
+}
+ 102:	5d                   	pop    %ebp
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	c3                   	ret    
+ 106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 125:	89 d0                	mov    %edx,%eax
+ 127:	c9                   	leave  
+ 128:	c3                   	ret    
+ 129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	8b 45 08             	mov    0x8(%ebp),%eax
+ 136:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	75 12                	jne    153 <strchr+0x23>
+ 141:	eb 1d                	jmp    160 <strchr+0x30>
+ 143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 147:	90                   	nop
+ 148:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 14c:	83 c0 01             	add    $0x1,%eax
+ 14f:	84 d2                	test   %dl,%dl
+ 151:	74 0d                	je     160 <strchr+0x30>
+    if(*s == c)
+ 153:	38 d1                	cmp    %dl,%cl
+ 155:	75 f1                	jne    148 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 157:	5d                   	pop    %ebp
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 160:	31 c0                	xor    %eax,%eax
+}
+ 162:	5d                   	pop    %ebp
+ 163:	c3                   	ret    
+ 164:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 16f:	90                   	nop
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 175:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 178:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 179:	31 db                	xor    %ebx,%ebx
+{
+ 17b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 17e:	eb 27                	jmp    1a7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 180:	83 ec 04             	sub    $0x4,%esp
+ 183:	6a 01                	push   $0x1
+ 185:	57                   	push   %edi
+ 186:	6a 00                	push   $0x0
+ 188:	e8 2e 01 00 00       	call   2bb <read>
+    if(cc < 1)
+ 18d:	83 c4 10             	add    $0x10,%esp
+ 190:	85 c0                	test   %eax,%eax
+ 192:	7e 1d                	jle    1b1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 194:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 198:	8b 55 08             	mov    0x8(%ebp),%edx
+ 19b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 19f:	3c 0a                	cmp    $0xa,%al
+ 1a1:	74 1d                	je     1c0 <gets+0x50>
+ 1a3:	3c 0d                	cmp    $0xd,%al
+ 1a5:	74 19                	je     1c0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1a7:	89 de                	mov    %ebx,%esi
+ 1a9:	83 c3 01             	add    $0x1,%ebx
+ 1ac:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1af:	7c cf                	jl     180 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1bb:	5b                   	pop    %ebx
+ 1bc:	5e                   	pop    %esi
+ 1bd:	5f                   	pop    %edi
+ 1be:	5d                   	pop    %ebp
+ 1bf:	c3                   	ret    
+  buf[i] = '\0';
+ 1c0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c3:	89 de                	mov    %ebx,%esi
+ 1c5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cc:	5b                   	pop    %ebx
+ 1cd:	5e                   	pop    %esi
+ 1ce:	5f                   	pop    %edi
+ 1cf:	5d                   	pop    %ebp
+ 1d0:	c3                   	ret    
+ 1d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1df:	90                   	nop
+
+000001e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	56                   	push   %esi
+ 1e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	6a 00                	push   $0x0
+ 1ea:	ff 75 08             	push   0x8(%ebp)
+ 1ed:	e8 f1 00 00 00       	call   2e3 <open>
+  if(fd < 0)
+ 1f2:	83 c4 10             	add    $0x10,%esp
+ 1f5:	85 c0                	test   %eax,%eax
+ 1f7:	78 27                	js     220 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	ff 75 0c             	push   0xc(%ebp)
+ 1ff:	89 c3                	mov    %eax,%ebx
+ 201:	50                   	push   %eax
+ 202:	e8 f4 00 00 00       	call   2fb <fstat>
+  close(fd);
+ 207:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 20a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 20c:	e8 ba 00 00 00       	call   2cb <close>
+  return r;
+ 211:	83 c4 10             	add    $0x10,%esp
+}
+ 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 217:	89 f0                	mov    %esi,%eax
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 220:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 225:	eb ed                	jmp    214 <stat+0x34>
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
+
+00000230 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	53                   	push   %ebx
+ 234:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 237:	0f be 02             	movsbl (%edx),%eax
+ 23a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 23d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 240:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 245:	77 1e                	ja     265 <atoi+0x35>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 250:	83 c2 01             	add    $0x1,%edx
+ 253:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 256:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 25a:	0f be 02             	movsbl (%edx),%eax
+ 25d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 260:	80 fb 09             	cmp    $0x9,%bl
+ 263:	76 eb                	jbe    250 <atoi+0x20>
+  return n;
+}
+ 265:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 268:	89 c8                	mov    %ecx,%eax
+ 26a:	c9                   	leave  
+ 26b:	c3                   	ret    
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	57                   	push   %edi
+ 274:	8b 45 10             	mov    0x10(%ebp),%eax
+ 277:	8b 55 08             	mov    0x8(%ebp),%edx
+ 27a:	56                   	push   %esi
+ 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 27e:	85 c0                	test   %eax,%eax
+ 280:	7e 13                	jle    295 <memmove+0x25>
+ 282:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 284:	89 d7                	mov    %edx,%edi
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 290:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 291:	39 f8                	cmp    %edi,%eax
+ 293:	75 fb                	jne    290 <memmove+0x20>
+  return vdst;
+}
+ 295:	5e                   	pop    %esi
+ 296:	89 d0                	mov    %edx,%eax
+ 298:	5f                   	pop    %edi
+ 299:	5d                   	pop    %ebp
+ 29a:	c3                   	ret    
+
+0000029b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 29b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <exit>:
+SYSCALL(exit)
+ 2a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <wait>:
+SYSCALL(wait)
+ 2ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <pipe>:
+SYSCALL(pipe)
+ 2b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <read>:
+SYSCALL(read)
+ 2bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <write>:
+SYSCALL(write)
+ 2c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <close>:
+SYSCALL(close)
+ 2cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <kill>:
+SYSCALL(kill)
+ 2d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <exec>:
+SYSCALL(exec)
+ 2db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <open>:
+SYSCALL(open)
+ 2e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <mknod>:
+SYSCALL(mknod)
+ 2eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <unlink>:
+SYSCALL(unlink)
+ 2f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <fstat>:
+SYSCALL(fstat)
+ 2fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <link>:
+SYSCALL(link)
+ 303:	b8 13 00 00 00       	mov    $0x13,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mkdir>:
+SYSCALL(mkdir)
+ 30b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <chdir>:
+SYSCALL(chdir)
+ 313:	b8 09 00 00 00       	mov    $0x9,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <dup>:
+SYSCALL(dup)
+ 31b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <getpid>:
+SYSCALL(getpid)
+ 323:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <sbrk>:
+SYSCALL(sbrk)
+ 32b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <sleep>:
+SYSCALL(sleep)
+ 333:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <uptime>:
+SYSCALL(uptime)
+ 33b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <thread_create>:
+SYSCALL(thread_create)
+ 343:	b8 16 00 00 00       	mov    $0x16,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <thread_join>:
+SYSCALL(thread_join)
+ 34b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <thread_exit>:
+SYSCALL(thread_exit)
+ 353:	b8 17 00 00 00       	mov    $0x17,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <draw>:
+SYSCALL(draw)
+ 35b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getNumProc>:
+SYSCALL(getNumProc)
+ 363:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 36b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 373:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 37b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 383:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 38b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 393:	b8 20 00 00 00       	mov    $0x20,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 7c 0a 00 00 	movzbl 0xa7c(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+    putc(fd, buf[i]);
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 9e fe ff ff       	call   2c3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 45c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 45f:	0f b6 13             	movzbl (%ebx),%edx
+ 462:	84 d2                	test   %dl,%dl
+ 464:	74 6a                	je     4d0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	8d 45 10             	lea    0x10(%ebp),%eax
+ 469:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 46f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 474:	eb 36                	jmp    4ac <printf+0x5c>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 15                	je     4a2 <printf+0x52>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	56                   	push   %esi
+ 497:	e8 27 fe ff ff       	call   2c3 <write>
+ 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 49f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a2:	0f b6 13             	movzbl (%ebx),%edx
+ 4a5:	83 c3 01             	add    $0x1,%ebx
+ 4a8:	84 d2                	test   %dl,%dl
+ 4aa:	74 24                	je     4d0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4ac:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4af:	85 c9                	test   %ecx,%ecx
+ 4b1:	74 cd                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b3:	83 f9 25             	cmp    $0x25,%ecx
+ 4b6:	75 ea                	jne    4a2 <printf+0x52>
+      if(c == 'd'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
+ 4c1:	83 e8 63             	sub    $0x63,%eax
+ 4c4:	83 f8 15             	cmp    $0x15,%eax
+ 4c7:	77 17                	ja     4e0 <printf+0x90>
+ 4c9:	ff 24 85 24 0a 00 00 	jmp    *0xa24(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d3:	5b                   	pop    %ebx
+ 4d4:	5e                   	pop    %esi
+ 4d5:	5f                   	pop    %edi
+ 4d6:	5d                   	pop    %ebp
+ 4d7:	c3                   	ret    
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+  write(fd, &c, 1);
+ 4e0:	83 ec 04             	sub    $0x4,%esp
+ 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4e6:	6a 01                	push   $0x1
+ 4e8:	57                   	push   %edi
+ 4e9:	56                   	push   %esi
+ 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ee:	e8 d0 fd ff ff       	call   2c3 <write>
+        putc(fd, c);
+ 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4f7:	83 c4 0c             	add    $0xc,%esp
+ 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4fd:	6a 01                	push   $0x1
+ 4ff:	57                   	push   %edi
+ 500:	56                   	push   %esi
+ 501:	e8 bd fd ff ff       	call   2c3 <write>
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 509:	31 c9                	xor    %ecx,%ecx
+ 50b:	eb 95                	jmp    4a2 <printf+0x52>
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51d:	8b 10                	mov    (%eax),%edx
+ 51f:	89 f0                	mov    %esi,%eax
+ 521:	e8 7a fe ff ff       	call   3a0 <printint>
+        ap++;
+ 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 52a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52d:	31 c9                	xor    %ecx,%ecx
+ 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 543:	85 d2                	test   %edx,%edx
+ 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
+        while(*s != 0){
+ 54b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 54e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 550:	84 c0                	test   %al,%al
+ 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
+ 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 55b:	89 d3                	mov    %edx,%ebx
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 560:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 563:	83 c3 01             	add    $0x1,%ebx
+ 566:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 569:	6a 01                	push   $0x1
+ 56b:	57                   	push   %edi
+ 56c:	56                   	push   %esi
+ 56d:	e8 51 fd ff ff       	call   2c3 <write>
+        while(*s != 0){
+ 572:	0f b6 03             	movzbl (%ebx),%eax
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	84 c0                	test   %al,%al
+ 57a:	75 e4                	jne    560 <printf+0x110>
+      state = 0;
+ 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 57f:	31 c9                	xor    %ecx,%ecx
+ 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
+ 59f:	90                   	nop
+        putc(fd, *ap);
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5a6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	57                   	push   %edi
+ 5ab:	56                   	push   %esi
+        putc(fd, *ap);
+ 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5af:	e8 0f fd ff ff       	call   2c3 <write>
+        ap++;
+ 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5b8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5bb:	31 c9                	xor    %ecx,%ecx
+ 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5cb:	83 ec 04             	sub    $0x4,%esp
+ 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
+ 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d7:	90                   	nop
+          s = "(null)";
+ 5d8:	ba 1c 0a 00 00       	mov    $0xa1c,%edx
+        while(*s != 0){
+ 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e5:	89 d3                	mov    %edx,%ebx
+ 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 c0 0d 00 00       	mov    0xdc0,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 608:	89 c2                	mov    %eax,%edx
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	73 30                	jae    640 <free+0x50>
+ 610:	39 c1                	cmp    %eax,%ecx
+ 612:	72 04                	jb     618 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 c2                	cmp    %eax,%edx
+ 616:	72 f0                	jb     608 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	74 30                	je     652 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 625:	8b 42 04             	mov    0x4(%edx),%eax
+ 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 3a                	je     669 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 62f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 631:	5b                   	pop    %ebx
+  freep = p;
+ 632:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
+}
+ 638:	5e                   	pop    %esi
+ 639:	5f                   	pop    %edi
+ 63a:	5d                   	pop    %ebp
+ 63b:	c3                   	ret    
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 c2                	cmp    %eax,%edx
+ 642:	72 c4                	jb     608 <free+0x18>
+ 644:	39 c1                	cmp    %eax,%ecx
+ 646:	73 c0                	jae    608 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	75 d0                	jne    622 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 652:	03 70 04             	add    0x4(%eax),%esi
+ 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 658:	8b 02                	mov    (%edx),%eax
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65f:	8b 42 04             	mov    0x4(%edx),%eax
+ 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 665:	39 f1                	cmp    %esi,%ecx
+ 667:	75 c6                	jne    62f <free+0x3f>
+    p->s.size += bp->s.size;
+ 669:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 66c:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
+    p->s.size += bp->s.size;
+ 672:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 678:	89 0a                	mov    %ecx,(%edx)
+}
+ 67a:	5b                   	pop    %ebx
+ 67b:	5e                   	pop    %esi
+ 67c:	5f                   	pop    %edi
+ 67d:	5d                   	pop    %ebp
+ 67e:	c3                   	ret    
+ 67f:	90                   	nop
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 3d c0 0d 00 00    	mov    0xdc0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 6a                	jae    716 <malloc+0x96>
+ 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b1:	39 de                	cmp    %ebx,%esi
+ 6b3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f1                	cmp    %esi,%ecx
+ 6cf:	73 4f                	jae    720 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	8b 3d c0 0d 00 00    	mov    0xdc0,%edi
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	39 d7                	cmp    %edx,%edi
+ 6db:	75 eb                	jne    6c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6dd:	83 ec 0c             	sub    $0xc,%esp
+ 6e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6e3:	e8 43 fc ff ff       	call   32b <sbrk>
+  if(p == (char*)-1)
+ 6e8:	83 c4 10             	add    $0x10,%esp
+ 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ee:	74 1c                	je     70c <malloc+0x8c>
+  hp->s.size = nu;
+ 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6f3:	83 ec 0c             	sub    $0xc,%esp
+ 6f6:	83 c0 08             	add    $0x8,%eax
+ 6f9:	50                   	push   %eax
+ 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
+  return freep;
+ 6ff:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
+      if((p = morecore(nunits)) == 0)
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 bc                	jne    6c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 70f:	31 c0                	xor    %eax,%eax
+}
+ 711:	5b                   	pop    %ebx
+ 712:	5e                   	pop    %esi
+ 713:	5f                   	pop    %edi
+ 714:	5d                   	pop    %ebp
+ 715:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 716:	89 d0                	mov    %edx,%eax
+ 718:	89 fa                	mov    %edi,%edx
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 720:	39 ce                	cmp    %ecx,%esi
+ 722:	74 4c                	je     770 <malloc+0xf0>
+        p->s.size -= nunits;
+ 724:	29 f1                	sub    %esi,%ecx
+ 726:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 72c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 72f:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
+}
+ 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 738:	83 c0 08             	add    $0x8,%eax
+}
+ 73b:	5b                   	pop    %ebx
+ 73c:	5e                   	pop    %esi
+ 73d:	5f                   	pop    %edi
+ 73e:	5d                   	pop    %ebp
+ 73f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 c0 0d 00 00 c4 	movl   $0xdc4,0xdc0
+ 747:	0d 00 00 
+    base.s.size = 0;
+ 74a:	bf c4 0d 00 00       	mov    $0xdc4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 74f:	c7 05 c4 0d 00 00 c4 	movl   $0xdc4,0xdc4
+ 756:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 759:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 75b:	c7 05 c8 0d 00 00 00 	movl   $0x0,0xdc8
+ 762:	00 00 00 
+    if(p->s.size >= nunits){
+ 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b9                	jmp    72f <malloc+0xaf>
+ 776:	66 90                	xchg   %ax,%ax
+ 778:	66 90                	xchg   %ax,%ax
+ 77a:	66 90                	xchg   %ax,%ax
+ 77c:	66 90                	xchg   %ax,%ax
+ 77e:	66 90                	xchg   %ax,%ax
+
+00000780 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 780:	55                   	push   %ebp
+ 781:	b8 e4 0d 00 00       	mov    $0xde4,%eax
+ 786:	89 e5                	mov    %esp,%ebp
+ 788:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 78b:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+    for (mti=1; mti<N; mti++)
+ 791:	eb 08                	jmp    79b <sgenrand+0x1b>
+ 793:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 797:	90                   	nop
+ 798:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 79b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7a1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7a3:	3d 9c 17 00 00       	cmp    $0x179c,%eax
+ 7a8:	75 ee                	jne    798 <sgenrand+0x18>
+ 7aa:	c7 05 b4 0d 00 00 70 	movl   $0x270,0xdb4
+ 7b1:	02 00 00 
+}
+ 7b4:	5d                   	pop    %ebp
+ 7b5:	c3                   	ret    
+ 7b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007c0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7c0:	a1 b4 0d 00 00       	mov    0xdb4,%eax
+ 7c5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7ca:	7f 3d                	jg     809 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7cc:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 7d3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7d6:	89 15 b4 0d 00 00    	mov    %edx,0xdb4
+    y ^= TEMPERING_SHIFT_U(y);
+ 7dc:	89 ca                	mov    %ecx,%edx
+ 7de:	c1 ea 0b             	shr    $0xb,%edx
+ 7e1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7e3:	89 d0                	mov    %edx,%eax
+ 7e5:	c1 e0 07             	shl    $0x7,%eax
+ 7e8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7ed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7ef:	89 c2                	mov    %eax,%edx
+ 7f1:	c1 e2 0f             	shl    $0xf,%edx
+ 7f4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 7fa:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 7fc:	89 d0                	mov    %edx,%eax
+ 7fe:	c1 e8 12             	shr    $0x12,%eax
+ 801:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 803:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 808:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 809:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 80e:	0f 84 d4 00 00 00    	je     8e8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 814:	31 c0                	xor    %eax,%eax
+ 816:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 820:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 827:	83 c0 01             	add    $0x1,%eax
+ 82a:	8b 14 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%edx
+ 831:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 837:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 83d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 83f:	89 d1                	mov    %edx,%ecx
+ 841:	83 e2 01             	and    $0x1,%edx
+ 844:	d1 e9                	shr    %ecx
+ 846:	33 0c 85 10 14 00 00 	xor    0x1410(,%eax,4),%ecx
+ 84d:	33 0c 95 90 0a 00 00 	xor    0xa90(,%edx,4),%ecx
+ 854:	89 0c 85 dc 0d 00 00 	mov    %ecx,0xddc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 85b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 860:	75 be                	jne    820 <genrand+0x60>
+ 862:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 868:	8b 0c 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%ecx
+ 86f:	83 c0 01             	add    $0x1,%eax
+ 872:	8b 14 85 e0 0d 00 00 	mov    0xde0(,%eax,4),%edx
+ 879:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 87f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 885:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 887:	89 d1                	mov    %edx,%ecx
+ 889:	83 e2 01             	and    $0x1,%edx
+ 88c:	d1 e9                	shr    %ecx
+ 88e:	33 0c 85 50 0a 00 00 	xor    0xa50(,%eax,4),%ecx
+ 895:	33 0c 95 90 0a 00 00 	xor    0xa90(,%edx,4),%ecx
+ 89c:	89 0c 85 dc 0d 00 00 	mov    %ecx,0xddc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8a3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8a8:	75 be                	jne    868 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8aa:	8b 0d e0 0d 00 00    	mov    0xde0,%ecx
+ 8b0:	a1 9c 17 00 00       	mov    0x179c,%eax
+ 8b5:	89 ca                	mov    %ecx,%edx
+ 8b7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 8bc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8c2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8c4:	89 c2                	mov    %eax,%edx
+ 8c6:	83 e0 01             	and    $0x1,%eax
+ 8c9:	d1 ea                	shr    %edx
+ 8cb:	33 15 10 14 00 00    	xor    0x1410,%edx
+ 8d1:	33 14 85 90 0a 00 00 	xor    0xa90(,%eax,4),%edx
+ 8d8:	89 15 9c 17 00 00    	mov    %edx,0x179c
+ 8de:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8e3:	e9 ee fe ff ff       	jmp    7d6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8e8:	b8 e4 0d 00 00       	mov    $0xde4,%eax
+ 8ed:	b9 9c 17 00 00       	mov    $0x179c,%ecx
+ 8f2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 8f7:	c7 05 e0 0d 00 00 05 	movl   $0x1105,0xde0
+ 8fe:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 901:	eb 08                	jmp    90b <genrand+0x14b>
+ 903:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 907:	90                   	nop
+ 908:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 90b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 911:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 913:	39 c1                	cmp    %eax,%ecx
+ 915:	75 f1                	jne    908 <genrand+0x148>
+ 917:	e9 f8 fe ff ff       	jmp    814 <genrand+0x54>
+ 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 920:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 921:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 923:	89 e5                	mov    %esp,%ebp
+ 925:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 926:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 929:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 92a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 92f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 932:	89 d8                	mov    %ebx,%eax
+ 934:	f7 f1                	div    %ecx
+ 936:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 938:	29 d3                	sub    %edx,%ebx
+ 93a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 940:	e8 7b fe ff ff       	call   7c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 945:	39 d8                	cmp    %ebx,%eax
+ 947:	73 f7                	jae    940 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 949:	31 d2                	xor    %edx,%edx
+}
+ 94b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 94c:	f7 f6                	div    %esi
+}
+ 94e:	5e                   	pop    %esi
+ 94f:	5d                   	pop    %ebp
+ 950:	c3                   	ret    
+ 951:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 95f:	90                   	nop
+
+00000960 <randomrange>:
+
+int randomrange(int low, int high){
+ 960:	55                   	push   %ebp
+ 961:	89 e5                	mov    %esp,%ebp
+ 963:	57                   	push   %edi
+ 964:	56                   	push   %esi
+ 965:	53                   	push   %ebx
+ 966:	83 ec 0c             	sub    $0xc,%esp
+ 969:	8b 75 08             	mov    0x8(%ebp),%esi
+ 96c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 96f:	39 f0                	cmp    %esi,%eax
+ 971:	7d 06                	jge    979 <randomrange+0x19>
+ 973:	89 f2                	mov    %esi,%edx
+ 975:	89 c6                	mov    %eax,%esi
+ 977:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 979:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 97b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 980:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 982:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 985:	89 d8                	mov    %ebx,%eax
+ 987:	f7 f1                	div    %ecx
+ 989:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 98b:	29 d3                	sub    %edx,%ebx
+ 98d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 990:	e8 2b fe ff ff       	call   7c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 995:	39 d8                	cmp    %ebx,%eax
+ 997:	73 f7                	jae    990 <randomrange+0x30>
+  return x/bin_size;
+ 999:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 99b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 99e:	f7 f7                	div    %edi
+}
+ 9a0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9a1:	01 f0                	add    %esi,%eax
+}
+ 9a3:	5e                   	pop    %esi
+ 9a4:	5f                   	pop    %edi
+ 9a5:	5d                   	pop    %ebp
+ 9a6:	c3                   	ret    
diff -ruN xv6-public/test_BurstTime.c xv6-public-with-hybrid/test_BurstTime.c
--- xv6-public/test_BurstTime.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_BurstTime.c	2022-10-06 12:47:14.278648000 +0530
@@ -0,0 +1,12 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+
+int main(void)
+{
+	printf(1,"This is a sample process to test set_burst_time and get_burst_time system calls.\n");
+	set_burst_time(3);
+	printf(1,"Burst time has been set to %d\n.", get_burst_time());
+	exit();
+}
diff -ruN xv6-public/test_BurstTime.d xv6-public-with-hybrid/test_BurstTime.d
--- xv6-public/test_BurstTime.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_BurstTime.d	2022-10-07 18:50:03.268945065 +0530
@@ -0,0 +1,2 @@
+test_BurstTime.o: test_BurstTime.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/test_BurstTime.o and xv6-public-with-hybrid/test_BurstTime.o differ
diff -ruN xv6-public/test_BurstTime.sym xv6-public-with-hybrid/test_BurstTime.sym
--- xv6-public/test_BurstTime.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_BurstTime.sym	2022-10-07 18:50:03.368944769 +0530
@@ -0,0 +1,64 @@
+00000000 test_BurstTime.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+00000a7c digits.0
+00000000 umalloc.c
+00000dc0 freep
+00000dc4 base
+00000000 random.c
+00000de0 mt
+00000db4 mti
+00000a90 mag01.0
+00000050 strcpy
+00000780 sgenrand
+00000450 printf
+00000353 thread_exit
+00000270 memmove
+000002eb mknod
+00000170 gets
+00000323 getpid
+00000680 malloc
+00000333 sleep
+00000383 get_burst_time
+00000920 random_at_most
+0000038b getCurrentInfo
+000002b3 pipe
+000002c3 write
+000002fb fstat
+000002d3 kill
+00000313 chdir
+000002db exec
+000002ab wait
+000002bb read
+000002f3 unlink
+0000029b fork
+0000032b sbrk
+0000033b uptime
+00000db8 __bss_start
+00000110 memset
+00000000 main
+0000037b set_burst_time
+00000080 strcmp
+0000031b dup
+0000036b getMaxPid
+000007c0 genrand
+00000363 getNumProc
+00000373 getProcInfo
+000001e0 stat
+00000db8 _edata
+000017a0 _end
+00000303 link
+000002a3 exit
+00000230 atoi
+0000035b draw
+000000e0 strlen
+000002e3 open
+00000130 strchr
+00000343 thread_create
+00000393 getCurrentPID
+00000960 randomrange
+0000030b mkdir
+000002cb close
+0000034b thread_join
+000005f0 free
Binary files xv6-public/_testMaxPid and xv6-public-with-hybrid/_testMaxPid differ
diff -ruN xv6-public/testMaxPid.asm xv6-public-with-hybrid/testMaxPid.asm
--- xv6-public/testMaxPid.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testMaxPid.asm	2022-10-07 18:50:02.964945964 +0530
@@ -0,0 +1,1460 @@
+
+_testMaxPid:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "user.h"
+#include "stat.h"
+
+int main(void){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+    printf(1,"Maximum pid of processes running in the system = %d\n",getMaxPid());
+  11:	e8 35 03 00 00       	call   34b <getMaxPid>
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 88 09 00 00       	push   $0x988
+  1f:	6a 01                	push   $0x1
+  21:	e8 0a 04 00 00       	call   430 <printf>
+    exit();
+  26:	e8 58 02 00 00       	call   283 <exit>
+  2b:	66 90                	xchg   %ax,%ax
+  2d:	66 90                	xchg   %ax,%ax
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  31:	31 c0                	xor    %eax,%eax
+{
+  33:	89 e5                	mov    %esp,%ebp
+  35:	53                   	push   %ebx
+  36:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  51:	89 c8                	mov    %ecx,%eax
+  53:	c9                   	leave  
+  54:	c3                   	ret    
+  55:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	84 c0                	test   %al,%al
+  6f:	75 17                	jne    88 <strcmp+0x28>
+  71:	eb 3a                	jmp    ad <strcmp+0x4d>
+  73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  77:	90                   	nop
+  78:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  7c:	83 c2 01             	add    $0x1,%edx
+  7f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  82:	84 c0                	test   %al,%al
+  84:	74 1a                	je     a0 <strcmp+0x40>
+    p++, q++;
+  86:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  88:	0f b6 19             	movzbl (%ecx),%ebx
+  8b:	38 c3                	cmp    %al,%bl
+  8d:	74 e9                	je     78 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  8f:	29 d8                	sub    %ebx,%eax
+}
+  91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  94:	c9                   	leave  
+  95:	c3                   	ret    
+  96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  a4:	31 c0                	xor    %eax,%eax
+  a6:	29 d8                	sub    %ebx,%eax
+}
+  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  ab:	c9                   	leave  
+  ac:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	31 c0                	xor    %eax,%eax
+  b2:	eb db                	jmp    8f <strcmp+0x2f>
+  b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bf:	90                   	nop
+
+000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	80 3a 00             	cmpb   $0x0,(%edx)
+  c9:	74 15                	je     e0 <strlen+0x20>
+  cb:	31 c0                	xor    %eax,%eax
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  d7:	89 c1                	mov    %eax,%ecx
+  d9:	75 f5                	jne    d0 <strlen+0x10>
+    ;
+  return n;
+}
+  db:	89 c8                	mov    %ecx,%eax
+  dd:	5d                   	pop    %ebp
+  de:	c3                   	ret    
+  df:	90                   	nop
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	57                   	push   %edi
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fd:	89 d7                	mov    %edx,%edi
+  ff:	fc                   	cld    
+ 100:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 102:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 105:	89 d0                	mov    %edx,%eax
+ 107:	c9                   	leave  
+ 108:	c3                   	ret    
+ 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 45 08             	mov    0x8(%ebp),%eax
+ 116:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11a:	0f b6 10             	movzbl (%eax),%edx
+ 11d:	84 d2                	test   %dl,%dl
+ 11f:	75 12                	jne    133 <strchr+0x23>
+ 121:	eb 1d                	jmp    140 <strchr+0x30>
+ 123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 127:	90                   	nop
+ 128:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 12c:	83 c0 01             	add    $0x1,%eax
+ 12f:	84 d2                	test   %dl,%dl
+ 131:	74 0d                	je     140 <strchr+0x30>
+    if(*s == c)
+ 133:	38 d1                	cmp    %dl,%cl
+ 135:	75 f1                	jne    128 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 137:	5d                   	pop    %ebp
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 140:	31 c0                	xor    %eax,%eax
+}
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	57                   	push   %edi
+ 154:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 155:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 158:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 159:	31 db                	xor    %ebx,%ebx
+{
+ 15b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 15e:	eb 27                	jmp    187 <gets+0x37>
+    cc = read(0, &c, 1);
+ 160:	83 ec 04             	sub    $0x4,%esp
+ 163:	6a 01                	push   $0x1
+ 165:	57                   	push   %edi
+ 166:	6a 00                	push   $0x0
+ 168:	e8 2e 01 00 00       	call   29b <read>
+    if(cc < 1)
+ 16d:	83 c4 10             	add    $0x10,%esp
+ 170:	85 c0                	test   %eax,%eax
+ 172:	7e 1d                	jle    191 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 174:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 178:	8b 55 08             	mov    0x8(%ebp),%edx
+ 17b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 17f:	3c 0a                	cmp    $0xa,%al
+ 181:	74 1d                	je     1a0 <gets+0x50>
+ 183:	3c 0d                	cmp    $0xd,%al
+ 185:	74 19                	je     1a0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 187:	89 de                	mov    %ebx,%esi
+ 189:	83 c3 01             	add    $0x1,%ebx
+ 18c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 18f:	7c cf                	jl     160 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 191:	8b 45 08             	mov    0x8(%ebp),%eax
+ 194:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 198:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19b:	5b                   	pop    %ebx
+ 19c:	5e                   	pop    %esi
+ 19d:	5f                   	pop    %edi
+ 19e:	5d                   	pop    %ebp
+ 19f:	c3                   	ret    
+  buf[i] = '\0';
+ 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a3:	89 de                	mov    %ebx,%esi
+ 1a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ac:	5b                   	pop    %ebx
+ 1ad:	5e                   	pop    %esi
+ 1ae:	5f                   	pop    %edi
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	push   0x8(%ebp)
+ 1cd:	e8 f1 00 00 00       	call   2c3 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	push   0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f4 00 00 00       	call   2db <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 ba 00 00 00       	call   2ab <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 02             	movsbl (%edx),%eax
+ 21a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 21d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 220:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 225:	77 1e                	ja     245 <atoi+0x35>
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 230:	83 c2 01             	add    $0x1,%edx
+ 233:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 236:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 02             	movsbl (%edx),%eax
+ 23d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 248:	89 c8                	mov    %ecx,%eax
+ 24a:	c9                   	leave  
+ 24b:	c3                   	ret    
+ 24c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	8b 45 10             	mov    0x10(%ebp),%eax
+ 257:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25a:	56                   	push   %esi
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 c0                	test   %eax,%eax
+ 260:	7e 13                	jle    275 <memmove+0x25>
+ 262:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 264:	89 d7                	mov    %edx,%edi
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 270:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 271:	39 f8                	cmp    %edi,%eax
+ 273:	75 fb                	jne    270 <memmove+0x20>
+  return vdst;
+}
+ 275:	5e                   	pop    %esi
+ 276:	89 d0                	mov    %edx,%eax
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+
+0000027b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 280:	cd 40                	int    $0x40
+ 282:	c3                   	ret    
+
+00000283 <exit>:
+SYSCALL(exit)
+ 283:	b8 02 00 00 00       	mov    $0x2,%eax
+ 288:	cd 40                	int    $0x40
+ 28a:	c3                   	ret    
+
+0000028b <wait>:
+SYSCALL(wait)
+ 28b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <pipe>:
+SYSCALL(pipe)
+ 293:	b8 04 00 00 00       	mov    $0x4,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <read>:
+SYSCALL(read)
+ 29b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <write>:
+SYSCALL(write)
+ 2a3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <close>:
+SYSCALL(close)
+ 2ab:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <kill>:
+SYSCALL(kill)
+ 2b3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <exec>:
+SYSCALL(exec)
+ 2bb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <open>:
+SYSCALL(open)
+ 2c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <mknod>:
+SYSCALL(mknod)
+ 2cb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <unlink>:
+SYSCALL(unlink)
+ 2d3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <fstat>:
+SYSCALL(fstat)
+ 2db:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <link>:
+SYSCALL(link)
+ 2e3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <mkdir>:
+SYSCALL(mkdir)
+ 2eb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <chdir>:
+SYSCALL(chdir)
+ 2f3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <dup>:
+SYSCALL(dup)
+ 2fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <getpid>:
+SYSCALL(getpid)
+ 303:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <sbrk>:
+SYSCALL(sbrk)
+ 30b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <sleep>:
+SYSCALL(sleep)
+ 313:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <uptime>:
+SYSCALL(uptime)
+ 31b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <thread_create>:
+SYSCALL(thread_create)
+ 323:	b8 16 00 00 00       	mov    $0x16,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <thread_join>:
+SYSCALL(thread_join)
+ 32b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <thread_exit>:
+SYSCALL(thread_exit)
+ 333:	b8 17 00 00 00       	mov    $0x17,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <draw>:
+SYSCALL(draw)
+ 33b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getNumProc>:
+SYSCALL(getNumProc)
+ 343:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 34b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 353:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 35b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 363:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 36b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 373:	b8 20 00 00 00       	mov    $0x20,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 1c 0a 00 00 	movzbl 0xa1c(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+    putc(fd, buf[i]);
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 9e fe ff ff       	call   2a3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 44f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 27 fe ff ff       	call   2a3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 47f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 48c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
+      if(c == 'd'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 c4 09 00 00 	jmp    *0x9c4(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 d0 fd ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 bd fd ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
+        ap++;
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+        while(*s != 0){
+ 52b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 52e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 540:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 51 fd ff ff       	call   2a3 <write>
+        while(*s != 0){
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
+      state = 0;
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
+        putc(fd, *ap);
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
+        putc(fd, *ap);
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58f:	e8 0f fd ff ff       	call   2a3 <write>
+        ap++;
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
+          s = "(null)";
+ 5b8:	ba bd 09 00 00       	mov    $0x9bd,%edx
+        while(*s != 0){
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 60 0d 00 00       	mov    0xd60,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 60f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	89 15 60 0d 00 00    	mov    %edx,0xd60
+}
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
+    p->s.size += bp->s.size;
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 64c:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    p->s.size += bp->s.size;
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
+}
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 683:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 43 fc ff ff       	call   30b <sbrk>
+  if(p == (char*)-1)
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
+  hp->s.size = nu;
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6df:	8b 15 60 0d 00 00    	mov    0xd60,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ef:	31 c0                	xor    %eax,%eax
+}
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 70f:	89 15 60 0d 00 00    	mov    %edx,0xd60
+}
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 718:	83 c0 08             	add    $0x8,%eax
+}
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 60 0d 00 00 64 	movl   $0xd64,0xd60
+ 727:	0d 00 00 
+    base.s.size = 0;
+ 72a:	bf 64 0d 00 00       	mov    $0xd64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 64 0d 00 00 64 	movl   $0xd64,0xd64
+ 736:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 68 0d 00 00 00 	movl   $0x0,0xd68
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 756:	66 90                	xchg   %ax,%ax
+ 758:	66 90                	xchg   %ax,%ax
+ 75a:	66 90                	xchg   %ax,%ax
+ 75c:	66 90                	xchg   %ax,%ax
+ 75e:	66 90                	xchg   %ax,%ax
+
+00000760 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 760:	55                   	push   %ebp
+ 761:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 766:	89 e5                	mov    %esp,%ebp
+ 768:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 76b:	89 15 80 0d 00 00    	mov    %edx,0xd80
+    for (mti=1; mti<N; mti++)
+ 771:	eb 08                	jmp    77b <sgenrand+0x1b>
+ 773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 777:	90                   	nop
+ 778:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 77b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 781:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 783:	3d 3c 17 00 00       	cmp    $0x173c,%eax
+ 788:	75 ee                	jne    778 <sgenrand+0x18>
+ 78a:	c7 05 54 0d 00 00 70 	movl   $0x270,0xd54
+ 791:	02 00 00 
+}
+ 794:	5d                   	pop    %ebp
+ 795:	c3                   	ret    
+ 796:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79d:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007a0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7a0:	a1 54 0d 00 00       	mov    0xd54,%eax
+ 7a5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7aa:	7f 3d                	jg     7e9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ac:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 7b3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7b6:	89 15 54 0d 00 00    	mov    %edx,0xd54
+    y ^= TEMPERING_SHIFT_U(y);
+ 7bc:	89 ca                	mov    %ecx,%edx
+ 7be:	c1 ea 0b             	shr    $0xb,%edx
+ 7c1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7c3:	89 d0                	mov    %edx,%eax
+ 7c5:	c1 e0 07             	shl    $0x7,%eax
+ 7c8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7cd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7cf:	89 c2                	mov    %eax,%edx
+ 7d1:	c1 e2 0f             	shl    $0xf,%edx
+ 7d4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 7da:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 7dc:	89 d0                	mov    %edx,%eax
+ 7de:	c1 e8 12             	shr    $0x12,%eax
+ 7e1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 7e3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 7e8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 7e9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 7ee:	0f 84 d4 00 00 00    	je     8c8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 7f4:	31 c0                	xor    %eax,%eax
+ 7f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 800:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 807:	83 c0 01             	add    $0x1,%eax
+ 80a:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 811:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 817:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 81d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 81f:	89 d1                	mov    %edx,%ecx
+ 821:	83 e2 01             	and    $0x1,%edx
+ 824:	d1 e9                	shr    %ecx
+ 826:	33 0c 85 b0 13 00 00 	xor    0x13b0(,%eax,4),%ecx
+ 82d:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 834:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 83b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 840:	75 be                	jne    800 <genrand+0x60>
+ 842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 848:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 84f:	83 c0 01             	add    $0x1,%eax
+ 852:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 859:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 85f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 865:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 867:	89 d1                	mov    %edx,%ecx
+ 869:	83 e2 01             	and    $0x1,%edx
+ 86c:	d1 e9                	shr    %ecx
+ 86e:	33 0c 85 f0 09 00 00 	xor    0x9f0(,%eax,4),%ecx
+ 875:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 87c:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 883:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 888:	75 be                	jne    848 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 88a:	8b 0d 80 0d 00 00    	mov    0xd80,%ecx
+ 890:	a1 3c 17 00 00       	mov    0x173c,%eax
+ 895:	89 ca                	mov    %ecx,%edx
+ 897:	25 00 00 00 80       	and    $0x80000000,%eax
+ 89c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8a2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8a4:	89 c2                	mov    %eax,%edx
+ 8a6:	83 e0 01             	and    $0x1,%eax
+ 8a9:	d1 ea                	shr    %edx
+ 8ab:	33 15 b0 13 00 00    	xor    0x13b0,%edx
+ 8b1:	33 14 85 30 0a 00 00 	xor    0xa30(,%eax,4),%edx
+ 8b8:	89 15 3c 17 00 00    	mov    %edx,0x173c
+ 8be:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8c3:	e9 ee fe ff ff       	jmp    7b6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8c8:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 8cd:	b9 3c 17 00 00       	mov    $0x173c,%ecx
+ 8d2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 8d7:	c7 05 80 0d 00 00 05 	movl   $0x1105,0xd80
+ 8de:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 8e1:	eb 08                	jmp    8eb <genrand+0x14b>
+ 8e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8e7:	90                   	nop
+ 8e8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8eb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8f1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8f3:	39 c1                	cmp    %eax,%ecx
+ 8f5:	75 f1                	jne    8e8 <genrand+0x148>
+ 8f7:	e9 f8 fe ff ff       	jmp    7f4 <genrand+0x54>
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000900 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 900:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 901:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 903:	89 e5                	mov    %esp,%ebp
+ 905:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 906:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 909:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 90a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 90f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 912:	89 d8                	mov    %ebx,%eax
+ 914:	f7 f1                	div    %ecx
+ 916:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 918:	29 d3                	sub    %edx,%ebx
+ 91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 920:	e8 7b fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 925:	39 d8                	cmp    %ebx,%eax
+ 927:	73 f7                	jae    920 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 929:	31 d2                	xor    %edx,%edx
+}
+ 92b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 92c:	f7 f6                	div    %esi
+}
+ 92e:	5e                   	pop    %esi
+ 92f:	5d                   	pop    %ebp
+ 930:	c3                   	ret    
+ 931:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 938:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+
+00000940 <randomrange>:
+
+int randomrange(int low, int high){
+ 940:	55                   	push   %ebp
+ 941:	89 e5                	mov    %esp,%ebp
+ 943:	57                   	push   %edi
+ 944:	56                   	push   %esi
+ 945:	53                   	push   %ebx
+ 946:	83 ec 0c             	sub    $0xc,%esp
+ 949:	8b 75 08             	mov    0x8(%ebp),%esi
+ 94c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 94f:	39 f0                	cmp    %esi,%eax
+ 951:	7d 06                	jge    959 <randomrange+0x19>
+ 953:	89 f2                	mov    %esi,%edx
+ 955:	89 c6                	mov    %eax,%esi
+ 957:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 959:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 95b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 960:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 962:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 965:	89 d8                	mov    %ebx,%eax
+ 967:	f7 f1                	div    %ecx
+ 969:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 96b:	29 d3                	sub    %edx,%ebx
+ 96d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 970:	e8 2b fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <randomrange+0x30>
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 97b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 97e:	f7 f7                	div    %edi
+}
+ 980:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 981:	01 f0                	add    %esi,%eax
+}
+ 983:	5e                   	pop    %esi
+ 984:	5f                   	pop    %edi
+ 985:	5d                   	pop    %ebp
+ 986:	c3                   	ret    
diff -ruN xv6-public/testMaxPid.c xv6-public-with-hybrid/testMaxPid.c
--- xv6-public/testMaxPid.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testMaxPid.c	2022-09-26 11:08:12.000000000 +0530
@@ -0,0 +1,8 @@
+#include "types.h"
+#include "user.h"
+#include "stat.h"
+
+int main(void){
+    printf(1,"Maximum pid of processes running in the system = %d\n",getMaxPid());
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/testMaxPid.d xv6-public-with-hybrid/testMaxPid.d
--- xv6-public/testMaxPid.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testMaxPid.d	2022-10-07 18:50:02.896946165 +0530
@@ -0,0 +1,2 @@
+testMaxPid.o: testMaxPid.c /usr/include/stdc-predef.h types.h user.h \
+ processInfo.h stat.h
Binary files xv6-public/testMaxPid.o and xv6-public-with-hybrid/testMaxPid.o differ
diff -ruN xv6-public/testMaxPid.sym xv6-public-with-hybrid/testMaxPid.sym
--- xv6-public/testMaxPid.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testMaxPid.sym	2022-10-07 18:50:02.984945905 +0530
@@ -0,0 +1,64 @@
+00000000 testMaxPid.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+00000a1c digits.0
+00000000 umalloc.c
+00000d60 freep
+00000d64 base
+00000000 random.c
+00000d80 mt
+00000d54 mti
+00000a30 mag01.0
+00000030 strcpy
+00000760 sgenrand
+00000430 printf
+00000333 thread_exit
+00000250 memmove
+000002cb mknod
+00000150 gets
+00000303 getpid
+00000660 malloc
+00000313 sleep
+00000363 get_burst_time
+00000900 random_at_most
+0000036b getCurrentInfo
+00000293 pipe
+000002a3 write
+000002db fstat
+000002b3 kill
+000002f3 chdir
+000002bb exec
+0000028b wait
+0000029b read
+000002d3 unlink
+0000027b fork
+0000030b sbrk
+0000031b uptime
+00000d58 __bss_start
+000000f0 memset
+00000000 main
+0000035b set_burst_time
+00000060 strcmp
+000002fb dup
+0000034b getMaxPid
+000007a0 genrand
+00000343 getNumProc
+00000353 getProcInfo
+000001c0 stat
+00000d58 _edata
+00001740 _end
+000002e3 link
+00000283 exit
+00000210 atoi
+0000033b draw
+000000c0 strlen
+000002c3 open
+00000110 strchr
+00000323 thread_create
+00000373 getCurrentPID
+00000940 randomrange
+000002eb mkdir
+000002ab close
+0000032b thread_join
+000005d0 free
Binary files xv6-public/_testNumProc and xv6-public-with-hybrid/_testNumProc differ
diff -ruN xv6-public/testNumProc.asm xv6-public-with-hybrid/testNumProc.asm
--- xv6-public/testNumProc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testNumProc.asm	2022-10-07 18:50:02.756946579 +0530
@@ -0,0 +1,1460 @@
+
+_testNumProc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+    printf(1,"Total Number of proccess running in the system = %d\n",getNumProc());
+  11:	e8 2d 03 00 00       	call   343 <getNumProc>
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 88 09 00 00       	push   $0x988
+  1f:	6a 01                	push   $0x1
+  21:	e8 0a 04 00 00       	call   430 <printf>
+    exit();
+  26:	e8 58 02 00 00       	call   283 <exit>
+  2b:	66 90                	xchg   %ax,%ax
+  2d:	66 90                	xchg   %ax,%ax
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  31:	31 c0                	xor    %eax,%eax
+{
+  33:	89 e5                	mov    %esp,%ebp
+  35:	53                   	push   %ebx
+  36:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  51:	89 c8                	mov    %ecx,%eax
+  53:	c9                   	leave  
+  54:	c3                   	ret    
+  55:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	84 c0                	test   %al,%al
+  6f:	75 17                	jne    88 <strcmp+0x28>
+  71:	eb 3a                	jmp    ad <strcmp+0x4d>
+  73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  77:	90                   	nop
+  78:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  7c:	83 c2 01             	add    $0x1,%edx
+  7f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  82:	84 c0                	test   %al,%al
+  84:	74 1a                	je     a0 <strcmp+0x40>
+    p++, q++;
+  86:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  88:	0f b6 19             	movzbl (%ecx),%ebx
+  8b:	38 c3                	cmp    %al,%bl
+  8d:	74 e9                	je     78 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  8f:	29 d8                	sub    %ebx,%eax
+}
+  91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  94:	c9                   	leave  
+  95:	c3                   	ret    
+  96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  a4:	31 c0                	xor    %eax,%eax
+  a6:	29 d8                	sub    %ebx,%eax
+}
+  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  ab:	c9                   	leave  
+  ac:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	31 c0                	xor    %eax,%eax
+  b2:	eb db                	jmp    8f <strcmp+0x2f>
+  b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bf:	90                   	nop
+
+000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	80 3a 00             	cmpb   $0x0,(%edx)
+  c9:	74 15                	je     e0 <strlen+0x20>
+  cb:	31 c0                	xor    %eax,%eax
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  d7:	89 c1                	mov    %eax,%ecx
+  d9:	75 f5                	jne    d0 <strlen+0x10>
+    ;
+  return n;
+}
+  db:	89 c8                	mov    %ecx,%eax
+  dd:	5d                   	pop    %ebp
+  de:	c3                   	ret    
+  df:	90                   	nop
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	57                   	push   %edi
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fd:	89 d7                	mov    %edx,%edi
+  ff:	fc                   	cld    
+ 100:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 102:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 105:	89 d0                	mov    %edx,%eax
+ 107:	c9                   	leave  
+ 108:	c3                   	ret    
+ 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 45 08             	mov    0x8(%ebp),%eax
+ 116:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11a:	0f b6 10             	movzbl (%eax),%edx
+ 11d:	84 d2                	test   %dl,%dl
+ 11f:	75 12                	jne    133 <strchr+0x23>
+ 121:	eb 1d                	jmp    140 <strchr+0x30>
+ 123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 127:	90                   	nop
+ 128:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 12c:	83 c0 01             	add    $0x1,%eax
+ 12f:	84 d2                	test   %dl,%dl
+ 131:	74 0d                	je     140 <strchr+0x30>
+    if(*s == c)
+ 133:	38 d1                	cmp    %dl,%cl
+ 135:	75 f1                	jne    128 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 137:	5d                   	pop    %ebp
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 140:	31 c0                	xor    %eax,%eax
+}
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	57                   	push   %edi
+ 154:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 155:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 158:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 159:	31 db                	xor    %ebx,%ebx
+{
+ 15b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 15e:	eb 27                	jmp    187 <gets+0x37>
+    cc = read(0, &c, 1);
+ 160:	83 ec 04             	sub    $0x4,%esp
+ 163:	6a 01                	push   $0x1
+ 165:	57                   	push   %edi
+ 166:	6a 00                	push   $0x0
+ 168:	e8 2e 01 00 00       	call   29b <read>
+    if(cc < 1)
+ 16d:	83 c4 10             	add    $0x10,%esp
+ 170:	85 c0                	test   %eax,%eax
+ 172:	7e 1d                	jle    191 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 174:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 178:	8b 55 08             	mov    0x8(%ebp),%edx
+ 17b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 17f:	3c 0a                	cmp    $0xa,%al
+ 181:	74 1d                	je     1a0 <gets+0x50>
+ 183:	3c 0d                	cmp    $0xd,%al
+ 185:	74 19                	je     1a0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 187:	89 de                	mov    %ebx,%esi
+ 189:	83 c3 01             	add    $0x1,%ebx
+ 18c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 18f:	7c cf                	jl     160 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 191:	8b 45 08             	mov    0x8(%ebp),%eax
+ 194:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 198:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19b:	5b                   	pop    %ebx
+ 19c:	5e                   	pop    %esi
+ 19d:	5f                   	pop    %edi
+ 19e:	5d                   	pop    %ebp
+ 19f:	c3                   	ret    
+  buf[i] = '\0';
+ 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a3:	89 de                	mov    %ebx,%esi
+ 1a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ac:	5b                   	pop    %ebx
+ 1ad:	5e                   	pop    %esi
+ 1ae:	5f                   	pop    %edi
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	push   0x8(%ebp)
+ 1cd:	e8 f1 00 00 00       	call   2c3 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	push   0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f4 00 00 00       	call   2db <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 ba 00 00 00       	call   2ab <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 02             	movsbl (%edx),%eax
+ 21a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 21d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 220:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 225:	77 1e                	ja     245 <atoi+0x35>
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 230:	83 c2 01             	add    $0x1,%edx
+ 233:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 236:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 02             	movsbl (%edx),%eax
+ 23d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 248:	89 c8                	mov    %ecx,%eax
+ 24a:	c9                   	leave  
+ 24b:	c3                   	ret    
+ 24c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	8b 45 10             	mov    0x10(%ebp),%eax
+ 257:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25a:	56                   	push   %esi
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 c0                	test   %eax,%eax
+ 260:	7e 13                	jle    275 <memmove+0x25>
+ 262:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 264:	89 d7                	mov    %edx,%edi
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 270:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 271:	39 f8                	cmp    %edi,%eax
+ 273:	75 fb                	jne    270 <memmove+0x20>
+  return vdst;
+}
+ 275:	5e                   	pop    %esi
+ 276:	89 d0                	mov    %edx,%eax
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+
+0000027b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 280:	cd 40                	int    $0x40
+ 282:	c3                   	ret    
+
+00000283 <exit>:
+SYSCALL(exit)
+ 283:	b8 02 00 00 00       	mov    $0x2,%eax
+ 288:	cd 40                	int    $0x40
+ 28a:	c3                   	ret    
+
+0000028b <wait>:
+SYSCALL(wait)
+ 28b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <pipe>:
+SYSCALL(pipe)
+ 293:	b8 04 00 00 00       	mov    $0x4,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <read>:
+SYSCALL(read)
+ 29b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <write>:
+SYSCALL(write)
+ 2a3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <close>:
+SYSCALL(close)
+ 2ab:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <kill>:
+SYSCALL(kill)
+ 2b3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <exec>:
+SYSCALL(exec)
+ 2bb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <open>:
+SYSCALL(open)
+ 2c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <mknod>:
+SYSCALL(mknod)
+ 2cb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <unlink>:
+SYSCALL(unlink)
+ 2d3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <fstat>:
+SYSCALL(fstat)
+ 2db:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <link>:
+SYSCALL(link)
+ 2e3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <mkdir>:
+SYSCALL(mkdir)
+ 2eb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <chdir>:
+SYSCALL(chdir)
+ 2f3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <dup>:
+SYSCALL(dup)
+ 2fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <getpid>:
+SYSCALL(getpid)
+ 303:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <sbrk>:
+SYSCALL(sbrk)
+ 30b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <sleep>:
+SYSCALL(sleep)
+ 313:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <uptime>:
+SYSCALL(uptime)
+ 31b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <thread_create>:
+SYSCALL(thread_create)
+ 323:	b8 16 00 00 00       	mov    $0x16,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <thread_join>:
+SYSCALL(thread_join)
+ 32b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <thread_exit>:
+SYSCALL(thread_exit)
+ 333:	b8 17 00 00 00       	mov    $0x17,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <draw>:
+SYSCALL(draw)
+ 33b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getNumProc>:
+SYSCALL(getNumProc)
+ 343:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 34b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 353:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 35b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 363:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 36b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 373:	b8 20 00 00 00       	mov    $0x20,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 1c 0a 00 00 	movzbl 0xa1c(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+    putc(fd, buf[i]);
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 9e fe ff ff       	call   2a3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 44f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 27 fe ff ff       	call   2a3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 47f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 48c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
+      if(c == 'd'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 c4 09 00 00 	jmp    *0x9c4(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 d0 fd ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 bd fd ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
+        ap++;
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+        while(*s != 0){
+ 52b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 52e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 540:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 51 fd ff ff       	call   2a3 <write>
+        while(*s != 0){
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
+      state = 0;
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
+        putc(fd, *ap);
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
+        putc(fd, *ap);
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58f:	e8 0f fd ff ff       	call   2a3 <write>
+        ap++;
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
+          s = "(null)";
+ 5b8:	ba bd 09 00 00       	mov    $0x9bd,%edx
+        while(*s != 0){
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 60 0d 00 00       	mov    0xd60,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 60f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	89 15 60 0d 00 00    	mov    %edx,0xd60
+}
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
+    p->s.size += bp->s.size;
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 64c:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    p->s.size += bp->s.size;
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
+}
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 683:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	8b 3d 60 0d 00 00    	mov    0xd60,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 43 fc ff ff       	call   30b <sbrk>
+  if(p == (char*)-1)
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
+  hp->s.size = nu;
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6df:	8b 15 60 0d 00 00    	mov    0xd60,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ef:	31 c0                	xor    %eax,%eax
+}
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 70f:	89 15 60 0d 00 00    	mov    %edx,0xd60
+}
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 718:	83 c0 08             	add    $0x8,%eax
+}
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 60 0d 00 00 64 	movl   $0xd64,0xd60
+ 727:	0d 00 00 
+    base.s.size = 0;
+ 72a:	bf 64 0d 00 00       	mov    $0xd64,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 64 0d 00 00 64 	movl   $0xd64,0xd64
+ 736:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 68 0d 00 00 00 	movl   $0x0,0xd68
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 756:	66 90                	xchg   %ax,%ax
+ 758:	66 90                	xchg   %ax,%ax
+ 75a:	66 90                	xchg   %ax,%ax
+ 75c:	66 90                	xchg   %ax,%ax
+ 75e:	66 90                	xchg   %ax,%ax
+
+00000760 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 760:	55                   	push   %ebp
+ 761:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 766:	89 e5                	mov    %esp,%ebp
+ 768:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 76b:	89 15 80 0d 00 00    	mov    %edx,0xd80
+    for (mti=1; mti<N; mti++)
+ 771:	eb 08                	jmp    77b <sgenrand+0x1b>
+ 773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 777:	90                   	nop
+ 778:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 77b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 781:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 783:	3d 3c 17 00 00       	cmp    $0x173c,%eax
+ 788:	75 ee                	jne    778 <sgenrand+0x18>
+ 78a:	c7 05 54 0d 00 00 70 	movl   $0x270,0xd54
+ 791:	02 00 00 
+}
+ 794:	5d                   	pop    %ebp
+ 795:	c3                   	ret    
+ 796:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79d:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007a0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7a0:	a1 54 0d 00 00       	mov    0xd54,%eax
+ 7a5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7aa:	7f 3d                	jg     7e9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ac:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 7b3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7b6:	89 15 54 0d 00 00    	mov    %edx,0xd54
+    y ^= TEMPERING_SHIFT_U(y);
+ 7bc:	89 ca                	mov    %ecx,%edx
+ 7be:	c1 ea 0b             	shr    $0xb,%edx
+ 7c1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7c3:	89 d0                	mov    %edx,%eax
+ 7c5:	c1 e0 07             	shl    $0x7,%eax
+ 7c8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7cd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7cf:	89 c2                	mov    %eax,%edx
+ 7d1:	c1 e2 0f             	shl    $0xf,%edx
+ 7d4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 7da:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 7dc:	89 d0                	mov    %edx,%eax
+ 7de:	c1 e8 12             	shr    $0x12,%eax
+ 7e1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 7e3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 7e8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 7e9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 7ee:	0f 84 d4 00 00 00    	je     8c8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 7f4:	31 c0                	xor    %eax,%eax
+ 7f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 800:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 807:	83 c0 01             	add    $0x1,%eax
+ 80a:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 811:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 817:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 81d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 81f:	89 d1                	mov    %edx,%ecx
+ 821:	83 e2 01             	and    $0x1,%edx
+ 824:	d1 e9                	shr    %ecx
+ 826:	33 0c 85 b0 13 00 00 	xor    0x13b0(,%eax,4),%ecx
+ 82d:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 834:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 83b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 840:	75 be                	jne    800 <genrand+0x60>
+ 842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 848:	8b 0c 85 80 0d 00 00 	mov    0xd80(,%eax,4),%ecx
+ 84f:	83 c0 01             	add    $0x1,%eax
+ 852:	8b 14 85 80 0d 00 00 	mov    0xd80(,%eax,4),%edx
+ 859:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 85f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 865:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 867:	89 d1                	mov    %edx,%ecx
+ 869:	83 e2 01             	and    $0x1,%edx
+ 86c:	d1 e9                	shr    %ecx
+ 86e:	33 0c 85 f0 09 00 00 	xor    0x9f0(,%eax,4),%ecx
+ 875:	33 0c 95 30 0a 00 00 	xor    0xa30(,%edx,4),%ecx
+ 87c:	89 0c 85 7c 0d 00 00 	mov    %ecx,0xd7c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 883:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 888:	75 be                	jne    848 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 88a:	8b 0d 80 0d 00 00    	mov    0xd80,%ecx
+ 890:	a1 3c 17 00 00       	mov    0x173c,%eax
+ 895:	89 ca                	mov    %ecx,%edx
+ 897:	25 00 00 00 80       	and    $0x80000000,%eax
+ 89c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8a2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8a4:	89 c2                	mov    %eax,%edx
+ 8a6:	83 e0 01             	and    $0x1,%eax
+ 8a9:	d1 ea                	shr    %edx
+ 8ab:	33 15 b0 13 00 00    	xor    0x13b0,%edx
+ 8b1:	33 14 85 30 0a 00 00 	xor    0xa30(,%eax,4),%edx
+ 8b8:	89 15 3c 17 00 00    	mov    %edx,0x173c
+ 8be:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8c3:	e9 ee fe ff ff       	jmp    7b6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8c8:	b8 84 0d 00 00       	mov    $0xd84,%eax
+ 8cd:	b9 3c 17 00 00       	mov    $0x173c,%ecx
+ 8d2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 8d7:	c7 05 80 0d 00 00 05 	movl   $0x1105,0xd80
+ 8de:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 8e1:	eb 08                	jmp    8eb <genrand+0x14b>
+ 8e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8e7:	90                   	nop
+ 8e8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8eb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8f1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8f3:	39 c1                	cmp    %eax,%ecx
+ 8f5:	75 f1                	jne    8e8 <genrand+0x148>
+ 8f7:	e9 f8 fe ff ff       	jmp    7f4 <genrand+0x54>
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000900 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 900:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 901:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 903:	89 e5                	mov    %esp,%ebp
+ 905:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 906:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 909:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 90a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 90f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 912:	89 d8                	mov    %ebx,%eax
+ 914:	f7 f1                	div    %ecx
+ 916:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 918:	29 d3                	sub    %edx,%ebx
+ 91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 920:	e8 7b fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 925:	39 d8                	cmp    %ebx,%eax
+ 927:	73 f7                	jae    920 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 929:	31 d2                	xor    %edx,%edx
+}
+ 92b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 92c:	f7 f6                	div    %esi
+}
+ 92e:	5e                   	pop    %esi
+ 92f:	5d                   	pop    %ebp
+ 930:	c3                   	ret    
+ 931:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 938:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+
+00000940 <randomrange>:
+
+int randomrange(int low, int high){
+ 940:	55                   	push   %ebp
+ 941:	89 e5                	mov    %esp,%ebp
+ 943:	57                   	push   %edi
+ 944:	56                   	push   %esi
+ 945:	53                   	push   %ebx
+ 946:	83 ec 0c             	sub    $0xc,%esp
+ 949:	8b 75 08             	mov    0x8(%ebp),%esi
+ 94c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 94f:	39 f0                	cmp    %esi,%eax
+ 951:	7d 06                	jge    959 <randomrange+0x19>
+ 953:	89 f2                	mov    %esi,%edx
+ 955:	89 c6                	mov    %eax,%esi
+ 957:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 959:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 95b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 960:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 962:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 965:	89 d8                	mov    %ebx,%eax
+ 967:	f7 f1                	div    %ecx
+ 969:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 96b:	29 d3                	sub    %edx,%ebx
+ 96d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 970:	e8 2b fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <randomrange+0x30>
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 97b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 97e:	f7 f7                	div    %edi
+}
+ 980:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 981:	01 f0                	add    %esi,%eax
+}
+ 983:	5e                   	pop    %esi
+ 984:	5f                   	pop    %edi
+ 985:	5d                   	pop    %ebp
+ 986:	c3                   	ret    
diff -ruN xv6-public/testNumProc.c xv6-public-with-hybrid/testNumProc.c
--- xv6-public/testNumProc.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testNumProc.c	2022-09-26 10:53:01.000000000 +0530
@@ -0,0 +1,8 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void){
+    printf(1,"Total Number of proccess running in the system = %d\n",getNumProc());
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/testNumProc.d xv6-public-with-hybrid/testNumProc.d
--- xv6-public/testNumProc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testNumProc.d	2022-10-07 18:50:02.708946719 +0530
@@ -0,0 +1,2 @@
+testNumProc.o: testNumProc.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h processInfo.h
Binary files xv6-public/testNumProc.o and xv6-public-with-hybrid/testNumProc.o differ
diff -ruN xv6-public/testNumProc.sym xv6-public-with-hybrid/testNumProc.sym
--- xv6-public/testNumProc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testNumProc.sym	2022-10-07 18:50:02.776946519 +0530
@@ -0,0 +1,64 @@
+00000000 testNumProc.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+00000a1c digits.0
+00000000 umalloc.c
+00000d60 freep
+00000d64 base
+00000000 random.c
+00000d80 mt
+00000d54 mti
+00000a30 mag01.0
+00000030 strcpy
+00000760 sgenrand
+00000430 printf
+00000333 thread_exit
+00000250 memmove
+000002cb mknod
+00000150 gets
+00000303 getpid
+00000660 malloc
+00000313 sleep
+00000363 get_burst_time
+00000900 random_at_most
+0000036b getCurrentInfo
+00000293 pipe
+000002a3 write
+000002db fstat
+000002b3 kill
+000002f3 chdir
+000002bb exec
+0000028b wait
+0000029b read
+000002d3 unlink
+0000027b fork
+0000030b sbrk
+0000031b uptime
+00000d58 __bss_start
+000000f0 memset
+00000000 main
+0000035b set_burst_time
+00000060 strcmp
+000002fb dup
+0000034b getMaxPid
+000007a0 genrand
+00000343 getNumProc
+00000353 getProcInfo
+000001c0 stat
+00000d58 _edata
+00001740 _end
+000002e3 link
+00000283 exit
+00000210 atoi
+0000033b draw
+000000c0 strlen
+000002c3 open
+00000110 strchr
+00000323 thread_create
+00000373 getCurrentPID
+00000940 randomrange
+000002eb mkdir
+000002ab close
+0000032b thread_join
+000005d0 free
Binary files xv6-public/_testProcInfo and xv6-public-with-hybrid/_testProcInfo differ
diff -ruN xv6-public/testProcInfo.asm xv6-public-with-hybrid/testProcInfo.asm
--- xv6-public/testProcInfo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testProcInfo.asm	2022-10-07 18:50:03.136945456 +0530
@@ -0,0 +1,1525 @@
+
+_testProcInfo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc,char *argv[]){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 14             	sub    $0x14,%esp
+    if(argc<2){
+  11:	83 39 01             	cmpl   $0x1,(%ecx)
+int main(int argc,char *argv[]){
+  14:	8b 41 04             	mov    0x4(%ecx),%eax
+    if(argc<2){
+  17:	7e 72                	jle    8b <main+0x8b>
+        printf(1,"Incorrect Format\n");
+        exit();
+    }
+    struct processInfo info;
+    if(getProcInfo(atoi(argv[1]),&info)==-1){
+  19:	83 ec 0c             	sub    $0xc,%esp
+  1c:	ff 70 04             	push   0x4(%eax)
+  1f:	e8 5c 02 00 00       	call   280 <atoi>
+  24:	5a                   	pop    %edx
+  25:	8d 55 ec             	lea    -0x14(%ebp),%edx
+  28:	59                   	pop    %ecx
+  29:	52                   	push   %edx
+  2a:	50                   	push   %eax
+  2b:	e8 93 03 00 00       	call   3c3 <getProcInfo>
+  30:	83 c4 10             	add    $0x10,%esp
+  33:	83 f8 ff             	cmp    $0xffffffff,%eax
+  36:	74 40                	je     78 <main+0x78>
+        printf(1,"No process has this PID.\n");
+        exit();
+    }
+    if(info.ppid != -2){
+  38:	8b 45 ec             	mov    -0x14(%ebp),%eax
+         printf(1,"PPID:  %d\nSize: %d\nNumber of Context Switches: %d\n",info.ppid,info.psize,info.numberContextSwitches);
+  3b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
+  3e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+    if(info.ppid != -2){
+  41:	83 f8 fe             	cmp    $0xfffffffe,%eax
+  44:	74 1f                	je     65 <main+0x65>
+         printf(1,"PPID:  %d\nSize: %d\nNumber of Context Switches: %d\n",info.ppid,info.psize,info.numberContextSwitches);
+  46:	83 ec 0c             	sub    $0xc,%esp
+  49:	51                   	push   %ecx
+  4a:	52                   	push   %edx
+  4b:	50                   	push   %eax
+  4c:	68 24 0a 00 00       	push   $0xa24
+  51:	6a 01                	push   $0x1
+  53:	e8 48 04 00 00       	call   4a0 <printf>
+  58:	83 c4 20             	add    $0x20,%esp
+     }else{
+         printf(1,"PPID: No parent Process\nSize: %d\nNumber of Context Switches: %d\n",info.psize,info.numberContextSwitches);
+     }
+}
+  5b:	8b 4d fc             	mov    -0x4(%ebp),%ecx
+  5e:	31 c0                	xor    %eax,%eax
+  60:	c9                   	leave  
+  61:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  64:	c3                   	ret    
+         printf(1,"PPID: No parent Process\nSize: %d\nNumber of Context Switches: %d\n",info.psize,info.numberContextSwitches);
+  65:	51                   	push   %ecx
+  66:	52                   	push   %edx
+  67:	68 58 0a 00 00       	push   $0xa58
+  6c:	6a 01                	push   $0x1
+  6e:	e8 2d 04 00 00       	call   4a0 <printf>
+  73:	83 c4 10             	add    $0x10,%esp
+  76:	eb e3                	jmp    5b <main+0x5b>
+        printf(1,"No process has this PID.\n");
+  78:	50                   	push   %eax
+  79:	50                   	push   %eax
+  7a:	68 0a 0a 00 00       	push   $0xa0a
+  7f:	6a 01                	push   $0x1
+  81:	e8 1a 04 00 00       	call   4a0 <printf>
+        exit();
+  86:	e8 68 02 00 00       	call   2f3 <exit>
+        printf(1,"Incorrect Format\n");
+  8b:	50                   	push   %eax
+  8c:	50                   	push   %eax
+  8d:	68 f8 09 00 00       	push   $0x9f8
+  92:	6a 01                	push   $0x1
+  94:	e8 07 04 00 00       	call   4a0 <printf>
+        exit();
+  99:	e8 55 02 00 00       	call   2f3 <exit>
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  a0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  a1:	31 c0                	xor    %eax,%eax
+{
+  a3:	89 e5                	mov    %esp,%ebp
+  a5:	53                   	push   %ebx
+  a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  a9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  b0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  b4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  b7:	83 c0 01             	add    $0x1,%eax
+  ba:	84 d2                	test   %dl,%dl
+  bc:	75 f2                	jne    b0 <strcpy+0x10>
+    ;
+  return os;
+}
+  be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c1:	89 c8                	mov    %ecx,%eax
+  c3:	c9                   	leave  
+  c4:	c3                   	ret    
+  c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000d0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	53                   	push   %ebx
+  d4:	8b 55 08             	mov    0x8(%ebp),%edx
+  d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  da:	0f b6 02             	movzbl (%edx),%eax
+  dd:	84 c0                	test   %al,%al
+  df:	75 17                	jne    f8 <strcmp+0x28>
+  e1:	eb 3a                	jmp    11d <strcmp+0x4d>
+  e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  e7:	90                   	nop
+  e8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  ec:	83 c2 01             	add    $0x1,%edx
+  ef:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  f2:	84 c0                	test   %al,%al
+  f4:	74 1a                	je     110 <strcmp+0x40>
+    p++, q++;
+  f6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  f8:	0f b6 19             	movzbl (%ecx),%ebx
+  fb:	38 c3                	cmp    %al,%bl
+  fd:	74 e9                	je     e8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  ff:	29 d8                	sub    %ebx,%eax
+}
+ 101:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 104:	c9                   	leave  
+ 105:	c3                   	ret    
+ 106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 110:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 114:	31 c0                	xor    %eax,%eax
+ 116:	29 d8                	sub    %ebx,%eax
+}
+ 118:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 11b:	c9                   	leave  
+ 11c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 11d:	0f b6 19             	movzbl (%ecx),%ebx
+ 120:	31 c0                	xor    %eax,%eax
+ 122:	eb db                	jmp    ff <strcmp+0x2f>
+ 124:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 12f:	90                   	nop
+
+00000130 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 136:	80 3a 00             	cmpb   $0x0,(%edx)
+ 139:	74 15                	je     150 <strlen+0x20>
+ 13b:	31 c0                	xor    %eax,%eax
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+ 140:	83 c0 01             	add    $0x1,%eax
+ 143:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 147:	89 c1                	mov    %eax,%ecx
+ 149:	75 f5                	jne    140 <strlen+0x10>
+    ;
+  return n;
+}
+ 14b:	89 c8                	mov    %ecx,%eax
+ 14d:	5d                   	pop    %ebp
+ 14e:	c3                   	ret    
+ 14f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 150:	31 c9                	xor    %ecx,%ecx
+}
+ 152:	5d                   	pop    %ebp
+ 153:	89 c8                	mov    %ecx,%eax
+ 155:	c3                   	ret    
+ 156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000160 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	57                   	push   %edi
+ 164:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 167:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 16a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 16d:	89 d7                	mov    %edx,%edi
+ 16f:	fc                   	cld    
+ 170:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 172:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 175:	89 d0                	mov    %edx,%eax
+ 177:	c9                   	leave  
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000180 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	8b 45 08             	mov    0x8(%ebp),%eax
+ 186:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 18a:	0f b6 10             	movzbl (%eax),%edx
+ 18d:	84 d2                	test   %dl,%dl
+ 18f:	75 12                	jne    1a3 <strchr+0x23>
+ 191:	eb 1d                	jmp    1b0 <strchr+0x30>
+ 193:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 197:	90                   	nop
+ 198:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 19c:	83 c0 01             	add    $0x1,%eax
+ 19f:	84 d2                	test   %dl,%dl
+ 1a1:	74 0d                	je     1b0 <strchr+0x30>
+    if(*s == c)
+ 1a3:	38 d1                	cmp    %dl,%cl
+ 1a5:	75 f1                	jne    198 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 1a7:	5d                   	pop    %ebp
+ 1a8:	c3                   	ret    
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1b0:	31 c0                	xor    %eax,%eax
+}
+ 1b2:	5d                   	pop    %ebp
+ 1b3:	c3                   	ret    
+ 1b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1c5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1c8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1c9:	31 db                	xor    %ebx,%ebx
+{
+ 1cb:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1ce:	eb 27                	jmp    1f7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1d0:	83 ec 04             	sub    $0x4,%esp
+ 1d3:	6a 01                	push   $0x1
+ 1d5:	57                   	push   %edi
+ 1d6:	6a 00                	push   $0x0
+ 1d8:	e8 2e 01 00 00       	call   30b <read>
+    if(cc < 1)
+ 1dd:	83 c4 10             	add    $0x10,%esp
+ 1e0:	85 c0                	test   %eax,%eax
+ 1e2:	7e 1d                	jle    201 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1e4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1e8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1eb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1ef:	3c 0a                	cmp    $0xa,%al
+ 1f1:	74 1d                	je     210 <gets+0x50>
+ 1f3:	3c 0d                	cmp    $0xd,%al
+ 1f5:	74 19                	je     210 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1f7:	89 de                	mov    %ebx,%esi
+ 1f9:	83 c3 01             	add    $0x1,%ebx
+ 1fc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1ff:	7c cf                	jl     1d0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 201:	8b 45 08             	mov    0x8(%ebp),%eax
+ 204:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 208:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 20b:	5b                   	pop    %ebx
+ 20c:	5e                   	pop    %esi
+ 20d:	5f                   	pop    %edi
+ 20e:	5d                   	pop    %ebp
+ 20f:	c3                   	ret    
+  buf[i] = '\0';
+ 210:	8b 45 08             	mov    0x8(%ebp),%eax
+ 213:	89 de                	mov    %ebx,%esi
+ 215:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 219:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 21c:	5b                   	pop    %ebx
+ 21d:	5e                   	pop    %esi
+ 21e:	5f                   	pop    %edi
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	56                   	push   %esi
+ 234:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 235:	83 ec 08             	sub    $0x8,%esp
+ 238:	6a 00                	push   $0x0
+ 23a:	ff 75 08             	push   0x8(%ebp)
+ 23d:	e8 f1 00 00 00       	call   333 <open>
+  if(fd < 0)
+ 242:	83 c4 10             	add    $0x10,%esp
+ 245:	85 c0                	test   %eax,%eax
+ 247:	78 27                	js     270 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 249:	83 ec 08             	sub    $0x8,%esp
+ 24c:	ff 75 0c             	push   0xc(%ebp)
+ 24f:	89 c3                	mov    %eax,%ebx
+ 251:	50                   	push   %eax
+ 252:	e8 f4 00 00 00       	call   34b <fstat>
+  close(fd);
+ 257:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 25a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 25c:	e8 ba 00 00 00       	call   31b <close>
+  return r;
+ 261:	83 c4 10             	add    $0x10,%esp
+}
+ 264:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 267:	89 f0                	mov    %esi,%eax
+ 269:	5b                   	pop    %ebx
+ 26a:	5e                   	pop    %esi
+ 26b:	5d                   	pop    %ebp
+ 26c:	c3                   	ret    
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 270:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 275:	eb ed                	jmp    264 <stat+0x34>
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+
+00000280 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	53                   	push   %ebx
+ 284:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 287:	0f be 02             	movsbl (%edx),%eax
+ 28a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 28d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 290:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 295:	77 1e                	ja     2b5 <atoi+0x35>
+ 297:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 2a0:	83 c2 01             	add    $0x1,%edx
+ 2a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2aa:	0f be 02             	movsbl (%edx),%eax
+ 2ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2b0:	80 fb 09             	cmp    $0x9,%bl
+ 2b3:	76 eb                	jbe    2a0 <atoi+0x20>
+  return n;
+}
+ 2b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 2b8:	89 c8                	mov    %ecx,%eax
+ 2ba:	c9                   	leave  
+ 2bb:	c3                   	ret    
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	57                   	push   %edi
+ 2c4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2c7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ca:	56                   	push   %esi
+ 2cb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ce:	85 c0                	test   %eax,%eax
+ 2d0:	7e 13                	jle    2e5 <memmove+0x25>
+ 2d2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2d4:	89 d7                	mov    %edx,%edi
+ 2d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2e1:	39 f8                	cmp    %edi,%eax
+ 2e3:	75 fb                	jne    2e0 <memmove+0x20>
+  return vdst;
+}
+ 2e5:	5e                   	pop    %esi
+ 2e6:	89 d0                	mov    %edx,%eax
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+
+000002eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <exit>:
+SYSCALL(exit)
+ 2f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <wait>:
+SYSCALL(wait)
+ 2fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <pipe>:
+SYSCALL(pipe)
+ 303:	b8 04 00 00 00       	mov    $0x4,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <read>:
+SYSCALL(read)
+ 30b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <write>:
+SYSCALL(write)
+ 313:	b8 10 00 00 00       	mov    $0x10,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <close>:
+SYSCALL(close)
+ 31b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <kill>:
+SYSCALL(kill)
+ 323:	b8 06 00 00 00       	mov    $0x6,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <exec>:
+SYSCALL(exec)
+ 32b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <open>:
+SYSCALL(open)
+ 333:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mknod>:
+SYSCALL(mknod)
+ 33b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <unlink>:
+SYSCALL(unlink)
+ 343:	b8 12 00 00 00       	mov    $0x12,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <fstat>:
+SYSCALL(fstat)
+ 34b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <link>:
+SYSCALL(link)
+ 353:	b8 13 00 00 00       	mov    $0x13,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <mkdir>:
+SYSCALL(mkdir)
+ 35b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <chdir>:
+SYSCALL(chdir)
+ 363:	b8 09 00 00 00       	mov    $0x9,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <dup>:
+SYSCALL(dup)
+ 36b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getpid>:
+SYSCALL(getpid)
+ 373:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <sbrk>:
+SYSCALL(sbrk)
+ 37b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <sleep>:
+SYSCALL(sleep)
+ 383:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <uptime>:
+SYSCALL(uptime)
+ 38b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <thread_create>:
+SYSCALL(thread_create)
+ 393:	b8 16 00 00 00       	mov    $0x16,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <thread_join>:
+SYSCALL(thread_join)
+ 39b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <thread_exit>:
+SYSCALL(thread_exit)
+ 3a3:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <draw>:
+SYSCALL(draw)
+ 3ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getNumProc>:
+SYSCALL(getNumProc)
+ 3b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <getMaxPid>:
+SYSCALL(getMaxPid)
+ 3bb:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 3c3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3cb:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3d3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 3db:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 3e3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+ 3eb:	66 90                	xchg   %ax,%ax
+ 3ed:	66 90                	xchg   %ax,%ax
+ 3ef:	90                   	nop
+
+000003f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	83 ec 3c             	sub    $0x3c,%esp
+ 3f9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3fc:	89 d1                	mov    %edx,%ecx
+{
+ 3fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 401:	85 d2                	test   %edx,%edx
+ 403:	0f 89 7f 00 00 00    	jns    488 <printint+0x98>
+ 409:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 40d:	74 79                	je     488 <printint+0x98>
+    neg = 1;
+ 40f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 416:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 418:	31 db                	xor    %ebx,%ebx
+ 41a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 420:	89 c8                	mov    %ecx,%eax
+ 422:	31 d2                	xor    %edx,%edx
+ 424:	89 cf                	mov    %ecx,%edi
+ 426:	f7 75 c4             	divl   -0x3c(%ebp)
+ 429:	0f b6 92 f8 0a 00 00 	movzbl 0xaf8(%edx),%edx
+ 430:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 433:	89 d8                	mov    %ebx,%eax
+ 435:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 438:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 43b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 43e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 441:	76 dd                	jbe    420 <printint+0x30>
+  if(neg)
+ 443:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 446:	85 c9                	test   %ecx,%ecx
+ 448:	74 0c                	je     456 <printint+0x66>
+    buf[i++] = '-';
+ 44a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 44f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 451:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 456:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 459:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 45d:	eb 07                	jmp    466 <printint+0x76>
+ 45f:	90                   	nop
+    putc(fd, buf[i]);
+ 460:	0f b6 13             	movzbl (%ebx),%edx
+ 463:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 466:	83 ec 04             	sub    $0x4,%esp
+ 469:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 46c:	6a 01                	push   $0x1
+ 46e:	56                   	push   %esi
+ 46f:	57                   	push   %edi
+ 470:	e8 9e fe ff ff       	call   313 <write>
+  while(--i >= 0)
+ 475:	83 c4 10             	add    $0x10,%esp
+ 478:	39 de                	cmp    %ebx,%esi
+ 47a:	75 e4                	jne    460 <printint+0x70>
+}
+ 47c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 47f:	5b                   	pop    %ebx
+ 480:	5e                   	pop    %esi
+ 481:	5f                   	pop    %edi
+ 482:	5d                   	pop    %ebp
+ 483:	c3                   	ret    
+ 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 488:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 48f:	eb 87                	jmp    418 <printint+0x28>
+ 491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+
+000004a0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
+ 4a4:	56                   	push   %esi
+ 4a5:	53                   	push   %ebx
+ 4a6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4a9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 4ac:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 4af:	0f b6 13             	movzbl (%ebx),%edx
+ 4b2:	84 d2                	test   %dl,%dl
+ 4b4:	74 6a                	je     520 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 4b6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4b9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 4bc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4bf:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 4c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4c4:	eb 36                	jmp    4fc <printf+0x5c>
+ 4c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4d0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4d3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	74 15                	je     4f2 <printf+0x52>
+  write(fd, &c, 1);
+ 4dd:	83 ec 04             	sub    $0x4,%esp
+ 4e0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	56                   	push   %esi
+ 4e7:	e8 27 fe ff ff       	call   313 <write>
+ 4ec:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 4ef:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4f2:	0f b6 13             	movzbl (%ebx),%edx
+ 4f5:	83 c3 01             	add    $0x1,%ebx
+ 4f8:	84 d2                	test   %dl,%dl
+ 4fa:	74 24                	je     520 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4fc:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4ff:	85 c9                	test   %ecx,%ecx
+ 501:	74 cd                	je     4d0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 503:	83 f9 25             	cmp    $0x25,%ecx
+ 506:	75 ea                	jne    4f2 <printf+0x52>
+      if(c == 'd'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	0f 84 07 01 00 00    	je     618 <printf+0x178>
+ 511:	83 e8 63             	sub    $0x63,%eax
+ 514:	83 f8 15             	cmp    $0x15,%eax
+ 517:	77 17                	ja     530 <printf+0x90>
+ 519:	ff 24 85 a0 0a 00 00 	jmp    *0xaa0(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 520:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 523:	5b                   	pop    %ebx
+ 524:	5e                   	pop    %esi
+ 525:	5f                   	pop    %edi
+ 526:	5d                   	pop    %ebp
+ 527:	c3                   	ret    
+ 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52f:	90                   	nop
+  write(fd, &c, 1);
+ 530:	83 ec 04             	sub    $0x4,%esp
+ 533:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 536:	6a 01                	push   $0x1
+ 538:	57                   	push   %edi
+ 539:	56                   	push   %esi
+ 53a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 53e:	e8 d0 fd ff ff       	call   313 <write>
+        putc(fd, c);
+ 543:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 547:	83 c4 0c             	add    $0xc,%esp
+ 54a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 54d:	6a 01                	push   $0x1
+ 54f:	57                   	push   %edi
+ 550:	56                   	push   %esi
+ 551:	e8 bd fd ff ff       	call   313 <write>
+        putc(fd, c);
+ 556:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 559:	31 c9                	xor    %ecx,%ecx
+ 55b:	eb 95                	jmp    4f2 <printf+0x52>
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 568:	6a 00                	push   $0x0
+ 56a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 56d:	8b 10                	mov    (%eax),%edx
+ 56f:	89 f0                	mov    %esi,%eax
+ 571:	e8 7a fe ff ff       	call   3f0 <printint>
+        ap++;
+ 576:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 57a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57d:	31 c9                	xor    %ecx,%ecx
+ 57f:	e9 6e ff ff ff       	jmp    4f2 <printf+0x52>
+ 584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 588:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 58b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 58d:	83 c0 04             	add    $0x4,%eax
+ 590:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 593:	85 d2                	test   %edx,%edx
+ 595:	0f 84 8d 00 00 00    	je     628 <printf+0x188>
+        while(*s != 0){
+ 59b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 59e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 5a0:	84 c0                	test   %al,%al
+ 5a2:	0f 84 4a ff ff ff    	je     4f2 <printf+0x52>
+ 5a8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5ab:	89 d3                	mov    %edx,%ebx
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5b3:	83 c3 01             	add    $0x1,%ebx
+ 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	57                   	push   %edi
+ 5bc:	56                   	push   %esi
+ 5bd:	e8 51 fd ff ff       	call   313 <write>
+        while(*s != 0){
+ 5c2:	0f b6 03             	movzbl (%ebx),%eax
+ 5c5:	83 c4 10             	add    $0x10,%esp
+ 5c8:	84 c0                	test   %al,%al
+ 5ca:	75 e4                	jne    5b0 <printf+0x110>
+      state = 0;
+ 5cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5cf:	31 c9                	xor    %ecx,%ecx
+ 5d1:	e9 1c ff ff ff       	jmp    4f2 <printf+0x52>
+ 5d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5dd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5e8:	6a 01                	push   $0x1
+ 5ea:	e9 7b ff ff ff       	jmp    56a <printf+0xca>
+ 5ef:	90                   	nop
+        putc(fd, *ap);
+ 5f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	57                   	push   %edi
+ 5fb:	56                   	push   %esi
+        putc(fd, *ap);
+ 5fc:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ff:	e8 0f fd ff ff       	call   313 <write>
+        ap++;
+ 604:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 608:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60b:	31 c9                	xor    %ecx,%ecx
+ 60d:	e9 e0 fe ff ff       	jmp    4f2 <printf+0x52>
+ 612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 618:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 61b:	83 ec 04             	sub    $0x4,%esp
+ 61e:	e9 2a ff ff ff       	jmp    54d <printf+0xad>
+ 623:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 627:	90                   	nop
+          s = "(null)";
+ 628:	ba 99 0a 00 00       	mov    $0xa99,%edx
+        while(*s != 0){
+ 62d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 630:	b8 28 00 00 00       	mov    $0x28,%eax
+ 635:	89 d3                	mov    %edx,%ebx
+ 637:	e9 74 ff ff ff       	jmp    5b0 <printf+0x110>
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 641:	a1 40 0e 00 00       	mov    0xe40,%eax
+{
+ 646:	89 e5                	mov    %esp,%ebp
+ 648:	57                   	push   %edi
+ 649:	56                   	push   %esi
+ 64a:	53                   	push   %ebx
+ 64b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 64e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 658:	89 c2                	mov    %eax,%edx
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	39 ca                	cmp    %ecx,%edx
+ 65e:	73 30                	jae    690 <free+0x50>
+ 660:	39 c1                	cmp    %eax,%ecx
+ 662:	72 04                	jb     668 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 664:	39 c2                	cmp    %eax,%edx
+ 666:	72 f0                	jb     658 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 f8                	cmp    %edi,%eax
+ 670:	74 30                	je     6a2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 672:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 675:	8b 42 04             	mov    0x4(%edx),%eax
+ 678:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 3a                	je     6b9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 67f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	89 15 40 0e 00 00    	mov    %edx,0xe40
+}
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 690:	39 c2                	cmp    %eax,%edx
+ 692:	72 c4                	jb     658 <free+0x18>
+ 694:	39 c1                	cmp    %eax,%ecx
+ 696:	73 c0                	jae    658 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 698:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 69b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 69e:	39 f8                	cmp    %edi,%eax
+ 6a0:	75 d0                	jne    672 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 6a2:	03 70 04             	add    0x4(%eax),%esi
+ 6a5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a8:	8b 02                	mov    (%edx),%eax
+ 6aa:	8b 00                	mov    (%eax),%eax
+ 6ac:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6af:	8b 42 04             	mov    0x4(%edx),%eax
+ 6b2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6b5:	39 f1                	cmp    %esi,%ecx
+ 6b7:	75 c6                	jne    67f <free+0x3f>
+    p->s.size += bp->s.size;
+ 6b9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 6bc:	89 15 40 0e 00 00    	mov    %edx,0xe40
+    p->s.size += bp->s.size;
+ 6c2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 6c5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6c8:	89 0a                	mov    %ecx,(%edx)
+}
+ 6ca:	5b                   	pop    %ebx
+ 6cb:	5e                   	pop    %esi
+ 6cc:	5f                   	pop    %edi
+ 6cd:	5d                   	pop    %ebp
+ 6ce:	c3                   	ret    
+ 6cf:	90                   	nop
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	55                   	push   %ebp
+ 6d1:	89 e5                	mov    %esp,%ebp
+ 6d3:	57                   	push   %edi
+ 6d4:	56                   	push   %esi
+ 6d5:	53                   	push   %ebx
+ 6d6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6dc:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e5:	c1 ee 03             	shr    $0x3,%esi
+ 6e8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6eb:	85 ff                	test   %edi,%edi
+ 6ed:	0f 84 9d 00 00 00    	je     790 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6f5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f8:	39 f1                	cmp    %esi,%ecx
+ 6fa:	73 6a                	jae    766 <malloc+0x96>
+ 6fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 701:	39 de                	cmp    %ebx,%esi
+ 703:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 706:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 70d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 710:	eb 17                	jmp    729 <malloc+0x59>
+ 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 718:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 71a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 71d:	39 f1                	cmp    %esi,%ecx
+ 71f:	73 4f                	jae    770 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	8b 3d 40 0e 00 00    	mov    0xe40,%edi
+ 727:	89 c2                	mov    %eax,%edx
+ 729:	39 d7                	cmp    %edx,%edi
+ 72b:	75 eb                	jne    718 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 72d:	83 ec 0c             	sub    $0xc,%esp
+ 730:	ff 75 e4             	push   -0x1c(%ebp)
+ 733:	e8 43 fc ff ff       	call   37b <sbrk>
+  if(p == (char*)-1)
+ 738:	83 c4 10             	add    $0x10,%esp
+ 73b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 73e:	74 1c                	je     75c <malloc+0x8c>
+  hp->s.size = nu;
+ 740:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 743:	83 ec 0c             	sub    $0xc,%esp
+ 746:	83 c0 08             	add    $0x8,%eax
+ 749:	50                   	push   %eax
+ 74a:	e8 f1 fe ff ff       	call   640 <free>
+  return freep;
+ 74f:	8b 15 40 0e 00 00    	mov    0xe40,%edx
+      if((p = morecore(nunits)) == 0)
+ 755:	83 c4 10             	add    $0x10,%esp
+ 758:	85 d2                	test   %edx,%edx
+ 75a:	75 bc                	jne    718 <malloc+0x48>
+        return 0;
+  }
+}
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 75f:	31 c0                	xor    %eax,%eax
+}
+ 761:	5b                   	pop    %ebx
+ 762:	5e                   	pop    %esi
+ 763:	5f                   	pop    %edi
+ 764:	5d                   	pop    %ebp
+ 765:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 766:	89 d0                	mov    %edx,%eax
+ 768:	89 fa                	mov    %edi,%edx
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 770:	39 ce                	cmp    %ecx,%esi
+ 772:	74 4c                	je     7c0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 774:	29 f1                	sub    %esi,%ecx
+ 776:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 779:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 77c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 77f:	89 15 40 0e 00 00    	mov    %edx,0xe40
+}
+ 785:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 788:	83 c0 08             	add    $0x8,%eax
+}
+ 78b:	5b                   	pop    %ebx
+ 78c:	5e                   	pop    %esi
+ 78d:	5f                   	pop    %edi
+ 78e:	5d                   	pop    %ebp
+ 78f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 40 0e 00 00 44 	movl   $0xe44,0xe40
+ 797:	0e 00 00 
+    base.s.size = 0;
+ 79a:	bf 44 0e 00 00       	mov    $0xe44,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 44 0e 00 00 44 	movl   $0xe44,0xe44
+ 7a6:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7ab:	c7 05 48 0e 00 00 00 	movl   $0x0,0xe48
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 42 ff ff ff       	jmp    6fc <malloc+0x2c>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 08                	mov    (%eax),%ecx
+ 7c2:	89 0a                	mov    %ecx,(%edx)
+ 7c4:	eb b9                	jmp    77f <malloc+0xaf>
+ 7c6:	66 90                	xchg   %ax,%ax
+ 7c8:	66 90                	xchg   %ax,%ax
+ 7ca:	66 90                	xchg   %ax,%ax
+ 7cc:	66 90                	xchg   %ax,%ax
+ 7ce:	66 90                	xchg   %ax,%ax
+
+000007d0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 7d0:	55                   	push   %ebp
+ 7d1:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 7d6:	89 e5                	mov    %esp,%ebp
+ 7d8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 7db:	89 15 60 0e 00 00    	mov    %edx,0xe60
+    for (mti=1; mti<N; mti++)
+ 7e1:	eb 08                	jmp    7eb <sgenrand+0x1b>
+ 7e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7e7:	90                   	nop
+ 7e8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 7eb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 7f1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 7f3:	3d 1c 18 00 00       	cmp    $0x181c,%eax
+ 7f8:	75 ee                	jne    7e8 <sgenrand+0x18>
+ 7fa:	c7 05 3c 0e 00 00 70 	movl   $0x270,0xe3c
+ 801:	02 00 00 
+}
+ 804:	5d                   	pop    %ebp
+ 805:	c3                   	ret    
+ 806:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000810 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 810:	a1 3c 0e 00 00       	mov    0xe3c,%eax
+ 815:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 81a:	7f 3d                	jg     859 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 81c:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 823:	8d 50 01             	lea    0x1(%eax),%edx
+ 826:	89 15 3c 0e 00 00    	mov    %edx,0xe3c
+    y ^= TEMPERING_SHIFT_U(y);
+ 82c:	89 ca                	mov    %ecx,%edx
+ 82e:	c1 ea 0b             	shr    $0xb,%edx
+ 831:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 833:	89 d0                	mov    %edx,%eax
+ 835:	c1 e0 07             	shl    $0x7,%eax
+ 838:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 83d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 83f:	89 c2                	mov    %eax,%edx
+ 841:	c1 e2 0f             	shl    $0xf,%edx
+ 844:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 84a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 84c:	89 d0                	mov    %edx,%eax
+ 84e:	c1 e8 12             	shr    $0x12,%eax
+ 851:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 853:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 858:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 859:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 85e:	0f 84 d4 00 00 00    	je     938 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 864:	31 c0                	xor    %eax,%eax
+ 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 870:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 877:	83 c0 01             	add    $0x1,%eax
+ 87a:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 881:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 887:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 88d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 88f:	89 d1                	mov    %edx,%ecx
+ 891:	83 e2 01             	and    $0x1,%edx
+ 894:	d1 e9                	shr    %ecx
+ 896:	33 0c 85 90 14 00 00 	xor    0x1490(,%eax,4),%ecx
+ 89d:	33 0c 95 0c 0b 00 00 	xor    0xb0c(,%edx,4),%ecx
+ 8a4:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 8ab:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 8b0:	75 be                	jne    870 <genrand+0x60>
+ 8b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 8b8:	8b 0c 85 60 0e 00 00 	mov    0xe60(,%eax,4),%ecx
+ 8bf:	83 c0 01             	add    $0x1,%eax
+ 8c2:	8b 14 85 60 0e 00 00 	mov    0xe60(,%eax,4),%edx
+ 8c9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 8cf:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8d5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8d7:	89 d1                	mov    %edx,%ecx
+ 8d9:	83 e2 01             	and    $0x1,%edx
+ 8dc:	d1 e9                	shr    %ecx
+ 8de:	33 0c 85 d0 0a 00 00 	xor    0xad0(,%eax,4),%ecx
+ 8e5:	33 0c 95 0c 0b 00 00 	xor    0xb0c(,%edx,4),%ecx
+ 8ec:	89 0c 85 5c 0e 00 00 	mov    %ecx,0xe5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 8f3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8f8:	75 be                	jne    8b8 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 8fa:	8b 0d 60 0e 00 00    	mov    0xe60,%ecx
+ 900:	a1 1c 18 00 00       	mov    0x181c,%eax
+ 905:	89 ca                	mov    %ecx,%edx
+ 907:	25 00 00 00 80       	and    $0x80000000,%eax
+ 90c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 912:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 914:	89 c2                	mov    %eax,%edx
+ 916:	83 e0 01             	and    $0x1,%eax
+ 919:	d1 ea                	shr    %edx
+ 91b:	33 15 90 14 00 00    	xor    0x1490,%edx
+ 921:	33 14 85 0c 0b 00 00 	xor    0xb0c(,%eax,4),%edx
+ 928:	89 15 1c 18 00 00    	mov    %edx,0x181c
+ 92e:	ba 01 00 00 00       	mov    $0x1,%edx
+ 933:	e9 ee fe ff ff       	jmp    826 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 938:	b8 64 0e 00 00       	mov    $0xe64,%eax
+ 93d:	b9 1c 18 00 00       	mov    $0x181c,%ecx
+ 942:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 947:	c7 05 60 0e 00 00 05 	movl   $0x1105,0xe60
+ 94e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 951:	eb 08                	jmp    95b <genrand+0x14b>
+ 953:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 957:	90                   	nop
+ 958:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 95b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 961:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 963:	39 c1                	cmp    %eax,%ecx
+ 965:	75 f1                	jne    958 <genrand+0x148>
+ 967:	e9 f8 fe ff ff       	jmp    864 <genrand+0x54>
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 970:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 971:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 973:	89 e5                	mov    %esp,%ebp
+ 975:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 976:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 979:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 97a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 97f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 982:	89 d8                	mov    %ebx,%eax
+ 984:	f7 f1                	div    %ecx
+ 986:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 988:	29 d3                	sub    %edx,%ebx
+ 98a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 990:	e8 7b fe ff ff       	call   810 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 995:	39 d8                	cmp    %ebx,%eax
+ 997:	73 f7                	jae    990 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 999:	31 d2                	xor    %edx,%edx
+}
+ 99b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 99c:	f7 f6                	div    %esi
+}
+ 99e:	5e                   	pop    %esi
+ 99f:	5d                   	pop    %ebp
+ 9a0:	c3                   	ret    
+ 9a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9af:	90                   	nop
+
+000009b0 <randomrange>:
+
+int randomrange(int low, int high){
+ 9b0:	55                   	push   %ebp
+ 9b1:	89 e5                	mov    %esp,%ebp
+ 9b3:	57                   	push   %edi
+ 9b4:	56                   	push   %esi
+ 9b5:	53                   	push   %ebx
+ 9b6:	83 ec 0c             	sub    $0xc,%esp
+ 9b9:	8b 75 08             	mov    0x8(%ebp),%esi
+ 9bc:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 9bf:	39 f0                	cmp    %esi,%eax
+ 9c1:	7d 06                	jge    9c9 <randomrange+0x19>
+ 9c3:	89 f2                	mov    %esi,%edx
+ 9c5:	89 c6                	mov    %eax,%esi
+ 9c7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 9c9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 9cb:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 9d0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 9d2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 9d5:	89 d8                	mov    %ebx,%eax
+ 9d7:	f7 f1                	div    %ecx
+ 9d9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 9db:	29 d3                	sub    %edx,%ebx
+ 9dd:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 9e0:	e8 2b fe ff ff       	call   810 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 9e5:	39 d8                	cmp    %ebx,%eax
+ 9e7:	73 f7                	jae    9e0 <randomrange+0x30>
+  return x/bin_size;
+ 9e9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 9eb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 9ee:	f7 f7                	div    %edi
+}
+ 9f0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 9f1:	01 f0                	add    %esi,%eax
+}
+ 9f3:	5e                   	pop    %esi
+ 9f4:	5f                   	pop    %edi
+ 9f5:	5d                   	pop    %ebp
+ 9f6:	c3                   	ret    
diff -ruN xv6-public/testProcInfo.c xv6-public-with-hybrid/testProcInfo.c
--- xv6-public/testProcInfo.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testProcInfo.c	2022-09-26 22:23:51.128787000 +0530
@@ -0,0 +1,20 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc,char *argv[]){
+    if(argc<2){
+        printf(1,"Incorrect Format\n");
+        exit();
+    }
+    struct processInfo info;
+    if(getProcInfo(atoi(argv[1]),&info)==-1){
+        printf(1,"No process has this PID.\n");
+        exit();
+    }
+    if(info.ppid != -2){
+         printf(1,"PPID:  %d\nSize: %d\nNumber of Context Switches: %d\n",info.ppid,info.psize,info.numberContextSwitches);
+     }else{
+         printf(1,"PPID: No parent Process\nSize: %d\nNumber of Context Switches: %d\n",info.psize,info.numberContextSwitches);
+     }
+}
diff -ruN xv6-public/testProcInfo.d xv6-public-with-hybrid/testProcInfo.d
--- xv6-public/testProcInfo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testProcInfo.d	2022-10-07 18:50:03.092945587 +0530
@@ -0,0 +1,2 @@
+testProcInfo.o: testProcInfo.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h processInfo.h
Binary files xv6-public/testProcInfo.o and xv6-public-with-hybrid/testProcInfo.o differ
diff -ruN xv6-public/testProcInfo.sym xv6-public-with-hybrid/testProcInfo.sym
--- xv6-public/testProcInfo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/testProcInfo.sym	2022-10-07 18:50:03.156945397 +0530
@@ -0,0 +1,64 @@
+00000000 testProcInfo.c
+00000000 ulib.c
+00000000 printf.c
+000003f0 printint
+00000af8 digits.0
+00000000 umalloc.c
+00000e40 freep
+00000e44 base
+00000000 random.c
+00000e60 mt
+00000e3c mti
+00000b0c mag01.0
+000000a0 strcpy
+000007d0 sgenrand
+000004a0 printf
+000003a3 thread_exit
+000002c0 memmove
+0000033b mknod
+000001c0 gets
+00000373 getpid
+000006d0 malloc
+00000383 sleep
+000003d3 get_burst_time
+00000970 random_at_most
+000003db getCurrentInfo
+00000303 pipe
+00000313 write
+0000034b fstat
+00000323 kill
+00000363 chdir
+0000032b exec
+000002fb wait
+0000030b read
+00000343 unlink
+000002eb fork
+0000037b sbrk
+0000038b uptime
+00000e40 __bss_start
+00000160 memset
+00000000 main
+000003cb set_burst_time
+000000d0 strcmp
+0000036b dup
+000003bb getMaxPid
+00000810 genrand
+000003b3 getNumProc
+000003c3 getProcInfo
+00000230 stat
+00000e40 _edata
+00001820 _end
+00000353 link
+000002f3 exit
+00000280 atoi
+000003ab draw
+00000130 strlen
+00000333 open
+00000180 strchr
+00000393 thread_create
+000003e3 getCurrentPID
+000009b0 randomrange
+0000035b mkdir
+0000031b close
+0000039b thread_join
+00000640 free
Binary files xv6-public/_test_scheduler and xv6-public-with-hybrid/_test_scheduler differ
diff -ruN xv6-public/test_scheduler.asm xv6-public-with-hybrid/test_scheduler.asm
--- xv6-public/test_scheduler.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_scheduler.asm	2022-10-07 18:50:03.628943999 +0530
@@ -0,0 +1,1720 @@
+
+_test_scheduler:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "user.h"
+
+int useless;
+
+int
+main(int argv, char* argc[]){
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 38             	sub    $0x38,%esp
+
+	if(argv<2){
+  14:	83 39 01             	cmpl   $0x1,(%ecx)
+main(int argv, char* argc[]){
+  17:	8b 51 04             	mov    0x4(%ecx),%edx
+	if(argv<2){
+  1a:	7e 3a                	jle    56 <main+0x56>
+		printf(1, "Incorrect format!\nFormat: test_scheduler <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+  1c:	83 ec 0c             	sub    $0xc,%esp
+  1f:	ff 72 04             	push   0x4(%edx)
+  22:	e8 09 04 00 00       	call   430 <atoi>
+
+	int burst_times[n];
+  27:	83 c4 10             	add    $0x10,%esp
+  2a:	8d 14 85 0f 00 00 00 	lea    0xf(,%eax,4),%edx
+	int n=atoi(argc[1]);
+  31:	89 c7                	mov    %eax,%edi
+	int burst_times[n];
+  33:	89 e1                	mov    %esp,%ecx
+  35:	89 d0                	mov    %edx,%eax
+  37:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+  3d:	83 e0 f0             	and    $0xfffffff0,%eax
+  40:	29 d1                	sub    %edx,%ecx
+  42:	39 cc                	cmp    %ecx,%esp
+  44:	74 23                	je     69 <main+0x69>
+  46:	81 ec 00 10 00 00    	sub    $0x1000,%esp
+  4c:	83 8c 24 fc 0f 00 00 	orl    $0x0,0xffc(%esp)
+  53:	00 
+  54:	eb ec                	jmp    42 <main+0x42>
+		printf(1, "Incorrect format!\nFormat: test_scheduler <number of fork processes>\n");
+  56:	50                   	push   %eax
+  57:	50                   	push   %eax
+  58:	68 a8 0b 00 00       	push   $0xba8
+  5d:	6a 01                	push   $0x1
+  5f:	e8 ec 05 00 00       	call   650 <printf>
+		exit();
+  64:	e8 3a 04 00 00       	call   4a3 <exit>
+	int burst_times[n];
+  69:	25 ff 0f 00 00       	and    $0xfff,%eax
+  6e:	29 c4                	sub    %eax,%esp
+  70:	85 c0                	test   %eax,%eax
+  72:	74 05                	je     79 <main+0x79>
+  74:	83 4c 04 fc 00       	orl    $0x0,-0x4(%esp,%eax,1)
+  79:	89 65 c4             	mov    %esp,-0x3c(%ebp)
+
+	for(int i=0;i<n;i++){
+  7c:	85 ff                	test   %edi,%edi
+  7e:	0f 8e f0 00 00 00    	jle    174 <main+0x174>
+  84:	31 db                	xor    %ebx,%ebx
+		burst_times[i] = randomrange(1,1000);
+  86:	83 ec 08             	sub    $0x8,%esp
+  89:	68 e8 03 00 00       	push   $0x3e8
+  8e:	6a 01                	push   $0x1
+  90:	e8 cb 0a 00 00       	call   b60 <randomrange>
+  95:	8b 75 c4             	mov    -0x3c(%ebp),%esi
+	for(int i=0;i<n;i++){
+  98:	83 c4 10             	add    $0x10,%esp
+		burst_times[i] = randomrange(1,1000);
+  9b:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
+	for(int i=0;i<n;i++){
+  9e:	89 de                	mov    %ebx,%esi
+  a0:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  a3:	39 df                	cmp    %ebx,%edi
+  a5:	75 df                	jne    86 <main+0x86>
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+  a7:	53                   	push   %ebx
+  a8:	53                   	push   %ebx
+  a9:	68 a0 0c 00 00       	push   $0xca0
+  ae:	6a 01                	push   $0x1
+  b0:	e8 9b 05 00 00       	call   650 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+  b5:	5f                   	pop    %edi
+  b6:	58                   	pop    %eax
+  b7:	68 d0 0c 00 00       	push   $0xcd0
+  bc:	6a 01                	push   $0x1
+  be:	31 ff                	xor    %edi,%edi
+  c0:	e8 8b 05 00 00       	call   650 <printf>
+  c5:	83 c4 10             	add    $0x10,%esp
+  c8:	eb 0d                	jmp    d7 <main+0xd7>
+
+	for(int i=0;i<n;i++){
+  ca:	8d 47 01             	lea    0x1(%edi),%eax
+  cd:	39 fe                	cmp    %edi,%esi
+  cf:	0f 84 be 00 00 00    	je     193 <main+0x193>
+  d5:	89 c7                	mov    %eax,%edi
+		if(!fork()){
+  d7:	e8 bf 03 00 00       	call   49b <fork>
+  dc:	89 c3                	mov    %eax,%ebx
+  de:	85 c0                	test   %eax,%eax
+  e0:	75 e8                	jne    ca <main+0xca>
+
+			if(i%2){
+				// CPU Bound process
+				set_burst_time(burst_times[i]);
+  e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+  e5:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+			if(i%2){
+  e8:	83 e7 01             	and    $0x1,%edi
+  eb:	0f 84 b8 00 00 00    	je     1a9 <main+0x1a9>
+				set_burst_time(burst_times[i]);
+  f1:	83 ec 0c             	sub    $0xc,%esp
+
+				int it=0;
+				for(int j=0;j<100;j++){
+  f4:	31 f6                	xor    %esi,%esi
+				set_burst_time(burst_times[i]);
+  f6:	50                   	push   %eax
+  f7:	e8 7f 04 00 00       	call   57b <set_burst_time>
+  fc:	83 c4 10             	add    $0x10,%esp
+  ff:	b9 80 84 1e 00       	mov    $0x1e8480,%ecx
+					for(int k=0;k<2000000;k++){
+ 104:	89 f0                	mov    %esi,%eax
+ 106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+						if((j+k)%2)it++;
+ 110:	8d 53 01             	lea    0x1(%ebx),%edx
+ 113:	83 eb 01             	sub    $0x1,%ebx
+ 116:	a8 01                	test   $0x1,%al
+ 118:	0f 45 da             	cmovne %edx,%ebx
+					for(int k=0;k<2000000;k++){
+ 11b:	83 c0 01             	add    $0x1,%eax
+ 11e:	39 c8                	cmp    %ecx,%eax
+ 120:	75 ee                	jne    110 <main+0x110>
+				for(int j=0;j<100;j++){
+ 122:	83 c6 01             	add    $0x1,%esi
+ 125:	8d 48 01             	lea    0x1(%eax),%ecx
+ 128:	83 fe 64             	cmp    $0x64,%esi
+ 12b:	75 d7                	jne    104 <main+0x104>
+				useless+=it;
+
+
+			
+				struct processInfo info;
+				getCurrentInfo(&info);
+ 12d:	83 ec 0c             	sub    $0xc,%esp
+ 130:	8d 45 d0             	lea    -0x30(%ebp),%eax
+				useless+=it;
+ 133:	01 1d c0 10 00 00    	add    %ebx,0x10c0
+				getCurrentInfo(&info);
+ 139:	50                   	push   %eax
+ 13a:	e8 4c 04 00 00       	call   58b <getCurrentInfo>
+				int bt = get_burst_time();
+ 13f:	e8 3f 04 00 00       	call   583 <get_burst_time>
+				if(bt<10)
+					printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 144:	8b 75 d8             	mov    -0x28(%ebp),%esi
+				if(bt<10)
+ 147:	83 c4 10             	add    $0x10,%esp
+				int bt = get_burst_time();
+ 14a:	89 c3                	mov    %eax,%ebx
+				if(bt<10)
+ 14c:	83 f8 09             	cmp    $0x9,%eax
+ 14f:	0f 8f b4 00 00 00    	jg     209 <main+0x209>
+					printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 155:	e8 39 04 00 00       	call   593 <getCurrentPID>
+ 15a:	83 ec 0c             	sub    $0xc,%esp
+ 15d:	56                   	push   %esi
+ 15e:	53                   	push   %ebx
+ 15f:	50                   	push   %eax
+ 160:	68 f0 0b 00 00       	push   $0xbf0
+ 165:	6a 01                	push   $0x1
+ 167:	e8 e4 04 00 00       	call   650 <printf>
+ 16c:	83 c4 20             	add    $0x20,%esp
+				else
+					printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+				exit();	
+ 16f:	e8 2f 03 00 00       	call   4a3 <exit>
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+ 174:	50                   	push   %eax
+ 175:	50                   	push   %eax
+ 176:	68 a0 0c 00 00       	push   $0xca0
+ 17b:	6a 01                	push   $0x1
+ 17d:	e8 ce 04 00 00       	call   650 <printf>
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+ 182:	5a                   	pop    %edx
+ 183:	59                   	pop    %ecx
+ 184:	68 d0 0c 00 00       	push   $0xcd0
+ 189:	6a 01                	push   $0x1
+ 18b:	e8 c0 04 00 00       	call   650 <printf>
+ 190:	83 c4 10             	add    $0x10,%esp
+
+			}
+		}
+	}
+
+	while(wait()!=-1);
+ 193:	e8 13 03 00 00       	call   4ab <wait>
+ 198:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 19b:	74 d2                	je     16f <main+0x16f>
+ 19d:	e8 09 03 00 00       	call   4ab <wait>
+ 1a2:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 1a5:	75 ec                	jne    193 <main+0x193>
+ 1a7:	eb c6                	jmp    16f <main+0x16f>
+				set_burst_time(burst_times[i]);
+ 1a9:	83 ec 0c             	sub    $0xc,%esp
+ 1ac:	bb 0a 00 00 00       	mov    $0xa,%ebx
+ 1b1:	50                   	push   %eax
+ 1b2:	e8 c4 03 00 00       	call   57b <set_burst_time>
+ 1b7:	83 c4 10             	add    $0x10,%esp
+					sleep(1);
+ 1ba:	83 ec 0c             	sub    $0xc,%esp
+ 1bd:	6a 01                	push   $0x1
+ 1bf:	e8 6f 03 00 00       	call   533 <sleep>
+				for(int i=0;i<10;i++){
+ 1c4:	83 c4 10             	add    $0x10,%esp
+ 1c7:	83 eb 01             	sub    $0x1,%ebx
+ 1ca:	75 ee                	jne    1ba <main+0x1ba>
+				getCurrentInfo(&info);
+ 1cc:	83 ec 0c             	sub    $0xc,%esp
+ 1cf:	8d 45 dc             	lea    -0x24(%ebp),%eax
+ 1d2:	50                   	push   %eax
+ 1d3:	e8 b3 03 00 00       	call   58b <getCurrentInfo>
+				int bt = get_burst_time();
+ 1d8:	e8 a6 03 00 00       	call   583 <get_burst_time>
+					printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 1dd:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+				if(bt<10)
+ 1e0:	83 c4 10             	add    $0x10,%esp
+				int bt = get_burst_time();
+ 1e3:	89 c3                	mov    %eax,%ebx
+				if(bt<10)
+ 1e5:	83 f8 09             	cmp    $0x9,%eax
+ 1e8:	7f 3e                	jg     228 <main+0x228>
+					printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 1ea:	e8 a4 03 00 00       	call   593 <getCurrentPID>
+ 1ef:	83 ec 0c             	sub    $0xc,%esp
+ 1f2:	56                   	push   %esi
+ 1f3:	53                   	push   %ebx
+ 1f4:	50                   	push   %eax
+ 1f5:	68 48 0c 00 00       	push   $0xc48
+ 1fa:	6a 01                	push   $0x1
+ 1fc:	e8 4f 04 00 00       	call   650 <printf>
+ 201:	83 c4 20             	add    $0x20,%esp
+ 204:	e9 66 ff ff ff       	jmp    16f <main+0x16f>
+					printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 209:	e8 85 03 00 00       	call   593 <getCurrentPID>
+ 20e:	83 ec 0c             	sub    $0xc,%esp
+ 211:	56                   	push   %esi
+ 212:	53                   	push   %ebx
+ 213:	50                   	push   %eax
+ 214:	68 1c 0c 00 00       	push   $0xc1c
+ 219:	6a 01                	push   $0x1
+ 21b:	e8 30 04 00 00       	call   650 <printf>
+ 220:	83 c4 20             	add    $0x20,%esp
+ 223:	e9 47 ff ff ff       	jmp    16f <main+0x16f>
+					printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+ 228:	e8 66 03 00 00       	call   593 <getCurrentPID>
+ 22d:	83 ec 0c             	sub    $0xc,%esp
+ 230:	56                   	push   %esi
+ 231:	53                   	push   %ebx
+ 232:	50                   	push   %eax
+ 233:	68 74 0c 00 00       	push   $0xc74
+ 238:	6a 01                	push   $0x1
+ 23a:	e8 11 04 00 00       	call   650 <printf>
+ 23f:	83 c4 20             	add    $0x20,%esp
+ 242:	e9 28 ff ff ff       	jmp    16f <main+0x16f>
+ 247:	66 90                	xchg   %ax,%ax
+ 249:	66 90                	xchg   %ax,%ax
+ 24b:	66 90                	xchg   %ax,%ax
+ 24d:	66 90                	xchg   %ax,%ax
+ 24f:	90                   	nop
+
+00000250 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 250:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 251:	31 c0                	xor    %eax,%eax
+{
+ 253:	89 e5                	mov    %esp,%ebp
+ 255:	53                   	push   %ebx
+ 256:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 259:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 260:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 264:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 267:	83 c0 01             	add    $0x1,%eax
+ 26a:	84 d2                	test   %dl,%dl
+ 26c:	75 f2                	jne    260 <strcpy+0x10>
+    ;
+  return os;
+}
+ 26e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 271:	89 c8                	mov    %ecx,%eax
+ 273:	c9                   	leave  
+ 274:	c3                   	ret    
+ 275:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	53                   	push   %ebx
+ 284:	8b 55 08             	mov    0x8(%ebp),%edx
+ 287:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 28a:	0f b6 02             	movzbl (%edx),%eax
+ 28d:	84 c0                	test   %al,%al
+ 28f:	75 17                	jne    2a8 <strcmp+0x28>
+ 291:	eb 3a                	jmp    2cd <strcmp+0x4d>
+ 293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 297:	90                   	nop
+ 298:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 29c:	83 c2 01             	add    $0x1,%edx
+ 29f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 2a2:	84 c0                	test   %al,%al
+ 2a4:	74 1a                	je     2c0 <strcmp+0x40>
+    p++, q++;
+ 2a6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 2a8:	0f b6 19             	movzbl (%ecx),%ebx
+ 2ab:	38 c3                	cmp    %al,%bl
+ 2ad:	74 e9                	je     298 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 2af:	29 d8                	sub    %ebx,%eax
+}
+ 2b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 2b4:	c9                   	leave  
+ 2b5:	c3                   	ret    
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 2c0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 2c4:	31 c0                	xor    %eax,%eax
+ 2c6:	29 d8                	sub    %ebx,%eax
+}
+ 2c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 2cb:	c9                   	leave  
+ 2cc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 2cd:	0f b6 19             	movzbl (%ecx),%ebx
+ 2d0:	31 c0                	xor    %eax,%eax
+ 2d2:	eb db                	jmp    2af <strcmp+0x2f>
+ 2d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+
+000002e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 2e6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 2e9:	74 15                	je     300 <strlen+0x20>
+ 2eb:	31 c0                	xor    %eax,%eax
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 2f0:	83 c0 01             	add    $0x1,%eax
+ 2f3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 2f7:	89 c1                	mov    %eax,%ecx
+ 2f9:	75 f5                	jne    2f0 <strlen+0x10>
+    ;
+  return n;
+}
+ 2fb:	89 c8                	mov    %ecx,%eax
+ 2fd:	5d                   	pop    %ebp
+ 2fe:	c3                   	ret    
+ 2ff:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 300:	31 c9                	xor    %ecx,%ecx
+}
+ 302:	5d                   	pop    %ebp
+ 303:	89 c8                	mov    %ecx,%eax
+ 305:	c3                   	ret    
+ 306:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000310 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 317:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 31a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 31d:	89 d7                	mov    %edx,%edi
+ 31f:	fc                   	cld    
+ 320:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 322:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 325:	89 d0                	mov    %edx,%eax
+ 327:	c9                   	leave  
+ 328:	c3                   	ret    
+ 329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000330 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	8b 45 08             	mov    0x8(%ebp),%eax
+ 336:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 33a:	0f b6 10             	movzbl (%eax),%edx
+ 33d:	84 d2                	test   %dl,%dl
+ 33f:	75 12                	jne    353 <strchr+0x23>
+ 341:	eb 1d                	jmp    360 <strchr+0x30>
+ 343:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 347:	90                   	nop
+ 348:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 34c:	83 c0 01             	add    $0x1,%eax
+ 34f:	84 d2                	test   %dl,%dl
+ 351:	74 0d                	je     360 <strchr+0x30>
+    if(*s == c)
+ 353:	38 d1                	cmp    %dl,%cl
+ 355:	75 f1                	jne    348 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 357:	5d                   	pop    %ebp
+ 358:	c3                   	ret    
+ 359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 360:	31 c0                	xor    %eax,%eax
+}
+ 362:	5d                   	pop    %ebp
+ 363:	c3                   	ret    
+ 364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 36f:	90                   	nop
+
+00000370 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 375:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 378:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 379:	31 db                	xor    %ebx,%ebx
+{
+ 37b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 37e:	eb 27                	jmp    3a7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 380:	83 ec 04             	sub    $0x4,%esp
+ 383:	6a 01                	push   $0x1
+ 385:	57                   	push   %edi
+ 386:	6a 00                	push   $0x0
+ 388:	e8 2e 01 00 00       	call   4bb <read>
+    if(cc < 1)
+ 38d:	83 c4 10             	add    $0x10,%esp
+ 390:	85 c0                	test   %eax,%eax
+ 392:	7e 1d                	jle    3b1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 394:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 398:	8b 55 08             	mov    0x8(%ebp),%edx
+ 39b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 39f:	3c 0a                	cmp    $0xa,%al
+ 3a1:	74 1d                	je     3c0 <gets+0x50>
+ 3a3:	3c 0d                	cmp    $0xd,%al
+ 3a5:	74 19                	je     3c0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 3a7:	89 de                	mov    %ebx,%esi
+ 3a9:	83 c3 01             	add    $0x1,%ebx
+ 3ac:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 3af:	7c cf                	jl     380 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 3b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3b4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 3b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3bb:	5b                   	pop    %ebx
+ 3bc:	5e                   	pop    %esi
+ 3bd:	5f                   	pop    %edi
+ 3be:	5d                   	pop    %ebp
+ 3bf:	c3                   	ret    
+  buf[i] = '\0';
+ 3c0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3c3:	89 de                	mov    %ebx,%esi
+ 3c5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 3c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3cc:	5b                   	pop    %ebx
+ 3cd:	5e                   	pop    %esi
+ 3ce:	5f                   	pop    %edi
+ 3cf:	5d                   	pop    %ebp
+ 3d0:	c3                   	ret    
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3df:	90                   	nop
+
+000003e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	56                   	push   %esi
+ 3e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3e5:	83 ec 08             	sub    $0x8,%esp
+ 3e8:	6a 00                	push   $0x0
+ 3ea:	ff 75 08             	push   0x8(%ebp)
+ 3ed:	e8 f1 00 00 00       	call   4e3 <open>
+  if(fd < 0)
+ 3f2:	83 c4 10             	add    $0x10,%esp
+ 3f5:	85 c0                	test   %eax,%eax
+ 3f7:	78 27                	js     420 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 3f9:	83 ec 08             	sub    $0x8,%esp
+ 3fc:	ff 75 0c             	push   0xc(%ebp)
+ 3ff:	89 c3                	mov    %eax,%ebx
+ 401:	50                   	push   %eax
+ 402:	e8 f4 00 00 00       	call   4fb <fstat>
+  close(fd);
+ 407:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 40a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 40c:	e8 ba 00 00 00       	call   4cb <close>
+  return r;
+ 411:	83 c4 10             	add    $0x10,%esp
+}
+ 414:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 417:	89 f0                	mov    %esi,%eax
+ 419:	5b                   	pop    %ebx
+ 41a:	5e                   	pop    %esi
+ 41b:	5d                   	pop    %ebp
+ 41c:	c3                   	ret    
+ 41d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 420:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 425:	eb ed                	jmp    414 <stat+0x34>
+ 427:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42e:	66 90                	xchg   %ax,%ax
+
+00000430 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	53                   	push   %ebx
+ 434:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 437:	0f be 02             	movsbl (%edx),%eax
+ 43a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 43d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 440:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 445:	77 1e                	ja     465 <atoi+0x35>
+ 447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 450:	83 c2 01             	add    $0x1,%edx
+ 453:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 456:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 45a:	0f be 02             	movsbl (%edx),%eax
+ 45d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 460:	80 fb 09             	cmp    $0x9,%bl
+ 463:	76 eb                	jbe    450 <atoi+0x20>
+  return n;
+}
+ 465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 468:	89 c8                	mov    %ecx,%eax
+ 46a:	c9                   	leave  
+ 46b:	c3                   	ret    
+ 46c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000470 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	8b 45 10             	mov    0x10(%ebp),%eax
+ 477:	8b 55 08             	mov    0x8(%ebp),%edx
+ 47a:	56                   	push   %esi
+ 47b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 47e:	85 c0                	test   %eax,%eax
+ 480:	7e 13                	jle    495 <memmove+0x25>
+ 482:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 484:	89 d7                	mov    %edx,%edi
+ 486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 490:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 491:	39 f8                	cmp    %edi,%eax
+ 493:	75 fb                	jne    490 <memmove+0x20>
+  return vdst;
+}
+ 495:	5e                   	pop    %esi
+ 496:	89 d0                	mov    %edx,%eax
+ 498:	5f                   	pop    %edi
+ 499:	5d                   	pop    %ebp
+ 49a:	c3                   	ret    
+
+0000049b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 49b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <exit>:
+SYSCALL(exit)
+ 4a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <wait>:
+SYSCALL(wait)
+ 4ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <pipe>:
+SYSCALL(pipe)
+ 4b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <read>:
+SYSCALL(read)
+ 4bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <write>:
+SYSCALL(write)
+ 4c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+
+000004cb <close>:
+SYSCALL(close)
+ 4cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 4d0:	cd 40                	int    $0x40
+ 4d2:	c3                   	ret    
+
+000004d3 <kill>:
+SYSCALL(kill)
+ 4d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 4d8:	cd 40                	int    $0x40
+ 4da:	c3                   	ret    
+
+000004db <exec>:
+SYSCALL(exec)
+ 4db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 4e0:	cd 40                	int    $0x40
+ 4e2:	c3                   	ret    
+
+000004e3 <open>:
+SYSCALL(open)
+ 4e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 4e8:	cd 40                	int    $0x40
+ 4ea:	c3                   	ret    
+
+000004eb <mknod>:
+SYSCALL(mknod)
+ 4eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 4f0:	cd 40                	int    $0x40
+ 4f2:	c3                   	ret    
+
+000004f3 <unlink>:
+SYSCALL(unlink)
+ 4f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 4f8:	cd 40                	int    $0x40
+ 4fa:	c3                   	ret    
+
+000004fb <fstat>:
+SYSCALL(fstat)
+ 4fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 500:	cd 40                	int    $0x40
+ 502:	c3                   	ret    
+
+00000503 <link>:
+SYSCALL(link)
+ 503:	b8 13 00 00 00       	mov    $0x13,%eax
+ 508:	cd 40                	int    $0x40
+ 50a:	c3                   	ret    
+
+0000050b <mkdir>:
+SYSCALL(mkdir)
+ 50b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 510:	cd 40                	int    $0x40
+ 512:	c3                   	ret    
+
+00000513 <chdir>:
+SYSCALL(chdir)
+ 513:	b8 09 00 00 00       	mov    $0x9,%eax
+ 518:	cd 40                	int    $0x40
+ 51a:	c3                   	ret    
+
+0000051b <dup>:
+SYSCALL(dup)
+ 51b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 520:	cd 40                	int    $0x40
+ 522:	c3                   	ret    
+
+00000523 <getpid>:
+SYSCALL(getpid)
+ 523:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 528:	cd 40                	int    $0x40
+ 52a:	c3                   	ret    
+
+0000052b <sbrk>:
+SYSCALL(sbrk)
+ 52b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 530:	cd 40                	int    $0x40
+ 532:	c3                   	ret    
+
+00000533 <sleep>:
+SYSCALL(sleep)
+ 533:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 538:	cd 40                	int    $0x40
+ 53a:	c3                   	ret    
+
+0000053b <uptime>:
+SYSCALL(uptime)
+ 53b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 540:	cd 40                	int    $0x40
+ 542:	c3                   	ret    
+
+00000543 <thread_create>:
+SYSCALL(thread_create)
+ 543:	b8 16 00 00 00       	mov    $0x16,%eax
+ 548:	cd 40                	int    $0x40
+ 54a:	c3                   	ret    
+
+0000054b <thread_join>:
+SYSCALL(thread_join)
+ 54b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 550:	cd 40                	int    $0x40
+ 552:	c3                   	ret    
+
+00000553 <thread_exit>:
+SYSCALL(thread_exit)
+ 553:	b8 17 00 00 00       	mov    $0x17,%eax
+ 558:	cd 40                	int    $0x40
+ 55a:	c3                   	ret    
+
+0000055b <draw>:
+SYSCALL(draw)
+ 55b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 560:	cd 40                	int    $0x40
+ 562:	c3                   	ret    
+
+00000563 <getNumProc>:
+SYSCALL(getNumProc)
+ 563:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 568:	cd 40                	int    $0x40
+ 56a:	c3                   	ret    
+
+0000056b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 56b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 570:	cd 40                	int    $0x40
+ 572:	c3                   	ret    
+
+00000573 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 573:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 578:	cd 40                	int    $0x40
+ 57a:	c3                   	ret    
+
+0000057b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 57b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 580:	cd 40                	int    $0x40
+ 582:	c3                   	ret    
+
+00000583 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 583:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 588:	cd 40                	int    $0x40
+ 58a:	c3                   	ret    
+
+0000058b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 58b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
+
+00000593 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 593:	b8 20 00 00 00       	mov    $0x20,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
+ 59b:	66 90                	xchg   %ax,%ax
+ 59d:	66 90                	xchg   %ax,%ax
+ 59f:	90                   	nop
+
+000005a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5a0:	55                   	push   %ebp
+ 5a1:	89 e5                	mov    %esp,%ebp
+ 5a3:	57                   	push   %edi
+ 5a4:	56                   	push   %esi
+ 5a5:	53                   	push   %ebx
+ 5a6:	83 ec 3c             	sub    $0x3c,%esp
+ 5a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 5ac:	89 d1                	mov    %edx,%ecx
+{
+ 5ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 5b1:	85 d2                	test   %edx,%edx
+ 5b3:	0f 89 7f 00 00 00    	jns    638 <printint+0x98>
+ 5b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 5bd:	74 79                	je     638 <printint+0x98>
+    neg = 1;
+ 5bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 5c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 5c8:	31 db                	xor    %ebx,%ebx
+ 5ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 5d0:	89 c8                	mov    %ecx,%eax
+ 5d2:	31 d2                	xor    %edx,%edx
+ 5d4:	89 cf                	mov    %ecx,%edi
+ 5d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 5d9:	0f b6 92 60 0d 00 00 	movzbl 0xd60(%edx),%edx
+ 5e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 5e3:	89 d8                	mov    %ebx,%eax
+ 5e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 5e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 5eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 5ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 5f1:	76 dd                	jbe    5d0 <printint+0x30>
+  if(neg)
+ 5f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 5f6:	85 c9                	test   %ecx,%ecx
+ 5f8:	74 0c                	je     606 <printint+0x66>
+    buf[i++] = '-';
+ 5fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 5ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 601:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 606:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 609:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 60d:	eb 07                	jmp    616 <printint+0x76>
+ 60f:	90                   	nop
+    putc(fd, buf[i]);
+ 610:	0f b6 13             	movzbl (%ebx),%edx
+ 613:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 616:	83 ec 04             	sub    $0x4,%esp
+ 619:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 61c:	6a 01                	push   $0x1
+ 61e:	56                   	push   %esi
+ 61f:	57                   	push   %edi
+ 620:	e8 9e fe ff ff       	call   4c3 <write>
+  while(--i >= 0)
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	39 de                	cmp    %ebx,%esi
+ 62a:	75 e4                	jne    610 <printint+0x70>
+}
+ 62c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 62f:	5b                   	pop    %ebx
+ 630:	5e                   	pop    %esi
+ 631:	5f                   	pop    %edi
+ 632:	5d                   	pop    %ebp
+ 633:	c3                   	ret    
+ 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 638:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 63f:	eb 87                	jmp    5c8 <printint+0x28>
+ 641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+
+00000650 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 659:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 65c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 65f:	0f b6 13             	movzbl (%ebx),%edx
+ 662:	84 d2                	test   %dl,%dl
+ 664:	74 6a                	je     6d0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 666:	8d 45 10             	lea    0x10(%ebp),%eax
+ 669:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 66c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 66f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 671:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 674:	eb 36                	jmp    6ac <printf+0x5c>
+ 676:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
+ 680:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 683:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 688:	83 f8 25             	cmp    $0x25,%eax
+ 68b:	74 15                	je     6a2 <printf+0x52>
+  write(fd, &c, 1);
+ 68d:	83 ec 04             	sub    $0x4,%esp
+ 690:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 693:	6a 01                	push   $0x1
+ 695:	57                   	push   %edi
+ 696:	56                   	push   %esi
+ 697:	e8 27 fe ff ff       	call   4c3 <write>
+ 69c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 69f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 6a2:	0f b6 13             	movzbl (%ebx),%edx
+ 6a5:	83 c3 01             	add    $0x1,%ebx
+ 6a8:	84 d2                	test   %dl,%dl
+ 6aa:	74 24                	je     6d0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 6ac:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 6af:	85 c9                	test   %ecx,%ecx
+ 6b1:	74 cd                	je     680 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 6b3:	83 f9 25             	cmp    $0x25,%ecx
+ 6b6:	75 ea                	jne    6a2 <printf+0x52>
+      if(c == 'd'){
+ 6b8:	83 f8 25             	cmp    $0x25,%eax
+ 6bb:	0f 84 07 01 00 00    	je     7c8 <printf+0x178>
+ 6c1:	83 e8 63             	sub    $0x63,%eax
+ 6c4:	83 f8 15             	cmp    $0x15,%eax
+ 6c7:	77 17                	ja     6e0 <printf+0x90>
+ 6c9:	ff 24 85 08 0d 00 00 	jmp    *0xd08(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 6d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6d3:	5b                   	pop    %ebx
+ 6d4:	5e                   	pop    %esi
+ 6d5:	5f                   	pop    %edi
+ 6d6:	5d                   	pop    %ebp
+ 6d7:	c3                   	ret    
+ 6d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+  write(fd, &c, 1);
+ 6e0:	83 ec 04             	sub    $0x4,%esp
+ 6e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 6e6:	6a 01                	push   $0x1
+ 6e8:	57                   	push   %edi
+ 6e9:	56                   	push   %esi
+ 6ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 6ee:	e8 d0 fd ff ff       	call   4c3 <write>
+        putc(fd, c);
+ 6f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 6f7:	83 c4 0c             	add    $0xc,%esp
+ 6fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 6fd:	6a 01                	push   $0x1
+ 6ff:	57                   	push   %edi
+ 700:	56                   	push   %esi
+ 701:	e8 bd fd ff ff       	call   4c3 <write>
+        putc(fd, c);
+ 706:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 709:	31 c9                	xor    %ecx,%ecx
+ 70b:	eb 95                	jmp    6a2 <printf+0x52>
+ 70d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 710:	83 ec 0c             	sub    $0xc,%esp
+ 713:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 718:	6a 00                	push   $0x0
+ 71a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 71d:	8b 10                	mov    (%eax),%edx
+ 71f:	89 f0                	mov    %esi,%eax
+ 721:	e8 7a fe ff ff       	call   5a0 <printint>
+        ap++;
+ 726:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 72a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 72d:	31 c9                	xor    %ecx,%ecx
+ 72f:	e9 6e ff ff ff       	jmp    6a2 <printf+0x52>
+ 734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 738:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 73b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 73d:	83 c0 04             	add    $0x4,%eax
+ 740:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 743:	85 d2                	test   %edx,%edx
+ 745:	0f 84 8d 00 00 00    	je     7d8 <printf+0x188>
+        while(*s != 0){
+ 74b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 74e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 750:	84 c0                	test   %al,%al
+ 752:	0f 84 4a ff ff ff    	je     6a2 <printf+0x52>
+ 758:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 75b:	89 d3                	mov    %edx,%ebx
+ 75d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 760:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 763:	83 c3 01             	add    $0x1,%ebx
+ 766:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 769:	6a 01                	push   $0x1
+ 76b:	57                   	push   %edi
+ 76c:	56                   	push   %esi
+ 76d:	e8 51 fd ff ff       	call   4c3 <write>
+        while(*s != 0){
+ 772:	0f b6 03             	movzbl (%ebx),%eax
+ 775:	83 c4 10             	add    $0x10,%esp
+ 778:	84 c0                	test   %al,%al
+ 77a:	75 e4                	jne    760 <printf+0x110>
+      state = 0;
+ 77c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 77f:	31 c9                	xor    %ecx,%ecx
+ 781:	e9 1c ff ff ff       	jmp    6a2 <printf+0x52>
+ 786:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 790:	83 ec 0c             	sub    $0xc,%esp
+ 793:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 798:	6a 01                	push   $0x1
+ 79a:	e9 7b ff ff ff       	jmp    71a <printf+0xca>
+ 79f:	90                   	nop
+        putc(fd, *ap);
+ 7a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 7a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 7a6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 7a8:	6a 01                	push   $0x1
+ 7aa:	57                   	push   %edi
+ 7ab:	56                   	push   %esi
+        putc(fd, *ap);
+ 7ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7af:	e8 0f fd ff ff       	call   4c3 <write>
+        ap++;
+ 7b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 7b8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7bb:	31 c9                	xor    %ecx,%ecx
+ 7bd:	e9 e0 fe ff ff       	jmp    6a2 <printf+0x52>
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 7c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7cb:	83 ec 04             	sub    $0x4,%esp
+ 7ce:	e9 2a ff ff ff       	jmp    6fd <printf+0xad>
+ 7d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7d7:	90                   	nop
+          s = "(null)";
+ 7d8:	ba fe 0c 00 00       	mov    $0xcfe,%edx
+        while(*s != 0){
+ 7dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 7e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 7e5:	89 d3                	mov    %edx,%ebx
+ 7e7:	e9 74 ff ff ff       	jmp    760 <printf+0x110>
+ 7ec:	66 90                	xchg   %ax,%ax
+ 7ee:	66 90                	xchg   %ax,%ax
+
+000007f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 7f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7f1:	a1 c4 10 00 00       	mov    0x10c4,%eax
+{
+ 7f6:	89 e5                	mov    %esp,%ebp
+ 7f8:	57                   	push   %edi
+ 7f9:	56                   	push   %esi
+ 7fa:	53                   	push   %ebx
+ 7fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 7fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 808:	89 c2                	mov    %eax,%edx
+ 80a:	8b 00                	mov    (%eax),%eax
+ 80c:	39 ca                	cmp    %ecx,%edx
+ 80e:	73 30                	jae    840 <free+0x50>
+ 810:	39 c1                	cmp    %eax,%ecx
+ 812:	72 04                	jb     818 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 814:	39 c2                	cmp    %eax,%edx
+ 816:	72 f0                	jb     808 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 818:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 81b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 81e:	39 f8                	cmp    %edi,%eax
+ 820:	74 30                	je     852 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 822:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 825:	8b 42 04             	mov    0x4(%edx),%eax
+ 828:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 82b:	39 f1                	cmp    %esi,%ecx
+ 82d:	74 3a                	je     869 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 82f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 831:	5b                   	pop    %ebx
+  freep = p;
+ 832:	89 15 c4 10 00 00    	mov    %edx,0x10c4
+}
+ 838:	5e                   	pop    %esi
+ 839:	5f                   	pop    %edi
+ 83a:	5d                   	pop    %ebp
+ 83b:	c3                   	ret    
+ 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 840:	39 c2                	cmp    %eax,%edx
+ 842:	72 c4                	jb     808 <free+0x18>
+ 844:	39 c1                	cmp    %eax,%ecx
+ 846:	73 c0                	jae    808 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 848:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 84b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 84e:	39 f8                	cmp    %edi,%eax
+ 850:	75 d0                	jne    822 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 852:	03 70 04             	add    0x4(%eax),%esi
+ 855:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 858:	8b 02                	mov    (%edx),%eax
+ 85a:	8b 00                	mov    (%eax),%eax
+ 85c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 85f:	8b 42 04             	mov    0x4(%edx),%eax
+ 862:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 865:	39 f1                	cmp    %esi,%ecx
+ 867:	75 c6                	jne    82f <free+0x3f>
+    p->s.size += bp->s.size;
+ 869:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 86c:	89 15 c4 10 00 00    	mov    %edx,0x10c4
+    p->s.size += bp->s.size;
+ 872:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 875:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 878:	89 0a                	mov    %ecx,(%edx)
+}
+ 87a:	5b                   	pop    %ebx
+ 87b:	5e                   	pop    %esi
+ 87c:	5f                   	pop    %edi
+ 87d:	5d                   	pop    %ebp
+ 87e:	c3                   	ret    
+ 87f:	90                   	nop
+
+00000880 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 880:	55                   	push   %ebp
+ 881:	89 e5                	mov    %esp,%ebp
+ 883:	57                   	push   %edi
+ 884:	56                   	push   %esi
+ 885:	53                   	push   %ebx
+ 886:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 889:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 88c:	8b 3d c4 10 00 00    	mov    0x10c4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 892:	8d 70 07             	lea    0x7(%eax),%esi
+ 895:	c1 ee 03             	shr    $0x3,%esi
+ 898:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 89b:	85 ff                	test   %edi,%edi
+ 89d:	0f 84 9d 00 00 00    	je     940 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 8a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 8a8:	39 f1                	cmp    %esi,%ecx
+ 8aa:	73 6a                	jae    916 <malloc+0x96>
+ 8ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 8b1:	39 de                	cmp    %ebx,%esi
+ 8b3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 8b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 8bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 8c0:	eb 17                	jmp    8d9 <malloc+0x59>
+ 8c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 8ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 8cd:	39 f1                	cmp    %esi,%ecx
+ 8cf:	73 4f                	jae    920 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 8d1:	8b 3d c4 10 00 00    	mov    0x10c4,%edi
+ 8d7:	89 c2                	mov    %eax,%edx
+ 8d9:	39 d7                	cmp    %edx,%edi
+ 8db:	75 eb                	jne    8c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 8dd:	83 ec 0c             	sub    $0xc,%esp
+ 8e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 8e3:	e8 43 fc ff ff       	call   52b <sbrk>
+  if(p == (char*)-1)
+ 8e8:	83 c4 10             	add    $0x10,%esp
+ 8eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 8ee:	74 1c                	je     90c <malloc+0x8c>
+  hp->s.size = nu;
+ 8f0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 8f3:	83 ec 0c             	sub    $0xc,%esp
+ 8f6:	83 c0 08             	add    $0x8,%eax
+ 8f9:	50                   	push   %eax
+ 8fa:	e8 f1 fe ff ff       	call   7f0 <free>
+  return freep;
+ 8ff:	8b 15 c4 10 00 00    	mov    0x10c4,%edx
+      if((p = morecore(nunits)) == 0)
+ 905:	83 c4 10             	add    $0x10,%esp
+ 908:	85 d2                	test   %edx,%edx
+ 90a:	75 bc                	jne    8c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 90c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 90f:	31 c0                	xor    %eax,%eax
+}
+ 911:	5b                   	pop    %ebx
+ 912:	5e                   	pop    %esi
+ 913:	5f                   	pop    %edi
+ 914:	5d                   	pop    %ebp
+ 915:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 916:	89 d0                	mov    %edx,%eax
+ 918:	89 fa                	mov    %edi,%edx
+ 91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 920:	39 ce                	cmp    %ecx,%esi
+ 922:	74 4c                	je     970 <malloc+0xf0>
+        p->s.size -= nunits;
+ 924:	29 f1                	sub    %esi,%ecx
+ 926:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 929:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 92c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 92f:	89 15 c4 10 00 00    	mov    %edx,0x10c4
+}
+ 935:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 938:	83 c0 08             	add    $0x8,%eax
+}
+ 93b:	5b                   	pop    %ebx
+ 93c:	5e                   	pop    %esi
+ 93d:	5f                   	pop    %edi
+ 93e:	5d                   	pop    %ebp
+ 93f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 940:	c7 05 c4 10 00 00 c8 	movl   $0x10c8,0x10c4
+ 947:	10 00 00 
+    base.s.size = 0;
+ 94a:	bf c8 10 00 00       	mov    $0x10c8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 94f:	c7 05 c8 10 00 00 c8 	movl   $0x10c8,0x10c8
+ 956:	10 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 959:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 95b:	c7 05 cc 10 00 00 00 	movl   $0x0,0x10cc
+ 962:	00 00 00 
+    if(p->s.size >= nunits){
+ 965:	e9 42 ff ff ff       	jmp    8ac <malloc+0x2c>
+ 96a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 970:	8b 08                	mov    (%eax),%ecx
+ 972:	89 0a                	mov    %ecx,(%edx)
+ 974:	eb b9                	jmp    92f <malloc+0xaf>
+ 976:	66 90                	xchg   %ax,%ax
+ 978:	66 90                	xchg   %ax,%ax
+ 97a:	66 90                	xchg   %ax,%ax
+ 97c:	66 90                	xchg   %ax,%ax
+ 97e:	66 90                	xchg   %ax,%ax
+
+00000980 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 980:	55                   	push   %ebp
+ 981:	b8 e4 10 00 00       	mov    $0x10e4,%eax
+ 986:	89 e5                	mov    %esp,%ebp
+ 988:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 98b:	89 15 e0 10 00 00    	mov    %edx,0x10e0
+    for (mti=1; mti<N; mti++)
+ 991:	eb 08                	jmp    99b <sgenrand+0x1b>
+ 993:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 997:	90                   	nop
+ 998:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 99b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 9a1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 9a3:	3d 9c 1a 00 00       	cmp    $0x1a9c,%eax
+ 9a8:	75 ee                	jne    998 <sgenrand+0x18>
+ 9aa:	c7 05 a4 10 00 00 70 	movl   $0x270,0x10a4
+ 9b1:	02 00 00 
+}
+ 9b4:	5d                   	pop    %ebp
+ 9b5:	c3                   	ret    
+ 9b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 9bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009c0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 9c0:	a1 a4 10 00 00       	mov    0x10a4,%eax
+ 9c5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 9ca:	7f 3d                	jg     a09 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 9cc:	8b 0c 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%ecx
+ 9d3:	8d 50 01             	lea    0x1(%eax),%edx
+ 9d6:	89 15 a4 10 00 00    	mov    %edx,0x10a4
+    y ^= TEMPERING_SHIFT_U(y);
+ 9dc:	89 ca                	mov    %ecx,%edx
+ 9de:	c1 ea 0b             	shr    $0xb,%edx
+ 9e1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 9e3:	89 d0                	mov    %edx,%eax
+ 9e5:	c1 e0 07             	shl    $0x7,%eax
+ 9e8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 9ed:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 9ef:	89 c2                	mov    %eax,%edx
+ 9f1:	c1 e2 0f             	shl    $0xf,%edx
+ 9f4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 9fa:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 9fc:	89 d0                	mov    %edx,%eax
+ 9fe:	c1 e8 12             	shr    $0x12,%eax
+ a01:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ a03:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ a08:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ a09:	3d 71 02 00 00       	cmp    $0x271,%eax
+ a0e:	0f 84 d4 00 00 00    	je     ae8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ a14:	31 c0                	xor    %eax,%eax
+ a16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a1d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ a20:	8b 0c 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%ecx
+ a27:	83 c0 01             	add    $0x1,%eax
+ a2a:	8b 14 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%edx
+ a31:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a37:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a3d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ a3f:	89 d1                	mov    %edx,%ecx
+ a41:	83 e2 01             	and    $0x1,%edx
+ a44:	d1 e9                	shr    %ecx
+ a46:	33 0c 85 10 17 00 00 	xor    0x1710(,%eax,4),%ecx
+ a4d:	33 0c 95 74 0d 00 00 	xor    0xd74(,%edx,4),%ecx
+ a54:	89 0c 85 dc 10 00 00 	mov    %ecx,0x10dc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ a5b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ a60:	75 be                	jne    a20 <genrand+0x60>
+ a62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ a68:	8b 0c 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%ecx
+ a6f:	83 c0 01             	add    $0x1,%eax
+ a72:	8b 14 85 e0 10 00 00 	mov    0x10e0(,%eax,4),%edx
+ a79:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ a7f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ a85:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ a87:	89 d1                	mov    %edx,%ecx
+ a89:	83 e2 01             	and    $0x1,%edx
+ a8c:	d1 e9                	shr    %ecx
+ a8e:	33 0c 85 50 0d 00 00 	xor    0xd50(,%eax,4),%ecx
+ a95:	33 0c 95 74 0d 00 00 	xor    0xd74(,%edx,4),%ecx
+ a9c:	89 0c 85 dc 10 00 00 	mov    %ecx,0x10dc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ aa3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ aa8:	75 be                	jne    a68 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ aaa:	8b 0d e0 10 00 00    	mov    0x10e0,%ecx
+ ab0:	a1 9c 1a 00 00       	mov    0x1a9c,%eax
+ ab5:	89 ca                	mov    %ecx,%edx
+ ab7:	25 00 00 00 80       	and    $0x80000000,%eax
+ abc:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ ac2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ ac4:	89 c2                	mov    %eax,%edx
+ ac6:	83 e0 01             	and    $0x1,%eax
+ ac9:	d1 ea                	shr    %edx
+ acb:	33 15 10 17 00 00    	xor    0x1710,%edx
+ ad1:	33 14 85 74 0d 00 00 	xor    0xd74(,%eax,4),%edx
+ ad8:	89 15 9c 1a 00 00    	mov    %edx,0x1a9c
+ ade:	ba 01 00 00 00       	mov    $0x1,%edx
+ ae3:	e9 ee fe ff ff       	jmp    9d6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ ae8:	b8 e4 10 00 00       	mov    $0x10e4,%eax
+ aed:	b9 9c 1a 00 00       	mov    $0x1a9c,%ecx
+ af2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ af7:	c7 05 e0 10 00 00 05 	movl   $0x1105,0x10e0
+ afe:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ b01:	eb 08                	jmp    b0b <genrand+0x14b>
+ b03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ b07:	90                   	nop
+ b08:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ b0b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ b11:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ b13:	39 c1                	cmp    %eax,%ecx
+ b15:	75 f1                	jne    b08 <genrand+0x148>
+ b17:	e9 f8 fe ff ff       	jmp    a14 <genrand+0x54>
+ b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000b20 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ b20:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ b21:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ b23:	89 e5                	mov    %esp,%ebp
+ b25:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ b26:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ b29:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ b2a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ b2f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ b32:	89 d8                	mov    %ebx,%eax
+ b34:	f7 f1                	div    %ecx
+ b36:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ b38:	29 d3                	sub    %edx,%ebx
+ b3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ b40:	e8 7b fe ff ff       	call   9c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ b45:	39 d8                	cmp    %ebx,%eax
+ b47:	73 f7                	jae    b40 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ b49:	31 d2                	xor    %edx,%edx
+}
+ b4b:	5b                   	pop    %ebx
+  return x/bin_size;
+ b4c:	f7 f6                	div    %esi
+}
+ b4e:	5e                   	pop    %esi
+ b4f:	5d                   	pop    %ebp
+ b50:	c3                   	ret    
+ b51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ b5f:	90                   	nop
+
+00000b60 <randomrange>:
+
+int randomrange(int low, int high){
+ b60:	55                   	push   %ebp
+ b61:	89 e5                	mov    %esp,%ebp
+ b63:	57                   	push   %edi
+ b64:	56                   	push   %esi
+ b65:	53                   	push   %ebx
+ b66:	83 ec 0c             	sub    $0xc,%esp
+ b69:	8b 75 08             	mov    0x8(%ebp),%esi
+ b6c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ b6f:	39 f0                	cmp    %esi,%eax
+ b71:	7d 06                	jge    b79 <randomrange+0x19>
+ b73:	89 f2                	mov    %esi,%edx
+ b75:	89 c6                	mov    %eax,%esi
+ b77:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ b79:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ b7b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ b80:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ b82:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ b85:	89 d8                	mov    %ebx,%eax
+ b87:	f7 f1                	div    %ecx
+ b89:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ b8b:	29 d3                	sub    %edx,%ebx
+ b8d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ b90:	e8 2b fe ff ff       	call   9c0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ b95:	39 d8                	cmp    %ebx,%eax
+ b97:	73 f7                	jae    b90 <randomrange+0x30>
+  return x/bin_size;
+ b99:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ b9b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ b9e:	f7 f7                	div    %edi
+}
+ ba0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ ba1:	01 f0                	add    %esi,%eax
+}
+ ba3:	5e                   	pop    %esi
+ ba4:	5f                   	pop    %edi
+ ba5:	5d                   	pop    %ebp
+ ba6:	c3                   	ret    
diff -ruN xv6-public/test_scheduler.c xv6-public-with-hybrid/test_scheduler.c
--- xv6-public/test_scheduler.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_scheduler.c	2022-10-07 18:25:20.191739691 +0530
@@ -0,0 +1,80 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int useless;
+
+int
+main(int argv, char* argc[]){
+
+	if(argv<2){
+		printf(1, "Incorrect format!\nFormat: test_scheduler <number of fork processes>\n");
+
+		exit();
+	}
+
+	int n=atoi(argc[1]);
+
+	int burst_times[n];
+
+	for(int i=0;i<n;i++){
+		burst_times[i] = randomrange(1,1000);
+	}
+
+	printf(1, "\tPID \t Type \t Burst Time \t Context Switches\n");
+	printf(1, "\t___ \t ____ \t __________ \t ________________\n\n");
+
+	for(int i=0;i<n;i++){
+		if(!fork()){
+
+			if(i%2){
+				// CPU Bound process
+				set_burst_time(burst_times[i]);
+
+				int it=0;
+				for(int j=0;j<100;j++){
+					for(int k=0;k<2000000;k++){
+						if((j+k)%2)it++;
+						else it--;
+					}
+				}
+				useless+=it;
+
+
+			
+				struct processInfo info;
+				getCurrentInfo(&info);
+				int bt = get_burst_time();
+				if(bt<10)
+					printf(1, "\t%d \t CPU         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+				else
+					printf(1, "\t%d \t CPU         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+				exit();	
+
+
+			} else {
+				// I/O Bound Process
+				set_burst_time(burst_times[i]);
+
+				for(int i=0;i<10;i++){
+					sleep(1);
+				}
+
+							
+				struct processInfo info;
+				getCurrentInfo(&info);
+				int bt = get_burst_time();
+				if(bt<10)
+					printf(1, "\t%d \t I/O         %d                  %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+				else
+					printf(1, "\t%d \t I/O         %d                 %d\n", getCurrentPID(), bt, info.numberContextSwitches);
+				exit();
+
+			}
+		}
+	}
+
+	while(wait()!=-1);
+	exit();
+
+}
diff -ruN xv6-public/test_scheduler.d xv6-public-with-hybrid/test_scheduler.d
--- xv6-public/test_scheduler.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_scheduler.d	2022-10-07 18:50:03.552944224 +0530
@@ -0,0 +1,2 @@
+test_scheduler.o: test_scheduler.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/test_scheduler.o and xv6-public-with-hybrid/test_scheduler.o differ
diff -ruN xv6-public/test_scheduler.sym xv6-public-with-hybrid/test_scheduler.sym
--- xv6-public/test_scheduler.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/test_scheduler.sym	2022-10-07 18:50:03.664943891 +0530
@@ -0,0 +1,65 @@
+00000000 test_scheduler.c
+00000000 ulib.c
+00000000 printf.c
+000005a0 printint
+00000d60 digits.0
+00000000 umalloc.c
+000010c4 freep
+000010c8 base
+00000000 random.c
+000010e0 mt
+000010a4 mti
+00000d74 mag01.0
+00000250 strcpy
+00000980 sgenrand
+00000650 printf
+00000553 thread_exit
+00000470 memmove
+000004eb mknod
+00000370 gets
+00000523 getpid
+00000880 malloc
+00000533 sleep
+00000583 get_burst_time
+00000b20 random_at_most
+0000058b getCurrentInfo
+000004b3 pipe
+000004c3 write
+000004fb fstat
+000004d3 kill
+00000513 chdir
+000004db exec
+000004ab wait
+000004bb read
+000004f3 unlink
+0000049b fork
+0000052b sbrk
+0000053b uptime
+000010a8 __bss_start
+00000310 memset
+00000000 main
+0000057b set_burst_time
+00000280 strcmp
+0000051b dup
+0000056b getMaxPid
+000009c0 genrand
+00000563 getNumProc
+00000573 getProcInfo
+000003e0 stat
+000010a8 _edata
+00001aa0 _end
+000010c0 useless
+00000503 link
+000004a3 exit
+00000430 atoi
+0000055b draw
+000002e0 strlen
+000004e3 open
+00000330 strchr
+00000543 thread_create
+00000593 getCurrentPID
+00000b60 randomrange
+0000050b mkdir
+000004cb close
+0000054b thread_join
+000007f0 free
Binary files xv6-public/_thread and xv6-public-with-hybrid/_thread differ
diff -ruN xv6-public/thread.asm xv6-public-with-hybrid/thread.asm
--- xv6-public/thread.asm	2022-09-06 09:47:11.010712000 +0530
+++ xv6-public-with-hybrid/thread.asm	2022-10-07 18:50:02.404947615 +0530
@@ -23,7 +23,7 @@
   11:	83 ec 64             	sub    $0x64,%esp
 
     //thread_spin_init(&lock);
-    //thread_mutex_init(&lock);
+    thread_mutex_init(&lock);
 
     struct balance b1 = {"b1", 3200};
   14:	c7 45 a0 62 31 00 00 	movl   $0x3162,-0x60(%ebp)
@@ -34,1397 +34,1749 @@
 
     s1 = malloc(4096);
   1b:	68 00 10 00 00       	push   $0x1000
+    m->lock = 0;
+  20:	c7 05 a4 11 00 00 00 	movl   $0x0,0x11a4
+  27:	00 00 00 
+    m->name = "null";
+  2a:	c7 05 a8 11 00 00 7b 	movl   $0xc7b,0x11a8
+  31:	0c 00 00 
     struct balance b1 = {"b1", 3200};
-  20:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
-  27:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
-  2e:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
-  35:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
-  3c:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
-  43:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
-  4a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-  51:	c7 45 c0 80 0c 00 00 	movl   $0xc80,-0x40(%ebp)
+  34:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  3b:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
+  42:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
+  49:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
+  50:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
+  57:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
+  5e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+  65:	c7 45 c0 80 0c 00 00 	movl   $0xc80,-0x40(%ebp)
     struct balance b2 = {"b2", 2800};
-  58:	c7 45 c4 62 32 00 00 	movl   $0x3262,-0x3c(%ebp)
-  5f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
-  66:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
-  6d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
-  74:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
-  7b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
-  82:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
-  89:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-  90:	c7 45 e4 f0 0a 00 00 	movl   $0xaf0,-0x1c(%ebp)
+  6c:	c7 45 c4 62 32 00 00 	movl   $0x3262,-0x3c(%ebp)
+  73:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
+  7a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+  81:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
+  88:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+  8f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
+  96:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  9d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  a4:	c7 45 e4 f0 0a 00 00 	movl   $0xaf0,-0x1c(%ebp)
     s1 = malloc(4096);
-  97:	e8 f4 07 00 00       	call   890 <malloc>
+  ab:	e8 80 08 00 00       	call   930 <malloc>
     s2 = malloc(4096);
-  9c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  b0:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
     s1 = malloc(4096);
-  a3:	89 c3                	mov    %eax,%ebx
+  b7:	89 c3                	mov    %eax,%ebx
     s2 = malloc(4096);
-  a5:	e8 e6 07 00 00       	call   890 <malloc>
+  b9:	e8 72 08 00 00       	call   930 <malloc>
 
     t1 = thread_create(do_work, (void*)&b1, s1);
-  aa:	83 c4 0c             	add    $0xc,%esp
+  be:	83 c4 0c             	add    $0xc,%esp
     s2 = malloc(4096);
-  ad:	89 c6                	mov    %eax,%esi
+  c1:	89 c6                	mov    %eax,%esi
     t1 = thread_create(do_work, (void*)&b1, s1);
-  af:	8d 45 a0             	lea    -0x60(%ebp),%eax
-  b2:	53                   	push   %ebx
-  b3:	50                   	push   %eax
-  b4:	68 10 01 00 00       	push   $0x110
-  b9:	e8 c5 04 00 00       	call   583 <thread_create>
+  c3:	8d 45 a0             	lea    -0x60(%ebp),%eax
+  c6:	53                   	push   %ebx
+  c7:	50                   	push   %eax
+  c8:	68 30 01 00 00       	push   $0x130
+  cd:	e8 21 05 00 00       	call   5f3 <thread_create>
     t2 = thread_create(do_work, (void*)&b2, s2);
-  be:	83 c4 0c             	add    $0xc,%esp
+  d2:	83 c4 0c             	add    $0xc,%esp
     t1 = thread_create(do_work, (void*)&b1, s1);
-  c1:	89 c3                	mov    %eax,%ebx
+  d5:	89 c3                	mov    %eax,%ebx
     t2 = thread_create(do_work, (void*)&b2, s2);
-  c3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-  c6:	56                   	push   %esi
-  c7:	50                   	push   %eax
-  c8:	68 10 01 00 00       	push   $0x110
-  cd:	e8 b1 04 00 00       	call   583 <thread_create>
-  d2:	89 c7                	mov    %eax,%edi
+  d7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+  da:	56                   	push   %esi
+  db:	50                   	push   %eax
+  dc:	68 30 01 00 00       	push   $0x130
+  e1:	e8 0d 05 00 00       	call   5f3 <thread_create>
+  e6:	89 c7                	mov    %eax,%edi
 
     r1 = thread_join();
-  d4:	e8 b2 04 00 00       	call   58b <thread_join>
-  d9:	89 c6                	mov    %eax,%esi
+  e8:	e8 0e 05 00 00       	call   5fb <thread_join>
+  ed:	89 c6                	mov    %eax,%esi
     r2 = thread_join();
-  db:	e8 ab 04 00 00       	call   58b <thread_join>
+  ef:	e8 07 05 00 00       	call   5fb <thread_join>
 
     printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
-  e0:	8b 15 0c 0e 00 00    	mov    0xe0c,%edx
-  e6:	83 c4 0c             	add    $0xc,%esp
-  e9:	52                   	push   %edx
-  ea:	50                   	push   %eax
-  eb:	57                   	push   %edi
-  ec:	56                   	push   %esi
-  ed:	53                   	push   %ebx
-  ee:	68 b0 09 00 00       	push   $0x9b0
-  f3:	6a 01                	push   $0x1
-  f5:	e8 66 05 00 00       	call   660 <printf>
+  f4:	8b 15 a0 11 00 00    	mov    0x11a0,%edx
+  fa:	83 c4 0c             	add    $0xc,%esp
+  fd:	52                   	push   %edx
+  fe:	50                   	push   %eax
+  ff:	57                   	push   %edi
+ 100:	56                   	push   %esi
+ 101:	53                   	push   %ebx
+ 102:	68 80 0c 00 00       	push   $0xc80
+ 107:	6a 01                	push   $0x1
+ 109:	e8 f2 05 00 00       	call   700 <printf>
     t1, r1, t2, r2, total_balance);
+    int num = getNumProc();
+ 10e:	83 c4 20             	add    $0x20,%esp
+ 111:	e8 fd 04 00 00       	call   613 <getNumProc>
+    printf(1,"Number of Active Processes = %d\n",num);
+ 116:	83 ec 04             	sub    $0x4,%esp
+ 119:	50                   	push   %eax
+ 11a:	68 b8 0c 00 00       	push   $0xcb8
+ 11f:	6a 01                	push   $0x1
+ 121:	e8 da 05 00 00       	call   700 <printf>
     exit();
-  fa:	83 c4 20             	add    $0x20,%esp
-  fd:	e8 e1 03 00 00       	call   4e3 <exit>
- 102:	66 90                	xchg   %ax,%ax
- 104:	66 90                	xchg   %ax,%ax
- 106:	66 90                	xchg   %ax,%ax
- 108:	66 90                	xchg   %ax,%ax
- 10a:	66 90                	xchg   %ax,%ax
- 10c:	66 90                	xchg   %ax,%ax
- 10e:	66 90                	xchg   %ax,%ax
-
-00000110 <do_work>:
-{
- 110:	55                   	push   %ebp
- 111:	89 e5                	mov    %esp,%ebp
- 113:	56                   	push   %esi
- 114:	53                   	push   %ebx
- 115:	8b 75 08             	mov    0x8(%ebp),%esi
-    printf(1, "Starting do_work: s:%s\n", b->name);
- 118:	83 ec 04             	sub    $0x4,%esp
- 11b:	56                   	push   %esi
- 11c:	68 88 09 00 00       	push   $0x988
- 121:	6a 01                	push   $0x1
- 123:	e8 38 05 00 00       	call   660 <printf>
+ 126:	e8 28 04 00 00       	call   553 <exit>
+ 12b:	66 90                	xchg   %ax,%ax
+ 12d:	66 90                	xchg   %ax,%ax
+ 12f:	90                   	nop
+
+00000130 <do_work>:
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	56                   	push   %esi
+ 135:	31 f6                	xor    %esi,%esi
+ 137:	53                   	push   %ebx
+ 138:	bb 01 00 00 00       	mov    $0x1,%ebx
+ 13d:	83 ec 10             	sub    $0x10,%esp
+ 140:	8b 7d 08             	mov    0x8(%ebp),%edi
+    printf(1, "Starting do_work: s:%x\n", b->name);
+ 143:	57                   	push   %edi
+ 144:	68 58 0c 00 00       	push   $0xc58
+ 149:	6a 01                	push   $0x1
+ 14b:	e8 b0 05 00 00       	call   700 <printf>
     for (i = 0; i < b->amount; i++){
- 128:	8b 5e 20             	mov    0x20(%esi),%ebx
- 12b:	83 c4 10             	add    $0x10,%esp
- 12e:	85 db                	test   %ebx,%ebx
- 130:	7e 2b                	jle    15d <do_work+0x4d>
- 132:	31 c9                	xor    %ecx,%ecx
- 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 150:	8b 47 20             	mov    0x20(%edi),%eax
+ 153:	83 c4 10             	add    $0x10,%esp
+ 156:	85 c0                	test   %eax,%eax
+ 158:	7e 6b                	jle    1c5 <do_work+0x95>
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    asm volatile("lock; xchgl %0, %1" :
+ 160:	89 d8                	mov    %ebx,%eax
+ 162:	f0 87 05 a4 11 00 00 	lock xchg %eax,0x11a4
+    while(xchg(&m->lock,1)!=0){
+ 169:	85 c0                	test   %eax,%eax
+ 16b:	74 1d                	je     18a <do_work+0x5a>
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+        sleep(1);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	6a 01                	push   $0x1
+ 175:	e8 69 04 00 00       	call   5e3 <sleep>
+    asm volatile("lock; xchgl %0, %1" :
+ 17a:	89 d8                	mov    %ebx,%eax
+ 17c:	f0 87 05 a4 11 00 00 	lock xchg %eax,0x11a4
+    while(xchg(&m->lock,1)!=0){
+ 183:	83 c4 10             	add    $0x10,%esp
+ 186:	85 c0                	test   %eax,%eax
+ 188:	75 e6                	jne    170 <do_work+0x40>
+    __sync_synchronize();
+ 18a:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
         old = total_balance;
- 138:	8b 15 0c 0e 00 00    	mov    0xe0c,%edx
- 13e:	b8 a0 86 01 00       	mov    $0x186a0,%eax
- 143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 147:	90                   	nop
+ 18f:	b8 a0 86 01 00       	mov    $0x186a0,%eax
+ 194:	8b 15 a0 11 00 00    	mov    0x11a0,%edx
+    for (i = 0; i < d; i++)
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     __asm volatile( "nop" ::: );
- 148:	90                   	nop
+ 1a0:	90                   	nop
     for (i = 0; i < d; i++)
- 149:	83 e8 01             	sub    $0x1,%eax
- 14c:	75 fa                	jne    148 <do_work+0x38>
-        total_balance = old + 1;
- 14e:	8d 42 01             	lea    0x1(%edx),%eax
-    for (i = 0; i < b->amount; i++){
- 151:	83 c1 01             	add    $0x1,%ecx
+ 1a1:	83 e8 01             	sub    $0x1,%eax
+ 1a4:	75 fa                	jne    1a0 <do_work+0x70>
         total_balance = old + 1;
- 154:	a3 0c 0e 00 00       	mov    %eax,0xe0c
+ 1a6:	8d 42 01             	lea    0x1(%edx),%eax
+ 1a9:	a3 a0 11 00 00       	mov    %eax,0x11a0
+    __sync_synchronize();
+ 1ae:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+    asm volatile("movl $0, %0" : "+m" (m->lock) : );
+ 1b3:	c7 05 a4 11 00 00 00 	movl   $0x0,0x11a4
+ 1ba:	00 00 00 
     for (i = 0; i < b->amount; i++){
- 159:	39 d9                	cmp    %ebx,%ecx
- 15b:	75 db                	jne    138 <do_work+0x28>
+ 1bd:	83 c6 01             	add    $0x1,%esi
+ 1c0:	39 77 20             	cmp    %esi,0x20(%edi)
+ 1c3:	7f 9b                	jg     160 <do_work+0x30>
     printf(1, "Done s:%x\n", b->name);
- 15d:	83 ec 04             	sub    $0x4,%esp
- 160:	56                   	push   %esi
- 161:	68 a0 09 00 00       	push   $0x9a0
- 166:	6a 01                	push   $0x1
- 168:	e8 f3 04 00 00       	call   660 <printf>
+ 1c5:	83 ec 04             	sub    $0x4,%esp
+ 1c8:	57                   	push   %edi
+ 1c9:	68 70 0c 00 00       	push   $0xc70
+ 1ce:	6a 01                	push   $0x1
+ 1d0:	e8 2b 05 00 00       	call   700 <printf>
     thread_exit();
- 16d:	83 c4 10             	add    $0x10,%esp
+ 1d5:	83 c4 10             	add    $0x10,%esp
 }
- 170:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 173:	5b                   	pop    %ebx
- 174:	5e                   	pop    %esi
- 175:	5d                   	pop    %ebp
+ 1d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1db:	5b                   	pop    %ebx
+ 1dc:	5e                   	pop    %esi
+ 1dd:	5f                   	pop    %edi
+ 1de:	5d                   	pop    %ebp
     thread_exit();
- 176:	e9 18 04 00 00       	jmp    593 <thread_exit>
- 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 17f:	90                   	nop
+ 1df:	e9 1f 04 00 00       	jmp    603 <thread_exit>
+ 1e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
 
-00000180 <thread_spin_init>:
+000001f0 <thread_spin_init>:
 void thread_spin_init(struct thread_spinlock *lk){
- 180:	55                   	push   %ebp
- 181:	89 e5                	mov    %esp,%ebp
- 183:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
     lk->lock = 0;
- 186:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+ 1f6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     lk->name = "null";
- 18c:	c7 40 04 ab 09 00 00 	movl   $0x9ab,0x4(%eax)
+ 1fc:	c7 40 04 7b 0c 00 00 	movl   $0xc7b,0x4(%eax)
 }
- 193:	5d                   	pop    %ebp
- 194:	c3                   	ret    
- 195:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 203:	5d                   	pop    %ebp
+ 204:	c3                   	ret    
+ 205:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000001a0 <thread_spin_lock>:
+00000210 <thread_spin_lock>:
 void thread_spin_lock(struct thread_spinlock *lk){
- 1a0:	55                   	push   %ebp
+ 210:	55                   	push   %ebp
     asm volatile("lock; xchgl %0, %1" :
- 1a1:	b9 01 00 00 00       	mov    $0x1,%ecx
+ 211:	b9 01 00 00 00       	mov    $0x1,%ecx
 void thread_spin_lock(struct thread_spinlock *lk){
- 1a6:	89 e5                	mov    %esp,%ebp
- 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
- 1ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1af:	90                   	nop
+ 216:	89 e5                	mov    %esp,%ebp
+ 218:	8b 55 08             	mov    0x8(%ebp),%edx
+ 21b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 21f:	90                   	nop
     asm volatile("lock; xchgl %0, %1" :
- 1b0:	89 c8                	mov    %ecx,%eax
- 1b2:	f0 87 02             	lock xchg %eax,(%edx)
+ 220:	89 c8                	mov    %ecx,%eax
+ 222:	f0 87 02             	lock xchg %eax,(%edx)
     while(xchg(&lk->lock,1)!=0);
- 1b5:	85 c0                	test   %eax,%eax
- 1b7:	75 f7                	jne    1b0 <thread_spin_lock+0x10>
+ 225:	85 c0                	test   %eax,%eax
+ 227:	75 f7                	jne    220 <thread_spin_lock+0x10>
     __sync_synchronize();
- 1b9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+ 229:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
 }
- 1be:	5d                   	pop    %ebp
- 1bf:	c3                   	ret    
+ 22e:	5d                   	pop    %ebp
+ 22f:	c3                   	ret    
 
-000001c0 <thread_spin_unlock>:
+00000230 <thread_spin_unlock>:
 void thread_spin_unlock(struct thread_spinlock *lk){
- 1c0:	55                   	push   %ebp
- 1c1:	89 e5                	mov    %esp,%ebp
- 1c3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	8b 45 08             	mov    0x8(%ebp),%eax
     __sync_synchronize();
- 1c6:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+ 236:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
     asm volatile("movl $0, %0" : "+m" (lk->lock) : );
- 1cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+ 23b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 }
- 1d1:	5d                   	pop    %ebp
- 1d2:	c3                   	ret    
- 1d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000001e0 <thread_mutex_init>:
-void thread_mutex_init(struct thread_mutex *lk){
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
-    lk->lock = 0;
- 1e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-    lk->name = "null";
- 1ec:	c7 40 04 ab 09 00 00 	movl   $0x9ab,0x4(%eax)
-}
- 1f3:	5d                   	pop    %ebp
- 1f4:	c3                   	ret    
- 1f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000200 <thread_mutex_lock>:
-void thread_mutex_lock(struct thread_mutex *lk){
- 200:	55                   	push   %ebp
+ 241:	5d                   	pop    %ebp
+ 242:	c3                   	ret    
+ 243:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000250 <thread_mutex_init>:
+void thread_mutex_init(struct thread_mutex *m){
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	8b 45 08             	mov    0x8(%ebp),%eax
+    m->lock = 0;
+ 256:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+    m->name = "null";
+ 25c:	c7 40 04 7b 0c 00 00 	movl   $0xc7b,0x4(%eax)
+}
+ 263:	5d                   	pop    %ebp
+ 264:	c3                   	ret    
+ 265:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <thread_mutex_lock>:
+void thread_mutex_lock(struct thread_mutex *m){
+ 270:	55                   	push   %ebp
     asm volatile("lock; xchgl %0, %1" :
- 201:	b8 01 00 00 00       	mov    $0x1,%eax
-void thread_mutex_lock(struct thread_mutex *lk){
- 206:	89 e5                	mov    %esp,%ebp
- 208:	56                   	push   %esi
- 209:	53                   	push   %ebx
- 20a:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 271:	b8 01 00 00 00       	mov    $0x1,%eax
+void thread_mutex_lock(struct thread_mutex *m){
+ 276:	89 e5                	mov    %esp,%ebp
+ 278:	56                   	push   %esi
+ 279:	53                   	push   %ebx
+ 27a:	8b 5d 08             	mov    0x8(%ebp),%ebx
     asm volatile("lock; xchgl %0, %1" :
- 20d:	f0 87 03             	lock xchg %eax,(%ebx)
+ 27d:	f0 87 03             	lock xchg %eax,(%ebx)
     return result;
- 210:	be 01 00 00 00       	mov    $0x1,%esi
-    while(xchg(&lk->lock,1)!=0){
- 215:	85 c0                	test   %eax,%eax
- 217:	74 1d                	je     236 <thread_mutex_lock+0x36>
- 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 280:	be 01 00 00 00       	mov    $0x1,%esi
+    while(xchg(&m->lock,1)!=0){
+ 285:	85 c0                	test   %eax,%eax
+ 287:	74 1d                	je     2a6 <thread_mutex_lock+0x36>
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         sleep(1);
- 220:	83 ec 0c             	sub    $0xc,%esp
- 223:	6a 01                	push   $0x1
- 225:	e8 49 03 00 00       	call   573 <sleep>
+ 290:	83 ec 0c             	sub    $0xc,%esp
+ 293:	6a 01                	push   $0x1
+ 295:	e8 49 03 00 00       	call   5e3 <sleep>
     asm volatile("lock; xchgl %0, %1" :
- 22a:	89 f0                	mov    %esi,%eax
- 22c:	f0 87 03             	lock xchg %eax,(%ebx)
-    while(xchg(&lk->lock,1)!=0){
- 22f:	83 c4 10             	add    $0x10,%esp
- 232:	85 c0                	test   %eax,%eax
- 234:	75 ea                	jne    220 <thread_mutex_lock+0x20>
+ 29a:	89 f0                	mov    %esi,%eax
+ 29c:	f0 87 03             	lock xchg %eax,(%ebx)
+    while(xchg(&m->lock,1)!=0){
+ 29f:	83 c4 10             	add    $0x10,%esp
+ 2a2:	85 c0                	test   %eax,%eax
+ 2a4:	75 ea                	jne    290 <thread_mutex_lock+0x20>
     __sync_synchronize();
- 236:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+ 2a6:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
 }
- 23b:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 23e:	5b                   	pop    %ebx
- 23f:	5e                   	pop    %esi
- 240:	5d                   	pop    %ebp
- 241:	c3                   	ret    
- 242:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2ae:	5b                   	pop    %ebx
+ 2af:	5e                   	pop    %esi
+ 2b0:	5d                   	pop    %ebp
+ 2b1:	c3                   	ret    
+ 2b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000250 <thread_mutex_unlock>:
-void thread_mutex_unlock(struct thread_mutex *lk){
- 250:	55                   	push   %ebp
- 251:	89 e5                	mov    %esp,%ebp
- 253:	8b 45 08             	mov    0x8(%ebp),%eax
+000002c0 <thread_mutex_unlock>:
+void thread_mutex_unlock(struct thread_mutex *m){
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	8b 45 08             	mov    0x8(%ebp),%eax
     __sync_synchronize();
- 256:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
- 25b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-}
- 261:	5d                   	pop    %ebp
- 262:	c3                   	ret    
- 263:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 26a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 2c6:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+    asm volatile("movl $0, %0" : "+m" (m->lock) : );
+ 2cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+}
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000270 <delay>:
+000002e0 <delay>:
 volatile unsigned int delay (unsigned int d){
- 270:	55                   	push   %ebp
- 271:	89 e5                	mov    %esp,%ebp
- 273:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	8b 55 08             	mov    0x8(%ebp),%edx
     for (i = 0; i < d; i++)
- 276:	85 d2                	test   %edx,%edx
- 278:	74 0e                	je     288 <delay+0x18>
- 27a:	31 c0                	xor    %eax,%eax
- 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2e6:	85 d2                	test   %edx,%edx
+ 2e8:	74 0e                	je     2f8 <delay+0x18>
+ 2ea:	31 c0                	xor    %eax,%eax
+ 2ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     __asm volatile( "nop" ::: );
- 280:	90                   	nop
+ 2f0:	90                   	nop
     for (i = 0; i < d; i++)
- 281:	83 c0 01             	add    $0x1,%eax
- 284:	39 c2                	cmp    %eax,%edx
- 286:	75 f8                	jne    280 <delay+0x10>
-}
- 288:	89 d0                	mov    %edx,%eax
- 28a:	5d                   	pop    %ebp
- 28b:	c3                   	ret    
- 28c:	66 90                	xchg   %ax,%ax
- 28e:	66 90                	xchg   %ax,%ax
+ 2f1:	83 c0 01             	add    $0x1,%eax
+ 2f4:	39 c2                	cmp    %eax,%edx
+ 2f6:	75 f8                	jne    2f0 <delay+0x10>
+}
+ 2f8:	89 d0                	mov    %edx,%eax
+ 2fa:	5d                   	pop    %ebp
+ 2fb:	c3                   	ret    
+ 2fc:	66 90                	xchg   %ax,%ax
+ 2fe:	66 90                	xchg   %ax,%ax
 
-00000290 <strcpy>:
+00000300 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
- 290:	55                   	push   %ebp
+ 300:	55                   	push   %ebp
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
- 291:	31 c0                	xor    %eax,%eax
+ 301:	31 c0                	xor    %eax,%eax
 {
- 293:	89 e5                	mov    %esp,%ebp
- 295:	53                   	push   %ebx
- 296:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 299:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 303:	89 e5                	mov    %esp,%ebp
+ 305:	53                   	push   %ebx
+ 306:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 309:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while((*s++ = *t++) != 0)
- 2a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 2a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 2a7:	83 c0 01             	add    $0x1,%eax
- 2aa:	84 d2                	test   %dl,%dl
- 2ac:	75 f2                	jne    2a0 <strcpy+0x10>
+ 310:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 314:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 317:	83 c0 01             	add    $0x1,%eax
+ 31a:	84 d2                	test   %dl,%dl
+ 31c:	75 f2                	jne    310 <strcpy+0x10>
     ;
   return os;
 }
- 2ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 2b1:	89 c8                	mov    %ecx,%eax
- 2b3:	c9                   	leave  
- 2b4:	c3                   	ret    
- 2b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 321:	89 c8                	mov    %ecx,%eax
+ 323:	c9                   	leave  
+ 324:	c3                   	ret    
+ 325:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000002c0 <strcmp>:
+00000330 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
- 2c0:	55                   	push   %ebp
- 2c1:	89 e5                	mov    %esp,%ebp
- 2c3:	53                   	push   %ebx
- 2c4:	8b 55 08             	mov    0x8(%ebp),%edx
- 2c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	53                   	push   %ebx
+ 334:	8b 55 08             	mov    0x8(%ebp),%edx
+ 337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   while(*p && *p == *q)
- 2ca:	0f b6 02             	movzbl (%edx),%eax
- 2cd:	84 c0                	test   %al,%al
- 2cf:	75 17                	jne    2e8 <strcmp+0x28>
- 2d1:	eb 3a                	jmp    30d <strcmp+0x4d>
- 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2d7:	90                   	nop
- 2d8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+ 33a:	0f b6 02             	movzbl (%edx),%eax
+ 33d:	84 c0                	test   %al,%al
+ 33f:	75 17                	jne    358 <strcmp+0x28>
+ 341:	eb 3a                	jmp    37d <strcmp+0x4d>
+ 343:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 347:	90                   	nop
+ 348:	0f b6 42 01          	movzbl 0x1(%edx),%eax
     p++, q++;
- 2dc:	83 c2 01             	add    $0x1,%edx
- 2df:	8d 59 01             	lea    0x1(%ecx),%ebx
+ 34c:	83 c2 01             	add    $0x1,%edx
+ 34f:	8d 59 01             	lea    0x1(%ecx),%ebx
   while(*p && *p == *q)
- 2e2:	84 c0                	test   %al,%al
- 2e4:	74 1a                	je     300 <strcmp+0x40>
+ 352:	84 c0                	test   %al,%al
+ 354:	74 1a                	je     370 <strcmp+0x40>
     p++, q++;
- 2e6:	89 d9                	mov    %ebx,%ecx
+ 356:	89 d9                	mov    %ebx,%ecx
   while(*p && *p == *q)
- 2e8:	0f b6 19             	movzbl (%ecx),%ebx
- 2eb:	38 c3                	cmp    %al,%bl
- 2ed:	74 e9                	je     2d8 <strcmp+0x18>
+ 358:	0f b6 19             	movzbl (%ecx),%ebx
+ 35b:	38 c3                	cmp    %al,%bl
+ 35d:	74 e9                	je     348 <strcmp+0x18>
   return (uchar)*p - (uchar)*q;
- 2ef:	29 d8                	sub    %ebx,%eax
+ 35f:	29 d8                	sub    %ebx,%eax
 }
- 2f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 2f4:	c9                   	leave  
- 2f5:	c3                   	ret    
- 2f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 361:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 364:	c9                   	leave  
+ 365:	c3                   	ret    
+ 366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36d:	8d 76 00             	lea    0x0(%esi),%esi
   return (uchar)*p - (uchar)*q;
- 300:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 304:	31 c0                	xor    %eax,%eax
- 306:	29 d8                	sub    %ebx,%eax
-}
- 308:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 30b:	c9                   	leave  
- 30c:	c3                   	ret    
+ 370:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 374:	31 c0                	xor    %eax,%eax
+ 376:	29 d8                	sub    %ebx,%eax
+}
+ 378:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 37b:	c9                   	leave  
+ 37c:	c3                   	ret    
   return (uchar)*p - (uchar)*q;
- 30d:	0f b6 19             	movzbl (%ecx),%ebx
- 310:	31 c0                	xor    %eax,%eax
- 312:	eb db                	jmp    2ef <strcmp+0x2f>
- 314:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 31f:	90                   	nop
+ 37d:	0f b6 19             	movzbl (%ecx),%ebx
+ 380:	31 c0                	xor    %eax,%eax
+ 382:	eb db                	jmp    35f <strcmp+0x2f>
+ 384:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 38b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 38f:	90                   	nop
 
-00000320 <strlen>:
+00000390 <strlen>:
 
 uint
 strlen(const char *s)
 {
- 320:	55                   	push   %ebp
- 321:	89 e5                	mov    %esp,%ebp
- 323:	8b 55 08             	mov    0x8(%ebp),%edx
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   for(n = 0; s[n]; n++)
- 326:	80 3a 00             	cmpb   $0x0,(%edx)
- 329:	74 15                	je     340 <strlen+0x20>
- 32b:	31 c0                	xor    %eax,%eax
- 32d:	8d 76 00             	lea    0x0(%esi),%esi
- 330:	83 c0 01             	add    $0x1,%eax
- 333:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 337:	89 c1                	mov    %eax,%ecx
- 339:	75 f5                	jne    330 <strlen+0x10>
+ 396:	80 3a 00             	cmpb   $0x0,(%edx)
+ 399:	74 15                	je     3b0 <strlen+0x20>
+ 39b:	31 c0                	xor    %eax,%eax
+ 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3a0:	83 c0 01             	add    $0x1,%eax
+ 3a3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3a7:	89 c1                	mov    %eax,%ecx
+ 3a9:	75 f5                	jne    3a0 <strlen+0x10>
     ;
   return n;
 }
- 33b:	89 c8                	mov    %ecx,%eax
- 33d:	5d                   	pop    %ebp
- 33e:	c3                   	ret    
- 33f:	90                   	nop
+ 3ab:	89 c8                	mov    %ecx,%eax
+ 3ad:	5d                   	pop    %ebp
+ 3ae:	c3                   	ret    
+ 3af:	90                   	nop
   for(n = 0; s[n]; n++)
- 340:	31 c9                	xor    %ecx,%ecx
+ 3b0:	31 c9                	xor    %ecx,%ecx
 }
- 342:	5d                   	pop    %ebp
- 343:	89 c8                	mov    %ecx,%eax
- 345:	c3                   	ret    
- 346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 34d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3b2:	5d                   	pop    %ebp
+ 3b3:	89 c8                	mov    %ecx,%eax
+ 3b5:	c3                   	ret    
+ 3b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000350 <memset>:
+000003c0 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	8b 55 08             	mov    0x8(%ebp),%edx
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
- 357:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 35a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 35d:	89 d7                	mov    %edx,%edi
- 35f:	fc                   	cld    
- 360:	f3 aa                	rep stos %al,%es:(%edi)
+ 3c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3cd:	89 d7                	mov    %edx,%edi
+ 3cf:	fc                   	cld    
+ 3d0:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
- 362:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 365:	89 d0                	mov    %edx,%eax
- 367:	c9                   	leave  
- 368:	c3                   	ret    
- 369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 3d5:	89 d0                	mov    %edx,%eax
+ 3d7:	c9                   	leave  
+ 3d8:	c3                   	ret    
+ 3d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000370 <strchr>:
+000003e0 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	8b 45 08             	mov    0x8(%ebp),%eax
- 376:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+ 3e0:	55                   	push   %ebp
+ 3e1:	89 e5                	mov    %esp,%ebp
+ 3e3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3e6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
   for(; *s; s++)
- 37a:	0f b6 10             	movzbl (%eax),%edx
- 37d:	84 d2                	test   %dl,%dl
- 37f:	75 12                	jne    393 <strchr+0x23>
- 381:	eb 1d                	jmp    3a0 <strchr+0x30>
- 383:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 387:	90                   	nop
- 388:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 38c:	83 c0 01             	add    $0x1,%eax
- 38f:	84 d2                	test   %dl,%dl
- 391:	74 0d                	je     3a0 <strchr+0x30>
+ 3ea:	0f b6 10             	movzbl (%eax),%edx
+ 3ed:	84 d2                	test   %dl,%dl
+ 3ef:	75 12                	jne    403 <strchr+0x23>
+ 3f1:	eb 1d                	jmp    410 <strchr+0x30>
+ 3f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3f7:	90                   	nop
+ 3f8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 3fc:	83 c0 01             	add    $0x1,%eax
+ 3ff:	84 d2                	test   %dl,%dl
+ 401:	74 0d                	je     410 <strchr+0x30>
     if(*s == c)
- 393:	38 d1                	cmp    %dl,%cl
- 395:	75 f1                	jne    388 <strchr+0x18>
+ 403:	38 d1                	cmp    %dl,%cl
+ 405:	75 f1                	jne    3f8 <strchr+0x18>
       return (char*)s;
   return 0;
 }
- 397:	5d                   	pop    %ebp
- 398:	c3                   	ret    
- 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 407:	5d                   	pop    %ebp
+ 408:	c3                   	ret    
+ 409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return 0;
- 3a0:	31 c0                	xor    %eax,%eax
+ 410:	31 c0                	xor    %eax,%eax
 }
- 3a2:	5d                   	pop    %ebp
- 3a3:	c3                   	ret    
- 3a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 3af:	90                   	nop
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
 
-000003b0 <gets>:
+00000420 <gets>:
 
 char*
 gets(char *buf, int max)
 {
- 3b0:	55                   	push   %ebp
- 3b1:	89 e5                	mov    %esp,%ebp
- 3b3:	57                   	push   %edi
- 3b4:	56                   	push   %esi
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
     cc = read(0, &c, 1);
- 3b5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 425:	8d 7d e7             	lea    -0x19(%ebp),%edi
 {
- 3b8:	53                   	push   %ebx
+ 428:	53                   	push   %ebx
   for(i=0; i+1 < max; ){
- 3b9:	31 db                	xor    %ebx,%ebx
+ 429:	31 db                	xor    %ebx,%ebx
 {
- 3bb:	83 ec 1c             	sub    $0x1c,%esp
+ 42b:	83 ec 1c             	sub    $0x1c,%esp
   for(i=0; i+1 < max; ){
- 3be:	eb 27                	jmp    3e7 <gets+0x37>
+ 42e:	eb 27                	jmp    457 <gets+0x37>
     cc = read(0, &c, 1);
- 3c0:	83 ec 04             	sub    $0x4,%esp
- 3c3:	6a 01                	push   $0x1
- 3c5:	57                   	push   %edi
- 3c6:	6a 00                	push   $0x0
- 3c8:	e8 2e 01 00 00       	call   4fb <read>
+ 430:	83 ec 04             	sub    $0x4,%esp
+ 433:	6a 01                	push   $0x1
+ 435:	57                   	push   %edi
+ 436:	6a 00                	push   $0x0
+ 438:	e8 2e 01 00 00       	call   56b <read>
     if(cc < 1)
- 3cd:	83 c4 10             	add    $0x10,%esp
- 3d0:	85 c0                	test   %eax,%eax
- 3d2:	7e 1d                	jle    3f1 <gets+0x41>
+ 43d:	83 c4 10             	add    $0x10,%esp
+ 440:	85 c0                	test   %eax,%eax
+ 442:	7e 1d                	jle    461 <gets+0x41>
       break;
     buf[i++] = c;
- 3d4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 3d8:	8b 55 08             	mov    0x8(%ebp),%edx
- 3db:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+ 444:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 448:	8b 55 08             	mov    0x8(%ebp),%edx
+ 44b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
     if(c == '\n' || c == '\r')
- 3df:	3c 0a                	cmp    $0xa,%al
- 3e1:	74 1d                	je     400 <gets+0x50>
- 3e3:	3c 0d                	cmp    $0xd,%al
- 3e5:	74 19                	je     400 <gets+0x50>
+ 44f:	3c 0a                	cmp    $0xa,%al
+ 451:	74 1d                	je     470 <gets+0x50>
+ 453:	3c 0d                	cmp    $0xd,%al
+ 455:	74 19                	je     470 <gets+0x50>
   for(i=0; i+1 < max; ){
- 3e7:	89 de                	mov    %ebx,%esi
- 3e9:	83 c3 01             	add    $0x1,%ebx
- 3ec:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 3ef:	7c cf                	jl     3c0 <gets+0x10>
+ 457:	89 de                	mov    %ebx,%esi
+ 459:	83 c3 01             	add    $0x1,%ebx
+ 45c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 45f:	7c cf                	jl     430 <gets+0x10>
       break;
   }
   buf[i] = '\0';
- 3f1:	8b 45 08             	mov    0x8(%ebp),%eax
- 3f4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+ 461:	8b 45 08             	mov    0x8(%ebp),%eax
+ 464:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
   return buf;
 }
- 3f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3fb:	5b                   	pop    %ebx
- 3fc:	5e                   	pop    %esi
- 3fd:	5f                   	pop    %edi
- 3fe:	5d                   	pop    %ebp
- 3ff:	c3                   	ret    
+ 468:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 46b:	5b                   	pop    %ebx
+ 46c:	5e                   	pop    %esi
+ 46d:	5f                   	pop    %edi
+ 46e:	5d                   	pop    %ebp
+ 46f:	c3                   	ret    
   buf[i] = '\0';
- 400:	8b 45 08             	mov    0x8(%ebp),%eax
- 403:	89 de                	mov    %ebx,%esi
- 405:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
-}
- 409:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40c:	5b                   	pop    %ebx
- 40d:	5e                   	pop    %esi
- 40e:	5f                   	pop    %edi
- 40f:	5d                   	pop    %ebp
- 410:	c3                   	ret    
- 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
+ 470:	8b 45 08             	mov    0x8(%ebp),%eax
+ 473:	89 de                	mov    %ebx,%esi
+ 475:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 479:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 47c:	5b                   	pop    %ebx
+ 47d:	5e                   	pop    %esi
+ 47e:	5f                   	pop    %edi
+ 47f:	5d                   	pop    %ebp
+ 480:	c3                   	ret    
+ 481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 488:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
 
-00000420 <stat>:
+00000490 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	56                   	push   %esi
- 424:	53                   	push   %ebx
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	56                   	push   %esi
+ 494:	53                   	push   %ebx
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
- 425:	83 ec 08             	sub    $0x8,%esp
- 428:	6a 00                	push   $0x0
- 42a:	ff 75 08             	push   0x8(%ebp)
- 42d:	e8 f1 00 00 00       	call   523 <open>
+ 495:	83 ec 08             	sub    $0x8,%esp
+ 498:	6a 00                	push   $0x0
+ 49a:	ff 75 08             	push   0x8(%ebp)
+ 49d:	e8 f1 00 00 00       	call   593 <open>
   if(fd < 0)
- 432:	83 c4 10             	add    $0x10,%esp
- 435:	85 c0                	test   %eax,%eax
- 437:	78 27                	js     460 <stat+0x40>
+ 4a2:	83 c4 10             	add    $0x10,%esp
+ 4a5:	85 c0                	test   %eax,%eax
+ 4a7:	78 27                	js     4d0 <stat+0x40>
     return -1;
   r = fstat(fd, st);
- 439:	83 ec 08             	sub    $0x8,%esp
- 43c:	ff 75 0c             	push   0xc(%ebp)
- 43f:	89 c3                	mov    %eax,%ebx
- 441:	50                   	push   %eax
- 442:	e8 f4 00 00 00       	call   53b <fstat>
+ 4a9:	83 ec 08             	sub    $0x8,%esp
+ 4ac:	ff 75 0c             	push   0xc(%ebp)
+ 4af:	89 c3                	mov    %eax,%ebx
+ 4b1:	50                   	push   %eax
+ 4b2:	e8 f4 00 00 00       	call   5ab <fstat>
   close(fd);
- 447:	89 1c 24             	mov    %ebx,(%esp)
+ 4b7:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
- 44a:	89 c6                	mov    %eax,%esi
+ 4ba:	89 c6                	mov    %eax,%esi
   close(fd);
- 44c:	e8 ba 00 00 00       	call   50b <close>
+ 4bc:	e8 ba 00 00 00       	call   57b <close>
   return r;
- 451:	83 c4 10             	add    $0x10,%esp
+ 4c1:	83 c4 10             	add    $0x10,%esp
 }
- 454:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 457:	89 f0                	mov    %esi,%eax
- 459:	5b                   	pop    %ebx
- 45a:	5e                   	pop    %esi
- 45b:	5d                   	pop    %ebp
- 45c:	c3                   	ret    
- 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4c7:	89 f0                	mov    %esi,%eax
+ 4c9:	5b                   	pop    %ebx
+ 4ca:	5e                   	pop    %esi
+ 4cb:	5d                   	pop    %ebp
+ 4cc:	c3                   	ret    
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
- 460:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 465:	eb ed                	jmp    454 <stat+0x34>
- 467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 46e:	66 90                	xchg   %ax,%ax
+ 4d0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 4d5:	eb ed                	jmp    4c4 <stat+0x34>
+ 4d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4de:	66 90                	xchg   %ax,%ax
 
-00000470 <atoi>:
+000004e0 <atoi>:
 
 int
 atoi(const char *s)
 {
- 470:	55                   	push   %ebp
- 471:	89 e5                	mov    %esp,%ebp
- 473:	53                   	push   %ebx
- 474:	8b 55 08             	mov    0x8(%ebp),%edx
+ 4e0:	55                   	push   %ebp
+ 4e1:	89 e5                	mov    %esp,%ebp
+ 4e3:	53                   	push   %ebx
+ 4e4:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
- 477:	0f be 02             	movsbl (%edx),%eax
- 47a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 47d:	80 f9 09             	cmp    $0x9,%cl
+ 4e7:	0f be 02             	movsbl (%edx),%eax
+ 4ea:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 4ed:	80 f9 09             	cmp    $0x9,%cl
   n = 0;
- 480:	b9 00 00 00 00       	mov    $0x0,%ecx
+ 4f0:	b9 00 00 00 00       	mov    $0x0,%ecx
   while('0' <= *s && *s <= '9')
- 485:	77 1e                	ja     4a5 <atoi+0x35>
- 487:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 48e:	66 90                	xchg   %ax,%ax
+ 4f5:	77 1e                	ja     515 <atoi+0x35>
+ 4f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4fe:	66 90                	xchg   %ax,%ax
     n = n*10 + *s++ - '0';
- 490:	83 c2 01             	add    $0x1,%edx
- 493:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 496:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+ 500:	83 c2 01             	add    $0x1,%edx
+ 503:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 506:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
   while('0' <= *s && *s <= '9')
- 49a:	0f be 02             	movsbl (%edx),%eax
- 49d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 4a0:	80 fb 09             	cmp    $0x9,%bl
- 4a3:	76 eb                	jbe    490 <atoi+0x20>
+ 50a:	0f be 02             	movsbl (%edx),%eax
+ 50d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 510:	80 fb 09             	cmp    $0x9,%bl
+ 513:	76 eb                	jbe    500 <atoi+0x20>
   return n;
 }
- 4a5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 4a8:	89 c8                	mov    %ecx,%eax
- 4aa:	c9                   	leave  
- 4ab:	c3                   	ret    
- 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 515:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 518:	89 c8                	mov    %ecx,%eax
+ 51a:	c9                   	leave  
+ 51b:	c3                   	ret    
+ 51c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000004b0 <memmove>:
+00000520 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
- 4b0:	55                   	push   %ebp
- 4b1:	89 e5                	mov    %esp,%ebp
- 4b3:	57                   	push   %edi
- 4b4:	8b 45 10             	mov    0x10(%ebp),%eax
- 4b7:	8b 55 08             	mov    0x8(%ebp),%edx
- 4ba:	56                   	push   %esi
- 4bb:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	57                   	push   %edi
+ 524:	8b 45 10             	mov    0x10(%ebp),%eax
+ 527:	8b 55 08             	mov    0x8(%ebp),%edx
+ 52a:	56                   	push   %esi
+ 52b:	8b 75 0c             	mov    0xc(%ebp),%esi
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
- 4be:	85 c0                	test   %eax,%eax
- 4c0:	7e 13                	jle    4d5 <memmove+0x25>
- 4c2:	01 d0                	add    %edx,%eax
+ 52e:	85 c0                	test   %eax,%eax
+ 530:	7e 13                	jle    545 <memmove+0x25>
+ 532:	01 d0                	add    %edx,%eax
   dst = vdst;
- 4c4:	89 d7                	mov    %edx,%edi
- 4c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 534:	89 d7                	mov    %edx,%edi
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
     *dst++ = *src++;
- 4d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+ 540:	a4                   	movsb  %ds:(%esi),%es:(%edi)
   while(n-- > 0)
- 4d1:	39 f8                	cmp    %edi,%eax
- 4d3:	75 fb                	jne    4d0 <memmove+0x20>
+ 541:	39 f8                	cmp    %edi,%eax
+ 543:	75 fb                	jne    540 <memmove+0x20>
   return vdst;
 }
- 4d5:	5e                   	pop    %esi
- 4d6:	89 d0                	mov    %edx,%eax
- 4d8:	5f                   	pop    %edi
- 4d9:	5d                   	pop    %ebp
- 4da:	c3                   	ret    
+ 545:	5e                   	pop    %esi
+ 546:	89 d0                	mov    %edx,%eax
+ 548:	5f                   	pop    %edi
+ 549:	5d                   	pop    %ebp
+ 54a:	c3                   	ret    
 
-000004db <fork>:
+0000054b <fork>:
   name: \
     movl $SYS_ ## name, %eax; \
     int $T_SYSCALL; \
     ret
 
 SYSCALL(fork)
- 4db:	b8 01 00 00 00       	mov    $0x1,%eax
- 4e0:	cd 40                	int    $0x40
- 4e2:	c3                   	ret    
+ 54b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 550:	cd 40                	int    $0x40
+ 552:	c3                   	ret    
 
-000004e3 <exit>:
+00000553 <exit>:
 SYSCALL(exit)
- 4e3:	b8 02 00 00 00       	mov    $0x2,%eax
- 4e8:	cd 40                	int    $0x40
- 4ea:	c3                   	ret    
+ 553:	b8 02 00 00 00       	mov    $0x2,%eax
+ 558:	cd 40                	int    $0x40
+ 55a:	c3                   	ret    
 
-000004eb <wait>:
+0000055b <wait>:
 SYSCALL(wait)
- 4eb:	b8 03 00 00 00       	mov    $0x3,%eax
- 4f0:	cd 40                	int    $0x40
- 4f2:	c3                   	ret    
+ 55b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 560:	cd 40                	int    $0x40
+ 562:	c3                   	ret    
 
-000004f3 <pipe>:
+00000563 <pipe>:
 SYSCALL(pipe)
- 4f3:	b8 04 00 00 00       	mov    $0x4,%eax
- 4f8:	cd 40                	int    $0x40
- 4fa:	c3                   	ret    
+ 563:	b8 04 00 00 00       	mov    $0x4,%eax
+ 568:	cd 40                	int    $0x40
+ 56a:	c3                   	ret    
 
-000004fb <read>:
+0000056b <read>:
 SYSCALL(read)
- 4fb:	b8 05 00 00 00       	mov    $0x5,%eax
- 500:	cd 40                	int    $0x40
- 502:	c3                   	ret    
+ 56b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 570:	cd 40                	int    $0x40
+ 572:	c3                   	ret    
 
-00000503 <write>:
+00000573 <write>:
 SYSCALL(write)
- 503:	b8 10 00 00 00       	mov    $0x10,%eax
- 508:	cd 40                	int    $0x40
- 50a:	c3                   	ret    
+ 573:	b8 10 00 00 00       	mov    $0x10,%eax
+ 578:	cd 40                	int    $0x40
+ 57a:	c3                   	ret    
 
-0000050b <close>:
+0000057b <close>:
 SYSCALL(close)
- 50b:	b8 15 00 00 00       	mov    $0x15,%eax
- 510:	cd 40                	int    $0x40
- 512:	c3                   	ret    
+ 57b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 580:	cd 40                	int    $0x40
+ 582:	c3                   	ret    
 
-00000513 <kill>:
+00000583 <kill>:
 SYSCALL(kill)
- 513:	b8 06 00 00 00       	mov    $0x6,%eax
- 518:	cd 40                	int    $0x40
- 51a:	c3                   	ret    
+ 583:	b8 06 00 00 00       	mov    $0x6,%eax
+ 588:	cd 40                	int    $0x40
+ 58a:	c3                   	ret    
 
-0000051b <exec>:
+0000058b <exec>:
 SYSCALL(exec)
- 51b:	b8 07 00 00 00       	mov    $0x7,%eax
- 520:	cd 40                	int    $0x40
- 522:	c3                   	ret    
+ 58b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
 
-00000523 <open>:
+00000593 <open>:
 SYSCALL(open)
- 523:	b8 0f 00 00 00       	mov    $0xf,%eax
- 528:	cd 40                	int    $0x40
- 52a:	c3                   	ret    
+ 593:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
 
-0000052b <mknod>:
+0000059b <mknod>:
 SYSCALL(mknod)
- 52b:	b8 11 00 00 00       	mov    $0x11,%eax
- 530:	cd 40                	int    $0x40
- 532:	c3                   	ret    
+ 59b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
 
-00000533 <unlink>:
+000005a3 <unlink>:
 SYSCALL(unlink)
- 533:	b8 12 00 00 00       	mov    $0x12,%eax
- 538:	cd 40                	int    $0x40
- 53a:	c3                   	ret    
+ 5a3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
 
-0000053b <fstat>:
+000005ab <fstat>:
 SYSCALL(fstat)
- 53b:	b8 08 00 00 00       	mov    $0x8,%eax
- 540:	cd 40                	int    $0x40
- 542:	c3                   	ret    
+ 5ab:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
 
-00000543 <link>:
+000005b3 <link>:
 SYSCALL(link)
- 543:	b8 13 00 00 00       	mov    $0x13,%eax
- 548:	cd 40                	int    $0x40
- 54a:	c3                   	ret    
+ 5b3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
 
-0000054b <mkdir>:
+000005bb <mkdir>:
 SYSCALL(mkdir)
- 54b:	b8 14 00 00 00       	mov    $0x14,%eax
- 550:	cd 40                	int    $0x40
- 552:	c3                   	ret    
+ 5bb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
 
-00000553 <chdir>:
+000005c3 <chdir>:
 SYSCALL(chdir)
- 553:	b8 09 00 00 00       	mov    $0x9,%eax
- 558:	cd 40                	int    $0x40
- 55a:	c3                   	ret    
+ 5c3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
 
-0000055b <dup>:
+000005cb <dup>:
 SYSCALL(dup)
- 55b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 560:	cd 40                	int    $0x40
- 562:	c3                   	ret    
+ 5cb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
 
-00000563 <getpid>:
+000005d3 <getpid>:
 SYSCALL(getpid)
- 563:	b8 0b 00 00 00       	mov    $0xb,%eax
- 568:	cd 40                	int    $0x40
- 56a:	c3                   	ret    
+ 5d3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
 
-0000056b <sbrk>:
+000005db <sbrk>:
 SYSCALL(sbrk)
- 56b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 570:	cd 40                	int    $0x40
- 572:	c3                   	ret    
+ 5db:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
 
-00000573 <sleep>:
+000005e3 <sleep>:
 SYSCALL(sleep)
- 573:	b8 0d 00 00 00       	mov    $0xd,%eax
- 578:	cd 40                	int    $0x40
- 57a:	c3                   	ret    
+ 5e3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
 
-0000057b <uptime>:
+000005eb <uptime>:
 SYSCALL(uptime)
- 57b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 580:	cd 40                	int    $0x40
- 582:	c3                   	ret    
+ 5eb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
 
-00000583 <thread_create>:
+000005f3 <thread_create>:
 SYSCALL(thread_create)
- 583:	b8 16 00 00 00       	mov    $0x16,%eax
- 588:	cd 40                	int    $0x40
- 58a:	c3                   	ret    
+ 5f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
 
-0000058b <thread_join>:
+000005fb <thread_join>:
 SYSCALL(thread_join)
- 58b:	b8 18 00 00 00       	mov    $0x18,%eax
- 590:	cd 40                	int    $0x40
- 592:	c3                   	ret    
+ 5fb:	b8 18 00 00 00       	mov    $0x18,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
 
-00000593 <thread_exit>:
+00000603 <thread_exit>:
 SYSCALL(thread_exit)
- 593:	b8 17 00 00 00       	mov    $0x17,%eax
- 598:	cd 40                	int    $0x40
- 59a:	c3                   	ret    
-
-0000059b <draw>:
- 59b:	b8 19 00 00 00       	mov    $0x19,%eax
- 5a0:	cd 40                	int    $0x40
- 5a2:	c3                   	ret    
- 5a3:	66 90                	xchg   %ax,%ax
- 5a5:	66 90                	xchg   %ax,%ax
- 5a7:	66 90                	xchg   %ax,%ax
- 5a9:	66 90                	xchg   %ax,%ax
- 5ab:	66 90                	xchg   %ax,%ax
- 5ad:	66 90                	xchg   %ax,%ax
- 5af:	90                   	nop
+ 603:	b8 17 00 00 00       	mov    $0x17,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <draw>:
+SYSCALL(draw)
+ 60b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <getNumProc>:
+SYSCALL(getNumProc)
+ 613:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 61b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 623:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 62b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 633:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 63b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 643:	b8 20 00 00 00       	mov    $0x20,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+ 64b:	66 90                	xchg   %ax,%ax
+ 64d:	66 90                	xchg   %ax,%ax
+ 64f:	90                   	nop
 
-000005b0 <printint>:
+00000650 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 5b0:	55                   	push   %ebp
- 5b1:	89 e5                	mov    %esp,%ebp
- 5b3:	57                   	push   %edi
- 5b4:	56                   	push   %esi
- 5b5:	53                   	push   %ebx
- 5b6:	83 ec 3c             	sub    $0x3c,%esp
- 5b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 3c             	sub    $0x3c,%esp
+ 659:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 5bc:	89 d1                	mov    %edx,%ecx
+ 65c:	89 d1                	mov    %edx,%ecx
 {
- 5be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 65e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 5c1:	85 d2                	test   %edx,%edx
- 5c3:	0f 89 7f 00 00 00    	jns    648 <printint+0x98>
- 5c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 5cd:	74 79                	je     648 <printint+0x98>
+ 661:	85 d2                	test   %edx,%edx
+ 663:	0f 89 7f 00 00 00    	jns    6e8 <printint+0x98>
+ 669:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 66d:	74 79                	je     6e8 <printint+0x98>
     neg = 1;
- 5cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 66f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 5d6:	f7 d9                	neg    %ecx
+ 676:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 5d8:	31 db                	xor    %ebx,%ebx
- 5da:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 5dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 678:	31 db                	xor    %ebx,%ebx
+ 67a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 67d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 5e0:	89 c8                	mov    %ecx,%eax
- 5e2:	31 d2                	xor    %edx,%edx
- 5e4:	89 cf                	mov    %ecx,%edi
- 5e6:	f7 75 c4             	divl   -0x3c(%ebp)
- 5e9:	0f b6 92 48 0a 00 00 	movzbl 0xa48(%edx),%edx
- 5f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 5f3:	89 d8                	mov    %ebx,%eax
- 5f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 680:	89 c8                	mov    %ecx,%eax
+ 682:	31 d2                	xor    %edx,%edx
+ 684:	89 cf                	mov    %ecx,%edi
+ 686:	f7 75 c4             	divl   -0x3c(%ebp)
+ 689:	0f b6 92 38 0d 00 00 	movzbl 0xd38(%edx),%edx
+ 690:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 693:	89 d8                	mov    %ebx,%eax
+ 695:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 5f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 698:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 5fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 69b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 5fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 601:	76 dd                	jbe    5e0 <printint+0x30>
+ 69e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6a1:	76 dd                	jbe    680 <printint+0x30>
   if(neg)
- 603:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 606:	85 c9                	test   %ecx,%ecx
- 608:	74 0c                	je     616 <printint+0x66>
+ 6a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6a6:	85 c9                	test   %ecx,%ecx
+ 6a8:	74 0c                	je     6b6 <printint+0x66>
     buf[i++] = '-';
- 60a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 60f:	89 d8                	mov    %ebx,%eax
+ 6af:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 611:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 616:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 619:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 61d:	eb 07                	jmp    626 <printint+0x76>
- 61f:	90                   	nop
+ 6b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6bd:	eb 07                	jmp    6c6 <printint+0x76>
+ 6bf:	90                   	nop
     putc(fd, buf[i]);
- 620:	0f b6 13             	movzbl (%ebx),%edx
- 623:	83 eb 01             	sub    $0x1,%ebx
+ 6c0:	0f b6 13             	movzbl (%ebx),%edx
+ 6c3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 626:	83 ec 04             	sub    $0x4,%esp
- 629:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 62c:	6a 01                	push   $0x1
- 62e:	56                   	push   %esi
- 62f:	57                   	push   %edi
- 630:	e8 ce fe ff ff       	call   503 <write>
+ 6c6:	83 ec 04             	sub    $0x4,%esp
+ 6c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6cc:	6a 01                	push   $0x1
+ 6ce:	56                   	push   %esi
+ 6cf:	57                   	push   %edi
+ 6d0:	e8 9e fe ff ff       	call   573 <write>
   while(--i >= 0)
- 635:	83 c4 10             	add    $0x10,%esp
- 638:	39 de                	cmp    %ebx,%esi
- 63a:	75 e4                	jne    620 <printint+0x70>
-}
- 63c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 63f:	5b                   	pop    %ebx
- 640:	5e                   	pop    %esi
- 641:	5f                   	pop    %edi
- 642:	5d                   	pop    %ebp
- 643:	c3                   	ret    
- 644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	39 de                	cmp    %ebx,%esi
+ 6da:	75 e4                	jne    6c0 <printint+0x70>
+}
+ 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6df:	5b                   	pop    %ebx
+ 6e0:	5e                   	pop    %esi
+ 6e1:	5f                   	pop    %edi
+ 6e2:	5d                   	pop    %ebp
+ 6e3:	c3                   	ret    
+ 6e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 648:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 64f:	eb 87                	jmp    5d8 <printint+0x28>
- 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 658:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 65f:	90                   	nop
+ 6e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ef:	eb 87                	jmp    678 <printint+0x28>
+ 6f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
 
-00000660 <printf>:
+00000700 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 2c             	sub    $0x2c,%esp
+ 700:	55                   	push   %ebp
+ 701:	89 e5                	mov    %esp,%ebp
+ 703:	57                   	push   %edi
+ 704:	56                   	push   %esi
+ 705:	53                   	push   %ebx
+ 706:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 669:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 709:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 66c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 70c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 66f:	0f b6 13             	movzbl (%ebx),%edx
- 672:	84 d2                	test   %dl,%dl
- 674:	74 6a                	je     6e0 <printf+0x80>
+ 70f:	0f b6 13             	movzbl (%ebx),%edx
+ 712:	84 d2                	test   %dl,%dl
+ 714:	74 6a                	je     780 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 676:	8d 45 10             	lea    0x10(%ebp),%eax
- 679:	83 c3 01             	add    $0x1,%ebx
+ 716:	8d 45 10             	lea    0x10(%ebp),%eax
+ 719:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 67c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 71c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 67f:	31 c9                	xor    %ecx,%ecx
+ 71f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 681:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 684:	eb 36                	jmp    6bc <printf+0x5c>
- 686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 68d:	8d 76 00             	lea    0x0(%esi),%esi
- 690:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 721:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 724:	eb 36                	jmp    75c <printf+0x5c>
+ 726:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72d:	8d 76 00             	lea    0x0(%esi),%esi
+ 730:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 693:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 733:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 698:	83 f8 25             	cmp    $0x25,%eax
- 69b:	74 15                	je     6b2 <printf+0x52>
+ 738:	83 f8 25             	cmp    $0x25,%eax
+ 73b:	74 15                	je     752 <printf+0x52>
   write(fd, &c, 1);
- 69d:	83 ec 04             	sub    $0x4,%esp
- 6a0:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 6a3:	6a 01                	push   $0x1
- 6a5:	57                   	push   %edi
- 6a6:	56                   	push   %esi
- 6a7:	e8 57 fe ff ff       	call   503 <write>
- 6ac:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 73d:	83 ec 04             	sub    $0x4,%esp
+ 740:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 743:	6a 01                	push   $0x1
+ 745:	57                   	push   %edi
+ 746:	56                   	push   %esi
+ 747:	e8 27 fe ff ff       	call   573 <write>
+ 74c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 6af:	83 c4 10             	add    $0x10,%esp
+ 74f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 6b2:	0f b6 13             	movzbl (%ebx),%edx
- 6b5:	83 c3 01             	add    $0x1,%ebx
- 6b8:	84 d2                	test   %dl,%dl
- 6ba:	74 24                	je     6e0 <printf+0x80>
+ 752:	0f b6 13             	movzbl (%ebx),%edx
+ 755:	83 c3 01             	add    $0x1,%ebx
+ 758:	84 d2                	test   %dl,%dl
+ 75a:	74 24                	je     780 <printf+0x80>
     c = fmt[i] & 0xff;
- 6bc:	0f b6 c2             	movzbl %dl,%eax
+ 75c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 6bf:	85 c9                	test   %ecx,%ecx
- 6c1:	74 cd                	je     690 <printf+0x30>
+ 75f:	85 c9                	test   %ecx,%ecx
+ 761:	74 cd                	je     730 <printf+0x30>
       }
     } else if(state == '%'){
- 6c3:	83 f9 25             	cmp    $0x25,%ecx
- 6c6:	75 ea                	jne    6b2 <printf+0x52>
+ 763:	83 f9 25             	cmp    $0x25,%ecx
+ 766:	75 ea                	jne    752 <printf+0x52>
       if(c == 'd'){
- 6c8:	83 f8 25             	cmp    $0x25,%eax
- 6cb:	0f 84 07 01 00 00    	je     7d8 <printf+0x178>
- 6d1:	83 e8 63             	sub    $0x63,%eax
- 6d4:	83 f8 15             	cmp    $0x15,%eax
- 6d7:	77 17                	ja     6f0 <printf+0x90>
- 6d9:	ff 24 85 f0 09 00 00 	jmp    *0x9f0(,%eax,4)
+ 768:	83 f8 25             	cmp    $0x25,%eax
+ 76b:	0f 84 07 01 00 00    	je     878 <printf+0x178>
+ 771:	83 e8 63             	sub    $0x63,%eax
+ 774:	83 f8 15             	cmp    $0x15,%eax
+ 777:	77 17                	ja     790 <printf+0x90>
+ 779:	ff 24 85 e0 0c 00 00 	jmp    *0xce0(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 6e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6e3:	5b                   	pop    %ebx
- 6e4:	5e                   	pop    %esi
- 6e5:	5f                   	pop    %edi
- 6e6:	5d                   	pop    %ebp
- 6e7:	c3                   	ret    
- 6e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
+ 780:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 783:	5b                   	pop    %ebx
+ 784:	5e                   	pop    %esi
+ 785:	5f                   	pop    %edi
+ 786:	5d                   	pop    %ebp
+ 787:	c3                   	ret    
+ 788:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78f:	90                   	nop
   write(fd, &c, 1);
- 6f0:	83 ec 04             	sub    $0x4,%esp
- 6f3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 6f6:	6a 01                	push   $0x1
- 6f8:	57                   	push   %edi
- 6f9:	56                   	push   %esi
- 6fa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 6fe:	e8 00 fe ff ff       	call   503 <write>
+ 790:	83 ec 04             	sub    $0x4,%esp
+ 793:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 796:	6a 01                	push   $0x1
+ 798:	57                   	push   %edi
+ 799:	56                   	push   %esi
+ 79a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 79e:	e8 d0 fd ff ff       	call   573 <write>
         putc(fd, c);
- 703:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 7a3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 707:	83 c4 0c             	add    $0xc,%esp
- 70a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 70d:	6a 01                	push   $0x1
- 70f:	57                   	push   %edi
- 710:	56                   	push   %esi
- 711:	e8 ed fd ff ff       	call   503 <write>
+ 7a7:	83 c4 0c             	add    $0xc,%esp
+ 7aa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7ad:	6a 01                	push   $0x1
+ 7af:	57                   	push   %edi
+ 7b0:	56                   	push   %esi
+ 7b1:	e8 bd fd ff ff       	call   573 <write>
         putc(fd, c);
- 716:	83 c4 10             	add    $0x10,%esp
+ 7b6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 719:	31 c9                	xor    %ecx,%ecx
- 71b:	eb 95                	jmp    6b2 <printf+0x52>
- 71d:	8d 76 00             	lea    0x0(%esi),%esi
+ 7b9:	31 c9                	xor    %ecx,%ecx
+ 7bb:	eb 95                	jmp    752 <printf+0x52>
+ 7bd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 720:	83 ec 0c             	sub    $0xc,%esp
- 723:	b9 10 00 00 00       	mov    $0x10,%ecx
- 728:	6a 00                	push   $0x0
- 72a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 72d:	8b 10                	mov    (%eax),%edx
- 72f:	89 f0                	mov    %esi,%eax
- 731:	e8 7a fe ff ff       	call   5b0 <printint>
+ 7c0:	83 ec 0c             	sub    $0xc,%esp
+ 7c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7c8:	6a 00                	push   $0x0
+ 7ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7cd:	8b 10                	mov    (%eax),%edx
+ 7cf:	89 f0                	mov    %esi,%eax
+ 7d1:	e8 7a fe ff ff       	call   650 <printint>
         ap++;
- 736:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 73a:	83 c4 10             	add    $0x10,%esp
+ 7d6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 7da:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 73d:	31 c9                	xor    %ecx,%ecx
- 73f:	e9 6e ff ff ff       	jmp    6b2 <printf+0x52>
- 744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7dd:	31 c9                	xor    %ecx,%ecx
+ 7df:	e9 6e ff ff ff       	jmp    752 <printf+0x52>
+ 7e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 748:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 74b:	8b 10                	mov    (%eax),%edx
+ 7e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7eb:	8b 10                	mov    (%eax),%edx
         ap++;
- 74d:	83 c0 04             	add    $0x4,%eax
- 750:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 7ed:	83 c0 04             	add    $0x4,%eax
+ 7f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 753:	85 d2                	test   %edx,%edx
- 755:	0f 84 8d 00 00 00    	je     7e8 <printf+0x188>
+ 7f3:	85 d2                	test   %edx,%edx
+ 7f5:	0f 84 8d 00 00 00    	je     888 <printf+0x188>
         while(*s != 0){
- 75b:	0f b6 02             	movzbl (%edx),%eax
+ 7fb:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 75e:	31 c9                	xor    %ecx,%ecx
+ 7fe:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 760:	84 c0                	test   %al,%al
- 762:	0f 84 4a ff ff ff    	je     6b2 <printf+0x52>
- 768:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 76b:	89 d3                	mov    %edx,%ebx
- 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 800:	84 c0                	test   %al,%al
+ 802:	0f 84 4a ff ff ff    	je     752 <printf+0x52>
+ 808:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 80b:	89 d3                	mov    %edx,%ebx
+ 80d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 770:	83 ec 04             	sub    $0x4,%esp
+ 810:	83 ec 04             	sub    $0x4,%esp
           s++;
- 773:	83 c3 01             	add    $0x1,%ebx
- 776:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 813:	83 c3 01             	add    $0x1,%ebx
+ 816:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 779:	6a 01                	push   $0x1
- 77b:	57                   	push   %edi
- 77c:	56                   	push   %esi
- 77d:	e8 81 fd ff ff       	call   503 <write>
+ 819:	6a 01                	push   $0x1
+ 81b:	57                   	push   %edi
+ 81c:	56                   	push   %esi
+ 81d:	e8 51 fd ff ff       	call   573 <write>
         while(*s != 0){
- 782:	0f b6 03             	movzbl (%ebx),%eax
- 785:	83 c4 10             	add    $0x10,%esp
- 788:	84 c0                	test   %al,%al
- 78a:	75 e4                	jne    770 <printf+0x110>
+ 822:	0f b6 03             	movzbl (%ebx),%eax
+ 825:	83 c4 10             	add    $0x10,%esp
+ 828:	84 c0                	test   %al,%al
+ 82a:	75 e4                	jne    810 <printf+0x110>
       state = 0;
- 78c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 78f:	31 c9                	xor    %ecx,%ecx
- 791:	e9 1c ff ff ff       	jmp    6b2 <printf+0x52>
- 796:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 79d:	8d 76 00             	lea    0x0(%esi),%esi
+ 82c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 82f:	31 c9                	xor    %ecx,%ecx
+ 831:	e9 1c ff ff ff       	jmp    752 <printf+0x52>
+ 836:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 83d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 7a0:	83 ec 0c             	sub    $0xc,%esp
- 7a3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 7a8:	6a 01                	push   $0x1
- 7aa:	e9 7b ff ff ff       	jmp    72a <printf+0xca>
- 7af:	90                   	nop
+ 840:	83 ec 0c             	sub    $0xc,%esp
+ 843:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 848:	6a 01                	push   $0x1
+ 84a:	e9 7b ff ff ff       	jmp    7ca <printf+0xca>
+ 84f:	90                   	nop
         putc(fd, *ap);
- 7b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 850:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 7b3:	83 ec 04             	sub    $0x4,%esp
+ 853:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 7b6:	8b 00                	mov    (%eax),%eax
+ 856:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 7b8:	6a 01                	push   $0x1
- 7ba:	57                   	push   %edi
- 7bb:	56                   	push   %esi
+ 858:	6a 01                	push   $0x1
+ 85a:	57                   	push   %edi
+ 85b:	56                   	push   %esi
         putc(fd, *ap);
- 7bc:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 85c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 7bf:	e8 3f fd ff ff       	call   503 <write>
+ 85f:	e8 0f fd ff ff       	call   573 <write>
         ap++;
- 7c4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 7c8:	83 c4 10             	add    $0x10,%esp
+ 864:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 868:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7cb:	31 c9                	xor    %ecx,%ecx
- 7cd:	e9 e0 fe ff ff       	jmp    6b2 <printf+0x52>
- 7d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 86b:	31 c9                	xor    %ecx,%ecx
+ 86d:	e9 e0 fe ff ff       	jmp    752 <printf+0x52>
+ 872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 7d8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 878:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 7db:	83 ec 04             	sub    $0x4,%esp
- 7de:	e9 2a ff ff ff       	jmp    70d <printf+0xad>
- 7e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 7e7:	90                   	nop
+ 87b:	83 ec 04             	sub    $0x4,%esp
+ 87e:	e9 2a ff ff ff       	jmp    7ad <printf+0xad>
+ 883:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 887:	90                   	nop
           s = "(null)";
- 7e8:	ba e7 09 00 00       	mov    $0x9e7,%edx
+ 888:	ba d9 0c 00 00       	mov    $0xcd9,%edx
         while(*s != 0){
- 7ed:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 7f0:	b8 28 00 00 00       	mov    $0x28,%eax
- 7f5:	89 d3                	mov    %edx,%ebx
- 7f7:	e9 74 ff ff ff       	jmp    770 <printf+0x110>
- 7fc:	66 90                	xchg   %ax,%ax
- 7fe:	66 90                	xchg   %ax,%ax
+ 88d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 890:	b8 28 00 00 00       	mov    $0x28,%eax
+ 895:	89 d3                	mov    %edx,%ebx
+ 897:	e9 74 ff ff ff       	jmp    810 <printf+0x110>
+ 89c:	66 90                	xchg   %ax,%ax
+ 89e:	66 90                	xchg   %ax,%ax
 
-00000800 <free>:
+000008a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 800:	55                   	push   %ebp
+ 8a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 801:	a1 10 0e 00 00       	mov    0xe10,%eax
+ 8a1:	a1 ac 11 00 00       	mov    0x11ac,%eax
 {
- 806:	89 e5                	mov    %esp,%ebp
- 808:	57                   	push   %edi
- 809:	56                   	push   %esi
- 80a:	53                   	push   %ebx
- 80b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a6:	89 e5                	mov    %esp,%ebp
+ 8a8:	57                   	push   %edi
+ 8a9:	56                   	push   %esi
+ 8aa:	53                   	push   %ebx
+ 8ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 80e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 818:	89 c2                	mov    %eax,%edx
- 81a:	8b 00                	mov    (%eax),%eax
- 81c:	39 ca                	cmp    %ecx,%edx
- 81e:	73 30                	jae    850 <free+0x50>
- 820:	39 c1                	cmp    %eax,%ecx
- 822:	72 04                	jb     828 <free+0x28>
+ 8b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8b8:	89 c2                	mov    %eax,%edx
+ 8ba:	8b 00                	mov    (%eax),%eax
+ 8bc:	39 ca                	cmp    %ecx,%edx
+ 8be:	73 30                	jae    8f0 <free+0x50>
+ 8c0:	39 c1                	cmp    %eax,%ecx
+ 8c2:	72 04                	jb     8c8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 824:	39 c2                	cmp    %eax,%edx
- 826:	72 f0                	jb     818 <free+0x18>
+ 8c4:	39 c2                	cmp    %eax,%edx
+ 8c6:	72 f0                	jb     8b8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 828:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 82b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 82e:	39 f8                	cmp    %edi,%eax
- 830:	74 30                	je     862 <free+0x62>
+ 8c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8ce:	39 f8                	cmp    %edi,%eax
+ 8d0:	74 30                	je     902 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 832:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 8d2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 835:	8b 42 04             	mov    0x4(%edx),%eax
- 838:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 83b:	39 f1                	cmp    %esi,%ecx
- 83d:	74 3a                	je     879 <free+0x79>
+ 8d5:	8b 42 04             	mov    0x4(%edx),%eax
+ 8d8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 8db:	39 f1                	cmp    %esi,%ecx
+ 8dd:	74 3a                	je     919 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 83f:	89 0a                	mov    %ecx,(%edx)
+ 8df:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 841:	5b                   	pop    %ebx
+ 8e1:	5b                   	pop    %ebx
   freep = p;
- 842:	89 15 10 0e 00 00    	mov    %edx,0xe10
+ 8e2:	89 15 ac 11 00 00    	mov    %edx,0x11ac
 }
- 848:	5e                   	pop    %esi
- 849:	5f                   	pop    %edi
- 84a:	5d                   	pop    %ebp
- 84b:	c3                   	ret    
- 84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8e8:	5e                   	pop    %esi
+ 8e9:	5f                   	pop    %edi
+ 8ea:	5d                   	pop    %ebp
+ 8eb:	c3                   	ret    
+ 8ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 850:	39 c2                	cmp    %eax,%edx
- 852:	72 c4                	jb     818 <free+0x18>
- 854:	39 c1                	cmp    %eax,%ecx
- 856:	73 c0                	jae    818 <free+0x18>
+ 8f0:	39 c2                	cmp    %eax,%edx
+ 8f2:	72 c4                	jb     8b8 <free+0x18>
+ 8f4:	39 c1                	cmp    %eax,%ecx
+ 8f6:	73 c0                	jae    8b8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 858:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 85b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 85e:	39 f8                	cmp    %edi,%eax
- 860:	75 d0                	jne    832 <free+0x32>
+ 8f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8fe:	39 f8                	cmp    %edi,%eax
+ 900:	75 d0                	jne    8d2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 862:	03 70 04             	add    0x4(%eax),%esi
- 865:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 902:	03 70 04             	add    0x4(%eax),%esi
+ 905:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 868:	8b 02                	mov    (%edx),%eax
- 86a:	8b 00                	mov    (%eax),%eax
- 86c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 908:	8b 02                	mov    (%edx),%eax
+ 90a:	8b 00                	mov    (%eax),%eax
+ 90c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 86f:	8b 42 04             	mov    0x4(%edx),%eax
- 872:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 875:	39 f1                	cmp    %esi,%ecx
- 877:	75 c6                	jne    83f <free+0x3f>
+ 90f:	8b 42 04             	mov    0x4(%edx),%eax
+ 912:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 915:	39 f1                	cmp    %esi,%ecx
+ 917:	75 c6                	jne    8df <free+0x3f>
     p->s.size += bp->s.size;
- 879:	03 43 fc             	add    -0x4(%ebx),%eax
+ 919:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 87c:	89 15 10 0e 00 00    	mov    %edx,0xe10
+ 91c:	89 15 ac 11 00 00    	mov    %edx,0x11ac
     p->s.size += bp->s.size;
- 882:	89 42 04             	mov    %eax,0x4(%edx)
+ 922:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 885:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 888:	89 0a                	mov    %ecx,(%edx)
+ 925:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 928:	89 0a                	mov    %ecx,(%edx)
 }
- 88a:	5b                   	pop    %ebx
- 88b:	5e                   	pop    %esi
- 88c:	5f                   	pop    %edi
- 88d:	5d                   	pop    %ebp
- 88e:	c3                   	ret    
- 88f:	90                   	nop
+ 92a:	5b                   	pop    %ebx
+ 92b:	5e                   	pop    %esi
+ 92c:	5f                   	pop    %edi
+ 92d:	5d                   	pop    %ebp
+ 92e:	c3                   	ret    
+ 92f:	90                   	nop
 
-00000890 <malloc>:
+00000930 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 890:	55                   	push   %ebp
- 891:	89 e5                	mov    %esp,%ebp
- 893:	57                   	push   %edi
- 894:	56                   	push   %esi
- 895:	53                   	push   %ebx
- 896:	83 ec 1c             	sub    $0x1c,%esp
+ 930:	55                   	push   %ebp
+ 931:	89 e5                	mov    %esp,%ebp
+ 933:	57                   	push   %edi
+ 934:	56                   	push   %esi
+ 935:	53                   	push   %ebx
+ 936:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 899:	8b 45 08             	mov    0x8(%ebp),%eax
+ 939:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 89c:	8b 3d 10 0e 00 00    	mov    0xe10,%edi
+ 93c:	8b 3d ac 11 00 00    	mov    0x11ac,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8a2:	8d 70 07             	lea    0x7(%eax),%esi
- 8a5:	c1 ee 03             	shr    $0x3,%esi
- 8a8:	83 c6 01             	add    $0x1,%esi
+ 942:	8d 70 07             	lea    0x7(%eax),%esi
+ 945:	c1 ee 03             	shr    $0x3,%esi
+ 948:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 8ab:	85 ff                	test   %edi,%edi
- 8ad:	0f 84 9d 00 00 00    	je     950 <malloc+0xc0>
+ 94b:	85 ff                	test   %edi,%edi
+ 94d:	0f 84 9d 00 00 00    	je     9f0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8b3:	8b 17                	mov    (%edi),%edx
+ 953:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 8b5:	8b 4a 04             	mov    0x4(%edx),%ecx
- 8b8:	39 f1                	cmp    %esi,%ecx
- 8ba:	73 6a                	jae    926 <malloc+0x96>
- 8bc:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 8c1:	39 de                	cmp    %ebx,%esi
- 8c3:	0f 43 de             	cmovae %esi,%ebx
+ 955:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 958:	39 f1                	cmp    %esi,%ecx
+ 95a:	73 6a                	jae    9c6 <malloc+0x96>
+ 95c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 961:	39 de                	cmp    %ebx,%esi
+ 963:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 8c6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 8cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 8d0:	eb 17                	jmp    8e9 <malloc+0x59>
- 8d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 966:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 96d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 970:	eb 17                	jmp    989 <malloc+0x59>
+ 972:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8d8:	8b 02                	mov    (%edx),%eax
+ 978:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 8da:	8b 48 04             	mov    0x4(%eax),%ecx
- 8dd:	39 f1                	cmp    %esi,%ecx
- 8df:	73 4f                	jae    930 <malloc+0xa0>
+ 97a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 97d:	39 f1                	cmp    %esi,%ecx
+ 97f:	73 4f                	jae    9d0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 8e1:	8b 3d 10 0e 00 00    	mov    0xe10,%edi
- 8e7:	89 c2                	mov    %eax,%edx
- 8e9:	39 d7                	cmp    %edx,%edi
- 8eb:	75 eb                	jne    8d8 <malloc+0x48>
+ 981:	8b 3d ac 11 00 00    	mov    0x11ac,%edi
+ 987:	89 c2                	mov    %eax,%edx
+ 989:	39 d7                	cmp    %edx,%edi
+ 98b:	75 eb                	jne    978 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 8ed:	83 ec 0c             	sub    $0xc,%esp
- 8f0:	ff 75 e4             	push   -0x1c(%ebp)
- 8f3:	e8 73 fc ff ff       	call   56b <sbrk>
+ 98d:	83 ec 0c             	sub    $0xc,%esp
+ 990:	ff 75 e4             	push   -0x1c(%ebp)
+ 993:	e8 43 fc ff ff       	call   5db <sbrk>
   if(p == (char*)-1)
- 8f8:	83 c4 10             	add    $0x10,%esp
- 8fb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 8fe:	74 1c                	je     91c <malloc+0x8c>
+ 998:	83 c4 10             	add    $0x10,%esp
+ 99b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 99e:	74 1c                	je     9bc <malloc+0x8c>
   hp->s.size = nu;
- 900:	89 58 04             	mov    %ebx,0x4(%eax)
+ 9a0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 903:	83 ec 0c             	sub    $0xc,%esp
- 906:	83 c0 08             	add    $0x8,%eax
- 909:	50                   	push   %eax
- 90a:	e8 f1 fe ff ff       	call   800 <free>
+ 9a3:	83 ec 0c             	sub    $0xc,%esp
+ 9a6:	83 c0 08             	add    $0x8,%eax
+ 9a9:	50                   	push   %eax
+ 9aa:	e8 f1 fe ff ff       	call   8a0 <free>
   return freep;
- 90f:	8b 15 10 0e 00 00    	mov    0xe10,%edx
+ 9af:	8b 15 ac 11 00 00    	mov    0x11ac,%edx
       if((p = morecore(nunits)) == 0)
- 915:	83 c4 10             	add    $0x10,%esp
- 918:	85 d2                	test   %edx,%edx
- 91a:	75 bc                	jne    8d8 <malloc+0x48>
+ 9b5:	83 c4 10             	add    $0x10,%esp
+ 9b8:	85 d2                	test   %edx,%edx
+ 9ba:	75 bc                	jne    978 <malloc+0x48>
         return 0;
   }
 }
- 91c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 91f:	31 c0                	xor    %eax,%eax
+ 9bf:	31 c0                	xor    %eax,%eax
 }
- 921:	5b                   	pop    %ebx
- 922:	5e                   	pop    %esi
- 923:	5f                   	pop    %edi
- 924:	5d                   	pop    %ebp
- 925:	c3                   	ret    
+ 9c1:	5b                   	pop    %ebx
+ 9c2:	5e                   	pop    %esi
+ 9c3:	5f                   	pop    %edi
+ 9c4:	5d                   	pop    %ebp
+ 9c5:	c3                   	ret    
     if(p->s.size >= nunits){
- 926:	89 d0                	mov    %edx,%eax
- 928:	89 fa                	mov    %edi,%edx
- 92a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9c6:	89 d0                	mov    %edx,%eax
+ 9c8:	89 fa                	mov    %edi,%edx
+ 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 930:	39 ce                	cmp    %ecx,%esi
- 932:	74 4c                	je     980 <malloc+0xf0>
+ 9d0:	39 ce                	cmp    %ecx,%esi
+ 9d2:	74 4c                	je     a20 <malloc+0xf0>
         p->s.size -= nunits;
- 934:	29 f1                	sub    %esi,%ecx
- 936:	89 48 04             	mov    %ecx,0x4(%eax)
+ 9d4:	29 f1                	sub    %esi,%ecx
+ 9d6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 939:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 9d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 93c:	89 70 04             	mov    %esi,0x4(%eax)
+ 9dc:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 93f:	89 15 10 0e 00 00    	mov    %edx,0xe10
+ 9df:	89 15 ac 11 00 00    	mov    %edx,0x11ac
 }
- 945:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 948:	83 c0 08             	add    $0x8,%eax
+ 9e8:	83 c0 08             	add    $0x8,%eax
 }
- 94b:	5b                   	pop    %ebx
- 94c:	5e                   	pop    %esi
- 94d:	5f                   	pop    %edi
- 94e:	5d                   	pop    %ebp
- 94f:	c3                   	ret    
+ 9eb:	5b                   	pop    %ebx
+ 9ec:	5e                   	pop    %esi
+ 9ed:	5f                   	pop    %edi
+ 9ee:	5d                   	pop    %ebp
+ 9ef:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 950:	c7 05 10 0e 00 00 14 	movl   $0xe14,0xe10
- 957:	0e 00 00 
+ 9f0:	c7 05 ac 11 00 00 b0 	movl   $0x11b0,0x11ac
+ 9f7:	11 00 00 
     base.s.size = 0;
- 95a:	bf 14 0e 00 00       	mov    $0xe14,%edi
+ 9fa:	bf b0 11 00 00       	mov    $0x11b0,%edi
     base.s.ptr = freep = prevp = &base;
- 95f:	c7 05 14 0e 00 00 14 	movl   $0xe14,0xe14
- 966:	0e 00 00 
+ 9ff:	c7 05 b0 11 00 00 b0 	movl   $0x11b0,0x11b0
+ a06:	11 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 969:	89 fa                	mov    %edi,%edx
+ a09:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 96b:	c7 05 18 0e 00 00 00 	movl   $0x0,0xe18
- 972:	00 00 00 
+ a0b:	c7 05 b4 11 00 00 00 	movl   $0x0,0x11b4
+ a12:	00 00 00 
     if(p->s.size >= nunits){
- 975:	e9 42 ff ff ff       	jmp    8bc <malloc+0x2c>
- 97a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a15:	e9 42 ff ff ff       	jmp    95c <malloc+0x2c>
+ a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 980:	8b 08                	mov    (%eax),%ecx
- 982:	89 0a                	mov    %ecx,(%edx)
- 984:	eb b9                	jmp    93f <malloc+0xaf>
+ a20:	8b 08                	mov    (%eax),%ecx
+ a22:	89 0a                	mov    %ecx,(%edx)
+ a24:	eb b9                	jmp    9df <malloc+0xaf>
+ a26:	66 90                	xchg   %ax,%ax
+ a28:	66 90                	xchg   %ax,%ax
+ a2a:	66 90                	xchg   %ax,%ax
+ a2c:	66 90                	xchg   %ax,%ax
+ a2e:	66 90                	xchg   %ax,%ax
+
+00000a30 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ a30:	55                   	push   %ebp
+ a31:	b8 c4 11 00 00       	mov    $0x11c4,%eax
+ a36:	89 e5                	mov    %esp,%ebp
+ a38:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ a3b:	89 15 c0 11 00 00    	mov    %edx,0x11c0
+    for (mti=1; mti<N; mti++)
+ a41:	eb 08                	jmp    a4b <sgenrand+0x1b>
+ a43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a47:	90                   	nop
+ a48:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a4b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a51:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a53:	3d 7c 1b 00 00       	cmp    $0x1b7c,%eax
+ a58:	75 ee                	jne    a48 <sgenrand+0x18>
+ a5a:	c7 05 94 11 00 00 70 	movl   $0x270,0x1194
+ a61:	02 00 00 
+}
+ a64:	5d                   	pop    %ebp
+ a65:	c3                   	ret    
+ a66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000a70 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ a70:	a1 94 11 00 00       	mov    0x1194,%eax
+ a75:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ a7a:	7f 3d                	jg     ab9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ a7c:	8b 0c 85 c0 11 00 00 	mov    0x11c0(,%eax,4),%ecx
+ a83:	8d 50 01             	lea    0x1(%eax),%edx
+ a86:	89 15 94 11 00 00    	mov    %edx,0x1194
+    y ^= TEMPERING_SHIFT_U(y);
+ a8c:	89 ca                	mov    %ecx,%edx
+ a8e:	c1 ea 0b             	shr    $0xb,%edx
+ a91:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ a93:	89 d0                	mov    %edx,%eax
+ a95:	c1 e0 07             	shl    $0x7,%eax
+ a98:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ a9d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ a9f:	89 c2                	mov    %eax,%edx
+ aa1:	c1 e2 0f             	shl    $0xf,%edx
+ aa4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ aaa:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ aac:	89 d0                	mov    %edx,%eax
+ aae:	c1 e8 12             	shr    $0x12,%eax
+ ab1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ ab3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ ab8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ ab9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ abe:	0f 84 d4 00 00 00    	je     b98 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ ac4:	31 c0                	xor    %eax,%eax
+ ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ acd:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ ad0:	8b 0c 85 c0 11 00 00 	mov    0x11c0(,%eax,4),%ecx
+ ad7:	83 c0 01             	add    $0x1,%eax
+ ada:	8b 14 85 c0 11 00 00 	mov    0x11c0(,%eax,4),%edx
+ ae1:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ ae7:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ aed:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ aef:	89 d1                	mov    %edx,%ecx
+ af1:	83 e2 01             	and    $0x1,%edx
+ af4:	d1 e9                	shr    %ecx
+ af6:	33 0c 85 f0 17 00 00 	xor    0x17f0(,%eax,4),%ecx
+ afd:	33 0c 95 4c 0d 00 00 	xor    0xd4c(,%edx,4),%ecx
+ b04:	89 0c 85 bc 11 00 00 	mov    %ecx,0x11bc(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ b0b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ b10:	75 be                	jne    ad0 <genrand+0x60>
+ b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ b18:	8b 0c 85 c0 11 00 00 	mov    0x11c0(,%eax,4),%ecx
+ b1f:	83 c0 01             	add    $0x1,%eax
+ b22:	8b 14 85 c0 11 00 00 	mov    0x11c0(,%eax,4),%edx
+ b29:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ b2f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b35:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ b37:	89 d1                	mov    %edx,%ecx
+ b39:	83 e2 01             	and    $0x1,%edx
+ b3c:	d1 e9                	shr    %ecx
+ b3e:	33 0c 85 30 0e 00 00 	xor    0xe30(,%eax,4),%ecx
+ b45:	33 0c 95 4c 0d 00 00 	xor    0xd4c(,%edx,4),%ecx
+ b4c:	89 0c 85 bc 11 00 00 	mov    %ecx,0x11bc(,%eax,4)
+        for (;kk<N-1;kk++) {
+ b53:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ b58:	75 be                	jne    b18 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ b5a:	8b 0d c0 11 00 00    	mov    0x11c0,%ecx
+ b60:	a1 7c 1b 00 00       	mov    0x1b7c,%eax
+ b65:	89 ca                	mov    %ecx,%edx
+ b67:	25 00 00 00 80       	and    $0x80000000,%eax
+ b6c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ b72:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ b74:	89 c2                	mov    %eax,%edx
+ b76:	83 e0 01             	and    $0x1,%eax
+ b79:	d1 ea                	shr    %edx
+ b7b:	33 15 f0 17 00 00    	xor    0x17f0,%edx
+ b81:	33 14 85 4c 0d 00 00 	xor    0xd4c(,%eax,4),%edx
+ b88:	89 15 7c 1b 00 00    	mov    %edx,0x1b7c
+ b8e:	ba 01 00 00 00       	mov    $0x1,%edx
+ b93:	e9 ee fe ff ff       	jmp    a86 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ b98:	b8 c4 11 00 00       	mov    $0x11c4,%eax
+ b9d:	b9 7c 1b 00 00       	mov    $0x1b7c,%ecx
+ ba2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ ba7:	c7 05 c0 11 00 00 05 	movl   $0x1105,0x11c0
+ bae:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ bb1:	eb 08                	jmp    bbb <genrand+0x14b>
+ bb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ bb7:	90                   	nop
+ bb8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ bbb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ bc1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ bc3:	39 c1                	cmp    %eax,%ecx
+ bc5:	75 f1                	jne    bb8 <genrand+0x148>
+ bc7:	e9 f8 fe ff ff       	jmp    ac4 <genrand+0x54>
+ bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000bd0 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ bd0:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ bd1:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ bd3:	89 e5                	mov    %esp,%ebp
+ bd5:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ bd6:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ bd9:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ bda:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ bdf:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ be2:	89 d8                	mov    %ebx,%eax
+ be4:	f7 f1                	div    %ecx
+ be6:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ be8:	29 d3                	sub    %edx,%ebx
+ bea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ bf0:	e8 7b fe ff ff       	call   a70 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ bf5:	39 d8                	cmp    %ebx,%eax
+ bf7:	73 f7                	jae    bf0 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ bf9:	31 d2                	xor    %edx,%edx
+}
+ bfb:	5b                   	pop    %ebx
+  return x/bin_size;
+ bfc:	f7 f6                	div    %esi
+}
+ bfe:	5e                   	pop    %esi
+ bff:	5d                   	pop    %ebp
+ c00:	c3                   	ret    
+ c01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ c0f:	90                   	nop
+
+00000c10 <randomrange>:
+
+int randomrange(int low, int high){
+ c10:	55                   	push   %ebp
+ c11:	89 e5                	mov    %esp,%ebp
+ c13:	57                   	push   %edi
+ c14:	56                   	push   %esi
+ c15:	53                   	push   %ebx
+ c16:	83 ec 0c             	sub    $0xc,%esp
+ c19:	8b 75 08             	mov    0x8(%ebp),%esi
+ c1c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ c1f:	39 f0                	cmp    %esi,%eax
+ c21:	7d 06                	jge    c29 <randomrange+0x19>
+ c23:	89 f2                	mov    %esi,%edx
+ c25:	89 c6                	mov    %eax,%esi
+ c27:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ c29:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ c2b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ c30:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ c32:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ c35:	89 d8                	mov    %ebx,%eax
+ c37:	f7 f1                	div    %ecx
+ c39:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ c3b:	29 d3                	sub    %edx,%ebx
+ c3d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ c40:	e8 2b fe ff ff       	call   a70 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ c45:	39 d8                	cmp    %ebx,%eax
+ c47:	73 f7                	jae    c40 <randomrange+0x30>
+  return x/bin_size;
+ c49:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ c4b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ c4e:	f7 f7                	div    %edi
+}
+ c50:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ c51:	01 f0                	add    %esi,%eax
+}
+ c53:	5e                   	pop    %esi
+ c54:	5f                   	pop    %edi
+ c55:	5d                   	pop    %ebp
+ c56:	c3                   	ret    
diff -ruN xv6-public/thread.c xv6-public-with-hybrid/thread.c
--- xv6-public/thread.c	2022-09-06 09:46:40.637754000 +0530
+++ xv6-public-with-hybrid/thread.c	2022-09-26 10:41:38.000000000 +0530
@@ -2,16 +2,19 @@
 #include "stat.h"
 #include "user.h"
 
+// spinlock struct 
 struct thread_spinlock{
     volatile uint lock;
     char *name;
 };
 
+// mutex struct
 struct thread_mutex{
     volatile uint lock;
     char *name;
 };
 
+//Atomic instruction to check if the lock is available
 static inline uint xchg(volatile uint *addr,uint newval){
     uint result;
 
@@ -22,41 +25,47 @@
     return result;
 }
 
+//Initialize the spinlock
 void thread_spin_init(struct thread_spinlock *lk){
     lk->lock = 0;
     lk->name = "null";
 }
 
+//Continue if lock is available or busy wait
 void thread_spin_lock(struct thread_spinlock *lk){
     while(xchg(&lk->lock,1)!=0);
     __sync_synchronize();
 }
 
+//Unlock the acquired lock
 void thread_spin_unlock(struct thread_spinlock *lk){
     __sync_synchronize();
     asm volatile("movl $0, %0" : "+m" (lk->lock) : );
 }
 
-void thread_mutex_init(struct thread_mutex *lk){
-    lk->lock = 0;
-    lk->name = "null";
+//Initialize the mutex lock
+void thread_mutex_init(struct thread_mutex *m){
+    m->lock = 0;
+    m->name = "null";
 }
 
-void thread_mutex_lock(struct thread_mutex *lk){
-    while(xchg(&lk->lock,1)!=0){
+//Continue if lock is available or sleep
+void thread_mutex_lock(struct thread_mutex *m){
+    while(xchg(&m->lock,1)!=0){
         sleep(1);
     }
 
     __sync_synchronize();
 }
 
-void thread_mutex_unlock(struct thread_mutex *lk){
+//Unlock the acquired mutex lock 
+void thread_mutex_unlock(struct thread_mutex *m){
     __sync_synchronize();
-    asm volatile("movl $0, %0" : "+m" (lk->lock) : );
+    asm volatile("movl $0, %0" : "+m" (m->lock) : );
 }
 
 //struct thread_spinlock lock;
-//struct thread_mutex lock;
+struct thread_mutex lock;
 
 struct balance{
     char name[32];
@@ -78,14 +87,14 @@
     int i;
     int old;
     struct balance *b = (struct balance*) arg;
-    printf(1, "Starting do_work: s:%s\n", b->name);
+    printf(1, "Starting do_work: s:%x\n", b->name);
     for (i = 0; i < b->amount; i++){
         //thread_spin_lock(&lock);
-        //thread_mutex_lock(&lock);
+        thread_mutex_lock(&lock);
         old = total_balance;
         delay(100000);
         total_balance = old + 1;
-        //thread_mutex_unlock(&lock);
+        thread_mutex_unlock(&lock);
         //thread_spin_unlock(&lock);
     }
 
@@ -97,7 +106,7 @@
 int main(int argc, char *argv[]) {
 
     //thread_spin_init(&lock);
-    //thread_mutex_init(&lock);
+    thread_mutex_init(&lock);
 
     struct balance b1 = {"b1", 3200};
     struct balance b2 = {"b2", 2800};
@@ -116,5 +125,7 @@
 
     printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
     t1, r1, t2, r2, total_balance);
+    int num = getNumProc();
+    printf(1,"Number of Active Processes = %d\n",num);
     exit();
-}
+}
\ No newline at end of file
diff -ruN xv6-public/thread.d xv6-public-with-hybrid/thread.d
--- xv6-public/thread.d	2022-09-06 09:47:10.950646000 +0530
+++ xv6-public-with-hybrid/thread.d	2022-10-07 18:50:02.332947828 +0530
@@ -1 +1,2 @@
-thread.o: thread.c /usr/include/stdc-predef.h types.h stat.h user.h
+thread.o: thread.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/thread.o and xv6-public-with-hybrid/thread.o differ
diff -ruN xv6-public/thread.sym xv6-public-with-hybrid/thread.sym
--- xv6-public/thread.sym	2022-09-06 09:47:11.022724000 +0530
+++ xv6-public-with-hybrid/thread.sym	2022-10-07 18:50:02.416947579 +0530
@@ -1,58 +1,74 @@
 00000000 thread.c
 00000000 ulib.c
 00000000 printf.c
-000005b0 printint
-00000a48 digits.0
+00000650 printint
+00000d38 digits.0
 00000000 umalloc.c
-00000e10 freep
-00000e14 base
-00000250 thread_mutex_unlock
-00000290 strcpy
-00000660 printf
-00000593 thread_exit
-000004b0 memmove
-0000052b mknod
-000003b0 gets
-00000563 getpid
-000001e0 thread_mutex_init
-00000890 malloc
-00000573 sleep
-00000180 thread_spin_init
-000001c0 thread_spin_unlock
-000004f3 pipe
-00000503 write
-000001a0 thread_spin_lock
-0000053b fstat
-00000513 kill
-00000553 chdir
-0000051b exec
-000004eb wait
-000004fb read
-00000533 unlink
-000004db fork
-0000056b sbrk
-0000057b uptime
-00000e0c __bss_start
-00000110 do_work
-00000350 memset
+000011ac freep
+000011b0 base
+00000000 random.c
+000011c0 mt
+00001194 mti
+00000d4c mag01.0
+000002c0 thread_mutex_unlock
+00000300 strcpy
+00000a30 sgenrand
+00000700 printf
+00000603 thread_exit
+00000520 memmove
+0000059b mknod
+000011a4 lock
+00000420 gets
+000005d3 getpid
+00000250 thread_mutex_init
+00000930 malloc
+000005e3 sleep
+00000633 get_burst_time
+00000bd0 random_at_most
+000001f0 thread_spin_init
+00000230 thread_spin_unlock
+0000063b getCurrentInfo
+00000563 pipe
+00000573 write
+00000210 thread_spin_lock
+000005ab fstat
+00000583 kill
+000005c3 chdir
+0000058b exec
+0000055b wait
+0000056b read
+000005a3 unlink
+0000054b fork
+000005db sbrk
+000005eb uptime
+00001198 __bss_start
+00000130 do_work
+000003c0 memset
 00000000 main
-00000e0c total_balance
-000002c0 strcmp
-0000055b dup
-00000270 delay
-00000420 stat
-00000e0c _edata
-00000e1c _end
-00000543 link
-000004e3 exit
-00000470 atoi
-0000059b draw
-00000320 strlen
-00000523 open
-00000370 strchr
-00000583 thread_create
-00000200 thread_mutex_lock
-0000054b mkdir
-0000050b close
-0000058b thread_join
-00000800 free
+000011a0 total_balance
+0000062b set_burst_time
+00000330 strcmp
+000005cb dup
+000002e0 delay
+0000061b getMaxPid
+00000a70 genrand
+00000613 getNumProc
+00000623 getProcInfo
+00000490 stat
+00001198 _edata
+00001b80 _end
+000005b3 link
+00000553 exit
+000004e0 atoi
+0000060b draw
+00000390 strlen
+00000593 open
+000003e0 strchr
+000005f3 thread_create
+00000643 getCurrentPID
+00000c10 randomrange
+00000270 thread_mutex_lock
+000005bb mkdir
+0000057b close
+000005fb thread_join
+000008a0 free
Binary files xv6-public/trapasm.o and xv6-public-with-hybrid/trapasm.o differ
diff -ruN xv6-public/trap.c xv6-public-with-hybrid/trap.c
--- xv6-public/trap.c	2022-08-11 19:48:39.000000000 +0530
+++ xv6-public-with-hybrid/trap.c	2022-10-06 17:20:56.432609306 +0530
@@ -87,10 +87,10 @@
       panic("trap");
     }
     // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
+    /*cprintf("pid %d %s: trap %d err %d on cpu %d "
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-            tf->err, cpuid(), tf->eip, rcr2());
+            tf->err, cpuid(), tf->eip, rcr2());*/
     myproc()->killed = 1;
   }
 
@@ -102,9 +102,16 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
+     (myproc()->run_time)++;
+     if(myproc()->burst_time != 0){
+     	if(myproc()->burst_time == myproc()->run_time)
+        	exit();
+     }
+     if((myproc()->run_time)%quant == 0)
+        new_yield();	
+  }
+  
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
Binary files xv6-public/trap.o and xv6-public-with-hybrid/trap.o differ
Binary files xv6-public/uart.o and xv6-public-with-hybrid/uart.o differ
diff -ruN xv6-public/ulib.d xv6-public-with-hybrid/ulib.d
--- xv6-public/ulib.d	2022-09-06 09:47:09.170301000 +0530
+++ xv6-public-with-hybrid/ulib.d	2022-10-07 18:49:58.124960103 +0530
@@ -1,2 +1,2 @@
 ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
- x86.h
+ processInfo.h x86.h
Binary files xv6-public/ulib.o and xv6-public-with-hybrid/ulib.o differ
diff -ruN xv6-public/umalloc.d xv6-public-with-hybrid/umalloc.d
--- xv6-public/umalloc.d	2022-09-06 09:47:09.302179000 +0530
+++ xv6-public-with-hybrid/umalloc.d	2022-10-07 18:49:58.528958935 +0530
@@ -1,2 +1,2 @@
 umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
- param.h
+ processInfo.h param.h
Binary files xv6-public/umalloc.o and xv6-public-with-hybrid/umalloc.o differ
diff -ruN xv6-public/user.h xv6-public-with-hybrid/user.h
--- xv6-public/user.h	2022-09-03 13:43:06.000000000 +0530
+++ xv6-public-with-hybrid/user.h	2022-10-06 13:59:32.316386000 +0530
@@ -1,6 +1,7 @@
 struct stat;
 struct rtcdate;
 
+#include "processInfo.h"
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -27,6 +28,13 @@
 int thread_create(void (*)(void*),void*,void*);
 int thread_join(void);
 int thread_exit(void);
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int,struct processInfo*);
+int set_burst_time(int);
+int get_burst_time();
+int getCurrentInfo(struct processInfo *);
+int getCurrentPID();
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -41,3 +49,4 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+int randomrange(int, int);
Binary files xv6-public/usys.o and xv6-public-with-hybrid/usys.o differ
diff -ruN xv6-public/usys.S xv6-public-with-hybrid/usys.S
--- xv6-public/usys.S	2022-09-03 13:43:44.000000000 +0530
+++ xv6-public-with-hybrid/usys.S	2022-10-06 14:14:36.262578000 +0530
@@ -32,4 +32,11 @@
 SYSCALL(thread_create)
 SYSCALL(thread_join)
 SYSCALL(thread_exit)
-SYSCALL(draw)
\ No newline at end of file
+SYSCALL(draw)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
+SYSCALL(getCurrentInfo)
+SYSCALL(getCurrentPID)
Binary files xv6-public/vectors.o and xv6-public-with-hybrid/vectors.o differ
Binary files xv6-public/vm.o and xv6-public-with-hybrid/vm.o differ
diff -ruN xv6-public/.vscode/tasks.json xv6-public-with-hybrid/.vscode/tasks.json
--- xv6-public/.vscode/tasks.json	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-with-hybrid/.vscode/tasks.json	2022-09-26 12:20:15.000000000 +0530
@@ -0,0 +1,28 @@
+{
+    "tasks": [
+        {
+            "type": "cppbuild",
+            "label": "C/C++: gcc-11 build active file",
+            "command": "/usr/bin/gcc-11",
+            "args": [
+                "-fdiagnostics-color=always",
+                "-g",
+                "${file}",
+                "-o",
+                "${fileDirname}/${fileBasenameNoExtension}"
+            ],
+            "options": {
+                "cwd": "${fileDirname}"
+            },
+            "problemMatcher": [
+                "$gcc"
+            ],
+            "group": {
+                "kind": "build",
+                "isDefault": true
+            },
+            "detail": "Task generated by Debugger."
+        }
+    ],
+    "version": "2.0.0"
+}
\ No newline at end of file
Binary files xv6-public/_wc and xv6-public-with-hybrid/_wc differ
diff -ruN xv6-public/wc.asm xv6-public-with-hybrid/wc.asm
--- xv6-public/wc.asm	2022-09-06 09:47:10.778454000 +0530
+++ xv6-public-with-hybrid/wc.asm	2022-10-07 18:50:01.912949064 +0530
@@ -71,15 +71,15 @@
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
   6c:	ff 33                	push   (%ebx)
-  6e:	68 9b 08 00 00       	push   $0x89b
+  6e:	68 fb 0a 00 00       	push   $0xafb
   73:	6a 01                	push   $0x1
-  75:	e8 d6 04 00 00       	call   550 <printf>
+  75:	e8 06 05 00 00       	call   580 <printf>
       exit();
   7a:	e8 54 03 00 00       	call   3d3 <exit>
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 8d 08 00 00       	push   $0x88d
+  81:	68 ed 0a 00 00       	push   $0xaed
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
@@ -111,7 +111,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0){
   c0:	83 ec 04             	sub    $0x4,%esp
   c3:	68 00 02 00 00       	push   $0x200
-  c8:	68 00 0c 00 00       	push   $0xc00
+  c8:	68 00 0f 00 00       	push   $0xf00
   cd:	ff 75 08             	push   0x8(%ebp)
   d0:	e8 16 03 00 00       	call   3eb <read>
   d5:	83 c4 10             	add    $0x10,%esp
@@ -129,7 +129,7 @@
   f2:	39 fe                	cmp    %edi,%esi
   f4:	74 42                	je     138 <wc+0x98>
       if(buf[i] == '\n')
-  f6:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+  f6:	0f be 87 00 0f 00 00 	movsbl 0xf00(%edi),%eax
         l++;
   fd:	31 c9                	xor    %ecx,%ecx
   ff:	3c 0a                	cmp    $0xa,%al
@@ -140,7 +140,7 @@
         l++;
  108:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
- 10a:	68 78 08 00 00       	push   $0x878
+ 10a:	68 d8 0a 00 00       	push   $0xad8
  10f:	e8 4c 01 00 00       	call   260 <strchr>
  114:	83 c4 10             	add    $0x10,%esp
  117:	85 c0                	test   %eax,%eax
@@ -171,9 +171,9 @@
  148:	ff 75 dc             	push   -0x24(%ebp)
  14b:	ff 75 e0             	push   -0x20(%ebp)
  14e:	53                   	push   %ebx
- 14f:	68 8e 08 00 00       	push   $0x88e
+ 14f:	68 ee 0a 00 00       	push   $0xaee
  154:	6a 01                	push   $0x1
- 156:	e8 f5 03 00 00       	call   550 <printf>
+ 156:	e8 25 04 00 00       	call   580 <printf>
 }
  15b:	83 c4 20             	add    $0x20,%esp
  15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -185,9 +185,9 @@
     printf(1, "wc: read error\n");
  166:	50                   	push   %eax
  167:	50                   	push   %eax
- 168:	68 7e 08 00 00       	push   $0x87e
+ 168:	68 de 0a 00 00       	push   $0xade
  16d:	6a 01                	push   $0x1
- 16f:	e8 dc 03 00 00       	call   550 <printf>
+ 16f:	e8 0c 04 00 00       	call   580 <printf>
     exit();
  174:	e8 5a 02 00 00       	call   3d3 <exit>
  179:	66 90                	xchg   %ax,%ax
@@ -739,572 +739,887 @@
  48a:	c3                   	ret    
 
 0000048b <draw>:
+SYSCALL(draw)
  48b:	b8 19 00 00 00       	mov    $0x19,%eax
  490:	cd 40                	int    $0x40
  492:	c3                   	ret    
- 493:	66 90                	xchg   %ax,%ax
- 495:	66 90                	xchg   %ax,%ax
- 497:	66 90                	xchg   %ax,%ax
- 499:	66 90                	xchg   %ax,%ax
- 49b:	66 90                	xchg   %ax,%ax
- 49d:	66 90                	xchg   %ax,%ax
- 49f:	90                   	nop
 
-000004a0 <printint>:
+00000493 <getNumProc>:
+SYSCALL(getNumProc)
+ 493:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 49b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 4a3:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <set_burst_time>:
+SYSCALL(set_burst_time)
+ 4ab:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 4b3:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+
+000004bb <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 4bb:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 4c0:	cd 40                	int    $0x40
+ 4c2:	c3                   	ret    
+
+000004c3 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 4c3:	b8 20 00 00 00       	mov    $0x20,%eax
+ 4c8:	cd 40                	int    $0x40
+ 4ca:	c3                   	ret    
+ 4cb:	66 90                	xchg   %ax,%ax
+ 4cd:	66 90                	xchg   %ax,%ax
+ 4cf:	90                   	nop
+
+000004d0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 3c             	sub    $0x3c,%esp
- 4a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	57                   	push   %edi
+ 4d4:	56                   	push   %esi
+ 4d5:	53                   	push   %ebx
+ 4d6:	83 ec 3c             	sub    $0x3c,%esp
+ 4d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 4ac:	89 d1                	mov    %edx,%ecx
+ 4dc:	89 d1                	mov    %edx,%ecx
 {
- 4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 4de:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 4b1:	85 d2                	test   %edx,%edx
- 4b3:	0f 89 7f 00 00 00    	jns    538 <printint+0x98>
- 4b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 4bd:	74 79                	je     538 <printint+0x98>
+ 4e1:	85 d2                	test   %edx,%edx
+ 4e3:	0f 89 7f 00 00 00    	jns    568 <printint+0x98>
+ 4e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4ed:	74 79                	je     568 <printint+0x98>
     neg = 1;
- 4bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 4ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 4c6:	f7 d9                	neg    %ecx
+ 4f6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 4c8:	31 db                	xor    %ebx,%ebx
- 4ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f8:	31 db                	xor    %ebx,%ebx
+ 4fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 4d0:	89 c8                	mov    %ecx,%eax
- 4d2:	31 d2                	xor    %edx,%edx
- 4d4:	89 cf                	mov    %ecx,%edi
- 4d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4d9:	0f b6 92 10 09 00 00 	movzbl 0x910(%edx),%edx
- 4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4e3:	89 d8                	mov    %ebx,%eax
- 4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 500:	89 c8                	mov    %ecx,%eax
+ 502:	31 d2                	xor    %edx,%edx
+ 504:	89 cf                	mov    %ecx,%edi
+ 506:	f7 75 c4             	divl   -0x3c(%ebp)
+ 509:	0f b6 92 70 0b 00 00 	movzbl 0xb70(%edx),%edx
+ 510:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 513:	89 d8                	mov    %ebx,%eax
+ 515:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 4e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 518:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 4eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 51b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 4ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4f1:	76 dd                	jbe    4d0 <printint+0x30>
+ 51e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 521:	76 dd                	jbe    500 <printint+0x30>
   if(neg)
- 4f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4f6:	85 c9                	test   %ecx,%ecx
- 4f8:	74 0c                	je     506 <printint+0x66>
+ 523:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 526:	85 c9                	test   %ecx,%ecx
+ 528:	74 0c                	je     536 <printint+0x66>
     buf[i++] = '-';
- 4fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 52a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4ff:	89 d8                	mov    %ebx,%eax
+ 52f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 501:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 531:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 506:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 509:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 50d:	eb 07                	jmp    516 <printint+0x76>
- 50f:	90                   	nop
+ 536:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 539:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 53d:	eb 07                	jmp    546 <printint+0x76>
+ 53f:	90                   	nop
     putc(fd, buf[i]);
- 510:	0f b6 13             	movzbl (%ebx),%edx
- 513:	83 eb 01             	sub    $0x1,%ebx
+ 540:	0f b6 13             	movzbl (%ebx),%edx
+ 543:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 516:	83 ec 04             	sub    $0x4,%esp
- 519:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 51c:	6a 01                	push   $0x1
- 51e:	56                   	push   %esi
- 51f:	57                   	push   %edi
- 520:	e8 ce fe ff ff       	call   3f3 <write>
+ 546:	83 ec 04             	sub    $0x4,%esp
+ 549:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 54c:	6a 01                	push   $0x1
+ 54e:	56                   	push   %esi
+ 54f:	57                   	push   %edi
+ 550:	e8 9e fe ff ff       	call   3f3 <write>
   while(--i >= 0)
- 525:	83 c4 10             	add    $0x10,%esp
- 528:	39 de                	cmp    %ebx,%esi
- 52a:	75 e4                	jne    510 <printint+0x70>
-}
- 52c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 52f:	5b                   	pop    %ebx
- 530:	5e                   	pop    %esi
- 531:	5f                   	pop    %edi
- 532:	5d                   	pop    %ebp
- 533:	c3                   	ret    
- 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	39 de                	cmp    %ebx,%esi
+ 55a:	75 e4                	jne    540 <printint+0x70>
+}
+ 55c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 55f:	5b                   	pop    %ebx
+ 560:	5e                   	pop    %esi
+ 561:	5f                   	pop    %edi
+ 562:	5d                   	pop    %ebp
+ 563:	c3                   	ret    
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 538:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 53f:	eb 87                	jmp    4c8 <printint+0x28>
- 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 568:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 56f:	eb 87                	jmp    4f8 <printint+0x28>
+ 571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57f:	90                   	nop
 
-00000550 <printf>:
+00000580 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 550:	55                   	push   %ebp
- 551:	89 e5                	mov    %esp,%ebp
- 553:	57                   	push   %edi
- 554:	56                   	push   %esi
- 555:	53                   	push   %ebx
- 556:	83 ec 2c             	sub    $0x2c,%esp
+ 580:	55                   	push   %ebp
+ 581:	89 e5                	mov    %esp,%ebp
+ 583:	57                   	push   %edi
+ 584:	56                   	push   %esi
+ 585:	53                   	push   %ebx
+ 586:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 559:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 589:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 55c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 58c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 55f:	0f b6 13             	movzbl (%ebx),%edx
- 562:	84 d2                	test   %dl,%dl
- 564:	74 6a                	je     5d0 <printf+0x80>
+ 58f:	0f b6 13             	movzbl (%ebx),%edx
+ 592:	84 d2                	test   %dl,%dl
+ 594:	74 6a                	je     600 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 566:	8d 45 10             	lea    0x10(%ebp),%eax
- 569:	83 c3 01             	add    $0x1,%ebx
+ 596:	8d 45 10             	lea    0x10(%ebp),%eax
+ 599:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 56c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 59c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 56f:	31 c9                	xor    %ecx,%ecx
+ 59f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 574:	eb 36                	jmp    5ac <printf+0x5c>
- 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 57d:	8d 76 00             	lea    0x0(%esi),%esi
- 580:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 5a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5a4:	eb 36                	jmp    5dc <printf+0x5c>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 5b0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 583:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 5b3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 588:	83 f8 25             	cmp    $0x25,%eax
- 58b:	74 15                	je     5a2 <printf+0x52>
+ 5b8:	83 f8 25             	cmp    $0x25,%eax
+ 5bb:	74 15                	je     5d2 <printf+0x52>
   write(fd, &c, 1);
- 58d:	83 ec 04             	sub    $0x4,%esp
- 590:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 593:	6a 01                	push   $0x1
- 595:	57                   	push   %edi
- 596:	56                   	push   %esi
- 597:	e8 57 fe ff ff       	call   3f3 <write>
- 59c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 5bd:	83 ec 04             	sub    $0x4,%esp
+ 5c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5c3:	6a 01                	push   $0x1
+ 5c5:	57                   	push   %edi
+ 5c6:	56                   	push   %esi
+ 5c7:	e8 27 fe ff ff       	call   3f3 <write>
+ 5cc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 59f:	83 c4 10             	add    $0x10,%esp
+ 5cf:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 5a2:	0f b6 13             	movzbl (%ebx),%edx
- 5a5:	83 c3 01             	add    $0x1,%ebx
- 5a8:	84 d2                	test   %dl,%dl
- 5aa:	74 24                	je     5d0 <printf+0x80>
+ 5d2:	0f b6 13             	movzbl (%ebx),%edx
+ 5d5:	83 c3 01             	add    $0x1,%ebx
+ 5d8:	84 d2                	test   %dl,%dl
+ 5da:	74 24                	je     600 <printf+0x80>
     c = fmt[i] & 0xff;
- 5ac:	0f b6 c2             	movzbl %dl,%eax
+ 5dc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 5af:	85 c9                	test   %ecx,%ecx
- 5b1:	74 cd                	je     580 <printf+0x30>
+ 5df:	85 c9                	test   %ecx,%ecx
+ 5e1:	74 cd                	je     5b0 <printf+0x30>
       }
     } else if(state == '%'){
- 5b3:	83 f9 25             	cmp    $0x25,%ecx
- 5b6:	75 ea                	jne    5a2 <printf+0x52>
+ 5e3:	83 f9 25             	cmp    $0x25,%ecx
+ 5e6:	75 ea                	jne    5d2 <printf+0x52>
       if(c == 'd'){
- 5b8:	83 f8 25             	cmp    $0x25,%eax
- 5bb:	0f 84 07 01 00 00    	je     6c8 <printf+0x178>
- 5c1:	83 e8 63             	sub    $0x63,%eax
- 5c4:	83 f8 15             	cmp    $0x15,%eax
- 5c7:	77 17                	ja     5e0 <printf+0x90>
- 5c9:	ff 24 85 b8 08 00 00 	jmp    *0x8b8(,%eax,4)
+ 5e8:	83 f8 25             	cmp    $0x25,%eax
+ 5eb:	0f 84 07 01 00 00    	je     6f8 <printf+0x178>
+ 5f1:	83 e8 63             	sub    $0x63,%eax
+ 5f4:	83 f8 15             	cmp    $0x15,%eax
+ 5f7:	77 17                	ja     610 <printf+0x90>
+ 5f9:	ff 24 85 18 0b 00 00 	jmp    *0xb18(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 5d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5d3:	5b                   	pop    %ebx
- 5d4:	5e                   	pop    %esi
- 5d5:	5f                   	pop    %edi
- 5d6:	5d                   	pop    %ebp
- 5d7:	c3                   	ret    
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
+ 600:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 603:	5b                   	pop    %ebx
+ 604:	5e                   	pop    %esi
+ 605:	5f                   	pop    %edi
+ 606:	5d                   	pop    %ebp
+ 607:	c3                   	ret    
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
   write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
- 5e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 5e6:	6a 01                	push   $0x1
- 5e8:	57                   	push   %edi
- 5e9:	56                   	push   %esi
- 5ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5ee:	e8 00 fe ff ff       	call   3f3 <write>
+ 610:	83 ec 04             	sub    $0x4,%esp
+ 613:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 616:	6a 01                	push   $0x1
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 61e:	e8 d0 fd ff ff       	call   3f3 <write>
         putc(fd, c);
- 5f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 623:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 5f7:	83 c4 0c             	add    $0xc,%esp
- 5fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 5fd:	6a 01                	push   $0x1
- 5ff:	57                   	push   %edi
- 600:	56                   	push   %esi
- 601:	e8 ed fd ff ff       	call   3f3 <write>
+ 627:	83 c4 0c             	add    $0xc,%esp
+ 62a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 62d:	6a 01                	push   $0x1
+ 62f:	57                   	push   %edi
+ 630:	56                   	push   %esi
+ 631:	e8 bd fd ff ff       	call   3f3 <write>
         putc(fd, c);
- 606:	83 c4 10             	add    $0x10,%esp
+ 636:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 609:	31 c9                	xor    %ecx,%ecx
- 60b:	eb 95                	jmp    5a2 <printf+0x52>
- 60d:	8d 76 00             	lea    0x0(%esi),%esi
+ 639:	31 c9                	xor    %ecx,%ecx
+ 63b:	eb 95                	jmp    5d2 <printf+0x52>
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 610:	83 ec 0c             	sub    $0xc,%esp
- 613:	b9 10 00 00 00       	mov    $0x10,%ecx
- 618:	6a 00                	push   $0x0
- 61a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 61d:	8b 10                	mov    (%eax),%edx
- 61f:	89 f0                	mov    %esi,%eax
- 621:	e8 7a fe ff ff       	call   4a0 <printint>
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 648:	6a 00                	push   $0x0
+ 64a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 64d:	8b 10                	mov    (%eax),%edx
+ 64f:	89 f0                	mov    %esi,%eax
+ 651:	e8 7a fe ff ff       	call   4d0 <printint>
         ap++;
- 626:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 62a:	83 c4 10             	add    $0x10,%esp
+ 656:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 65a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 62d:	31 c9                	xor    %ecx,%ecx
- 62f:	e9 6e ff ff ff       	jmp    5a2 <printf+0x52>
- 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65d:	31 c9                	xor    %ecx,%ecx
+ 65f:	e9 6e ff ff ff       	jmp    5d2 <printf+0x52>
+ 664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 638:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 63b:	8b 10                	mov    (%eax),%edx
+ 668:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 66b:	8b 10                	mov    (%eax),%edx
         ap++;
- 63d:	83 c0 04             	add    $0x4,%eax
- 640:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 66d:	83 c0 04             	add    $0x4,%eax
+ 670:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 643:	85 d2                	test   %edx,%edx
- 645:	0f 84 8d 00 00 00    	je     6d8 <printf+0x188>
+ 673:	85 d2                	test   %edx,%edx
+ 675:	0f 84 8d 00 00 00    	je     708 <printf+0x188>
         while(*s != 0){
- 64b:	0f b6 02             	movzbl (%edx),%eax
+ 67b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 64e:	31 c9                	xor    %ecx,%ecx
+ 67e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 650:	84 c0                	test   %al,%al
- 652:	0f 84 4a ff ff ff    	je     5a2 <printf+0x52>
- 658:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 65b:	89 d3                	mov    %edx,%ebx
- 65d:	8d 76 00             	lea    0x0(%esi),%esi
+ 680:	84 c0                	test   %al,%al
+ 682:	0f 84 4a ff ff ff    	je     5d2 <printf+0x52>
+ 688:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 68b:	89 d3                	mov    %edx,%ebx
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 660:	83 ec 04             	sub    $0x4,%esp
+ 690:	83 ec 04             	sub    $0x4,%esp
           s++;
- 663:	83 c3 01             	add    $0x1,%ebx
- 666:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 693:	83 c3 01             	add    $0x1,%ebx
+ 696:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 669:	6a 01                	push   $0x1
- 66b:	57                   	push   %edi
- 66c:	56                   	push   %esi
- 66d:	e8 81 fd ff ff       	call   3f3 <write>
+ 699:	6a 01                	push   $0x1
+ 69b:	57                   	push   %edi
+ 69c:	56                   	push   %esi
+ 69d:	e8 51 fd ff ff       	call   3f3 <write>
         while(*s != 0){
- 672:	0f b6 03             	movzbl (%ebx),%eax
- 675:	83 c4 10             	add    $0x10,%esp
- 678:	84 c0                	test   %al,%al
- 67a:	75 e4                	jne    660 <printf+0x110>
+ 6a2:	0f b6 03             	movzbl (%ebx),%eax
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	84 c0                	test   %al,%al
+ 6aa:	75 e4                	jne    690 <printf+0x110>
       state = 0;
- 67c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 67f:	31 c9                	xor    %ecx,%ecx
- 681:	e9 1c ff ff ff       	jmp    5a2 <printf+0x52>
- 686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 68d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 6af:	31 c9                	xor    %ecx,%ecx
+ 6b1:	e9 1c ff ff ff       	jmp    5d2 <printf+0x52>
+ 6b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 690:	83 ec 0c             	sub    $0xc,%esp
- 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 698:	6a 01                	push   $0x1
- 69a:	e9 7b ff ff ff       	jmp    61a <printf+0xca>
- 69f:	90                   	nop
+ 6c0:	83 ec 0c             	sub    $0xc,%esp
+ 6c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 6c8:	6a 01                	push   $0x1
+ 6ca:	e9 7b ff ff ff       	jmp    64a <printf+0xca>
+ 6cf:	90                   	nop
         putc(fd, *ap);
- 6a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 6a3:	83 ec 04             	sub    $0x4,%esp
+ 6d3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 6a6:	8b 00                	mov    (%eax),%eax
+ 6d6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 6a8:	6a 01                	push   $0x1
- 6aa:	57                   	push   %edi
- 6ab:	56                   	push   %esi
+ 6d8:	6a 01                	push   $0x1
+ 6da:	57                   	push   %edi
+ 6db:	56                   	push   %esi
         putc(fd, *ap);
- 6ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 6dc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 6af:	e8 3f fd ff ff       	call   3f3 <write>
+ 6df:	e8 0f fd ff ff       	call   3f3 <write>
         ap++;
- 6b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 6b8:	83 c4 10             	add    $0x10,%esp
+ 6e4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 6e8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 6bb:	31 c9                	xor    %ecx,%ecx
- 6bd:	e9 e0 fe ff ff       	jmp    5a2 <printf+0x52>
- 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6eb:	31 c9                	xor    %ecx,%ecx
+ 6ed:	e9 e0 fe ff ff       	jmp    5d2 <printf+0x52>
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 6c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 6f8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 6cb:	83 ec 04             	sub    $0x4,%esp
- 6ce:	e9 2a ff ff ff       	jmp    5fd <printf+0xad>
- 6d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6d7:	90                   	nop
+ 6fb:	83 ec 04             	sub    $0x4,%esp
+ 6fe:	e9 2a ff ff ff       	jmp    62d <printf+0xad>
+ 703:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 707:	90                   	nop
           s = "(null)";
- 6d8:	ba af 08 00 00       	mov    $0x8af,%edx
+ 708:	ba 0f 0b 00 00       	mov    $0xb0f,%edx
         while(*s != 0){
- 6dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 6e0:	b8 28 00 00 00       	mov    $0x28,%eax
- 6e5:	89 d3                	mov    %edx,%ebx
- 6e7:	e9 74 ff ff ff       	jmp    660 <printf+0x110>
- 6ec:	66 90                	xchg   %ax,%ax
- 6ee:	66 90                	xchg   %ax,%ax
+ 70d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 710:	b8 28 00 00 00       	mov    $0x28,%eax
+ 715:	89 d3                	mov    %edx,%ebx
+ 717:	e9 74 ff ff ff       	jmp    690 <printf+0x110>
+ 71c:	66 90                	xchg   %ax,%ax
+ 71e:	66 90                	xchg   %ax,%ax
 
-000006f0 <free>:
+00000720 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6f0:	55                   	push   %ebp
+ 720:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6f1:	a1 00 0e 00 00       	mov    0xe00,%eax
+ 721:	a1 00 11 00 00       	mov    0x1100,%eax
 {
- 6f6:	89 e5                	mov    %esp,%ebp
- 6f8:	57                   	push   %edi
- 6f9:	56                   	push   %esi
- 6fa:	53                   	push   %ebx
- 6fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 726:	89 e5                	mov    %esp,%ebp
+ 728:	57                   	push   %edi
+ 729:	56                   	push   %esi
+ 72a:	53                   	push   %ebx
+ 72b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 6fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 72e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 708:	89 c2                	mov    %eax,%edx
- 70a:	8b 00                	mov    (%eax),%eax
- 70c:	39 ca                	cmp    %ecx,%edx
- 70e:	73 30                	jae    740 <free+0x50>
- 710:	39 c1                	cmp    %eax,%ecx
- 712:	72 04                	jb     718 <free+0x28>
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 738:	89 c2                	mov    %eax,%edx
+ 73a:	8b 00                	mov    (%eax),%eax
+ 73c:	39 ca                	cmp    %ecx,%edx
+ 73e:	73 30                	jae    770 <free+0x50>
+ 740:	39 c1                	cmp    %eax,%ecx
+ 742:	72 04                	jb     748 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 714:	39 c2                	cmp    %eax,%edx
- 716:	72 f0                	jb     708 <free+0x18>
+ 744:	39 c2                	cmp    %eax,%edx
+ 746:	72 f0                	jb     738 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 718:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 71b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 71e:	39 f8                	cmp    %edi,%eax
- 720:	74 30                	je     752 <free+0x62>
+ 748:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 74b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 74e:	39 f8                	cmp    %edi,%eax
+ 750:	74 30                	je     782 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 722:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 752:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 725:	8b 42 04             	mov    0x4(%edx),%eax
- 728:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 72b:	39 f1                	cmp    %esi,%ecx
- 72d:	74 3a                	je     769 <free+0x79>
+ 755:	8b 42 04             	mov    0x4(%edx),%eax
+ 758:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 75b:	39 f1                	cmp    %esi,%ecx
+ 75d:	74 3a                	je     799 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 72f:	89 0a                	mov    %ecx,(%edx)
+ 75f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 731:	5b                   	pop    %ebx
+ 761:	5b                   	pop    %ebx
   freep = p;
- 732:	89 15 00 0e 00 00    	mov    %edx,0xe00
+ 762:	89 15 00 11 00 00    	mov    %edx,0x1100
 }
- 738:	5e                   	pop    %esi
- 739:	5f                   	pop    %edi
- 73a:	5d                   	pop    %ebp
- 73b:	c3                   	ret    
- 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 768:	5e                   	pop    %esi
+ 769:	5f                   	pop    %edi
+ 76a:	5d                   	pop    %ebp
+ 76b:	c3                   	ret    
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 740:	39 c2                	cmp    %eax,%edx
- 742:	72 c4                	jb     708 <free+0x18>
- 744:	39 c1                	cmp    %eax,%ecx
- 746:	73 c0                	jae    708 <free+0x18>
+ 770:	39 c2                	cmp    %eax,%edx
+ 772:	72 c4                	jb     738 <free+0x18>
+ 774:	39 c1                	cmp    %eax,%ecx
+ 776:	73 c0                	jae    738 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 748:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 74b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 74e:	39 f8                	cmp    %edi,%eax
- 750:	75 d0                	jne    722 <free+0x32>
+ 778:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 77b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 77e:	39 f8                	cmp    %edi,%eax
+ 780:	75 d0                	jne    752 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 752:	03 70 04             	add    0x4(%eax),%esi
- 755:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 782:	03 70 04             	add    0x4(%eax),%esi
+ 785:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 758:	8b 02                	mov    (%edx),%eax
- 75a:	8b 00                	mov    (%eax),%eax
- 75c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 788:	8b 02                	mov    (%edx),%eax
+ 78a:	8b 00                	mov    (%eax),%eax
+ 78c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 75f:	8b 42 04             	mov    0x4(%edx),%eax
- 762:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 765:	39 f1                	cmp    %esi,%ecx
- 767:	75 c6                	jne    72f <free+0x3f>
+ 78f:	8b 42 04             	mov    0x4(%edx),%eax
+ 792:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 795:	39 f1                	cmp    %esi,%ecx
+ 797:	75 c6                	jne    75f <free+0x3f>
     p->s.size += bp->s.size;
- 769:	03 43 fc             	add    -0x4(%ebx),%eax
+ 799:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 76c:	89 15 00 0e 00 00    	mov    %edx,0xe00
+ 79c:	89 15 00 11 00 00    	mov    %edx,0x1100
     p->s.size += bp->s.size;
- 772:	89 42 04             	mov    %eax,0x4(%edx)
+ 7a2:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 775:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 778:	89 0a                	mov    %ecx,(%edx)
+ 7a5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 7a8:	89 0a                	mov    %ecx,(%edx)
 }
- 77a:	5b                   	pop    %ebx
- 77b:	5e                   	pop    %esi
- 77c:	5f                   	pop    %edi
- 77d:	5d                   	pop    %ebp
- 77e:	c3                   	ret    
- 77f:	90                   	nop
+ 7aa:	5b                   	pop    %ebx
+ 7ab:	5e                   	pop    %esi
+ 7ac:	5f                   	pop    %edi
+ 7ad:	5d                   	pop    %ebp
+ 7ae:	c3                   	ret    
+ 7af:	90                   	nop
 
-00000780 <malloc>:
+000007b0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 780:	55                   	push   %ebp
- 781:	89 e5                	mov    %esp,%ebp
- 783:	57                   	push   %edi
- 784:	56                   	push   %esi
- 785:	53                   	push   %ebx
- 786:	83 ec 1c             	sub    $0x1c,%esp
+ 7b0:	55                   	push   %ebp
+ 7b1:	89 e5                	mov    %esp,%ebp
+ 7b3:	57                   	push   %edi
+ 7b4:	56                   	push   %esi
+ 7b5:	53                   	push   %ebx
+ 7b6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 789:	8b 45 08             	mov    0x8(%ebp),%eax
+ 7b9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 78c:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
+ 7bc:	8b 3d 00 11 00 00    	mov    0x1100,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 792:	8d 70 07             	lea    0x7(%eax),%esi
- 795:	c1 ee 03             	shr    $0x3,%esi
- 798:	83 c6 01             	add    $0x1,%esi
+ 7c2:	8d 70 07             	lea    0x7(%eax),%esi
+ 7c5:	c1 ee 03             	shr    $0x3,%esi
+ 7c8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 79b:	85 ff                	test   %edi,%edi
- 79d:	0f 84 9d 00 00 00    	je     840 <malloc+0xc0>
+ 7cb:	85 ff                	test   %edi,%edi
+ 7cd:	0f 84 9d 00 00 00    	je     870 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a3:	8b 17                	mov    (%edi),%edx
+ 7d3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 7a5:	8b 4a 04             	mov    0x4(%edx),%ecx
- 7a8:	39 f1                	cmp    %esi,%ecx
- 7aa:	73 6a                	jae    816 <malloc+0x96>
- 7ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 7b1:	39 de                	cmp    %ebx,%esi
- 7b3:	0f 43 de             	cmovae %esi,%ebx
+ 7d5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7d8:	39 f1                	cmp    %esi,%ecx
+ 7da:	73 6a                	jae    846 <malloc+0x96>
+ 7dc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7e1:	39 de                	cmp    %ebx,%esi
+ 7e3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 7b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 7bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 7c0:	eb 17                	jmp    7d9 <malloc+0x59>
- 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7e6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7f0:	eb 17                	jmp    809 <malloc+0x59>
+ 7f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7c8:	8b 02                	mov    (%edx),%eax
+ 7f8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 7ca:	8b 48 04             	mov    0x4(%eax),%ecx
- 7cd:	39 f1                	cmp    %esi,%ecx
- 7cf:	73 4f                	jae    820 <malloc+0xa0>
+ 7fa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7fd:	39 f1                	cmp    %esi,%ecx
+ 7ff:	73 4f                	jae    850 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7d1:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
- 7d7:	89 c2                	mov    %eax,%edx
- 7d9:	39 d7                	cmp    %edx,%edi
- 7db:	75 eb                	jne    7c8 <malloc+0x48>
+ 801:	8b 3d 00 11 00 00    	mov    0x1100,%edi
+ 807:	89 c2                	mov    %eax,%edx
+ 809:	39 d7                	cmp    %edx,%edi
+ 80b:	75 eb                	jne    7f8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 7dd:	83 ec 0c             	sub    $0xc,%esp
- 7e0:	ff 75 e4             	push   -0x1c(%ebp)
- 7e3:	e8 73 fc ff ff       	call   45b <sbrk>
+ 80d:	83 ec 0c             	sub    $0xc,%esp
+ 810:	ff 75 e4             	push   -0x1c(%ebp)
+ 813:	e8 43 fc ff ff       	call   45b <sbrk>
   if(p == (char*)-1)
- 7e8:	83 c4 10             	add    $0x10,%esp
- 7eb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7ee:	74 1c                	je     80c <malloc+0x8c>
+ 818:	83 c4 10             	add    $0x10,%esp
+ 81b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 81e:	74 1c                	je     83c <malloc+0x8c>
   hp->s.size = nu;
- 7f0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 820:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7f3:	83 ec 0c             	sub    $0xc,%esp
- 7f6:	83 c0 08             	add    $0x8,%eax
- 7f9:	50                   	push   %eax
- 7fa:	e8 f1 fe ff ff       	call   6f0 <free>
+ 823:	83 ec 0c             	sub    $0xc,%esp
+ 826:	83 c0 08             	add    $0x8,%eax
+ 829:	50                   	push   %eax
+ 82a:	e8 f1 fe ff ff       	call   720 <free>
   return freep;
- 7ff:	8b 15 00 0e 00 00    	mov    0xe00,%edx
+ 82f:	8b 15 00 11 00 00    	mov    0x1100,%edx
       if((p = morecore(nunits)) == 0)
- 805:	83 c4 10             	add    $0x10,%esp
- 808:	85 d2                	test   %edx,%edx
- 80a:	75 bc                	jne    7c8 <malloc+0x48>
+ 835:	83 c4 10             	add    $0x10,%esp
+ 838:	85 d2                	test   %edx,%edx
+ 83a:	75 bc                	jne    7f8 <malloc+0x48>
         return 0;
   }
 }
- 80c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 83c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 80f:	31 c0                	xor    %eax,%eax
+ 83f:	31 c0                	xor    %eax,%eax
 }
- 811:	5b                   	pop    %ebx
- 812:	5e                   	pop    %esi
- 813:	5f                   	pop    %edi
- 814:	5d                   	pop    %ebp
- 815:	c3                   	ret    
+ 841:	5b                   	pop    %ebx
+ 842:	5e                   	pop    %esi
+ 843:	5f                   	pop    %edi
+ 844:	5d                   	pop    %ebp
+ 845:	c3                   	ret    
     if(p->s.size >= nunits){
- 816:	89 d0                	mov    %edx,%eax
- 818:	89 fa                	mov    %edi,%edx
- 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 846:	89 d0                	mov    %edx,%eax
+ 848:	89 fa                	mov    %edi,%edx
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 820:	39 ce                	cmp    %ecx,%esi
- 822:	74 4c                	je     870 <malloc+0xf0>
+ 850:	39 ce                	cmp    %ecx,%esi
+ 852:	74 4c                	je     8a0 <malloc+0xf0>
         p->s.size -= nunits;
- 824:	29 f1                	sub    %esi,%ecx
- 826:	89 48 04             	mov    %ecx,0x4(%eax)
+ 854:	29 f1                	sub    %esi,%ecx
+ 856:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 829:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 859:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 82c:	89 70 04             	mov    %esi,0x4(%eax)
+ 85c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 82f:	89 15 00 0e 00 00    	mov    %edx,0xe00
+ 85f:	89 15 00 11 00 00    	mov    %edx,0x1100
 }
- 835:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 865:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 838:	83 c0 08             	add    $0x8,%eax
+ 868:	83 c0 08             	add    $0x8,%eax
 }
- 83b:	5b                   	pop    %ebx
- 83c:	5e                   	pop    %esi
- 83d:	5f                   	pop    %edi
- 83e:	5d                   	pop    %ebp
- 83f:	c3                   	ret    
+ 86b:	5b                   	pop    %ebx
+ 86c:	5e                   	pop    %esi
+ 86d:	5f                   	pop    %edi
+ 86e:	5d                   	pop    %ebp
+ 86f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 840:	c7 05 00 0e 00 00 04 	movl   $0xe04,0xe00
- 847:	0e 00 00 
+ 870:	c7 05 00 11 00 00 04 	movl   $0x1104,0x1100
+ 877:	11 00 00 
     base.s.size = 0;
- 84a:	bf 04 0e 00 00       	mov    $0xe04,%edi
+ 87a:	bf 04 11 00 00       	mov    $0x1104,%edi
     base.s.ptr = freep = prevp = &base;
- 84f:	c7 05 04 0e 00 00 04 	movl   $0xe04,0xe04
- 856:	0e 00 00 
+ 87f:	c7 05 04 11 00 00 04 	movl   $0x1104,0x1104
+ 886:	11 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 859:	89 fa                	mov    %edi,%edx
+ 889:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 85b:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08
- 862:	00 00 00 
+ 88b:	c7 05 08 11 00 00 00 	movl   $0x0,0x1108
+ 892:	00 00 00 
     if(p->s.size >= nunits){
- 865:	e9 42 ff ff ff       	jmp    7ac <malloc+0x2c>
- 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 895:	e9 42 ff ff ff       	jmp    7dc <malloc+0x2c>
+ 89a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 870:	8b 08                	mov    (%eax),%ecx
- 872:	89 0a                	mov    %ecx,(%edx)
- 874:	eb b9                	jmp    82f <malloc+0xaf>
+ 8a0:	8b 08                	mov    (%eax),%ecx
+ 8a2:	89 0a                	mov    %ecx,(%edx)
+ 8a4:	eb b9                	jmp    85f <malloc+0xaf>
+ 8a6:	66 90                	xchg   %ax,%ax
+ 8a8:	66 90                	xchg   %ax,%ax
+ 8aa:	66 90                	xchg   %ax,%ax
+ 8ac:	66 90                	xchg   %ax,%ax
+ 8ae:	66 90                	xchg   %ax,%ax
+
+000008b0 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 8b0:	55                   	push   %ebp
+ 8b1:	b8 24 11 00 00       	mov    $0x1124,%eax
+ 8b6:	89 e5                	mov    %esp,%ebp
+ 8b8:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 8bb:	89 15 20 11 00 00    	mov    %edx,0x1120
+    for (mti=1; mti<N; mti++)
+ 8c1:	eb 08                	jmp    8cb <sgenrand+0x1b>
+ 8c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8c7:	90                   	nop
+ 8c8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8cb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8d1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8d3:	3d dc 1a 00 00       	cmp    $0x1adc,%eax
+ 8d8:	75 ee                	jne    8c8 <sgenrand+0x18>
+ 8da:	c7 05 e8 0e 00 00 70 	movl   $0x270,0xee8
+ 8e1:	02 00 00 
+}
+ 8e4:	5d                   	pop    %ebp
+ 8e5:	c3                   	ret    
+ 8e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000008f0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 8f0:	a1 e8 0e 00 00       	mov    0xee8,%eax
+ 8f5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 8fa:	7f 3d                	jg     939 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 8fc:	8b 0c 85 20 11 00 00 	mov    0x1120(,%eax,4),%ecx
+ 903:	8d 50 01             	lea    0x1(%eax),%edx
+ 906:	89 15 e8 0e 00 00    	mov    %edx,0xee8
+    y ^= TEMPERING_SHIFT_U(y);
+ 90c:	89 ca                	mov    %ecx,%edx
+ 90e:	c1 ea 0b             	shr    $0xb,%edx
+ 911:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 913:	89 d0                	mov    %edx,%eax
+ 915:	c1 e0 07             	shl    $0x7,%eax
+ 918:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 91d:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 91f:	89 c2                	mov    %eax,%edx
+ 921:	c1 e2 0f             	shl    $0xf,%edx
+ 924:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 92a:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 92c:	89 d0                	mov    %edx,%eax
+ 92e:	c1 e8 12             	shr    $0x12,%eax
+ 931:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 933:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 938:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 939:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 93e:	0f 84 d4 00 00 00    	je     a18 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 944:	31 c0                	xor    %eax,%eax
+ 946:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 94d:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 950:	8b 0c 85 20 11 00 00 	mov    0x1120(,%eax,4),%ecx
+ 957:	83 c0 01             	add    $0x1,%eax
+ 95a:	8b 14 85 20 11 00 00 	mov    0x1120(,%eax,4),%edx
+ 961:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 967:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 96d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 96f:	89 d1                	mov    %edx,%ecx
+ 971:	83 e2 01             	and    $0x1,%edx
+ 974:	d1 e9                	shr    %ecx
+ 976:	33 0c 85 50 17 00 00 	xor    0x1750(,%eax,4),%ecx
+ 97d:	33 0c 95 84 0b 00 00 	xor    0xb84(,%edx,4),%ecx
+ 984:	89 0c 85 1c 11 00 00 	mov    %ecx,0x111c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 98b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 990:	75 be                	jne    950 <genrand+0x60>
+ 992:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 998:	8b 0c 85 20 11 00 00 	mov    0x1120(,%eax,4),%ecx
+ 99f:	83 c0 01             	add    $0x1,%eax
+ 9a2:	8b 14 85 20 11 00 00 	mov    0x1120(,%eax,4),%edx
+ 9a9:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 9af:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9b5:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9b7:	89 d1                	mov    %edx,%ecx
+ 9b9:	83 e2 01             	and    $0x1,%edx
+ 9bc:	d1 e9                	shr    %ecx
+ 9be:	33 0c 85 90 0d 00 00 	xor    0xd90(,%eax,4),%ecx
+ 9c5:	33 0c 95 84 0b 00 00 	xor    0xb84(,%edx,4),%ecx
+ 9cc:	89 0c 85 1c 11 00 00 	mov    %ecx,0x111c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 9d3:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 9d8:	75 be                	jne    998 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 9da:	8b 0d 20 11 00 00    	mov    0x1120,%ecx
+ 9e0:	a1 dc 1a 00 00       	mov    0x1adc,%eax
+ 9e5:	89 ca                	mov    %ecx,%edx
+ 9e7:	25 00 00 00 80       	and    $0x80000000,%eax
+ 9ec:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 9f2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 9f4:	89 c2                	mov    %eax,%edx
+ 9f6:	83 e0 01             	and    $0x1,%eax
+ 9f9:	d1 ea                	shr    %edx
+ 9fb:	33 15 50 17 00 00    	xor    0x1750,%edx
+ a01:	33 14 85 84 0b 00 00 	xor    0xb84(,%eax,4),%edx
+ a08:	89 15 dc 1a 00 00    	mov    %edx,0x1adc
+ a0e:	ba 01 00 00 00       	mov    $0x1,%edx
+ a13:	e9 ee fe ff ff       	jmp    906 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ a18:	b8 24 11 00 00       	mov    $0x1124,%eax
+ a1d:	b9 dc 1a 00 00       	mov    $0x1adc,%ecx
+ a22:	ba 05 11 00 00       	mov    $0x1105,%edx
+ a27:	c7 05 20 11 00 00 05 	movl   $0x1105,0x1120
+ a2e:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ a31:	eb 08                	jmp    a3b <genrand+0x14b>
+ a33:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ a37:	90                   	nop
+ a38:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ a3b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ a41:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ a43:	39 c1                	cmp    %eax,%ecx
+ a45:	75 f1                	jne    a38 <genrand+0x148>
+ a47:	e9 f8 fe ff ff       	jmp    944 <genrand+0x54>
+ a4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a50 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ a50:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ a51:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ a53:	89 e5                	mov    %esp,%ebp
+ a55:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ a56:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ a59:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ a5a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ a5f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ a62:	89 d8                	mov    %ebx,%eax
+ a64:	f7 f1                	div    %ecx
+ a66:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ a68:	29 d3                	sub    %edx,%ebx
+ a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ a70:	e8 7b fe ff ff       	call   8f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ a75:	39 d8                	cmp    %ebx,%eax
+ a77:	73 f7                	jae    a70 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ a79:	31 d2                	xor    %edx,%edx
+}
+ a7b:	5b                   	pop    %ebx
+  return x/bin_size;
+ a7c:	f7 f6                	div    %esi
+}
+ a7e:	5e                   	pop    %esi
+ a7f:	5d                   	pop    %ebp
+ a80:	c3                   	ret    
+ a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a8f:	90                   	nop
+
+00000a90 <randomrange>:
+
+int randomrange(int low, int high){
+ a90:	55                   	push   %ebp
+ a91:	89 e5                	mov    %esp,%ebp
+ a93:	57                   	push   %edi
+ a94:	56                   	push   %esi
+ a95:	53                   	push   %ebx
+ a96:	83 ec 0c             	sub    $0xc,%esp
+ a99:	8b 75 08             	mov    0x8(%ebp),%esi
+ a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ a9f:	39 f0                	cmp    %esi,%eax
+ aa1:	7d 06                	jge    aa9 <randomrange+0x19>
+ aa3:	89 f2                	mov    %esi,%edx
+ aa5:	89 c6                	mov    %eax,%esi
+ aa7:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ aa9:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ aab:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ ab0:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ ab2:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ ab5:	89 d8                	mov    %ebx,%eax
+ ab7:	f7 f1                	div    %ecx
+ ab9:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ abb:	29 d3                	sub    %edx,%ebx
+ abd:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ ac0:	e8 2b fe ff ff       	call   8f0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ ac5:	39 d8                	cmp    %ebx,%eax
+ ac7:	73 f7                	jae    ac0 <randomrange+0x30>
+  return x/bin_size;
+ ac9:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ acb:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ ace:	f7 f7                	div    %edi
+}
+ ad0:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ ad1:	01 f0                	add    %esi,%eax
+}
+ ad3:	5e                   	pop    %esi
+ ad4:	5f                   	pop    %edi
+ ad5:	5d                   	pop    %ebp
+ ad6:	c3                   	ret    
diff -ruN xv6-public/wc.d xv6-public-with-hybrid/wc.d
--- xv6-public/wc.d	2022-09-06 09:47:10.730400000 +0530
+++ xv6-public-with-hybrid/wc.d	2022-10-07 18:50:01.852949240 +0530
@@ -1 +1 @@
-wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/wc.o and xv6-public-with-hybrid/wc.o differ
diff -ruN xv6-public/wc.sym xv6-public-with-hybrid/wc.sym
--- xv6-public/wc.sym	2022-09-06 09:47:10.782458000 +0530
+++ xv6-public-with-hybrid/wc.sym	2022-10-07 18:50:01.924949029 +0530
@@ -1,20 +1,28 @@
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-000004a0 printint
-00000910 digits.0
+000004d0 printint
+00000b70 digits.0
 00000000 umalloc.c
-00000e00 freep
-00000e04 base
+00001100 freep
+00001104 base
+00000000 random.c
+00001120 mt
+00000ee8 mti
+00000b84 mag01.0
 00000180 strcpy
-00000550 printf
+000008b0 sgenrand
+00000580 printf
 00000483 thread_exit
 000003a0 memmove
 0000041b mknod
 000002a0 gets
 00000453 getpid
-00000780 malloc
+000007b0 malloc
 00000463 sleep
+000004b3 get_burst_time
+00000a50 random_at_most
+000004bb getCurrentInfo
 000003e3 pipe
 000003f3 write
 0000042b fstat
@@ -28,15 +36,20 @@
 000003cb fork
 0000045b sbrk
 0000046b uptime
-00000bf8 __bss_start
+00000eec __bss_start
 00000240 memset
 00000000 main
+000004ab set_burst_time
 000001b0 strcmp
 0000044b dup
-00000c00 buf
+0000049b getMaxPid
+00000f00 buf
+000008f0 genrand
+00000493 getNumProc
+000004a3 getProcInfo
 00000310 stat
-00000bf8 _edata
-00000e0c _end
+00000eec _edata
+00001ae0 _end
 00000433 link
 000003d3 exit
 00000360 atoi
@@ -45,7 +58,9 @@
 00000413 open
 00000260 strchr
 00000473 thread_create
+000004c3 getCurrentPID
+00000a90 randomrange
 0000043b mkdir
 000003fb close
 0000047b thread_join
-000006f0 free
+00000720 free
Binary files xv6-public/xv6.img and xv6-public-with-hybrid/xv6.img differ
Binary files xv6-public/_zombie and xv6-public-with-hybrid/_zombie differ
diff -ruN xv6-public/zombie.asm xv6-public-with-hybrid/zombie.asm
--- xv6-public/zombie.asm	2022-09-06 09:47:10.862548000 +0530
+++ xv6-public-with-hybrid/zombie.asm	2022-10-07 18:50:02.104948500 +0530
@@ -576,572 +576,887 @@
  33a:	c3                   	ret    
 
 0000033b <draw>:
+SYSCALL(draw)
  33b:	b8 19 00 00 00       	mov    $0x19,%eax
  340:	cd 40                	int    $0x40
  342:	c3                   	ret    
- 343:	66 90                	xchg   %ax,%ax
- 345:	66 90                	xchg   %ax,%ax
- 347:	66 90                	xchg   %ax,%ax
- 349:	66 90                	xchg   %ax,%ax
- 34b:	66 90                	xchg   %ax,%ax
- 34d:	66 90                	xchg   %ax,%ax
- 34f:	90                   	nop
 
-00000350 <printint>:
+00000343 <getNumProc>:
+SYSCALL(getNumProc)
+ 343:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 34b:	b8 1b 00 00 00       	mov    $0x1b,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getProcInfo>:
+SYSCALL(getProcInfo)
+ 353:	b8 1c 00 00 00       	mov    $0x1c,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <set_burst_time>:
+SYSCALL(set_burst_time)
+ 35b:	b8 1d 00 00 00       	mov    $0x1d,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <get_burst_time>:
+SYSCALL(get_burst_time)
+ 363:	b8 1e 00 00 00       	mov    $0x1e,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getCurrentInfo>:
+SYSCALL(getCurrentInfo)
+ 36b:	b8 1f 00 00 00       	mov    $0x1f,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getCurrentPID>:
+SYSCALL(getCurrentPID)
+ 373:	b8 20 00 00 00       	mov    $0x20,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	53                   	push   %ebx
- 356:	83 ec 3c             	sub    $0x3c,%esp
- 359:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 35c:	89 d1                	mov    %edx,%ecx
+ 38c:	89 d1                	mov    %edx,%ecx
 {
- 35e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 361:	85 d2                	test   %edx,%edx
- 363:	0f 89 7f 00 00 00    	jns    3e8 <printint+0x98>
- 369:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 36d:	74 79                	je     3e8 <printint+0x98>
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
     neg = 1;
- 36f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 376:	f7 d9                	neg    %ecx
+ 3a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 378:	31 db                	xor    %ebx,%ebx
- 37a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 37d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 380:	89 c8                	mov    %ecx,%eax
- 382:	31 d2                	xor    %edx,%edx
- 384:	89 cf                	mov    %ecx,%edi
- 386:	f7 75 c4             	divl   -0x3c(%ebp)
- 389:	0f b6 92 88 07 00 00 	movzbl 0x788(%edx),%edx
- 390:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 393:	89 d8                	mov    %ebx,%eax
- 395:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 e8 09 00 00 	movzbl 0x9e8(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 398:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 39b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 39e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3a1:	76 dd                	jbe    380 <printint+0x30>
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
   if(neg)
- 3a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3a6:	85 c9                	test   %ecx,%ecx
- 3a8:	74 0c                	je     3b6 <printint+0x66>
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
     buf[i++] = '-';
- 3aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3af:	89 d8                	mov    %ebx,%eax
+ 3df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3bd:	eb 07                	jmp    3c6 <printint+0x76>
- 3bf:	90                   	nop
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
     putc(fd, buf[i]);
- 3c0:	0f b6 13             	movzbl (%ebx),%edx
- 3c3:	83 eb 01             	sub    $0x1,%ebx
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3c6:	83 ec 04             	sub    $0x4,%esp
- 3c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3cc:	6a 01                	push   $0x1
- 3ce:	56                   	push   %esi
- 3cf:	57                   	push   %edi
- 3d0:	e8 ce fe ff ff       	call   2a3 <write>
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 9e fe ff ff       	call   2a3 <write>
   while(--i >= 0)
- 3d5:	83 c4 10             	add    $0x10,%esp
- 3d8:	39 de                	cmp    %ebx,%esi
- 3da:	75 e4                	jne    3c0 <printint+0x70>
-}
- 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3df:	5b                   	pop    %ebx
- 3e0:	5e                   	pop    %esi
- 3e1:	5f                   	pop    %edi
- 3e2:	5d                   	pop    %ebp
- 3e3:	c3                   	ret    
- 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3ef:	eb 87                	jmp    378 <printint+0x28>
- 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3ff:	90                   	nop
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
 
-00000400 <printf>:
+00000430 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 400:	55                   	push   %ebp
- 401:	89 e5                	mov    %esp,%ebp
- 403:	57                   	push   %edi
- 404:	56                   	push   %esi
- 405:	53                   	push   %ebx
- 406:	83 ec 2c             	sub    $0x2c,%esp
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 409:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 40c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 40f:	0f b6 13             	movzbl (%ebx),%edx
- 412:	84 d2                	test   %dl,%dl
- 414:	74 6a                	je     480 <printf+0x80>
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 416:	8d 45 10             	lea    0x10(%ebp),%eax
- 419:	83 c3 01             	add    $0x1,%ebx
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 41c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 41f:	31 c9                	xor    %ecx,%ecx
+ 44f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 421:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 424:	eb 36                	jmp    45c <printf+0x5c>
- 426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42d:	8d 76 00             	lea    0x0(%esi),%esi
- 430:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 433:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 438:	83 f8 25             	cmp    $0x25,%eax
- 43b:	74 15                	je     452 <printf+0x52>
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
   write(fd, &c, 1);
- 43d:	83 ec 04             	sub    $0x4,%esp
- 440:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 443:	6a 01                	push   $0x1
- 445:	57                   	push   %edi
- 446:	56                   	push   %esi
- 447:	e8 57 fe ff ff       	call   2a3 <write>
- 44c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 27 fe ff ff       	call   2a3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 44f:	83 c4 10             	add    $0x10,%esp
+ 47f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 452:	0f b6 13             	movzbl (%ebx),%edx
- 455:	83 c3 01             	add    $0x1,%ebx
- 458:	84 d2                	test   %dl,%dl
- 45a:	74 24                	je     480 <printf+0x80>
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
     c = fmt[i] & 0xff;
- 45c:	0f b6 c2             	movzbl %dl,%eax
+ 48c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 45f:	85 c9                	test   %ecx,%ecx
- 461:	74 cd                	je     430 <printf+0x30>
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
       }
     } else if(state == '%'){
- 463:	83 f9 25             	cmp    $0x25,%ecx
- 466:	75 ea                	jne    452 <printf+0x52>
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
       if(c == 'd'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	0f 84 07 01 00 00    	je     578 <printf+0x178>
- 471:	83 e8 63             	sub    $0x63,%eax
- 474:	83 f8 15             	cmp    $0x15,%eax
- 477:	77 17                	ja     490 <printf+0x90>
- 479:	ff 24 85 30 07 00 00 	jmp    *0x730(,%eax,4)
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 90 09 00 00 	jmp    *0x990(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 480:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 483:	5b                   	pop    %ebx
- 484:	5e                   	pop    %esi
- 485:	5f                   	pop    %edi
- 486:	5d                   	pop    %ebp
- 487:	c3                   	ret    
- 488:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 48f:	90                   	nop
-  write(fd, &c, 1);
- 490:	83 ec 04             	sub    $0x4,%esp
- 493:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 496:	6a 01                	push   $0x1
- 498:	57                   	push   %edi
- 499:	56                   	push   %esi
- 49a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 49e:	e8 00 fe ff ff       	call   2a3 <write>
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 d0 fd ff ff       	call   2a3 <write>
         putc(fd, c);
- 4a3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4a7:	83 c4 0c             	add    $0xc,%esp
- 4aa:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4ad:	6a 01                	push   $0x1
- 4af:	57                   	push   %edi
- 4b0:	56                   	push   %esi
- 4b1:	e8 ed fd ff ff       	call   2a3 <write>
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 bd fd ff ff       	call   2a3 <write>
         putc(fd, c);
- 4b6:	83 c4 10             	add    $0x10,%esp
+ 4e6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4b9:	31 c9                	xor    %ecx,%ecx
- 4bb:	eb 95                	jmp    452 <printf+0x52>
- 4bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4c0:	83 ec 0c             	sub    $0xc,%esp
- 4c3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4c8:	6a 00                	push   $0x0
- 4ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4cd:	8b 10                	mov    (%eax),%edx
- 4cf:	89 f0                	mov    %esi,%eax
- 4d1:	e8 7a fe ff ff       	call   350 <printint>
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
         ap++;
- 4d6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 4da:	83 c4 10             	add    $0x10,%esp
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4dd:	31 c9                	xor    %ecx,%ecx
- 4df:	e9 6e ff ff ff       	jmp    452 <printf+0x52>
- 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 4e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4eb:	8b 10                	mov    (%eax),%edx
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
         ap++;
- 4ed:	83 c0 04             	add    $0x4,%eax
- 4f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 4f3:	85 d2                	test   %edx,%edx
- 4f5:	0f 84 8d 00 00 00    	je     588 <printf+0x188>
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
         while(*s != 0){
- 4fb:	0f b6 02             	movzbl (%edx),%eax
+ 52b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 4fe:	31 c9                	xor    %ecx,%ecx
+ 52e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 500:	84 c0                	test   %al,%al
- 502:	0f 84 4a ff ff ff    	je     452 <printf+0x52>
- 508:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 50b:	89 d3                	mov    %edx,%ebx
- 50d:	8d 76 00             	lea    0x0(%esi),%esi
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 510:	83 ec 04             	sub    $0x4,%esp
+ 540:	83 ec 04             	sub    $0x4,%esp
           s++;
- 513:	83 c3 01             	add    $0x1,%ebx
- 516:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 519:	6a 01                	push   $0x1
- 51b:	57                   	push   %edi
- 51c:	56                   	push   %esi
- 51d:	e8 81 fd ff ff       	call   2a3 <write>
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 51 fd ff ff       	call   2a3 <write>
         while(*s != 0){
- 522:	0f b6 03             	movzbl (%ebx),%eax
- 525:	83 c4 10             	add    $0x10,%esp
- 528:	84 c0                	test   %al,%al
- 52a:	75 e4                	jne    510 <printf+0x110>
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
       state = 0;
- 52c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 52f:	31 c9                	xor    %ecx,%ecx
- 531:	e9 1c ff ff ff       	jmp    452 <printf+0x52>
- 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 540:	83 ec 0c             	sub    $0xc,%esp
- 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 548:	6a 01                	push   $0x1
- 54a:	e9 7b ff ff ff       	jmp    4ca <printf+0xca>
- 54f:	90                   	nop
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
         putc(fd, *ap);
- 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 553:	83 ec 04             	sub    $0x4,%esp
+ 583:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 556:	8b 00                	mov    (%eax),%eax
+ 586:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 558:	6a 01                	push   $0x1
- 55a:	57                   	push   %edi
- 55b:	56                   	push   %esi
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
         putc(fd, *ap);
- 55c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 55f:	e8 3f fd ff ff       	call   2a3 <write>
+ 58f:	e8 0f fd ff ff       	call   2a3 <write>
         ap++;
- 564:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 568:	83 c4 10             	add    $0x10,%esp
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 56b:	31 c9                	xor    %ecx,%ecx
- 56d:	e9 e0 fe ff ff       	jmp    452 <printf+0x52>
- 572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 578:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 57b:	83 ec 04             	sub    $0x4,%esp
- 57e:	e9 2a ff ff ff       	jmp    4ad <printf+0xad>
- 583:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 587:	90                   	nop
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
           s = "(null)";
- 588:	ba 28 07 00 00       	mov    $0x728,%edx
+ 5b8:	ba 88 09 00 00       	mov    $0x988,%edx
         while(*s != 0){
- 58d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 590:	b8 28 00 00 00       	mov    $0x28,%eax
- 595:	89 d3                	mov    %edx,%ebx
- 597:	e9 74 ff ff ff       	jmp    510 <printf+0x110>
- 59c:	66 90                	xchg   %ax,%ax
- 59e:	66 90                	xchg   %ax,%ax
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
 
-000005a0 <free>:
+000005d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5a0:	55                   	push   %ebp
+ 5d0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5a1:	a1 30 0a 00 00       	mov    0xa30,%eax
+ 5d1:	a1 40 0d 00 00       	mov    0xd40,%eax
 {
- 5a6:	89 e5                	mov    %esp,%ebp
- 5a8:	57                   	push   %edi
- 5a9:	56                   	push   %esi
- 5aa:	53                   	push   %ebx
- 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5b8:	89 c2                	mov    %eax,%edx
- 5ba:	8b 00                	mov    (%eax),%eax
- 5bc:	39 ca                	cmp    %ecx,%edx
- 5be:	73 30                	jae    5f0 <free+0x50>
- 5c0:	39 c1                	cmp    %eax,%ecx
- 5c2:	72 04                	jb     5c8 <free+0x28>
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5c4:	39 c2                	cmp    %eax,%edx
- 5c6:	72 f0                	jb     5b8 <free+0x18>
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ce:	39 f8                	cmp    %edi,%eax
- 5d0:	74 30                	je     602 <free+0x62>
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 5d2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 5d5:	8b 42 04             	mov    0x4(%edx),%eax
- 5d8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5db:	39 f1                	cmp    %esi,%ecx
- 5dd:	74 3a                	je     619 <free+0x79>
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 5df:	89 0a                	mov    %ecx,(%edx)
+ 60f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 5e1:	5b                   	pop    %ebx
+ 611:	5b                   	pop    %ebx
   freep = p;
- 5e2:	89 15 30 0a 00 00    	mov    %edx,0xa30
+ 612:	89 15 40 0d 00 00    	mov    %edx,0xd40
 }
- 5e8:	5e                   	pop    %esi
- 5e9:	5f                   	pop    %edi
- 5ea:	5d                   	pop    %ebp
- 5eb:	c3                   	ret    
- 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f0:	39 c2                	cmp    %eax,%edx
- 5f2:	72 c4                	jb     5b8 <free+0x18>
- 5f4:	39 c1                	cmp    %eax,%ecx
- 5f6:	73 c0                	jae    5b8 <free+0x18>
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 f8                	cmp    %edi,%eax
- 600:	75 d0                	jne    5d2 <free+0x32>
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 602:	03 70 04             	add    0x4(%eax),%esi
- 605:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 608:	8b 02                	mov    (%edx),%eax
- 60a:	8b 00                	mov    (%eax),%eax
- 60c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 60f:	8b 42 04             	mov    0x4(%edx),%eax
- 612:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 615:	39 f1                	cmp    %esi,%ecx
- 617:	75 c6                	jne    5df <free+0x3f>
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
     p->s.size += bp->s.size;
- 619:	03 43 fc             	add    -0x4(%ebx),%eax
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 61c:	89 15 30 0a 00 00    	mov    %edx,0xa30
+ 64c:	89 15 40 0d 00 00    	mov    %edx,0xd40
     p->s.size += bp->s.size;
- 622:	89 42 04             	mov    %eax,0x4(%edx)
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 625:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 628:	89 0a                	mov    %ecx,(%edx)
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
 }
- 62a:	5b                   	pop    %ebx
- 62b:	5e                   	pop    %esi
- 62c:	5f                   	pop    %edi
- 62d:	5d                   	pop    %ebp
- 62e:	c3                   	ret    
- 62f:	90                   	nop
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
 
-00000630 <malloc>:
+00000660 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 630:	55                   	push   %ebp
- 631:	89 e5                	mov    %esp,%ebp
- 633:	57                   	push   %edi
- 634:	56                   	push   %esi
- 635:	53                   	push   %ebx
- 636:	83 ec 1c             	sub    $0x1c,%esp
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 639:	8b 45 08             	mov    0x8(%ebp),%eax
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 63c:	8b 3d 30 0a 00 00    	mov    0xa30,%edi
+ 66c:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 642:	8d 70 07             	lea    0x7(%eax),%esi
- 645:	c1 ee 03             	shr    $0x3,%esi
- 648:	83 c6 01             	add    $0x1,%esi
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 64b:	85 ff                	test   %edi,%edi
- 64d:	0f 84 9d 00 00 00    	je     6f0 <malloc+0xc0>
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 653:	8b 17                	mov    (%edi),%edx
+ 683:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 655:	8b 4a 04             	mov    0x4(%edx),%ecx
- 658:	39 f1                	cmp    %esi,%ecx
- 65a:	73 6a                	jae    6c6 <malloc+0x96>
- 65c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 661:	39 de                	cmp    %ebx,%esi
- 663:	0f 43 de             	cmovae %esi,%ebx
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 666:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 66d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 670:	eb 17                	jmp    689 <malloc+0x59>
- 672:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 678:	8b 02                	mov    (%edx),%eax
+ 6a8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 67a:	8b 48 04             	mov    0x4(%eax),%ecx
- 67d:	39 f1                	cmp    %esi,%ecx
- 67f:	73 4f                	jae    6d0 <malloc+0xa0>
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 681:	8b 3d 30 0a 00 00    	mov    0xa30,%edi
- 687:	89 c2                	mov    %eax,%edx
- 689:	39 d7                	cmp    %edx,%edi
- 68b:	75 eb                	jne    678 <malloc+0x48>
+ 6b1:	8b 3d 40 0d 00 00    	mov    0xd40,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 68d:	83 ec 0c             	sub    $0xc,%esp
- 690:	ff 75 e4             	push   -0x1c(%ebp)
- 693:	e8 73 fc ff ff       	call   30b <sbrk>
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 43 fc ff ff       	call   30b <sbrk>
   if(p == (char*)-1)
- 698:	83 c4 10             	add    $0x10,%esp
- 69b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 69e:	74 1c                	je     6bc <malloc+0x8c>
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
   hp->s.size = nu;
- 6a0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6a3:	83 ec 0c             	sub    $0xc,%esp
- 6a6:	83 c0 08             	add    $0x8,%eax
- 6a9:	50                   	push   %eax
- 6aa:	e8 f1 fe ff ff       	call   5a0 <free>
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
   return freep;
- 6af:	8b 15 30 0a 00 00    	mov    0xa30,%edx
+ 6df:	8b 15 40 0d 00 00    	mov    0xd40,%edx
       if((p = morecore(nunits)) == 0)
- 6b5:	83 c4 10             	add    $0x10,%esp
- 6b8:	85 d2                	test   %edx,%edx
- 6ba:	75 bc                	jne    678 <malloc+0x48>
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
         return 0;
   }
 }
- 6bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6bf:	31 c0                	xor    %eax,%eax
+ 6ef:	31 c0                	xor    %eax,%eax
 }
- 6c1:	5b                   	pop    %ebx
- 6c2:	5e                   	pop    %esi
- 6c3:	5f                   	pop    %edi
- 6c4:	5d                   	pop    %ebp
- 6c5:	c3                   	ret    
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
     if(p->s.size >= nunits){
- 6c6:	89 d0                	mov    %edx,%eax
- 6c8:	89 fa                	mov    %edi,%edx
- 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6d0:	39 ce                	cmp    %ecx,%esi
- 6d2:	74 4c                	je     720 <malloc+0xf0>
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
         p->s.size -= nunits;
- 6d4:	29 f1                	sub    %esi,%ecx
- 6d6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6dc:	89 70 04             	mov    %esi,0x4(%eax)
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6df:	89 15 30 0a 00 00    	mov    %edx,0xa30
+ 70f:	89 15 40 0d 00 00    	mov    %edx,0xd40
 }
- 6e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 6e8:	83 c0 08             	add    $0x8,%eax
+ 718:	83 c0 08             	add    $0x8,%eax
 }
- 6eb:	5b                   	pop    %ebx
- 6ec:	5e                   	pop    %esi
- 6ed:	5f                   	pop    %edi
- 6ee:	5d                   	pop    %ebp
- 6ef:	c3                   	ret    
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 6f0:	c7 05 30 0a 00 00 34 	movl   $0xa34,0xa30
- 6f7:	0a 00 00 
+ 720:	c7 05 40 0d 00 00 44 	movl   $0xd44,0xd40
+ 727:	0d 00 00 
     base.s.size = 0;
- 6fa:	bf 34 0a 00 00       	mov    $0xa34,%edi
+ 72a:	bf 44 0d 00 00       	mov    $0xd44,%edi
     base.s.ptr = freep = prevp = &base;
- 6ff:	c7 05 34 0a 00 00 34 	movl   $0xa34,0xa34
- 706:	0a 00 00 
+ 72f:	c7 05 44 0d 00 00 44 	movl   $0xd44,0xd44
+ 736:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 709:	89 fa                	mov    %edi,%edx
+ 739:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 70b:	c7 05 38 0a 00 00 00 	movl   $0x0,0xa38
- 712:	00 00 00 
+ 73b:	c7 05 48 0d 00 00 00 	movl   $0x0,0xd48
+ 742:	00 00 00 
     if(p->s.size >= nunits){
- 715:	e9 42 ff ff ff       	jmp    65c <malloc+0x2c>
- 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 720:	8b 08                	mov    (%eax),%ecx
- 722:	89 0a                	mov    %ecx,(%edx)
- 724:	eb b9                	jmp    6df <malloc+0xaf>
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 756:	66 90                	xchg   %ax,%ax
+ 758:	66 90                	xchg   %ax,%ax
+ 75a:	66 90                	xchg   %ax,%ax
+ 75c:	66 90                	xchg   %ax,%ax
+ 75e:	66 90                	xchg   %ax,%ax
+
+00000760 <sgenrand>:
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+ 760:	55                   	push   %ebp
+ 761:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 766:	89 e5                	mov    %esp,%ebp
+ 768:	8b 55 08             	mov    0x8(%ebp),%edx
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+ 76b:	89 15 60 0d 00 00    	mov    %edx,0xd60
+    for (mti=1; mti<N; mti++)
+ 771:	eb 08                	jmp    77b <sgenrand+0x1b>
+ 773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 777:	90                   	nop
+ 778:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 77b:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 781:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 783:	3d 1c 17 00 00       	cmp    $0x171c,%eax
+ 788:	75 ee                	jne    778 <sgenrand+0x18>
+ 78a:	c7 05 20 0d 00 00 70 	movl   $0x270,0xd20
+ 791:	02 00 00 
+}
+ 794:	5d                   	pop    %ebp
+ 795:	c3                   	ret    
+ 796:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79d:	8d 76 00             	lea    0x0(%esi),%esi
+
+000007a0 <genrand>:
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+ 7a0:	a1 20 0d 00 00       	mov    0xd20,%eax
+ 7a5:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 7aa:	7f 3d                	jg     7e9 <genrand+0x49>
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+ 7ac:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 7b3:	8d 50 01             	lea    0x1(%eax),%edx
+ 7b6:	89 15 20 0d 00 00    	mov    %edx,0xd20
+    y ^= TEMPERING_SHIFT_U(y);
+ 7bc:	89 ca                	mov    %ecx,%edx
+ 7be:	c1 ea 0b             	shr    $0xb,%edx
+ 7c1:	31 ca                	xor    %ecx,%edx
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+ 7c3:	89 d0                	mov    %edx,%eax
+ 7c5:	c1 e0 07             	shl    $0x7,%eax
+ 7c8:	25 80 56 2c 9d       	and    $0x9d2c5680,%eax
+ 7cd:	31 d0                	xor    %edx,%eax
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+ 7cf:	89 c2                	mov    %eax,%edx
+ 7d1:	c1 e2 0f             	shl    $0xf,%edx
+ 7d4:	81 e2 00 00 c6 ef    	and    $0xefc60000,%edx
+ 7da:	31 c2                	xor    %eax,%edx
+    y ^= TEMPERING_SHIFT_L(y);
+ 7dc:	89 d0                	mov    %edx,%eax
+ 7de:	c1 e8 12             	shr    $0x12,%eax
+ 7e1:	31 d0                	xor    %edx,%eax
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+ 7e3:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
+}
+ 7e8:	c3                   	ret    
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+ 7e9:	3d 71 02 00 00       	cmp    $0x271,%eax
+ 7ee:	0f 84 d4 00 00 00    	je     8c8 <genrand+0x128>
+    mt[0]= seed & 0xffffffff;
+ 7f4:	31 c0                	xor    %eax,%eax
+ 7f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 800:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 807:	83 c0 01             	add    $0x1,%eax
+ 80a:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 811:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 817:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 81d:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+ 81f:	89 d1                	mov    %edx,%ecx
+ 821:	83 e2 01             	and    $0x1,%edx
+ 824:	d1 e9                	shr    %ecx
+ 826:	33 0c 85 90 13 00 00 	xor    0x1390(,%eax,4),%ecx
+ 82d:	33 0c 95 fc 09 00 00 	xor    0x9fc(,%edx,4),%ecx
+ 834:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (kk=0;kk<N-M;kk++) {
+ 83b:	3d e3 00 00 00       	cmp    $0xe3,%eax
+ 840:	75 be                	jne    800 <genrand+0x60>
+ 842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+ 848:	8b 0c 85 60 0d 00 00 	mov    0xd60(,%eax,4),%ecx
+ 84f:	83 c0 01             	add    $0x1,%eax
+ 852:	8b 14 85 60 0d 00 00 	mov    0xd60(,%eax,4),%edx
+ 859:	81 e1 00 00 00 80    	and    $0x80000000,%ecx
+ 85f:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 865:	09 ca                	or     %ecx,%edx
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+ 867:	89 d1                	mov    %edx,%ecx
+ 869:	83 e2 01             	and    $0x1,%edx
+ 86c:	d1 e9                	shr    %ecx
+ 86e:	33 0c 85 d0 09 00 00 	xor    0x9d0(,%eax,4),%ecx
+ 875:	33 0c 95 fc 09 00 00 	xor    0x9fc(,%edx,4),%ecx
+ 87c:	89 0c 85 5c 0d 00 00 	mov    %ecx,0xd5c(,%eax,4)
+        for (;kk<N-1;kk++) {
+ 883:	3d 6f 02 00 00       	cmp    $0x26f,%eax
+ 888:	75 be                	jne    848 <genrand+0xa8>
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+ 88a:	8b 0d 60 0d 00 00    	mov    0xd60,%ecx
+ 890:	a1 1c 17 00 00       	mov    0x171c,%eax
+ 895:	89 ca                	mov    %ecx,%edx
+ 897:	25 00 00 00 80       	and    $0x80000000,%eax
+ 89c:	81 e2 ff ff ff 7f    	and    $0x7fffffff,%edx
+ 8a2:	09 d0                	or     %edx,%eax
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+ 8a4:	89 c2                	mov    %eax,%edx
+ 8a6:	83 e0 01             	and    $0x1,%eax
+ 8a9:	d1 ea                	shr    %edx
+ 8ab:	33 15 90 13 00 00    	xor    0x1390,%edx
+ 8b1:	33 14 85 fc 09 00 00 	xor    0x9fc(,%eax,4),%edx
+ 8b8:	89 15 1c 17 00 00    	mov    %edx,0x171c
+ 8be:	ba 01 00 00 00       	mov    $0x1,%edx
+ 8c3:	e9 ee fe ff ff       	jmp    7b6 <genrand+0x16>
+    mt[0]= seed & 0xffffffff;
+ 8c8:	b8 64 0d 00 00       	mov    $0xd64,%eax
+ 8cd:	b9 1c 17 00 00       	mov    $0x171c,%ecx
+ 8d2:	ba 05 11 00 00       	mov    $0x1105,%edx
+ 8d7:	c7 05 60 0d 00 00 05 	movl   $0x1105,0xd60
+ 8de:	11 00 00 
+    for (mti=1; mti<N; mti++)
+ 8e1:	eb 08                	jmp    8eb <genrand+0x14b>
+ 8e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8e7:	90                   	nop
+ 8e8:	83 c0 04             	add    $0x4,%eax
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+ 8eb:	69 d2 cd 0d 01 00    	imul   $0x10dcd,%edx,%edx
+ 8f1:	89 10                	mov    %edx,(%eax)
+    for (mti=1; mti<N; mti++)
+ 8f3:	39 c1                	cmp    %eax,%ecx
+ 8f5:	75 f1                	jne    8e8 <genrand+0x148>
+ 8f7:	e9 f8 fe ff ff       	jmp    7f4 <genrand+0x54>
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000900 <random_at_most>:
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+ 900:	55                   	push   %ebp
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+ 901:	31 d2                	xor    %edx,%edx
+long random_at_most(long max) {
+ 903:	89 e5                	mov    %esp,%ebp
+ 905:	56                   	push   %esi
+    num_bins = (unsigned long) max + 1,
+ 906:	8b 45 08             	mov    0x8(%ebp),%eax
+long random_at_most(long max) {
+ 909:	53                   	push   %ebx
+    bin_size = num_rand / num_bins,
+ 90a:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    num_bins = (unsigned long) max + 1,
+ 90f:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 912:	89 d8                	mov    %ebx,%eax
+ 914:	f7 f1                	div    %ecx
+ 916:	89 c6                	mov    %eax,%esi
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+ 918:	29 d3                	sub    %edx,%ebx
+ 91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+   x = genrand();
+ 920:	e8 7b fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 925:	39 d8                	cmp    %ebx,%eax
+ 927:	73 f7                	jae    920 <random_at_most+0x20>
+
+  // Truncated division is intentional
+  return x/bin_size;
+ 929:	31 d2                	xor    %edx,%edx
+}
+ 92b:	5b                   	pop    %ebx
+  return x/bin_size;
+ 92c:	f7 f6                	div    %esi
+}
+ 92e:	5e                   	pop    %esi
+ 92f:	5d                   	pop    %ebp
+ 930:	c3                   	ret    
+ 931:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 938:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+
+00000940 <randomrange>:
+
+int randomrange(int low, int high){
+ 940:	55                   	push   %ebp
+ 941:	89 e5                	mov    %esp,%ebp
+ 943:	57                   	push   %edi
+ 944:	56                   	push   %esi
+ 945:	53                   	push   %ebx
+ 946:	83 ec 0c             	sub    $0xc,%esp
+ 949:	8b 75 08             	mov    0x8(%ebp),%esi
+ 94c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(high<low){
+ 94f:	39 f0                	cmp    %esi,%eax
+ 951:	7d 06                	jge    959 <randomrange+0x19>
+ 953:	89 f2                	mov    %esi,%edx
+ 955:	89 c6                	mov    %eax,%esi
+ 957:	89 d0                	mov    %edx,%eax
+    int temp=high;
+    high=low;
+    low=temp;
+  }
+  int val = random_at_most(high-low) + low;
+ 959:	29 f0                	sub    %esi,%eax
+    bin_size = num_rand / num_bins,
+ 95b:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+ 960:	31 d2                	xor    %edx,%edx
+    num_bins = (unsigned long) max + 1,
+ 962:	8d 48 01             	lea    0x1(%eax),%ecx
+    bin_size = num_rand / num_bins,
+ 965:	89 d8                	mov    %ebx,%eax
+ 967:	f7 f1                	div    %ecx
+ 969:	89 c7                	mov    %eax,%edi
+  while (num_rand - defect <= (unsigned long)x);
+ 96b:	29 d3                	sub    %edx,%ebx
+ 96d:	8d 76 00             	lea    0x0(%esi),%esi
+   x = genrand();
+ 970:	e8 2b fe ff ff       	call   7a0 <genrand>
+  while (num_rand - defect <= (unsigned long)x);
+ 975:	39 d8                	cmp    %ebx,%eax
+ 977:	73 f7                	jae    970 <randomrange+0x30>
+  return x/bin_size;
+ 979:	31 d2                	xor    %edx,%edx
+  return val;
+}
+ 97b:	83 c4 0c             	add    $0xc,%esp
+  return x/bin_size;
+ 97e:	f7 f7                	div    %edi
+}
+ 980:	5b                   	pop    %ebx
+  int val = random_at_most(high-low) + low;
+ 981:	01 f0                	add    %esi,%eax
+}
+ 983:	5e                   	pop    %esi
+ 984:	5f                   	pop    %edi
+ 985:	5d                   	pop    %ebp
+ 986:	c3                   	ret    
diff -ruN xv6-public/zombie.d xv6-public-with-hybrid/zombie.d
--- xv6-public/zombie.d	2022-09-06 09:47:10.842525000 +0530
+++ xv6-public-with-hybrid/zombie.d	2022-10-07 18:50:02.028948724 +0530
@@ -1 +1,2 @@
-zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/zombie.o and xv6-public-with-hybrid/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-public-with-hybrid/zombie.sym
--- xv6-public/zombie.sym	2022-09-06 09:47:10.870556000 +0530
+++ xv6-public-with-hybrid/zombie.sym	2022-10-07 18:50:02.124948441 +0530
@@ -1,20 +1,28 @@
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
-00000350 printint
-00000788 digits.0
+00000380 printint
+000009e8 digits.0
 00000000 umalloc.c
-00000a30 freep
-00000a34 base
+00000d40 freep
+00000d44 base
+00000000 random.c
+00000d60 mt
+00000d20 mti
+000009fc mag01.0
 00000030 strcpy
-00000400 printf
+00000760 sgenrand
+00000430 printf
 00000333 thread_exit
 00000250 memmove
 000002cb mknod
 00000150 gets
 00000303 getpid
-00000630 malloc
+00000660 malloc
 00000313 sleep
+00000363 get_burst_time
+00000900 random_at_most
+0000036b getCurrentInfo
 00000293 pipe
 000002a3 write
 000002db fstat
@@ -27,14 +35,19 @@
 0000027b fork
 0000030b sbrk
 0000031b uptime
-00000a30 __bss_start
+00000d24 __bss_start
 000000f0 memset
 00000000 main
+0000035b set_burst_time
 00000060 strcmp
 000002fb dup
+0000034b getMaxPid
+000007a0 genrand
+00000343 getNumProc
+00000353 getProcInfo
 000001c0 stat
-00000a30 _edata
-00000a3c _end
+00000d24 _edata
+00001720 _end
 000002e3 link
 00000283 exit
 00000210 atoi
@@ -43,7 +56,9 @@
 000002c3 open
 00000110 strchr
 00000323 thread_create
+00000373 getCurrentPID
+00000940 randomrange
 000002eb mkdir
 000002ab close
 0000032b thread_join
-000005a0 free
+000005d0 free
