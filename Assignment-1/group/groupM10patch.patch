Binary files xv6-public-org/bio.o and xv6-public/bio.o differ
Binary files xv6-public-org/_cat and xv6-public/_cat differ
diff -u xv6-public-org/cat.asm xv6-public/cat.asm
--- xv6-public-org/cat.asm	2022-09-04 11:47:10.825689201 +0530
+++ xv6-public/cat.asm	2022-09-05 23:16:36.057927482 +0530
@@ -70,9 +70,9 @@
       printf(1, "cat: cannot open %s\n", argv[i]);
   69:	50                   	push   %eax
   6a:	ff 33                	push   (%ebx)
-  6c:	68 0b 08 00 00       	push   $0x80b
+  6c:	68 2b 08 00 00       	push   $0x82b
   71:	6a 01                	push   $0x1
-  73:	e8 48 04 00 00       	call   4c0 <printf>
+  73:	e8 68 04 00 00       	call   4e0 <printf>
       exit();
   78:	e8 e6 02 00 00       	call   363 <exit>
     cat(0);
@@ -97,7 +97,7 @@
     if (write(1, buf, n) != n) {
   a0:	83 ec 04             	sub    $0x4,%esp
   a3:	53                   	push   %ebx
-  a4:	68 80 0b 00 00       	push   $0xb80
+  a4:	68 a0 0b 00 00       	push   $0xba0
   a9:	6a 01                	push   $0x1
   ab:	e8 d3 02 00 00       	call   383 <write>
   b0:	83 c4 10             	add    $0x10,%esp
@@ -106,7 +106,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0) {
   b7:	83 ec 04             	sub    $0x4,%esp
   ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 80 0b 00 00       	push   $0xb80
+  bf:	68 a0 0b 00 00       	push   $0xba0
   c4:	56                   	push   %esi
   c5:	e8 b1 02 00 00       	call   37b <read>
   ca:	83 c4 10             	add    $0x10,%esp
@@ -123,17 +123,17 @@
   db:	c3                   	ret    
       printf(1, "cat: write error\n");
   dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 e8 07 00 00       	push   $0x7e8
+  df:	68 08 08 00 00       	push   $0x808
   e4:	6a 01                	push   $0x1
-  e6:	e8 d5 03 00 00       	call   4c0 <printf>
+  e6:	e8 f5 03 00 00       	call   4e0 <printf>
       exit();
   eb:	e8 73 02 00 00       	call   363 <exit>
     printf(1, "cat: read error\n");
   f0:	50                   	push   %eax
   f1:	50                   	push   %eax
-  f2:	68 fa 07 00 00       	push   $0x7fa
+  f2:	68 1a 08 00 00       	push   $0x81a
   f7:	6a 01                	push   $0x1
-  f9:	e8 c2 03 00 00       	call   4c0 <printf>
+  f9:	e8 e2 03 00 00       	call   4e0 <printf>
     exit();
   fe:	e8 60 02 00 00       	call   363 <exit>
  103:	66 90                	xchg   %ax,%ax
@@ -668,569 +668,592 @@
  3fb:	b8 0e 00 00 00       	mov    $0xe,%eax
  400:	cd 40                	int    $0x40
  402:	c3                   	ret    
- 403:	66 90                	xchg   %ax,%ax
- 405:	66 90                	xchg   %ax,%ax
- 407:	66 90                	xchg   %ax,%ax
- 409:	66 90                	xchg   %ax,%ax
- 40b:	66 90                	xchg   %ax,%ax
- 40d:	66 90                	xchg   %ax,%ax
- 40f:	90                   	nop
 
-00000410 <printint>:
+00000403 <thread_create>:
+SYSCALL(thread_create)
+ 403:	b8 16 00 00 00       	mov    $0x16,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <thread_join>:
+SYSCALL(thread_join)
+ 40b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <thread_exit>:
+SYSCALL(thread_exit)
+ 413:	b8 17 00 00 00       	mov    $0x17,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <draw>:
+ 41b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+ 423:	66 90                	xchg   %ax,%ax
+ 425:	66 90                	xchg   %ax,%ax
+ 427:	66 90                	xchg   %ax,%ax
+ 429:	66 90                	xchg   %ax,%ax
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 3c             	sub    $0x3c,%esp
- 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+ 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 41c:	89 d1                	mov    %edx,%ecx
+ 43c:	89 d1                	mov    %edx,%ecx
 {
- 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 421:	85 d2                	test   %edx,%edx
- 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
- 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 42d:	74 79                	je     4a8 <printint+0x98>
+ 441:	85 d2                	test   %edx,%edx
+ 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
+ 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44d:	74 79                	je     4c8 <printint+0x98>
     neg = 1;
- 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 436:	f7 d9                	neg    %ecx
+ 456:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 438:	31 db                	xor    %ebx,%ebx
- 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 458:	31 db                	xor    %ebx,%ebx
+ 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 440:	89 c8                	mov    %ecx,%eax
- 442:	31 d2                	xor    %edx,%edx
- 444:	89 cf                	mov    %ecx,%edi
- 446:	f7 75 c4             	divl   -0x3c(%ebp)
- 449:	0f b6 92 80 08 00 00 	movzbl 0x880(%edx),%edx
- 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 453:	89 d8                	mov    %ebx,%eax
- 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 460:	89 c8                	mov    %ecx,%eax
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	89 cf                	mov    %ecx,%edi
+ 466:	f7 75 c4             	divl   -0x3c(%ebp)
+ 469:	0f b6 92 a0 08 00 00 	movzbl 0x8a0(%edx),%edx
+ 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 473:	89 d8                	mov    %ebx,%eax
+ 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 461:	76 dd                	jbe    440 <printint+0x30>
+ 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 481:	76 dd                	jbe    460 <printint+0x30>
   if(neg)
- 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 466:	85 c9                	test   %ecx,%ecx
- 468:	74 0c                	je     476 <printint+0x66>
+ 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 486:	85 c9                	test   %ecx,%ecx
+ 488:	74 0c                	je     496 <printint+0x66>
     buf[i++] = '-';
- 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 46f:	89 d8                	mov    %ebx,%eax
+ 48f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 47d:	eb 07                	jmp    486 <printint+0x76>
- 47f:	90                   	nop
+ 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 49d:	eb 07                	jmp    4a6 <printint+0x76>
+ 49f:	90                   	nop
     putc(fd, buf[i]);
- 480:	0f b6 13             	movzbl (%ebx),%edx
- 483:	83 eb 01             	sub    $0x1,%ebx
+ 4a0:	0f b6 13             	movzbl (%ebx),%edx
+ 4a3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 486:	83 ec 04             	sub    $0x4,%esp
- 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 48c:	6a 01                	push   $0x1
- 48e:	56                   	push   %esi
- 48f:	57                   	push   %edi
- 490:	e8 ee fe ff ff       	call   383 <write>
+ 4a6:	83 ec 04             	sub    $0x4,%esp
+ 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ac:	6a 01                	push   $0x1
+ 4ae:	56                   	push   %esi
+ 4af:	57                   	push   %edi
+ 4b0:	e8 ce fe ff ff       	call   383 <write>
   while(--i >= 0)
- 495:	83 c4 10             	add    $0x10,%esp
- 498:	39 de                	cmp    %ebx,%esi
- 49a:	75 e4                	jne    480 <printint+0x70>
-}
- 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 49f:	5b                   	pop    %ebx
- 4a0:	5e                   	pop    %esi
- 4a1:	5f                   	pop    %edi
- 4a2:	5d                   	pop    %ebp
- 4a3:	c3                   	ret    
- 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x70>
+}
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4af:	eb 87                	jmp    438 <printint+0x28>
- 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4bf:	90                   	nop
+ 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4cf:	eb 87                	jmp    458 <printint+0x28>
+ 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
 
-000004c0 <printf>:
+000004e0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4c0:	55                   	push   %ebp
- 4c1:	89 e5                	mov    %esp,%ebp
- 4c3:	57                   	push   %edi
- 4c4:	56                   	push   %esi
- 4c5:	53                   	push   %ebx
- 4c6:	83 ec 2c             	sub    $0x2c,%esp
+ 4e0:	55                   	push   %ebp
+ 4e1:	89 e5                	mov    %esp,%ebp
+ 4e3:	57                   	push   %edi
+ 4e4:	56                   	push   %esi
+ 4e5:	53                   	push   %ebx
+ 4e6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 4e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 4cc:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4ec:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 4cf:	0f b6 13             	movzbl (%ebx),%edx
- 4d2:	84 d2                	test   %dl,%dl
- 4d4:	74 6a                	je     540 <printf+0x80>
+ 4ef:	0f b6 13             	movzbl (%ebx),%edx
+ 4f2:	84 d2                	test   %dl,%dl
+ 4f4:	74 6a                	je     560 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 4d6:	8d 45 10             	lea    0x10(%ebp),%eax
- 4d9:	83 c3 01             	add    $0x1,%ebx
+ 4f6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4f9:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 4dc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 4fc:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4df:	31 c9                	xor    %ecx,%ecx
+ 4ff:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4e4:	eb 36                	jmp    51c <printf+0x5c>
- 4e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
- 4f0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 501:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 504:	eb 36                	jmp    53c <printf+0x5c>
+ 506:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+ 510:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 4f3:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 513:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 4f8:	83 f8 25             	cmp    $0x25,%eax
- 4fb:	74 15                	je     512 <printf+0x52>
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	74 15                	je     532 <printf+0x52>
   write(fd, &c, 1);
- 4fd:	83 ec 04             	sub    $0x4,%esp
- 500:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 503:	6a 01                	push   $0x1
- 505:	57                   	push   %edi
- 506:	56                   	push   %esi
- 507:	e8 77 fe ff ff       	call   383 <write>
- 50c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 51d:	83 ec 04             	sub    $0x4,%esp
+ 520:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 523:	6a 01                	push   $0x1
+ 525:	57                   	push   %edi
+ 526:	56                   	push   %esi
+ 527:	e8 57 fe ff ff       	call   383 <write>
+ 52c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 50f:	83 c4 10             	add    $0x10,%esp
+ 52f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 512:	0f b6 13             	movzbl (%ebx),%edx
- 515:	83 c3 01             	add    $0x1,%ebx
- 518:	84 d2                	test   %dl,%dl
- 51a:	74 24                	je     540 <printf+0x80>
+ 532:	0f b6 13             	movzbl (%ebx),%edx
+ 535:	83 c3 01             	add    $0x1,%ebx
+ 538:	84 d2                	test   %dl,%dl
+ 53a:	74 24                	je     560 <printf+0x80>
     c = fmt[i] & 0xff;
- 51c:	0f b6 c2             	movzbl %dl,%eax
+ 53c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 51f:	85 c9                	test   %ecx,%ecx
- 521:	74 cd                	je     4f0 <printf+0x30>
+ 53f:	85 c9                	test   %ecx,%ecx
+ 541:	74 cd                	je     510 <printf+0x30>
       }
     } else if(state == '%'){
- 523:	83 f9 25             	cmp    $0x25,%ecx
- 526:	75 ea                	jne    512 <printf+0x52>
+ 543:	83 f9 25             	cmp    $0x25,%ecx
+ 546:	75 ea                	jne    532 <printf+0x52>
       if(c == 'd'){
- 528:	83 f8 25             	cmp    $0x25,%eax
- 52b:	0f 84 07 01 00 00    	je     638 <printf+0x178>
- 531:	83 e8 63             	sub    $0x63,%eax
- 534:	83 f8 15             	cmp    $0x15,%eax
- 537:	77 17                	ja     550 <printf+0x90>
- 539:	ff 24 85 28 08 00 00 	jmp    *0x828(,%eax,4)
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	0f 84 07 01 00 00    	je     658 <printf+0x178>
+ 551:	83 e8 63             	sub    $0x63,%eax
+ 554:	83 f8 15             	cmp    $0x15,%eax
+ 557:	77 17                	ja     570 <printf+0x90>
+ 559:	ff 24 85 48 08 00 00 	jmp    *0x848(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 540:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 543:	5b                   	pop    %ebx
- 544:	5e                   	pop    %esi
- 545:	5f                   	pop    %edi
- 546:	5d                   	pop    %ebp
- 547:	c3                   	ret    
- 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
+ 560:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 563:	5b                   	pop    %ebx
+ 564:	5e                   	pop    %esi
+ 565:	5f                   	pop    %edi
+ 566:	5d                   	pop    %ebp
+ 567:	c3                   	ret    
+ 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
   write(fd, &c, 1);
- 550:	83 ec 04             	sub    $0x4,%esp
- 553:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 556:	6a 01                	push   $0x1
- 558:	57                   	push   %edi
- 559:	56                   	push   %esi
- 55a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 55e:	e8 20 fe ff ff       	call   383 <write>
+ 570:	83 ec 04             	sub    $0x4,%esp
+ 573:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 576:	6a 01                	push   $0x1
+ 578:	57                   	push   %edi
+ 579:	56                   	push   %esi
+ 57a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 57e:	e8 00 fe ff ff       	call   383 <write>
         putc(fd, c);
- 563:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 583:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 567:	83 c4 0c             	add    $0xc,%esp
- 56a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 56d:	6a 01                	push   $0x1
- 56f:	57                   	push   %edi
- 570:	56                   	push   %esi
- 571:	e8 0d fe ff ff       	call   383 <write>
+ 587:	83 c4 0c             	add    $0xc,%esp
+ 58a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 58d:	6a 01                	push   $0x1
+ 58f:	57                   	push   %edi
+ 590:	56                   	push   %esi
+ 591:	e8 ed fd ff ff       	call   383 <write>
         putc(fd, c);
- 576:	83 c4 10             	add    $0x10,%esp
+ 596:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 579:	31 c9                	xor    %ecx,%ecx
- 57b:	eb 95                	jmp    512 <printf+0x52>
- 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 599:	31 c9                	xor    %ecx,%ecx
+ 59b:	eb 95                	jmp    532 <printf+0x52>
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 580:	83 ec 0c             	sub    $0xc,%esp
- 583:	b9 10 00 00 00       	mov    $0x10,%ecx
- 588:	6a 00                	push   $0x0
- 58a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 58d:	8b 10                	mov    (%eax),%edx
- 58f:	89 f0                	mov    %esi,%eax
- 591:	e8 7a fe ff ff       	call   410 <printint>
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a8:	6a 00                	push   $0x0
+ 5aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5ad:	8b 10                	mov    (%eax),%edx
+ 5af:	89 f0                	mov    %esi,%eax
+ 5b1:	e8 7a fe ff ff       	call   430 <printint>
         ap++;
- 596:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 59a:	83 c4 10             	add    $0x10,%esp
+ 5b6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ba:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 59d:	31 c9                	xor    %ecx,%ecx
- 59f:	e9 6e ff ff ff       	jmp    512 <printf+0x52>
- 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	31 c9                	xor    %ecx,%ecx
+ 5bf:	e9 6e ff ff ff       	jmp    532 <printf+0x52>
+ 5c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5ab:	8b 10                	mov    (%eax),%edx
+ 5c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5cb:	8b 10                	mov    (%eax),%edx
         ap++;
- 5ad:	83 c0 04             	add    $0x4,%eax
- 5b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5cd:	83 c0 04             	add    $0x4,%eax
+ 5d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5b3:	85 d2                	test   %edx,%edx
- 5b5:	0f 84 8d 00 00 00    	je     648 <printf+0x188>
+ 5d3:	85 d2                	test   %edx,%edx
+ 5d5:	0f 84 8d 00 00 00    	je     668 <printf+0x188>
         while(*s != 0){
- 5bb:	0f b6 02             	movzbl (%edx),%eax
+ 5db:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 5be:	31 c9                	xor    %ecx,%ecx
+ 5de:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 5c0:	84 c0                	test   %al,%al
- 5c2:	0f 84 4a ff ff ff    	je     512 <printf+0x52>
- 5c8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5cb:	89 d3                	mov    %edx,%ebx
- 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 5e0:	84 c0                	test   %al,%al
+ 5e2:	0f 84 4a ff ff ff    	je     532 <printf+0x52>
+ 5e8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5eb:	89 d3                	mov    %edx,%ebx
+ 5ed:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 5d0:	83 ec 04             	sub    $0x4,%esp
+ 5f0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5d3:	83 c3 01             	add    $0x1,%ebx
- 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5f3:	83 c3 01             	add    $0x1,%ebx
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5d9:	6a 01                	push   $0x1
- 5db:	57                   	push   %edi
- 5dc:	56                   	push   %esi
- 5dd:	e8 a1 fd ff ff       	call   383 <write>
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	56                   	push   %esi
+ 5fd:	e8 81 fd ff ff       	call   383 <write>
         while(*s != 0){
- 5e2:	0f b6 03             	movzbl (%ebx),%eax
- 5e5:	83 c4 10             	add    $0x10,%esp
- 5e8:	84 c0                	test   %al,%al
- 5ea:	75 e4                	jne    5d0 <printf+0x110>
+ 602:	0f b6 03             	movzbl (%ebx),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x110>
       state = 0;
- 5ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 5ef:	31 c9                	xor    %ecx,%ecx
- 5f1:	e9 1c ff ff ff       	jmp    512 <printf+0x52>
- 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 60c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 60f:	31 c9                	xor    %ecx,%ecx
+ 611:	e9 1c ff ff ff       	jmp    532 <printf+0x52>
+ 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 600:	83 ec 0c             	sub    $0xc,%esp
- 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 608:	6a 01                	push   $0x1
- 60a:	e9 7b ff ff ff       	jmp    58a <printf+0xca>
- 60f:	90                   	nop
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	e9 7b ff ff ff       	jmp    5aa <printf+0xca>
+ 62f:	90                   	nop
         putc(fd, *ap);
- 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 613:	83 ec 04             	sub    $0x4,%esp
+ 633:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 616:	8b 00                	mov    (%eax),%eax
+ 636:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 618:	6a 01                	push   $0x1
- 61a:	57                   	push   %edi
- 61b:	56                   	push   %esi
+ 638:	6a 01                	push   $0x1
+ 63a:	57                   	push   %edi
+ 63b:	56                   	push   %esi
         putc(fd, *ap);
- 61c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 63c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 61f:	e8 5f fd ff ff       	call   383 <write>
+ 63f:	e8 3f fd ff ff       	call   383 <write>
         ap++;
- 624:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 628:	83 c4 10             	add    $0x10,%esp
+ 644:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 648:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 62b:	31 c9                	xor    %ecx,%ecx
- 62d:	e9 e0 fe ff ff       	jmp    512 <printf+0x52>
- 632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 64b:	31 c9                	xor    %ecx,%ecx
+ 64d:	e9 e0 fe ff ff       	jmp    532 <printf+0x52>
+ 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 638:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 658:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 63b:	83 ec 04             	sub    $0x4,%esp
- 63e:	e9 2a ff ff ff       	jmp    56d <printf+0xad>
- 643:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 647:	90                   	nop
+ 65b:	83 ec 04             	sub    $0x4,%esp
+ 65e:	e9 2a ff ff ff       	jmp    58d <printf+0xad>
+ 663:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 667:	90                   	nop
           s = "(null)";
- 648:	ba 20 08 00 00       	mov    $0x820,%edx
+ 668:	ba 40 08 00 00       	mov    $0x840,%edx
         while(*s != 0){
- 64d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 650:	b8 28 00 00 00       	mov    $0x28,%eax
- 655:	89 d3                	mov    %edx,%ebx
- 657:	e9 74 ff ff ff       	jmp    5d0 <printf+0x110>
- 65c:	66 90                	xchg   %ax,%ax
- 65e:	66 90                	xchg   %ax,%ax
+ 66d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 670:	b8 28 00 00 00       	mov    $0x28,%eax
+ 675:	89 d3                	mov    %edx,%ebx
+ 677:	e9 74 ff ff ff       	jmp    5f0 <printf+0x110>
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
 
-00000660 <free>:
+00000680 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 660:	55                   	push   %ebp
+ 680:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 661:	a1 80 0d 00 00       	mov    0xd80,%eax
+ 681:	a1 a0 0d 00 00       	mov    0xda0,%eax
 {
- 666:	89 e5                	mov    %esp,%ebp
- 668:	57                   	push   %edi
- 669:	56                   	push   %esi
- 66a:	53                   	push   %ebx
- 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 678:	89 c2                	mov    %eax,%edx
- 67a:	8b 00                	mov    (%eax),%eax
- 67c:	39 ca                	cmp    %ecx,%edx
- 67e:	73 30                	jae    6b0 <free+0x50>
- 680:	39 c1                	cmp    %eax,%ecx
- 682:	72 04                	jb     688 <free+0x28>
+ 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 698:	89 c2                	mov    %eax,%edx
+ 69a:	8b 00                	mov    (%eax),%eax
+ 69c:	39 ca                	cmp    %ecx,%edx
+ 69e:	73 30                	jae    6d0 <free+0x50>
+ 6a0:	39 c1                	cmp    %eax,%ecx
+ 6a2:	72 04                	jb     6a8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 684:	39 c2                	cmp    %eax,%edx
- 686:	72 f0                	jb     678 <free+0x18>
+ 6a4:	39 c2                	cmp    %eax,%edx
+ 6a6:	72 f0                	jb     698 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 688:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 68b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 68e:	39 f8                	cmp    %edi,%eax
- 690:	74 30                	je     6c2 <free+0x62>
+ 6a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ae:	39 f8                	cmp    %edi,%eax
+ 6b0:	74 30                	je     6e2 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 692:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6b2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 695:	8b 42 04             	mov    0x4(%edx),%eax
- 698:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 69b:	39 f1                	cmp    %esi,%ecx
- 69d:	74 3a                	je     6d9 <free+0x79>
+ 6b5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6b8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6bb:	39 f1                	cmp    %esi,%ecx
+ 6bd:	74 3a                	je     6f9 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 69f:	89 0a                	mov    %ecx,(%edx)
+ 6bf:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 6a1:	5b                   	pop    %ebx
+ 6c1:	5b                   	pop    %ebx
   freep = p;
- 6a2:	89 15 80 0d 00 00    	mov    %edx,0xd80
+ 6c2:	89 15 a0 0d 00 00    	mov    %edx,0xda0
 }
- 6a8:	5e                   	pop    %esi
- 6a9:	5f                   	pop    %edi
- 6aa:	5d                   	pop    %ebp
- 6ab:	c3                   	ret    
- 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b0:	39 c2                	cmp    %eax,%edx
- 6b2:	72 c4                	jb     678 <free+0x18>
- 6b4:	39 c1                	cmp    %eax,%ecx
- 6b6:	73 c0                	jae    678 <free+0x18>
+ 6d0:	39 c2                	cmp    %eax,%edx
+ 6d2:	72 c4                	jb     698 <free+0x18>
+ 6d4:	39 c1                	cmp    %eax,%ecx
+ 6d6:	73 c0                	jae    698 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6be:	39 f8                	cmp    %edi,%eax
- 6c0:	75 d0                	jne    692 <free+0x32>
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 f8                	cmp    %edi,%eax
+ 6e0:	75 d0                	jne    6b2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 6c2:	03 70 04             	add    0x4(%eax),%esi
- 6c5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6e2:	03 70 04             	add    0x4(%eax),%esi
+ 6e5:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6c8:	8b 02                	mov    (%edx),%eax
- 6ca:	8b 00                	mov    (%eax),%eax
- 6cc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6e8:	8b 02                	mov    (%edx),%eax
+ 6ea:	8b 00                	mov    (%eax),%eax
+ 6ec:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6cf:	8b 42 04             	mov    0x4(%edx),%eax
- 6d2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6d5:	39 f1                	cmp    %esi,%ecx
- 6d7:	75 c6                	jne    69f <free+0x3f>
+ 6ef:	8b 42 04             	mov    0x4(%edx),%eax
+ 6f2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	75 c6                	jne    6bf <free+0x3f>
     p->s.size += bp->s.size;
- 6d9:	03 43 fc             	add    -0x4(%ebx),%eax
+ 6f9:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 6dc:	89 15 80 0d 00 00    	mov    %edx,0xd80
+ 6fc:	89 15 a0 0d 00 00    	mov    %edx,0xda0
     p->s.size += bp->s.size;
- 6e2:	89 42 04             	mov    %eax,0x4(%edx)
+ 702:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 6e5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 6e8:	89 0a                	mov    %ecx,(%edx)
+ 705:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 708:	89 0a                	mov    %ecx,(%edx)
 }
- 6ea:	5b                   	pop    %ebx
- 6eb:	5e                   	pop    %esi
- 6ec:	5f                   	pop    %edi
- 6ed:	5d                   	pop    %ebp
- 6ee:	c3                   	ret    
- 6ef:	90                   	nop
+ 70a:	5b                   	pop    %ebx
+ 70b:	5e                   	pop    %esi
+ 70c:	5f                   	pop    %edi
+ 70d:	5d                   	pop    %ebp
+ 70e:	c3                   	ret    
+ 70f:	90                   	nop
 
-000006f0 <malloc>:
+00000710 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6f0:	55                   	push   %ebp
- 6f1:	89 e5                	mov    %esp,%ebp
- 6f3:	57                   	push   %edi
- 6f4:	56                   	push   %esi
- 6f5:	53                   	push   %ebx
- 6f6:	83 ec 1c             	sub    $0x1c,%esp
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6fc:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
+ 71c:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 702:	8d 70 07             	lea    0x7(%eax),%esi
- 705:	c1 ee 03             	shr    $0x3,%esi
- 708:	83 c6 01             	add    $0x1,%esi
+ 722:	8d 70 07             	lea    0x7(%eax),%esi
+ 725:	c1 ee 03             	shr    $0x3,%esi
+ 728:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 70b:	85 ff                	test   %edi,%edi
- 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
+ 72b:	85 ff                	test   %edi,%edi
+ 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 713:	8b 17                	mov    (%edi),%edx
+ 733:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 715:	8b 4a 04             	mov    0x4(%edx),%ecx
- 718:	39 f1                	cmp    %esi,%ecx
- 71a:	73 6a                	jae    786 <malloc+0x96>
- 71c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 721:	39 de                	cmp    %ebx,%esi
- 723:	0f 43 de             	cmovae %esi,%ebx
+ 735:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 738:	39 f1                	cmp    %esi,%ecx
+ 73a:	73 6a                	jae    7a6 <malloc+0x96>
+ 73c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 741:	39 de                	cmp    %ebx,%esi
+ 743:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 726:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 72d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 730:	eb 17                	jmp    749 <malloc+0x59>
- 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 746:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 74d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 750:	eb 17                	jmp    769 <malloc+0x59>
+ 752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 738:	8b 02                	mov    (%edx),%eax
+ 758:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 73a:	8b 48 04             	mov    0x4(%eax),%ecx
- 73d:	39 f1                	cmp    %esi,%ecx
- 73f:	73 4f                	jae    790 <malloc+0xa0>
+ 75a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75d:	39 f1                	cmp    %esi,%ecx
+ 75f:	73 4f                	jae    7b0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 741:	8b 3d 80 0d 00 00    	mov    0xd80,%edi
- 747:	89 c2                	mov    %eax,%edx
- 749:	39 d7                	cmp    %edx,%edi
- 74b:	75 eb                	jne    738 <malloc+0x48>
+ 761:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+ 767:	89 c2                	mov    %eax,%edx
+ 769:	39 d7                	cmp    %edx,%edi
+ 76b:	75 eb                	jne    758 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 74d:	83 ec 0c             	sub    $0xc,%esp
- 750:	ff 75 e4             	push   -0x1c(%ebp)
- 753:	e8 93 fc ff ff       	call   3eb <sbrk>
+ 76d:	83 ec 0c             	sub    $0xc,%esp
+ 770:	ff 75 e4             	push   -0x1c(%ebp)
+ 773:	e8 73 fc ff ff       	call   3eb <sbrk>
   if(p == (char*)-1)
- 758:	83 c4 10             	add    $0x10,%esp
- 75b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 75e:	74 1c                	je     77c <malloc+0x8c>
+ 778:	83 c4 10             	add    $0x10,%esp
+ 77b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 77e:	74 1c                	je     79c <malloc+0x8c>
   hp->s.size = nu;
- 760:	89 58 04             	mov    %ebx,0x4(%eax)
+ 780:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 763:	83 ec 0c             	sub    $0xc,%esp
- 766:	83 c0 08             	add    $0x8,%eax
- 769:	50                   	push   %eax
- 76a:	e8 f1 fe ff ff       	call   660 <free>
+ 783:	83 ec 0c             	sub    $0xc,%esp
+ 786:	83 c0 08             	add    $0x8,%eax
+ 789:	50                   	push   %eax
+ 78a:	e8 f1 fe ff ff       	call   680 <free>
   return freep;
- 76f:	8b 15 80 0d 00 00    	mov    0xd80,%edx
+ 78f:	8b 15 a0 0d 00 00    	mov    0xda0,%edx
       if((p = morecore(nunits)) == 0)
- 775:	83 c4 10             	add    $0x10,%esp
- 778:	85 d2                	test   %edx,%edx
- 77a:	75 bc                	jne    738 <malloc+0x48>
+ 795:	83 c4 10             	add    $0x10,%esp
+ 798:	85 d2                	test   %edx,%edx
+ 79a:	75 bc                	jne    758 <malloc+0x48>
         return 0;
   }
 }
- 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 79c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 77f:	31 c0                	xor    %eax,%eax
+ 79f:	31 c0                	xor    %eax,%eax
 }
- 781:	5b                   	pop    %ebx
- 782:	5e                   	pop    %esi
- 783:	5f                   	pop    %edi
- 784:	5d                   	pop    %ebp
- 785:	c3                   	ret    
+ 7a1:	5b                   	pop    %ebx
+ 7a2:	5e                   	pop    %esi
+ 7a3:	5f                   	pop    %edi
+ 7a4:	5d                   	pop    %ebp
+ 7a5:	c3                   	ret    
     if(p->s.size >= nunits){
- 786:	89 d0                	mov    %edx,%eax
- 788:	89 fa                	mov    %edi,%edx
- 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7a6:	89 d0                	mov    %edx,%eax
+ 7a8:	89 fa                	mov    %edi,%edx
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 790:	39 ce                	cmp    %ecx,%esi
- 792:	74 4c                	je     7e0 <malloc+0xf0>
+ 7b0:	39 ce                	cmp    %ecx,%esi
+ 7b2:	74 4c                	je     800 <malloc+0xf0>
         p->s.size -= nunits;
- 794:	29 f1                	sub    %esi,%ecx
- 796:	89 48 04             	mov    %ecx,0x4(%eax)
+ 7b4:	29 f1                	sub    %esi,%ecx
+ 7b6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 799:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 7b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 79c:	89 70 04             	mov    %esi,0x4(%eax)
+ 7bc:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 79f:	89 15 80 0d 00 00    	mov    %edx,0xd80
+ 7bf:	89 15 a0 0d 00 00    	mov    %edx,0xda0
 }
- 7a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7a8:	83 c0 08             	add    $0x8,%eax
+ 7c8:	83 c0 08             	add    $0x8,%eax
 }
- 7ab:	5b                   	pop    %ebx
- 7ac:	5e                   	pop    %esi
- 7ad:	5f                   	pop    %edi
- 7ae:	5d                   	pop    %ebp
- 7af:	c3                   	ret    
+ 7cb:	5b                   	pop    %ebx
+ 7cc:	5e                   	pop    %esi
+ 7cd:	5f                   	pop    %edi
+ 7ce:	5d                   	pop    %ebp
+ 7cf:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 7b0:	c7 05 80 0d 00 00 84 	movl   $0xd84,0xd80
- 7b7:	0d 00 00 
+ 7d0:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
+ 7d7:	0d 00 00 
     base.s.size = 0;
- 7ba:	bf 84 0d 00 00       	mov    $0xd84,%edi
+ 7da:	bf a4 0d 00 00       	mov    $0xda4,%edi
     base.s.ptr = freep = prevp = &base;
- 7bf:	c7 05 84 0d 00 00 84 	movl   $0xd84,0xd84
- 7c6:	0d 00 00 
+ 7df:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
+ 7e6:	0d 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7c9:	89 fa                	mov    %edi,%edx
+ 7e9:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 7cb:	c7 05 88 0d 00 00 00 	movl   $0x0,0xd88
- 7d2:	00 00 00 
+ 7eb:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
+ 7f2:	00 00 00 
     if(p->s.size >= nunits){
- 7d5:	e9 42 ff ff ff       	jmp    71c <malloc+0x2c>
- 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7f5:	e9 42 ff ff ff       	jmp    73c <malloc+0x2c>
+ 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7e0:	8b 08                	mov    (%eax),%ecx
- 7e2:	89 0a                	mov    %ecx,(%edx)
- 7e4:	eb b9                	jmp    79f <malloc+0xaf>
+ 800:	8b 08                	mov    (%eax),%ecx
+ 802:	89 0a                	mov    %ecx,(%edx)
+ 804:	eb b9                	jmp    7bf <malloc+0xaf>
Binary files xv6-public-org/cat.o and xv6-public/cat.o differ
diff -u xv6-public-org/cat.sym xv6-public/cat.sym
--- xv6-public-org/cat.sym	2022-09-04 11:47:10.833693201 +0530
+++ xv6-public/cat.sym	2022-09-05 23:16:36.057927482 +0530
@@ -1,19 +1,20 @@
 00000000 cat.c
 00000000 ulib.c
 00000000 printf.c
-00000410 printint
-00000880 digits.0
+00000430 printint
+000008a0 digits.0
 00000000 umalloc.c
-00000d80 freep
-00000d84 base
+00000da0 freep
+00000da4 base
 00000110 strcpy
-000004c0 printf
+000004e0 printf
+00000413 thread_exit
 00000330 memmove
 000003ab mknod
 00000230 gets
 000003e3 getpid
 00000090 cat
-000006f0 malloc
+00000710 malloc
 000003f3 sleep
 00000373 pipe
 00000383 write
@@ -27,21 +28,24 @@
 0000035b fork
 000003eb sbrk
 000003fb uptime
-00000b64 __bss_start
+00000b84 __bss_start
 000001d0 memset
 00000000 main
 00000140 strcmp
 000003db dup
-00000b80 buf
+00000ba0 buf
 000002a0 stat
-00000b64 _edata
-00000d8c _end
+00000b84 _edata
+00000dac _end
 000003c3 link
 00000363 exit
 000002f0 atoi
+0000041b draw
 000001a0 strlen
 000003a3 open
 000001f0 strchr
+00000403 thread_create
 000003cb mkdir
 0000038b close
-00000660 free
+0000040b thread_join
+00000680 free
Binary files xv6-public-org/console.o and xv6-public/console.o differ
Only in xv6-public-org: .cvsignore
diff -u xv6-public-org/defs.h xv6-public/defs.h
--- xv6-public-org/defs.h	2022-09-04 11:44:03.844244000 +0530
+++ xv6-public/defs.h	2022-09-03 13:42:01.000000000 +0530
@@ -121,6 +121,13 @@
 void            wakeup(void*);
 void            yield(void);
 
+//thread
+int thread_create(void (*)(void*),void*,void*);
+int thread_join(void);
+int thread_exit(void);
+
+
+
 // swtch.S
 void            swtch(struct context**, struct context*);
 
Only in xv6-public-org: .dir-locals.el
Only in xv6-public: _Drawtest
Only in xv6-public: Drawtest.asm
Only in xv6-public: Drawtest.c
Only in xv6-public: Drawtest.d
Only in xv6-public: Drawtest.o
Only in xv6-public: Drawtest.sym
Binary files xv6-public-org/_echo and xv6-public/_echo differ
diff -u xv6-public-org/echo.asm xv6-public/echo.asm
--- xv6-public-org/echo.asm	2022-09-04 11:47:10.893723201 +0530
+++ xv6-public/echo.asm	2022-09-05 23:16:36.133927651 +0530
@@ -35,21 +35,21 @@
   2a:	39 f3                	cmp    %esi,%ebx
   2c:	74 22                	je     50 <main+0x50>
   2e:	66 90                	xchg   %ax,%ax
-  30:	68 48 07 00 00       	push   $0x748
+  30:	68 68 07 00 00       	push   $0x768
   35:	83 c3 01             	add    $0x1,%ebx
   38:	50                   	push   %eax
-  39:	68 4a 07 00 00       	push   $0x74a
+  39:	68 6a 07 00 00       	push   $0x76a
   3e:	6a 01                	push   $0x1
-  40:	e8 db 03 00 00       	call   420 <printf>
+  40:	e8 fb 03 00 00       	call   440 <printf>
   45:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
   49:	83 c4 10             	add    $0x10,%esp
   4c:	39 f3                	cmp    %esi,%ebx
   4e:	75 e0                	jne    30 <main+0x30>
-  50:	68 4f 07 00 00       	push   $0x74f
+  50:	68 6f 07 00 00       	push   $0x76f
   55:	50                   	push   %eax
-  56:	68 4a 07 00 00       	push   $0x74a
+  56:	68 6a 07 00 00       	push   $0x76a
   5b:	6a 01                	push   $0x1
-  5d:	e8 be 03 00 00       	call   420 <printf>
+  5d:	e8 de 03 00 00       	call   440 <printf>
   62:	83 c4 10             	add    $0x10,%esp
   exit();
   65:	e8 59 02 00 00       	call   2c3 <exit>
@@ -581,569 +581,592 @@
  35b:	b8 0e 00 00 00       	mov    $0xe,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
- 363:	66 90                	xchg   %ax,%ax
- 365:	66 90                	xchg   %ax,%ax
- 367:	66 90                	xchg   %ax,%ax
- 369:	66 90                	xchg   %ax,%ax
- 36b:	66 90                	xchg   %ax,%ax
- 36d:	66 90                	xchg   %ax,%ax
- 36f:	90                   	nop
 
-00000370 <printint>:
+00000363 <thread_create>:
+SYSCALL(thread_create)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <thread_join>:
+SYSCALL(thread_join)
+ 36b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <thread_exit>:
+SYSCALL(thread_exit)
+ 373:	b8 17 00 00 00       	mov    $0x17,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <draw>:
+ 37b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+ 383:	66 90                	xchg   %ax,%ax
+ 385:	66 90                	xchg   %ax,%ax
+ 387:	66 90                	xchg   %ax,%ax
+ 389:	66 90                	xchg   %ax,%ax
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	83 ec 3c             	sub    $0x3c,%esp
- 379:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 37c:	89 d1                	mov    %edx,%ecx
+ 39c:	89 d1                	mov    %edx,%ecx
 {
- 37e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 381:	85 d2                	test   %edx,%edx
- 383:	0f 89 7f 00 00 00    	jns    408 <printint+0x98>
- 389:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 38d:	74 79                	je     408 <printint+0x98>
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
     neg = 1;
- 38f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 396:	f7 d9                	neg    %ecx
+ 3b6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 398:	31 db                	xor    %ebx,%ebx
- 39a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 39d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3a0:	89 c8                	mov    %ecx,%eax
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	89 cf                	mov    %ecx,%edi
- 3a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3a9:	0f b6 92 b0 07 00 00 	movzbl 0x7b0(%edx),%edx
- 3b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3b3:	89 d8                	mov    %ebx,%eax
- 3b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 d0 07 00 00 	movzbl 0x7d0(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3c1:	76 dd                	jbe    3a0 <printint+0x30>
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
   if(neg)
- 3c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3c6:	85 c9                	test   %ecx,%ecx
- 3c8:	74 0c                	je     3d6 <printint+0x66>
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
     buf[i++] = '-';
- 3ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3cf:	89 d8                	mov    %ebx,%eax
+ 3ef:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3dd:	eb 07                	jmp    3e6 <printint+0x76>
- 3df:	90                   	nop
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
     putc(fd, buf[i]);
- 3e0:	0f b6 13             	movzbl (%ebx),%edx
- 3e3:	83 eb 01             	sub    $0x1,%ebx
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3e6:	83 ec 04             	sub    $0x4,%esp
- 3e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3ec:	6a 01                	push   $0x1
- 3ee:	56                   	push   %esi
- 3ef:	57                   	push   %edi
- 3f0:	e8 ee fe ff ff       	call   2e3 <write>
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 ce fe ff ff       	call   2e3 <write>
   while(--i >= 0)
- 3f5:	83 c4 10             	add    $0x10,%esp
- 3f8:	39 de                	cmp    %ebx,%esi
- 3fa:	75 e4                	jne    3e0 <printint+0x70>
-}
- 3fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ff:	5b                   	pop    %ebx
- 400:	5e                   	pop    %esi
- 401:	5f                   	pop    %edi
- 402:	5d                   	pop    %ebp
- 403:	c3                   	ret    
- 404:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 408:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 40f:	eb 87                	jmp    398 <printint+0x28>
- 411:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 418:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
 
-00000420 <printf>:
+00000440 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 2c             	sub    $0x2c,%esp
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 429:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 449:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 42c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 44c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 42f:	0f b6 13             	movzbl (%ebx),%edx
- 432:	84 d2                	test   %dl,%dl
- 434:	74 6a                	je     4a0 <printf+0x80>
+ 44f:	0f b6 13             	movzbl (%ebx),%edx
+ 452:	84 d2                	test   %dl,%dl
+ 454:	74 6a                	je     4c0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 436:	8d 45 10             	lea    0x10(%ebp),%eax
- 439:	83 c3 01             	add    $0x1,%ebx
+ 456:	8d 45 10             	lea    0x10(%ebp),%eax
+ 459:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 43c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 45c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 43f:	31 c9                	xor    %ecx,%ecx
+ 45f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 441:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 444:	eb 36                	jmp    47c <printf+0x5c>
- 446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 44d:	8d 76 00             	lea    0x0(%esi),%esi
- 450:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 461:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 464:	eb 36                	jmp    49c <printf+0x5c>
+ 466:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+ 470:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 453:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 473:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 458:	83 f8 25             	cmp    $0x25,%eax
- 45b:	74 15                	je     472 <printf+0x52>
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 15                	je     492 <printf+0x52>
   write(fd, &c, 1);
- 45d:	83 ec 04             	sub    $0x4,%esp
- 460:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 463:	6a 01                	push   $0x1
- 465:	57                   	push   %edi
- 466:	56                   	push   %esi
- 467:	e8 77 fe ff ff       	call   2e3 <write>
- 46c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	56                   	push   %esi
+ 487:	e8 57 fe ff ff       	call   2e3 <write>
+ 48c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 46f:	83 c4 10             	add    $0x10,%esp
+ 48f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 472:	0f b6 13             	movzbl (%ebx),%edx
- 475:	83 c3 01             	add    $0x1,%ebx
- 478:	84 d2                	test   %dl,%dl
- 47a:	74 24                	je     4a0 <printf+0x80>
+ 492:	0f b6 13             	movzbl (%ebx),%edx
+ 495:	83 c3 01             	add    $0x1,%ebx
+ 498:	84 d2                	test   %dl,%dl
+ 49a:	74 24                	je     4c0 <printf+0x80>
     c = fmt[i] & 0xff;
- 47c:	0f b6 c2             	movzbl %dl,%eax
+ 49c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 47f:	85 c9                	test   %ecx,%ecx
- 481:	74 cd                	je     450 <printf+0x30>
+ 49f:	85 c9                	test   %ecx,%ecx
+ 4a1:	74 cd                	je     470 <printf+0x30>
       }
     } else if(state == '%'){
- 483:	83 f9 25             	cmp    $0x25,%ecx
- 486:	75 ea                	jne    472 <printf+0x52>
+ 4a3:	83 f9 25             	cmp    $0x25,%ecx
+ 4a6:	75 ea                	jne    492 <printf+0x52>
       if(c == 'd'){
- 488:	83 f8 25             	cmp    $0x25,%eax
- 48b:	0f 84 07 01 00 00    	je     598 <printf+0x178>
- 491:	83 e8 63             	sub    $0x63,%eax
- 494:	83 f8 15             	cmp    $0x15,%eax
- 497:	77 17                	ja     4b0 <printf+0x90>
- 499:	ff 24 85 58 07 00 00 	jmp    *0x758(,%eax,4)
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 07 01 00 00    	je     5b8 <printf+0x178>
+ 4b1:	83 e8 63             	sub    $0x63,%eax
+ 4b4:	83 f8 15             	cmp    $0x15,%eax
+ 4b7:	77 17                	ja     4d0 <printf+0x90>
+ 4b9:	ff 24 85 78 07 00 00 	jmp    *0x778(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4a3:	5b                   	pop    %ebx
- 4a4:	5e                   	pop    %esi
- 4a5:	5f                   	pop    %edi
- 4a6:	5d                   	pop    %ebp
- 4a7:	c3                   	ret    
- 4a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4af:	90                   	nop
+ 4c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4c3:	5b                   	pop    %ebx
+ 4c4:	5e                   	pop    %esi
+ 4c5:	5f                   	pop    %edi
+ 4c6:	5d                   	pop    %ebp
+ 4c7:	c3                   	ret    
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
   write(fd, &c, 1);
- 4b0:	83 ec 04             	sub    $0x4,%esp
- 4b3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4b6:	6a 01                	push   $0x1
- 4b8:	57                   	push   %edi
- 4b9:	56                   	push   %esi
- 4ba:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4be:	e8 20 fe ff ff       	call   2e3 <write>
+ 4d0:	83 ec 04             	sub    $0x4,%esp
+ 4d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4d6:	6a 01                	push   $0x1
+ 4d8:	57                   	push   %edi
+ 4d9:	56                   	push   %esi
+ 4da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4de:	e8 00 fe ff ff       	call   2e3 <write>
         putc(fd, c);
- 4c3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4c7:	83 c4 0c             	add    $0xc,%esp
- 4ca:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4cd:	6a 01                	push   $0x1
- 4cf:	57                   	push   %edi
- 4d0:	56                   	push   %esi
- 4d1:	e8 0d fe ff ff       	call   2e3 <write>
+ 4e7:	83 c4 0c             	add    $0xc,%esp
+ 4ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4ed:	6a 01                	push   $0x1
+ 4ef:	57                   	push   %edi
+ 4f0:	56                   	push   %esi
+ 4f1:	e8 ed fd ff ff       	call   2e3 <write>
         putc(fd, c);
- 4d6:	83 c4 10             	add    $0x10,%esp
+ 4f6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4d9:	31 c9                	xor    %ecx,%ecx
- 4db:	eb 95                	jmp    472 <printf+0x52>
- 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f9:	31 c9                	xor    %ecx,%ecx
+ 4fb:	eb 95                	jmp    492 <printf+0x52>
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4e0:	83 ec 0c             	sub    $0xc,%esp
- 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4e8:	6a 00                	push   $0x0
- 4ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4ed:	8b 10                	mov    (%eax),%edx
- 4ef:	89 f0                	mov    %esi,%eax
- 4f1:	e8 7a fe ff ff       	call   370 <printint>
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 50d:	8b 10                	mov    (%eax),%edx
+ 50f:	89 f0                	mov    %esi,%eax
+ 511:	e8 7a fe ff ff       	call   390 <printint>
         ap++;
- 4f6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 4fa:	83 c4 10             	add    $0x10,%esp
+ 516:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 51a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4fd:	31 c9                	xor    %ecx,%ecx
- 4ff:	e9 6e ff ff ff       	jmp    472 <printf+0x52>
- 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51d:	31 c9                	xor    %ecx,%ecx
+ 51f:	e9 6e ff ff ff       	jmp    492 <printf+0x52>
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 508:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 50b:	8b 10                	mov    (%eax),%edx
+ 528:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 52b:	8b 10                	mov    (%eax),%edx
         ap++;
- 50d:	83 c0 04             	add    $0x4,%eax
- 510:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 52d:	83 c0 04             	add    $0x4,%eax
+ 530:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 513:	85 d2                	test   %edx,%edx
- 515:	0f 84 8d 00 00 00    	je     5a8 <printf+0x188>
+ 533:	85 d2                	test   %edx,%edx
+ 535:	0f 84 8d 00 00 00    	je     5c8 <printf+0x188>
         while(*s != 0){
- 51b:	0f b6 02             	movzbl (%edx),%eax
+ 53b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 51e:	31 c9                	xor    %ecx,%ecx
+ 53e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 520:	84 c0                	test   %al,%al
- 522:	0f 84 4a ff ff ff    	je     472 <printf+0x52>
- 528:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 52b:	89 d3                	mov    %edx,%ebx
- 52d:	8d 76 00             	lea    0x0(%esi),%esi
+ 540:	84 c0                	test   %al,%al
+ 542:	0f 84 4a ff ff ff    	je     492 <printf+0x52>
+ 548:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 54b:	89 d3                	mov    %edx,%ebx
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 530:	83 ec 04             	sub    $0x4,%esp
+ 550:	83 ec 04             	sub    $0x4,%esp
           s++;
- 533:	83 c3 01             	add    $0x1,%ebx
- 536:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 553:	83 c3 01             	add    $0x1,%ebx
+ 556:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 539:	6a 01                	push   $0x1
- 53b:	57                   	push   %edi
- 53c:	56                   	push   %esi
- 53d:	e8 a1 fd ff ff       	call   2e3 <write>
+ 559:	6a 01                	push   $0x1
+ 55b:	57                   	push   %edi
+ 55c:	56                   	push   %esi
+ 55d:	e8 81 fd ff ff       	call   2e3 <write>
         while(*s != 0){
- 542:	0f b6 03             	movzbl (%ebx),%eax
- 545:	83 c4 10             	add    $0x10,%esp
- 548:	84 c0                	test   %al,%al
- 54a:	75 e4                	jne    530 <printf+0x110>
+ 562:	0f b6 03             	movzbl (%ebx),%eax
+ 565:	83 c4 10             	add    $0x10,%esp
+ 568:	84 c0                	test   %al,%al
+ 56a:	75 e4                	jne    550 <printf+0x110>
       state = 0;
- 54c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 54f:	31 c9                	xor    %ecx,%ecx
- 551:	e9 1c ff ff ff       	jmp    472 <printf+0x52>
- 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
+ 56c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 56f:	31 c9                	xor    %ecx,%ecx
+ 571:	e9 1c ff ff ff       	jmp    492 <printf+0x52>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 560:	83 ec 0c             	sub    $0xc,%esp
- 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 568:	6a 01                	push   $0x1
- 56a:	e9 7b ff ff ff       	jmp    4ea <printf+0xca>
- 56f:	90                   	nop
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 7b ff ff ff       	jmp    50a <printf+0xca>
+ 58f:	90                   	nop
         putc(fd, *ap);
- 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 573:	83 ec 04             	sub    $0x4,%esp
+ 593:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 576:	8b 00                	mov    (%eax),%eax
+ 596:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 578:	6a 01                	push   $0x1
- 57a:	57                   	push   %edi
- 57b:	56                   	push   %esi
+ 598:	6a 01                	push   $0x1
+ 59a:	57                   	push   %edi
+ 59b:	56                   	push   %esi
         putc(fd, *ap);
- 57c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 59c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 57f:	e8 5f fd ff ff       	call   2e3 <write>
+ 59f:	e8 3f fd ff ff       	call   2e3 <write>
         ap++;
- 584:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 588:	83 c4 10             	add    $0x10,%esp
+ 5a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5a8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 58b:	31 c9                	xor    %ecx,%ecx
- 58d:	e9 e0 fe ff ff       	jmp    472 <printf+0x52>
- 592:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5ab:	31 c9                	xor    %ecx,%ecx
+ 5ad:	e9 e0 fe ff ff       	jmp    492 <printf+0x52>
+ 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 598:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 59b:	83 ec 04             	sub    $0x4,%esp
- 59e:	e9 2a ff ff ff       	jmp    4cd <printf+0xad>
- 5a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5a7:	90                   	nop
+ 5bb:	83 ec 04             	sub    $0x4,%esp
+ 5be:	e9 2a ff ff ff       	jmp    4ed <printf+0xad>
+ 5c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5c7:	90                   	nop
           s = "(null)";
- 5a8:	ba 51 07 00 00       	mov    $0x751,%edx
+ 5c8:	ba 71 07 00 00       	mov    $0x771,%edx
         while(*s != 0){
- 5ad:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5b0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5b5:	89 d3                	mov    %edx,%ebx
- 5b7:	e9 74 ff ff ff       	jmp    530 <printf+0x110>
- 5bc:	66 90                	xchg   %ax,%ax
- 5be:	66 90                	xchg   %ax,%ax
+ 5cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d5:	89 d3                	mov    %edx,%ebx
+ 5d7:	e9 74 ff ff ff       	jmp    550 <printf+0x110>
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
 
-000005c0 <free>:
+000005e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5c0:	55                   	push   %ebp
+ 5e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c1:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 5e1:	a1 84 0a 00 00       	mov    0xa84,%eax
 {
- 5c6:	89 e5                	mov    %esp,%ebp
- 5c8:	57                   	push   %edi
- 5c9:	56                   	push   %esi
- 5ca:	53                   	push   %ebx
- 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5d8:	89 c2                	mov    %eax,%edx
- 5da:	8b 00                	mov    (%eax),%eax
- 5dc:	39 ca                	cmp    %ecx,%edx
- 5de:	73 30                	jae    610 <free+0x50>
- 5e0:	39 c1                	cmp    %eax,%ecx
- 5e2:	72 04                	jb     5e8 <free+0x28>
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5f8:	89 c2                	mov    %eax,%edx
+ 5fa:	8b 00                	mov    (%eax),%eax
+ 5fc:	39 ca                	cmp    %ecx,%edx
+ 5fe:	73 30                	jae    630 <free+0x50>
+ 600:	39 c1                	cmp    %eax,%ecx
+ 602:	72 04                	jb     608 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e4:	39 c2                	cmp    %eax,%edx
- 5e6:	72 f0                	jb     5d8 <free+0x18>
+ 604:	39 c2                	cmp    %eax,%edx
+ 606:	72 f0                	jb     5f8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ee:	39 f8                	cmp    %edi,%eax
- 5f0:	74 30                	je     622 <free+0x62>
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 f8                	cmp    %edi,%eax
+ 610:	74 30                	je     642 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 5f2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 612:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 5f5:	8b 42 04             	mov    0x4(%edx),%eax
- 5f8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5fb:	39 f1                	cmp    %esi,%ecx
- 5fd:	74 3a                	je     639 <free+0x79>
+ 615:	8b 42 04             	mov    0x4(%edx),%eax
+ 618:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 61b:	39 f1                	cmp    %esi,%ecx
+ 61d:	74 3a                	je     659 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 5ff:	89 0a                	mov    %ecx,(%edx)
+ 61f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 601:	5b                   	pop    %ebx
+ 621:	5b                   	pop    %ebx
   freep = p;
- 602:	89 15 64 0a 00 00    	mov    %edx,0xa64
+ 622:	89 15 84 0a 00 00    	mov    %edx,0xa84
 }
- 608:	5e                   	pop    %esi
- 609:	5f                   	pop    %edi
- 60a:	5d                   	pop    %ebp
- 60b:	c3                   	ret    
- 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 628:	5e                   	pop    %esi
+ 629:	5f                   	pop    %edi
+ 62a:	5d                   	pop    %ebp
+ 62b:	c3                   	ret    
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 610:	39 c2                	cmp    %eax,%edx
- 612:	72 c4                	jb     5d8 <free+0x18>
- 614:	39 c1                	cmp    %eax,%ecx
- 616:	73 c0                	jae    5d8 <free+0x18>
+ 630:	39 c2                	cmp    %eax,%edx
+ 632:	72 c4                	jb     5f8 <free+0x18>
+ 634:	39 c1                	cmp    %eax,%ecx
+ 636:	73 c0                	jae    5f8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61e:	39 f8                	cmp    %edi,%eax
- 620:	75 d0                	jne    5f2 <free+0x32>
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 f8                	cmp    %edi,%eax
+ 640:	75 d0                	jne    612 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 622:	03 70 04             	add    0x4(%eax),%esi
- 625:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 642:	03 70 04             	add    0x4(%eax),%esi
+ 645:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 628:	8b 02                	mov    (%edx),%eax
- 62a:	8b 00                	mov    (%eax),%eax
- 62c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 648:	8b 02                	mov    (%edx),%eax
+ 64a:	8b 00                	mov    (%eax),%eax
+ 64c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 62f:	8b 42 04             	mov    0x4(%edx),%eax
- 632:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 635:	39 f1                	cmp    %esi,%ecx
- 637:	75 c6                	jne    5ff <free+0x3f>
+ 64f:	8b 42 04             	mov    0x4(%edx),%eax
+ 652:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 655:	39 f1                	cmp    %esi,%ecx
+ 657:	75 c6                	jne    61f <free+0x3f>
     p->s.size += bp->s.size;
- 639:	03 43 fc             	add    -0x4(%ebx),%eax
+ 659:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 63c:	89 15 64 0a 00 00    	mov    %edx,0xa64
+ 65c:	89 15 84 0a 00 00    	mov    %edx,0xa84
     p->s.size += bp->s.size;
- 642:	89 42 04             	mov    %eax,0x4(%edx)
+ 662:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 645:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 648:	89 0a                	mov    %ecx,(%edx)
+ 665:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 668:	89 0a                	mov    %ecx,(%edx)
 }
- 64a:	5b                   	pop    %ebx
- 64b:	5e                   	pop    %esi
- 64c:	5f                   	pop    %edi
- 64d:	5d                   	pop    %ebp
- 64e:	c3                   	ret    
- 64f:	90                   	nop
+ 66a:	5b                   	pop    %ebx
+ 66b:	5e                   	pop    %esi
+ 66c:	5f                   	pop    %edi
+ 66d:	5d                   	pop    %ebp
+ 66e:	c3                   	ret    
+ 66f:	90                   	nop
 
-00000650 <malloc>:
+00000670 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 650:	55                   	push   %ebp
- 651:	89 e5                	mov    %esp,%ebp
- 653:	57                   	push   %edi
- 654:	56                   	push   %esi
- 655:	53                   	push   %ebx
- 656:	83 ec 1c             	sub    $0x1c,%esp
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 659:	8b 45 08             	mov    0x8(%ebp),%eax
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 65c:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 67c:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 662:	8d 70 07             	lea    0x7(%eax),%esi
- 665:	c1 ee 03             	shr    $0x3,%esi
- 668:	83 c6 01             	add    $0x1,%esi
+ 682:	8d 70 07             	lea    0x7(%eax),%esi
+ 685:	c1 ee 03             	shr    $0x3,%esi
+ 688:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 66b:	85 ff                	test   %edi,%edi
- 66d:	0f 84 9d 00 00 00    	je     710 <malloc+0xc0>
+ 68b:	85 ff                	test   %edi,%edi
+ 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 673:	8b 17                	mov    (%edi),%edx
+ 693:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 675:	8b 4a 04             	mov    0x4(%edx),%ecx
- 678:	39 f1                	cmp    %esi,%ecx
- 67a:	73 6a                	jae    6e6 <malloc+0x96>
- 67c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 681:	39 de                	cmp    %ebx,%esi
- 683:	0f 43 de             	cmovae %esi,%ebx
+ 695:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 698:	39 f1                	cmp    %esi,%ecx
+ 69a:	73 6a                	jae    706 <malloc+0x96>
+ 69c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6a1:	39 de                	cmp    %ebx,%esi
+ 6a3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 686:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 68d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 690:	eb 17                	jmp    6a9 <malloc+0x59>
- 692:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6b0:	eb 17                	jmp    6c9 <malloc+0x59>
+ 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 698:	8b 02                	mov    (%edx),%eax
+ 6b8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 69a:	8b 48 04             	mov    0x4(%eax),%ecx
- 69d:	39 f1                	cmp    %esi,%ecx
- 69f:	73 4f                	jae    6f0 <malloc+0xa0>
+ 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bd:	39 f1                	cmp    %esi,%ecx
+ 6bf:	73 4f                	jae    710 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6a1:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
- 6a7:	89 c2                	mov    %eax,%edx
- 6a9:	39 d7                	cmp    %edx,%edi
- 6ab:	75 eb                	jne    698 <malloc+0x48>
+ 6c1:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6c7:	89 c2                	mov    %eax,%edx
+ 6c9:	39 d7                	cmp    %edx,%edi
+ 6cb:	75 eb                	jne    6b8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6ad:	83 ec 0c             	sub    $0xc,%esp
- 6b0:	ff 75 e4             	push   -0x1c(%ebp)
- 6b3:	e8 93 fc ff ff       	call   34b <sbrk>
+ 6cd:	83 ec 0c             	sub    $0xc,%esp
+ 6d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6d3:	e8 73 fc ff ff       	call   34b <sbrk>
   if(p == (char*)-1)
- 6b8:	83 c4 10             	add    $0x10,%esp
- 6bb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6be:	74 1c                	je     6dc <malloc+0x8c>
+ 6d8:	83 c4 10             	add    $0x10,%esp
+ 6db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6de:	74 1c                	je     6fc <malloc+0x8c>
   hp->s.size = nu;
- 6c0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6e0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6c3:	83 ec 0c             	sub    $0xc,%esp
- 6c6:	83 c0 08             	add    $0x8,%eax
- 6c9:	50                   	push   %eax
- 6ca:	e8 f1 fe ff ff       	call   5c0 <free>
+ 6e3:	83 ec 0c             	sub    $0xc,%esp
+ 6e6:	83 c0 08             	add    $0x8,%eax
+ 6e9:	50                   	push   %eax
+ 6ea:	e8 f1 fe ff ff       	call   5e0 <free>
   return freep;
- 6cf:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+ 6ef:	8b 15 84 0a 00 00    	mov    0xa84,%edx
       if((p = morecore(nunits)) == 0)
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	85 d2                	test   %edx,%edx
- 6da:	75 bc                	jne    698 <malloc+0x48>
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	85 d2                	test   %edx,%edx
+ 6fa:	75 bc                	jne    6b8 <malloc+0x48>
         return 0;
   }
 }
- 6dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6df:	31 c0                	xor    %eax,%eax
+ 6ff:	31 c0                	xor    %eax,%eax
 }
- 6e1:	5b                   	pop    %ebx
- 6e2:	5e                   	pop    %esi
- 6e3:	5f                   	pop    %edi
- 6e4:	5d                   	pop    %ebp
- 6e5:	c3                   	ret    
+ 701:	5b                   	pop    %ebx
+ 702:	5e                   	pop    %esi
+ 703:	5f                   	pop    %edi
+ 704:	5d                   	pop    %ebp
+ 705:	c3                   	ret    
     if(p->s.size >= nunits){
- 6e6:	89 d0                	mov    %edx,%eax
- 6e8:	89 fa                	mov    %edi,%edx
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 706:	89 d0                	mov    %edx,%eax
+ 708:	89 fa                	mov    %edi,%edx
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6f0:	39 ce                	cmp    %ecx,%esi
- 6f2:	74 4c                	je     740 <malloc+0xf0>
+ 710:	39 ce                	cmp    %ecx,%esi
+ 712:	74 4c                	je     760 <malloc+0xf0>
         p->s.size -= nunits;
- 6f4:	29 f1                	sub    %esi,%ecx
- 6f6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 714:	29 f1                	sub    %esi,%ecx
+ 716:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 719:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6fc:	89 70 04             	mov    %esi,0x4(%eax)
+ 71c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6ff:	89 15 64 0a 00 00    	mov    %edx,0xa64
+ 71f:	89 15 84 0a 00 00    	mov    %edx,0xa84
 }
- 705:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 725:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 708:	83 c0 08             	add    $0x8,%eax
+ 728:	83 c0 08             	add    $0x8,%eax
 }
- 70b:	5b                   	pop    %ebx
- 70c:	5e                   	pop    %esi
- 70d:	5f                   	pop    %edi
- 70e:	5d                   	pop    %ebp
- 70f:	c3                   	ret    
+ 72b:	5b                   	pop    %ebx
+ 72c:	5e                   	pop    %esi
+ 72d:	5f                   	pop    %edi
+ 72e:	5d                   	pop    %ebp
+ 72f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 710:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 717:	0a 00 00 
+ 730:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 737:	0a 00 00 
     base.s.size = 0;
- 71a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 73a:	bf 88 0a 00 00       	mov    $0xa88,%edi
     base.s.ptr = freep = prevp = &base;
- 71f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 726:	0a 00 00 
+ 73f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 746:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 729:	89 fa                	mov    %edi,%edx
+ 749:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 72b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
- 732:	00 00 00 
+ 74b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 752:	00 00 00 
     if(p->s.size >= nunits){
- 735:	e9 42 ff ff ff       	jmp    67c <malloc+0x2c>
- 73a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 755:	e9 42 ff ff ff       	jmp    69c <malloc+0x2c>
+ 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 740:	8b 08                	mov    (%eax),%ecx
- 742:	89 0a                	mov    %ecx,(%edx)
- 744:	eb b9                	jmp    6ff <malloc+0xaf>
+ 760:	8b 08                	mov    (%eax),%ecx
+ 762:	89 0a                	mov    %ecx,(%edx)
+ 764:	eb b9                	jmp    71f <malloc+0xaf>
Binary files xv6-public-org/echo.o and xv6-public/echo.o differ
diff -u xv6-public-org/echo.sym xv6-public/echo.sym
--- xv6-public-org/echo.sym	2022-09-04 11:47:10.905729202 +0530
+++ xv6-public/echo.sym	2022-09-05 23:16:36.145927677 +0530
@@ -1,18 +1,19 @@
 00000000 echo.c
 00000000 ulib.c
 00000000 printf.c
-00000370 printint
-000007b0 digits.0
+00000390 printint
+000007d0 digits.0
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000a84 freep
+00000a88 base
 00000070 strcpy
-00000420 printf
+00000440 printf
+00000373 thread_exit
 00000290 memmove
 0000030b mknod
 00000190 gets
 00000343 getpid
-00000650 malloc
+00000670 malloc
 00000353 sleep
 000002d3 pipe
 000002e3 write
@@ -26,20 +27,23 @@
 000002bb fork
 0000034b sbrk
 0000035b uptime
-00000a64 __bss_start
+00000a84 __bss_start
 00000130 memset
 00000000 main
 000000a0 strcmp
 0000033b dup
 00000200 stat
-00000a64 _edata
-00000a70 _end
+00000a84 _edata
+00000a90 _end
 00000323 link
 000002c3 exit
 00000250 atoi
+0000037b draw
 00000100 strlen
 00000303 open
 00000150 strchr
+00000363 thread_create
 0000032b mkdir
 000002eb close
-000005c0 free
+0000036b thread_join
+000005e0 free
Binary files xv6-public-org/exec.o and xv6-public/exec.o differ
Binary files xv6-public-org/file.o and xv6-public/file.o differ
Binary files xv6-public-org/_forktest and xv6-public/_forktest differ
diff -u xv6-public-org/forktest.asm xv6-public/forktest.asm
--- xv6-public-org/forktest.asm	2022-09-04 11:47:10.973763203 +0530
+++ xv6-public/forktest.asm	2022-09-05 23:16:36.269927950 +0530
@@ -52,11 +52,11 @@
 {
   46:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  49:	68 14 04 00 00       	push   $0x414
+  49:	68 34 04 00 00       	push   $0x434
   4e:	e8 5d 01 00 00       	call   1b0 <strlen>
   53:	83 c4 0c             	add    $0xc,%esp
   56:	50                   	push   %eax
-  57:	68 14 04 00 00       	push   $0x414
+  57:	68 34 04 00 00       	push   $0x434
   5c:	6a 01                	push   $0x1
   5e:	e8 30 03 00 00       	call   393 <write>
   63:	83 c4 10             	add    $0x10,%esp
@@ -91,11 +91,11 @@
   a6:	75 49                	jne    f1 <forktest+0xb1>
   write(fd, s, strlen(s));
   a8:	83 ec 0c             	sub    $0xc,%esp
-  ab:	68 46 04 00 00       	push   $0x446
+  ab:	68 66 04 00 00       	push   $0x466
   b0:	e8 fb 00 00 00       	call   1b0 <strlen>
   b5:	83 c4 0c             	add    $0xc,%esp
   b8:	50                   	push   %eax
-  b9:	68 46 04 00 00       	push   $0x446
+  b9:	68 66 04 00 00       	push   $0x466
   be:	6a 01                	push   $0x1
   c0:	e8 ce 02 00 00       	call   393 <write>
 }
@@ -106,11 +106,11 @@
   ca:	e8 a4 02 00 00       	call   373 <exit>
   write(fd, s, strlen(s));
   cf:	83 ec 0c             	sub    $0xc,%esp
-  d2:	68 1f 04 00 00       	push   $0x41f
+  d2:	68 3f 04 00 00       	push   $0x43f
   d7:	e8 d4 00 00 00       	call   1b0 <strlen>
   dc:	83 c4 0c             	add    $0xc,%esp
   df:	50                   	push   %eax
-  e0:	68 1f 04 00 00       	push   $0x41f
+  e0:	68 3f 04 00 00       	push   $0x43f
   e5:	6a 01                	push   $0x1
   e7:	e8 a7 02 00 00       	call   393 <write>
       exit();
@@ -118,7 +118,7 @@
     printf(1, "wait got too many\n");
   f1:	52                   	push   %edx
   f2:	52                   	push   %edx
-  f3:	68 33 04 00 00       	push   $0x433
+  f3:	68 53 04 00 00       	push   $0x453
   f8:	6a 01                	push   $0x1
   fa:	e8 11 ff ff ff       	call   10 <printf>
     exit();
@@ -126,7 +126,7 @@
     printf(1, "fork claimed to work N times!\n", N);
  104:	50                   	push   %eax
  105:	68 e8 03 00 00       	push   $0x3e8
- 10a:	68 54 04 00 00       	push   $0x454
+ 10a:	68 74 04 00 00       	push   $0x474
  10f:	6a 01                	push   $0x1
  111:	e8 fa fe ff ff       	call   10 <printf>
     exit();
@@ -659,3 +659,26 @@
  40b:	b8 0e 00 00 00       	mov    $0xe,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
+
+00000413 <thread_create>:
+SYSCALL(thread_create)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <thread_join>:
+SYSCALL(thread_join)
+ 41b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <thread_exit>:
+SYSCALL(thread_exit)
+ 423:	b8 17 00 00 00       	mov    $0x17,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <draw>:
+ 42b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
Binary files xv6-public-org/forktest.o and xv6-public/forktest.o differ
Binary files xv6-public-org/fs.img and xv6-public/fs.img differ
Binary files xv6-public-org/fs.o and xv6-public/fs.o differ
Only in xv6-public-org: .gdbinit.tmpl
Only in xv6-public-org: .git
Only in xv6-public-org: .gitignore
Binary files xv6-public-org/_grep and xv6-public/_grep differ
diff -u xv6-public-org/grep.asm xv6-public/grep.asm
--- xv6-public-org/grep.asm	2022-09-04 11:47:11.101827204 +0530
+++ xv6-public/grep.asm	2022-09-05 23:16:36.437928317 +0530
@@ -84,9 +84,9 @@
       printf(1, "grep: cannot open %s\n", argv[i]);
   77:	50                   	push   %eax
   78:	ff 33                	push   (%ebx)
-  7a:	68 68 0a 00 00       	push   $0xa68
+  7a:	68 88 0a 00 00       	push   $0xa88
   7f:	6a 01                	push   $0x1
-  81:	e8 9a 06 00 00       	call   720 <printf>
+  81:	e8 ba 06 00 00       	call   740 <printf>
       exit();
   86:	e8 38 05 00 00       	call   5c3 <exit>
   }
@@ -95,9 +95,9 @@
     printf(2, "usage: grep pattern [file ...]\n");
   90:	51                   	push   %ecx
   91:	51                   	push   %ecx
-  92:	68 48 0a 00 00       	push   $0xa48
+  92:	68 68 0a 00 00       	push   $0xa68
   97:	6a 02                	push   $0x2
-  99:	e8 82 06 00 00       	call   720 <printf>
+  99:	e8 a2 06 00 00       	call   740 <printf>
     exit();
   9e:	e8 20 05 00 00       	call   5c3 <exit>
     grep(pattern, 0);
@@ -298,7 +298,7 @@
  1f8:	83 ec 04             	sub    $0x4,%esp
  1fb:	29 c8                	sub    %ecx,%eax
  1fd:	50                   	push   %eax
- 1fe:	8d 81 80 0e 00 00    	lea    0xe80(%ecx),%eax
+ 1fe:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
  204:	50                   	push   %eax
  205:	ff 75 0c             	push   0xc(%ebp)
  208:	e8 ce 03 00 00       	call   5db <read>
@@ -309,9 +309,9 @@
  218:	01 45 dc             	add    %eax,-0x24(%ebp)
  21b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
     p = buf;
- 21e:	c7 45 e4 80 0e 00 00 	movl   $0xe80,-0x1c(%ebp)
+ 21e:	c7 45 e4 a0 0e 00 00 	movl   $0xea0,-0x1c(%ebp)
     buf[m] = '\0';
- 225:	c6 81 80 0e 00 00 00 	movb   $0x0,0xe80(%ecx)
+ 225:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
     while((q = strchr(p, '\n')) != 0){
  22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
  230:	83 ec 08             	sub    $0x8,%esp
@@ -378,7 +378,7 @@
  2b5:	8d 76 00             	lea    0x0(%esi),%esi
     if(p == buf)
  2b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
- 2bb:	81 fa 80 0e 00 00    	cmp    $0xe80,%edx
+ 2bb:	81 fa a0 0e 00 00    	cmp    $0xea0,%edx
  2c1:	74 2e                	je     2f1 <grep+0x121>
     if(m > 0){
  2c3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
@@ -389,12 +389,12 @@
       memmove(buf, p, m);
  2d0:	83 ec 04             	sub    $0x4,%esp
       m -= p - buf;
- 2d3:	2d 80 0e 00 00       	sub    $0xe80,%eax
+ 2d3:	2d a0 0e 00 00       	sub    $0xea0,%eax
  2d8:	29 c1                	sub    %eax,%ecx
       memmove(buf, p, m);
  2da:	51                   	push   %ecx
  2db:	52                   	push   %edx
- 2dc:	68 80 0e 00 00       	push   $0xe80
+ 2dc:	68 a0 0e 00 00       	push   $0xea0
       m -= p - buf;
  2e1:	89 4d dc             	mov    %ecx,-0x24(%ebp)
       memmove(buf, p, m);
@@ -991,569 +991,592 @@
  65b:	b8 0e 00 00 00       	mov    $0xe,%eax
  660:	cd 40                	int    $0x40
  662:	c3                   	ret    
- 663:	66 90                	xchg   %ax,%ax
- 665:	66 90                	xchg   %ax,%ax
- 667:	66 90                	xchg   %ax,%ax
- 669:	66 90                	xchg   %ax,%ax
- 66b:	66 90                	xchg   %ax,%ax
- 66d:	66 90                	xchg   %ax,%ax
- 66f:	90                   	nop
 
-00000670 <printint>:
+00000663 <thread_create>:
+SYSCALL(thread_create)
+ 663:	b8 16 00 00 00       	mov    $0x16,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <thread_join>:
+SYSCALL(thread_join)
+ 66b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <thread_exit>:
+SYSCALL(thread_exit)
+ 673:	b8 17 00 00 00       	mov    $0x17,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+
+0000067b <draw>:
+ 67b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 680:	cd 40                	int    $0x40
+ 682:	c3                   	ret    
+ 683:	66 90                	xchg   %ax,%ax
+ 685:	66 90                	xchg   %ax,%ax
+ 687:	66 90                	xchg   %ax,%ax
+ 689:	66 90                	xchg   %ax,%ax
+ 68b:	66 90                	xchg   %ax,%ax
+ 68d:	66 90                	xchg   %ax,%ax
+ 68f:	90                   	nop
+
+00000690 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 3c             	sub    $0x3c,%esp
- 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 3c             	sub    $0x3c,%esp
+ 699:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 67c:	89 d1                	mov    %edx,%ecx
+ 69c:	89 d1                	mov    %edx,%ecx
 {
- 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 69e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 681:	85 d2                	test   %edx,%edx
- 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
- 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 68d:	74 79                	je     708 <printint+0x98>
+ 6a1:	85 d2                	test   %edx,%edx
+ 6a3:	0f 89 7f 00 00 00    	jns    728 <printint+0x98>
+ 6a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 6ad:	74 79                	je     728 <printint+0x98>
     neg = 1;
- 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 6af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 696:	f7 d9                	neg    %ecx
+ 6b6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 698:	31 db                	xor    %ebx,%ebx
- 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
+ 6b8:	31 db                	xor    %ebx,%ebx
+ 6ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 6a0:	89 c8                	mov    %ecx,%eax
- 6a2:	31 d2                	xor    %edx,%edx
- 6a4:	89 cf                	mov    %ecx,%edi
- 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 6a9:	0f b6 92 e0 0a 00 00 	movzbl 0xae0(%edx),%edx
- 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 6b3:	89 d8                	mov    %ebx,%eax
- 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 6c0:	89 c8                	mov    %ecx,%eax
+ 6c2:	31 d2                	xor    %edx,%edx
+ 6c4:	89 cf                	mov    %ecx,%edi
+ 6c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6c9:	0f b6 92 00 0b 00 00 	movzbl 0xb00(%edx),%edx
+ 6d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6d3:	89 d8                	mov    %ebx,%eax
+ 6d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6c1:	76 dd                	jbe    6a0 <printint+0x30>
+ 6de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6e1:	76 dd                	jbe    6c0 <printint+0x30>
   if(neg)
- 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6c6:	85 c9                	test   %ecx,%ecx
- 6c8:	74 0c                	je     6d6 <printint+0x66>
+ 6e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6e6:	85 c9                	test   %ecx,%ecx
+ 6e8:	74 0c                	je     6f6 <printint+0x66>
     buf[i++] = '-';
- 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 6cf:	89 d8                	mov    %ebx,%eax
+ 6ef:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6dd:	eb 07                	jmp    6e6 <printint+0x76>
- 6df:	90                   	nop
+ 6f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6fd:	eb 07                	jmp    706 <printint+0x76>
+ 6ff:	90                   	nop
     putc(fd, buf[i]);
- 6e0:	0f b6 13             	movzbl (%ebx),%edx
- 6e3:	83 eb 01             	sub    $0x1,%ebx
+ 700:	0f b6 13             	movzbl (%ebx),%edx
+ 703:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6e6:	83 ec 04             	sub    $0x4,%esp
- 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6ec:	6a 01                	push   $0x1
- 6ee:	56                   	push   %esi
- 6ef:	57                   	push   %edi
- 6f0:	e8 ee fe ff ff       	call   5e3 <write>
+ 706:	83 ec 04             	sub    $0x4,%esp
+ 709:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 70c:	6a 01                	push   $0x1
+ 70e:	56                   	push   %esi
+ 70f:	57                   	push   %edi
+ 710:	e8 ce fe ff ff       	call   5e3 <write>
   while(--i >= 0)
- 6f5:	83 c4 10             	add    $0x10,%esp
- 6f8:	39 de                	cmp    %ebx,%esi
- 6fa:	75 e4                	jne    6e0 <printint+0x70>
-}
- 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6ff:	5b                   	pop    %ebx
- 700:	5e                   	pop    %esi
- 701:	5f                   	pop    %edi
- 702:	5d                   	pop    %ebp
- 703:	c3                   	ret    
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	39 de                	cmp    %ebx,%esi
+ 71a:	75 e4                	jne    700 <printint+0x70>
+}
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71f:	5b                   	pop    %ebx
+ 720:	5e                   	pop    %esi
+ 721:	5f                   	pop    %edi
+ 722:	5d                   	pop    %ebp
+ 723:	c3                   	ret    
+ 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 70f:	eb 87                	jmp    698 <printint+0x28>
- 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71f:	90                   	nop
+ 728:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 72f:	eb 87                	jmp    6b8 <printint+0x28>
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
 
-00000720 <printf>:
+00000740 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 720:	55                   	push   %ebp
- 721:	89 e5                	mov    %esp,%ebp
- 723:	57                   	push   %edi
- 724:	56                   	push   %esi
- 725:	53                   	push   %ebx
- 726:	83 ec 2c             	sub    $0x2c,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 729:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 749:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 72c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 74c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 72f:	0f b6 13             	movzbl (%ebx),%edx
- 732:	84 d2                	test   %dl,%dl
- 734:	74 6a                	je     7a0 <printf+0x80>
+ 74f:	0f b6 13             	movzbl (%ebx),%edx
+ 752:	84 d2                	test   %dl,%dl
+ 754:	74 6a                	je     7c0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 736:	8d 45 10             	lea    0x10(%ebp),%eax
- 739:	83 c3 01             	add    $0x1,%ebx
+ 756:	8d 45 10             	lea    0x10(%ebp),%eax
+ 759:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 73c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 75c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 73f:	31 c9                	xor    %ecx,%ecx
+ 75f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 741:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 744:	eb 36                	jmp    77c <printf+0x5c>
- 746:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 74d:	8d 76 00             	lea    0x0(%esi),%esi
- 750:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 761:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 764:	eb 36                	jmp    79c <printf+0x5c>
+ 766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 770:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 753:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 773:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 758:	83 f8 25             	cmp    $0x25,%eax
- 75b:	74 15                	je     772 <printf+0x52>
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	74 15                	je     792 <printf+0x52>
   write(fd, &c, 1);
- 75d:	83 ec 04             	sub    $0x4,%esp
- 760:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 763:	6a 01                	push   $0x1
- 765:	57                   	push   %edi
- 766:	56                   	push   %esi
- 767:	e8 77 fe ff ff       	call   5e3 <write>
- 76c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 77d:	83 ec 04             	sub    $0x4,%esp
+ 780:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 783:	6a 01                	push   $0x1
+ 785:	57                   	push   %edi
+ 786:	56                   	push   %esi
+ 787:	e8 57 fe ff ff       	call   5e3 <write>
+ 78c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 76f:	83 c4 10             	add    $0x10,%esp
+ 78f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 772:	0f b6 13             	movzbl (%ebx),%edx
- 775:	83 c3 01             	add    $0x1,%ebx
- 778:	84 d2                	test   %dl,%dl
- 77a:	74 24                	je     7a0 <printf+0x80>
+ 792:	0f b6 13             	movzbl (%ebx),%edx
+ 795:	83 c3 01             	add    $0x1,%ebx
+ 798:	84 d2                	test   %dl,%dl
+ 79a:	74 24                	je     7c0 <printf+0x80>
     c = fmt[i] & 0xff;
- 77c:	0f b6 c2             	movzbl %dl,%eax
+ 79c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 77f:	85 c9                	test   %ecx,%ecx
- 781:	74 cd                	je     750 <printf+0x30>
+ 79f:	85 c9                	test   %ecx,%ecx
+ 7a1:	74 cd                	je     770 <printf+0x30>
       }
     } else if(state == '%'){
- 783:	83 f9 25             	cmp    $0x25,%ecx
- 786:	75 ea                	jne    772 <printf+0x52>
+ 7a3:	83 f9 25             	cmp    $0x25,%ecx
+ 7a6:	75 ea                	jne    792 <printf+0x52>
       if(c == 'd'){
- 788:	83 f8 25             	cmp    $0x25,%eax
- 78b:	0f 84 07 01 00 00    	je     898 <printf+0x178>
- 791:	83 e8 63             	sub    $0x63,%eax
- 794:	83 f8 15             	cmp    $0x15,%eax
- 797:	77 17                	ja     7b0 <printf+0x90>
- 799:	ff 24 85 88 0a 00 00 	jmp    *0xa88(,%eax,4)
+ 7a8:	83 f8 25             	cmp    $0x25,%eax
+ 7ab:	0f 84 07 01 00 00    	je     8b8 <printf+0x178>
+ 7b1:	83 e8 63             	sub    $0x63,%eax
+ 7b4:	83 f8 15             	cmp    $0x15,%eax
+ 7b7:	77 17                	ja     7d0 <printf+0x90>
+ 7b9:	ff 24 85 a8 0a 00 00 	jmp    *0xaa8(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 7a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7a3:	5b                   	pop    %ebx
- 7a4:	5e                   	pop    %esi
- 7a5:	5f                   	pop    %edi
- 7a6:	5d                   	pop    %ebp
- 7a7:	c3                   	ret    
- 7a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7af:	90                   	nop
+ 7c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cf:	90                   	nop
   write(fd, &c, 1);
- 7b0:	83 ec 04             	sub    $0x4,%esp
- 7b3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 7b6:	6a 01                	push   $0x1
- 7b8:	57                   	push   %edi
- 7b9:	56                   	push   %esi
- 7ba:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7be:	e8 20 fe ff ff       	call   5e3 <write>
+ 7d0:	83 ec 04             	sub    $0x4,%esp
+ 7d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 7d6:	6a 01                	push   $0x1
+ 7d8:	57                   	push   %edi
+ 7d9:	56                   	push   %esi
+ 7da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7de:	e8 00 fe ff ff       	call   5e3 <write>
         putc(fd, c);
- 7c3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 7e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 7c7:	83 c4 0c             	add    $0xc,%esp
- 7ca:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 7cd:	6a 01                	push   $0x1
- 7cf:	57                   	push   %edi
- 7d0:	56                   	push   %esi
- 7d1:	e8 0d fe ff ff       	call   5e3 <write>
+ 7e7:	83 c4 0c             	add    $0xc,%esp
+ 7ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7ed:	6a 01                	push   $0x1
+ 7ef:	57                   	push   %edi
+ 7f0:	56                   	push   %esi
+ 7f1:	e8 ed fd ff ff       	call   5e3 <write>
         putc(fd, c);
- 7d6:	83 c4 10             	add    $0x10,%esp
+ 7f6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7d9:	31 c9                	xor    %ecx,%ecx
- 7db:	eb 95                	jmp    772 <printf+0x52>
- 7dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 7f9:	31 c9                	xor    %ecx,%ecx
+ 7fb:	eb 95                	jmp    792 <printf+0x52>
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 7e0:	83 ec 0c             	sub    $0xc,%esp
- 7e3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7e8:	6a 00                	push   $0x0
- 7ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7ed:	8b 10                	mov    (%eax),%edx
- 7ef:	89 f0                	mov    %esi,%eax
- 7f1:	e8 7a fe ff ff       	call   670 <printint>
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 80d:	8b 10                	mov    (%eax),%edx
+ 80f:	89 f0                	mov    %esi,%eax
+ 811:	e8 7a fe ff ff       	call   690 <printint>
         ap++;
- 7f6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 7fa:	83 c4 10             	add    $0x10,%esp
+ 816:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 81a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7fd:	31 c9                	xor    %ecx,%ecx
- 7ff:	e9 6e ff ff ff       	jmp    772 <printf+0x52>
- 804:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 81d:	31 c9                	xor    %ecx,%ecx
+ 81f:	e9 6e ff ff ff       	jmp    792 <printf+0x52>
+ 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 808:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 80b:	8b 10                	mov    (%eax),%edx
+ 828:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 82b:	8b 10                	mov    (%eax),%edx
         ap++;
- 80d:	83 c0 04             	add    $0x4,%eax
- 810:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 82d:	83 c0 04             	add    $0x4,%eax
+ 830:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 813:	85 d2                	test   %edx,%edx
- 815:	0f 84 8d 00 00 00    	je     8a8 <printf+0x188>
+ 833:	85 d2                	test   %edx,%edx
+ 835:	0f 84 8d 00 00 00    	je     8c8 <printf+0x188>
         while(*s != 0){
- 81b:	0f b6 02             	movzbl (%edx),%eax
+ 83b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 81e:	31 c9                	xor    %ecx,%ecx
+ 83e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 820:	84 c0                	test   %al,%al
- 822:	0f 84 4a ff ff ff    	je     772 <printf+0x52>
- 828:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 82b:	89 d3                	mov    %edx,%ebx
- 82d:	8d 76 00             	lea    0x0(%esi),%esi
+ 840:	84 c0                	test   %al,%al
+ 842:	0f 84 4a ff ff ff    	je     792 <printf+0x52>
+ 848:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 84b:	89 d3                	mov    %edx,%ebx
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 830:	83 ec 04             	sub    $0x4,%esp
+ 850:	83 ec 04             	sub    $0x4,%esp
           s++;
- 833:	83 c3 01             	add    $0x1,%ebx
- 836:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 853:	83 c3 01             	add    $0x1,%ebx
+ 856:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 839:	6a 01                	push   $0x1
- 83b:	57                   	push   %edi
- 83c:	56                   	push   %esi
- 83d:	e8 a1 fd ff ff       	call   5e3 <write>
+ 859:	6a 01                	push   $0x1
+ 85b:	57                   	push   %edi
+ 85c:	56                   	push   %esi
+ 85d:	e8 81 fd ff ff       	call   5e3 <write>
         while(*s != 0){
- 842:	0f b6 03             	movzbl (%ebx),%eax
- 845:	83 c4 10             	add    $0x10,%esp
- 848:	84 c0                	test   %al,%al
- 84a:	75 e4                	jne    830 <printf+0x110>
+ 862:	0f b6 03             	movzbl (%ebx),%eax
+ 865:	83 c4 10             	add    $0x10,%esp
+ 868:	84 c0                	test   %al,%al
+ 86a:	75 e4                	jne    850 <printf+0x110>
       state = 0;
- 84c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 84f:	31 c9                	xor    %ecx,%ecx
- 851:	e9 1c ff ff ff       	jmp    772 <printf+0x52>
- 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 85d:	8d 76 00             	lea    0x0(%esi),%esi
+ 86c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 86f:	31 c9                	xor    %ecx,%ecx
+ 871:	e9 1c ff ff ff       	jmp    792 <printf+0x52>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 860:	83 ec 0c             	sub    $0xc,%esp
- 863:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 868:	6a 01                	push   $0x1
- 86a:	e9 7b ff ff ff       	jmp    7ea <printf+0xca>
- 86f:	90                   	nop
+ 880:	83 ec 0c             	sub    $0xc,%esp
+ 883:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 888:	6a 01                	push   $0x1
+ 88a:	e9 7b ff ff ff       	jmp    80a <printf+0xca>
+ 88f:	90                   	nop
         putc(fd, *ap);
- 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 873:	83 ec 04             	sub    $0x4,%esp
+ 893:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 876:	8b 00                	mov    (%eax),%eax
+ 896:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 878:	6a 01                	push   $0x1
- 87a:	57                   	push   %edi
- 87b:	56                   	push   %esi
+ 898:	6a 01                	push   $0x1
+ 89a:	57                   	push   %edi
+ 89b:	56                   	push   %esi
         putc(fd, *ap);
- 87c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 89c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 87f:	e8 5f fd ff ff       	call   5e3 <write>
+ 89f:	e8 3f fd ff ff       	call   5e3 <write>
         ap++;
- 884:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 888:	83 c4 10             	add    $0x10,%esp
+ 8a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 8a8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 88b:	31 c9                	xor    %ecx,%ecx
- 88d:	e9 e0 fe ff ff       	jmp    772 <printf+0x52>
- 892:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 8ab:	31 c9                	xor    %ecx,%ecx
+ 8ad:	e9 e0 fe ff ff       	jmp    792 <printf+0x52>
+ 8b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 898:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 8b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 89b:	83 ec 04             	sub    $0x4,%esp
- 89e:	e9 2a ff ff ff       	jmp    7cd <printf+0xad>
- 8a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8a7:	90                   	nop
+ 8bb:	83 ec 04             	sub    $0x4,%esp
+ 8be:	e9 2a ff ff ff       	jmp    7ed <printf+0xad>
+ 8c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8c7:	90                   	nop
           s = "(null)";
- 8a8:	ba 7e 0a 00 00       	mov    $0xa7e,%edx
+ 8c8:	ba 9e 0a 00 00       	mov    $0xa9e,%edx
         while(*s != 0){
- 8ad:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 8b0:	b8 28 00 00 00       	mov    $0x28,%eax
- 8b5:	89 d3                	mov    %edx,%ebx
- 8b7:	e9 74 ff ff ff       	jmp    830 <printf+0x110>
- 8bc:	66 90                	xchg   %ax,%ax
- 8be:	66 90                	xchg   %ax,%ax
+ 8cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 8d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8d5:	89 d3                	mov    %edx,%ebx
+ 8d7:	e9 74 ff ff ff       	jmp    850 <printf+0x110>
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
 
-000008c0 <free>:
+000008e0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 8c0:	55                   	push   %ebp
+ 8e0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8c1:	a1 80 12 00 00       	mov    0x1280,%eax
+ 8e1:	a1 a0 12 00 00       	mov    0x12a0,%eax
 {
- 8c6:	89 e5                	mov    %esp,%ebp
- 8c8:	57                   	push   %edi
- 8c9:	56                   	push   %esi
- 8ca:	53                   	push   %ebx
- 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	57                   	push   %edi
+ 8e9:	56                   	push   %esi
+ 8ea:	53                   	push   %ebx
+ 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 8d8:	89 c2                	mov    %eax,%edx
- 8da:	8b 00                	mov    (%eax),%eax
- 8dc:	39 ca                	cmp    %ecx,%edx
- 8de:	73 30                	jae    910 <free+0x50>
- 8e0:	39 c1                	cmp    %eax,%ecx
- 8e2:	72 04                	jb     8e8 <free+0x28>
+ 8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8f8:	89 c2                	mov    %eax,%edx
+ 8fa:	8b 00                	mov    (%eax),%eax
+ 8fc:	39 ca                	cmp    %ecx,%edx
+ 8fe:	73 30                	jae    930 <free+0x50>
+ 900:	39 c1                	cmp    %eax,%ecx
+ 902:	72 04                	jb     908 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8e4:	39 c2                	cmp    %eax,%edx
- 8e6:	72 f0                	jb     8d8 <free+0x18>
+ 904:	39 c2                	cmp    %eax,%edx
+ 906:	72 f0                	jb     8f8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 8e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8ee:	39 f8                	cmp    %edi,%eax
- 8f0:	74 30                	je     922 <free+0x62>
+ 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90e:	39 f8                	cmp    %edi,%eax
+ 910:	74 30                	je     942 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 8f2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 912:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 8f5:	8b 42 04             	mov    0x4(%edx),%eax
- 8f8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 8fb:	39 f1                	cmp    %esi,%ecx
- 8fd:	74 3a                	je     939 <free+0x79>
+ 915:	8b 42 04             	mov    0x4(%edx),%eax
+ 918:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 91b:	39 f1                	cmp    %esi,%ecx
+ 91d:	74 3a                	je     959 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 8ff:	89 0a                	mov    %ecx,(%edx)
+ 91f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 901:	5b                   	pop    %ebx
+ 921:	5b                   	pop    %ebx
   freep = p;
- 902:	89 15 80 12 00 00    	mov    %edx,0x1280
+ 922:	89 15 a0 12 00 00    	mov    %edx,0x12a0
 }
- 908:	5e                   	pop    %esi
- 909:	5f                   	pop    %edi
- 90a:	5d                   	pop    %ebp
- 90b:	c3                   	ret    
- 90c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 928:	5e                   	pop    %esi
+ 929:	5f                   	pop    %edi
+ 92a:	5d                   	pop    %ebp
+ 92b:	c3                   	ret    
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 910:	39 c2                	cmp    %eax,%edx
- 912:	72 c4                	jb     8d8 <free+0x18>
- 914:	39 c1                	cmp    %eax,%ecx
- 916:	73 c0                	jae    8d8 <free+0x18>
+ 930:	39 c2                	cmp    %eax,%edx
+ 932:	72 c4                	jb     8f8 <free+0x18>
+ 934:	39 c1                	cmp    %eax,%ecx
+ 936:	73 c0                	jae    8f8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 91e:	39 f8                	cmp    %edi,%eax
- 920:	75 d0                	jne    8f2 <free+0x32>
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 f8                	cmp    %edi,%eax
+ 940:	75 d0                	jne    912 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 922:	03 70 04             	add    0x4(%eax),%esi
- 925:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 942:	03 70 04             	add    0x4(%eax),%esi
+ 945:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 928:	8b 02                	mov    (%edx),%eax
- 92a:	8b 00                	mov    (%eax),%eax
- 92c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 948:	8b 02                	mov    (%edx),%eax
+ 94a:	8b 00                	mov    (%eax),%eax
+ 94c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 92f:	8b 42 04             	mov    0x4(%edx),%eax
- 932:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 935:	39 f1                	cmp    %esi,%ecx
- 937:	75 c6                	jne    8ff <free+0x3f>
+ 94f:	8b 42 04             	mov    0x4(%edx),%eax
+ 952:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 955:	39 f1                	cmp    %esi,%ecx
+ 957:	75 c6                	jne    91f <free+0x3f>
     p->s.size += bp->s.size;
- 939:	03 43 fc             	add    -0x4(%ebx),%eax
+ 959:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 93c:	89 15 80 12 00 00    	mov    %edx,0x1280
+ 95c:	89 15 a0 12 00 00    	mov    %edx,0x12a0
     p->s.size += bp->s.size;
- 942:	89 42 04             	mov    %eax,0x4(%edx)
+ 962:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 945:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 948:	89 0a                	mov    %ecx,(%edx)
+ 965:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 968:	89 0a                	mov    %ecx,(%edx)
 }
- 94a:	5b                   	pop    %ebx
- 94b:	5e                   	pop    %esi
- 94c:	5f                   	pop    %edi
- 94d:	5d                   	pop    %ebp
- 94e:	c3                   	ret    
- 94f:	90                   	nop
+ 96a:	5b                   	pop    %ebx
+ 96b:	5e                   	pop    %esi
+ 96c:	5f                   	pop    %edi
+ 96d:	5d                   	pop    %ebp
+ 96e:	c3                   	ret    
+ 96f:	90                   	nop
 
-00000950 <malloc>:
+00000970 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 950:	55                   	push   %ebp
- 951:	89 e5                	mov    %esp,%ebp
- 953:	57                   	push   %edi
- 954:	56                   	push   %esi
- 955:	53                   	push   %ebx
- 956:	83 ec 1c             	sub    $0x1c,%esp
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 959:	8b 45 08             	mov    0x8(%ebp),%eax
+ 979:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 95c:	8b 3d 80 12 00 00    	mov    0x1280,%edi
+ 97c:	8b 3d a0 12 00 00    	mov    0x12a0,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 962:	8d 70 07             	lea    0x7(%eax),%esi
- 965:	c1 ee 03             	shr    $0x3,%esi
- 968:	83 c6 01             	add    $0x1,%esi
+ 982:	8d 70 07             	lea    0x7(%eax),%esi
+ 985:	c1 ee 03             	shr    $0x3,%esi
+ 988:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 96b:	85 ff                	test   %edi,%edi
- 96d:	0f 84 9d 00 00 00    	je     a10 <malloc+0xc0>
+ 98b:	85 ff                	test   %edi,%edi
+ 98d:	0f 84 9d 00 00 00    	je     a30 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 973:	8b 17                	mov    (%edi),%edx
+ 993:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 975:	8b 4a 04             	mov    0x4(%edx),%ecx
- 978:	39 f1                	cmp    %esi,%ecx
- 97a:	73 6a                	jae    9e6 <malloc+0x96>
- 97c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 981:	39 de                	cmp    %ebx,%esi
- 983:	0f 43 de             	cmovae %esi,%ebx
+ 995:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 998:	39 f1                	cmp    %esi,%ecx
+ 99a:	73 6a                	jae    a06 <malloc+0x96>
+ 99c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9a1:	39 de                	cmp    %ebx,%esi
+ 9a3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 986:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 98d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 990:	eb 17                	jmp    9a9 <malloc+0x59>
- 992:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 9ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9b0:	eb 17                	jmp    9c9 <malloc+0x59>
+ 9b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 998:	8b 02                	mov    (%edx),%eax
+ 9b8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 99a:	8b 48 04             	mov    0x4(%eax),%ecx
- 99d:	39 f1                	cmp    %esi,%ecx
- 99f:	73 4f                	jae    9f0 <malloc+0xa0>
+ 9ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bd:	39 f1                	cmp    %esi,%ecx
+ 9bf:	73 4f                	jae    a10 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 9a1:	8b 3d 80 12 00 00    	mov    0x1280,%edi
- 9a7:	89 c2                	mov    %eax,%edx
- 9a9:	39 d7                	cmp    %edx,%edi
- 9ab:	75 eb                	jne    998 <malloc+0x48>
+ 9c1:	8b 3d a0 12 00 00    	mov    0x12a0,%edi
+ 9c7:	89 c2                	mov    %eax,%edx
+ 9c9:	39 d7                	cmp    %edx,%edi
+ 9cb:	75 eb                	jne    9b8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 9ad:	83 ec 0c             	sub    $0xc,%esp
- 9b0:	ff 75 e4             	push   -0x1c(%ebp)
- 9b3:	e8 93 fc ff ff       	call   64b <sbrk>
+ 9cd:	83 ec 0c             	sub    $0xc,%esp
+ 9d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 9d3:	e8 73 fc ff ff       	call   64b <sbrk>
   if(p == (char*)-1)
- 9b8:	83 c4 10             	add    $0x10,%esp
- 9bb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9be:	74 1c                	je     9dc <malloc+0x8c>
+ 9d8:	83 c4 10             	add    $0x10,%esp
+ 9db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9de:	74 1c                	je     9fc <malloc+0x8c>
   hp->s.size = nu;
- 9c0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 9e0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 9c3:	83 ec 0c             	sub    $0xc,%esp
- 9c6:	83 c0 08             	add    $0x8,%eax
- 9c9:	50                   	push   %eax
- 9ca:	e8 f1 fe ff ff       	call   8c0 <free>
+ 9e3:	83 ec 0c             	sub    $0xc,%esp
+ 9e6:	83 c0 08             	add    $0x8,%eax
+ 9e9:	50                   	push   %eax
+ 9ea:	e8 f1 fe ff ff       	call   8e0 <free>
   return freep;
- 9cf:	8b 15 80 12 00 00    	mov    0x1280,%edx
+ 9ef:	8b 15 a0 12 00 00    	mov    0x12a0,%edx
       if((p = morecore(nunits)) == 0)
- 9d5:	83 c4 10             	add    $0x10,%esp
- 9d8:	85 d2                	test   %edx,%edx
- 9da:	75 bc                	jne    998 <malloc+0x48>
+ 9f5:	83 c4 10             	add    $0x10,%esp
+ 9f8:	85 d2                	test   %edx,%edx
+ 9fa:	75 bc                	jne    9b8 <malloc+0x48>
         return 0;
   }
 }
- 9dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9df:	31 c0                	xor    %eax,%eax
+ 9ff:	31 c0                	xor    %eax,%eax
 }
- 9e1:	5b                   	pop    %ebx
- 9e2:	5e                   	pop    %esi
- 9e3:	5f                   	pop    %edi
- 9e4:	5d                   	pop    %ebp
- 9e5:	c3                   	ret    
+ a01:	5b                   	pop    %ebx
+ a02:	5e                   	pop    %esi
+ a03:	5f                   	pop    %edi
+ a04:	5d                   	pop    %ebp
+ a05:	c3                   	ret    
     if(p->s.size >= nunits){
- 9e6:	89 d0                	mov    %edx,%eax
- 9e8:	89 fa                	mov    %edi,%edx
- 9ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a06:	89 d0                	mov    %edx,%eax
+ a08:	89 fa                	mov    %edi,%edx
+ a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 9f0:	39 ce                	cmp    %ecx,%esi
- 9f2:	74 4c                	je     a40 <malloc+0xf0>
+ a10:	39 ce                	cmp    %ecx,%esi
+ a12:	74 4c                	je     a60 <malloc+0xf0>
         p->s.size -= nunits;
- 9f4:	29 f1                	sub    %esi,%ecx
- 9f6:	89 48 04             	mov    %ecx,0x4(%eax)
+ a14:	29 f1                	sub    %esi,%ecx
+ a16:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 9f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ a19:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 9fc:	89 70 04             	mov    %esi,0x4(%eax)
+ a1c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 9ff:	89 15 80 12 00 00    	mov    %edx,0x1280
+ a1f:	89 15 a0 12 00 00    	mov    %edx,0x12a0
 }
- a05:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ a25:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- a08:	83 c0 08             	add    $0x8,%eax
+ a28:	83 c0 08             	add    $0x8,%eax
 }
- a0b:	5b                   	pop    %ebx
- a0c:	5e                   	pop    %esi
- a0d:	5f                   	pop    %edi
- a0e:	5d                   	pop    %ebp
- a0f:	c3                   	ret    
+ a2b:	5b                   	pop    %ebx
+ a2c:	5e                   	pop    %esi
+ a2d:	5f                   	pop    %edi
+ a2e:	5d                   	pop    %ebp
+ a2f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- a10:	c7 05 80 12 00 00 84 	movl   $0x1284,0x1280
- a17:	12 00 00 
+ a30:	c7 05 a0 12 00 00 a4 	movl   $0x12a4,0x12a0
+ a37:	12 00 00 
     base.s.size = 0;
- a1a:	bf 84 12 00 00       	mov    $0x1284,%edi
+ a3a:	bf a4 12 00 00       	mov    $0x12a4,%edi
     base.s.ptr = freep = prevp = &base;
- a1f:	c7 05 84 12 00 00 84 	movl   $0x1284,0x1284
- a26:	12 00 00 
+ a3f:	c7 05 a4 12 00 00 a4 	movl   $0x12a4,0x12a4
+ a46:	12 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a29:	89 fa                	mov    %edi,%edx
+ a49:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- a2b:	c7 05 88 12 00 00 00 	movl   $0x0,0x1288
- a32:	00 00 00 
+ a4b:	c7 05 a8 12 00 00 00 	movl   $0x0,0x12a8
+ a52:	00 00 00 
     if(p->s.size >= nunits){
- a35:	e9 42 ff ff ff       	jmp    97c <malloc+0x2c>
- a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a55:	e9 42 ff ff ff       	jmp    99c <malloc+0x2c>
+ a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a40:	8b 08                	mov    (%eax),%ecx
- a42:	89 0a                	mov    %ecx,(%edx)
- a44:	eb b9                	jmp    9ff <malloc+0xaf>
+ a60:	8b 08                	mov    (%eax),%ecx
+ a62:	89 0a                	mov    %ecx,(%edx)
+ a64:	eb b9                	jmp    a1f <malloc+0xaf>
Binary files xv6-public-org/grep.o and xv6-public/grep.o differ
diff -u xv6-public-org/grep.sym xv6-public/grep.sym
--- xv6-public-org/grep.sym	2022-09-04 11:47:11.105829204 +0530
+++ xv6-public/grep.sym	2022-09-05 23:16:36.441928327 +0530
@@ -1,20 +1,21 @@
 00000000 grep.c
 00000000 ulib.c
 00000000 printf.c
-00000670 printint
-00000ae0 digits.0
+00000690 printint
+00000b00 digits.0
 00000000 umalloc.c
-00001280 freep
-00001284 base
+000012a0 freep
+000012a4 base
 00000370 strcpy
-00000720 printf
+00000740 printf
+00000673 thread_exit
 00000590 memmove
 000000c0 matchhere
 0000060b mknod
 00000490 gets
 00000643 getpid
 000001d0 grep
-00000950 malloc
+00000970 malloc
 00000653 sleep
 000005d3 pipe
 000005e3 write
@@ -28,23 +29,26 @@
 000005bb fork
 0000064b sbrk
 0000065b uptime
-00000e80 __bss_start
+00000ea0 __bss_start
 00000430 memset
 00000000 main
 00000310 matchstar
 000003a0 strcmp
 0000063b dup
-00000e80 buf
+00000ea0 buf
 00000500 stat
-00000e80 _edata
-0000128c _end
+00000ea0 _edata
+000012ac _end
 00000170 match
 00000623 link
 000005c3 exit
 00000550 atoi
+0000067b draw
 00000400 strlen
 00000603 open
 00000450 strchr
+00000663 thread_create
 0000062b mkdir
 000005eb close
-000008c0 free
+0000066b thread_join
+000008e0 free
Binary files xv6-public-org/ide.o and xv6-public/ide.o differ
Binary files xv6-public-org/_init and xv6-public/_init differ
diff -u xv6-public-org/init.asm xv6-public/init.asm
--- xv6-public-org/init.asm	2022-09-04 11:47:11.173863204 +0530
+++ xv6-public/init.asm	2022-09-05 23:16:36.505928467 +0530
@@ -23,7 +23,7 @@
   if(open("console", O_RDWR) < 0){
    f:	83 ec 08             	sub    $0x8,%esp
   12:	6a 02                	push   $0x2
-  14:	68 c8 07 00 00       	push   $0x7c8
+  14:	68 e8 07 00 00       	push   $0x7e8
   19:	e8 65 03 00 00       	call   383 <open>
   1e:	83 c4 10             	add    $0x10,%esp
   21:	85 c0                	test   %eax,%eax
@@ -44,9 +44,9 @@
   for(;;){
     printf(1, "init: starting sh\n");
   48:	83 ec 08             	sub    $0x8,%esp
-  4b:	68 d0 07 00 00       	push   $0x7d0
+  4b:	68 f0 07 00 00       	push   $0x7f0
   50:	6a 01                	push   $0x1
-  52:	e8 49 04 00 00       	call   4a0 <printf>
+  52:	e8 69 04 00 00       	call   4c0 <printf>
     pid = fork();
   57:	e8 df 02 00 00       	call   33b <fork>
     if(pid < 0){
@@ -75,44 +75,44 @@
   7b:	74 cb                	je     48 <main+0x48>
       printf(1, "zombie!\n");
   7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 0f 08 00 00       	push   $0x80f
+  80:	68 2f 08 00 00       	push   $0x82f
   85:	6a 01                	push   $0x1
-  87:	e8 14 04 00 00       	call   4a0 <printf>
+  87:	e8 34 04 00 00       	call   4c0 <printf>
   8c:	83 c4 10             	add    $0x10,%esp
   8f:	eb df                	jmp    70 <main+0x70>
       printf(1, "init: fork failed\n");
   91:	53                   	push   %ebx
   92:	53                   	push   %ebx
-  93:	68 e3 07 00 00       	push   $0x7e3
+  93:	68 03 08 00 00       	push   $0x803
   98:	6a 01                	push   $0x1
-  9a:	e8 01 04 00 00       	call   4a0 <printf>
+  9a:	e8 21 04 00 00       	call   4c0 <printf>
       exit();
   9f:	e8 9f 02 00 00       	call   343 <exit>
       exec("sh", argv);
   a4:	50                   	push   %eax
   a5:	50                   	push   %eax
-  a6:	68 24 0b 00 00       	push   $0xb24
-  ab:	68 f6 07 00 00       	push   $0x7f6
+  a6:	68 44 0b 00 00       	push   $0xb44
+  ab:	68 16 08 00 00       	push   $0x816
   b0:	e8 c6 02 00 00       	call   37b <exec>
       printf(1, "init: exec sh failed\n");
   b5:	5a                   	pop    %edx
   b6:	59                   	pop    %ecx
-  b7:	68 f9 07 00 00       	push   $0x7f9
+  b7:	68 19 08 00 00       	push   $0x819
   bc:	6a 01                	push   $0x1
-  be:	e8 dd 03 00 00       	call   4a0 <printf>
+  be:	e8 fd 03 00 00       	call   4c0 <printf>
       exit();
   c3:	e8 7b 02 00 00       	call   343 <exit>
     mknod("console", 1, 1);
   c8:	50                   	push   %eax
   c9:	6a 01                	push   $0x1
   cb:	6a 01                	push   $0x1
-  cd:	68 c8 07 00 00       	push   $0x7c8
+  cd:	68 e8 07 00 00       	push   $0x7e8
   d2:	e8 b4 02 00 00       	call   38b <mknod>
     open("console", O_RDWR);
   d7:	58                   	pop    %eax
   d8:	5a                   	pop    %edx
   d9:	6a 02                	push   $0x2
-  db:	68 c8 07 00 00       	push   $0x7c8
+  db:	68 e8 07 00 00       	push   $0x7e8
   e0:	e8 9e 02 00 00       	call   383 <open>
   e5:	83 c4 10             	add    $0x10,%esp
   e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
@@ -643,569 +643,592 @@
  3db:	b8 0e 00 00 00       	mov    $0xe,%eax
  3e0:	cd 40                	int    $0x40
  3e2:	c3                   	ret    
- 3e3:	66 90                	xchg   %ax,%ax
- 3e5:	66 90                	xchg   %ax,%ax
- 3e7:	66 90                	xchg   %ax,%ax
- 3e9:	66 90                	xchg   %ax,%ax
- 3eb:	66 90                	xchg   %ax,%ax
- 3ed:	66 90                	xchg   %ax,%ax
- 3ef:	90                   	nop
 
-000003f0 <printint>:
+000003e3 <thread_create>:
+SYSCALL(thread_create)
+ 3e3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <thread_join>:
+SYSCALL(thread_join)
+ 3eb:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <thread_exit>:
+SYSCALL(thread_exit)
+ 3f3:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <draw>:
+ 3fb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+ 403:	66 90                	xchg   %ax,%ax
+ 405:	66 90                	xchg   %ax,%ax
+ 407:	66 90                	xchg   %ax,%ax
+ 409:	66 90                	xchg   %ax,%ax
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
- 3f4:	56                   	push   %esi
- 3f5:	53                   	push   %ebx
- 3f6:	83 ec 3c             	sub    $0x3c,%esp
- 3f9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+ 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 3fc:	89 d1                	mov    %edx,%ecx
+ 41c:	89 d1                	mov    %edx,%ecx
 {
- 3fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 401:	85 d2                	test   %edx,%edx
- 403:	0f 89 7f 00 00 00    	jns    488 <printint+0x98>
- 409:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 40d:	74 79                	je     488 <printint+0x98>
+ 421:	85 d2                	test   %edx,%edx
+ 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
+ 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42d:	74 79                	je     4a8 <printint+0x98>
     neg = 1;
- 40f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 416:	f7 d9                	neg    %ecx
+ 436:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 418:	31 db                	xor    %ebx,%ebx
- 41a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 41d:	8d 76 00             	lea    0x0(%esi),%esi
+ 438:	31 db                	xor    %ebx,%ebx
+ 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 420:	89 c8                	mov    %ecx,%eax
- 422:	31 d2                	xor    %edx,%edx
- 424:	89 cf                	mov    %ecx,%edi
- 426:	f7 75 c4             	divl   -0x3c(%ebp)
- 429:	0f b6 92 78 08 00 00 	movzbl 0x878(%edx),%edx
- 430:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 433:	89 d8                	mov    %ebx,%eax
- 435:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 440:	89 c8                	mov    %ecx,%eax
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	89 cf                	mov    %ecx,%edi
+ 446:	f7 75 c4             	divl   -0x3c(%ebp)
+ 449:	0f b6 92 98 08 00 00 	movzbl 0x898(%edx),%edx
+ 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 453:	89 d8                	mov    %ebx,%eax
+ 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 438:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 43b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 43e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 441:	76 dd                	jbe    420 <printint+0x30>
+ 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 461:	76 dd                	jbe    440 <printint+0x30>
   if(neg)
- 443:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 446:	85 c9                	test   %ecx,%ecx
- 448:	74 0c                	je     456 <printint+0x66>
+ 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 466:	85 c9                	test   %ecx,%ecx
+ 468:	74 0c                	je     476 <printint+0x66>
     buf[i++] = '-';
- 44a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 44f:	89 d8                	mov    %ebx,%eax
+ 46f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 451:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 456:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 459:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 45d:	eb 07                	jmp    466 <printint+0x76>
- 45f:	90                   	nop
+ 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 47d:	eb 07                	jmp    486 <printint+0x76>
+ 47f:	90                   	nop
     putc(fd, buf[i]);
- 460:	0f b6 13             	movzbl (%ebx),%edx
- 463:	83 eb 01             	sub    $0x1,%ebx
+ 480:	0f b6 13             	movzbl (%ebx),%edx
+ 483:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 466:	83 ec 04             	sub    $0x4,%esp
- 469:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 46c:	6a 01                	push   $0x1
- 46e:	56                   	push   %esi
- 46f:	57                   	push   %edi
- 470:	e8 ee fe ff ff       	call   363 <write>
+ 486:	83 ec 04             	sub    $0x4,%esp
+ 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 48c:	6a 01                	push   $0x1
+ 48e:	56                   	push   %esi
+ 48f:	57                   	push   %edi
+ 490:	e8 ce fe ff ff       	call   363 <write>
   while(--i >= 0)
- 475:	83 c4 10             	add    $0x10,%esp
- 478:	39 de                	cmp    %ebx,%esi
- 47a:	75 e4                	jne    460 <printint+0x70>
-}
- 47c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 47f:	5b                   	pop    %ebx
- 480:	5e                   	pop    %esi
- 481:	5f                   	pop    %edi
- 482:	5d                   	pop    %ebp
- 483:	c3                   	ret    
- 484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	39 de                	cmp    %ebx,%esi
+ 49a:	75 e4                	jne    480 <printint+0x70>
+}
+ 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49f:	5b                   	pop    %ebx
+ 4a0:	5e                   	pop    %esi
+ 4a1:	5f                   	pop    %edi
+ 4a2:	5d                   	pop    %ebp
+ 4a3:	c3                   	ret    
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 488:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 48f:	eb 87                	jmp    418 <printint+0x28>
- 491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 49f:	90                   	nop
+ 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4af:	eb 87                	jmp    438 <printint+0x28>
+ 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
 
-000004a0 <printf>:
+000004c0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 2c             	sub    $0x2c,%esp
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
+ 4c4:	56                   	push   %esi
+ 4c5:	53                   	push   %ebx
+ 4c6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4a9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 4c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 4ac:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cc:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 4af:	0f b6 13             	movzbl (%ebx),%edx
- 4b2:	84 d2                	test   %dl,%dl
- 4b4:	74 6a                	je     520 <printf+0x80>
+ 4cf:	0f b6 13             	movzbl (%ebx),%edx
+ 4d2:	84 d2                	test   %dl,%dl
+ 4d4:	74 6a                	je     540 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 4b6:	8d 45 10             	lea    0x10(%ebp),%eax
- 4b9:	83 c3 01             	add    $0x1,%ebx
+ 4d6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4d9:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 4bc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 4dc:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 4bf:	31 c9                	xor    %ecx,%ecx
+ 4df:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 4c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4c4:	eb 36                	jmp    4fc <printf+0x5c>
- 4c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
- 4d0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4e4:	eb 36                	jmp    51c <printf+0x5c>
+ 4e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 4d3:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 4f3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 4d8:	83 f8 25             	cmp    $0x25,%eax
- 4db:	74 15                	je     4f2 <printf+0x52>
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	74 15                	je     512 <printf+0x52>
   write(fd, &c, 1);
- 4dd:	83 ec 04             	sub    $0x4,%esp
- 4e0:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	56                   	push   %esi
- 4e7:	e8 77 fe ff ff       	call   363 <write>
- 4ec:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 4fd:	83 ec 04             	sub    $0x4,%esp
+ 500:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	56                   	push   %esi
+ 507:	e8 57 fe ff ff       	call   363 <write>
+ 50c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 4ef:	83 c4 10             	add    $0x10,%esp
+ 50f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 4f2:	0f b6 13             	movzbl (%ebx),%edx
- 4f5:	83 c3 01             	add    $0x1,%ebx
- 4f8:	84 d2                	test   %dl,%dl
- 4fa:	74 24                	je     520 <printf+0x80>
+ 512:	0f b6 13             	movzbl (%ebx),%edx
+ 515:	83 c3 01             	add    $0x1,%ebx
+ 518:	84 d2                	test   %dl,%dl
+ 51a:	74 24                	je     540 <printf+0x80>
     c = fmt[i] & 0xff;
- 4fc:	0f b6 c2             	movzbl %dl,%eax
+ 51c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 4ff:	85 c9                	test   %ecx,%ecx
- 501:	74 cd                	je     4d0 <printf+0x30>
+ 51f:	85 c9                	test   %ecx,%ecx
+ 521:	74 cd                	je     4f0 <printf+0x30>
       }
     } else if(state == '%'){
- 503:	83 f9 25             	cmp    $0x25,%ecx
- 506:	75 ea                	jne    4f2 <printf+0x52>
+ 523:	83 f9 25             	cmp    $0x25,%ecx
+ 526:	75 ea                	jne    512 <printf+0x52>
       if(c == 'd'){
- 508:	83 f8 25             	cmp    $0x25,%eax
- 50b:	0f 84 07 01 00 00    	je     618 <printf+0x178>
- 511:	83 e8 63             	sub    $0x63,%eax
- 514:	83 f8 15             	cmp    $0x15,%eax
- 517:	77 17                	ja     530 <printf+0x90>
- 519:	ff 24 85 20 08 00 00 	jmp    *0x820(,%eax,4)
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	0f 84 07 01 00 00    	je     638 <printf+0x178>
+ 531:	83 e8 63             	sub    $0x63,%eax
+ 534:	83 f8 15             	cmp    $0x15,%eax
+ 537:	77 17                	ja     550 <printf+0x90>
+ 539:	ff 24 85 40 08 00 00 	jmp    *0x840(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 520:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 523:	5b                   	pop    %ebx
- 524:	5e                   	pop    %esi
- 525:	5f                   	pop    %edi
- 526:	5d                   	pop    %ebp
- 527:	c3                   	ret    
- 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 52f:	90                   	nop
+ 540:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 543:	5b                   	pop    %ebx
+ 544:	5e                   	pop    %esi
+ 545:	5f                   	pop    %edi
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
   write(fd, &c, 1);
- 530:	83 ec 04             	sub    $0x4,%esp
- 533:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 536:	6a 01                	push   $0x1
- 538:	57                   	push   %edi
- 539:	56                   	push   %esi
- 53a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 53e:	e8 20 fe ff ff       	call   363 <write>
+ 550:	83 ec 04             	sub    $0x4,%esp
+ 553:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 556:	6a 01                	push   $0x1
+ 558:	57                   	push   %edi
+ 559:	56                   	push   %esi
+ 55a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 55e:	e8 00 fe ff ff       	call   363 <write>
         putc(fd, c);
- 543:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 563:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 547:	83 c4 0c             	add    $0xc,%esp
- 54a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 54d:	6a 01                	push   $0x1
- 54f:	57                   	push   %edi
- 550:	56                   	push   %esi
- 551:	e8 0d fe ff ff       	call   363 <write>
+ 567:	83 c4 0c             	add    $0xc,%esp
+ 56a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 56d:	6a 01                	push   $0x1
+ 56f:	57                   	push   %edi
+ 570:	56                   	push   %esi
+ 571:	e8 ed fd ff ff       	call   363 <write>
         putc(fd, c);
- 556:	83 c4 10             	add    $0x10,%esp
+ 576:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 559:	31 c9                	xor    %ecx,%ecx
- 55b:	eb 95                	jmp    4f2 <printf+0x52>
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
+ 579:	31 c9                	xor    %ecx,%ecx
+ 57b:	eb 95                	jmp    512 <printf+0x52>
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 560:	83 ec 0c             	sub    $0xc,%esp
- 563:	b9 10 00 00 00       	mov    $0x10,%ecx
- 568:	6a 00                	push   $0x0
- 56a:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 56d:	8b 10                	mov    (%eax),%edx
- 56f:	89 f0                	mov    %esi,%eax
- 571:	e8 7a fe ff ff       	call   3f0 <printint>
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 588:	6a 00                	push   $0x0
+ 58a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 58d:	8b 10                	mov    (%eax),%edx
+ 58f:	89 f0                	mov    %esi,%eax
+ 591:	e8 7a fe ff ff       	call   410 <printint>
         ap++;
- 576:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 57a:	83 c4 10             	add    $0x10,%esp
+ 596:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 59a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57d:	31 c9                	xor    %ecx,%ecx
- 57f:	e9 6e ff ff ff       	jmp    4f2 <printf+0x52>
- 584:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	31 c9                	xor    %ecx,%ecx
+ 59f:	e9 6e ff ff ff       	jmp    512 <printf+0x52>
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 588:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 58b:	8b 10                	mov    (%eax),%edx
+ 5a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5ab:	8b 10                	mov    (%eax),%edx
         ap++;
- 58d:	83 c0 04             	add    $0x4,%eax
- 590:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5ad:	83 c0 04             	add    $0x4,%eax
+ 5b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 593:	85 d2                	test   %edx,%edx
- 595:	0f 84 8d 00 00 00    	je     628 <printf+0x188>
+ 5b3:	85 d2                	test   %edx,%edx
+ 5b5:	0f 84 8d 00 00 00    	je     648 <printf+0x188>
         while(*s != 0){
- 59b:	0f b6 02             	movzbl (%edx),%eax
+ 5bb:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 59e:	31 c9                	xor    %ecx,%ecx
+ 5be:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 5a0:	84 c0                	test   %al,%al
- 5a2:	0f 84 4a ff ff ff    	je     4f2 <printf+0x52>
- 5a8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5ab:	89 d3                	mov    %edx,%ebx
- 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 5c0:	84 c0                	test   %al,%al
+ 5c2:	0f 84 4a ff ff ff    	je     512 <printf+0x52>
+ 5c8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5cb:	89 d3                	mov    %edx,%ebx
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 5b0:	83 ec 04             	sub    $0x4,%esp
+ 5d0:	83 ec 04             	sub    $0x4,%esp
           s++;
- 5b3:	83 c3 01             	add    $0x1,%ebx
- 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5d3:	83 c3 01             	add    $0x1,%ebx
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5b9:	6a 01                	push   $0x1
- 5bb:	57                   	push   %edi
- 5bc:	56                   	push   %esi
- 5bd:	e8 a1 fd ff ff       	call   363 <write>
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	56                   	push   %esi
+ 5dd:	e8 81 fd ff ff       	call   363 <write>
         while(*s != 0){
- 5c2:	0f b6 03             	movzbl (%ebx),%eax
- 5c5:	83 c4 10             	add    $0x10,%esp
- 5c8:	84 c0                	test   %al,%al
- 5ca:	75 e4                	jne    5b0 <printf+0x110>
+ 5e2:	0f b6 03             	movzbl (%ebx),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x110>
       state = 0;
- 5cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 5cf:	31 c9                	xor    %ecx,%ecx
- 5d1:	e9 1c ff ff ff       	jmp    4f2 <printf+0x52>
- 5d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 5ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5ef:	31 c9                	xor    %ecx,%ecx
+ 5f1:	e9 1c ff ff ff       	jmp    512 <printf+0x52>
+ 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 5e0:	83 ec 0c             	sub    $0xc,%esp
- 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5e8:	6a 01                	push   $0x1
- 5ea:	e9 7b ff ff ff       	jmp    56a <printf+0xca>
- 5ef:	90                   	nop
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	e9 7b ff ff ff       	jmp    58a <printf+0xca>
+ 60f:	90                   	nop
         putc(fd, *ap);
- 5f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 5f3:	83 ec 04             	sub    $0x4,%esp
+ 613:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 5f6:	8b 00                	mov    (%eax),%eax
+ 616:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 5f8:	6a 01                	push   $0x1
- 5fa:	57                   	push   %edi
- 5fb:	56                   	push   %esi
+ 618:	6a 01                	push   $0x1
+ 61a:	57                   	push   %edi
+ 61b:	56                   	push   %esi
         putc(fd, *ap);
- 5fc:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 61c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 5ff:	e8 5f fd ff ff       	call   363 <write>
+ 61f:	e8 3f fd ff ff       	call   363 <write>
         ap++;
- 604:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 608:	83 c4 10             	add    $0x10,%esp
+ 624:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 628:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 60b:	31 c9                	xor    %ecx,%ecx
- 60d:	e9 e0 fe ff ff       	jmp    4f2 <printf+0x52>
- 612:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 62b:	31 c9                	xor    %ecx,%ecx
+ 62d:	e9 e0 fe ff ff       	jmp    512 <printf+0x52>
+ 632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 618:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 638:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 61b:	83 ec 04             	sub    $0x4,%esp
- 61e:	e9 2a ff ff ff       	jmp    54d <printf+0xad>
- 623:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 627:	90                   	nop
+ 63b:	83 ec 04             	sub    $0x4,%esp
+ 63e:	e9 2a ff ff ff       	jmp    56d <printf+0xad>
+ 643:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 647:	90                   	nop
           s = "(null)";
- 628:	ba 18 08 00 00       	mov    $0x818,%edx
+ 648:	ba 38 08 00 00       	mov    $0x838,%edx
         while(*s != 0){
- 62d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 630:	b8 28 00 00 00       	mov    $0x28,%eax
- 635:	89 d3                	mov    %edx,%ebx
- 637:	e9 74 ff ff ff       	jmp    5b0 <printf+0x110>
- 63c:	66 90                	xchg   %ax,%ax
- 63e:	66 90                	xchg   %ax,%ax
+ 64d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 650:	b8 28 00 00 00       	mov    $0x28,%eax
+ 655:	89 d3                	mov    %edx,%ebx
+ 657:	e9 74 ff ff ff       	jmp    5d0 <printf+0x110>
+ 65c:	66 90                	xchg   %ax,%ax
+ 65e:	66 90                	xchg   %ax,%ax
 
-00000640 <free>:
+00000660 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 640:	55                   	push   %ebp
+ 660:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 641:	a1 2c 0b 00 00       	mov    0xb2c,%eax
+ 661:	a1 4c 0b 00 00       	mov    0xb4c,%eax
 {
- 646:	89 e5                	mov    %esp,%ebp
- 648:	57                   	push   %edi
- 649:	56                   	push   %esi
- 64a:	53                   	push   %ebx
- 64b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 666:	89 e5                	mov    %esp,%ebp
+ 668:	57                   	push   %edi
+ 669:	56                   	push   %esi
+ 66a:	53                   	push   %ebx
+ 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 64e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 658:	89 c2                	mov    %eax,%edx
- 65a:	8b 00                	mov    (%eax),%eax
- 65c:	39 ca                	cmp    %ecx,%edx
- 65e:	73 30                	jae    690 <free+0x50>
- 660:	39 c1                	cmp    %eax,%ecx
- 662:	72 04                	jb     668 <free+0x28>
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 678:	89 c2                	mov    %eax,%edx
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	39 ca                	cmp    %ecx,%edx
+ 67e:	73 30                	jae    6b0 <free+0x50>
+ 680:	39 c1                	cmp    %eax,%ecx
+ 682:	72 04                	jb     688 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 664:	39 c2                	cmp    %eax,%edx
- 666:	72 f0                	jb     658 <free+0x18>
+ 684:	39 c2                	cmp    %eax,%edx
+ 686:	72 f0                	jb     678 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 66e:	39 f8                	cmp    %edi,%eax
- 670:	74 30                	je     6a2 <free+0x62>
+ 688:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 68b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 68e:	39 f8                	cmp    %edi,%eax
+ 690:	74 30                	je     6c2 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 672:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 692:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 675:	8b 42 04             	mov    0x4(%edx),%eax
- 678:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 67b:	39 f1                	cmp    %esi,%ecx
- 67d:	74 3a                	je     6b9 <free+0x79>
+ 695:	8b 42 04             	mov    0x4(%edx),%eax
+ 698:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 69b:	39 f1                	cmp    %esi,%ecx
+ 69d:	74 3a                	je     6d9 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 67f:	89 0a                	mov    %ecx,(%edx)
+ 69f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 681:	5b                   	pop    %ebx
+ 6a1:	5b                   	pop    %ebx
   freep = p;
- 682:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+ 6a2:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
 }
- 688:	5e                   	pop    %esi
- 689:	5f                   	pop    %edi
- 68a:	5d                   	pop    %ebp
- 68b:	c3                   	ret    
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 690:	39 c2                	cmp    %eax,%edx
- 692:	72 c4                	jb     658 <free+0x18>
- 694:	39 c1                	cmp    %eax,%ecx
- 696:	73 c0                	jae    658 <free+0x18>
+ 6b0:	39 c2                	cmp    %eax,%edx
+ 6b2:	72 c4                	jb     678 <free+0x18>
+ 6b4:	39 c1                	cmp    %eax,%ecx
+ 6b6:	73 c0                	jae    678 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 698:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 69b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 69e:	39 f8                	cmp    %edi,%eax
- 6a0:	75 d0                	jne    672 <free+0x32>
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 f8                	cmp    %edi,%eax
+ 6c0:	75 d0                	jne    692 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 6a2:	03 70 04             	add    0x4(%eax),%esi
- 6a5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 6c2:	03 70 04             	add    0x4(%eax),%esi
+ 6c5:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6a8:	8b 02                	mov    (%edx),%eax
- 6aa:	8b 00                	mov    (%eax),%eax
- 6ac:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6c8:	8b 02                	mov    (%edx),%eax
+ 6ca:	8b 00                	mov    (%eax),%eax
+ 6cc:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6af:	8b 42 04             	mov    0x4(%edx),%eax
- 6b2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6b5:	39 f1                	cmp    %esi,%ecx
- 6b7:	75 c6                	jne    67f <free+0x3f>
+ 6cf:	8b 42 04             	mov    0x4(%edx),%eax
+ 6d2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	75 c6                	jne    69f <free+0x3f>
     p->s.size += bp->s.size;
- 6b9:	03 43 fc             	add    -0x4(%ebx),%eax
+ 6d9:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 6bc:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+ 6dc:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
     p->s.size += bp->s.size;
- 6c2:	89 42 04             	mov    %eax,0x4(%edx)
+ 6e2:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 6c5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 6c8:	89 0a                	mov    %ecx,(%edx)
+ 6e5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6e8:	89 0a                	mov    %ecx,(%edx)
 }
- 6ca:	5b                   	pop    %ebx
- 6cb:	5e                   	pop    %esi
- 6cc:	5f                   	pop    %edi
- 6cd:	5d                   	pop    %ebp
- 6ce:	c3                   	ret    
- 6cf:	90                   	nop
+ 6ea:	5b                   	pop    %ebx
+ 6eb:	5e                   	pop    %esi
+ 6ec:	5f                   	pop    %edi
+ 6ed:	5d                   	pop    %ebp
+ 6ee:	c3                   	ret    
+ 6ef:	90                   	nop
 
-000006d0 <malloc>:
+000006f0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 6d0:	55                   	push   %ebp
- 6d1:	89 e5                	mov    %esp,%ebp
- 6d3:	57                   	push   %edi
- 6d4:	56                   	push   %esi
- 6d5:	53                   	push   %ebx
- 6d6:	83 ec 1c             	sub    $0x1c,%esp
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6d9:	8b 45 08             	mov    0x8(%ebp),%eax
+ 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 6dc:	8b 3d 2c 0b 00 00    	mov    0xb2c,%edi
+ 6fc:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6e2:	8d 70 07             	lea    0x7(%eax),%esi
- 6e5:	c1 ee 03             	shr    $0x3,%esi
- 6e8:	83 c6 01             	add    $0x1,%esi
+ 702:	8d 70 07             	lea    0x7(%eax),%esi
+ 705:	c1 ee 03             	shr    $0x3,%esi
+ 708:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 6eb:	85 ff                	test   %edi,%edi
- 6ed:	0f 84 9d 00 00 00    	je     790 <malloc+0xc0>
+ 70b:	85 ff                	test   %edi,%edi
+ 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f3:	8b 17                	mov    (%edi),%edx
+ 713:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 6f5:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f8:	39 f1                	cmp    %esi,%ecx
- 6fa:	73 6a                	jae    766 <malloc+0x96>
- 6fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 701:	39 de                	cmp    %ebx,%esi
- 703:	0f 43 de             	cmovae %esi,%ebx
+ 715:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 718:	39 f1                	cmp    %esi,%ecx
+ 71a:	73 6a                	jae    786 <malloc+0x96>
+ 71c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 721:	39 de                	cmp    %ebx,%esi
+ 723:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 706:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 70d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 710:	eb 17                	jmp    729 <malloc+0x59>
- 712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 726:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 72d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 730:	eb 17                	jmp    749 <malloc+0x59>
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 718:	8b 02                	mov    (%edx),%eax
+ 738:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 71a:	8b 48 04             	mov    0x4(%eax),%ecx
- 71d:	39 f1                	cmp    %esi,%ecx
- 71f:	73 4f                	jae    770 <malloc+0xa0>
+ 73a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73d:	39 f1                	cmp    %esi,%ecx
+ 73f:	73 4f                	jae    790 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 721:	8b 3d 2c 0b 00 00    	mov    0xb2c,%edi
- 727:	89 c2                	mov    %eax,%edx
- 729:	39 d7                	cmp    %edx,%edi
- 72b:	75 eb                	jne    718 <malloc+0x48>
+ 741:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 747:	89 c2                	mov    %eax,%edx
+ 749:	39 d7                	cmp    %edx,%edi
+ 74b:	75 eb                	jne    738 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 72d:	83 ec 0c             	sub    $0xc,%esp
- 730:	ff 75 e4             	push   -0x1c(%ebp)
- 733:	e8 93 fc ff ff       	call   3cb <sbrk>
+ 74d:	83 ec 0c             	sub    $0xc,%esp
+ 750:	ff 75 e4             	push   -0x1c(%ebp)
+ 753:	e8 73 fc ff ff       	call   3cb <sbrk>
   if(p == (char*)-1)
- 738:	83 c4 10             	add    $0x10,%esp
- 73b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 73e:	74 1c                	je     75c <malloc+0x8c>
+ 758:	83 c4 10             	add    $0x10,%esp
+ 75b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 75e:	74 1c                	je     77c <malloc+0x8c>
   hp->s.size = nu;
- 740:	89 58 04             	mov    %ebx,0x4(%eax)
+ 760:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 743:	83 ec 0c             	sub    $0xc,%esp
- 746:	83 c0 08             	add    $0x8,%eax
- 749:	50                   	push   %eax
- 74a:	e8 f1 fe ff ff       	call   640 <free>
+ 763:	83 ec 0c             	sub    $0xc,%esp
+ 766:	83 c0 08             	add    $0x8,%eax
+ 769:	50                   	push   %eax
+ 76a:	e8 f1 fe ff ff       	call   660 <free>
   return freep;
- 74f:	8b 15 2c 0b 00 00    	mov    0xb2c,%edx
+ 76f:	8b 15 4c 0b 00 00    	mov    0xb4c,%edx
       if((p = morecore(nunits)) == 0)
- 755:	83 c4 10             	add    $0x10,%esp
- 758:	85 d2                	test   %edx,%edx
- 75a:	75 bc                	jne    718 <malloc+0x48>
+ 775:	83 c4 10             	add    $0x10,%esp
+ 778:	85 d2                	test   %edx,%edx
+ 77a:	75 bc                	jne    738 <malloc+0x48>
         return 0;
   }
 }
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 75f:	31 c0                	xor    %eax,%eax
+ 77f:	31 c0                	xor    %eax,%eax
 }
- 761:	5b                   	pop    %ebx
- 762:	5e                   	pop    %esi
- 763:	5f                   	pop    %edi
- 764:	5d                   	pop    %ebp
- 765:	c3                   	ret    
+ 781:	5b                   	pop    %ebx
+ 782:	5e                   	pop    %esi
+ 783:	5f                   	pop    %edi
+ 784:	5d                   	pop    %ebp
+ 785:	c3                   	ret    
     if(p->s.size >= nunits){
- 766:	89 d0                	mov    %edx,%eax
- 768:	89 fa                	mov    %edi,%edx
- 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 786:	89 d0                	mov    %edx,%eax
+ 788:	89 fa                	mov    %edi,%edx
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 770:	39 ce                	cmp    %ecx,%esi
- 772:	74 4c                	je     7c0 <malloc+0xf0>
+ 790:	39 ce                	cmp    %ecx,%esi
+ 792:	74 4c                	je     7e0 <malloc+0xf0>
         p->s.size -= nunits;
- 774:	29 f1                	sub    %esi,%ecx
- 776:	89 48 04             	mov    %ecx,0x4(%eax)
+ 794:	29 f1                	sub    %esi,%ecx
+ 796:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 779:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 799:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 77c:	89 70 04             	mov    %esi,0x4(%eax)
+ 79c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 77f:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+ 79f:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
 }
- 785:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 788:	83 c0 08             	add    $0x8,%eax
+ 7a8:	83 c0 08             	add    $0x8,%eax
 }
- 78b:	5b                   	pop    %ebx
- 78c:	5e                   	pop    %esi
- 78d:	5f                   	pop    %edi
- 78e:	5d                   	pop    %ebp
- 78f:	c3                   	ret    
+ 7ab:	5b                   	pop    %ebx
+ 7ac:	5e                   	pop    %esi
+ 7ad:	5f                   	pop    %edi
+ 7ae:	5d                   	pop    %ebp
+ 7af:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 790:	c7 05 2c 0b 00 00 30 	movl   $0xb30,0xb2c
- 797:	0b 00 00 
+ 7b0:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
+ 7b7:	0b 00 00 
     base.s.size = 0;
- 79a:	bf 30 0b 00 00       	mov    $0xb30,%edi
+ 7ba:	bf 50 0b 00 00       	mov    $0xb50,%edi
     base.s.ptr = freep = prevp = &base;
- 79f:	c7 05 30 0b 00 00 30 	movl   $0xb30,0xb30
- 7a6:	0b 00 00 
+ 7bf:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
+ 7c6:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a9:	89 fa                	mov    %edi,%edx
+ 7c9:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 7ab:	c7 05 34 0b 00 00 00 	movl   $0x0,0xb34
- 7b2:	00 00 00 
+ 7cb:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
+ 7d2:	00 00 00 
     if(p->s.size >= nunits){
- 7b5:	e9 42 ff ff ff       	jmp    6fc <malloc+0x2c>
- 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7d5:	e9 42 ff ff ff       	jmp    71c <malloc+0x2c>
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 7c0:	8b 08                	mov    (%eax),%ecx
- 7c2:	89 0a                	mov    %ecx,(%edx)
- 7c4:	eb b9                	jmp    77f <malloc+0xaf>
+ 7e0:	8b 08                	mov    (%eax),%ecx
+ 7e2:	89 0a                	mov    %ecx,(%edx)
+ 7e4:	eb b9                	jmp    79f <malloc+0xaf>
Binary files xv6-public-org/init.o and xv6-public/init.o differ
diff -u xv6-public-org/init.sym xv6-public/init.sym
--- xv6-public-org/init.sym	2022-09-04 11:47:11.181867204 +0530
+++ xv6-public/init.sym	2022-09-05 23:16:36.521928502 +0530
@@ -1,19 +1,20 @@
 00000000 init.c
 00000000 ulib.c
 00000000 printf.c
-000003f0 printint
-00000878 digits.0
+00000410 printint
+00000898 digits.0
 00000000 umalloc.c
-00000b2c freep
-00000b30 base
+00000b4c freep
+00000b50 base
 000000f0 strcpy
-000004a0 printf
-00000b24 argv
+000004c0 printf
+000003f3 thread_exit
+00000b44 argv
 00000310 memmove
 0000038b mknod
 00000210 gets
 000003c3 getpid
-000006d0 malloc
+000006f0 malloc
 000003d3 sleep
 00000353 pipe
 00000363 write
@@ -27,20 +28,23 @@
 0000033b fork
 000003cb sbrk
 000003db uptime
-00000b2c __bss_start
+00000b4c __bss_start
 000001b0 memset
 00000000 main
 00000120 strcmp
 000003bb dup
 00000280 stat
-00000b2c _edata
-00000b38 _end
+00000b4c _edata
+00000b58 _end
 000003a3 link
 00000343 exit
 000002d0 atoi
+000003fb draw
 00000180 strlen
 00000383 open
 000001d0 strchr
+000003e3 thread_create
 000003ab mkdir
 0000036b close
-00000640 free
+000003eb thread_join
+00000660 free
Binary files xv6-public-org/kalloc.o and xv6-public/kalloc.o differ
Binary files xv6-public-org/kernel and xv6-public/kernel differ
diff -u xv6-public-org/kernel.asm xv6-public/kernel.asm
--- xv6-public-org/kernel.asm	2022-09-04 11:47:07.283919195 +0530
+++ xv6-public/kernel.asm	2022-09-05 23:16:26.801906992 +0530
@@ -37,7 +37,7 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc d0 54 11 80       	mov    $0x801154d0,%esp
+80100028:	bc d0 55 11 80       	mov    $0x801155d0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
@@ -74,9 +74,9 @@
 {
 80100049:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	68 a0 71 10 80       	push   $0x801071a0
+8010004c:	68 00 76 10 80       	push   $0x80107600
 80100051:	68 20 a5 10 80       	push   $0x8010a520
-80100056:	e8 75 43 00 00       	call   801043d0 <initlock>
+80100056:	e8 d5 46 00 00       	call   80104730 <initlock>
   bcache.head.next = &bcache.head;
 8010005b:	83 c4 10             	add    $0x10,%esp
 8010005e:	b8 1c ec 10 80       	mov    $0x8010ec1c,%eax
@@ -99,9 +99,9 @@
     b->prev = &bcache.head;
 8010008b:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 a7 71 10 80       	push   $0x801071a7
+80100092:	68 07 76 10 80       	push   $0x80107607
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 63 45 00 00       	call   80104600 <initsleeplock>
     bcache.head.next->prev = b;
 8010009d:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
@@ -140,7 +140,7 @@
 801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   acquire(&bcache.lock);
 801000df:	68 20 a5 10 80       	push   $0x8010a520
-801000e4:	e8 b7 44 00 00       	call   801045a0 <acquire>
+801000e4:	e8 17 48 00 00       	call   80104900 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
 801000e9:	8b 1d 70 ec 10 80    	mov    0x8010ec70,%ebx
 801000ef:	83 c4 10             	add    $0x10,%esp
@@ -187,11 +187,11 @@
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
 8010015d:	68 20 a5 10 80       	push   $0x8010a520
-80100162:	e8 d9 43 00 00       	call   80104540 <release>
+80100162:	e8 39 47 00 00       	call   801048a0 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 ce 44 00 00       	call   80104640 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -227,7 +227,7 @@
 8010019d:	c3                   	ret    
   panic("bget: no buffers");
 8010019e:	83 ec 0c             	sub    $0xc,%esp
-801001a1:	68 ae 71 10 80       	push   $0x801071ae
+801001a1:	68 0e 76 10 80       	push   $0x8010760e
 801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
 801001ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801001af:	90                   	nop
@@ -246,7 +246,7 @@
   if(!holdingsleep(&b->lock))
 801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001bd:	50                   	push   %eax
-801001be:	e8 bd 41 00 00       	call   80104380 <holdingsleep>
+801001be:	e8 1d 45 00 00       	call   801046e0 <holdingsleep>
 801001c3:	83 c4 10             	add    $0x10,%esp
 801001c6:	85 c0                	test   %eax,%eax
 801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
@@ -262,7 +262,7 @@
 801001d4:	e9 07 21 00 00       	jmp    801022e0 <iderw>
     panic("bwrite");
 801001d9:	83 ec 0c             	sub    $0xc,%esp
-801001dc:	68 bf 71 10 80       	push   $0x801071bf
+801001dc:	68 1f 76 10 80       	push   $0x8010761f
 801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
 801001e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801001ed:	8d 76 00             	lea    0x0(%esi),%esi
@@ -283,7 +283,7 @@
 801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001fb:	83 ec 0c             	sub    $0xc,%esp
 801001fe:	56                   	push   %esi
-801001ff:	e8 7c 41 00 00       	call   80104380 <holdingsleep>
+801001ff:	e8 dc 44 00 00       	call   801046e0 <holdingsleep>
 80100204:	83 c4 10             	add    $0x10,%esp
 80100207:	85 c0                	test   %eax,%eax
 80100209:	74 66                	je     80100271 <brelse+0x81>
@@ -292,11 +292,11 @@
   releasesleep(&b->lock);
 8010020b:	83 ec 0c             	sub    $0xc,%esp
 8010020e:	56                   	push   %esi
-8010020f:	e8 2c 41 00 00       	call   80104340 <releasesleep>
+8010020f:	e8 8c 44 00 00       	call   801046a0 <releasesleep>
 
   acquire(&bcache.lock);
 80100214:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010021b:	e8 80 43 00 00       	call   801045a0 <acquire>
+8010021b:	e8 e0 46 00 00       	call   80104900 <acquire>
   b->refcnt--;
 80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -337,10 +337,10 @@
 8010026a:	5e                   	pop    %esi
 8010026b:	5d                   	pop    %ebp
   release(&bcache.lock);
-8010026c:	e9 cf 42 00 00       	jmp    80104540 <release>
+8010026c:	e9 2f 46 00 00       	jmp    801048a0 <release>
     panic("brelse");
 80100271:	83 ec 0c             	sub    $0xc,%esp
-80100274:	68 c6 71 10 80       	push   $0x801071c6
+80100274:	68 26 76 10 80       	push   $0x80107626
 80100279:	e8 02 01 00 00       	call   80100380 <panic>
 8010027e:	66 90                	xchg   %ax,%ax
 
@@ -370,7 +370,7 @@
 80100294:	e8 c7 15 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
 80100299:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
-801002a0:	e8 fb 42 00 00       	call   801045a0 <acquire>
+801002a0:	e8 5b 46 00 00       	call   80104900 <acquire>
   while(n > 0){
 801002a5:	83 c4 10             	add    $0x10,%esp
 801002a8:	85 db                	test   %ebx,%ebx
@@ -390,21 +390,21 @@
 801002c0:	83 ec 08             	sub    $0x8,%esp
 801002c3:	68 20 ef 10 80       	push   $0x8010ef20
 801002c8:	68 00 ef 10 80       	push   $0x8010ef00
-801002cd:	e8 6e 3d 00 00       	call   80104040 <sleep>
+801002cd:	e8 7e 3d 00 00       	call   80104050 <sleep>
     while(input.r == input.w){
 801002d2:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
 801002d7:	83 c4 10             	add    $0x10,%esp
 801002da:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
 801002e0:	75 36                	jne    80100318 <consoleread+0x98>
       if(myproc()->killed){
-801002e2:	e8 89 36 00 00       	call   80103970 <myproc>
+801002e2:	e8 c9 36 00 00       	call   801039b0 <myproc>
 801002e7:	8b 48 24             	mov    0x24(%eax),%ecx
 801002ea:	85 c9                	test   %ecx,%ecx
 801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
         release(&cons.lock);
 801002ee:	83 ec 0c             	sub    $0xc,%esp
 801002f1:	68 20 ef 10 80       	push   $0x8010ef20
-801002f6:	e8 45 42 00 00       	call   80104540 <release>
+801002f6:	e8 a5 45 00 00       	call   801048a0 <release>
         ilock(ip);
 801002fb:	5a                   	pop    %edx
 801002fc:	ff 75 08             	push   0x8(%ebp)
@@ -448,7 +448,7 @@
   release(&cons.lock);
 80100344:	83 ec 0c             	sub    $0xc,%esp
 80100347:	68 20 ef 10 80       	push   $0x8010ef20
-8010034c:	e8 ef 41 00 00       	call   80104540 <release>
+8010034c:	e8 4f 45 00 00       	call   801048a0 <release>
   ilock(ip);
 80100351:	58                   	pop    %eax
 80100352:	ff 75 08             	push   0x8(%ebp)
@@ -500,14 +500,14 @@
 80100399:	e8 52 25 00 00       	call   801028f0 <lapicid>
 8010039e:	83 ec 08             	sub    $0x8,%esp
 801003a1:	50                   	push   %eax
-801003a2:	68 cd 71 10 80       	push   $0x801071cd
+801003a2:	68 2d 76 10 80       	push   $0x8010762d
 801003a7:	e8 f4 02 00 00       	call   801006a0 <cprintf>
   cprintf(s);
 801003ac:	58                   	pop    %eax
 801003ad:	ff 75 08             	push   0x8(%ebp)
 801003b0:	e8 eb 02 00 00       	call   801006a0 <cprintf>
   cprintf("\n");
-801003b5:	c7 04 24 f7 7a 10 80 	movl   $0x80107af7,(%esp)
+801003b5:	c7 04 24 87 7f 10 80 	movl   $0x80107f87,(%esp)
 801003bc:	e8 df 02 00 00       	call   801006a0 <cprintf>
   getcallerpcs(&s, pcs);
 801003c1:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -515,7 +515,7 @@
 801003c5:	59                   	pop    %ecx
 801003c6:	53                   	push   %ebx
 801003c7:	50                   	push   %eax
-801003c8:	e8 23 40 00 00       	call   801043f0 <getcallerpcs>
+801003c8:	e8 83 43 00 00       	call   80104750 <getcallerpcs>
   for(i=0; i<10; i++)
 801003cd:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
@@ -524,7 +524,7 @@
   for(i=0; i<10; i++)
 801003d5:	83 c3 04             	add    $0x4,%ebx
     cprintf(" %p", pcs[i]);
-801003d8:	68 e1 71 10 80       	push   $0x801071e1
+801003d8:	68 41 76 10 80       	push   $0x80107641
 801003dd:	e8 be 02 00 00       	call   801006a0 <cprintf>
   for(i=0; i<10; i++)
 801003e2:	83 c4 10             	add    $0x10,%esp
@@ -553,7 +553,7 @@
     uartputc(c);
 80100416:	83 ec 0c             	sub    $0xc,%esp
 80100419:	50                   	push   %eax
-8010041a:	e8 91 58 00 00       	call   80105cb0 <uartputc>
+8010041a:	e8 01 5d 00 00       	call   80106120 <uartputc>
 8010041f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100422:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -649,11 +649,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100500:	83 ec 0c             	sub    $0xc,%esp
 80100503:	6a 08                	push   $0x8
-80100505:	e8 a6 57 00 00       	call   80105cb0 <uartputc>
+80100505:	e8 16 5c 00 00       	call   80106120 <uartputc>
 8010050a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100511:	e8 9a 57 00 00       	call   80105cb0 <uartputc>
+80100511:	e8 0a 5c 00 00       	call   80106120 <uartputc>
 80100516:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010051d:	e8 8e 57 00 00       	call   80105cb0 <uartputc>
+8010051d:	e8 fe 5b 00 00       	call   80106120 <uartputc>
 80100522:	83 c4 10             	add    $0x10,%esp
 80100525:	e9 f8 fe ff ff       	jmp    80100422 <consputc.part.0+0x22>
 8010052a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -669,7 +669,7 @@
 80100542:	68 60 0e 00 00       	push   $0xe60
 80100547:	68 a0 80 0b 80       	push   $0x800b80a0
 8010054c:	68 00 80 0b 80       	push   $0x800b8000
-80100551:	e8 aa 41 00 00       	call   80104700 <memmove>
+80100551:	e8 0a 45 00 00       	call   80104a60 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100556:	b8 80 07 00 00       	mov    $0x780,%eax
 8010055b:	83 c4 0c             	add    $0xc,%esp
@@ -678,14 +678,14 @@
 80100562:	50                   	push   %eax
 80100563:	6a 00                	push   $0x0
 80100565:	56                   	push   %esi
-80100566:	e8 f5 40 00 00       	call   80104660 <memset>
+80100566:	e8 55 44 00 00       	call   801049c0 <memset>
   outb(CRTPORT+1, pos);
 8010056b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010056e:	83 c4 10             	add    $0x10,%esp
 80100571:	e9 20 ff ff ff       	jmp    80100496 <consputc.part.0+0x96>
     panic("pos under/overflow");
 80100576:	83 ec 0c             	sub    $0xc,%esp
-80100579:	68 e5 71 10 80       	push   $0x801071e5
+80100579:	68 45 76 10 80       	push   $0x80107645
 8010057e:	e8 fd fd ff ff       	call   80100380 <panic>
 80100583:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -711,7 +711,7 @@
 8010059f:	e8 bc 12 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
 801005a4:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
-801005ab:	e8 f0 3f 00 00       	call   801045a0 <acquire>
+801005ab:	e8 50 43 00 00       	call   80104900 <acquire>
   for(i = 0; i < n; i++)
 801005b0:	83 c4 10             	add    $0x10,%esp
 801005b3:	85 f6                	test   %esi,%esi
@@ -738,7 +738,7 @@
   release(&cons.lock);
 801005dc:	83 ec 0c             	sub    $0xc,%esp
 801005df:	68 20 ef 10 80       	push   $0x8010ef20
-801005e4:	e8 57 3f 00 00       	call   80104540 <release>
+801005e4:	e8 b7 42 00 00       	call   801048a0 <release>
   ilock(ip);
 801005e9:	58                   	pop    %eax
 801005ea:	ff 75 08             	push   0x8(%ebp)
@@ -783,7 +783,7 @@
 8010062e:	89 cf                	mov    %ecx,%edi
 80100630:	f7 75 d4             	divl   -0x2c(%ebp)
 80100633:	8d 5b 01             	lea    0x1(%ebx),%ebx
-80100636:	0f b6 92 10 72 10 80 	movzbl -0x7fef8df0(%edx),%edx
+80100636:	0f b6 92 70 76 10 80 	movzbl -0x7fef8990(%edx),%edx
   }while((x /= base) != 0);
 8010063d:	89 c1                	mov    %eax,%ecx
     buf[i++] = digits[x % base];
@@ -970,7 +970,7 @@
     acquire(&cons.lock);
 801007e0:	83 ec 0c             	sub    $0xc,%esp
 801007e3:	68 20 ef 10 80       	push   $0x8010ef20
-801007e8:	e8 b3 3d 00 00       	call   801045a0 <acquire>
+801007e8:	e8 13 41 00 00       	call   80104900 <acquire>
 801007ed:	83 c4 10             	add    $0x10,%esp
 801007f0:	e9 c4 fe ff ff       	jmp    801006b9 <cprintf+0x19>
   if(panicked){
@@ -1000,7 +1000,7 @@
 80100833:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100837:	90                   	nop
         s = "(null)";
-80100838:	bf f8 71 10 80       	mov    $0x801071f8,%edi
+80100838:	bf 58 76 10 80       	mov    $0x80107658,%edi
       for(; *s; s++)
 8010083d:	b8 28 00 00 00       	mov    $0x28,%eax
 80100842:	e9 19 ff ff ff       	jmp    80100760 <cprintf+0xc0>
@@ -1010,7 +1010,7 @@
     release(&cons.lock);
 80100853:	83 ec 0c             	sub    $0xc,%esp
 80100856:	68 20 ef 10 80       	push   $0x8010ef20
-8010085b:	e8 e0 3c 00 00       	call   80104540 <release>
+8010085b:	e8 40 40 00 00       	call   801048a0 <release>
 80100860:	83 c4 10             	add    $0x10,%esp
 }
 80100863:	e9 c9 fe ff ff       	jmp    80100731 <cprintf+0x91>
@@ -1019,7 +1019,7 @@
 8010086b:	e9 ab fe ff ff       	jmp    8010071b <cprintf+0x7b>
     panic("null fmt");
 80100870:	83 ec 0c             	sub    $0xc,%esp
-80100873:	68 ff 71 10 80       	push   $0x801071ff
+80100873:	68 5f 76 10 80       	push   $0x8010765f
 80100878:	e8 03 fb ff ff       	call   80100380 <panic>
 8010087d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -1037,7 +1037,7 @@
 8010088b:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
 8010088e:	68 20 ef 10 80       	push   $0x8010ef20
-80100893:	e8 08 3d 00 00       	call   801045a0 <acquire>
+80100893:	e8 68 40 00 00       	call   80104900 <acquire>
   while((c = getc()) >= 0){
 80100898:	83 c4 10             	add    $0x10,%esp
 8010089b:	eb 1a                	jmp    801008b7 <consoleintr+0x37>
@@ -1142,7 +1142,7 @@
   release(&cons.lock);
 801009c8:	83 ec 0c             	sub    $0xc,%esp
 801009cb:	68 20 ef 10 80       	push   $0x8010ef20
-801009d0:	e8 6b 3b 00 00       	call   80104540 <release>
+801009d0:	e8 cb 3e 00 00       	call   801048a0 <release>
   if(doprocdump) {
 801009d5:	83 c4 10             	add    $0x10,%esp
 801009d8:	85 f6                	test   %esi,%esi
@@ -1169,7 +1169,7 @@
 80100a0c:	5f                   	pop    %edi
 80100a0d:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-80100a0e:	e9 cd 37 00 00       	jmp    801041e0 <procdump>
+80100a0e:	e9 dd 37 00 00       	jmp    801041f0 <procdump>
         input.buf[input.e++ % INPUT_BUF] = c;
 80100a13:	c6 80 80 ee 10 80 0a 	movb   $0xa,-0x7fef1180(%eax)
   if(panicked){
@@ -1189,7 +1189,7 @@
 80100a3a:	a3 04 ef 10 80       	mov    %eax,0x8010ef04
           wakeup(&input.r);
 80100a3f:	68 00 ef 10 80       	push   $0x8010ef00
-80100a44:	e8 b7 36 00 00       	call   80104100 <wakeup>
+80100a44:	e8 c7 36 00 00       	call   80104110 <wakeup>
 80100a49:	83 c4 10             	add    $0x10,%esp
 80100a4c:	e9 66 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
 80100a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1205,9 +1205,9 @@
 80100a61:	89 e5                	mov    %esp,%ebp
 80100a63:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a66:	68 08 72 10 80       	push   $0x80107208
+80100a66:	68 68 76 10 80       	push   $0x80107668
 80100a6b:	68 20 ef 10 80       	push   $0x8010ef20
-80100a70:	e8 5b 39 00 00       	call   801043d0 <initlock>
+80100a70:	e8 bb 3c 00 00       	call   80104730 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1260,7 +1260,7 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100abc:	e8 af 2e 00 00       	call   80103970 <myproc>
+80100abc:	e8 ef 2e 00 00       	call   801039b0 <myproc>
 80100ac1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
@@ -1323,7 +1323,7 @@
 80100b2f:	45 4c 46 
 80100b32:	75 d2                	jne    80100b06 <exec+0x56>
   if((pgdir = setupkvm()) == 0)
-80100b34:	e8 07 63 00 00       	call   80106e40 <setupkvm>
+80100b34:	e8 77 67 00 00       	call   801072b0 <setupkvm>
 80100b39:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b3f:	85 c0                	test   %eax,%eax
 80100b41:	74 c3                	je     80100b06 <exec+0x56>
@@ -1355,7 +1355,7 @@
 80100b96:	50                   	push   %eax
 80100b97:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
 80100b9d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100ba3:	e8 b8 60 00 00       	call   80106c60 <allocuvm>
+80100ba3:	e8 28 65 00 00       	call   801070d0 <allocuvm>
 80100ba8:	83 c4 10             	add    $0x10,%esp
 80100bab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100bb1:	85 c0                	test   %eax,%eax
@@ -1371,7 +1371,7 @@
 80100bd1:	53                   	push   %ebx
 80100bd2:	50                   	push   %eax
 80100bd3:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100bd9:	e8 92 5f 00 00       	call   80106b70 <loaduvm>
+80100bd9:	e8 02 64 00 00       	call   80106fe0 <loaduvm>
 80100bde:	83 c4 20             	add    $0x20,%esp
 80100be1:	85 c0                	test   %eax,%eax
 80100be3:	78 2d                	js     80100c12 <exec+0x162>
@@ -1394,7 +1394,7 @@
     freevm(pgdir);
 80100c12:	83 ec 0c             	sub    $0xc,%esp
 80100c15:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100c1b:	e8 a0 61 00 00       	call   80106dc0 <freevm>
+80100c1b:	e8 10 66 00 00       	call   80107230 <freevm>
   if(ip){
 80100c20:	83 c4 10             	add    $0x10,%esp
 80100c23:	e9 de fe ff ff       	jmp    80100b06 <exec+0x56>
@@ -1418,7 +1418,7 @@
 80100c5a:	57                   	push   %edi
 80100c5b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c61:	57                   	push   %edi
-80100c62:	e8 f9 5f 00 00       	call   80106c60 <allocuvm>
+80100c62:	e8 69 64 00 00       	call   801070d0 <allocuvm>
 80100c67:	83 c4 10             	add    $0x10,%esp
 80100c6a:	89 c6                	mov    %eax,%esi
 80100c6c:	85 c0                	test   %eax,%eax
@@ -1434,7 +1434,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c81:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c83:	e8 58 62 00 00       	call   80106ee0 <clearpteu>
+80100c83:	e8 c8 66 00 00       	call   80107350 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c88:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c8b:	83 c4 10             	add    $0x10,%esp
@@ -1463,7 +1463,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100ccf:	83 ec 0c             	sub    $0xc,%esp
 80100cd2:	50                   	push   %eax
-80100cd3:	e8 88 3b 00 00       	call   80104860 <strlen>
+80100cd3:	e8 e8 3e 00 00       	call   80104bc0 <strlen>
 80100cd8:	29 c3                	sub    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cda:	58                   	pop    %eax
@@ -1475,14 +1475,14 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100ce4:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100ce7:	e8 74 3b 00 00       	call   80104860 <strlen>
+80100ce7:	e8 d4 3e 00 00       	call   80104bc0 <strlen>
 80100cec:	83 c0 01             	add    $0x1,%eax
 80100cef:	50                   	push   %eax
 80100cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cf3:	ff 34 b8             	push   (%eax,%edi,4)
 80100cf6:	53                   	push   %ebx
 80100cf7:	56                   	push   %esi
-80100cf8:	e8 b3 63 00 00       	call   801070b0 <copyout>
+80100cf8:	e8 23 68 00 00       	call   80107520 <copyout>
 80100cfd:	83 c4 20             	add    $0x20,%esp
 80100d00:	85 c0                	test   %eax,%eax
 80100d02:	79 ac                	jns    80100cb0 <exec+0x200>
@@ -1490,7 +1490,7 @@
     freevm(pgdir);
 80100d08:	83 ec 0c             	sub    $0xc,%esp
 80100d0b:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100d11:	e8 aa 60 00 00       	call   80106dc0 <freevm>
+80100d11:	e8 1a 65 00 00       	call   80107230 <freevm>
 80100d16:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100d19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1521,7 +1521,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d5d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d63:	e8 48 63 00 00       	call   801070b0 <copyout>
+80100d63:	e8 b8 67 00 00       	call   80107520 <copyout>
 80100d68:	83 c4 10             	add    $0x10,%esp
 80100d6b:	85 c0                	test   %eax,%eax
 80100d6d:	78 99                	js     80100d08 <exec+0x258>
@@ -1551,7 +1551,7 @@
 80100d9c:	52                   	push   %edx
 80100d9d:	83 c0 6c             	add    $0x6c,%eax
 80100da0:	50                   	push   %eax
-80100da1:	e8 7a 3a 00 00       	call   80104820 <safestrcpy>
+80100da1:	e8 da 3d 00 00       	call   80104b80 <safestrcpy>
   curproc->pgdir = pgdir;
 80100da6:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1571,10 +1571,10 @@
 80100dc7:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100dca:	89 0c 24             	mov    %ecx,(%esp)
-80100dcd:	e8 0e 5c 00 00       	call   801069e0 <switchuvm>
+80100dcd:	e8 7e 60 00 00       	call   80106e50 <switchuvm>
   freevm(oldpgdir);
 80100dd2:	89 3c 24             	mov    %edi,(%esp)
-80100dd5:	e8 e6 5f 00 00       	call   80106dc0 <freevm>
+80100dd5:	e8 56 64 00 00       	call   80107230 <freevm>
   return 0;
 80100dda:	83 c4 10             	add    $0x10,%esp
 80100ddd:	31 c0                	xor    %eax,%eax
@@ -1583,7 +1583,7 @@
 80100de4:	e8 e7 1f 00 00       	call   80102dd0 <end_op>
     cprintf("exec: fail\n");
 80100de9:	83 ec 0c             	sub    $0xc,%esp
-80100dec:	68 21 72 10 80       	push   $0x80107221
+80100dec:	68 81 76 10 80       	push   $0x80107681
 80100df1:	e8 aa f8 ff ff       	call   801006a0 <cprintf>
     return -1;
 80100df6:	83 c4 10             	add    $0x10,%esp
@@ -1606,9 +1606,9 @@
 80100e11:	89 e5                	mov    %esp,%ebp
 80100e13:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100e16:	68 2d 72 10 80       	push   $0x8010722d
+80100e16:	68 8d 76 10 80       	push   $0x8010768d
 80100e1b:	68 60 ef 10 80       	push   $0x8010ef60
-80100e20:	e8 ab 35 00 00       	call   801043d0 <initlock>
+80100e20:	e8 0b 39 00 00       	call   80104730 <initlock>
 }
 80100e25:	83 c4 10             	add    $0x10,%esp
 80100e28:	c9                   	leave  
@@ -1633,7 +1633,7 @@
 80100e39:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
 80100e3c:	68 60 ef 10 80       	push   $0x8010ef60
-80100e41:	e8 5a 37 00 00       	call   801045a0 <acquire>
+80100e41:	e8 ba 3a 00 00       	call   80104900 <acquire>
 80100e46:	83 c4 10             	add    $0x10,%esp
 80100e49:	eb 10                	jmp    80100e5b <filealloc+0x2b>
 80100e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1653,7 +1653,7 @@
 80100e65:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
 80100e6c:	68 60 ef 10 80       	push   $0x8010ef60
-80100e71:	e8 ca 36 00 00       	call   80104540 <release>
+80100e71:	e8 2a 3a 00 00       	call   801048a0 <release>
       return f;
     }
   }
@@ -1673,7 +1673,7 @@
 80100e83:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
 80100e85:	68 60 ef 10 80       	push   $0x8010ef60
-80100e8a:	e8 b1 36 00 00       	call   80104540 <release>
+80100e8a:	e8 11 3a 00 00       	call   801048a0 <release>
 }
 80100e8f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1697,7 +1697,7 @@
 80100ea7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
 80100eaa:	68 60 ef 10 80       	push   $0x8010ef60
-80100eaf:	e8 ec 36 00 00       	call   801045a0 <acquire>
+80100eaf:	e8 4c 3a 00 00       	call   80104900 <acquire>
   if(f->ref < 1)
 80100eb4:	8b 43 04             	mov    0x4(%ebx),%eax
 80100eb7:	83 c4 10             	add    $0x10,%esp
@@ -1712,7 +1712,7 @@
 80100ec4:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
 80100ec7:	68 60 ef 10 80       	push   $0x8010ef60
-80100ecc:	e8 6f 36 00 00       	call   80104540 <release>
+80100ecc:	e8 cf 39 00 00       	call   801048a0 <release>
   return f;
 }
 80100ed1:	89 d8                	mov    %ebx,%eax
@@ -1721,7 +1721,7 @@
 80100ed7:	c3                   	ret    
     panic("filedup");
 80100ed8:	83 ec 0c             	sub    $0xc,%esp
-80100edb:	68 34 72 10 80       	push   $0x80107234
+80100edb:	68 94 76 10 80       	push   $0x80107694
 80100ee0:	e8 9b f4 ff ff       	call   80100380 <panic>
 80100ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1743,7 +1743,7 @@
 
   acquire(&ftable.lock);
 80100efc:	68 60 ef 10 80       	push   $0x8010ef60
-80100f01:	e8 9a 36 00 00       	call   801045a0 <acquire>
+80100f01:	e8 fa 39 00 00       	call   80104900 <acquire>
   if(f->ref < 1)
 80100f06:	8b 53 04             	mov    0x4(%ebx),%edx
 80100f09:	83 c4 10             	add    $0x10,%esp
@@ -1776,7 +1776,7 @@
   ff = *f;
 80100f39:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f3c:	e8 ff 35 00 00       	call   80104540 <release>
+80100f3c:	e8 5f 39 00 00       	call   801048a0 <release>
 
   if(ff.type == FD_PIPE)
 80100f41:	83 c4 10             	add    $0x10,%esp
@@ -1808,7 +1808,7 @@
 80100f6c:	5f                   	pop    %edi
 80100f6d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f6e:	e9 cd 35 00 00       	jmp    80104540 <release>
+80100f6e:	e9 2d 39 00 00       	jmp    801048a0 <release>
 80100f73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f77:	90                   	nop
     begin_op();
@@ -1845,7 +1845,7 @@
 80100fb8:	c3                   	ret    
     panic("fileclose");
 80100fb9:	83 ec 0c             	sub    $0xc,%esp
-80100fbc:	68 3c 72 10 80       	push   $0x8010723c
+80100fbc:	68 9c 76 10 80       	push   $0x8010769c
 80100fc1:	e8 ba f3 ff ff       	call   80100380 <panic>
 80100fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100fcd:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1976,7 +1976,7 @@
 8010109d:	eb d7                	jmp    80101076 <fileread+0x56>
   panic("fileread");
 8010109f:	83 ec 0c             	sub    $0xc,%esp
-801010a2:	68 46 72 10 80       	push   $0x80107246
+801010a2:	68 a6 76 10 80       	push   $0x801076a6
 801010a7:	e8 d4 f2 ff ff       	call   80100380 <panic>
 801010ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2095,7 +2095,7 @@
 80101172:	75 1b                	jne    8010118f <filewrite+0xdf>
         panic("short filewrite");
 80101174:	83 ec 0c             	sub    $0xc,%esp
-80101177:	68 4f 72 10 80       	push   $0x8010724f
+80101177:	68 af 76 10 80       	push   $0x801076af
 8010117c:	e8 ff f1 ff ff       	call   80100380 <panic>
 80101181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     }
@@ -2126,7 +2126,7 @@
 801011a9:	e9 22 24 00 00       	jmp    801035d0 <pipewrite>
   panic("filewrite");
 801011ae:	83 ec 0c             	sub    $0xc,%esp
-801011b1:	68 55 72 10 80       	push   $0x80107255
+801011b1:	68 b5 76 10 80       	push   $0x801076b5
 801011b6:	e8 c5 f1 ff ff       	call   80100380 <panic>
 801011bb:	66 90                	xchg   %ax,%ax
 801011bd:	66 90                	xchg   %ax,%ax
@@ -2200,7 +2200,7 @@
 80101223:	c3                   	ret    
     panic("freeing free block");
 80101224:	83 ec 0c             	sub    $0xc,%esp
-80101227:	68 5f 72 10 80       	push   $0x8010725f
+80101227:	68 bf 76 10 80       	push   $0x801076bf
 8010122c:	e8 4f f1 ff ff       	call   80100380 <panic>
 80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2273,7 +2273,7 @@
 801012df:	77 80                	ja     80101261 <balloc+0x21>
   panic("balloc: out of blocks");
 801012e1:	83 ec 0c             	sub    $0xc,%esp
-801012e4:	68 72 72 10 80       	push   $0x80107272
+801012e4:	68 d2 76 10 80       	push   $0x801076d2
 801012e9:	e8 92 f0 ff ff       	call   80100380 <panic>
 801012ee:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2304,7 +2304,7 @@
 8010131d:	68 00 02 00 00       	push   $0x200
 80101322:	6a 00                	push   $0x0
 80101324:	50                   	push   %eax
-80101325:	e8 36 33 00 00       	call   80104660 <memset>
+80101325:	e8 96 36 00 00       	call   801049c0 <memset>
   log_write(bp);
 8010132a:	89 1c 24             	mov    %ebx,(%esp)
 8010132d:	e8 0e 1c 00 00       	call   80102f40 <log_write>
@@ -2351,7 +2351,7 @@
 80101362:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
 80101365:	68 60 f9 10 80       	push   $0x8010f960
-8010136a:	e8 31 32 00 00       	call   801045a0 <acquire>
+8010136a:	e8 91 35 00 00       	call   80104900 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010136f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2409,7 +2409,7 @@
 801013cb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
 801013d2:	68 60 f9 10 80       	push   $0x8010f960
-801013d7:	e8 64 31 00 00       	call   80104540 <release>
+801013d7:	e8 c4 34 00 00       	call   801048a0 <release>
 
   return ip;
 801013dc:	83 c4 10             	add    $0x10,%esp
@@ -2436,7 +2436,7 @@
       ip->ref++;
 80101402:	89 43 08             	mov    %eax,0x8(%ebx)
       release(&icache.lock);
-80101405:	e8 36 31 00 00       	call   80104540 <release>
+80101405:	e8 96 34 00 00       	call   801048a0 <release>
       return ip;
 8010140a:	83 c4 10             	add    $0x10,%esp
 }
@@ -2458,7 +2458,7 @@
 80101430:	e9 68 ff ff ff       	jmp    8010139d <iget+0x4d>
     panic("iget: no inodes");
 80101435:	83 ec 0c             	sub    $0xc,%esp
-80101438:	68 88 72 10 80       	push   $0x80107288
+80101438:	68 e8 76 10 80       	push   $0x801076e8
 8010143d:	e8 3e ef ff ff       	call   80100380 <panic>
 80101442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2579,7 +2579,7 @@
 80101511:	c3                   	ret    
   panic("bmap: out of range");
 80101512:	83 ec 0c             	sub    $0xc,%esp
-80101515:	68 98 72 10 80       	push   $0x80107298
+80101515:	68 f8 76 10 80       	push   $0x801076f8
 8010151a:	e8 61 ee ff ff       	call   80100380 <panic>
 8010151f:	90                   	nop
 
@@ -2604,7 +2604,7 @@
 8010153d:	6a 1c                	push   $0x1c
 8010153f:	50                   	push   %eax
 80101540:	56                   	push   %esi
-80101541:	e8 ba 31 00 00       	call   80104700 <memmove>
+80101541:	e8 1a 35 00 00       	call   80104a60 <memmove>
   brelse(bp);
 80101546:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101549:	83 c4 10             	add    $0x10,%esp
@@ -2626,20 +2626,20 @@
 80101564:	bb a0 f9 10 80       	mov    $0x8010f9a0,%ebx
 80101569:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-8010156c:	68 ab 72 10 80       	push   $0x801072ab
+8010156c:	68 0b 77 10 80       	push   $0x8010770b
 80101571:	68 60 f9 10 80       	push   $0x8010f960
-80101576:	e8 55 2e 00 00       	call   801043d0 <initlock>
+80101576:	e8 b5 31 00 00       	call   80104730 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010157b:	83 c4 10             	add    $0x10,%esp
 8010157e:	66 90                	xchg   %ax,%ax
     initsleeplock(&icache.inode[i].lock, "inode");
 80101580:	83 ec 08             	sub    $0x8,%esp
-80101583:	68 b2 72 10 80       	push   $0x801072b2
+80101583:	68 12 77 10 80       	push   $0x80107712
 80101588:	53                   	push   %ebx
   for(i = 0; i < NINODE; i++) {
 80101589:	81 c3 90 00 00 00    	add    $0x90,%ebx
     initsleeplock(&icache.inode[i].lock, "inode");
-8010158f:	e8 0c 2d 00 00       	call   801042a0 <initsleeplock>
+8010158f:	e8 6c 30 00 00       	call   80104600 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 80101594:	83 c4 10             	add    $0x10,%esp
 80101597:	81 fb c0 15 11 80    	cmp    $0x801115c0,%ebx
@@ -2658,7 +2658,7 @@
 801015b4:	6a 1c                	push   $0x1c
 801015b6:	50                   	push   %eax
 801015b7:	68 b4 15 11 80       	push   $0x801115b4
-801015bc:	e8 3f 31 00 00       	call   80104700 <memmove>
+801015bc:	e8 9f 34 00 00       	call   80104a60 <memmove>
   brelse(bp);
 801015c1:	89 1c 24             	mov    %ebx,(%esp)
 801015c4:	e8 27 ec ff ff       	call   801001f0 <brelse>
@@ -2670,7 +2670,7 @@
 801015e1:	ff 35 bc 15 11 80    	push   0x801115bc
 801015e7:	ff 35 b8 15 11 80    	push   0x801115b8
 801015ed:	ff 35 b4 15 11 80    	push   0x801115b4
-801015f3:	68 18 73 10 80       	push   $0x80107318
+801015f3:	68 78 77 10 80       	push   $0x80107778
 801015f8:	e8 a3 f0 ff ff       	call   801006a0 <cprintf>
 }
 801015fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2737,7 +2737,7 @@
 80101689:	6a 40                	push   $0x40
 8010168b:	6a 00                	push   $0x0
 8010168d:	51                   	push   %ecx
-8010168e:	e8 cd 2f 00 00       	call   80104660 <memset>
+8010168e:	e8 2d 33 00 00       	call   801049c0 <memset>
       dip->type = type;
 80101693:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101697:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2766,7 +2766,7 @@
 801016bb:	e9 90 fc ff ff       	jmp    80101350 <iget>
   panic("ialloc: no inodes");
 801016c0:	83 ec 0c             	sub    $0xc,%esp
-801016c3:	68 b8 72 10 80       	push   $0x801072b8
+801016c3:	68 18 77 10 80       	push   $0x80107718
 801016c8:	e8 b3 ec ff ff       	call   80100380 <panic>
 801016cd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2820,7 +2820,7 @@
 8010172d:	6a 34                	push   $0x34
 8010172f:	53                   	push   %ebx
 80101730:	50                   	push   %eax
-80101731:	e8 ca 2f 00 00       	call   80104700 <memmove>
+80101731:	e8 2a 33 00 00       	call   80104a60 <memmove>
   log_write(bp);
 80101736:	89 34 24             	mov    %esi,(%esp)
 80101739:	e8 02 18 00 00       	call   80102f40 <log_write>
@@ -2845,12 +2845,12 @@
 80101757:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
 8010175a:	68 60 f9 10 80       	push   $0x8010f960
-8010175f:	e8 3c 2e 00 00       	call   801045a0 <acquire>
+8010175f:	e8 9c 31 00 00       	call   80104900 <acquire>
   ip->ref++;
 80101764:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
 80101768:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-8010176f:	e8 cc 2d 00 00       	call   80104540 <release>
+8010176f:	e8 2c 31 00 00       	call   801048a0 <release>
 }
 80101774:	89 d8                	mov    %ebx,%eax
 80101776:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2876,7 +2876,7 @@
 8010179b:	83 ec 0c             	sub    $0xc,%esp
 8010179e:	8d 43 0c             	lea    0xc(%ebx),%eax
 801017a1:	50                   	push   %eax
-801017a2:	e8 39 2b 00 00       	call   801042e0 <acquiresleep>
+801017a2:	e8 99 2e 00 00       	call   80104640 <acquiresleep>
   if(ip->valid == 0){
 801017a7:	8b 43 4c             	mov    0x4c(%ebx),%eax
 801017aa:	83 c4 10             	add    $0x10,%esp
@@ -2930,7 +2930,7 @@
 80101813:	50                   	push   %eax
 80101814:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80101817:	50                   	push   %eax
-80101818:	e8 e3 2e 00 00       	call   80104700 <memmove>
+80101818:	e8 43 32 00 00       	call   80104a60 <memmove>
     brelse(bp);
 8010181d:	89 34 24             	mov    %esi,(%esp)
 80101820:	e8 cb e9 ff ff       	call   801001f0 <brelse>
@@ -2943,11 +2943,11 @@
 80101834:	0f 85 77 ff ff ff    	jne    801017b1 <ilock+0x31>
       panic("ilock: no type");
 8010183a:	83 ec 0c             	sub    $0xc,%esp
-8010183d:	68 d0 72 10 80       	push   $0x801072d0
+8010183d:	68 30 77 10 80       	push   $0x80107730
 80101842:	e8 39 eb ff ff       	call   80100380 <panic>
     panic("ilock");
 80101847:	83 ec 0c             	sub    $0xc,%esp
-8010184a:	68 ca 72 10 80       	push   $0x801072ca
+8010184a:	68 2a 77 10 80       	push   $0x8010772a
 8010184f:	e8 2c eb ff ff       	call   80100380 <panic>
 80101854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010185b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2966,7 +2966,7 @@
 8010186c:	83 ec 0c             	sub    $0xc,%esp
 8010186f:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101872:	56                   	push   %esi
-80101873:	e8 08 2b 00 00       	call   80104380 <holdingsleep>
+80101873:	e8 68 2e 00 00       	call   801046e0 <holdingsleep>
 80101878:	83 c4 10             	add    $0x10,%esp
 8010187b:	85 c0                	test   %eax,%eax
 8010187d:	74 15                	je     80101894 <iunlock+0x34>
@@ -2981,10 +2981,10 @@
 8010188d:	5e                   	pop    %esi
 8010188e:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-8010188f:	e9 ac 2a 00 00       	jmp    80104340 <releasesleep>
+8010188f:	e9 0c 2e 00 00       	jmp    801046a0 <releasesleep>
     panic("iunlock");
 80101894:	83 ec 0c             	sub    $0xc,%esp
-80101897:	68 df 72 10 80       	push   $0x801072df
+80101897:	68 3f 77 10 80       	push   $0x8010773f
 8010189c:	e8 df ea ff ff       	call   80100380 <panic>
 801018a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801018a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3002,7 +3002,7 @@
   acquiresleep(&ip->lock);
 801018bc:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018bf:	57                   	push   %edi
-801018c0:	e8 1b 2a 00 00       	call   801042e0 <acquiresleep>
+801018c0:	e8 7b 2d 00 00       	call   80104640 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018c5:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018c8:	83 c4 10             	add    $0x10,%esp
@@ -3013,10 +3013,10 @@
   releasesleep(&ip->lock);
 801018d6:	83 ec 0c             	sub    $0xc,%esp
 801018d9:	57                   	push   %edi
-801018da:	e8 61 2a 00 00       	call   80104340 <releasesleep>
+801018da:	e8 c1 2d 00 00       	call   801046a0 <releasesleep>
   acquire(&icache.lock);
 801018df:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-801018e6:	e8 b5 2c 00 00       	call   801045a0 <acquire>
+801018e6:	e8 15 30 00 00       	call   80104900 <acquire>
   ip->ref--;
 801018eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
@@ -3029,17 +3029,17 @@
 801018fe:	5f                   	pop    %edi
 801018ff:	5d                   	pop    %ebp
   release(&icache.lock);
-80101900:	e9 3b 2c 00 00       	jmp    80104540 <release>
+80101900:	e9 9b 2f 00 00       	jmp    801048a0 <release>
 80101905:	8d 76 00             	lea    0x0(%esi),%esi
     acquire(&icache.lock);
 80101908:	83 ec 0c             	sub    $0xc,%esp
 8010190b:	68 60 f9 10 80       	push   $0x8010f960
-80101910:	e8 8b 2c 00 00       	call   801045a0 <acquire>
+80101910:	e8 eb 2f 00 00       	call   80104900 <acquire>
     int r = ip->ref;
 80101915:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
 80101918:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-8010191f:	e8 1c 2c 00 00       	call   80104540 <release>
+8010191f:	e8 7c 2f 00 00       	call   801048a0 <release>
     if(r == 1){
 80101924:	83 c4 10             	add    $0x10,%esp
 80101927:	83 fe 01             	cmp    $0x1,%esi
@@ -3156,7 +3156,7 @@
 80101a1c:	83 ec 0c             	sub    $0xc,%esp
 80101a1f:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101a22:	56                   	push   %esi
-80101a23:	e8 58 29 00 00       	call   80104380 <holdingsleep>
+80101a23:	e8 b8 2c 00 00       	call   801046e0 <holdingsleep>
 80101a28:	83 c4 10             	add    $0x10,%esp
 80101a2b:	85 c0                	test   %eax,%eax
 80101a2d:	74 21                	je     80101a50 <iunlockput+0x40>
@@ -3166,7 +3166,7 @@
   releasesleep(&ip->lock);
 80101a36:	83 ec 0c             	sub    $0xc,%esp
 80101a39:	56                   	push   %esi
-80101a3a:	e8 01 29 00 00       	call   80104340 <releasesleep>
+80101a3a:	e8 61 2c 00 00       	call   801046a0 <releasesleep>
   iput(ip);
 80101a3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101a42:	83 c4 10             	add    $0x10,%esp
@@ -3179,7 +3179,7 @@
 80101a4b:	e9 60 fe ff ff       	jmp    801018b0 <iput>
     panic("iunlock");
 80101a50:	83 ec 0c             	sub    $0xc,%esp
-80101a53:	68 df 72 10 80       	push   $0x801072df
+80101a53:	68 3f 77 10 80       	push   $0x8010773f
 80101a58:	e8 23 e9 ff ff       	call   80100380 <panic>
 80101a5d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -3311,7 +3311,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b33:	50                   	push   %eax
 80101b34:	ff 75 e0             	push   -0x20(%ebp)
-80101b37:	e8 c4 2b 00 00       	call   80104700 <memmove>
+80101b37:	e8 24 2f 00 00       	call   80104a60 <memmove>
     brelse(bp);
 80101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b3f:	89 14 24             	mov    %edx,(%esp)
@@ -3443,7 +3443,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101c2f:	ff 75 dc             	push   -0x24(%ebp)
 80101c32:	50                   	push   %eax
-80101c33:	e8 c8 2a 00 00       	call   80104700 <memmove>
+80101c33:	e8 28 2e 00 00       	call   80104a60 <memmove>
     log_write(bp);
 80101c38:	89 3c 24             	mov    %edi,(%esp)
 80101c3b:	e8 00 13 00 00       	call   80102f40 <log_write>
@@ -3525,7 +3525,7 @@
 80101cc6:	6a 0e                	push   $0xe
 80101cc8:	ff 75 0c             	push   0xc(%ebp)
 80101ccb:	ff 75 08             	push   0x8(%ebp)
-80101cce:	e8 9d 2a 00 00       	call   80104770 <strncmp>
+80101cce:	e8 fd 2d 00 00       	call   80104ad0 <strncmp>
 }
 80101cd3:	c9                   	leave  
 80101cd4:	c3                   	ret    
@@ -3581,7 +3581,7 @@
 80101d27:	6a 0e                	push   $0xe
 80101d29:	50                   	push   %eax
 80101d2a:	ff 75 0c             	push   0xc(%ebp)
-80101d2d:	e8 3e 2a 00 00       	call   80104770 <strncmp>
+80101d2d:	e8 9e 2d 00 00       	call   80104ad0 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d32:	83 c4 10             	add    $0x10,%esp
@@ -3629,11 +3629,11 @@
 80101d6e:	c3                   	ret    
       panic("dirlookup read");
 80101d6f:	83 ec 0c             	sub    $0xc,%esp
-80101d72:	68 f9 72 10 80       	push   $0x801072f9
+80101d72:	68 59 77 10 80       	push   $0x80107759
 80101d77:	e8 04 e6 ff ff       	call   80100380 <panic>
     panic("dirlookup not DIR");
 80101d7c:	83 ec 0c             	sub    $0xc,%esp
-80101d7f:	68 e7 72 10 80       	push   $0x801072e7
+80101d7f:	68 47 77 10 80       	push   $0x80107747
 80101d84:	e8 f7 e5 ff ff       	call   80100380 <panic>
 80101d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3663,19 +3663,19 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101daa:	e8 c1 1b 00 00       	call   80103970 <myproc>
+80101daa:	e8 01 1c 00 00       	call   801039b0 <myproc>
   acquire(&icache.lock);
 80101daf:	83 ec 0c             	sub    $0xc,%esp
     ip = idup(myproc()->cwd);
 80101db2:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
 80101db5:	68 60 f9 10 80       	push   $0x8010f960
-80101dba:	e8 e1 27 00 00       	call   801045a0 <acquire>
+80101dba:	e8 41 2b 00 00       	call   80104900 <acquire>
   ip->ref++;
 80101dbf:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
 80101dc3:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-80101dca:	e8 71 27 00 00       	call   80104540 <release>
+80101dca:	e8 d1 2a 00 00       	call   801048a0 <release>
 80101dcf:	83 c4 10             	add    $0x10,%esp
 80101dd2:	eb 07                	jmp    80101ddb <namex+0x4b>
 80101dd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -3718,7 +3718,7 @@
 80101e22:	89 fb                	mov    %edi,%ebx
     memmove(name, s, DIRSIZ);
 80101e24:	ff 75 e4             	push   -0x1c(%ebp)
-80101e27:	e8 d4 28 00 00       	call   80104700 <memmove>
+80101e27:	e8 34 2c 00 00       	call   80104a60 <memmove>
 80101e2c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e2f:	80 3f 2f             	cmpb   $0x2f,(%edi)
@@ -3769,7 +3769,7 @@
 80101e85:	83 ec 0c             	sub    $0xc,%esp
 80101e88:	89 55 e0             	mov    %edx,-0x20(%ebp)
 80101e8b:	52                   	push   %edx
-80101e8c:	e8 ef 24 00 00       	call   80104380 <holdingsleep>
+80101e8c:	e8 4f 28 00 00       	call   801046e0 <holdingsleep>
 80101e91:	83 c4 10             	add    $0x10,%esp
 80101e94:	85 c0                	test   %eax,%eax
 80101e96:	0f 84 30 01 00 00    	je     80101fcc <namex+0x23c>
@@ -3780,7 +3780,7 @@
 80101ea7:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80101eaa:	83 ec 0c             	sub    $0xc,%esp
 80101ead:	52                   	push   %edx
-80101eae:	e8 8d 24 00 00       	call   80104340 <releasesleep>
+80101eae:	e8 ed 27 00 00       	call   801046a0 <releasesleep>
   iput(ip);
 80101eb3:	89 34 24             	mov    %esi,(%esp)
 80101eb6:	89 fe                	mov    %edi,%esi
@@ -3800,7 +3800,7 @@
 80101ed6:	89 fb                	mov    %edi,%ebx
     memmove(name, s, len);
 80101ed8:	ff 75 e4             	push   -0x1c(%ebp)
-80101edb:	e8 20 28 00 00       	call   80104700 <memmove>
+80101edb:	e8 80 2b 00 00       	call   80104a60 <memmove>
     name[len] = 0;
 80101ee0:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80101ee3:	83 c4 10             	add    $0x10,%esp
@@ -3843,7 +3843,7 @@
 80101f24:	83 ec 0c             	sub    $0xc,%esp
 80101f27:	8d 5e 0c             	lea    0xc(%esi),%ebx
 80101f2a:	53                   	push   %ebx
-80101f2b:	e8 50 24 00 00       	call   80104380 <holdingsleep>
+80101f2b:	e8 b0 27 00 00       	call   801046e0 <holdingsleep>
 80101f30:	83 c4 10             	add    $0x10,%esp
 80101f33:	85 c0                	test   %eax,%eax
 80101f35:	0f 84 91 00 00 00    	je     80101fcc <namex+0x23c>
@@ -3853,7 +3853,7 @@
   releasesleep(&ip->lock);
 80101f46:	83 ec 0c             	sub    $0xc,%esp
 80101f49:	53                   	push   %ebx
-80101f4a:	e8 f1 23 00 00       	call   80104340 <releasesleep>
+80101f4a:	e8 51 27 00 00       	call   801046a0 <releasesleep>
   iput(ip);
 80101f4f:	89 34 24             	mov    %esi,(%esp)
       return 0;
@@ -3874,7 +3874,7 @@
 80101f66:	83 ec 0c             	sub    $0xc,%esp
 80101f69:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 80101f6c:	52                   	push   %edx
-80101f6d:	e8 0e 24 00 00       	call   80104380 <holdingsleep>
+80101f6d:	e8 6e 27 00 00       	call   801046e0 <holdingsleep>
 80101f72:	83 c4 10             	add    $0x10,%esp
 80101f75:	85 c0                	test   %eax,%eax
 80101f77:	74 53                	je     80101fcc <namex+0x23c>
@@ -3890,7 +3890,7 @@
 80101f89:	83 ec 0c             	sub    $0xc,%esp
 80101f8c:	8d 5e 0c             	lea    0xc(%esi),%ebx
 80101f8f:	53                   	push   %ebx
-80101f90:	e8 eb 23 00 00       	call   80104380 <holdingsleep>
+80101f90:	e8 4b 27 00 00       	call   801046e0 <holdingsleep>
 80101f95:	83 c4 10             	add    $0x10,%esp
 80101f98:	85 c0                	test   %eax,%eax
 80101f9a:	74 30                	je     80101fcc <namex+0x23c>
@@ -3900,7 +3900,7 @@
   releasesleep(&ip->lock);
 80101fa3:	83 ec 0c             	sub    $0xc,%esp
 80101fa6:	53                   	push   %ebx
-80101fa7:	e8 94 23 00 00       	call   80104340 <releasesleep>
+80101fa7:	e8 f4 26 00 00       	call   801046a0 <releasesleep>
 }
 80101fac:	83 c4 10             	add    $0x10,%esp
 }
@@ -3923,7 +3923,7 @@
 80101fc7:	e9 2f ff ff ff       	jmp    80101efb <namex+0x16b>
     panic("iunlock");
 80101fcc:	83 ec 0c             	sub    $0xc,%esp
-80101fcf:	68 df 72 10 80       	push   $0x801072df
+80101fcf:	68 3f 77 10 80       	push   $0x8010773f
 80101fd4:	e8 a7 e3 ff ff       	call   80100380 <panic>
 80101fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3974,7 +3974,7 @@
 80102037:	6a 0e                	push   $0xe
 80102039:	ff 75 0c             	push   0xc(%ebp)
 8010203c:	50                   	push   %eax
-8010203d:	e8 7e 27 00 00       	call   801047c0 <strncpy>
+8010203d:	e8 de 2a 00 00       	call   80104b20 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80102042:	6a 10                	push   $0x10
   de.inum = inum;
@@ -4009,11 +4009,11 @@
 80102076:	eb e5                	jmp    8010205d <dirlink+0x7d>
       panic("dirlink read");
 80102078:	83 ec 0c             	sub    $0xc,%esp
-8010207b:	68 08 73 10 80       	push   $0x80107308
+8010207b:	68 68 77 10 80       	push   $0x80107768
 80102080:	e8 fb e2 ff ff       	call   80100380 <panic>
     panic("dirlink");
 80102085:	83 ec 0c             	sub    $0xc,%esp
-80102088:	68 de 78 10 80       	push   $0x801078de
+80102088:	68 6e 7d 10 80       	push   $0x80107d6e
 8010208d:	e8 ee e2 ff ff       	call   80100380 <panic>
 80102092:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4166,11 +4166,11 @@
 80102197:	c3                   	ret    
     panic("incorrect blockno");
 80102198:	83 ec 0c             	sub    $0xc,%esp
-8010219b:	68 74 73 10 80       	push   $0x80107374
+8010219b:	68 d4 77 10 80       	push   $0x801077d4
 801021a0:	e8 db e1 ff ff       	call   80100380 <panic>
     panic("idestart");
 801021a5:	83 ec 0c             	sub    $0xc,%esp
-801021a8:	68 6b 73 10 80       	push   $0x8010736b
+801021a8:	68 cb 77 10 80       	push   $0x801077cb
 801021ad:	e8 ce e1 ff ff       	call   80100380 <panic>
 801021b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801021b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4181,9 +4181,9 @@
 801021c1:	89 e5                	mov    %esp,%ebp
 801021c3:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-801021c6:	68 86 73 10 80       	push   $0x80107386
+801021c6:	68 e6 77 10 80       	push   $0x801077e6
 801021cb:	68 00 16 11 80       	push   $0x80111600
-801021d0:	e8 fb 21 00 00       	call   801043d0 <initlock>
+801021d0:	e8 5b 25 00 00       	call   80104730 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 801021d5:	58                   	pop    %eax
 801021d6:	a1 84 17 11 80       	mov    0x80111784,%eax
@@ -4248,7 +4248,7 @@
   // First queued buffer is the active request.
   acquire(&idelock);
 80102249:	68 00 16 11 80       	push   $0x80111600
-8010224e:	e8 4d 23 00 00       	call   801045a0 <acquire>
+8010224e:	e8 ad 26 00 00       	call   80104900 <acquire>
 
   if((b = idequeue) == 0){
 80102253:	8b 1d e4 15 11 80    	mov    0x801115e4,%ebx
@@ -4300,7 +4300,7 @@
 801022aa:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 801022ac:	53                   	push   %ebx
-801022ad:	e8 4e 1e 00 00       	call   80104100 <wakeup>
+801022ad:	e8 5e 1e 00 00       	call   80104110 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
@@ -4313,7 +4313,7 @@
     release(&idelock);
 801022c3:	83 ec 0c             	sub    $0xc,%esp
 801022c6:	68 00 16 11 80       	push   $0x80111600
-801022cb:	e8 70 22 00 00       	call   80104540 <release>
+801022cb:	e8 d0 25 00 00       	call   801048a0 <release>
 
   release(&idelock);
 }
@@ -4343,7 +4343,7 @@
   if(!holdingsleep(&b->lock))
 801022ea:	8d 43 0c             	lea    0xc(%ebx),%eax
 801022ed:	50                   	push   %eax
-801022ee:	e8 8d 20 00 00       	call   80104380 <holdingsleep>
+801022ee:	e8 ed 23 00 00       	call   801046e0 <holdingsleep>
 801022f3:	83 c4 10             	add    $0x10,%esp
 801022f6:	85 c0                	test   %eax,%eax
 801022f8:	0f 84 c3 00 00 00    	je     801023c1 <iderw+0xe1>
@@ -4366,7 +4366,7 @@
   acquire(&idelock);  //DOC:acquire-lock
 80102320:	83 ec 0c             	sub    $0xc,%esp
 80102323:	68 00 16 11 80       	push   $0x80111600
-80102328:	e8 73 22 00 00       	call   801045a0 <acquire>
+80102328:	e8 d3 25 00 00       	call   80104900 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
@@ -4403,7 +4403,7 @@
 80102360:	83 ec 08             	sub    $0x8,%esp
 80102363:	68 00 16 11 80       	push   $0x80111600
 80102368:	53                   	push   %ebx
-80102369:	e8 d2 1c 00 00       	call   80104040 <sleep>
+80102369:	e8 e2 1c 00 00       	call   80104050 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010236e:	8b 03                	mov    (%ebx),%eax
 80102370:	83 c4 10             	add    $0x10,%esp
@@ -4419,7 +4419,7 @@
 80102382:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102385:	c9                   	leave  
   release(&idelock);
-80102386:	e9 b5 21 00 00       	jmp    80104540 <release>
+80102386:	e9 15 25 00 00       	jmp    801048a0 <release>
 8010238b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010238f:	90                   	nop
     idestart(b);
@@ -4432,15 +4432,15 @@
 801023a5:	eb a5                	jmp    8010234c <iderw+0x6c>
     panic("iderw: ide disk 1 not present");
 801023a7:	83 ec 0c             	sub    $0xc,%esp
-801023aa:	68 b5 73 10 80       	push   $0x801073b5
+801023aa:	68 15 78 10 80       	push   $0x80107815
 801023af:	e8 cc df ff ff       	call   80100380 <panic>
     panic("iderw: nothing to do");
 801023b4:	83 ec 0c             	sub    $0xc,%esp
-801023b7:	68 a0 73 10 80       	push   $0x801073a0
+801023b7:	68 00 78 10 80       	push   $0x80107800
 801023bc:	e8 bf df ff ff       	call   80100380 <panic>
     panic("iderw: buf not locked");
 801023c1:	83 ec 0c             	sub    $0xc,%esp
-801023c4:	68 8a 73 10 80       	push   $0x8010738a
+801023c4:	68 ea 77 10 80       	push   $0x801077ea
 801023c9:	e8 b2 df ff ff       	call   80100380 <panic>
 801023ce:	66 90                	xchg   %ax,%ax
 
@@ -4488,7 +4488,7 @@
 80102415:	74 16                	je     8010242d <ioapicinit+0x5d>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 80102417:	83 ec 0c             	sub    $0xc,%esp
-8010241a:	68 d4 73 10 80       	push   $0x801073d4
+8010241a:	68 34 78 10 80       	push   $0x80107834
 8010241f:	e8 7c e2 ff ff       	call   801006a0 <cprintf>
   ioapic->reg = reg;
 80102424:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
@@ -4600,7 +4600,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 801024ca:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 801024d0:	75 76                	jne    80102548 <kfree+0x88>
-801024d2:	81 fb d0 54 11 80    	cmp    $0x801154d0,%ebx
+801024d2:	81 fb d0 55 11 80    	cmp    $0x801155d0,%ebx
 801024d8:	72 6e                	jb     80102548 <kfree+0x88>
 801024da:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 801024e0:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4613,7 +4613,7 @@
 801024ea:	68 00 10 00 00       	push   $0x1000
 801024ef:	6a 01                	push   $0x1
 801024f1:	53                   	push   %ebx
-801024f2:	e8 69 21 00 00       	call   80104660 <memset>
+801024f2:	e8 c9 24 00 00       	call   801049c0 <memset>
 
   if(kmem.use_lock)
 801024f7:	8b 15 74 16 11 80    	mov    0x80111674,%edx
@@ -4642,7 +4642,7 @@
     acquire(&kmem.lock);
 80102520:	83 ec 0c             	sub    $0xc,%esp
 80102523:	68 40 16 11 80       	push   $0x80111640
-80102528:	e8 73 20 00 00       	call   801045a0 <acquire>
+80102528:	e8 d3 23 00 00       	call   80104900 <acquire>
 8010252d:	83 c4 10             	add    $0x10,%esp
 80102530:	eb d2                	jmp    80102504 <kfree+0x44>
 80102532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -4652,10 +4652,10 @@
 8010253f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102542:	c9                   	leave  
     release(&kmem.lock);
-80102543:	e9 f8 1f 00 00       	jmp    80104540 <release>
+80102543:	e9 58 23 00 00       	jmp    801048a0 <release>
     panic("kfree");
 80102548:	83 ec 0c             	sub    $0xc,%esp
-8010254b:	68 06 74 10 80       	push   $0x80107406
+8010254b:	68 66 78 10 80       	push   $0x80107866
 80102550:	e8 2b de ff ff       	call   80100380 <panic>
 80102555:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010255c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4750,9 +4750,9 @@
 80102615:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 80102618:	83 ec 08             	sub    $0x8,%esp
-8010261b:	68 0c 74 10 80       	push   $0x8010740c
+8010261b:	68 6c 78 10 80       	push   $0x8010786c
 80102620:	68 40 16 11 80       	push   $0x80111640
-80102625:	e8 a6 1d 00 00       	call   801043d0 <initlock>
+80102625:	e8 06 21 00 00       	call   80104730 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010262a:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
@@ -4822,7 +4822,7 @@
 801026ab:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
 801026ae:	68 40 16 11 80       	push   $0x80111640
-801026b3:	e8 e8 1e 00 00       	call   801045a0 <acquire>
+801026b3:	e8 48 22 00 00       	call   80104900 <acquire>
   r = kmem.freelist;
 801026b8:	a1 78 16 11 80       	mov    0x80111678,%eax
   if(kmem.use_lock)
@@ -4841,7 +4841,7 @@
 801026d6:	83 ec 0c             	sub    $0xc,%esp
 801026d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
 801026dc:	68 40 16 11 80       	push   $0x80111640
-801026e1:	e8 5a 1e 00 00       	call   80104540 <release>
+801026e1:	e8 ba 21 00 00       	call   801048a0 <release>
   return (char*)r;
 801026e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4904,9 +4904,9 @@
   }
 
   shift |= shiftcode[data];
-8010272b:	0f b6 91 40 75 10 80 	movzbl -0x7fef8ac0(%ecx),%edx
+8010272b:	0f b6 91 a0 79 10 80 	movzbl -0x7fef8660(%ecx),%edx
   shift ^= togglecode[data];
-80102732:	0f b6 81 40 74 10 80 	movzbl -0x7fef8bc0(%ecx),%eax
+80102732:	0f b6 81 a0 78 10 80 	movzbl -0x7fef8760(%ecx),%eax
   shift |= shiftcode[data];
 80102739:	09 da                	or     %ebx,%edx
   shift ^= togglecode[data];
@@ -4920,7 +4920,7 @@
   if(shift & CAPSLOCK){
 80102748:	83 e2 08             	and    $0x8,%edx
   c = charcode[shift & (CTL | SHIFT)][data];
-8010274b:	8b 04 85 20 74 10 80 	mov    -0x7fef8be0(,%eax,4),%eax
+8010274b:	8b 04 85 80 78 10 80 	mov    -0x7fef8780(,%eax,4),%eax
 80102752:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
   if(shift & CAPSLOCK){
 80102756:	74 0b                	je     80102763 <kbdgetc+0x73>
@@ -4955,7 +4955,7 @@
 80102783:	85 d2                	test   %edx,%edx
 80102785:	0f 44 c8             	cmove  %eax,%ecx
     shift &= ~(shiftcode[data] | E0ESC);
-80102788:	0f b6 81 40 75 10 80 	movzbl -0x7fef8ac0(%ecx),%eax
+80102788:	0f b6 81 a0 79 10 80 	movzbl -0x7fef8660(%ecx),%eax
 8010278f:	83 c8 40             	or     $0x40,%eax
 80102792:	0f b6 c0             	movzbl %al,%eax
 80102795:	f7 d0                	not    %eax
@@ -5441,7 +5441,7 @@
 80102af2:	50                   	push   %eax
 80102af3:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102af6:	50                   	push   %eax
-80102af7:	e8 b4 1b 00 00       	call   801046b0 <memcmp>
+80102af7:	e8 14 1f 00 00       	call   80104a10 <memcmp>
 80102afc:	83 c4 10             	add    $0x10,%esp
 80102aff:	85 c0                	test   %eax,%eax
 80102b01:	0f 85 f1 fe ff ff    	jne    801029f8 <cmostime+0x28>
@@ -5580,7 +5580,7 @@
 80102c1f:	50                   	push   %eax
 80102c20:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102c23:	50                   	push   %eax
-80102c24:	e8 d7 1a 00 00       	call   80104700 <memmove>
+80102c24:	e8 37 1e 00 00       	call   80104a60 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102c29:	89 1c 24             	mov    %ebx,(%esp)
 80102c2c:	e8 7f d5 ff ff       	call   801001b0 <bwrite>
@@ -5668,9 +5668,9 @@
 80102cc4:	83 ec 2c             	sub    $0x2c,%esp
 80102cc7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102cca:	68 40 76 10 80       	push   $0x80107640
+80102cca:	68 a0 7a 10 80       	push   $0x80107aa0
 80102ccf:	68 a0 16 11 80       	push   $0x801116a0
-80102cd4:	e8 f7 16 00 00       	call   801043d0 <initlock>
+80102cd4:	e8 57 1a 00 00       	call   80104730 <initlock>
   readsb(dev, &sb);
 80102cd9:	58                   	pop    %eax
 80102cda:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5749,7 +5749,7 @@
 80102d63:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
 80102d66:	68 a0 16 11 80       	push   $0x801116a0
-80102d6b:	e8 30 18 00 00       	call   801045a0 <acquire>
+80102d6b:	e8 90 1b 00 00       	call   80104900 <acquire>
 80102d70:	83 c4 10             	add    $0x10,%esp
 80102d73:	eb 18                	jmp    80102d8d <begin_op+0x2d>
 80102d75:	8d 76 00             	lea    0x0(%esi),%esi
@@ -5759,7 +5759,7 @@
 80102d78:	83 ec 08             	sub    $0x8,%esp
 80102d7b:	68 a0 16 11 80       	push   $0x801116a0
 80102d80:	68 a0 16 11 80       	push   $0x801116a0
-80102d85:	e8 b6 12 00 00       	call   80104040 <sleep>
+80102d85:	e8 c6 12 00 00       	call   80104050 <sleep>
 80102d8a:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
 80102d8d:	a1 e0 16 11 80       	mov    0x801116e0,%eax
@@ -5783,7 +5783,7 @@
 80102db2:	a3 dc 16 11 80       	mov    %eax,0x801116dc
       release(&log.lock);
 80102db7:	68 a0 16 11 80       	push   $0x801116a0
-80102dbc:	e8 7f 17 00 00       	call   80104540 <release>
+80102dbc:	e8 df 1a 00 00       	call   801048a0 <release>
       break;
     }
   }
@@ -5811,7 +5811,7 @@
 
   acquire(&log.lock);
 80102dd9:	68 a0 16 11 80       	push   $0x801116a0
-80102dde:	e8 bd 17 00 00       	call   801045a0 <acquire>
+80102dde:	e8 1d 1b 00 00       	call   80104900 <acquire>
   log.outstanding -= 1;
 80102de3:	a1 dc 16 11 80       	mov    0x801116dc,%eax
   if(log.committing)
@@ -5839,7 +5839,7 @@
   release(&log.lock);
 80102e14:	83 ec 0c             	sub    $0xc,%esp
 80102e17:	68 a0 16 11 80       	push   $0x801116a0
-80102e1c:	e8 1f 17 00 00       	call   80104540 <release>
+80102e1c:	e8 7f 1a 00 00       	call   801048a0 <release>
 }
 
 static void
@@ -5853,17 +5853,17 @@
     acquire(&log.lock);
 80102e2e:	83 ec 0c             	sub    $0xc,%esp
 80102e31:	68 a0 16 11 80       	push   $0x801116a0
-80102e36:	e8 65 17 00 00       	call   801045a0 <acquire>
+80102e36:	e8 c5 1a 00 00       	call   80104900 <acquire>
     wakeup(&log);
 80102e3b:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
     log.committing = 0;
 80102e42:	c7 05 e0 16 11 80 00 	movl   $0x0,0x801116e0
 80102e49:	00 00 00 
     wakeup(&log);
-80102e4c:	e8 af 12 00 00       	call   80104100 <wakeup>
+80102e4c:	e8 bf 12 00 00       	call   80104110 <wakeup>
     release(&log.lock);
 80102e51:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
-80102e58:	e8 e3 16 00 00       	call   80104540 <release>
+80102e58:	e8 43 1a 00 00       	call   801048a0 <release>
 80102e5d:	83 c4 10             	add    $0x10,%esp
 }
 80102e60:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5902,7 +5902,7 @@
 80102eaf:	50                   	push   %eax
 80102eb0:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102eb3:	50                   	push   %eax
-80102eb4:	e8 47 18 00 00       	call   80104700 <memmove>
+80102eb4:	e8 a7 1b 00 00       	call   80104a60 <memmove>
     bwrite(to);  // write the log
 80102eb9:	89 34 24             	mov    %esi,(%esp)
 80102ebc:	e8 ef d2 ff ff       	call   801001b0 <bwrite>
@@ -5931,10 +5931,10 @@
     wakeup(&log);
 80102f00:	83 ec 0c             	sub    $0xc,%esp
 80102f03:	68 a0 16 11 80       	push   $0x801116a0
-80102f08:	e8 f3 11 00 00       	call   80104100 <wakeup>
+80102f08:	e8 03 12 00 00       	call   80104110 <wakeup>
   release(&log.lock);
 80102f0d:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
-80102f14:	e8 27 16 00 00       	call   80104540 <release>
+80102f14:	e8 87 19 00 00       	call   801048a0 <release>
 80102f19:	83 c4 10             	add    $0x10,%esp
 }
 80102f1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5945,7 +5945,7 @@
 80102f23:	c3                   	ret    
     panic("log.committing");
 80102f24:	83 ec 0c             	sub    $0xc,%esp
-80102f27:	68 44 76 10 80       	push   $0x80107644
+80102f27:	68 a4 7a 10 80       	push   $0x80107aa4
 80102f2c:	e8 4f d4 ff ff       	call   80100380 <panic>
 80102f31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5985,7 +5985,7 @@
   acquire(&log.lock);
 80102f6e:	83 ec 0c             	sub    $0xc,%esp
 80102f71:	68 a0 16 11 80       	push   $0x801116a0
-80102f76:	e8 25 16 00 00       	call   801045a0 <acquire>
+80102f76:	e8 85 19 00 00       	call   80104900 <acquire>
   for (i = 0; i < log.lh.n; i++) {
 80102f7b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
 80102f81:	83 c4 10             	add    $0x10,%esp
@@ -6019,7 +6019,7 @@
 }
 80102fb4:	c9                   	leave  
   release(&log.lock);
-80102fb5:	e9 86 15 00 00       	jmp    80104540 <release>
+80102fb5:	e9 e6 18 00 00       	jmp    801048a0 <release>
 80102fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
 80102fc0:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
@@ -6035,11 +6035,11 @@
 80102fdc:	eb e9                	jmp    80102fc7 <log_write+0x87>
     panic("too big a transaction");
 80102fde:	83 ec 0c             	sub    $0xc,%esp
-80102fe1:	68 53 76 10 80       	push   $0x80107653
+80102fe1:	68 b3 7a 10 80       	push   $0x80107ab3
 80102fe6:	e8 95 d3 ff ff       	call   80100380 <panic>
     panic("log_write outside of trans");
 80102feb:	83 ec 0c             	sub    $0xc,%esp
-80102fee:	68 69 76 10 80       	push   $0x80107669
+80102fee:	68 c9 7a 10 80       	push   $0x80107ac9
 80102ff3:	e8 88 d3 ff ff       	call   80100380 <panic>
 80102ff8:	66 90                	xchg   %ax,%ax
 80102ffa:	66 90                	xchg   %ax,%ax
@@ -6058,18 +6058,18 @@
 80103003:	53                   	push   %ebx
 80103004:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80103007:	e8 44 09 00 00       	call   80103950 <cpuid>
+80103007:	e8 84 09 00 00       	call   80103990 <cpuid>
 8010300c:	89 c3                	mov    %eax,%ebx
-8010300e:	e8 3d 09 00 00       	call   80103950 <cpuid>
+8010300e:	e8 7d 09 00 00       	call   80103990 <cpuid>
 80103013:	83 ec 04             	sub    $0x4,%esp
 80103016:	53                   	push   %ebx
 80103017:	50                   	push   %eax
-80103018:	68 84 76 10 80       	push   $0x80107684
+80103018:	68 e4 7a 10 80       	push   $0x80107ae4
 8010301d:	e8 7e d6 ff ff       	call   801006a0 <cprintf>
   idtinit();       // load idt register
-80103022:	e8 b9 28 00 00       	call   801058e0 <idtinit>
+80103022:	e8 29 2d 00 00       	call   80105d50 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103027:	e8 c4 08 00 00       	call   801038f0 <mycpu>
+80103027:	e8 04 09 00 00       	call   80103930 <mycpu>
 8010302c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
@@ -6080,7 +6080,7 @@
 8010302e:	b8 01 00 00 00       	mov    $0x1,%eax
 80103033:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010303a:	e8 f1 0b 00 00       	call   80103c30 <scheduler>
+8010303a:	e8 31 0c 00 00       	call   80103c70 <scheduler>
 8010303f:	90                   	nop
 
 80103040 <mpenter>:
@@ -6089,9 +6089,9 @@
 80103041:	89 e5                	mov    %esp,%ebp
 80103043:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80103046:	e8 85 39 00 00       	call   801069d0 <switchkvm>
+80103046:	e8 f5 3d 00 00       	call   80106e40 <switchkvm>
   seginit();
-8010304b:	e8 f0 38 00 00       	call   80106940 <seginit>
+8010304b:	e8 60 3d 00 00       	call   80106db0 <seginit>
   lapicinit();
 80103050:	e8 9b f7 ff ff       	call   801027f0 <lapicinit>
   mpmain();
@@ -6112,16 +6112,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 8010306f:	83 ec 08             	sub    $0x8,%esp
 80103072:	68 00 00 40 80       	push   $0x80400000
-80103077:	68 d0 54 11 80       	push   $0x801154d0
+80103077:	68 d0 55 11 80       	push   $0x801155d0
 8010307c:	e8 8f f5 ff ff       	call   80102610 <kinit1>
   kvmalloc();      // kernel page table
-80103081:	e8 3a 3e 00 00       	call   80106ec0 <kvmalloc>
+80103081:	e8 aa 42 00 00       	call   80107330 <kvmalloc>
   mpinit();        // detect other processors
 80103086:	e8 85 01 00 00       	call   80103210 <mpinit>
   lapicinit();     // interrupt controller
 8010308b:	e8 60 f7 ff ff       	call   801027f0 <lapicinit>
   seginit();       // segment descriptors
-80103090:	e8 ab 38 00 00       	call   80106940 <seginit>
+80103090:	e8 1b 3d 00 00       	call   80106db0 <seginit>
   picinit();       // disable pic
 80103095:	e8 76 03 00 00       	call   80103410 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6129,11 +6129,11 @@
   consoleinit();   // console hardware
 8010309f:	e8 bc d9 ff ff       	call   80100a60 <consoleinit>
   uartinit();      // serial port
-801030a4:	e8 27 2b 00 00       	call   80105bd0 <uartinit>
+801030a4:	e8 97 2f 00 00       	call   80106040 <uartinit>
   pinit();         // process table
-801030a9:	e8 22 08 00 00       	call   801038d0 <pinit>
+801030a9:	e8 62 08 00 00       	call   80103910 <pinit>
   tvinit();        // trap vectors
-801030ae:	e8 ad 27 00 00       	call   80105860 <tvinit>
+801030ae:	e8 1d 2c 00 00       	call   80105cd0 <tvinit>
   binit();         // buffer cache
 801030b3:	e8 88 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6150,7 +6150,7 @@
 801030c5:	68 8a 00 00 00       	push   $0x8a
 801030ca:	68 8c a4 10 80       	push   $0x8010a48c
 801030cf:	68 00 70 00 80       	push   $0x80007000
-801030d4:	e8 27 16 00 00       	call   80104700 <memmove>
+801030d4:	e8 87 19 00 00       	call   80104a60 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030d9:	83 c4 10             	add    $0x10,%esp
@@ -6169,7 +6169,7 @@
 80103115:	39 c3                	cmp    %eax,%ebx
 80103117:	73 57                	jae    80103170 <main+0x110>
     if(c == mycpu())  // We've started already.
-80103119:	e8 d2 07 00 00       	call   801038f0 <mycpu>
+80103119:	e8 12 08 00 00       	call   80103930 <mycpu>
 8010311e:	39 c3                	cmp    %eax,%ebx
 80103120:	74 de                	je     80103100 <main+0xa0>
       continue;
@@ -6215,7 +6215,7 @@
 80103178:	68 00 00 40 80       	push   $0x80400000
 8010317d:	e8 2e f4 ff ff       	call   801025b0 <kinit2>
   userinit();      // first user process
-80103182:	e8 19 08 00 00       	call   801039a0 <userinit>
+80103182:	e8 59 08 00 00       	call   801039e0 <userinit>
   mpmain();        // finish this processor's setup
 80103187:	e8 74 fe ff ff       	call   80103000 <mpmain>
 8010318c:	66 90                	xchg   %ax,%ax
@@ -6255,9 +6255,9 @@
 801031b6:	83 ec 04             	sub    $0x4,%esp
 801031b9:	8d 7e 10             	lea    0x10(%esi),%edi
 801031bc:	6a 04                	push   $0x4
-801031be:	68 98 76 10 80       	push   $0x80107698
+801031be:	68 f8 7a 10 80       	push   $0x80107af8
 801031c3:	56                   	push   %esi
-801031c4:	e8 e7 14 00 00       	call   801046b0 <memcmp>
+801031c4:	e8 47 18 00 00       	call   80104a10 <memcmp>
 801031c9:	83 c4 10             	add    $0x10,%esp
 801031cc:	85 c0                	test   %eax,%eax
 801031ce:	75 e0                	jne    801031b0 <mpsearch1+0x20>
@@ -6344,12 +6344,12 @@
 8010326e:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103274:	6a 04                	push   $0x4
-80103276:	68 9d 76 10 80       	push   $0x8010769d
+80103276:	68 fd 7a 10 80       	push   $0x80107afd
 8010327b:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 8010327c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-8010327f:	e8 2c 14 00 00       	call   801046b0 <memcmp>
+8010327f:	e8 8c 17 00 00       	call   80104a10 <memcmp>
 80103284:	83 c4 10             	add    $0x10,%esp
 80103287:	85 c0                	test   %eax,%eax
 80103289:	0f 85 01 01 00 00    	jne    80103390 <mpinit+0x180>
@@ -6490,7 +6490,7 @@
 8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 80103390:	83 ec 0c             	sub    $0xc,%esp
-80103393:	68 a2 76 10 80       	push   $0x801076a2
+80103393:	68 02 7b 10 80       	push   $0x80107b02
 80103398:	e8 e3 cf ff ff       	call   80100380 <panic>
 8010339d:	8d 76 00             	lea    0x0(%esi),%esi
 {
@@ -6506,9 +6506,9 @@
 801033ba:	83 ec 04             	sub    $0x4,%esp
 801033bd:	8d 73 10             	lea    0x10(%ebx),%esi
 801033c0:	6a 04                	push   $0x4
-801033c2:	68 98 76 10 80       	push   $0x80107698
+801033c2:	68 f8 7a 10 80       	push   $0x80107af8
 801033c7:	53                   	push   %ebx
-801033c8:	e8 e3 12 00 00       	call   801046b0 <memcmp>
+801033c8:	e8 43 16 00 00       	call   80104a10 <memcmp>
 801033cd:	83 c4 10             	add    $0x10,%esp
 801033d0:	85 c0                	test   %eax,%eax
 801033d2:	75 dc                	jne    801033b0 <mpinit+0x1a0>
@@ -6530,7 +6530,7 @@
 801033f0:	e9 6b fe ff ff       	jmp    80103260 <mpinit+0x50>
     panic("Didn't find a suitable machine");
 801033f5:	83 ec 0c             	sub    $0xc,%esp
-801033f8:	68 bc 76 10 80       	push   $0x801076bc
+801033f8:	68 1c 7b 10 80       	push   $0x80107b1c
 801033fd:	e8 7e cf ff ff       	call   80100380 <panic>
 80103402:	66 90                	xchg   %ax,%ax
 80103404:	66 90                	xchg   %ax,%ax
@@ -6616,9 +6616,9 @@
 80103499:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 801034a0:	00 00 00 
   initlock(&p->lock, "pipe");
-801034a3:	68 db 76 10 80       	push   $0x801076db
+801034a3:	68 3b 7b 10 80       	push   $0x80107b3b
 801034a8:	50                   	push   %eax
-801034a9:	e8 22 0f 00 00       	call   801043d0 <initlock>
+801034a9:	e8 82 12 00 00       	call   80104730 <initlock>
   (*f0)->type = FD_PIPE;
 801034ae:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6716,7 +6716,7 @@
   acquire(&p->lock);
 8010353b:	83 ec 0c             	sub    $0xc,%esp
 8010353e:	53                   	push   %ebx
-8010353f:	e8 5c 10 00 00       	call   801045a0 <acquire>
+8010353f:	e8 bc 13 00 00       	call   80104900 <acquire>
   if(writable){
 80103544:	83 c4 10             	add    $0x10,%esp
 80103547:	85 f6                	test   %esi,%esi
@@ -6730,7 +6730,7 @@
 8010355b:	00 00 00 
     wakeup(&p->nread);
 8010355e:	50                   	push   %eax
-8010355f:	e8 9c 0b 00 00       	call   80104100 <wakeup>
+8010355f:	e8 ac 0b 00 00       	call   80104110 <wakeup>
 80103564:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
@@ -6754,12 +6754,12 @@
 80103582:	5e                   	pop    %esi
 80103583:	5d                   	pop    %ebp
     release(&p->lock);
-80103584:	e9 b7 0f 00 00       	jmp    80104540 <release>
+80103584:	e9 17 13 00 00       	jmp    801048a0 <release>
 80103589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     release(&p->lock);
 80103590:	83 ec 0c             	sub    $0xc,%esp
 80103593:	53                   	push   %ebx
-80103594:	e8 a7 0f 00 00       	call   80104540 <release>
+80103594:	e8 07 13 00 00       	call   801048a0 <release>
     kfree((char*)p);
 80103599:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010359c:	83 c4 10             	add    $0x10,%esp
@@ -6779,7 +6779,7 @@
 801035c0:	00 00 00 
     wakeup(&p->nwrite);
 801035c3:	50                   	push   %eax
-801035c4:	e8 37 0b 00 00       	call   80104100 <wakeup>
+801035c4:	e8 47 0b 00 00       	call   80104110 <wakeup>
 801035c9:	83 c4 10             	add    $0x10,%esp
 801035cc:	eb 99                	jmp    80103567 <pipeclose+0x37>
 801035ce:	66 90                	xchg   %ax,%ax
@@ -6801,7 +6801,7 @@
 
   acquire(&p->lock);
 801035dc:	53                   	push   %ebx
-801035dd:	e8 be 0f 00 00       	call   801045a0 <acquire>
+801035dd:	e8 1e 13 00 00       	call   80104900 <acquire>
   for(i = 0; i < n; i++){
 801035e2:	8b 45 10             	mov    0x10(%ebp),%eax
 801035e5:	83 c4 10             	add    $0x10,%esp
@@ -6831,20 +6831,20 @@
 8010361f:	eb 67                	jmp    80103688 <pipewrite+0xb8>
 80103621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->readopen == 0 || myproc()->killed){
-80103628:	e8 43 03 00 00       	call   80103970 <myproc>
+80103628:	e8 83 03 00 00       	call   801039b0 <myproc>
 8010362d:	8b 48 24             	mov    0x24(%eax),%ecx
 80103630:	85 c9                	test   %ecx,%ecx
 80103632:	75 34                	jne    80103668 <pipewrite+0x98>
       wakeup(&p->nread);
 80103634:	83 ec 0c             	sub    $0xc,%esp
 80103637:	57                   	push   %edi
-80103638:	e8 c3 0a 00 00       	call   80104100 <wakeup>
+80103638:	e8 d3 0a 00 00       	call   80104110 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 8010363d:	58                   	pop    %eax
 8010363e:	5a                   	pop    %edx
 8010363f:	53                   	push   %ebx
 80103640:	56                   	push   %esi
-80103641:	e8 fa 09 00 00       	call   80104040 <sleep>
+80103641:	e8 0a 0a 00 00       	call   80104050 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103646:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 8010364c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6859,7 +6859,7 @@
         release(&p->lock);
 80103668:	83 ec 0c             	sub    $0xc,%esp
 8010366b:	53                   	push   %ebx
-8010366c:	e8 cf 0e 00 00       	call   80104540 <release>
+8010366c:	e8 2f 12 00 00       	call   801048a0 <release>
         return -1;
 80103671:	83 c4 10             	add    $0x10,%esp
 80103674:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6894,10 +6894,10 @@
 801036b0:	83 ec 0c             	sub    $0xc,%esp
 801036b3:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 801036b9:	50                   	push   %eax
-801036ba:	e8 41 0a 00 00       	call   80104100 <wakeup>
+801036ba:	e8 51 0a 00 00       	call   80104110 <wakeup>
   release(&p->lock);
 801036bf:	89 1c 24             	mov    %ebx,(%esp)
-801036c2:	e8 79 0e 00 00       	call   80104540 <release>
+801036c2:	e8 d9 11 00 00       	call   801048a0 <release>
   return n;
 801036c7:	8b 45 10             	mov    0x10(%ebp),%eax
 801036ca:	83 c4 10             	add    $0x10,%esp
@@ -6922,7 +6922,7 @@
   acquire(&p->lock);
 801036df:	56                   	push   %esi
 801036e0:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036e6:	e8 b5 0e 00 00       	call   801045a0 <acquire>
+801036e6:	e8 15 12 00 00       	call   80104900 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036eb:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036f1:	83 c4 10             	add    $0x10,%esp
@@ -6931,7 +6931,7 @@
 801036fc:	eb 37                	jmp    80103735 <piperead+0x65>
 801036fe:	66 90                	xchg   %ax,%ax
     if(myproc()->killed){
-80103700:	e8 6b 02 00 00       	call   80103970 <myproc>
+80103700:	e8 ab 02 00 00       	call   801039b0 <myproc>
 80103705:	8b 48 24             	mov    0x24(%eax),%ecx
 80103708:	85 c9                	test   %ecx,%ecx
 8010370a:	0f 85 80 00 00 00    	jne    80103790 <piperead+0xc0>
@@ -6942,7 +6942,7 @@
 80103710:	83 ec 08             	sub    $0x8,%esp
 80103713:	56                   	push   %esi
 80103714:	53                   	push   %ebx
-80103715:	e8 26 09 00 00       	call   80104040 <sleep>
+80103715:	e8 36 09 00 00       	call   80104050 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 8010371a:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
 80103720:	83 c4 10             	add    $0x10,%esp
@@ -6979,10 +6979,10 @@
 8010376c:	83 ec 0c             	sub    $0xc,%esp
 8010376f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 80103775:	50                   	push   %eax
-80103776:	e8 85 09 00 00       	call   80104100 <wakeup>
+80103776:	e8 95 09 00 00       	call   80104110 <wakeup>
   release(&p->lock);
 8010377b:	89 34 24             	mov    %esi,(%esp)
-8010377e:	e8 bd 0d 00 00       	call   80104540 <release>
+8010377e:	e8 1d 11 00 00       	call   801048a0 <release>
   return i;
 80103783:	83 c4 10             	add    $0x10,%esp
 }
@@ -6999,7 +6999,7 @@
 80103793:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103798:	56                   	push   %esi
-80103799:	e8 a2 0d 00 00       	call   80104540 <release>
+80103799:	e8 02 11 00 00       	call   801048a0 <release>
       return -1;
 8010379e:	83 c4 10             	add    $0x10,%esp
 }
@@ -7014,8638 +7014,9145 @@
 801037ad:	66 90                	xchg   %ax,%ax
 801037af:	90                   	nop
 
-801037b0 <allocproc>:
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-801037b0:	55                   	push   %ebp
-801037b1:	89 e5                	mov    %esp,%ebp
-801037b3:	53                   	push   %ebx
+801037b0 <wakeup1>:
+static void
+wakeup1(void *chan)
+{
   struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b4:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+801037b0:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
+801037b5:	eb 14                	jmp    801037cb <wakeup1+0x1b>
+801037b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801037be:	66 90                	xchg   %ax,%ax
+801037c0:	83 ea 80             	sub    $0xffffff80,%edx
+801037c3:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
+801037c9:	74 1d                	je     801037e8 <wakeup1+0x38>
+    if(p->state == SLEEPING && p->chan == chan)
+801037cb:	83 7a 0c 02          	cmpl   $0x2,0xc(%edx)
+801037cf:	75 ef                	jne    801037c0 <wakeup1+0x10>
+801037d1:	39 42 20             	cmp    %eax,0x20(%edx)
+801037d4:	75 ea                	jne    801037c0 <wakeup1+0x10>
+      p->state = RUNNABLE;
+801037d6:	c7 42 0c 03 00 00 00 	movl   $0x3,0xc(%edx)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801037dd:	83 ea 80             	sub    $0xffffff80,%edx
+801037e0:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
+801037e6:	75 e3                	jne    801037cb <wakeup1+0x1b>
+}
+801037e8:	c3                   	ret    
+801037e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801037f0 <allocproc>:
+{
+801037f0:	55                   	push   %ebp
+801037f1:	89 e5                	mov    %esp,%ebp
+801037f3:	53                   	push   %ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801037f4:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
 {
-801037b9:	83 ec 10             	sub    $0x10,%esp
+801037f9:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-801037bc:	68 20 1d 11 80       	push   $0x80111d20
-801037c1:	e8 da 0d 00 00       	call   801045a0 <acquire>
-801037c6:	83 c4 10             	add    $0x10,%esp
-801037c9:	eb 10                	jmp    801037db <allocproc+0x2b>
-801037cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801037cf:	90                   	nop
+801037fc:	68 20 1d 11 80       	push   $0x80111d20
+80103801:	e8 fa 10 00 00       	call   80104900 <acquire>
+80103806:	83 c4 10             	add    $0x10,%esp
+80103809:	eb 10                	jmp    8010381b <allocproc+0x2b>
+8010380b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010380f:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037d0:	83 c3 7c             	add    $0x7c,%ebx
-801037d3:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-801037d9:	74 75                	je     80103850 <allocproc+0xa0>
+80103810:	83 eb 80             	sub    $0xffffff80,%ebx
+80103813:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
+80103819:	74 75                	je     80103890 <allocproc+0xa0>
     if(p->state == UNUSED)
-801037db:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037de:	85 c0                	test   %eax,%eax
-801037e0:	75 ee                	jne    801037d0 <allocproc+0x20>
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
+8010381b:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010381e:	85 c0                	test   %eax,%eax
+80103820:	75 ee                	jne    80103810 <allocproc+0x20>
   p->pid = nextpid++;
-801037e2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
-
+80103822:	a1 04 a0 10 80       	mov    0x8010a004,%eax
   release(&ptable.lock);
-801037e7:	83 ec 0c             	sub    $0xc,%esp
+80103827:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ea:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+8010382a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
   p->pid = nextpid++;
-801037f1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037f4:	8d 50 01             	lea    0x1(%eax),%edx
+80103831:	89 43 10             	mov    %eax,0x10(%ebx)
+80103834:	8d 50 01             	lea    0x1(%eax),%edx
   release(&ptable.lock);
-801037f7:	68 20 1d 11 80       	push   $0x80111d20
+80103837:	68 20 1d 11 80       	push   $0x80111d20
   p->pid = nextpid++;
-801037fc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+8010383c:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
   release(&ptable.lock);
-80103802:	e8 39 0d 00 00       	call   80104540 <release>
-
-  // Allocate kernel stack.
+80103842:	e8 59 10 00 00       	call   801048a0 <release>
   if((p->kstack = kalloc()) == 0){
-80103807:	e8 74 ee ff ff       	call   80102680 <kalloc>
-8010380c:	83 c4 10             	add    $0x10,%esp
-8010380f:	89 43 08             	mov    %eax,0x8(%ebx)
-80103812:	85 c0                	test   %eax,%eax
-80103814:	74 53                	je     80103869 <allocproc+0xb9>
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-
-  // Leave room for trap frame.
+80103847:	e8 34 ee ff ff       	call   80102680 <kalloc>
+8010384c:	83 c4 10             	add    $0x10,%esp
+8010384f:	89 43 08             	mov    %eax,0x8(%ebx)
+80103852:	85 c0                	test   %eax,%eax
+80103854:	74 53                	je     801038a9 <allocproc+0xb9>
   sp -= sizeof *p->tf;
-80103816:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
+80103856:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   memset(p->context, 0, sizeof *p->context);
-8010381c:	83 ec 04             	sub    $0x4,%esp
+8010385c:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-8010381f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+8010385f:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103824:	89 53 18             	mov    %edx,0x18(%ebx)
+80103864:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103827:	c7 40 14 52 58 10 80 	movl   $0x80105852,0x14(%eax)
+80103867:	c7 40 14 bf 5c 10 80 	movl   $0x80105cbf,0x14(%eax)
   p->context = (struct context*)sp;
-8010382e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+8010386e:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103831:	6a 14                	push   $0x14
-80103833:	6a 00                	push   $0x0
-80103835:	50                   	push   %eax
-80103836:	e8 25 0e 00 00       	call   80104660 <memset>
+80103871:	6a 14                	push   $0x14
+80103873:	6a 00                	push   $0x0
+80103875:	50                   	push   %eax
+80103876:	e8 45 11 00 00       	call   801049c0 <memset>
   p->context->eip = (uint)forkret;
-8010383b:	8b 43 1c             	mov    0x1c(%ebx),%eax
-
+8010387b:	8b 43 1c             	mov    0x1c(%ebx),%eax
   return p;
-8010383e:	83 c4 10             	add    $0x10,%esp
+8010387e:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103841:	c7 40 10 80 38 10 80 	movl   $0x80103880,0x10(%eax)
+80103881:	c7 40 10 c0 38 10 80 	movl   $0x801038c0,0x10(%eax)
 }
-80103848:	89 d8                	mov    %ebx,%eax
-8010384a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010384d:	c9                   	leave  
-8010384e:	c3                   	ret    
-8010384f:	90                   	nop
+80103888:	89 d8                	mov    %ebx,%eax
+8010388a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010388d:	c9                   	leave  
+8010388e:	c3                   	ret    
+8010388f:	90                   	nop
   release(&ptable.lock);
-80103850:	83 ec 0c             	sub    $0xc,%esp
+80103890:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103853:	31 db                	xor    %ebx,%ebx
+80103893:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103855:	68 20 1d 11 80       	push   $0x80111d20
-8010385a:	e8 e1 0c 00 00       	call   80104540 <release>
+80103895:	68 20 1d 11 80       	push   $0x80111d20
+8010389a:	e8 01 10 00 00       	call   801048a0 <release>
 }
-8010385f:	89 d8                	mov    %ebx,%eax
+8010389f:	89 d8                	mov    %ebx,%eax
   return 0;
-80103861:	83 c4 10             	add    $0x10,%esp
+801038a1:	83 c4 10             	add    $0x10,%esp
 }
-80103864:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103867:	c9                   	leave  
-80103868:	c3                   	ret    
+801038a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801038a7:	c9                   	leave  
+801038a8:	c3                   	ret    
     p->state = UNUSED;
-80103869:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801038a9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-80103870:	31 db                	xor    %ebx,%ebx
+801038b0:	31 db                	xor    %ebx,%ebx
 }
-80103872:	89 d8                	mov    %ebx,%eax
-80103874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103877:	c9                   	leave  
-80103878:	c3                   	ret    
-80103879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103880 <forkret>:
-
-// A fork child's very first scheduling by scheduler()
-// will swtch here.  "Return" to user space.
-void
-forkret(void)
-{
-80103880:	55                   	push   %ebp
-80103881:	89 e5                	mov    %esp,%ebp
-80103883:	83 ec 14             	sub    $0x14,%esp
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
+801038b2:	89 d8                	mov    %ebx,%eax
+801038b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801038b7:	c9                   	leave  
+801038b8:	c3                   	ret    
+801038b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801038c0 <forkret>:
+{
+801038c0:	55                   	push   %ebp
+801038c1:	89 e5                	mov    %esp,%ebp
+801038c3:	83 ec 14             	sub    $0x14,%esp
   release(&ptable.lock);
-80103886:	68 20 1d 11 80       	push   $0x80111d20
-8010388b:	e8 b0 0c 00 00       	call   80104540 <release>
-
+801038c6:	68 20 1d 11 80       	push   $0x80111d20
+801038cb:	e8 d0 0f 00 00       	call   801048a0 <release>
   if (first) {
-80103890:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103895:	83 c4 10             	add    $0x10,%esp
-80103898:	85 c0                	test   %eax,%eax
-8010389a:	75 04                	jne    801038a0 <forkret+0x20>
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
-
-  // Return to "caller", actually trapret (see allocproc).
-}
-8010389c:	c9                   	leave  
-8010389d:	c3                   	ret    
-8010389e:	66 90                	xchg   %ax,%ax
+801038d0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+801038d5:	83 c4 10             	add    $0x10,%esp
+801038d8:	85 c0                	test   %eax,%eax
+801038da:	75 04                	jne    801038e0 <forkret+0x20>
+}
+801038dc:	c9                   	leave  
+801038dd:	c3                   	ret    
+801038de:	66 90                	xchg   %ax,%ax
     first = 0;
-801038a0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-801038a7:	00 00 00 
+801038e0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+801038e7:	00 00 00 
     iinit(ROOTDEV);
-801038aa:	83 ec 0c             	sub    $0xc,%esp
-801038ad:	6a 01                	push   $0x1
-801038af:	e8 ac dc ff ff       	call   80101560 <iinit>
+801038ea:	83 ec 0c             	sub    $0xc,%esp
+801038ed:	6a 01                	push   $0x1
+801038ef:	e8 6c dc ff ff       	call   80101560 <iinit>
     initlog(ROOTDEV);
-801038b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038bb:	e8 00 f4 ff ff       	call   80102cc0 <initlog>
+801038f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038fb:	e8 c0 f3 ff ff       	call   80102cc0 <initlog>
 }
-801038c0:	83 c4 10             	add    $0x10,%esp
-801038c3:	c9                   	leave  
-801038c4:	c3                   	ret    
-801038c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801038cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801038d0 <pinit>:
-{
-801038d0:	55                   	push   %ebp
-801038d1:	89 e5                	mov    %esp,%ebp
-801038d3:	83 ec 10             	sub    $0x10,%esp
+80103900:	83 c4 10             	add    $0x10,%esp
+80103903:	c9                   	leave  
+80103904:	c3                   	ret    
+80103905:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010390c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103910 <pinit>:
+{
+80103910:	55                   	push   %ebp
+80103911:	89 e5                	mov    %esp,%ebp
+80103913:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-801038d6:	68 e0 76 10 80       	push   $0x801076e0
-801038db:	68 20 1d 11 80       	push   $0x80111d20
-801038e0:	e8 eb 0a 00 00       	call   801043d0 <initlock>
-}
-801038e5:	83 c4 10             	add    $0x10,%esp
-801038e8:	c9                   	leave  
-801038e9:	c3                   	ret    
-801038ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801038f0 <mycpu>:
-{
-801038f0:	55                   	push   %ebp
-801038f1:	89 e5                	mov    %esp,%ebp
-801038f3:	56                   	push   %esi
-801038f4:	53                   	push   %ebx
+80103916:	68 40 7b 10 80       	push   $0x80107b40
+8010391b:	68 20 1d 11 80       	push   $0x80111d20
+80103920:	e8 0b 0e 00 00       	call   80104730 <initlock>
+}
+80103925:	83 c4 10             	add    $0x10,%esp
+80103928:	c9                   	leave  
+80103929:	c3                   	ret    
+8010392a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103930 <mycpu>:
+{
+80103930:	55                   	push   %ebp
+80103931:	89 e5                	mov    %esp,%ebp
+80103933:	56                   	push   %esi
+80103934:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038f5:	9c                   	pushf  
-801038f6:	58                   	pop    %eax
+80103935:	9c                   	pushf  
+80103936:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801038f7:	f6 c4 02             	test   $0x2,%ah
-801038fa:	75 46                	jne    80103942 <mycpu+0x52>
+80103937:	f6 c4 02             	test   $0x2,%ah
+8010393a:	75 46                	jne    80103982 <mycpu+0x52>
   apicid = lapicid();
-801038fc:	e8 ef ef ff ff       	call   801028f0 <lapicid>
+8010393c:	e8 af ef ff ff       	call   801028f0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-80103901:	8b 35 84 17 11 80    	mov    0x80111784,%esi
-80103907:	85 f6                	test   %esi,%esi
-80103909:	7e 2a                	jle    80103935 <mycpu+0x45>
-8010390b:	31 d2                	xor    %edx,%edx
-8010390d:	eb 08                	jmp    80103917 <mycpu+0x27>
-8010390f:	90                   	nop
-80103910:	83 c2 01             	add    $0x1,%edx
-80103913:	39 f2                	cmp    %esi,%edx
-80103915:	74 1e                	je     80103935 <mycpu+0x45>
+80103941:	8b 35 84 17 11 80    	mov    0x80111784,%esi
+80103947:	85 f6                	test   %esi,%esi
+80103949:	7e 2a                	jle    80103975 <mycpu+0x45>
+8010394b:	31 d2                	xor    %edx,%edx
+8010394d:	eb 08                	jmp    80103957 <mycpu+0x27>
+8010394f:	90                   	nop
+80103950:	83 c2 01             	add    $0x1,%edx
+80103953:	39 f2                	cmp    %esi,%edx
+80103955:	74 1e                	je     80103975 <mycpu+0x45>
     if (cpus[i].apicid == apicid)
-80103917:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-8010391d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
-80103924:	39 c3                	cmp    %eax,%ebx
-80103926:	75 e8                	jne    80103910 <mycpu+0x20>
+80103957:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+8010395d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
+80103964:	39 c3                	cmp    %eax,%ebx
+80103966:	75 e8                	jne    80103950 <mycpu+0x20>
 }
-80103928:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103968:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-8010392b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
+8010396b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
 }
-80103931:	5b                   	pop    %ebx
-80103932:	5e                   	pop    %esi
-80103933:	5d                   	pop    %ebp
-80103934:	c3                   	ret    
+80103971:	5b                   	pop    %ebx
+80103972:	5e                   	pop    %esi
+80103973:	5d                   	pop    %ebp
+80103974:	c3                   	ret    
   panic("unknown apicid\n");
-80103935:	83 ec 0c             	sub    $0xc,%esp
-80103938:	68 e7 76 10 80       	push   $0x801076e7
-8010393d:	e8 3e ca ff ff       	call   80100380 <panic>
+80103975:	83 ec 0c             	sub    $0xc,%esp
+80103978:	68 47 7b 10 80       	push   $0x80107b47
+8010397d:	e8 fe c9 ff ff       	call   80100380 <panic>
     panic("mycpu called with interrupts enabled\n");
-80103942:	83 ec 0c             	sub    $0xc,%esp
-80103945:	68 c4 77 10 80       	push   $0x801077c4
-8010394a:	e8 31 ca ff ff       	call   80100380 <panic>
-8010394f:	90                   	nop
+80103982:	83 ec 0c             	sub    $0xc,%esp
+80103985:	68 34 7c 10 80       	push   $0x80107c34
+8010398a:	e8 f1 c9 ff ff       	call   80100380 <panic>
+8010398f:	90                   	nop
 
-80103950 <cpuid>:
+80103990 <cpuid>:
 cpuid() {
-80103950:	55                   	push   %ebp
-80103951:	89 e5                	mov    %esp,%ebp
-80103953:	83 ec 08             	sub    $0x8,%esp
+80103990:	55                   	push   %ebp
+80103991:	89 e5                	mov    %esp,%ebp
+80103993:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-80103956:	e8 95 ff ff ff       	call   801038f0 <mycpu>
+80103996:	e8 95 ff ff ff       	call   80103930 <mycpu>
 }
-8010395b:	c9                   	leave  
+8010399b:	c9                   	leave  
   return mycpu()-cpus;
-8010395c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
-80103961:	c1 f8 04             	sar    $0x4,%eax
-80103964:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
-}
-8010396a:	c3                   	ret    
-8010396b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010396f:	90                   	nop
+8010399c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
+801039a1:	c1 f8 04             	sar    $0x4,%eax
+801039a4:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+801039aa:	c3                   	ret    
+801039ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801039af:	90                   	nop
 
-80103970 <myproc>:
+801039b0 <myproc>:
 myproc(void) {
-80103970:	55                   	push   %ebp
-80103971:	89 e5                	mov    %esp,%ebp
-80103973:	53                   	push   %ebx
-80103974:	83 ec 04             	sub    $0x4,%esp
+801039b0:	55                   	push   %ebp
+801039b1:	89 e5                	mov    %esp,%ebp
+801039b3:	53                   	push   %ebx
+801039b4:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-80103977:	e8 d4 0a 00 00       	call   80104450 <pushcli>
+801039b7:	e8 f4 0d 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-8010397c:	e8 6f ff ff ff       	call   801038f0 <mycpu>
+801039bc:	e8 6f ff ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80103981:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801039c1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103987:	e8 14 0b 00 00       	call   801044a0 <popcli>
+801039c7:	e8 34 0e 00 00       	call   80104800 <popcli>
 }
-8010398c:	89 d8                	mov    %ebx,%eax
-8010398e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103991:	c9                   	leave  
-80103992:	c3                   	ret    
-80103993:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010399a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801039a0 <userinit>:
-{
-801039a0:	55                   	push   %ebp
-801039a1:	89 e5                	mov    %esp,%ebp
-801039a3:	53                   	push   %ebx
-801039a4:	83 ec 04             	sub    $0x4,%esp
+801039cc:	89 d8                	mov    %ebx,%eax
+801039ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801039d1:	c9                   	leave  
+801039d2:	c3                   	ret    
+801039d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801039da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801039e0 <userinit>:
+{
+801039e0:	55                   	push   %ebp
+801039e1:	89 e5                	mov    %esp,%ebp
+801039e3:	53                   	push   %ebx
+801039e4:	83 ec 04             	sub    $0x4,%esp
   p = allocproc();
-801039a7:	e8 04 fe ff ff       	call   801037b0 <allocproc>
-801039ac:	89 c3                	mov    %eax,%ebx
+801039e7:	e8 04 fe ff ff       	call   801037f0 <allocproc>
+801039ec:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039ae:	a3 54 3c 11 80       	mov    %eax,0x80113c54
+801039ee:	a3 54 3d 11 80       	mov    %eax,0x80113d54
   if((p->pgdir = setupkvm()) == 0)
-801039b3:	e8 88 34 00 00       	call   80106e40 <setupkvm>
-801039b8:	89 43 04             	mov    %eax,0x4(%ebx)
-801039bb:	85 c0                	test   %eax,%eax
-801039bd:	0f 84 bd 00 00 00    	je     80103a80 <userinit+0xe0>
+801039f3:	e8 b8 38 00 00       	call   801072b0 <setupkvm>
+801039f8:	89 43 04             	mov    %eax,0x4(%ebx)
+801039fb:	85 c0                	test   %eax,%eax
+801039fd:	0f 84 bd 00 00 00    	je     80103ac0 <userinit+0xe0>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039c3:	83 ec 04             	sub    $0x4,%esp
-801039c6:	68 2c 00 00 00       	push   $0x2c
-801039cb:	68 60 a4 10 80       	push   $0x8010a460
-801039d0:	50                   	push   %eax
-801039d1:	e8 1a 31 00 00       	call   80106af0 <inituvm>
+80103a03:	83 ec 04             	sub    $0x4,%esp
+80103a06:	68 2c 00 00 00       	push   $0x2c
+80103a0b:	68 60 a4 10 80       	push   $0x8010a460
+80103a10:	50                   	push   %eax
+80103a11:	e8 4a 35 00 00       	call   80106f60 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-801039d6:	83 c4 0c             	add    $0xc,%esp
+80103a16:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-801039d9:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+80103a19:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-801039df:	6a 4c                	push   $0x4c
-801039e1:	6a 00                	push   $0x0
-801039e3:	ff 73 18             	push   0x18(%ebx)
-801039e6:	e8 75 0c 00 00       	call   80104660 <memset>
+80103a1f:	6a 4c                	push   $0x4c
+80103a21:	6a 00                	push   $0x0
+80103a23:	ff 73 18             	push   0x18(%ebx)
+80103a26:	e8 95 0f 00 00       	call   801049c0 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039eb:	8b 43 18             	mov    0x18(%ebx),%eax
-801039ee:	ba 1b 00 00 00       	mov    $0x1b,%edx
+80103a2b:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a2e:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801039f3:	83 c4 0c             	add    $0xc,%esp
+80103a33:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f6:	b9 23 00 00 00       	mov    $0x23,%ecx
+80103a36:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039fb:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80103a3b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ff:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a02:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80103a3f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a42:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-80103a06:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a09:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0d:	66 89 50 28          	mov    %dx,0x28(%eax)
+80103a46:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a49:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a4d:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a11:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a14:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a18:	66 89 50 48          	mov    %dx,0x48(%eax)
+80103a51:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a54:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a58:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a1c:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80103a5c:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a5f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a26:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a29:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80103a66:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a69:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a30:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a33:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80103a70:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a73:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a3a:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a3d:	6a 10                	push   $0x10
-80103a3f:	68 10 77 10 80       	push   $0x80107710
-80103a44:	50                   	push   %eax
-80103a45:	e8 d6 0d 00 00       	call   80104820 <safestrcpy>
+80103a7a:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103a7d:	6a 10                	push   $0x10
+80103a7f:	68 70 7b 10 80       	push   $0x80107b70
+80103a84:	50                   	push   %eax
+80103a85:	e8 f6 10 00 00       	call   80104b80 <safestrcpy>
   p->cwd = namei("/");
-80103a4a:	c7 04 24 19 77 10 80 	movl   $0x80107719,(%esp)
-80103a51:	e8 4a e6 ff ff       	call   801020a0 <namei>
-80103a56:	89 43 68             	mov    %eax,0x68(%ebx)
+80103a8a:	c7 04 24 79 7b 10 80 	movl   $0x80107b79,(%esp)
+80103a91:	e8 0a e6 ff ff       	call   801020a0 <namei>
+80103a96:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a59:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103a60:	e8 3b 0b 00 00       	call   801045a0 <acquire>
+80103a99:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103aa0:	e8 5b 0e 00 00       	call   80104900 <acquire>
   p->state = RUNNABLE;
-80103a65:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103aa5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-80103a6c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103a73:	e8 c8 0a 00 00       	call   80104540 <release>
+80103aac:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103ab3:	e8 e8 0d 00 00       	call   801048a0 <release>
 }
-80103a78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a7b:	83 c4 10             	add    $0x10,%esp
-80103a7e:	c9                   	leave  
-80103a7f:	c3                   	ret    
+80103ab8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103abb:	83 c4 10             	add    $0x10,%esp
+80103abe:	c9                   	leave  
+80103abf:	c3                   	ret    
     panic("userinit: out of memory?");
-80103a80:	83 ec 0c             	sub    $0xc,%esp
-80103a83:	68 f7 76 10 80       	push   $0x801076f7
-80103a88:	e8 f3 c8 ff ff       	call   80100380 <panic>
-80103a8d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103a90 <growproc>:
-{
-80103a90:	55                   	push   %ebp
-80103a91:	89 e5                	mov    %esp,%ebp
-80103a93:	56                   	push   %esi
-80103a94:	53                   	push   %ebx
-80103a95:	8b 75 08             	mov    0x8(%ebp),%esi
+80103ac0:	83 ec 0c             	sub    $0xc,%esp
+80103ac3:	68 57 7b 10 80       	push   $0x80107b57
+80103ac8:	e8 b3 c8 ff ff       	call   80100380 <panic>
+80103acd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103ad0 <growproc>:
+{
+80103ad0:	55                   	push   %ebp
+80103ad1:	89 e5                	mov    %esp,%ebp
+80103ad3:	56                   	push   %esi
+80103ad4:	53                   	push   %ebx
+80103ad5:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a98:	e8 b3 09 00 00       	call   80104450 <pushcli>
+80103ad8:	e8 d3 0c 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80103a9d:	e8 4e fe ff ff       	call   801038f0 <mycpu>
+80103add:	e8 4e fe ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80103aa2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103ae2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aa8:	e8 f3 09 00 00       	call   801044a0 <popcli>
+80103ae8:	e8 13 0d 00 00       	call   80104800 <popcli>
   sz = curproc->sz;
-80103aad:	8b 03                	mov    (%ebx),%eax
+80103aed:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103aaf:	85 f6                	test   %esi,%esi
-80103ab1:	7f 1d                	jg     80103ad0 <growproc+0x40>
+80103aef:	85 f6                	test   %esi,%esi
+80103af1:	7f 1d                	jg     80103b10 <growproc+0x40>
   } else if(n < 0){
-80103ab3:	75 3b                	jne    80103af0 <growproc+0x60>
+80103af3:	75 3b                	jne    80103b30 <growproc+0x60>
   switchuvm(curproc);
-80103ab5:	83 ec 0c             	sub    $0xc,%esp
+80103af5:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103ab8:	89 03                	mov    %eax,(%ebx)
+80103af8:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103aba:	53                   	push   %ebx
-80103abb:	e8 20 2f 00 00       	call   801069e0 <switchuvm>
+80103afa:	53                   	push   %ebx
+80103afb:	e8 50 33 00 00       	call   80106e50 <switchuvm>
   return 0;
-80103ac0:	83 c4 10             	add    $0x10,%esp
-80103ac3:	31 c0                	xor    %eax,%eax
+80103b00:	83 c4 10             	add    $0x10,%esp
+80103b03:	31 c0                	xor    %eax,%eax
 }
-80103ac5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103ac8:	5b                   	pop    %ebx
-80103ac9:	5e                   	pop    %esi
-80103aca:	5d                   	pop    %ebp
-80103acb:	c3                   	ret    
-80103acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103b05:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103b08:	5b                   	pop    %ebx
+80103b09:	5e                   	pop    %esi
+80103b0a:	5d                   	pop    %ebp
+80103b0b:	c3                   	ret    
+80103b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	push   0x4(%ebx)
-80103ada:	e8 81 31 00 00       	call   80106c60 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 cf                	jne    80103ab5 <growproc+0x25>
+80103b10:	83 ec 04             	sub    $0x4,%esp
+80103b13:	01 c6                	add    %eax,%esi
+80103b15:	56                   	push   %esi
+80103b16:	50                   	push   %eax
+80103b17:	ff 73 04             	push   0x4(%ebx)
+80103b1a:	e8 b1 35 00 00       	call   801070d0 <allocuvm>
+80103b1f:	83 c4 10             	add    $0x10,%esp
+80103b22:	85 c0                	test   %eax,%eax
+80103b24:	75 cf                	jne    80103af5 <growproc+0x25>
       return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb d8                	jmp    80103ac5 <growproc+0x35>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
+80103b26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103b2b:	eb d8                	jmp    80103b05 <growproc+0x35>
+80103b2d:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103af0:	83 ec 04             	sub    $0x4,%esp
-80103af3:	01 c6                	add    %eax,%esi
-80103af5:	56                   	push   %esi
-80103af6:	50                   	push   %eax
-80103af7:	ff 73 04             	push   0x4(%ebx)
-80103afa:	e8 91 32 00 00       	call   80106d90 <deallocuvm>
-80103aff:	83 c4 10             	add    $0x10,%esp
-80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 af                	jne    80103ab5 <growproc+0x25>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	55                   	push   %ebp
-80103b11:	89 e5                	mov    %esp,%ebp
-80103b13:	57                   	push   %edi
-80103b14:	56                   	push   %esi
-80103b15:	53                   	push   %ebx
-80103b16:	83 ec 1c             	sub    $0x1c,%esp
+80103b30:	83 ec 04             	sub    $0x4,%esp
+80103b33:	01 c6                	add    %eax,%esi
+80103b35:	56                   	push   %esi
+80103b36:	50                   	push   %eax
+80103b37:	ff 73 04             	push   0x4(%ebx)
+80103b3a:	e8 c1 36 00 00       	call   80107200 <deallocuvm>
+80103b3f:	83 c4 10             	add    $0x10,%esp
+80103b42:	85 c0                	test   %eax,%eax
+80103b44:	75 af                	jne    80103af5 <growproc+0x25>
+80103b46:	eb de                	jmp    80103b26 <growproc+0x56>
+80103b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b4f:	90                   	nop
+
+80103b50 <fork>:
+{
+80103b50:	55                   	push   %ebp
+80103b51:	89 e5                	mov    %esp,%ebp
+80103b53:	57                   	push   %edi
+80103b54:	56                   	push   %esi
+80103b55:	53                   	push   %ebx
+80103b56:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b19:	e8 32 09 00 00       	call   80104450 <pushcli>
+80103b59:	e8 52 0c 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80103b1e:	e8 cd fd ff ff       	call   801038f0 <mycpu>
+80103b5e:	e8 cd fd ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80103b23:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103b63:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b29:	e8 72 09 00 00       	call   801044a0 <popcli>
+80103b69:	e8 92 0c 00 00       	call   80104800 <popcli>
   if((np = allocproc()) == 0){
-80103b2e:	e8 7d fc ff ff       	call   801037b0 <allocproc>
-80103b33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b36:	85 c0                	test   %eax,%eax
-80103b38:	0f 84 b7 00 00 00    	je     80103bf5 <fork+0xe5>
+80103b6e:	e8 7d fc ff ff       	call   801037f0 <allocproc>
+80103b73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103b76:	85 c0                	test   %eax,%eax
+80103b78:	0f 84 b7 00 00 00    	je     80103c35 <fork+0xe5>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b3e:	83 ec 08             	sub    $0x8,%esp
-80103b41:	ff 33                	push   (%ebx)
-80103b43:	89 c7                	mov    %eax,%edi
-80103b45:	ff 73 04             	push   0x4(%ebx)
-80103b48:	e8 e3 33 00 00       	call   80106f30 <copyuvm>
-80103b4d:	83 c4 10             	add    $0x10,%esp
-80103b50:	89 47 04             	mov    %eax,0x4(%edi)
-80103b53:	85 c0                	test   %eax,%eax
-80103b55:	0f 84 a1 00 00 00    	je     80103bfc <fork+0xec>
+80103b7e:	83 ec 08             	sub    $0x8,%esp
+80103b81:	ff 33                	push   (%ebx)
+80103b83:	89 c7                	mov    %eax,%edi
+80103b85:	ff 73 04             	push   0x4(%ebx)
+80103b88:	e8 13 38 00 00       	call   801073a0 <copyuvm>
+80103b8d:	83 c4 10             	add    $0x10,%esp
+80103b90:	89 47 04             	mov    %eax,0x4(%edi)
+80103b93:	85 c0                	test   %eax,%eax
+80103b95:	0f 84 a1 00 00 00    	je     80103c3c <fork+0xec>
   np->sz = curproc->sz;
-80103b5b:	8b 03                	mov    (%ebx),%eax
-80103b5d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b60:	89 01                	mov    %eax,(%ecx)
+80103b9b:	8b 03                	mov    (%ebx),%eax
+80103b9d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103ba0:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b62:	8b 79 18             	mov    0x18(%ecx),%edi
+80103ba2:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103b65:	89 c8                	mov    %ecx,%eax
-80103b67:	89 59 14             	mov    %ebx,0x14(%ecx)
+80103ba5:	89 c8                	mov    %ecx,%eax
+80103ba7:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103b6a:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b6f:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+80103baa:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103baf:	8b 73 18             	mov    0x18(%ebx),%esi
+80103bb2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103b74:	31 f6                	xor    %esi,%esi
+80103bb4:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b76:	8b 40 18             	mov    0x18(%eax),%eax
-80103b79:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80103bb6:	8b 40 18             	mov    0x18(%eax),%eax
+80103bb9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
     if(curproc->ofile[i])
-80103b80:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b84:	85 c0                	test   %eax,%eax
-80103b86:	74 13                	je     80103b9b <fork+0x8b>
+80103bc0:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103bc4:	85 c0                	test   %eax,%eax
+80103bc6:	74 13                	je     80103bdb <fork+0x8b>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103b88:	83 ec 0c             	sub    $0xc,%esp
-80103b8b:	50                   	push   %eax
-80103b8c:	e8 0f d3 ff ff       	call   80100ea0 <filedup>
-80103b91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b94:	83 c4 10             	add    $0x10,%esp
-80103b97:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80103bc8:	83 ec 0c             	sub    $0xc,%esp
+80103bcb:	50                   	push   %eax
+80103bcc:	e8 cf d2 ff ff       	call   80100ea0 <filedup>
+80103bd1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103bd4:	83 c4 10             	add    $0x10,%esp
+80103bd7:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103b9b:	83 c6 01             	add    $0x1,%esi
-80103b9e:	83 fe 10             	cmp    $0x10,%esi
-80103ba1:	75 dd                	jne    80103b80 <fork+0x70>
+80103bdb:	83 c6 01             	add    $0x1,%esi
+80103bde:	83 fe 10             	cmp    $0x10,%esi
+80103be1:	75 dd                	jne    80103bc0 <fork+0x70>
   np->cwd = idup(curproc->cwd);
-80103ba3:	83 ec 0c             	sub    $0xc,%esp
-80103ba6:	ff 73 68             	push   0x68(%ebx)
+80103be3:	83 ec 0c             	sub    $0xc,%esp
+80103be6:	ff 73 68             	push   0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103ba9:	83 c3 6c             	add    $0x6c,%ebx
+80103be9:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bac:	e8 9f db ff ff       	call   80101750 <idup>
-80103bb1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103bec:	e8 5f db ff ff       	call   80101750 <idup>
+80103bf1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb4:	83 c4 0c             	add    $0xc,%esp
+80103bf4:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bb7:	89 47 68             	mov    %eax,0x68(%edi)
+80103bf7:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bba:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bbd:	6a 10                	push   $0x10
-80103bbf:	53                   	push   %ebx
-80103bc0:	50                   	push   %eax
-80103bc1:	e8 5a 0c 00 00       	call   80104820 <safestrcpy>
+80103bfa:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103bfd:	6a 10                	push   $0x10
+80103bff:	53                   	push   %ebx
+80103c00:	50                   	push   %eax
+80103c01:	e8 7a 0f 00 00       	call   80104b80 <safestrcpy>
   pid = np->pid;
-80103bc6:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103c06:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bc9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103bd0:	e8 cb 09 00 00       	call   801045a0 <acquire>
+80103c09:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103c10:	e8 eb 0c 00 00       	call   80104900 <acquire>
   np->state = RUNNABLE;
-80103bd5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80103c15:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103bdc:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103be3:	e8 58 09 00 00       	call   80104540 <release>
+80103c1c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103c23:	e8 78 0c 00 00       	call   801048a0 <release>
   return pid;
-80103be8:	83 c4 10             	add    $0x10,%esp
+80103c28:	83 c4 10             	add    $0x10,%esp
 }
-80103beb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bee:	89 d8                	mov    %ebx,%eax
-80103bf0:	5b                   	pop    %ebx
-80103bf1:	5e                   	pop    %esi
-80103bf2:	5f                   	pop    %edi
-80103bf3:	5d                   	pop    %ebp
-80103bf4:	c3                   	ret    
+80103c2b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103c2e:	89 d8                	mov    %ebx,%eax
+80103c30:	5b                   	pop    %ebx
+80103c31:	5e                   	pop    %esi
+80103c32:	5f                   	pop    %edi
+80103c33:	5d                   	pop    %ebp
+80103c34:	c3                   	ret    
     return -1;
-80103bf5:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103bfa:	eb ef                	jmp    80103beb <fork+0xdb>
+80103c35:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c3a:	eb ef                	jmp    80103c2b <fork+0xdb>
     kfree(np->kstack);
-80103bfc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103bff:	83 ec 0c             	sub    $0xc,%esp
-80103c02:	ff 73 08             	push   0x8(%ebx)
-80103c05:	e8 b6 e8 ff ff       	call   801024c0 <kfree>
+80103c3c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103c3f:	83 ec 0c             	sub    $0xc,%esp
+80103c42:	ff 73 08             	push   0x8(%ebx)
+80103c45:	e8 76 e8 ff ff       	call   801024c0 <kfree>
     np->kstack = 0;
-80103c0a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103c4a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80103c11:	83 c4 10             	add    $0x10,%esp
+80103c51:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c14:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103c54:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103c1b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c20:	eb c9                	jmp    80103beb <fork+0xdb>
-80103c22:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	55                   	push   %ebp
-80103c31:	89 e5                	mov    %esp,%ebp
-80103c33:	57                   	push   %edi
-80103c34:	56                   	push   %esi
-80103c35:	53                   	push   %ebx
-80103c36:	83 ec 0c             	sub    $0xc,%esp
+80103c5b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c60:	eb c9                	jmp    80103c2b <fork+0xdb>
+80103c62:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103c70 <scheduler>:
+{
+80103c70:	55                   	push   %ebp
+80103c71:	89 e5                	mov    %esp,%ebp
+80103c73:	57                   	push   %edi
+80103c74:	56                   	push   %esi
+80103c75:	53                   	push   %ebx
+80103c76:	83 ec 0c             	sub    $0xc,%esp
   struct cpu *c = mycpu();
-80103c39:	e8 b2 fc ff ff       	call   801038f0 <mycpu>
+80103c79:	e8 b2 fc ff ff       	call   80103930 <mycpu>
   c->proc = 0;
-80103c3e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c45:	00 00 00 
+80103c7e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103c85:	00 00 00 
   struct cpu *c = mycpu();
-80103c48:	89 c6                	mov    %eax,%esi
+80103c88:	89 c6                	mov    %eax,%esi
   c->proc = 0;
-80103c4a:	8d 78 04             	lea    0x4(%eax),%edi
-80103c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80103c8a:	8d 78 04             	lea    0x4(%eax),%edi
+80103c8d:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("sti");
-80103c50:	fb                   	sti    
+80103c90:	fb                   	sti    
     acquire(&ptable.lock);
-80103c51:	83 ec 0c             	sub    $0xc,%esp
+80103c91:	83 ec 0c             	sub    $0xc,%esp
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c54:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+80103c94:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
     acquire(&ptable.lock);
-80103c59:	68 20 1d 11 80       	push   $0x80111d20
-80103c5e:	e8 3d 09 00 00       	call   801045a0 <acquire>
-80103c63:	83 c4 10             	add    $0x10,%esp
-80103c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103c6d:	8d 76 00             	lea    0x0(%esi),%esi
+80103c99:	68 20 1d 11 80       	push   $0x80111d20
+80103c9e:	e8 5d 0c 00 00       	call   80104900 <acquire>
+80103ca3:	83 c4 10             	add    $0x10,%esp
+80103ca6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103cad:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
+80103cb0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103cb4:	75 33                	jne    80103ce9 <scheduler+0x79>
       switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
+80103cb6:	83 ec 0c             	sub    $0xc,%esp
       c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+80103cb9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
       switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 5b 2d 00 00       	call   801069e0 <switchuvm>
+80103cbf:	53                   	push   %ebx
+80103cc0:	e8 8b 31 00 00       	call   80106e50 <switchuvm>
       swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	push   0x1c(%ebx)
-80103c8a:	57                   	push   %edi
+80103cc5:	58                   	pop    %eax
+80103cc6:	5a                   	pop    %edx
+80103cc7:	ff 73 1c             	push   0x1c(%ebx)
+80103cca:	57                   	push   %edi
       p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+80103ccb:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
       swtch(&(c->scheduler), p->context);
-80103c92:	e8 e4 0b 00 00       	call   8010487b <swtch>
+80103cd2:	e8 04 0f 00 00       	call   80104bdb <swtch>
       switchkvm();
-80103c97:	e8 34 2d 00 00       	call   801069d0 <switchkvm>
+80103cd7:	e8 64 31 00 00       	call   80106e40 <switchkvm>
       c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
+80103cdc:	83 c4 10             	add    $0x10,%esp
+80103cdf:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103ce6:	00 00 00 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+80103ce9:	83 eb 80             	sub    $0xffffff80,%ebx
+80103cec:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
+80103cf2:	75 bc                	jne    80103cb0 <scheduler+0x40>
     release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 1d 11 80       	push   $0x80111d20
-80103cbc:	e8 7f 08 00 00       	call   80104540 <release>
+80103cf4:	83 ec 0c             	sub    $0xc,%esp
+80103cf7:	68 20 1d 11 80       	push   $0x80111d20
+80103cfc:	e8 9f 0b 00 00       	call   801048a0 <release>
     sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 8a                	jmp    80103c50 <scheduler+0x20>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	55                   	push   %ebp
-80103cd1:	89 e5                	mov    %esp,%ebp
-80103cd3:	56                   	push   %esi
-80103cd4:	53                   	push   %ebx
+80103d01:	83 c4 10             	add    $0x10,%esp
+80103d04:	eb 8a                	jmp    80103c90 <scheduler+0x20>
+80103d06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d0d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103d10 <sched>:
+{
+80103d10:	55                   	push   %ebp
+80103d11:	89 e5                	mov    %esp,%ebp
+80103d13:	56                   	push   %esi
+80103d14:	53                   	push   %ebx
   pushcli();
-80103cd5:	e8 76 07 00 00       	call   80104450 <pushcli>
+80103d15:	e8 96 0a 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80103cda:	e8 11 fc ff ff       	call   801038f0 <mycpu>
+80103d1a:	e8 11 fc ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80103cdf:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103d1f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce5:	e8 b6 07 00 00       	call   801044a0 <popcli>
+80103d25:	e8 d6 0a 00 00       	call   80104800 <popcli>
   if(!holding(&ptable.lock))
-80103cea:	83 ec 0c             	sub    $0xc,%esp
-80103ced:	68 20 1d 11 80       	push   $0x80111d20
-80103cf2:	e8 09 08 00 00       	call   80104500 <holding>
-80103cf7:	83 c4 10             	add    $0x10,%esp
-80103cfa:	85 c0                	test   %eax,%eax
-80103cfc:	74 4f                	je     80103d4d <sched+0x7d>
+80103d2a:	83 ec 0c             	sub    $0xc,%esp
+80103d2d:	68 20 1d 11 80       	push   $0x80111d20
+80103d32:	e8 29 0b 00 00       	call   80104860 <holding>
+80103d37:	83 c4 10             	add    $0x10,%esp
+80103d3a:	85 c0                	test   %eax,%eax
+80103d3c:	74 4f                	je     80103d8d <sched+0x7d>
   if(mycpu()->ncli != 1)
-80103cfe:	e8 ed fb ff ff       	call   801038f0 <mycpu>
-80103d03:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0a:	75 68                	jne    80103d74 <sched+0xa4>
+80103d3e:	e8 ed fb ff ff       	call   80103930 <mycpu>
+80103d43:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103d4a:	75 68                	jne    80103db4 <sched+0xa4>
   if(p->state == RUNNING)
-80103d0c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d10:	74 55                	je     80103d67 <sched+0x97>
+80103d4c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103d50:	74 55                	je     80103da7 <sched+0x97>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d12:	9c                   	pushf  
-80103d13:	58                   	pop    %eax
+80103d52:	9c                   	pushf  
+80103d53:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d14:	f6 c4 02             	test   $0x2,%ah
-80103d17:	75 41                	jne    80103d5a <sched+0x8a>
+80103d54:	f6 c4 02             	test   $0x2,%ah
+80103d57:	75 41                	jne    80103d9a <sched+0x8a>
   intena = mycpu()->intena;
-80103d19:	e8 d2 fb ff ff       	call   801038f0 <mycpu>
+80103d59:	e8 d2 fb ff ff       	call   80103930 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d1e:	83 c3 1c             	add    $0x1c,%ebx
+80103d5e:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d21:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80103d61:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d27:	e8 c4 fb ff ff       	call   801038f0 <mycpu>
-80103d2c:	83 ec 08             	sub    $0x8,%esp
-80103d2f:	ff 70 04             	push   0x4(%eax)
-80103d32:	53                   	push   %ebx
-80103d33:	e8 43 0b 00 00       	call   8010487b <swtch>
+80103d67:	e8 c4 fb ff ff       	call   80103930 <mycpu>
+80103d6c:	83 ec 08             	sub    $0x8,%esp
+80103d6f:	ff 70 04             	push   0x4(%eax)
+80103d72:	53                   	push   %ebx
+80103d73:	e8 63 0e 00 00       	call   80104bdb <swtch>
   mycpu()->intena = intena;
-80103d38:	e8 b3 fb ff ff       	call   801038f0 <mycpu>
+80103d78:	e8 b3 fb ff ff       	call   80103930 <mycpu>
 }
-80103d3d:	83 c4 10             	add    $0x10,%esp
+80103d7d:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d40:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80103d80:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d46:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d49:	5b                   	pop    %ebx
-80103d4a:	5e                   	pop    %esi
-80103d4b:	5d                   	pop    %ebp
-80103d4c:	c3                   	ret    
+80103d86:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103d89:	5b                   	pop    %ebx
+80103d8a:	5e                   	pop    %esi
+80103d8b:	5d                   	pop    %ebp
+80103d8c:	c3                   	ret    
     panic("sched ptable.lock");
-80103d4d:	83 ec 0c             	sub    $0xc,%esp
-80103d50:	68 1b 77 10 80       	push   $0x8010771b
-80103d55:	e8 26 c6 ff ff       	call   80100380 <panic>
+80103d8d:	83 ec 0c             	sub    $0xc,%esp
+80103d90:	68 7b 7b 10 80       	push   $0x80107b7b
+80103d95:	e8 e6 c5 ff ff       	call   80100380 <panic>
     panic("sched interruptible");
-80103d5a:	83 ec 0c             	sub    $0xc,%esp
-80103d5d:	68 47 77 10 80       	push   $0x80107747
-80103d62:	e8 19 c6 ff ff       	call   80100380 <panic>
+80103d9a:	83 ec 0c             	sub    $0xc,%esp
+80103d9d:	68 a7 7b 10 80       	push   $0x80107ba7
+80103da2:	e8 d9 c5 ff ff       	call   80100380 <panic>
     panic("sched running");
-80103d67:	83 ec 0c             	sub    $0xc,%esp
-80103d6a:	68 39 77 10 80       	push   $0x80107739
-80103d6f:	e8 0c c6 ff ff       	call   80100380 <panic>
+80103da7:	83 ec 0c             	sub    $0xc,%esp
+80103daa:	68 99 7b 10 80       	push   $0x80107b99
+80103daf:	e8 cc c5 ff ff       	call   80100380 <panic>
     panic("sched locks");
-80103d74:	83 ec 0c             	sub    $0xc,%esp
-80103d77:	68 2d 77 10 80       	push   $0x8010772d
-80103d7c:	e8 ff c5 ff ff       	call   80100380 <panic>
-80103d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8f:	90                   	nop
-
-80103d90 <exit>:
-{
-80103d90:	55                   	push   %ebp
-80103d91:	89 e5                	mov    %esp,%ebp
-80103d93:	57                   	push   %edi
-80103d94:	56                   	push   %esi
-80103d95:	53                   	push   %ebx
-80103d96:	83 ec 0c             	sub    $0xc,%esp
+80103db4:	83 ec 0c             	sub    $0xc,%esp
+80103db7:	68 8d 7b 10 80       	push   $0x80107b8d
+80103dbc:	e8 bf c5 ff ff       	call   80100380 <panic>
+80103dc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103dc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103dcf:	90                   	nop
+
+80103dd0 <exit>:
+{
+80103dd0:	55                   	push   %ebp
+80103dd1:	89 e5                	mov    %esp,%ebp
+80103dd3:	57                   	push   %edi
+80103dd4:	56                   	push   %esi
+80103dd5:	53                   	push   %ebx
+80103dd6:	83 ec 0c             	sub    $0xc,%esp
   struct proc *curproc = myproc();
-80103d99:	e8 d2 fb ff ff       	call   80103970 <myproc>
+80103dd9:	e8 d2 fb ff ff       	call   801039b0 <myproc>
   if(curproc == initproc)
-80103d9e:	39 05 54 3c 11 80    	cmp    %eax,0x80113c54
-80103da4:	0f 84 fd 00 00 00    	je     80103ea7 <exit+0x117>
-80103daa:	89 c3                	mov    %eax,%ebx
-80103dac:	8d 70 28             	lea    0x28(%eax),%esi
-80103daf:	8d 78 68             	lea    0x68(%eax),%edi
-80103db2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103dde:	39 05 54 3d 11 80    	cmp    %eax,0x80113d54
+80103de4:	0f 84 cd 00 00 00    	je     80103eb7 <exit+0xe7>
+80103dea:	89 c3                	mov    %eax,%ebx
+80103dec:	8d 70 28             	lea    0x28(%eax),%esi
+80103def:	8d 78 68             	lea    0x68(%eax),%edi
+80103df2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd]){
-80103db8:	8b 06                	mov    (%esi),%eax
-80103dba:	85 c0                	test   %eax,%eax
-80103dbc:	74 12                	je     80103dd0 <exit+0x40>
+80103df8:	8b 06                	mov    (%esi),%eax
+80103dfa:	85 c0                	test   %eax,%eax
+80103dfc:	74 12                	je     80103e10 <exit+0x40>
       fileclose(curproc->ofile[fd]);
-80103dbe:	83 ec 0c             	sub    $0xc,%esp
-80103dc1:	50                   	push   %eax
-80103dc2:	e8 29 d1 ff ff       	call   80100ef0 <fileclose>
+80103dfe:	83 ec 0c             	sub    $0xc,%esp
+80103e01:	50                   	push   %eax
+80103e02:	e8 e9 d0 ff ff       	call   80100ef0 <fileclose>
       curproc->ofile[fd] = 0;
-80103dc7:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103dcd:	83 c4 10             	add    $0x10,%esp
+80103e07:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103e0d:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103dd0:	83 c6 04             	add    $0x4,%esi
-80103dd3:	39 f7                	cmp    %esi,%edi
-80103dd5:	75 e1                	jne    80103db8 <exit+0x28>
+80103e10:	83 c6 04             	add    $0x4,%esi
+80103e13:	39 f7                	cmp    %esi,%edi
+80103e15:	75 e1                	jne    80103df8 <exit+0x28>
   begin_op();
-80103dd7:	e8 84 ef ff ff       	call   80102d60 <begin_op>
+80103e17:	e8 44 ef ff ff       	call   80102d60 <begin_op>
   iput(curproc->cwd);
-80103ddc:	83 ec 0c             	sub    $0xc,%esp
-80103ddf:	ff 73 68             	push   0x68(%ebx)
-80103de2:	e8 c9 da ff ff       	call   801018b0 <iput>
+80103e1c:	83 ec 0c             	sub    $0xc,%esp
+80103e1f:	ff 73 68             	push   0x68(%ebx)
+80103e22:	e8 89 da ff ff       	call   801018b0 <iput>
   end_op();
-80103de7:	e8 e4 ef ff ff       	call   80102dd0 <end_op>
+80103e27:	e8 a4 ef ff ff       	call   80102dd0 <end_op>
   curproc->cwd = 0;
-80103dec:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+80103e2c:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
   acquire(&ptable.lock);
-80103df3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103dfa:	e8 a1 07 00 00       	call   801045a0 <acquire>
+80103e33:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103e3a:	e8 c1 0a 00 00       	call   80104900 <acquire>
   wakeup1(curproc->parent);
-80103dff:	8b 53 14             	mov    0x14(%ebx),%edx
-80103e02:	83 c4 10             	add    $0x10,%esp
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e05:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-80103e0a:	eb 0e                	jmp    80103e1a <exit+0x8a>
-80103e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e10:	83 c0 7c             	add    $0x7c,%eax
-80103e13:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80103e18:	74 1c                	je     80103e36 <exit+0xa6>
-    if(p->state == SLEEPING && p->chan == chan)
-80103e1a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e1e:	75 f0                	jne    80103e10 <exit+0x80>
-80103e20:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e23:	75 eb                	jne    80103e10 <exit+0x80>
-      p->state = RUNNABLE;
-80103e25:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e2c:	83 c0 7c             	add    $0x7c,%eax
-80103e2f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80103e34:	75 e4                	jne    80103e1a <exit+0x8a>
+80103e3f:	8b 43 14             	mov    0x14(%ebx),%eax
+80103e42:	e8 69 f9 ff ff       	call   801037b0 <wakeup1>
       p->parent = initproc;
-80103e36:	8b 0d 54 3c 11 80    	mov    0x80113c54,%ecx
+80103e47:	8b 0d 54 3d 11 80    	mov    0x80113d54,%ecx
+80103e4d:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e3c:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
-80103e41:	eb 10                	jmp    80103e53 <exit+0xc3>
-80103e43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e47:	90                   	nop
-80103e48:	83 c2 7c             	add    $0x7c,%edx
-80103e4b:	81 fa 54 3c 11 80    	cmp    $0x80113c54,%edx
-80103e51:	74 3b                	je     80103e8e <exit+0xfe>
+80103e50:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
+80103e55:	eb 14                	jmp    80103e6b <exit+0x9b>
+80103e57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e5e:	66 90                	xchg   %ax,%ax
+80103e60:	83 ea 80             	sub    $0xffffff80,%edx
+80103e63:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
+80103e69:	74 33                	je     80103e9e <exit+0xce>
     if(p->parent == curproc){
-80103e53:	39 5a 14             	cmp    %ebx,0x14(%edx)
-80103e56:	75 f0                	jne    80103e48 <exit+0xb8>
+80103e6b:	39 5a 14             	cmp    %ebx,0x14(%edx)
+80103e6e:	75 f0                	jne    80103e60 <exit+0x90>
       if(p->state == ZOMBIE)
-80103e58:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80103e70:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-80103e5c:	89 4a 14             	mov    %ecx,0x14(%edx)
+80103e74:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-80103e5f:	75 e7                	jne    80103e48 <exit+0xb8>
+80103e77:	75 e7                	jne    80103e60 <exit+0x90>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e61:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-80103e66:	eb 12                	jmp    80103e7a <exit+0xea>
-80103e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e6f:	90                   	nop
-80103e70:	83 c0 7c             	add    $0x7c,%eax
-80103e73:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80103e78:	74 ce                	je     80103e48 <exit+0xb8>
+80103e79:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80103e7e:	eb 0a                	jmp    80103e8a <exit+0xba>
+80103e80:	83 e8 80             	sub    $0xffffff80,%eax
+80103e83:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+80103e88:	74 d6                	je     80103e60 <exit+0x90>
     if(p->state == SLEEPING && p->chan == chan)
-80103e7a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e7e:	75 f0                	jne    80103e70 <exit+0xe0>
-80103e80:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e83:	75 eb                	jne    80103e70 <exit+0xe0>
+80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e8e:	75 f0                	jne    80103e80 <exit+0xb0>
+80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103e93:	75 eb                	jne    80103e80 <exit+0xb0>
       p->state = RUNNABLE;
-80103e85:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e8c:	eb e2                	jmp    80103e70 <exit+0xe0>
+80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e9c:	eb e2                	jmp    80103e80 <exit+0xb0>
   curproc->state = ZOMBIE;
-80103e8e:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+80103e9e:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
   sched();
-80103e95:	e8 36 fe ff ff       	call   80103cd0 <sched>
+80103ea5:	e8 66 fe ff ff       	call   80103d10 <sched>
   panic("zombie exit");
-80103e9a:	83 ec 0c             	sub    $0xc,%esp
-80103e9d:	68 68 77 10 80       	push   $0x80107768
-80103ea2:	e8 d9 c4 ff ff       	call   80100380 <panic>
+80103eaa:	83 ec 0c             	sub    $0xc,%esp
+80103ead:	68 c8 7b 10 80       	push   $0x80107bc8
+80103eb2:	e8 c9 c4 ff ff       	call   80100380 <panic>
     panic("init exiting");
-80103ea7:	83 ec 0c             	sub    $0xc,%esp
-80103eaa:	68 5b 77 10 80       	push   $0x8010775b
-80103eaf:	e8 cc c4 ff ff       	call   80100380 <panic>
-80103eb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ebb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ebf:	90                   	nop
-
-80103ec0 <wait>:
-{
-80103ec0:	55                   	push   %ebp
-80103ec1:	89 e5                	mov    %esp,%ebp
-80103ec3:	56                   	push   %esi
-80103ec4:	53                   	push   %ebx
+80103eb7:	83 ec 0c             	sub    $0xc,%esp
+80103eba:	68 bb 7b 10 80       	push   $0x80107bbb
+80103ebf:	e8 bc c4 ff ff       	call   80100380 <panic>
+80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ecf:	90                   	nop
+
+80103ed0 <wait>:
+{
+80103ed0:	55                   	push   %ebp
+80103ed1:	89 e5                	mov    %esp,%ebp
+80103ed3:	56                   	push   %esi
+80103ed4:	53                   	push   %ebx
   pushcli();
-80103ec5:	e8 86 05 00 00       	call   80104450 <pushcli>
+80103ed5:	e8 d6 08 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80103eca:	e8 21 fa ff ff       	call   801038f0 <mycpu>
+80103eda:	e8 51 fa ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80103ecf:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80103edf:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ed5:	e8 c6 05 00 00       	call   801044a0 <popcli>
+80103ee5:	e8 16 09 00 00       	call   80104800 <popcli>
   acquire(&ptable.lock);
-80103eda:	83 ec 0c             	sub    $0xc,%esp
-80103edd:	68 20 1d 11 80       	push   $0x80111d20
-80103ee2:	e8 b9 06 00 00       	call   801045a0 <acquire>
-80103ee7:	83 c4 10             	add    $0x10,%esp
+80103eea:	83 ec 0c             	sub    $0xc,%esp
+80103eed:	68 20 1d 11 80       	push   $0x80111d20
+80103ef2:	e8 09 0a 00 00       	call   80104900 <acquire>
+80103ef7:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-80103eea:	31 c0                	xor    %eax,%eax
+80103efa:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103eec:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
-80103ef1:	eb 10                	jmp    80103f03 <wait+0x43>
-80103ef3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ef7:	90                   	nop
-80103ef8:	83 c3 7c             	add    $0x7c,%ebx
-80103efb:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-80103f01:	74 1b                	je     80103f1e <wait+0x5e>
+80103efc:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+80103f01:	eb 10                	jmp    80103f13 <wait+0x43>
+80103f03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103f07:	90                   	nop
+80103f08:	83 eb 80             	sub    $0xffffff80,%ebx
+80103f0b:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
+80103f11:	74 1b                	je     80103f2e <wait+0x5e>
       if(p->parent != curproc)
-80103f03:	39 73 14             	cmp    %esi,0x14(%ebx)
-80103f06:	75 f0                	jne    80103ef8 <wait+0x38>
+80103f13:	39 73 14             	cmp    %esi,0x14(%ebx)
+80103f16:	75 f0                	jne    80103f08 <wait+0x38>
       if(p->state == ZOMBIE){
-80103f08:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103f0c:	74 62                	je     80103f70 <wait+0xb0>
+80103f18:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103f1c:	74 62                	je     80103f80 <wait+0xb0>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f0e:	83 c3 7c             	add    $0x7c,%ebx
+80103f1e:	83 eb 80             	sub    $0xffffff80,%ebx
       havekids = 1;
-80103f11:	b8 01 00 00 00       	mov    $0x1,%eax
+80103f21:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f16:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-80103f1c:	75 e5                	jne    80103f03 <wait+0x43>
+80103f26:	81 fb 54 3d 11 80    	cmp    $0x80113d54,%ebx
+80103f2c:	75 e5                	jne    80103f13 <wait+0x43>
     if(!havekids || curproc->killed){
-80103f1e:	85 c0                	test   %eax,%eax
-80103f20:	0f 84 a0 00 00 00    	je     80103fc6 <wait+0x106>
-80103f26:	8b 46 24             	mov    0x24(%esi),%eax
-80103f29:	85 c0                	test   %eax,%eax
-80103f2b:	0f 85 95 00 00 00    	jne    80103fc6 <wait+0x106>
+80103f2e:	85 c0                	test   %eax,%eax
+80103f30:	0f 84 a0 00 00 00    	je     80103fd6 <wait+0x106>
+80103f36:	8b 46 24             	mov    0x24(%esi),%eax
+80103f39:	85 c0                	test   %eax,%eax
+80103f3b:	0f 85 95 00 00 00    	jne    80103fd6 <wait+0x106>
   pushcli();
-80103f31:	e8 1a 05 00 00       	call   80104450 <pushcli>
+80103f41:	e8 6a 08 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80103f36:	e8 b5 f9 ff ff       	call   801038f0 <mycpu>
+80103f46:	e8 e5 f9 ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80103f3b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103f4b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f41:	e8 5a 05 00 00       	call   801044a0 <popcli>
+80103f51:	e8 aa 08 00 00       	call   80104800 <popcli>
   if(p == 0)
-80103f46:	85 db                	test   %ebx,%ebx
-80103f48:	0f 84 8f 00 00 00    	je     80103fdd <wait+0x11d>
+80103f56:	85 db                	test   %ebx,%ebx
+80103f58:	0f 84 8f 00 00 00    	je     80103fed <wait+0x11d>
   p->chan = chan;
-80103f4e:	89 73 20             	mov    %esi,0x20(%ebx)
+80103f5e:	89 73 20             	mov    %esi,0x20(%ebx)
   p->state = SLEEPING;
-80103f51:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103f61:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f58:	e8 73 fd ff ff       	call   80103cd0 <sched>
+80103f68:	e8 a3 fd ff ff       	call   80103d10 <sched>
   p->chan = 0;
-80103f5d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103f6d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103f64:	eb 84                	jmp    80103eea <wait+0x2a>
-80103f66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103f6d:	8d 76 00             	lea    0x0(%esi),%esi
+80103f74:	eb 84                	jmp    80103efa <wait+0x2a>
+80103f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f7d:	8d 76 00             	lea    0x0(%esi),%esi
         kfree(p->kstack);
-80103f70:	83 ec 0c             	sub    $0xc,%esp
+80103f80:	83 ec 0c             	sub    $0xc,%esp
         pid = p->pid;
-80103f73:	8b 73 10             	mov    0x10(%ebx),%esi
+80103f83:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80103f76:	ff 73 08             	push   0x8(%ebx)
-80103f79:	e8 42 e5 ff ff       	call   801024c0 <kfree>
+80103f86:	ff 73 08             	push   0x8(%ebx)
+80103f89:	e8 32 e5 ff ff       	call   801024c0 <kfree>
         p->kstack = 0;
-80103f7e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103f8e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80103f85:	5a                   	pop    %edx
-80103f86:	ff 73 04             	push   0x4(%ebx)
-80103f89:	e8 32 2e 00 00       	call   80106dc0 <freevm>
+80103f95:	5a                   	pop    %edx
+80103f96:	ff 73 04             	push   0x4(%ebx)
+80103f99:	e8 92 32 00 00       	call   80107230 <freevm>
         p->pid = 0;
-80103f8e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+80103f9e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80103f95:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80103fa5:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80103f9c:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+80103fac:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80103fa0:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80103fb0:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80103fa7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103fb7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-80103fae:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103fb5:	e8 86 05 00 00       	call   80104540 <release>
+80103fbe:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103fc5:	e8 d6 08 00 00       	call   801048a0 <release>
         return pid;
-80103fba:	83 c4 10             	add    $0x10,%esp
+80103fca:	83 c4 10             	add    $0x10,%esp
 }
-80103fbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103fc0:	89 f0                	mov    %esi,%eax
-80103fc2:	5b                   	pop    %ebx
-80103fc3:	5e                   	pop    %esi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
+80103fcd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103fd0:	89 f0                	mov    %esi,%eax
+80103fd2:	5b                   	pop    %ebx
+80103fd3:	5e                   	pop    %esi
+80103fd4:	5d                   	pop    %ebp
+80103fd5:	c3                   	ret    
       release(&ptable.lock);
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
+80103fd6:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80103fc9:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80103fd9:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-80103fce:	68 20 1d 11 80       	push   $0x80111d20
-80103fd3:	e8 68 05 00 00       	call   80104540 <release>
+80103fde:	68 20 1d 11 80       	push   $0x80111d20
+80103fe3:	e8 b8 08 00 00       	call   801048a0 <release>
       return -1;
-80103fd8:	83 c4 10             	add    $0x10,%esp
-80103fdb:	eb e0                	jmp    80103fbd <wait+0xfd>
+80103fe8:	83 c4 10             	add    $0x10,%esp
+80103feb:	eb e0                	jmp    80103fcd <wait+0xfd>
     panic("sleep");
-80103fdd:	83 ec 0c             	sub    $0xc,%esp
-80103fe0:	68 74 77 10 80       	push   $0x80107774
-80103fe5:	e8 96 c3 ff ff       	call   80100380 <panic>
-80103fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103ff0 <yield>:
-{
-80103ff0:	55                   	push   %ebp
-80103ff1:	89 e5                	mov    %esp,%ebp
-80103ff3:	53                   	push   %ebx
-80103ff4:	83 ec 10             	sub    $0x10,%esp
+80103fed:	83 ec 0c             	sub    $0xc,%esp
+80103ff0:	68 d4 7b 10 80       	push   $0x80107bd4
+80103ff5:	e8 86 c3 ff ff       	call   80100380 <panic>
+80103ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104000 <yield>:
+{
+80104000:	55                   	push   %ebp
+80104001:	89 e5                	mov    %esp,%ebp
+80104003:	53                   	push   %ebx
+80104004:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103ff7:	68 20 1d 11 80       	push   $0x80111d20
-80103ffc:	e8 9f 05 00 00       	call   801045a0 <acquire>
+80104007:	68 20 1d 11 80       	push   $0x80111d20
+8010400c:	e8 ef 08 00 00       	call   80104900 <acquire>
   pushcli();
-80104001:	e8 4a 04 00 00       	call   80104450 <pushcli>
+80104011:	e8 9a 07 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80104006:	e8 e5 f8 ff ff       	call   801038f0 <mycpu>
+80104016:	e8 15 f9 ff ff       	call   80103930 <mycpu>
   p = c->proc;
-8010400b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010401b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80104011:	e8 8a 04 00 00       	call   801044a0 <popcli>
+80104021:	e8 da 07 00 00       	call   80104800 <popcli>
   myproc()->state = RUNNABLE;
-80104016:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80104026:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-8010401d:	e8 ae fc ff ff       	call   80103cd0 <sched>
+8010402d:	e8 de fc ff ff       	call   80103d10 <sched>
   release(&ptable.lock);
-80104022:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80104029:	e8 12 05 00 00       	call   80104540 <release>
+80104032:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80104039:	e8 62 08 00 00       	call   801048a0 <release>
 }
-8010402e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104031:	83 c4 10             	add    $0x10,%esp
-80104034:	c9                   	leave  
-80104035:	c3                   	ret    
-80104036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010403d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104040 <sleep>:
-{
-80104040:	55                   	push   %ebp
-80104041:	89 e5                	mov    %esp,%ebp
-80104043:	57                   	push   %edi
-80104044:	56                   	push   %esi
-80104045:	53                   	push   %ebx
-80104046:	83 ec 0c             	sub    $0xc,%esp
-80104049:	8b 7d 08             	mov    0x8(%ebp),%edi
-8010404c:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010403e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104041:	83 c4 10             	add    $0x10,%esp
+80104044:	c9                   	leave  
+80104045:	c3                   	ret    
+80104046:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010404d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104050 <sleep>:
+{
+80104050:	55                   	push   %ebp
+80104051:	89 e5                	mov    %esp,%ebp
+80104053:	57                   	push   %edi
+80104054:	56                   	push   %esi
+80104055:	53                   	push   %ebx
+80104056:	83 ec 0c             	sub    $0xc,%esp
+80104059:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010405c:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-8010404f:	e8 fc 03 00 00       	call   80104450 <pushcli>
+8010405f:	e8 4c 07 00 00       	call   801047b0 <pushcli>
   c = mycpu();
-80104054:	e8 97 f8 ff ff       	call   801038f0 <mycpu>
+80104064:	e8 c7 f8 ff ff       	call   80103930 <mycpu>
   p = c->proc;
-80104059:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80104069:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010405f:	e8 3c 04 00 00       	call   801044a0 <popcli>
+8010406f:	e8 8c 07 00 00       	call   80104800 <popcli>
   if(p == 0)
-80104064:	85 db                	test   %ebx,%ebx
-80104066:	0f 84 87 00 00 00    	je     801040f3 <sleep+0xb3>
+80104074:	85 db                	test   %ebx,%ebx
+80104076:	0f 84 87 00 00 00    	je     80104103 <sleep+0xb3>
   if(lk == 0)
-8010406c:	85 f6                	test   %esi,%esi
-8010406e:	74 76                	je     801040e6 <sleep+0xa6>
+8010407c:	85 f6                	test   %esi,%esi
+8010407e:	74 76                	je     801040f6 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80104070:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
-80104076:	74 50                	je     801040c8 <sleep+0x88>
+80104080:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
+80104086:	74 50                	je     801040d8 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80104078:	83 ec 0c             	sub    $0xc,%esp
-8010407b:	68 20 1d 11 80       	push   $0x80111d20
-80104080:	e8 1b 05 00 00       	call   801045a0 <acquire>
+80104088:	83 ec 0c             	sub    $0xc,%esp
+8010408b:	68 20 1d 11 80       	push   $0x80111d20
+80104090:	e8 6b 08 00 00       	call   80104900 <acquire>
     release(lk);
-80104085:	89 34 24             	mov    %esi,(%esp)
-80104088:	e8 b3 04 00 00       	call   80104540 <release>
+80104095:	89 34 24             	mov    %esi,(%esp)
+80104098:	e8 03 08 00 00       	call   801048a0 <release>
   p->chan = chan;
-8010408d:	89 7b 20             	mov    %edi,0x20(%ebx)
+8010409d:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80104090:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801040a0:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80104097:	e8 34 fc ff ff       	call   80103cd0 <sched>
+801040a7:	e8 64 fc ff ff       	call   80103d10 <sched>
   p->chan = 0;
-8010409c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801040ac:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-801040a3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-801040aa:	e8 91 04 00 00       	call   80104540 <release>
+801040b3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+801040ba:	e8 e1 07 00 00       	call   801048a0 <release>
     acquire(lk);
-801040af:	89 75 08             	mov    %esi,0x8(%ebp)
-801040b2:	83 c4 10             	add    $0x10,%esp
+801040bf:	89 75 08             	mov    %esi,0x8(%ebp)
+801040c2:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040b8:	5b                   	pop    %ebx
-801040b9:	5e                   	pop    %esi
-801040ba:	5f                   	pop    %edi
-801040bb:	5d                   	pop    %ebp
+801040c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801040c8:	5b                   	pop    %ebx
+801040c9:	5e                   	pop    %esi
+801040ca:	5f                   	pop    %edi
+801040cb:	5d                   	pop    %ebp
     acquire(lk);
-801040bc:	e9 df 04 00 00       	jmp    801045a0 <acquire>
-801040c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801040cc:	e9 2f 08 00 00       	jmp    80104900 <acquire>
+801040d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   p->chan = chan;
-801040c8:	89 7b 20             	mov    %edi,0x20(%ebx)
+801040d8:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-801040cb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801040db:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-801040d2:	e8 f9 fb ff ff       	call   80103cd0 <sched>
+801040e2:	e8 29 fc ff ff       	call   80103d10 <sched>
   p->chan = 0;
-801040d7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801040e7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-801040de:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040e1:	5b                   	pop    %ebx
-801040e2:	5e                   	pop    %esi
-801040e3:	5f                   	pop    %edi
-801040e4:	5d                   	pop    %ebp
-801040e5:	c3                   	ret    
+801040ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801040f1:	5b                   	pop    %ebx
+801040f2:	5e                   	pop    %esi
+801040f3:	5f                   	pop    %edi
+801040f4:	5d                   	pop    %ebp
+801040f5:	c3                   	ret    
     panic("sleep without lk");
-801040e6:	83 ec 0c             	sub    $0xc,%esp
-801040e9:	68 7a 77 10 80       	push   $0x8010777a
-801040ee:	e8 8d c2 ff ff       	call   80100380 <panic>
+801040f6:	83 ec 0c             	sub    $0xc,%esp
+801040f9:	68 da 7b 10 80       	push   $0x80107bda
+801040fe:	e8 7d c2 ff ff       	call   80100380 <panic>
     panic("sleep");
-801040f3:	83 ec 0c             	sub    $0xc,%esp
-801040f6:	68 74 77 10 80       	push   $0x80107774
-801040fb:	e8 80 c2 ff ff       	call   80100380 <panic>
+80104103:	83 ec 0c             	sub    $0xc,%esp
+80104106:	68 d4 7b 10 80       	push   $0x80107bd4
+8010410b:	e8 70 c2 ff ff       	call   80100380 <panic>
 
-80104100 <wakeup>:
-}
+80104110 <wakeup>:
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-80104100:	55                   	push   %ebp
-80104101:	89 e5                	mov    %esp,%ebp
-80104103:	53                   	push   %ebx
-80104104:	83 ec 10             	sub    $0x10,%esp
-80104107:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104110:	55                   	push   %ebp
+80104111:	89 e5                	mov    %esp,%ebp
+80104113:	53                   	push   %ebx
+80104114:	83 ec 10             	sub    $0x10,%esp
+80104117:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-8010410a:	68 20 1d 11 80       	push   $0x80111d20
-8010410f:	e8 8c 04 00 00       	call   801045a0 <acquire>
-80104114:	83 c4 10             	add    $0x10,%esp
+8010411a:	68 20 1d 11 80       	push   $0x80111d20
+8010411f:	e8 dc 07 00 00       	call   80104900 <acquire>
+80104124:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104117:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-8010411c:	eb 0c                	jmp    8010412a <wakeup+0x2a>
-8010411e:	66 90                	xchg   %ax,%ax
-80104120:	83 c0 7c             	add    $0x7c,%eax
-80104123:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80104128:	74 1c                	je     80104146 <wakeup+0x46>
+80104127:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010412c:	eb 0c                	jmp    8010413a <wakeup+0x2a>
+8010412e:	66 90                	xchg   %ax,%ax
+80104130:	83 e8 80             	sub    $0xffffff80,%eax
+80104133:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+80104138:	74 1c                	je     80104156 <wakeup+0x46>
     if(p->state == SLEEPING && p->chan == chan)
-8010412a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-8010412e:	75 f0                	jne    80104120 <wakeup+0x20>
-80104130:	3b 58 20             	cmp    0x20(%eax),%ebx
-80104133:	75 eb                	jne    80104120 <wakeup+0x20>
+8010413a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010413e:	75 f0                	jne    80104130 <wakeup+0x20>
+80104140:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104143:	75 eb                	jne    80104130 <wakeup+0x20>
       p->state = RUNNABLE;
-80104135:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104145:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010413c:	83 c0 7c             	add    $0x7c,%eax
-8010413f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80104144:	75 e4                	jne    8010412a <wakeup+0x2a>
+8010414c:	83 e8 80             	sub    $0xffffff80,%eax
+8010414f:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+80104154:	75 e4                	jne    8010413a <wakeup+0x2a>
   wakeup1(chan);
   release(&ptable.lock);
-80104146:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
+80104156:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
 }
-8010414d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104150:	c9                   	leave  
+8010415d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104160:	c9                   	leave  
   release(&ptable.lock);
-80104151:	e9 ea 03 00 00       	jmp    80104540 <release>
-80104156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010415d:	8d 76 00             	lea    0x0(%esi),%esi
+80104161:	e9 3a 07 00 00       	jmp    801048a0 <release>
+80104166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010416d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104160 <kill>:
+80104170 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104160:	55                   	push   %ebp
-80104161:	89 e5                	mov    %esp,%ebp
-80104163:	53                   	push   %ebx
-80104164:	83 ec 10             	sub    $0x10,%esp
-80104167:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104170:	55                   	push   %ebp
+80104171:	89 e5                	mov    %esp,%ebp
+80104173:	53                   	push   %ebx
+80104174:	83 ec 10             	sub    $0x10,%esp
+80104177:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-8010416a:	68 20 1d 11 80       	push   $0x80111d20
-8010416f:	e8 2c 04 00 00       	call   801045a0 <acquire>
-80104174:	83 c4 10             	add    $0x10,%esp
+8010417a:	68 20 1d 11 80       	push   $0x80111d20
+8010417f:	e8 7c 07 00 00       	call   80104900 <acquire>
+80104184:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104177:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-8010417c:	eb 0c                	jmp    8010418a <kill+0x2a>
-8010417e:	66 90                	xchg   %ax,%ax
-80104180:	83 c0 7c             	add    $0x7c,%eax
-80104183:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80104188:	74 36                	je     801041c0 <kill+0x60>
+80104187:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010418c:	eb 0c                	jmp    8010419a <kill+0x2a>
+8010418e:	66 90                	xchg   %ax,%ax
+80104190:	83 e8 80             	sub    $0xffffff80,%eax
+80104193:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+80104198:	74 36                	je     801041d0 <kill+0x60>
     if(p->pid == pid){
-8010418a:	39 58 10             	cmp    %ebx,0x10(%eax)
-8010418d:	75 f1                	jne    80104180 <kill+0x20>
+8010419a:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010419d:	75 f1                	jne    80104190 <kill+0x20>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-8010418f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010419f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-80104193:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801041a3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-8010419a:	75 07                	jne    801041a3 <kill+0x43>
+801041aa:	75 07                	jne    801041b3 <kill+0x43>
         p->state = RUNNABLE;
-8010419c:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801041ac:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-801041a3:	83 ec 0c             	sub    $0xc,%esp
-801041a6:	68 20 1d 11 80       	push   $0x80111d20
-801041ab:	e8 90 03 00 00       	call   80104540 <release>
+801041b3:	83 ec 0c             	sub    $0xc,%esp
+801041b6:	68 20 1d 11 80       	push   $0x80111d20
+801041bb:	e8 e0 06 00 00       	call   801048a0 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-801041b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-801041b3:	83 c4 10             	add    $0x10,%esp
-801041b6:	31 c0                	xor    %eax,%eax
+801041c3:	83 c4 10             	add    $0x10,%esp
+801041c6:	31 c0                	xor    %eax,%eax
 }
-801041b8:	c9                   	leave  
-801041b9:	c3                   	ret    
-801041ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801041c8:	c9                   	leave  
+801041c9:	c3                   	ret    
+801041ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
-801041c0:	83 ec 0c             	sub    $0xc,%esp
-801041c3:	68 20 1d 11 80       	push   $0x80111d20
-801041c8:	e8 73 03 00 00       	call   80104540 <release>
+801041d0:	83 ec 0c             	sub    $0xc,%esp
+801041d3:	68 20 1d 11 80       	push   $0x80111d20
+801041d8:	e8 c3 06 00 00       	call   801048a0 <release>
 }
-801041cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-801041d0:	83 c4 10             	add    $0x10,%esp
-801041d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801041e0:	83 c4 10             	add    $0x10,%esp
+801041e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041d8:	c9                   	leave  
-801041d9:	c3                   	ret    
-801041da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801041e8:	c9                   	leave  
+801041e9:	c3                   	ret    
+801041ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801041e0 <procdump>:
+801041f0 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041e0:	55                   	push   %ebp
-801041e1:	89 e5                	mov    %esp,%ebp
-801041e3:	57                   	push   %edi
-801041e4:	56                   	push   %esi
-801041e5:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041e8:	53                   	push   %ebx
-801041e9:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
-801041ee:	83 ec 3c             	sub    $0x3c,%esp
-801041f1:	eb 24                	jmp    80104217 <procdump+0x37>
-801041f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801041f7:	90                   	nop
+801041f0:	55                   	push   %ebp
+801041f1:	89 e5                	mov    %esp,%ebp
+801041f3:	57                   	push   %edi
+801041f4:	56                   	push   %esi
+801041f5:	8d 75 e8             	lea    -0x18(%ebp),%esi
+801041f8:	53                   	push   %ebx
+801041f9:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
+801041fe:	83 ec 3c             	sub    $0x3c,%esp
+80104201:	eb 24                	jmp    80104227 <procdump+0x37>
+80104203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104207:	90                   	nop
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-801041f8:	83 ec 0c             	sub    $0xc,%esp
-801041fb:	68 f7 7a 10 80       	push   $0x80107af7
-80104200:	e8 9b c4 ff ff       	call   801006a0 <cprintf>
-80104205:	83 c4 10             	add    $0x10,%esp
+80104208:	83 ec 0c             	sub    $0xc,%esp
+8010420b:	68 87 7f 10 80       	push   $0x80107f87
+80104210:	e8 8b c4 ff ff       	call   801006a0 <cprintf>
+80104215:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104208:	83 c3 7c             	add    $0x7c,%ebx
-8010420b:	81 fb c0 3c 11 80    	cmp    $0x80113cc0,%ebx
-80104211:	0f 84 81 00 00 00    	je     80104298 <procdump+0xb8>
+80104218:	83 eb 80             	sub    $0xffffff80,%ebx
+8010421b:	81 fb c0 3d 11 80    	cmp    $0x80113dc0,%ebx
+80104221:	0f 84 81 00 00 00    	je     801042a8 <procdump+0xb8>
     if(p->state == UNUSED)
-80104217:	8b 43 a0             	mov    -0x60(%ebx),%eax
-8010421a:	85 c0                	test   %eax,%eax
-8010421c:	74 ea                	je     80104208 <procdump+0x28>
+80104227:	8b 43 a0             	mov    -0x60(%ebx),%eax
+8010422a:	85 c0                	test   %eax,%eax
+8010422c:	74 ea                	je     80104218 <procdump+0x28>
       state = "???";
-8010421e:	ba 8b 77 10 80       	mov    $0x8010778b,%edx
+8010422e:	ba eb 7b 10 80       	mov    $0x80107beb,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-80104223:	83 f8 05             	cmp    $0x5,%eax
-80104226:	77 11                	ja     80104239 <procdump+0x59>
-80104228:	8b 14 85 ec 77 10 80 	mov    -0x7fef8814(,%eax,4),%edx
+80104233:	83 f8 05             	cmp    $0x5,%eax
+80104236:	77 11                	ja     80104249 <procdump+0x59>
+80104238:	8b 14 85 5c 7c 10 80 	mov    -0x7fef83a4(,%eax,4),%edx
       state = "???";
-8010422f:	b8 8b 77 10 80       	mov    $0x8010778b,%eax
-80104234:	85 d2                	test   %edx,%edx
-80104236:	0f 44 d0             	cmove  %eax,%edx
+8010423f:	b8 eb 7b 10 80       	mov    $0x80107beb,%eax
+80104244:	85 d2                	test   %edx,%edx
+80104246:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104239:	53                   	push   %ebx
-8010423a:	52                   	push   %edx
-8010423b:	ff 73 a4             	push   -0x5c(%ebx)
-8010423e:	68 8f 77 10 80       	push   $0x8010778f
-80104243:	e8 58 c4 ff ff       	call   801006a0 <cprintf>
+80104249:	53                   	push   %ebx
+8010424a:	52                   	push   %edx
+8010424b:	ff 73 a4             	push   -0x5c(%ebx)
+8010424e:	68 ef 7b 10 80       	push   $0x80107bef
+80104253:	e8 48 c4 ff ff       	call   801006a0 <cprintf>
     if(p->state == SLEEPING){
-80104248:	83 c4 10             	add    $0x10,%esp
-8010424b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-8010424f:	75 a7                	jne    801041f8 <procdump+0x18>
+80104258:	83 c4 10             	add    $0x10,%esp
+8010425b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+8010425f:	75 a7                	jne    80104208 <procdump+0x18>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104251:	83 ec 08             	sub    $0x8,%esp
-80104254:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104257:	8d 7d c0             	lea    -0x40(%ebp),%edi
-8010425a:	50                   	push   %eax
-8010425b:	8b 43 b0             	mov    -0x50(%ebx),%eax
-8010425e:	8b 40 0c             	mov    0xc(%eax),%eax
-80104261:	83 c0 08             	add    $0x8,%eax
-80104264:	50                   	push   %eax
-80104265:	e8 86 01 00 00       	call   801043f0 <getcallerpcs>
+80104261:	83 ec 08             	sub    $0x8,%esp
+80104264:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104267:	8d 7d c0             	lea    -0x40(%ebp),%edi
+8010426a:	50                   	push   %eax
+8010426b:	8b 43 b0             	mov    -0x50(%ebx),%eax
+8010426e:	8b 40 0c             	mov    0xc(%eax),%eax
+80104271:	83 c0 08             	add    $0x8,%eax
+80104274:	50                   	push   %eax
+80104275:	e8 d6 04 00 00       	call   80104750 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010426a:	83 c4 10             	add    $0x10,%esp
-8010426d:	8d 76 00             	lea    0x0(%esi),%esi
-80104270:	8b 17                	mov    (%edi),%edx
-80104272:	85 d2                	test   %edx,%edx
-80104274:	74 82                	je     801041f8 <procdump+0x18>
+8010427a:	83 c4 10             	add    $0x10,%esp
+8010427d:	8d 76 00             	lea    0x0(%esi),%esi
+80104280:	8b 17                	mov    (%edi),%edx
+80104282:	85 d2                	test   %edx,%edx
+80104284:	74 82                	je     80104208 <procdump+0x18>
         cprintf(" %p", pc[i]);
-80104276:	83 ec 08             	sub    $0x8,%esp
+80104286:	83 ec 08             	sub    $0x8,%esp
       for(i=0; i<10 && pc[i] != 0; i++)
-80104279:	83 c7 04             	add    $0x4,%edi
+80104289:	83 c7 04             	add    $0x4,%edi
         cprintf(" %p", pc[i]);
-8010427c:	52                   	push   %edx
-8010427d:	68 e1 71 10 80       	push   $0x801071e1
-80104282:	e8 19 c4 ff ff       	call   801006a0 <cprintf>
+8010428c:	52                   	push   %edx
+8010428d:	68 41 76 10 80       	push   $0x80107641
+80104292:	e8 09 c4 ff ff       	call   801006a0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104287:	83 c4 10             	add    $0x10,%esp
-8010428a:	39 fe                	cmp    %edi,%esi
-8010428c:	75 e2                	jne    80104270 <procdump+0x90>
-8010428e:	e9 65 ff ff ff       	jmp    801041f8 <procdump+0x18>
-80104293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104297:	90                   	nop
-  }
-}
-80104298:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010429b:	5b                   	pop    %ebx
-8010429c:	5e                   	pop    %esi
-8010429d:	5f                   	pop    %edi
-8010429e:	5d                   	pop    %ebp
-8010429f:	c3                   	ret    
+80104297:	83 c4 10             	add    $0x10,%esp
+8010429a:	39 fe                	cmp    %edi,%esi
+8010429c:	75 e2                	jne    80104280 <procdump+0x90>
+8010429e:	e9 65 ff ff ff       	jmp    80104208 <procdump+0x18>
+801042a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801042a7:	90                   	nop
+  }
+}
+801042a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801042ab:	5b                   	pop    %ebx
+801042ac:	5e                   	pop    %esi
+801042ad:	5f                   	pop    %edi
+801042ae:	5d                   	pop    %ebp
+801042af:	c3                   	ret    
+
+801042b0 <thread_create>:
+
+// implemented by us
+
+int thread_create(void (*fcn)(void *),void *arg,void* stack){
+801042b0:	55                   	push   %ebp
+801042b1:	89 e5                	mov    %esp,%ebp
+801042b3:	57                   	push   %edi
+801042b4:	56                   	push   %esi
+801042b5:	53                   	push   %ebx
+801042b6:	83 ec 1c             	sub    $0x1c,%esp
+  if((uint)stack==0) // if no memory is allocated to the stack return -1
+801042b9:	8b 45 10             	mov    0x10(%ebp),%eax
+801042bc:	85 c0                	test   %eax,%eax
+801042be:	0f 84 11 01 00 00    	je     801043d5 <thread_create+0x125>
+  pushcli();
+801042c4:	e8 e7 04 00 00       	call   801047b0 <pushcli>
+  c = mycpu();
+801042c9:	e8 62 f6 ff ff       	call   80103930 <mycpu>
+  p = c->proc;
+801042ce:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
+801042d4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  popcli();
+801042d7:	e8 24 05 00 00       	call   80104800 <popcli>
+  }
+  int i,pid;  // pid is the process id 
+  struct proc *newproc;			//new process / child process
+  struct proc *current_proc = myproc();  //Current process in which thread is being created
+
+  if((newproc=allocproc())==0)return -1;  // allocating a new process to child if not successful return -1
+801042dc:	e8 0f f5 ff ff       	call   801037f0 <allocproc>
+801042e1:	89 c3                	mov    %eax,%ebx
+801042e3:	85 c0                	test   %eax,%eax
+801042e5:	0f 84 ea 00 00 00    	je     801043d5 <thread_create+0x125>
+  newproc->pgdir = current_proc->pgdir;        // making sure both have same page directory
+801042eb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  newproc->sz = current_proc->sz;              // making sure both have same size
+  newproc->parent = current_proc;              // pointing parent to child
+  *newproc->tf = *current_proc->tf;            // same trap frame
+801042ee:	8b 7b 18             	mov    0x18(%ebx),%edi
+801042f1:	b9 13 00 00 00       	mov    $0x13,%ecx
+  newproc->pgdir = current_proc->pgdir;        // making sure both have same page directory
+801042f6:	8b 42 04             	mov    0x4(%edx),%eax
+801042f9:	89 43 04             	mov    %eax,0x4(%ebx)
+  newproc->sz = current_proc->sz;              // making sure both have same size
+801042fc:	8b 02                	mov    (%edx),%eax
+  newproc->parent = current_proc;              // pointing parent to child
+801042fe:	89 53 14             	mov    %edx,0x14(%ebx)
+  newproc->sz = current_proc->sz;              // making sure both have same size
+80104301:	89 03                	mov    %eax,(%ebx)
+  *newproc->tf = *current_proc->tf;            // same trap frame
+80104303:	8b 72 18             	mov    0x18(%edx),%esi
+80104306:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+
+  newproc->isThread = 1;                  // telling new process it is a thread
+80104308:	c7 43 7c 01 00 00 00 	movl   $0x1,0x7c(%ebx)
+
+  newproc->tf->eax = 0;                   // when new process gets finished 0 will be returned
+
+  newproc->tf->eip = (int)fcn;            // this is the function on which thread will work
+8010430f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  newproc->tf->esp = (int) stack + 4096;  
+  newproc->tf->esp -= 4;
+  *((int*)(newproc->tf->esp)) = (int) arg;
+  newproc->tf->esp-=4;
+  *((int*)(newproc->tf->esp)) = 0xffffffff;
+  for(i=0;i<NOFILE;++i)
+80104312:	31 f6                	xor    %esi,%esi
+80104314:	89 d7                	mov    %edx,%edi
+  newproc->tf->eax = 0;                   // when new process gets finished 0 will be returned
+80104316:	8b 43 18             	mov    0x18(%ebx),%eax
+80104319:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+  newproc->tf->eip = (int)fcn;            // this is the function on which thread will work
+80104320:	8b 43 18             	mov    0x18(%ebx),%eax
+80104323:	89 48 38             	mov    %ecx,0x38(%eax)
+  newproc->tf->esp = (int) stack + 4096;  
+80104326:	8b 45 10             	mov    0x10(%ebp),%eax
+80104329:	8b 4b 18             	mov    0x18(%ebx),%ecx
+8010432c:	05 00 10 00 00       	add    $0x1000,%eax
+80104331:	89 41 44             	mov    %eax,0x44(%ecx)
+  newproc->tf->esp -= 4;
+80104334:	8b 43 18             	mov    0x18(%ebx),%eax
+  *((int*)(newproc->tf->esp)) = (int) arg;
+80104337:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  newproc->tf->esp -= 4;
+8010433a:	83 68 44 04          	subl   $0x4,0x44(%eax)
+  *((int*)(newproc->tf->esp)) = (int) arg;
+8010433e:	8b 43 18             	mov    0x18(%ebx),%eax
+80104341:	8b 40 44             	mov    0x44(%eax),%eax
+80104344:	89 08                	mov    %ecx,(%eax)
+  newproc->tf->esp-=4;
+80104346:	8b 43 18             	mov    0x18(%ebx),%eax
+80104349:	83 68 44 04          	subl   $0x4,0x44(%eax)
+  *((int*)(newproc->tf->esp)) = 0xffffffff;
+8010434d:	8b 43 18             	mov    0x18(%ebx),%eax
+80104350:	8b 40 44             	mov    0x44(%eax),%eax
+80104353:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
+  for(i=0;i<NOFILE;++i)
+80104359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  {
+  	if(current_proc->ofile[i])
+80104360:	8b 44 b7 28          	mov    0x28(%edi,%esi,4),%eax
+80104364:	85 c0                	test   %eax,%eax
+80104366:	74 10                	je     80104378 <thread_create+0xc8>
+	{
+		newproc->ofile[i] = filedup(current_proc->ofile[i]); // copying all opened files from current process to new process
+80104368:	83 ec 0c             	sub    $0xc,%esp
+8010436b:	50                   	push   %eax
+8010436c:	e8 2f cb ff ff       	call   80100ea0 <filedup>
+80104371:	83 c4 10             	add    $0x10,%esp
+80104374:	89 44 b3 28          	mov    %eax,0x28(%ebx,%esi,4)
+  for(i=0;i<NOFILE;++i)
+80104378:	83 c6 01             	add    $0x1,%esi
+8010437b:	83 fe 10             	cmp    $0x10,%esi
+8010437e:	75 e0                	jne    80104360 <thread_create+0xb0>
+	}	
+  }	
+  newproc->cwd = idup(current_proc->cwd);
+80104380:	83 ec 0c             	sub    $0xc,%esp
+80104383:	ff 77 68             	push   0x68(%edi)
+80104386:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80104389:	e8 c2 d3 ff ff       	call   80101750 <idup>
+  safestrcpy(newproc->name,current_proc->name,sizeof(current_proc->name));
+8010438e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80104391:	83 c4 0c             	add    $0xc,%esp
+  newproc->cwd = idup(current_proc->cwd);
+80104394:	89 43 68             	mov    %eax,0x68(%ebx)
+  safestrcpy(newproc->name,current_proc->name,sizeof(current_proc->name));
+80104397:	8d 43 6c             	lea    0x6c(%ebx),%eax
+8010439a:	83 c2 6c             	add    $0x6c,%edx
+8010439d:	6a 10                	push   $0x10
+8010439f:	52                   	push   %edx
+801043a0:	50                   	push   %eax
+801043a1:	e8 da 07 00 00       	call   80104b80 <safestrcpy>
+  pid = newproc->pid;
+801043a6:	8b 73 10             	mov    0x10(%ebx),%esi
+  acquire(&ptable.lock);
+801043a9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+801043b0:	e8 4b 05 00 00       	call   80104900 <acquire>
+  newproc->state = RUNNABLE;
+801043b5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+801043bc:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+801043c3:	e8 d8 04 00 00       	call   801048a0 <release>
+  return pid;	
+801043c8:	83 c4 10             	add    $0x10,%esp
+}
+801043cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801043ce:	89 f0                	mov    %esi,%eax
+801043d0:	5b                   	pop    %ebx
+801043d1:	5e                   	pop    %esi
+801043d2:	5f                   	pop    %edi
+801043d3:	5d                   	pop    %ebp
+801043d4:	c3                   	ret    
+    return -1;
+801043d5:	be ff ff ff ff       	mov    $0xffffffff,%esi
+801043da:	eb ef                	jmp    801043cb <thread_create+0x11b>
+801043dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801043e0 <thread_join>:
+
+int thread_join(void){
+801043e0:	55                   	push   %ebp
+801043e1:	89 e5                	mov    %esp,%ebp
+801043e3:	56                   	push   %esi
+801043e4:	53                   	push   %ebx
+  pushcli();
+801043e5:	e8 c6 03 00 00       	call   801047b0 <pushcli>
+  c = mycpu();
+801043ea:	e8 41 f5 ff ff       	call   80103930 <mycpu>
+  p = c->proc;
+801043ef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801043f5:	e8 06 04 00 00       	call   80104800 <popcli>
+	struct proc *i;
+	int havekids; // havekids is the boolean value to check if the thread has any child or not 
+	int pid;
+	struct proc *current_proc = myproc(); //Current process in which thread is being created
+
+	acquire(&ptable.lock);
+801043fa:	83 ec 0c             	sub    $0xc,%esp
+801043fd:	68 20 1d 11 80       	push   $0x80111d20
+80104402:	e8 f9 04 00 00       	call   80104900 <acquire>
+80104407:	83 c4 10             	add    $0x10,%esp
+	while(1){
+		havekids = 0;  
+8010440a:	31 d2                	xor    %edx,%edx
+		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
+8010440c:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80104411:	eb 0f                	jmp    80104422 <thread_join+0x42>
+80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104417:	90                   	nop
+80104418:	83 e8 80             	sub    $0xffffff80,%eax
+8010441b:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+80104420:	74 26                	je     80104448 <thread_join+0x68>
+			if(i->isThread!=0 && i->parent==current_proc){ //if the process is a thread and child of the current process
+80104422:	8b 48 7c             	mov    0x7c(%eax),%ecx
+80104425:	85 c9                	test   %ecx,%ecx
+80104427:	74 ef                	je     80104418 <thread_join+0x38>
+80104429:	39 58 14             	cmp    %ebx,0x14(%eax)
+8010442c:	75 ea                	jne    80104418 <thread_join+0x38>
+				havekids = 1;
+				if(i->state==ZOMBIE){ //if it's in zombie state then re-initialiaze to make it available to be  used by other processes and return 
+8010442e:	83 78 0c 05          	cmpl   $0x5,0xc(%eax)
+80104432:	74 50                	je     80104484 <thread_join+0xa4>
+		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
+80104434:	83 e8 80             	sub    $0xffffff80,%eax
+				havekids = 1;
+80104437:	ba 01 00 00 00       	mov    $0x1,%edx
+		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
+8010443c:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+80104441:	75 df                	jne    80104422 <thread_join+0x42>
+80104443:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104447:	90                   	nop
+					return pid;
+				}
+			}	
+			
+		}
+		if(!havekids||current_proc->killed){// if it doesn't have any child or the current process itself is aborted then return -1
+80104448:	85 d2                	test   %edx,%edx
+8010444a:	74 7b                	je     801044c7 <thread_join+0xe7>
+8010444c:	8b 43 24             	mov    0x24(%ebx),%eax
+8010444f:	85 c0                	test   %eax,%eax
+80104451:	75 74                	jne    801044c7 <thread_join+0xe7>
+  pushcli();
+80104453:	e8 58 03 00 00       	call   801047b0 <pushcli>
+  c = mycpu();
+80104458:	e8 d3 f4 ff ff       	call   80103930 <mycpu>
+  p = c->proc;
+8010445d:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80104463:	e8 98 03 00 00       	call   80104800 <popcli>
+  if(p == 0)
+80104468:	85 f6                	test   %esi,%esi
+8010446a:	74 79                	je     801044e5 <thread_join+0x105>
+  p->chan = chan;
+8010446c:	89 5e 20             	mov    %ebx,0x20(%esi)
+  p->state = SLEEPING;
+8010446f:	c7 46 0c 02 00 00 00 	movl   $0x2,0xc(%esi)
+  sched();
+80104476:	e8 95 f8 ff ff       	call   80103d10 <sched>
+  p->chan = 0;
+8010447b:	c7 46 20 00 00 00 00 	movl   $0x0,0x20(%esi)
+}
+80104482:	eb 86                	jmp    8010440a <thread_join+0x2a>
+					release(&ptable.lock);
+80104484:	83 ec 0c             	sub    $0xc,%esp
+					pid = i->pid;
+80104487:	8b 58 10             	mov    0x10(%eax),%ebx
+					i->name[0] = 0;
+8010448a:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
+					i->kstack = 0;
+8010448e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+					i->pid = 0;
+80104495:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
+					i->parent = 0;
+8010449c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
+					i->killed = 0;
+801044a3:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
+					i->state = UNUSED;
+801044aa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
+					release(&ptable.lock);
+801044b1:	68 20 1d 11 80       	push   $0x80111d20
+801044b6:	e8 e5 03 00 00       	call   801048a0 <release>
+					return pid;
+801044bb:	83 c4 10             	add    $0x10,%esp
+			return -1;
+		}
+		sleep(current_proc,&ptable.lock); // wait for any thread to complete its execution
+	}
+
+}
+801044be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044c1:	89 d8                	mov    %ebx,%eax
+801044c3:	5b                   	pop    %ebx
+801044c4:	5e                   	pop    %esi
+801044c5:	5d                   	pop    %ebp
+801044c6:	c3                   	ret    
+			release(&ptable.lock);
+801044c7:	83 ec 0c             	sub    $0xc,%esp
+			return -1;
+801044ca:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+			release(&ptable.lock);
+801044cf:	68 20 1d 11 80       	push   $0x80111d20
+801044d4:	e8 c7 03 00 00       	call   801048a0 <release>
+			return -1;
+801044d9:	83 c4 10             	add    $0x10,%esp
+}
+801044dc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044df:	89 d8                	mov    %ebx,%eax
+801044e1:	5b                   	pop    %ebx
+801044e2:	5e                   	pop    %esi
+801044e3:	5d                   	pop    %ebp
+801044e4:	c3                   	ret    
+    panic("sleep");
+801044e5:	83 ec 0c             	sub    $0xc,%esp
+801044e8:	68 d4 7b 10 80       	push   $0x80107bd4
+801044ed:	e8 8e be ff ff       	call   80100380 <panic>
+801044f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104500 <thread_exit>:
 
-801042a0 <initsleeplock>:
+
+int thread_exit(){
+80104500:	55                   	push   %ebp
+80104501:	89 e5                	mov    %esp,%ebp
+80104503:	57                   	push   %edi
+80104504:	56                   	push   %esi
+80104505:	53                   	push   %ebx
+80104506:	83 ec 0c             	sub    $0xc,%esp
+	struct proc *current_proc = myproc();
+80104509:	e8 a2 f4 ff ff       	call   801039b0 <myproc>
+	struct proc *i;
+	int file;
+
+	if(current_proc==initproc)
+8010450e:	39 05 54 3d 11 80    	cmp    %eax,0x80113d54
+80104514:	0f 84 cd 00 00 00    	je     801045e7 <thread_exit+0xe7>
+8010451a:	89 c3                	mov    %eax,%ebx
+8010451c:	8d 70 28             	lea    0x28(%eax),%esi
+8010451f:	8d 78 68             	lea    0x68(%eax),%edi
+80104522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+	{
+		panic("exit init");
+	}
+	for(file = 0;file<NOFILE;file++){
+		if(current_proc->ofile[file]){ 
+80104528:	8b 06                	mov    (%esi),%eax
+8010452a:	85 c0                	test   %eax,%eax
+8010452c:	74 12                	je     80104540 <thread_exit+0x40>
+			fileclose(current_proc->ofile[file]); // closing all opened files of current process
+8010452e:	83 ec 0c             	sub    $0xc,%esp
+80104531:	50                   	push   %eax
+80104532:	e8 b9 c9 ff ff       	call   80100ef0 <fileclose>
+			current_proc->ofile[file] = 0;
+80104537:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+8010453d:	83 c4 10             	add    $0x10,%esp
+	for(file = 0;file<NOFILE;file++){
+80104540:	83 c6 04             	add    $0x4,%esi
+80104543:	39 f7                	cmp    %esi,%edi
+80104545:	75 e1                	jne    80104528 <thread_exit+0x28>
+		}
+	}
+	begin_op();
+80104547:	e8 14 e8 ff ff       	call   80102d60 <begin_op>
+	iput(current_proc->cwd);
+8010454c:	83 ec 0c             	sub    $0xc,%esp
+8010454f:	ff 73 68             	push   0x68(%ebx)
+80104552:	e8 59 d3 ff ff       	call   801018b0 <iput>
+	end_op();
+80104557:	e8 74 e8 ff ff       	call   80102dd0 <end_op>
+	current_proc->cwd = 0;
+8010455c:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+	acquire(&ptable.lock);
+80104563:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+8010456a:	e8 91 03 00 00       	call   80104900 <acquire>
+
+	wakeup1(current_proc->parent);
+8010456f:	8b 43 14             	mov    0x14(%ebx),%eax
+80104572:	e8 39 f2 ff ff       	call   801037b0 <wakeup1>
+	
+	for(i=ptable.proc;i<&ptable.proc[NPROC];++i){
+		if(i->parent==current_proc){
+			i->parent = initproc;
+80104577:	8b 0d 54 3d 11 80    	mov    0x80113d54,%ecx
+8010457d:	83 c4 10             	add    $0x10,%esp
+	for(i=ptable.proc;i<&ptable.proc[NPROC];++i){
+80104580:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
+80104585:	eb 14                	jmp    8010459b <thread_exit+0x9b>
+80104587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010458e:	66 90                	xchg   %ax,%ax
+80104590:	83 ea 80             	sub    $0xffffff80,%edx
+80104593:	81 fa 54 3d 11 80    	cmp    $0x80113d54,%edx
+80104599:	74 33                	je     801045ce <thread_exit+0xce>
+		if(i->parent==current_proc){
+8010459b:	39 5a 14             	cmp    %ebx,0x14(%edx)
+8010459e:	75 f0                	jne    80104590 <thread_exit+0x90>
+			if(i->state==ZOMBIE){
+801045a0:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+			i->parent = initproc;
+801045a4:	89 4a 14             	mov    %ecx,0x14(%edx)
+			if(i->state==ZOMBIE){
+801045a7:	75 e7                	jne    80104590 <thread_exit+0x90>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801045a9:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+801045ae:	eb 0a                	jmp    801045ba <thread_exit+0xba>
+801045b0:	83 e8 80             	sub    $0xffffff80,%eax
+801045b3:	3d 54 3d 11 80       	cmp    $0x80113d54,%eax
+801045b8:	74 d6                	je     80104590 <thread_exit+0x90>
+    if(p->state == SLEEPING && p->chan == chan)
+801045ba:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801045be:	75 f0                	jne    801045b0 <thread_exit+0xb0>
+801045c0:	3b 48 20             	cmp    0x20(%eax),%ecx
+801045c3:	75 eb                	jne    801045b0 <thread_exit+0xb0>
+      p->state = RUNNABLE;
+801045c5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801045cc:	eb e2                	jmp    801045b0 <thread_exit+0xb0>
+				wakeup1(initproc);
+			}
+		}
+	}
+	current_proc->state = ZOMBIE;
+801045ce:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+	sched();
+801045d5:	e8 36 f7 ff ff       	call   80103d10 <sched>
+	panic("exit zombie");
+801045da:	83 ec 0c             	sub    $0xc,%esp
+801045dd:	68 02 7c 10 80       	push   $0x80107c02
+801045e2:	e8 99 bd ff ff       	call   80100380 <panic>
+		panic("exit init");
+801045e7:	83 ec 0c             	sub    $0xc,%esp
+801045ea:	68 f8 7b 10 80       	push   $0x80107bf8
+801045ef:	e8 8c bd ff ff       	call   80100380 <panic>
+801045f4:	66 90                	xchg   %ax,%ax
+801045f6:	66 90                	xchg   %ax,%ax
+801045f8:	66 90                	xchg   %ax,%ax
+801045fa:	66 90                	xchg   %ax,%ax
+801045fc:	66 90                	xchg   %ax,%ax
+801045fe:	66 90                	xchg   %ax,%ax
+
+80104600 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	55                   	push   %ebp
-801042a1:	89 e5                	mov    %esp,%ebp
-801042a3:	53                   	push   %ebx
-801042a4:	83 ec 0c             	sub    $0xc,%esp
-801042a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104600:	55                   	push   %ebp
+80104601:	89 e5                	mov    %esp,%ebp
+80104603:	53                   	push   %ebx
+80104604:	83 ec 0c             	sub    $0xc,%esp
+80104607:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042aa:	68 04 78 10 80       	push   $0x80107804
-801042af:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b2:	50                   	push   %eax
-801042b3:	e8 18 01 00 00       	call   801043d0 <initlock>
+8010460a:	68 74 7c 10 80       	push   $0x80107c74
+8010460f:	8d 43 04             	lea    0x4(%ebx),%eax
+80104612:	50                   	push   %eax
+80104613:	e8 18 01 00 00       	call   80104730 <initlock>
   lk->name = name;
-801042b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104618:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bb:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010461b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c1:	83 c4 10             	add    $0x10,%esp
+80104621:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104624:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cb:	89 43 38             	mov    %eax,0x38(%ebx)
+8010462b:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d1:	c9                   	leave  
-801042d2:	c3                   	ret    
-801042d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010462e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104631:	c9                   	leave  
+80104632:	c3                   	ret    
+80104633:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010463a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801042e0 <acquiresleep>:
+80104640 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	55                   	push   %ebp
-801042e1:	89 e5                	mov    %esp,%ebp
-801042e3:	56                   	push   %esi
-801042e4:	53                   	push   %ebx
-801042e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104640:	55                   	push   %ebp
+80104641:	89 e5                	mov    %esp,%ebp
+80104643:	56                   	push   %esi
+80104644:	53                   	push   %ebx
+80104645:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801042e8:	8d 73 04             	lea    0x4(%ebx),%esi
-801042eb:	83 ec 0c             	sub    $0xc,%esp
-801042ee:	56                   	push   %esi
-801042ef:	e8 ac 02 00 00       	call   801045a0 <acquire>
+80104648:	8d 73 04             	lea    0x4(%ebx),%esi
+8010464b:	83 ec 0c             	sub    $0xc,%esp
+8010464e:	56                   	push   %esi
+8010464f:	e8 ac 02 00 00       	call   80104900 <acquire>
   while (lk->locked) {
-801042f4:	8b 13                	mov    (%ebx),%edx
-801042f6:	83 c4 10             	add    $0x10,%esp
-801042f9:	85 d2                	test   %edx,%edx
-801042fb:	74 16                	je     80104313 <acquiresleep+0x33>
-801042fd:	8d 76 00             	lea    0x0(%esi),%esi
+80104654:	8b 13                	mov    (%ebx),%edx
+80104656:	83 c4 10             	add    $0x10,%esp
+80104659:	85 d2                	test   %edx,%edx
+8010465b:	74 16                	je     80104673 <acquiresleep+0x33>
+8010465d:	8d 76 00             	lea    0x0(%esi),%esi
     sleep(lk, &lk->lk);
-80104300:	83 ec 08             	sub    $0x8,%esp
-80104303:	56                   	push   %esi
-80104304:	53                   	push   %ebx
-80104305:	e8 36 fd ff ff       	call   80104040 <sleep>
+80104660:	83 ec 08             	sub    $0x8,%esp
+80104663:	56                   	push   %esi
+80104664:	53                   	push   %ebx
+80104665:	e8 e6 f9 ff ff       	call   80104050 <sleep>
   while (lk->locked) {
-8010430a:	8b 03                	mov    (%ebx),%eax
-8010430c:	83 c4 10             	add    $0x10,%esp
-8010430f:	85 c0                	test   %eax,%eax
-80104311:	75 ed                	jne    80104300 <acquiresleep+0x20>
+8010466a:	8b 03                	mov    (%ebx),%eax
+8010466c:	83 c4 10             	add    $0x10,%esp
+8010466f:	85 c0                	test   %eax,%eax
+80104671:	75 ed                	jne    80104660 <acquiresleep+0x20>
   }
   lk->locked = 1;
-80104313:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104673:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104319:	e8 52 f6 ff ff       	call   80103970 <myproc>
-8010431e:	8b 40 10             	mov    0x10(%eax),%eax
-80104321:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104679:	e8 32 f3 ff ff       	call   801039b0 <myproc>
+8010467e:	8b 40 10             	mov    0x10(%eax),%eax
+80104681:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-80104324:	89 75 08             	mov    %esi,0x8(%ebp)
+80104684:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80104327:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010432a:	5b                   	pop    %ebx
-8010432b:	5e                   	pop    %esi
-8010432c:	5d                   	pop    %ebp
+80104687:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010468a:	5b                   	pop    %ebx
+8010468b:	5e                   	pop    %esi
+8010468c:	5d                   	pop    %ebp
   release(&lk->lk);
-8010432d:	e9 0e 02 00 00       	jmp    80104540 <release>
-80104332:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010468d:	e9 0e 02 00 00       	jmp    801048a0 <release>
+80104692:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104340 <releasesleep>:
+801046a0 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	55                   	push   %ebp
-80104341:	89 e5                	mov    %esp,%ebp
-80104343:	56                   	push   %esi
-80104344:	53                   	push   %ebx
-80104345:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046a0:	55                   	push   %ebp
+801046a1:	89 e5                	mov    %esp,%ebp
+801046a3:	56                   	push   %esi
+801046a4:	53                   	push   %ebx
+801046a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-80104348:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434b:	83 ec 0c             	sub    $0xc,%esp
-8010434e:	56                   	push   %esi
-8010434f:	e8 4c 02 00 00       	call   801045a0 <acquire>
+801046a8:	8d 73 04             	lea    0x4(%ebx),%esi
+801046ab:	83 ec 0c             	sub    $0xc,%esp
+801046ae:	56                   	push   %esi
+801046af:	e8 4c 02 00 00       	call   80104900 <acquire>
   lk->locked = 0;
-80104354:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801046b4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801046ba:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104361:	89 1c 24             	mov    %ebx,(%esp)
-80104364:	e8 97 fd ff ff       	call   80104100 <wakeup>
+801046c1:	89 1c 24             	mov    %ebx,(%esp)
+801046c4:	e8 47 fa ff ff       	call   80104110 <wakeup>
   release(&lk->lk);
-80104369:	89 75 08             	mov    %esi,0x8(%ebp)
-8010436c:	83 c4 10             	add    $0x10,%esp
+801046c9:	89 75 08             	mov    %esi,0x8(%ebp)
+801046cc:	83 c4 10             	add    $0x10,%esp
 }
-8010436f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104372:	5b                   	pop    %ebx
-80104373:	5e                   	pop    %esi
-80104374:	5d                   	pop    %ebp
+801046cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801046d2:	5b                   	pop    %ebx
+801046d3:	5e                   	pop    %esi
+801046d4:	5d                   	pop    %ebp
   release(&lk->lk);
-80104375:	e9 c6 01 00 00       	jmp    80104540 <release>
-8010437a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801046d5:	e9 c6 01 00 00       	jmp    801048a0 <release>
+801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104380 <holdingsleep>:
+801046e0 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	55                   	push   %ebp
-80104381:	89 e5                	mov    %esp,%ebp
-80104383:	57                   	push   %edi
-80104384:	31 ff                	xor    %edi,%edi
-80104386:	56                   	push   %esi
-80104387:	53                   	push   %ebx
-80104388:	83 ec 18             	sub    $0x18,%esp
-8010438b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046e0:	55                   	push   %ebp
+801046e1:	89 e5                	mov    %esp,%ebp
+801046e3:	57                   	push   %edi
+801046e4:	31 ff                	xor    %edi,%edi
+801046e6:	56                   	push   %esi
+801046e7:	53                   	push   %ebx
+801046e8:	83 ec 18             	sub    $0x18,%esp
+801046eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-8010438e:	8d 73 04             	lea    0x4(%ebx),%esi
-80104391:	56                   	push   %esi
-80104392:	e8 09 02 00 00       	call   801045a0 <acquire>
+801046ee:	8d 73 04             	lea    0x4(%ebx),%esi
+801046f1:	56                   	push   %esi
+801046f2:	e8 09 02 00 00       	call   80104900 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-80104397:	8b 03                	mov    (%ebx),%eax
-80104399:	83 c4 10             	add    $0x10,%esp
-8010439c:	85 c0                	test   %eax,%eax
-8010439e:	75 18                	jne    801043b8 <holdingsleep+0x38>
+801046f7:	8b 03                	mov    (%ebx),%eax
+801046f9:	83 c4 10             	add    $0x10,%esp
+801046fc:	85 c0                	test   %eax,%eax
+801046fe:	75 18                	jne    80104718 <holdingsleep+0x38>
   release(&lk->lk);
-801043a0:	83 ec 0c             	sub    $0xc,%esp
-801043a3:	56                   	push   %esi
-801043a4:	e8 97 01 00 00       	call   80104540 <release>
+80104700:	83 ec 0c             	sub    $0xc,%esp
+80104703:	56                   	push   %esi
+80104704:	e8 97 01 00 00       	call   801048a0 <release>
   return r;
 }
-801043a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043ac:	89 f8                	mov    %edi,%eax
-801043ae:	5b                   	pop    %ebx
-801043af:	5e                   	pop    %esi
-801043b0:	5f                   	pop    %edi
-801043b1:	5d                   	pop    %ebp
-801043b2:	c3                   	ret    
-801043b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801043b7:	90                   	nop
+80104709:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010470c:	89 f8                	mov    %edi,%eax
+8010470e:	5b                   	pop    %ebx
+8010470f:	5e                   	pop    %esi
+80104710:	5f                   	pop    %edi
+80104711:	5d                   	pop    %ebp
+80104712:	c3                   	ret    
+80104713:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104717:	90                   	nop
   r = lk->locked && (lk->pid == myproc()->pid);
-801043b8:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043bb:	e8 b0 f5 ff ff       	call   80103970 <myproc>
-801043c0:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043c3:	0f 94 c0             	sete   %al
-801043c6:	0f b6 c0             	movzbl %al,%eax
-801043c9:	89 c7                	mov    %eax,%edi
-801043cb:	eb d3                	jmp    801043a0 <holdingsleep+0x20>
-801043cd:	66 90                	xchg   %ax,%ax
-801043cf:	90                   	nop
+80104718:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+8010471b:	e8 90 f2 ff ff       	call   801039b0 <myproc>
+80104720:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104723:	0f 94 c0             	sete   %al
+80104726:	0f b6 c0             	movzbl %al,%eax
+80104729:	89 c7                	mov    %eax,%edi
+8010472b:	eb d3                	jmp    80104700 <holdingsleep+0x20>
+8010472d:	66 90                	xchg   %ax,%ax
+8010472f:	90                   	nop
 
-801043d0 <initlock>:
+80104730 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043d0:	55                   	push   %ebp
-801043d1:	89 e5                	mov    %esp,%ebp
-801043d3:	8b 45 08             	mov    0x8(%ebp),%eax
+80104730:	55                   	push   %ebp
+80104731:	89 e5                	mov    %esp,%ebp
+80104733:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043d6:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104736:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104739:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043df:	89 50 04             	mov    %edx,0x4(%eax)
+8010473f:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043e2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104742:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043e9:	5d                   	pop    %ebp
-801043ea:	c3                   	ret    
-801043eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801043ef:	90                   	nop
+80104749:	5d                   	pop    %ebp
+8010474a:	c3                   	ret    
+8010474b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010474f:	90                   	nop
 
-801043f0 <getcallerpcs>:
+80104750 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-801043f0:	55                   	push   %ebp
+80104750:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-801043f1:	31 d2                	xor    %edx,%edx
+80104751:	31 d2                	xor    %edx,%edx
 {
-801043f3:	89 e5                	mov    %esp,%ebp
-801043f5:	53                   	push   %ebx
+80104753:	89 e5                	mov    %esp,%ebp
+80104755:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-801043f6:	8b 45 08             	mov    0x8(%ebp),%eax
+80104756:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-801043f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104759:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-801043fc:	83 e8 08             	sub    $0x8,%eax
+8010475c:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-801043ff:	90                   	nop
+8010475f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104400:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-80104406:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-8010440c:	77 1a                	ja     80104428 <getcallerpcs+0x38>
+80104760:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104766:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010476c:	77 1a                	ja     80104788 <getcallerpcs+0x38>
       break;
     pcs[i] = ebp[1];     // saved %eip
-8010440e:	8b 58 04             	mov    0x4(%eax),%ebx
-80104411:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+8010476e:	8b 58 04             	mov    0x4(%eax),%ebx
+80104771:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-80104414:	83 c2 01             	add    $0x1,%edx
+80104774:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-80104417:	8b 00                	mov    (%eax),%eax
+80104777:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104419:	83 fa 0a             	cmp    $0xa,%edx
-8010441c:	75 e2                	jne    80104400 <getcallerpcs+0x10>
+80104779:	83 fa 0a             	cmp    $0xa,%edx
+8010477c:	75 e2                	jne    80104760 <getcallerpcs+0x10>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-8010441e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104421:	c9                   	leave  
-80104422:	c3                   	ret    
-80104423:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104427:	90                   	nop
+8010477e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104781:	c9                   	leave  
+80104782:	c3                   	ret    
+80104783:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104787:	90                   	nop
   for(; i < 10; i++)
-80104428:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-8010442b:	8d 51 28             	lea    0x28(%ecx),%edx
-8010442e:	66 90                	xchg   %ax,%ax
+80104788:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+8010478b:	8d 51 28             	lea    0x28(%ecx),%edx
+8010478e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-80104430:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104790:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104436:	83 c0 04             	add    $0x4,%eax
-80104439:	39 d0                	cmp    %edx,%eax
-8010443b:	75 f3                	jne    80104430 <getcallerpcs+0x40>
-}
-8010443d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104440:	c9                   	leave  
-80104441:	c3                   	ret    
-80104442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104796:	83 c0 04             	add    $0x4,%eax
+80104799:	39 d0                	cmp    %edx,%eax
+8010479b:	75 f3                	jne    80104790 <getcallerpcs+0x40>
+}
+8010479d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801047a0:	c9                   	leave  
+801047a1:	c3                   	ret    
+801047a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104450 <pushcli>:
+801047b0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104450:	55                   	push   %ebp
-80104451:	89 e5                	mov    %esp,%ebp
-80104453:	53                   	push   %ebx
-80104454:	83 ec 04             	sub    $0x4,%esp
-80104457:	9c                   	pushf  
-80104458:	5b                   	pop    %ebx
+801047b0:	55                   	push   %ebp
+801047b1:	89 e5                	mov    %esp,%ebp
+801047b3:	53                   	push   %ebx
+801047b4:	83 ec 04             	sub    $0x4,%esp
+801047b7:	9c                   	pushf  
+801047b8:	5b                   	pop    %ebx
   asm volatile("cli");
-80104459:	fa                   	cli    
+801047b9:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010445a:	e8 91 f4 ff ff       	call   801038f0 <mycpu>
-8010445f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104465:	85 c0                	test   %eax,%eax
-80104467:	74 17                	je     80104480 <pushcli+0x30>
+801047ba:	e8 71 f1 ff ff       	call   80103930 <mycpu>
+801047bf:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801047c5:	85 c0                	test   %eax,%eax
+801047c7:	74 17                	je     801047e0 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-80104469:	e8 82 f4 ff ff       	call   801038f0 <mycpu>
-8010446e:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801047c9:	e8 62 f1 ff ff       	call   80103930 <mycpu>
+801047ce:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104475:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104478:	c9                   	leave  
-80104479:	c3                   	ret    
-8010447a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801047d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801047d8:	c9                   	leave  
+801047d9:	c3                   	ret    
+801047da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     mycpu()->intena = eflags & FL_IF;
-80104480:	e8 6b f4 ff ff       	call   801038f0 <mycpu>
-80104485:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010448b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-80104491:	eb d6                	jmp    80104469 <pushcli+0x19>
-80104493:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010449a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801047e0:	e8 4b f1 ff ff       	call   80103930 <mycpu>
+801047e5:	81 e3 00 02 00 00    	and    $0x200,%ebx
+801047eb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801047f1:	eb d6                	jmp    801047c9 <pushcli+0x19>
+801047f3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044a0 <popcli>:
+80104800 <popcli>:
 
 void
 popcli(void)
 {
-801044a0:	55                   	push   %ebp
-801044a1:	89 e5                	mov    %esp,%ebp
-801044a3:	83 ec 08             	sub    $0x8,%esp
+80104800:	55                   	push   %ebp
+80104801:	89 e5                	mov    %esp,%ebp
+80104803:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044a6:	9c                   	pushf  
-801044a7:	58                   	pop    %eax
+80104806:	9c                   	pushf  
+80104807:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044a8:	f6 c4 02             	test   $0x2,%ah
-801044ab:	75 35                	jne    801044e2 <popcli+0x42>
+80104808:	f6 c4 02             	test   $0x2,%ah
+8010480b:	75 35                	jne    80104842 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044ad:	e8 3e f4 ff ff       	call   801038f0 <mycpu>
-801044b2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044b9:	78 34                	js     801044ef <popcli+0x4f>
+8010480d:	e8 1e f1 ff ff       	call   80103930 <mycpu>
+80104812:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104819:	78 34                	js     8010484f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044bb:	e8 30 f4 ff ff       	call   801038f0 <mycpu>
-801044c0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044c6:	85 d2                	test   %edx,%edx
-801044c8:	74 06                	je     801044d0 <popcli+0x30>
+8010481b:	e8 10 f1 ff ff       	call   80103930 <mycpu>
+80104820:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104826:	85 d2                	test   %edx,%edx
+80104828:	74 06                	je     80104830 <popcli+0x30>
     sti();
 }
-801044ca:	c9                   	leave  
-801044cb:	c3                   	ret    
-801044cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010482a:	c9                   	leave  
+8010482b:	c3                   	ret    
+8010482c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044d0:	e8 1b f4 ff ff       	call   801038f0 <mycpu>
-801044d5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044db:	85 c0                	test   %eax,%eax
-801044dd:	74 eb                	je     801044ca <popcli+0x2a>
+80104830:	e8 fb f0 ff ff       	call   80103930 <mycpu>
+80104835:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010483b:	85 c0                	test   %eax,%eax
+8010483d:	74 eb                	je     8010482a <popcli+0x2a>
   asm volatile("sti");
-801044df:	fb                   	sti    
+8010483f:	fb                   	sti    
 }
-801044e0:	c9                   	leave  
-801044e1:	c3                   	ret    
+80104840:	c9                   	leave  
+80104841:	c3                   	ret    
     panic("popcli - interruptible");
-801044e2:	83 ec 0c             	sub    $0xc,%esp
-801044e5:	68 0f 78 10 80       	push   $0x8010780f
-801044ea:	e8 91 be ff ff       	call   80100380 <panic>
+80104842:	83 ec 0c             	sub    $0xc,%esp
+80104845:	68 7f 7c 10 80       	push   $0x80107c7f
+8010484a:	e8 31 bb ff ff       	call   80100380 <panic>
     panic("popcli");
-801044ef:	83 ec 0c             	sub    $0xc,%esp
-801044f2:	68 26 78 10 80       	push   $0x80107826
-801044f7:	e8 84 be ff ff       	call   80100380 <panic>
-801044fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010484f:	83 ec 0c             	sub    $0xc,%esp
+80104852:	68 96 7c 10 80       	push   $0x80107c96
+80104857:	e8 24 bb ff ff       	call   80100380 <panic>
+8010485c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104500 <holding>:
+80104860 <holding>:
 {
-80104500:	55                   	push   %ebp
-80104501:	89 e5                	mov    %esp,%ebp
-80104503:	56                   	push   %esi
-80104504:	53                   	push   %ebx
-80104505:	8b 75 08             	mov    0x8(%ebp),%esi
-80104508:	31 db                	xor    %ebx,%ebx
+80104860:	55                   	push   %ebp
+80104861:	89 e5                	mov    %esp,%ebp
+80104863:	56                   	push   %esi
+80104864:	53                   	push   %ebx
+80104865:	8b 75 08             	mov    0x8(%ebp),%esi
+80104868:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010450a:	e8 41 ff ff ff       	call   80104450 <pushcli>
+8010486a:	e8 41 ff ff ff       	call   801047b0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010450f:	8b 06                	mov    (%esi),%eax
-80104511:	85 c0                	test   %eax,%eax
-80104513:	75 0b                	jne    80104520 <holding+0x20>
+8010486f:	8b 06                	mov    (%esi),%eax
+80104871:	85 c0                	test   %eax,%eax
+80104873:	75 0b                	jne    80104880 <holding+0x20>
   popcli();
-80104515:	e8 86 ff ff ff       	call   801044a0 <popcli>
+80104875:	e8 86 ff ff ff       	call   80104800 <popcli>
 }
-8010451a:	89 d8                	mov    %ebx,%eax
-8010451c:	5b                   	pop    %ebx
-8010451d:	5e                   	pop    %esi
-8010451e:	5d                   	pop    %ebp
-8010451f:	c3                   	ret    
+8010487a:	89 d8                	mov    %ebx,%eax
+8010487c:	5b                   	pop    %ebx
+8010487d:	5e                   	pop    %esi
+8010487e:	5d                   	pop    %ebp
+8010487f:	c3                   	ret    
   r = lock->locked && lock->cpu == mycpu();
-80104520:	8b 5e 08             	mov    0x8(%esi),%ebx
-80104523:	e8 c8 f3 ff ff       	call   801038f0 <mycpu>
-80104528:	39 c3                	cmp    %eax,%ebx
-8010452a:	0f 94 c3             	sete   %bl
+80104880:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104883:	e8 a8 f0 ff ff       	call   80103930 <mycpu>
+80104888:	39 c3                	cmp    %eax,%ebx
+8010488a:	0f 94 c3             	sete   %bl
   popcli();
-8010452d:	e8 6e ff ff ff       	call   801044a0 <popcli>
+8010488d:	e8 6e ff ff ff       	call   80104800 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-80104532:	0f b6 db             	movzbl %bl,%ebx
+80104892:	0f b6 db             	movzbl %bl,%ebx
 }
-80104535:	89 d8                	mov    %ebx,%eax
-80104537:	5b                   	pop    %ebx
-80104538:	5e                   	pop    %esi
-80104539:	5d                   	pop    %ebp
-8010453a:	c3                   	ret    
-8010453b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010453f:	90                   	nop
-
-80104540 <release>:
-{
-80104540:	55                   	push   %ebp
-80104541:	89 e5                	mov    %esp,%ebp
-80104543:	56                   	push   %esi
-80104544:	53                   	push   %ebx
-80104545:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104895:	89 d8                	mov    %ebx,%eax
+80104897:	5b                   	pop    %ebx
+80104898:	5e                   	pop    %esi
+80104899:	5d                   	pop    %ebp
+8010489a:	c3                   	ret    
+8010489b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010489f:	90                   	nop
+
+801048a0 <release>:
+{
+801048a0:	55                   	push   %ebp
+801048a1:	89 e5                	mov    %esp,%ebp
+801048a3:	56                   	push   %esi
+801048a4:	53                   	push   %ebx
+801048a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-80104548:	e8 03 ff ff ff       	call   80104450 <pushcli>
+801048a8:	e8 03 ff ff ff       	call   801047b0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454d:	8b 03                	mov    (%ebx),%eax
-8010454f:	85 c0                	test   %eax,%eax
-80104551:	75 15                	jne    80104568 <release+0x28>
+801048ad:	8b 03                	mov    (%ebx),%eax
+801048af:	85 c0                	test   %eax,%eax
+801048b1:	75 15                	jne    801048c8 <release+0x28>
   popcli();
-80104553:	e8 48 ff ff ff       	call   801044a0 <popcli>
+801048b3:	e8 48 ff ff ff       	call   80104800 <popcli>
     panic("release");
-80104558:	83 ec 0c             	sub    $0xc,%esp
-8010455b:	68 2d 78 10 80       	push   $0x8010782d
-80104560:	e8 1b be ff ff       	call   80100380 <panic>
-80104565:	8d 76 00             	lea    0x0(%esi),%esi
+801048b8:	83 ec 0c             	sub    $0xc,%esp
+801048bb:	68 9d 7c 10 80       	push   $0x80107c9d
+801048c0:	e8 bb ba ff ff       	call   80100380 <panic>
+801048c5:	8d 76 00             	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104568:	8b 73 08             	mov    0x8(%ebx),%esi
-8010456b:	e8 80 f3 ff ff       	call   801038f0 <mycpu>
-80104570:	39 c6                	cmp    %eax,%esi
-80104572:	75 df                	jne    80104553 <release+0x13>
+801048c8:	8b 73 08             	mov    0x8(%ebx),%esi
+801048cb:	e8 60 f0 ff ff       	call   80103930 <mycpu>
+801048d0:	39 c6                	cmp    %eax,%esi
+801048d2:	75 df                	jne    801048b3 <release+0x13>
   popcli();
-80104574:	e8 27 ff ff ff       	call   801044a0 <popcli>
+801048d4:	e8 27 ff ff ff       	call   80104800 <popcli>
   lk->pcs[0] = 0;
-80104579:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801048d9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104580:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801048e0:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104587:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+801048e7:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010458c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801048ec:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104592:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104595:	5b                   	pop    %ebx
-80104596:	5e                   	pop    %esi
-80104597:	5d                   	pop    %ebp
+801048f2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048f5:	5b                   	pop    %ebx
+801048f6:	5e                   	pop    %esi
+801048f7:	5d                   	pop    %ebp
   popcli();
-80104598:	e9 03 ff ff ff       	jmp    801044a0 <popcli>
-8010459d:	8d 76 00             	lea    0x0(%esi),%esi
+801048f8:	e9 03 ff ff ff       	jmp    80104800 <popcli>
+801048fd:	8d 76 00             	lea    0x0(%esi),%esi
 
-801045a0 <acquire>:
+80104900 <acquire>:
 {
-801045a0:	55                   	push   %ebp
-801045a1:	89 e5                	mov    %esp,%ebp
-801045a3:	53                   	push   %ebx
-801045a4:	83 ec 04             	sub    $0x4,%esp
+80104900:	55                   	push   %ebp
+80104901:	89 e5                	mov    %esp,%ebp
+80104903:	53                   	push   %ebx
+80104904:	83 ec 04             	sub    $0x4,%esp
   pushcli(); // disable interrupts to avoid deadlock.
-801045a7:	e8 a4 fe ff ff       	call   80104450 <pushcli>
+80104907:	e8 a4 fe ff ff       	call   801047b0 <pushcli>
   if(holding(lk))
-801045ac:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010490c:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-801045af:	e8 9c fe ff ff       	call   80104450 <pushcli>
+8010490f:	e8 9c fe ff ff       	call   801047b0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-801045b4:	8b 03                	mov    (%ebx),%eax
-801045b6:	85 c0                	test   %eax,%eax
-801045b8:	75 7e                	jne    80104638 <acquire+0x98>
+80104914:	8b 03                	mov    (%ebx),%eax
+80104916:	85 c0                	test   %eax,%eax
+80104918:	75 7e                	jne    80104998 <acquire+0x98>
   popcli();
-801045ba:	e8 e1 fe ff ff       	call   801044a0 <popcli>
+8010491a:	e8 e1 fe ff ff       	call   80104800 <popcli>
   asm volatile("lock; xchgl %0, %1" :
-801045bf:	b9 01 00 00 00       	mov    $0x1,%ecx
-801045c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010491f:	b9 01 00 00 00       	mov    $0x1,%ecx
+80104924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while(xchg(&lk->locked, 1) != 0)
-801045c8:	8b 55 08             	mov    0x8(%ebp),%edx
-801045cb:	89 c8                	mov    %ecx,%eax
-801045cd:	f0 87 02             	lock xchg %eax,(%edx)
-801045d0:	85 c0                	test   %eax,%eax
-801045d2:	75 f4                	jne    801045c8 <acquire+0x28>
+80104928:	8b 55 08             	mov    0x8(%ebp),%edx
+8010492b:	89 c8                	mov    %ecx,%eax
+8010492d:	f0 87 02             	lock xchg %eax,(%edx)
+80104930:	85 c0                	test   %eax,%eax
+80104932:	75 f4                	jne    80104928 <acquire+0x28>
   __sync_synchronize();
-801045d4:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104934:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045dc:	e8 0f f3 ff ff       	call   801038f0 <mycpu>
+80104939:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010493c:	e8 ef ef ff ff       	call   80103930 <mycpu>
   getcallerpcs(&lk, lk->pcs);
-801045e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104941:	8b 4d 08             	mov    0x8(%ebp),%ecx
   ebp = (uint*)v - 2;
-801045e4:	89 ea                	mov    %ebp,%edx
+80104944:	89 ea                	mov    %ebp,%edx
   lk->cpu = mycpu();
-801045e6:	89 43 08             	mov    %eax,0x8(%ebx)
+80104946:	89 43 08             	mov    %eax,0x8(%ebx)
   for(i = 0; i < 10; i++){
-801045e9:	31 c0                	xor    %eax,%eax
-801045eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801045ef:	90                   	nop
+80104949:	31 c0                	xor    %eax,%eax
+8010494b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010494f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045f0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
-801045f6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-801045fc:	77 1a                	ja     80104618 <acquire+0x78>
+80104950:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+80104956:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010495c:	77 1a                	ja     80104978 <acquire+0x78>
     pcs[i] = ebp[1];     // saved %eip
-801045fe:	8b 5a 04             	mov    0x4(%edx),%ebx
-80104601:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
+8010495e:	8b 5a 04             	mov    0x4(%edx),%ebx
+80104961:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
   for(i = 0; i < 10; i++){
-80104605:	83 c0 01             	add    $0x1,%eax
+80104965:	83 c0 01             	add    $0x1,%eax
     ebp = (uint*)ebp[0]; // saved %ebp
-80104608:	8b 12                	mov    (%edx),%edx
+80104968:	8b 12                	mov    (%edx),%edx
   for(i = 0; i < 10; i++){
-8010460a:	83 f8 0a             	cmp    $0xa,%eax
-8010460d:	75 e1                	jne    801045f0 <acquire+0x50>
+8010496a:	83 f8 0a             	cmp    $0xa,%eax
+8010496d:	75 e1                	jne    80104950 <acquire+0x50>
 }
-8010460f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104612:	c9                   	leave  
-80104613:	c3                   	ret    
-80104614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010496f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104972:	c9                   	leave  
+80104973:	c3                   	ret    
+80104974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104618:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
-8010461c:	8d 51 34             	lea    0x34(%ecx),%edx
-8010461f:	90                   	nop
+80104978:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
+8010497c:	8d 51 34             	lea    0x34(%ecx),%edx
+8010497f:	90                   	nop
     pcs[i] = 0;
-80104620:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104980:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104626:	83 c0 04             	add    $0x4,%eax
-80104629:	39 c2                	cmp    %eax,%edx
-8010462b:	75 f3                	jne    80104620 <acquire+0x80>
-}
-8010462d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104630:	c9                   	leave  
-80104631:	c3                   	ret    
-80104632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104986:	83 c0 04             	add    $0x4,%eax
+80104989:	39 c2                	cmp    %eax,%edx
+8010498b:	75 f3                	jne    80104980 <acquire+0x80>
+}
+8010498d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104990:	c9                   	leave  
+80104991:	c3                   	ret    
+80104992:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104638:	8b 5b 08             	mov    0x8(%ebx),%ebx
-8010463b:	e8 b0 f2 ff ff       	call   801038f0 <mycpu>
-80104640:	39 c3                	cmp    %eax,%ebx
-80104642:	0f 85 72 ff ff ff    	jne    801045ba <acquire+0x1a>
+80104998:	8b 5b 08             	mov    0x8(%ebx),%ebx
+8010499b:	e8 90 ef ff ff       	call   80103930 <mycpu>
+801049a0:	39 c3                	cmp    %eax,%ebx
+801049a2:	0f 85 72 ff ff ff    	jne    8010491a <acquire+0x1a>
   popcli();
-80104648:	e8 53 fe ff ff       	call   801044a0 <popcli>
+801049a8:	e8 53 fe ff ff       	call   80104800 <popcli>
     panic("acquire");
-8010464d:	83 ec 0c             	sub    $0xc,%esp
-80104650:	68 35 78 10 80       	push   $0x80107835
-80104655:	e8 26 bd ff ff       	call   80100380 <panic>
-8010465a:	66 90                	xchg   %ax,%ax
-8010465c:	66 90                	xchg   %ax,%ax
-8010465e:	66 90                	xchg   %ax,%ax
+801049ad:	83 ec 0c             	sub    $0xc,%esp
+801049b0:	68 a5 7c 10 80       	push   $0x80107ca5
+801049b5:	e8 c6 b9 ff ff       	call   80100380 <panic>
+801049ba:	66 90                	xchg   %ax,%ax
+801049bc:	66 90                	xchg   %ax,%ax
+801049be:	66 90                	xchg   %ax,%ax
 
-80104660 <memset>:
+801049c0 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104660:	55                   	push   %ebp
-80104661:	89 e5                	mov    %esp,%ebp
-80104663:	57                   	push   %edi
-80104664:	8b 55 08             	mov    0x8(%ebp),%edx
-80104667:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010466a:	53                   	push   %ebx
-8010466b:	8b 45 0c             	mov    0xc(%ebp),%eax
+801049c0:	55                   	push   %ebp
+801049c1:	89 e5                	mov    %esp,%ebp
+801049c3:	57                   	push   %edi
+801049c4:	8b 55 08             	mov    0x8(%ebp),%edx
+801049c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801049ca:	53                   	push   %ebx
+801049cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-8010466e:	89 d7                	mov    %edx,%edi
-80104670:	09 cf                	or     %ecx,%edi
-80104672:	83 e7 03             	and    $0x3,%edi
-80104675:	75 29                	jne    801046a0 <memset+0x40>
+801049ce:	89 d7                	mov    %edx,%edi
+801049d0:	09 cf                	or     %ecx,%edi
+801049d2:	83 e7 03             	and    $0x3,%edi
+801049d5:	75 29                	jne    80104a00 <memset+0x40>
     c &= 0xFF;
-80104677:	0f b6 f8             	movzbl %al,%edi
+801049d7:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010467a:	c1 e0 18             	shl    $0x18,%eax
-8010467d:	89 fb                	mov    %edi,%ebx
-8010467f:	c1 e9 02             	shr    $0x2,%ecx
-80104682:	c1 e3 10             	shl    $0x10,%ebx
-80104685:	09 d8                	or     %ebx,%eax
-80104687:	09 f8                	or     %edi,%eax
-80104689:	c1 e7 08             	shl    $0x8,%edi
-8010468c:	09 f8                	or     %edi,%eax
+801049da:	c1 e0 18             	shl    $0x18,%eax
+801049dd:	89 fb                	mov    %edi,%ebx
+801049df:	c1 e9 02             	shr    $0x2,%ecx
+801049e2:	c1 e3 10             	shl    $0x10,%ebx
+801049e5:	09 d8                	or     %ebx,%eax
+801049e7:	09 f8                	or     %edi,%eax
+801049e9:	c1 e7 08             	shl    $0x8,%edi
+801049ec:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-8010468e:	89 d7                	mov    %edx,%edi
-80104690:	fc                   	cld    
-80104691:	f3 ab                	rep stos %eax,%es:(%edi)
+801049ee:	89 d7                	mov    %edx,%edi
+801049f0:	fc                   	cld    
+801049f1:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-80104693:	5b                   	pop    %ebx
-80104694:	89 d0                	mov    %edx,%eax
-80104696:	5f                   	pop    %edi
-80104697:	5d                   	pop    %ebp
-80104698:	c3                   	ret    
-80104699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049f3:	5b                   	pop    %ebx
+801049f4:	89 d0                	mov    %edx,%eax
+801049f6:	5f                   	pop    %edi
+801049f7:	5d                   	pop    %ebp
+801049f8:	c3                   	ret    
+801049f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   asm volatile("cld; rep stosb" :
-801046a0:	89 d7                	mov    %edx,%edi
-801046a2:	fc                   	cld    
-801046a3:	f3 aa                	rep stos %al,%es:(%edi)
-801046a5:	5b                   	pop    %ebx
-801046a6:	89 d0                	mov    %edx,%eax
-801046a8:	5f                   	pop    %edi
-801046a9:	5d                   	pop    %ebp
-801046aa:	c3                   	ret    
-801046ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046af:	90                   	nop
+80104a00:	89 d7                	mov    %edx,%edi
+80104a02:	fc                   	cld    
+80104a03:	f3 aa                	rep stos %al,%es:(%edi)
+80104a05:	5b                   	pop    %ebx
+80104a06:	89 d0                	mov    %edx,%eax
+80104a08:	5f                   	pop    %edi
+80104a09:	5d                   	pop    %ebp
+80104a0a:	c3                   	ret    
+80104a0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104a0f:	90                   	nop
 
-801046b0 <memcmp>:
+80104a10 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801046b0:	55                   	push   %ebp
-801046b1:	89 e5                	mov    %esp,%ebp
-801046b3:	56                   	push   %esi
-801046b4:	8b 75 10             	mov    0x10(%ebp),%esi
-801046b7:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ba:	53                   	push   %ebx
-801046bb:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104a10:	55                   	push   %ebp
+80104a11:	89 e5                	mov    %esp,%ebp
+80104a13:	56                   	push   %esi
+80104a14:	8b 75 10             	mov    0x10(%ebp),%esi
+80104a17:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a1a:	53                   	push   %ebx
+80104a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801046be:	85 f6                	test   %esi,%esi
-801046c0:	74 2e                	je     801046f0 <memcmp+0x40>
-801046c2:	01 c6                	add    %eax,%esi
-801046c4:	eb 14                	jmp    801046da <memcmp+0x2a>
-801046c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801046cd:	8d 76 00             	lea    0x0(%esi),%esi
+80104a1e:	85 f6                	test   %esi,%esi
+80104a20:	74 2e                	je     80104a50 <memcmp+0x40>
+80104a22:	01 c6                	add    %eax,%esi
+80104a24:	eb 14                	jmp    80104a3a <memcmp+0x2a>
+80104a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a2d:	8d 76 00             	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-801046d0:	83 c0 01             	add    $0x1,%eax
-801046d3:	83 c2 01             	add    $0x1,%edx
+80104a30:	83 c0 01             	add    $0x1,%eax
+80104a33:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-801046d6:	39 f0                	cmp    %esi,%eax
-801046d8:	74 16                	je     801046f0 <memcmp+0x40>
+80104a36:	39 f0                	cmp    %esi,%eax
+80104a38:	74 16                	je     80104a50 <memcmp+0x40>
     if(*s1 != *s2)
-801046da:	0f b6 0a             	movzbl (%edx),%ecx
-801046dd:	0f b6 18             	movzbl (%eax),%ebx
-801046e0:	38 d9                	cmp    %bl,%cl
-801046e2:	74 ec                	je     801046d0 <memcmp+0x20>
+80104a3a:	0f b6 0a             	movzbl (%edx),%ecx
+80104a3d:	0f b6 18             	movzbl (%eax),%ebx
+80104a40:	38 d9                	cmp    %bl,%cl
+80104a42:	74 ec                	je     80104a30 <memcmp+0x20>
       return *s1 - *s2;
-801046e4:	0f b6 c1             	movzbl %cl,%eax
-801046e7:	29 d8                	sub    %ebx,%eax
+80104a44:	0f b6 c1             	movzbl %cl,%eax
+80104a47:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-801046e9:	5b                   	pop    %ebx
-801046ea:	5e                   	pop    %esi
-801046eb:	5d                   	pop    %ebp
-801046ec:	c3                   	ret    
-801046ed:	8d 76 00             	lea    0x0(%esi),%esi
-801046f0:	5b                   	pop    %ebx
+80104a49:	5b                   	pop    %ebx
+80104a4a:	5e                   	pop    %esi
+80104a4b:	5d                   	pop    %ebp
+80104a4c:	c3                   	ret    
+80104a4d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a50:	5b                   	pop    %ebx
   return 0;
-801046f1:	31 c0                	xor    %eax,%eax
+80104a51:	31 c0                	xor    %eax,%eax
 }
-801046f3:	5e                   	pop    %esi
-801046f4:	5d                   	pop    %ebp
-801046f5:	c3                   	ret    
-801046f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
+80104a53:	5e                   	pop    %esi
+80104a54:	5d                   	pop    %ebp
+80104a55:	c3                   	ret    
+80104a56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a5d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104700 <memmove>:
+80104a60 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104700:	55                   	push   %ebp
-80104701:	89 e5                	mov    %esp,%ebp
-80104703:	57                   	push   %edi
-80104704:	8b 55 08             	mov    0x8(%ebp),%edx
-80104707:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010470a:	56                   	push   %esi
-8010470b:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104a60:	55                   	push   %ebp
+80104a61:	89 e5                	mov    %esp,%ebp
+80104a63:	57                   	push   %edi
+80104a64:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a67:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104a6a:	56                   	push   %esi
+80104a6b:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-8010470e:	39 d6                	cmp    %edx,%esi
-80104710:	73 26                	jae    80104738 <memmove+0x38>
-80104712:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104715:	39 fa                	cmp    %edi,%edx
-80104717:	73 1f                	jae    80104738 <memmove+0x38>
-80104719:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104a6e:	39 d6                	cmp    %edx,%esi
+80104a70:	73 26                	jae    80104a98 <memmove+0x38>
+80104a72:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104a75:	39 fa                	cmp    %edi,%edx
+80104a77:	73 1f                	jae    80104a98 <memmove+0x38>
+80104a79:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-8010471c:	85 c9                	test   %ecx,%ecx
-8010471e:	74 0c                	je     8010472c <memmove+0x2c>
+80104a7c:	85 c9                	test   %ecx,%ecx
+80104a7e:	74 0c                	je     80104a8c <memmove+0x2c>
       *--d = *--s;
-80104720:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-80104724:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104a80:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104a84:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-80104727:	83 e8 01             	sub    $0x1,%eax
-8010472a:	73 f4                	jae    80104720 <memmove+0x20>
+80104a87:	83 e8 01             	sub    $0x1,%eax
+80104a8a:	73 f4                	jae    80104a80 <memmove+0x20>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-8010472c:	5e                   	pop    %esi
-8010472d:	89 d0                	mov    %edx,%eax
-8010472f:	5f                   	pop    %edi
-80104730:	5d                   	pop    %ebp
-80104731:	c3                   	ret    
-80104732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a8c:	5e                   	pop    %esi
+80104a8d:	89 d0                	mov    %edx,%eax
+80104a8f:	5f                   	pop    %edi
+80104a90:	5d                   	pop    %ebp
+80104a91:	c3                   	ret    
+80104a92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104738:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-8010473b:	89 d7                	mov    %edx,%edi
-8010473d:	85 c9                	test   %ecx,%ecx
-8010473f:	74 eb                	je     8010472c <memmove+0x2c>
-80104741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a98:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104a9b:	89 d7                	mov    %edx,%edi
+80104a9d:	85 c9                	test   %ecx,%ecx
+80104a9f:	74 eb                	je     80104a8c <memmove+0x2c>
+80104aa1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104748:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104aa8:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104749:	39 c6                	cmp    %eax,%esi
-8010474b:	75 fb                	jne    80104748 <memmove+0x48>
+80104aa9:	39 c6                	cmp    %eax,%esi
+80104aab:	75 fb                	jne    80104aa8 <memmove+0x48>
 }
-8010474d:	5e                   	pop    %esi
-8010474e:	89 d0                	mov    %edx,%eax
-80104750:	5f                   	pop    %edi
-80104751:	5d                   	pop    %ebp
-80104752:	c3                   	ret    
-80104753:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010475a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104aad:	5e                   	pop    %esi
+80104aae:	89 d0                	mov    %edx,%eax
+80104ab0:	5f                   	pop    %edi
+80104ab1:	5d                   	pop    %ebp
+80104ab2:	c3                   	ret    
+80104ab3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104aba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104760 <memcpy>:
+80104ac0 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
-80104760:	eb 9e                	jmp    80104700 <memmove>
-80104762:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ac0:	eb 9e                	jmp    80104a60 <memmove>
+80104ac2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104770 <strncmp>:
+80104ad0 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104770:	55                   	push   %ebp
-80104771:	89 e5                	mov    %esp,%ebp
-80104773:	56                   	push   %esi
-80104774:	8b 75 10             	mov    0x10(%ebp),%esi
-80104777:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010477a:	53                   	push   %ebx
-8010477b:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104ad0:	55                   	push   %ebp
+80104ad1:	89 e5                	mov    %esp,%ebp
+80104ad3:	56                   	push   %esi
+80104ad4:	8b 75 10             	mov    0x10(%ebp),%esi
+80104ad7:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104ada:	53                   	push   %ebx
+80104adb:	8b 55 0c             	mov    0xc(%ebp),%edx
   while(n > 0 && *p && *p == *q)
-8010477e:	85 f6                	test   %esi,%esi
-80104780:	74 2e                	je     801047b0 <strncmp+0x40>
-80104782:	01 d6                	add    %edx,%esi
-80104784:	eb 18                	jmp    8010479e <strncmp+0x2e>
-80104786:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010478d:	8d 76 00             	lea    0x0(%esi),%esi
-80104790:	38 d8                	cmp    %bl,%al
-80104792:	75 14                	jne    801047a8 <strncmp+0x38>
+80104ade:	85 f6                	test   %esi,%esi
+80104ae0:	74 2e                	je     80104b10 <strncmp+0x40>
+80104ae2:	01 d6                	add    %edx,%esi
+80104ae4:	eb 18                	jmp    80104afe <strncmp+0x2e>
+80104ae6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104aed:	8d 76 00             	lea    0x0(%esi),%esi
+80104af0:	38 d8                	cmp    %bl,%al
+80104af2:	75 14                	jne    80104b08 <strncmp+0x38>
     n--, p++, q++;
-80104794:	83 c2 01             	add    $0x1,%edx
-80104797:	83 c1 01             	add    $0x1,%ecx
+80104af4:	83 c2 01             	add    $0x1,%edx
+80104af7:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-8010479a:	39 f2                	cmp    %esi,%edx
-8010479c:	74 12                	je     801047b0 <strncmp+0x40>
-8010479e:	0f b6 01             	movzbl (%ecx),%eax
-801047a1:	0f b6 1a             	movzbl (%edx),%ebx
-801047a4:	84 c0                	test   %al,%al
-801047a6:	75 e8                	jne    80104790 <strncmp+0x20>
+80104afa:	39 f2                	cmp    %esi,%edx
+80104afc:	74 12                	je     80104b10 <strncmp+0x40>
+80104afe:	0f b6 01             	movzbl (%ecx),%eax
+80104b01:	0f b6 1a             	movzbl (%edx),%ebx
+80104b04:	84 c0                	test   %al,%al
+80104b06:	75 e8                	jne    80104af0 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-801047a8:	29 d8                	sub    %ebx,%eax
+80104b08:	29 d8                	sub    %ebx,%eax
 }
-801047aa:	5b                   	pop    %ebx
-801047ab:	5e                   	pop    %esi
-801047ac:	5d                   	pop    %ebp
-801047ad:	c3                   	ret    
-801047ae:	66 90                	xchg   %ax,%ax
-801047b0:	5b                   	pop    %ebx
+80104b0a:	5b                   	pop    %ebx
+80104b0b:	5e                   	pop    %esi
+80104b0c:	5d                   	pop    %ebp
+80104b0d:	c3                   	ret    
+80104b0e:	66 90                	xchg   %ax,%ax
+80104b10:	5b                   	pop    %ebx
     return 0;
-801047b1:	31 c0                	xor    %eax,%eax
+80104b11:	31 c0                	xor    %eax,%eax
 }
-801047b3:	5e                   	pop    %esi
-801047b4:	5d                   	pop    %ebp
-801047b5:	c3                   	ret    
-801047b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047bd:	8d 76 00             	lea    0x0(%esi),%esi
+80104b13:	5e                   	pop    %esi
+80104b14:	5d                   	pop    %ebp
+80104b15:	c3                   	ret    
+80104b16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b1d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801047c0 <strncpy>:
+80104b20 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801047c0:	55                   	push   %ebp
-801047c1:	89 e5                	mov    %esp,%ebp
-801047c3:	57                   	push   %edi
-801047c4:	56                   	push   %esi
-801047c5:	8b 75 08             	mov    0x8(%ebp),%esi
-801047c8:	53                   	push   %ebx
-801047c9:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104b20:	55                   	push   %ebp
+80104b21:	89 e5                	mov    %esp,%ebp
+80104b23:	57                   	push   %edi
+80104b24:	56                   	push   %esi
+80104b25:	8b 75 08             	mov    0x8(%ebp),%esi
+80104b28:	53                   	push   %ebx
+80104b29:	8b 4d 10             	mov    0x10(%ebp),%ecx
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801047cc:	89 f0                	mov    %esi,%eax
-801047ce:	eb 15                	jmp    801047e5 <strncpy+0x25>
-801047d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047d4:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047d7:	83 c0 01             	add    $0x1,%eax
-801047da:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
-801047de:	88 50 ff             	mov    %dl,-0x1(%eax)
-801047e1:	84 d2                	test   %dl,%dl
-801047e3:	74 09                	je     801047ee <strncpy+0x2e>
-801047e5:	89 cb                	mov    %ecx,%ebx
-801047e7:	83 e9 01             	sub    $0x1,%ecx
-801047ea:	85 db                	test   %ebx,%ebx
-801047ec:	7f e2                	jg     801047d0 <strncpy+0x10>
+80104b2c:	89 f0                	mov    %esi,%eax
+80104b2e:	eb 15                	jmp    80104b45 <strncpy+0x25>
+80104b30:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80104b34:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80104b37:	83 c0 01             	add    $0x1,%eax
+80104b3a:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
+80104b3e:	88 50 ff             	mov    %dl,-0x1(%eax)
+80104b41:	84 d2                	test   %dl,%dl
+80104b43:	74 09                	je     80104b4e <strncpy+0x2e>
+80104b45:	89 cb                	mov    %ecx,%ebx
+80104b47:	83 e9 01             	sub    $0x1,%ecx
+80104b4a:	85 db                	test   %ebx,%ebx
+80104b4c:	7f e2                	jg     80104b30 <strncpy+0x10>
     ;
   while(n-- > 0)
-801047ee:	89 c2                	mov    %eax,%edx
-801047f0:	85 c9                	test   %ecx,%ecx
-801047f2:	7e 17                	jle    8010480b <strncpy+0x4b>
-801047f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104b4e:	89 c2                	mov    %eax,%edx
+80104b50:	85 c9                	test   %ecx,%ecx
+80104b52:	7e 17                	jle    80104b6b <strncpy+0x4b>
+80104b54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *s++ = 0;
-801047f8:	83 c2 01             	add    $0x1,%edx
-801047fb:	89 c1                	mov    %eax,%ecx
-801047fd:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
+80104b58:	83 c2 01             	add    $0x1,%edx
+80104b5b:	89 c1                	mov    %eax,%ecx
+80104b5d:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
   while(n-- > 0)
-80104801:	29 d1                	sub    %edx,%ecx
-80104803:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
-80104807:	85 c9                	test   %ecx,%ecx
-80104809:	7f ed                	jg     801047f8 <strncpy+0x38>
+80104b61:	29 d1                	sub    %edx,%ecx
+80104b63:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
+80104b67:	85 c9                	test   %ecx,%ecx
+80104b69:	7f ed                	jg     80104b58 <strncpy+0x38>
   return os;
 }
-8010480b:	5b                   	pop    %ebx
-8010480c:	89 f0                	mov    %esi,%eax
-8010480e:	5e                   	pop    %esi
-8010480f:	5f                   	pop    %edi
-80104810:	5d                   	pop    %ebp
-80104811:	c3                   	ret    
-80104812:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b6b:	5b                   	pop    %ebx
+80104b6c:	89 f0                	mov    %esi,%eax
+80104b6e:	5e                   	pop    %esi
+80104b6f:	5f                   	pop    %edi
+80104b70:	5d                   	pop    %ebp
+80104b71:	c3                   	ret    
+80104b72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104820 <safestrcpy>:
+80104b80 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104820:	55                   	push   %ebp
-80104821:	89 e5                	mov    %esp,%ebp
-80104823:	56                   	push   %esi
-80104824:	8b 55 10             	mov    0x10(%ebp),%edx
-80104827:	8b 75 08             	mov    0x8(%ebp),%esi
-8010482a:	53                   	push   %ebx
-8010482b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104b80:	55                   	push   %ebp
+80104b81:	89 e5                	mov    %esp,%ebp
+80104b83:	56                   	push   %esi
+80104b84:	8b 55 10             	mov    0x10(%ebp),%edx
+80104b87:	8b 75 08             	mov    0x8(%ebp),%esi
+80104b8a:	53                   	push   %ebx
+80104b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-8010482e:	85 d2                	test   %edx,%edx
-80104830:	7e 25                	jle    80104857 <safestrcpy+0x37>
-80104832:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-80104836:	89 f2                	mov    %esi,%edx
-80104838:	eb 16                	jmp    80104850 <safestrcpy+0x30>
-8010483a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b8e:	85 d2                	test   %edx,%edx
+80104b90:	7e 25                	jle    80104bb7 <safestrcpy+0x37>
+80104b92:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104b96:	89 f2                	mov    %esi,%edx
+80104b98:	eb 16                	jmp    80104bb0 <safestrcpy+0x30>
+80104b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104840:	0f b6 08             	movzbl (%eax),%ecx
-80104843:	83 c0 01             	add    $0x1,%eax
-80104846:	83 c2 01             	add    $0x1,%edx
-80104849:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010484c:	84 c9                	test   %cl,%cl
-8010484e:	74 04                	je     80104854 <safestrcpy+0x34>
-80104850:	39 d8                	cmp    %ebx,%eax
-80104852:	75 ec                	jne    80104840 <safestrcpy+0x20>
+80104ba0:	0f b6 08             	movzbl (%eax),%ecx
+80104ba3:	83 c0 01             	add    $0x1,%eax
+80104ba6:	83 c2 01             	add    $0x1,%edx
+80104ba9:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104bac:	84 c9                	test   %cl,%cl
+80104bae:	74 04                	je     80104bb4 <safestrcpy+0x34>
+80104bb0:	39 d8                	cmp    %ebx,%eax
+80104bb2:	75 ec                	jne    80104ba0 <safestrcpy+0x20>
     ;
   *s = 0;
-80104854:	c6 02 00             	movb   $0x0,(%edx)
+80104bb4:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104857:	89 f0                	mov    %esi,%eax
-80104859:	5b                   	pop    %ebx
-8010485a:	5e                   	pop    %esi
-8010485b:	5d                   	pop    %ebp
-8010485c:	c3                   	ret    
-8010485d:	8d 76 00             	lea    0x0(%esi),%esi
+80104bb7:	89 f0                	mov    %esi,%eax
+80104bb9:	5b                   	pop    %ebx
+80104bba:	5e                   	pop    %esi
+80104bbb:	5d                   	pop    %ebp
+80104bbc:	c3                   	ret    
+80104bbd:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104860 <strlen>:
+80104bc0 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104860:	55                   	push   %ebp
+80104bc0:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104861:	31 c0                	xor    %eax,%eax
+80104bc1:	31 c0                	xor    %eax,%eax
 {
-80104863:	89 e5                	mov    %esp,%ebp
-80104865:	8b 55 08             	mov    0x8(%ebp),%edx
+80104bc3:	89 e5                	mov    %esp,%ebp
+80104bc5:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-80104868:	80 3a 00             	cmpb   $0x0,(%edx)
-8010486b:	74 0c                	je     80104879 <strlen+0x19>
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
-80104870:	83 c0 01             	add    $0x1,%eax
-80104873:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-80104877:	75 f7                	jne    80104870 <strlen+0x10>
+80104bc8:	80 3a 00             	cmpb   $0x0,(%edx)
+80104bcb:	74 0c                	je     80104bd9 <strlen+0x19>
+80104bcd:	8d 76 00             	lea    0x0(%esi),%esi
+80104bd0:	83 c0 01             	add    $0x1,%eax
+80104bd3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104bd7:	75 f7                	jne    80104bd0 <strlen+0x10>
     ;
   return n;
 }
-80104879:	5d                   	pop    %ebp
-8010487a:	c3                   	ret    
+80104bd9:	5d                   	pop    %ebp
+80104bda:	c3                   	ret    
 
-8010487b <swtch>:
+80104bdb <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-8010487b:	8b 44 24 04          	mov    0x4(%esp),%eax
+80104bdb:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-8010487f:	8b 54 24 08          	mov    0x8(%esp),%edx
+80104bdf:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-80104883:	55                   	push   %ebp
+80104be3:	55                   	push   %ebp
   pushl %ebx
-80104884:	53                   	push   %ebx
+80104be4:	53                   	push   %ebx
   pushl %esi
-80104885:	56                   	push   %esi
+80104be5:	56                   	push   %esi
   pushl %edi
-80104886:	57                   	push   %edi
+80104be6:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-80104887:	89 20                	mov    %esp,(%eax)
+80104be7:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-80104889:	89 d4                	mov    %edx,%esp
+80104be9:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-8010488b:	5f                   	pop    %edi
+80104beb:	5f                   	pop    %edi
   popl %esi
-8010488c:	5e                   	pop    %esi
+80104bec:	5e                   	pop    %esi
   popl %ebx
-8010488d:	5b                   	pop    %ebx
+80104bed:	5b                   	pop    %ebx
   popl %ebp
-8010488e:	5d                   	pop    %ebp
+80104bee:	5d                   	pop    %ebp
   ret
-8010488f:	c3                   	ret    
+80104bef:	c3                   	ret    
 
-80104890 <fetchint>:
+80104bf0 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-80104890:	55                   	push   %ebp
-80104891:	89 e5                	mov    %esp,%ebp
-80104893:	53                   	push   %ebx
-80104894:	83 ec 04             	sub    $0x4,%esp
-80104897:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104bf0:	55                   	push   %ebp
+80104bf1:	89 e5                	mov    %esp,%ebp
+80104bf3:	53                   	push   %ebx
+80104bf4:	83 ec 04             	sub    $0x4,%esp
+80104bf7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-8010489a:	e8 d1 f0 ff ff       	call   80103970 <myproc>
+80104bfa:	e8 b1 ed ff ff       	call   801039b0 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-8010489f:	8b 00                	mov    (%eax),%eax
-801048a1:	39 d8                	cmp    %ebx,%eax
-801048a3:	76 1b                	jbe    801048c0 <fetchint+0x30>
-801048a5:	8d 53 04             	lea    0x4(%ebx),%edx
-801048a8:	39 d0                	cmp    %edx,%eax
-801048aa:	72 14                	jb     801048c0 <fetchint+0x30>
+80104bff:	8b 00                	mov    (%eax),%eax
+80104c01:	39 d8                	cmp    %ebx,%eax
+80104c03:	76 1b                	jbe    80104c20 <fetchint+0x30>
+80104c05:	8d 53 04             	lea    0x4(%ebx),%edx
+80104c08:	39 d0                	cmp    %edx,%eax
+80104c0a:	72 14                	jb     80104c20 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048ac:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048af:	8b 13                	mov    (%ebx),%edx
-801048b1:	89 10                	mov    %edx,(%eax)
+80104c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104c0f:	8b 13                	mov    (%ebx),%edx
+80104c11:	89 10                	mov    %edx,(%eax)
   return 0;
-801048b3:	31 c0                	xor    %eax,%eax
+80104c13:	31 c0                	xor    %eax,%eax
 }
-801048b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801048b8:	c9                   	leave  
-801048b9:	c3                   	ret    
-801048ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-801048c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048c5:	eb ee                	jmp    801048b5 <fetchint+0x25>
-801048c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ce:	66 90                	xchg   %ax,%ax
+80104c15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c18:	c9                   	leave  
+80104c19:	c3                   	ret    
+80104c1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80104c20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104c25:	eb ee                	jmp    80104c15 <fetchint+0x25>
+80104c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c2e:	66 90                	xchg   %ax,%ax
 
-801048d0 <fetchstr>:
+80104c30 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048d0:	55                   	push   %ebp
-801048d1:	89 e5                	mov    %esp,%ebp
-801048d3:	53                   	push   %ebx
-801048d4:	83 ec 04             	sub    $0x4,%esp
-801048d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104c30:	55                   	push   %ebp
+80104c31:	89 e5                	mov    %esp,%ebp
+80104c33:	53                   	push   %ebx
+80104c34:	83 ec 04             	sub    $0x4,%esp
+80104c37:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048da:	e8 91 f0 ff ff       	call   80103970 <myproc>
+80104c3a:	e8 71 ed ff ff       	call   801039b0 <myproc>
 
   if(addr >= curproc->sz)
-801048df:	39 18                	cmp    %ebx,(%eax)
-801048e1:	76 2d                	jbe    80104910 <fetchstr+0x40>
+80104c3f:	39 18                	cmp    %ebx,(%eax)
+80104c41:	76 2d                	jbe    80104c70 <fetchstr+0x40>
     return -1;
   *pp = (char*)addr;
-801048e3:	8b 55 0c             	mov    0xc(%ebp),%edx
-801048e6:	89 1a                	mov    %ebx,(%edx)
+80104c43:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104c46:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-801048e8:	8b 10                	mov    (%eax),%edx
+80104c48:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-801048ea:	39 d3                	cmp    %edx,%ebx
-801048ec:	73 22                	jae    80104910 <fetchstr+0x40>
-801048ee:	89 d8                	mov    %ebx,%eax
-801048f0:	eb 0d                	jmp    801048ff <fetchstr+0x2f>
-801048f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801048f8:	83 c0 01             	add    $0x1,%eax
-801048fb:	39 c2                	cmp    %eax,%edx
-801048fd:	76 11                	jbe    80104910 <fetchstr+0x40>
+80104c4a:	39 d3                	cmp    %edx,%ebx
+80104c4c:	73 22                	jae    80104c70 <fetchstr+0x40>
+80104c4e:	89 d8                	mov    %ebx,%eax
+80104c50:	eb 0d                	jmp    80104c5f <fetchstr+0x2f>
+80104c52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104c58:	83 c0 01             	add    $0x1,%eax
+80104c5b:	39 c2                	cmp    %eax,%edx
+80104c5d:	76 11                	jbe    80104c70 <fetchstr+0x40>
     if(*s == 0)
-801048ff:	80 38 00             	cmpb   $0x0,(%eax)
-80104902:	75 f4                	jne    801048f8 <fetchstr+0x28>
+80104c5f:	80 38 00             	cmpb   $0x0,(%eax)
+80104c62:	75 f4                	jne    80104c58 <fetchstr+0x28>
       return s - *pp;
-80104904:	29 d8                	sub    %ebx,%eax
+80104c64:	29 d8                	sub    %ebx,%eax
   }
   return -1;
 }
-80104906:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104909:	c9                   	leave  
-8010490a:	c3                   	ret    
-8010490b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010490f:	90                   	nop
-80104910:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return -1;
-80104913:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104918:	c9                   	leave  
-80104919:	c3                   	ret    
-8010491a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104c66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c69:	c9                   	leave  
+80104c6a:	c3                   	ret    
+80104c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c6f:	90                   	nop
+80104c70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return -1;
+80104c73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104c78:	c9                   	leave  
+80104c79:	c3                   	ret    
+80104c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104920 <argint>:
+80104c80 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104920:	55                   	push   %ebp
-80104921:	89 e5                	mov    %esp,%ebp
-80104923:	56                   	push   %esi
-80104924:	53                   	push   %ebx
+80104c80:	55                   	push   %ebp
+80104c81:	89 e5                	mov    %esp,%ebp
+80104c83:	56                   	push   %esi
+80104c84:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104925:	e8 46 f0 ff ff       	call   80103970 <myproc>
-8010492a:	8b 55 08             	mov    0x8(%ebp),%edx
-8010492d:	8b 40 18             	mov    0x18(%eax),%eax
-80104930:	8b 40 44             	mov    0x44(%eax),%eax
-80104933:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104c85:	e8 26 ed ff ff       	call   801039b0 <myproc>
+80104c8a:	8b 55 08             	mov    0x8(%ebp),%edx
+80104c8d:	8b 40 18             	mov    0x18(%eax),%eax
+80104c90:	8b 40 44             	mov    0x44(%eax),%eax
+80104c93:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104936:	e8 35 f0 ff ff       	call   80103970 <myproc>
+80104c96:	e8 15 ed ff ff       	call   801039b0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010493b:	8d 73 04             	lea    0x4(%ebx),%esi
+80104c9b:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-8010493e:	8b 00                	mov    (%eax),%eax
-80104940:	39 c6                	cmp    %eax,%esi
-80104942:	73 1c                	jae    80104960 <argint+0x40>
-80104944:	8d 53 08             	lea    0x8(%ebx),%edx
-80104947:	39 d0                	cmp    %edx,%eax
-80104949:	72 15                	jb     80104960 <argint+0x40>
+80104c9e:	8b 00                	mov    (%eax),%eax
+80104ca0:	39 c6                	cmp    %eax,%esi
+80104ca2:	73 1c                	jae    80104cc0 <argint+0x40>
+80104ca4:	8d 53 08             	lea    0x8(%ebx),%edx
+80104ca7:	39 d0                	cmp    %edx,%eax
+80104ca9:	72 15                	jb     80104cc0 <argint+0x40>
   *ip = *(int*)(addr);
-8010494b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010494e:	8b 53 04             	mov    0x4(%ebx),%edx
-80104951:	89 10                	mov    %edx,(%eax)
+80104cab:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104cae:	8b 53 04             	mov    0x4(%ebx),%edx
+80104cb1:	89 10                	mov    %edx,(%eax)
   return 0;
-80104953:	31 c0                	xor    %eax,%eax
+80104cb3:	31 c0                	xor    %eax,%eax
 }
-80104955:	5b                   	pop    %ebx
-80104956:	5e                   	pop    %esi
-80104957:	5d                   	pop    %ebp
-80104958:	c3                   	ret    
-80104959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cb5:	5b                   	pop    %ebx
+80104cb6:	5e                   	pop    %esi
+80104cb7:	5d                   	pop    %ebp
+80104cb8:	c3                   	ret    
+80104cb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104960:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104cc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104965:	eb ee                	jmp    80104955 <argint+0x35>
-80104967:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010496e:	66 90                	xchg   %ax,%ax
+80104cc5:	eb ee                	jmp    80104cb5 <argint+0x35>
+80104cc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cce:	66 90                	xchg   %ax,%ax
 
-80104970 <argptr>:
+80104cd0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-80104970:	55                   	push   %ebp
-80104971:	89 e5                	mov    %esp,%ebp
-80104973:	57                   	push   %edi
-80104974:	56                   	push   %esi
-80104975:	53                   	push   %ebx
-80104976:	83 ec 0c             	sub    $0xc,%esp
+80104cd0:	55                   	push   %ebp
+80104cd1:	89 e5                	mov    %esp,%ebp
+80104cd3:	57                   	push   %edi
+80104cd4:	56                   	push   %esi
+80104cd5:	53                   	push   %ebx
+80104cd6:	83 ec 0c             	sub    $0xc,%esp
   int i;
   struct proc *curproc = myproc();
-80104979:	e8 f2 ef ff ff       	call   80103970 <myproc>
-8010497e:	89 c6                	mov    %eax,%esi
+80104cd9:	e8 d2 ec ff ff       	call   801039b0 <myproc>
+80104cde:	89 c6                	mov    %eax,%esi
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104980:	e8 eb ef ff ff       	call   80103970 <myproc>
-80104985:	8b 55 08             	mov    0x8(%ebp),%edx
-80104988:	8b 40 18             	mov    0x18(%eax),%eax
-8010498b:	8b 40 44             	mov    0x44(%eax),%eax
-8010498e:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104ce0:	e8 cb ec ff ff       	call   801039b0 <myproc>
+80104ce5:	8b 55 08             	mov    0x8(%ebp),%edx
+80104ce8:	8b 40 18             	mov    0x18(%eax),%eax
+80104ceb:	8b 40 44             	mov    0x44(%eax),%eax
+80104cee:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104991:	e8 da ef ff ff       	call   80103970 <myproc>
+80104cf1:	e8 ba ec ff ff       	call   801039b0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104996:	8d 7b 04             	lea    0x4(%ebx),%edi
+80104cf6:	8d 7b 04             	lea    0x4(%ebx),%edi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104999:	8b 00                	mov    (%eax),%eax
-8010499b:	39 c7                	cmp    %eax,%edi
-8010499d:	73 31                	jae    801049d0 <argptr+0x60>
-8010499f:	8d 4b 08             	lea    0x8(%ebx),%ecx
-801049a2:	39 c8                	cmp    %ecx,%eax
-801049a4:	72 2a                	jb     801049d0 <argptr+0x60>
+80104cf9:	8b 00                	mov    (%eax),%eax
+80104cfb:	39 c7                	cmp    %eax,%edi
+80104cfd:	73 31                	jae    80104d30 <argptr+0x60>
+80104cff:	8d 4b 08             	lea    0x8(%ebx),%ecx
+80104d02:	39 c8                	cmp    %ecx,%eax
+80104d04:	72 2a                	jb     80104d30 <argptr+0x60>
  
   if(argint(n, &i) < 0)
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049a6:	8b 55 10             	mov    0x10(%ebp),%edx
+80104d06:	8b 55 10             	mov    0x10(%ebp),%edx
   *ip = *(int*)(addr);
-801049a9:	8b 43 04             	mov    0x4(%ebx),%eax
+80104d09:	8b 43 04             	mov    0x4(%ebx),%eax
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049ac:	85 d2                	test   %edx,%edx
-801049ae:	78 20                	js     801049d0 <argptr+0x60>
-801049b0:	8b 16                	mov    (%esi),%edx
-801049b2:	39 c2                	cmp    %eax,%edx
-801049b4:	76 1a                	jbe    801049d0 <argptr+0x60>
-801049b6:	8b 5d 10             	mov    0x10(%ebp),%ebx
-801049b9:	01 c3                	add    %eax,%ebx
-801049bb:	39 da                	cmp    %ebx,%edx
-801049bd:	72 11                	jb     801049d0 <argptr+0x60>
+80104d0c:	85 d2                	test   %edx,%edx
+80104d0e:	78 20                	js     80104d30 <argptr+0x60>
+80104d10:	8b 16                	mov    (%esi),%edx
+80104d12:	39 c2                	cmp    %eax,%edx
+80104d14:	76 1a                	jbe    80104d30 <argptr+0x60>
+80104d16:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104d19:	01 c3                	add    %eax,%ebx
+80104d1b:	39 da                	cmp    %ebx,%edx
+80104d1d:	72 11                	jb     80104d30 <argptr+0x60>
     return -1;
   *pp = (char*)i;
-801049bf:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049c2:	89 02                	mov    %eax,(%edx)
+80104d1f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104d22:	89 02                	mov    %eax,(%edx)
   return 0;
-801049c4:	31 c0                	xor    %eax,%eax
+80104d24:	31 c0                	xor    %eax,%eax
 }
-801049c6:	83 c4 0c             	add    $0xc,%esp
-801049c9:	5b                   	pop    %ebx
-801049ca:	5e                   	pop    %esi
-801049cb:	5f                   	pop    %edi
-801049cc:	5d                   	pop    %ebp
-801049cd:	c3                   	ret    
-801049ce:	66 90                	xchg   %ax,%ax
-    return -1;
-801049d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049d5:	eb ef                	jmp    801049c6 <argptr+0x56>
-801049d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049de:	66 90                	xchg   %ax,%ax
+80104d26:	83 c4 0c             	add    $0xc,%esp
+80104d29:	5b                   	pop    %ebx
+80104d2a:	5e                   	pop    %esi
+80104d2b:	5f                   	pop    %edi
+80104d2c:	5d                   	pop    %ebp
+80104d2d:	c3                   	ret    
+80104d2e:	66 90                	xchg   %ax,%ax
+    return -1;
+80104d30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d35:	eb ef                	jmp    80104d26 <argptr+0x56>
+80104d37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d3e:	66 90                	xchg   %ax,%ax
 
-801049e0 <argstr>:
+80104d40 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-801049e0:	55                   	push   %ebp
-801049e1:	89 e5                	mov    %esp,%ebp
-801049e3:	56                   	push   %esi
-801049e4:	53                   	push   %ebx
+80104d40:	55                   	push   %ebp
+80104d41:	89 e5                	mov    %esp,%ebp
+80104d43:	56                   	push   %esi
+80104d44:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801049e5:	e8 86 ef ff ff       	call   80103970 <myproc>
-801049ea:	8b 55 08             	mov    0x8(%ebp),%edx
-801049ed:	8b 40 18             	mov    0x18(%eax),%eax
-801049f0:	8b 40 44             	mov    0x44(%eax),%eax
-801049f3:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104d45:	e8 66 ec ff ff       	call   801039b0 <myproc>
+80104d4a:	8b 55 08             	mov    0x8(%ebp),%edx
+80104d4d:	8b 40 18             	mov    0x18(%eax),%eax
+80104d50:	8b 40 44             	mov    0x44(%eax),%eax
+80104d53:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-801049f6:	e8 75 ef ff ff       	call   80103970 <myproc>
+80104d56:	e8 55 ec ff ff       	call   801039b0 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801049fb:	8d 73 04             	lea    0x4(%ebx),%esi
+80104d5b:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801049fe:	8b 00                	mov    (%eax),%eax
-80104a00:	39 c6                	cmp    %eax,%esi
-80104a02:	73 44                	jae    80104a48 <argstr+0x68>
-80104a04:	8d 53 08             	lea    0x8(%ebx),%edx
-80104a07:	39 d0                	cmp    %edx,%eax
-80104a09:	72 3d                	jb     80104a48 <argstr+0x68>
+80104d5e:	8b 00                	mov    (%eax),%eax
+80104d60:	39 c6                	cmp    %eax,%esi
+80104d62:	73 44                	jae    80104da8 <argstr+0x68>
+80104d64:	8d 53 08             	lea    0x8(%ebx),%edx
+80104d67:	39 d0                	cmp    %edx,%eax
+80104d69:	72 3d                	jb     80104da8 <argstr+0x68>
   *ip = *(int*)(addr);
-80104a0b:	8b 5b 04             	mov    0x4(%ebx),%ebx
+80104d6b:	8b 5b 04             	mov    0x4(%ebx),%ebx
   struct proc *curproc = myproc();
-80104a0e:	e8 5d ef ff ff       	call   80103970 <myproc>
+80104d6e:	e8 3d ec ff ff       	call   801039b0 <myproc>
   if(addr >= curproc->sz)
-80104a13:	3b 18                	cmp    (%eax),%ebx
-80104a15:	73 31                	jae    80104a48 <argstr+0x68>
+80104d73:	3b 18                	cmp    (%eax),%ebx
+80104d75:	73 31                	jae    80104da8 <argstr+0x68>
   *pp = (char*)addr;
-80104a17:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104a1a:	89 1a                	mov    %ebx,(%edx)
+80104d77:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104d7a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-80104a1c:	8b 10                	mov    (%eax),%edx
+80104d7c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-80104a1e:	39 d3                	cmp    %edx,%ebx
-80104a20:	73 26                	jae    80104a48 <argstr+0x68>
-80104a22:	89 d8                	mov    %ebx,%eax
-80104a24:	eb 11                	jmp    80104a37 <argstr+0x57>
-80104a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a2d:	8d 76 00             	lea    0x0(%esi),%esi
-80104a30:	83 c0 01             	add    $0x1,%eax
-80104a33:	39 c2                	cmp    %eax,%edx
-80104a35:	76 11                	jbe    80104a48 <argstr+0x68>
+80104d7e:	39 d3                	cmp    %edx,%ebx
+80104d80:	73 26                	jae    80104da8 <argstr+0x68>
+80104d82:	89 d8                	mov    %ebx,%eax
+80104d84:	eb 11                	jmp    80104d97 <argstr+0x57>
+80104d86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d8d:	8d 76 00             	lea    0x0(%esi),%esi
+80104d90:	83 c0 01             	add    $0x1,%eax
+80104d93:	39 c2                	cmp    %eax,%edx
+80104d95:	76 11                	jbe    80104da8 <argstr+0x68>
     if(*s == 0)
-80104a37:	80 38 00             	cmpb   $0x0,(%eax)
-80104a3a:	75 f4                	jne    80104a30 <argstr+0x50>
+80104d97:	80 38 00             	cmpb   $0x0,(%eax)
+80104d9a:	75 f4                	jne    80104d90 <argstr+0x50>
       return s - *pp;
-80104a3c:	29 d8                	sub    %ebx,%eax
+80104d9c:	29 d8                	sub    %ebx,%eax
   int addr;
   if(argint(n, &addr) < 0)
     return -1;
   return fetchstr(addr, pp);
 }
-80104a3e:	5b                   	pop    %ebx
-80104a3f:	5e                   	pop    %esi
-80104a40:	5d                   	pop    %ebp
-80104a41:	c3                   	ret    
-80104a42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104a48:	5b                   	pop    %ebx
-    return -1;
-80104a49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a4e:	5e                   	pop    %esi
-80104a4f:	5d                   	pop    %ebp
-80104a50:	c3                   	ret    
-80104a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a5f:	90                   	nop
+80104d9e:	5b                   	pop    %ebx
+80104d9f:	5e                   	pop    %esi
+80104da0:	5d                   	pop    %ebp
+80104da1:	c3                   	ret    
+80104da2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104da8:	5b                   	pop    %ebx
+    return -1;
+80104da9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104dae:	5e                   	pop    %esi
+80104daf:	5d                   	pop    %ebp
+80104db0:	c3                   	ret    
+80104db1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104db8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104dbf:	90                   	nop
 
-80104a60 <syscall>:
-[SYS_close]   sys_close,
+80104dc0 <syscall>:
+[SYS_draw]    sys_draw,
 };
 
 void
 syscall(void)
 {
-80104a60:	55                   	push   %ebp
-80104a61:	89 e5                	mov    %esp,%ebp
-80104a63:	53                   	push   %ebx
-80104a64:	83 ec 04             	sub    $0x4,%esp
+80104dc0:	55                   	push   %ebp
+80104dc1:	89 e5                	mov    %esp,%ebp
+80104dc3:	53                   	push   %ebx
+80104dc4:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a67:	e8 04 ef ff ff       	call   80103970 <myproc>
-80104a6c:	89 c3                	mov    %eax,%ebx
+80104dc7:	e8 e4 eb ff ff       	call   801039b0 <myproc>
+80104dcc:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a6e:	8b 40 18             	mov    0x18(%eax),%eax
-80104a71:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104dce:	8b 40 18             	mov    0x18(%eax),%eax
+80104dd1:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a74:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a77:	83 fa 14             	cmp    $0x14,%edx
-80104a7a:	77 24                	ja     80104aa0 <syscall+0x40>
-80104a7c:	8b 14 85 60 78 10 80 	mov    -0x7fef87a0(,%eax,4),%edx
-80104a83:	85 d2                	test   %edx,%edx
-80104a85:	74 19                	je     80104aa0 <syscall+0x40>
+80104dd4:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104dd7:	83 fa 18             	cmp    $0x18,%edx
+80104dda:	77 24                	ja     80104e00 <syscall+0x40>
+80104ddc:	8b 14 85 e0 7c 10 80 	mov    -0x7fef8320(,%eax,4),%edx
+80104de3:	85 d2                	test   %edx,%edx
+80104de5:	74 19                	je     80104e00 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a87:	ff d2                	call   *%edx
-80104a89:	89 c2                	mov    %eax,%edx
-80104a8b:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a8e:	89 50 1c             	mov    %edx,0x1c(%eax)
+80104de7:	ff d2                	call   *%edx
+80104de9:	89 c2                	mov    %eax,%edx
+80104deb:	8b 43 18             	mov    0x18(%ebx),%eax
+80104dee:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a94:	c9                   	leave  
-80104a95:	c3                   	ret    
-80104a96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a9d:	8d 76 00             	lea    0x0(%esi),%esi
+80104df1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104df4:	c9                   	leave  
+80104df5:	c3                   	ret    
+80104df6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104dfd:	8d 76 00             	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104aa0:	50                   	push   %eax
+80104e00:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104aa1:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104e01:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104aa4:	50                   	push   %eax
-80104aa5:	ff 73 10             	push   0x10(%ebx)
-80104aa8:	68 3d 78 10 80       	push   $0x8010783d
-80104aad:	e8 ee bb ff ff       	call   801006a0 <cprintf>
+80104e04:	50                   	push   %eax
+80104e05:	ff 73 10             	push   0x10(%ebx)
+80104e08:	68 ad 7c 10 80       	push   $0x80107cad
+80104e0d:	e8 8e b8 ff ff       	call   801006a0 <cprintf>
     curproc->tf->eax = -1;
-80104ab2:	8b 43 18             	mov    0x18(%ebx),%eax
-80104ab5:	83 c4 10             	add    $0x10,%esp
-80104ab8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104abf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104ac2:	c9                   	leave  
-80104ac3:	c3                   	ret    
-80104ac4:	66 90                	xchg   %ax,%ax
-80104ac6:	66 90                	xchg   %ax,%ax
-80104ac8:	66 90                	xchg   %ax,%ax
-80104aca:	66 90                	xchg   %ax,%ax
-80104acc:	66 90                	xchg   %ax,%ax
-80104ace:	66 90                	xchg   %ax,%ax
+80104e12:	8b 43 18             	mov    0x18(%ebx),%eax
+80104e15:	83 c4 10             	add    $0x10,%esp
+80104e18:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104e1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104e22:	c9                   	leave  
+80104e23:	c3                   	ret    
+80104e24:	66 90                	xchg   %ax,%ax
+80104e26:	66 90                	xchg   %ax,%ax
+80104e28:	66 90                	xchg   %ax,%ax
+80104e2a:	66 90                	xchg   %ax,%ax
+80104e2c:	66 90                	xchg   %ax,%ax
+80104e2e:	66 90                	xchg   %ax,%ax
 
-80104ad0 <create>:
+80104e30 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ad0:	55                   	push   %ebp
-80104ad1:	89 e5                	mov    %esp,%ebp
-80104ad3:	57                   	push   %edi
-80104ad4:	56                   	push   %esi
+80104e30:	55                   	push   %ebp
+80104e31:	89 e5                	mov    %esp,%ebp
+80104e33:	57                   	push   %edi
+80104e34:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ad5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104e35:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ad8:	53                   	push   %ebx
-80104ad9:	83 ec 34             	sub    $0x34,%esp
-80104adc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104adf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104e38:	53                   	push   %ebx
+80104e39:	83 ec 34             	sub    $0x34,%esp
+80104e3c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104e3f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ae2:	57                   	push   %edi
-80104ae3:	50                   	push   %eax
+80104e42:	57                   	push   %edi
+80104e43:	50                   	push   %eax
 {
-80104ae4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ae7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80104e44:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104e47:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aea:	e8 d1 d5 ff ff       	call   801020c0 <nameiparent>
-80104aef:	83 c4 10             	add    $0x10,%esp
-80104af2:	85 c0                	test   %eax,%eax
-80104af4:	0f 84 46 01 00 00    	je     80104c40 <create+0x170>
+80104e4a:	e8 71 d2 ff ff       	call   801020c0 <nameiparent>
+80104e4f:	83 c4 10             	add    $0x10,%esp
+80104e52:	85 c0                	test   %eax,%eax
+80104e54:	0f 84 46 01 00 00    	je     80104fa0 <create+0x170>
     return 0;
   ilock(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	89 c3                	mov    %eax,%ebx
-80104aff:	50                   	push   %eax
-80104b00:	e8 7b cc ff ff       	call   80101780 <ilock>
+80104e5a:	83 ec 0c             	sub    $0xc,%esp
+80104e5d:	89 c3                	mov    %eax,%ebx
+80104e5f:	50                   	push   %eax
+80104e60:	e8 1b c9 ff ff       	call   80101780 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104b05:	83 c4 0c             	add    $0xc,%esp
-80104b08:	6a 00                	push   $0x0
-80104b0a:	57                   	push   %edi
-80104b0b:	53                   	push   %ebx
-80104b0c:	e8 cf d1 ff ff       	call   80101ce0 <dirlookup>
-80104b11:	83 c4 10             	add    $0x10,%esp
-80104b14:	89 c6                	mov    %eax,%esi
-80104b16:	85 c0                	test   %eax,%eax
-80104b18:	74 56                	je     80104b70 <create+0xa0>
+80104e65:	83 c4 0c             	add    $0xc,%esp
+80104e68:	6a 00                	push   $0x0
+80104e6a:	57                   	push   %edi
+80104e6b:	53                   	push   %ebx
+80104e6c:	e8 6f ce ff ff       	call   80101ce0 <dirlookup>
+80104e71:	83 c4 10             	add    $0x10,%esp
+80104e74:	89 c6                	mov    %eax,%esi
+80104e76:	85 c0                	test   %eax,%eax
+80104e78:	74 56                	je     80104ed0 <create+0xa0>
     iunlockput(dp);
-80104b1a:	83 ec 0c             	sub    $0xc,%esp
-80104b1d:	53                   	push   %ebx
-80104b1e:	e8 ed ce ff ff       	call   80101a10 <iunlockput>
+80104e7a:	83 ec 0c             	sub    $0xc,%esp
+80104e7d:	53                   	push   %ebx
+80104e7e:	e8 8d cb ff ff       	call   80101a10 <iunlockput>
     ilock(ip);
-80104b23:	89 34 24             	mov    %esi,(%esp)
-80104b26:	e8 55 cc ff ff       	call   80101780 <ilock>
+80104e83:	89 34 24             	mov    %esi,(%esp)
+80104e86:	e8 f5 c8 ff ff       	call   80101780 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b2b:	83 c4 10             	add    $0x10,%esp
-80104b2e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b33:	75 1b                	jne    80104b50 <create+0x80>
-80104b35:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b3a:	75 14                	jne    80104b50 <create+0x80>
+80104e8b:	83 c4 10             	add    $0x10,%esp
+80104e8e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104e93:	75 1b                	jne    80104eb0 <create+0x80>
+80104e95:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104e9a:	75 14                	jne    80104eb0 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b3f:	89 f0                	mov    %esi,%eax
-80104b41:	5b                   	pop    %ebx
-80104b42:	5e                   	pop    %esi
-80104b43:	5f                   	pop    %edi
-80104b44:	5d                   	pop    %ebp
-80104b45:	c3                   	ret    
-80104b46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4d:	8d 76 00             	lea    0x0(%esi),%esi
+80104e9c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e9f:	89 f0                	mov    %esi,%eax
+80104ea1:	5b                   	pop    %ebx
+80104ea2:	5e                   	pop    %esi
+80104ea3:	5f                   	pop    %edi
+80104ea4:	5d                   	pop    %ebp
+80104ea5:	c3                   	ret    
+80104ea6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ead:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b50:	83 ec 0c             	sub    $0xc,%esp
-80104b53:	56                   	push   %esi
+80104eb0:	83 ec 0c             	sub    $0xc,%esp
+80104eb3:	56                   	push   %esi
     return 0;
-80104b54:	31 f6                	xor    %esi,%esi
+80104eb4:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b56:	e8 b5 ce ff ff       	call   80101a10 <iunlockput>
+80104eb6:	e8 55 cb ff ff       	call   80101a10 <iunlockput>
     return 0;
-80104b5b:	83 c4 10             	add    $0x10,%esp
+80104ebb:	83 c4 10             	add    $0x10,%esp
 }
-80104b5e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b61:	89 f0                	mov    %esi,%eax
-80104b63:	5b                   	pop    %ebx
-80104b64:	5e                   	pop    %esi
-80104b65:	5f                   	pop    %edi
-80104b66:	5d                   	pop    %ebp
-80104b67:	c3                   	ret    
-80104b68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b6f:	90                   	nop
+80104ebe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104ec1:	89 f0                	mov    %esi,%eax
+80104ec3:	5b                   	pop    %ebx
+80104ec4:	5e                   	pop    %esi
+80104ec5:	5f                   	pop    %edi
+80104ec6:	5d                   	pop    %ebp
+80104ec7:	c3                   	ret    
+80104ec8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ecf:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b70:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b74:	83 ec 08             	sub    $0x8,%esp
-80104b77:	50                   	push   %eax
-80104b78:	ff 33                	push   (%ebx)
-80104b7a:	e8 91 ca ff ff       	call   80101610 <ialloc>
-80104b7f:	83 c4 10             	add    $0x10,%esp
-80104b82:	89 c6                	mov    %eax,%esi
-80104b84:	85 c0                	test   %eax,%eax
-80104b86:	0f 84 cd 00 00 00    	je     80104c59 <create+0x189>
+80104ed0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104ed4:	83 ec 08             	sub    $0x8,%esp
+80104ed7:	50                   	push   %eax
+80104ed8:	ff 33                	push   (%ebx)
+80104eda:	e8 31 c7 ff ff       	call   80101610 <ialloc>
+80104edf:	83 c4 10             	add    $0x10,%esp
+80104ee2:	89 c6                	mov    %eax,%esi
+80104ee4:	85 c0                	test   %eax,%eax
+80104ee6:	0f 84 cd 00 00 00    	je     80104fb9 <create+0x189>
   ilock(ip);
-80104b8c:	83 ec 0c             	sub    $0xc,%esp
-80104b8f:	50                   	push   %eax
-80104b90:	e8 eb cb ff ff       	call   80101780 <ilock>
+80104eec:	83 ec 0c             	sub    $0xc,%esp
+80104eef:	50                   	push   %eax
+80104ef0:	e8 8b c8 ff ff       	call   80101780 <ilock>
   ip->major = major;
-80104b95:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b99:	66 89 46 52          	mov    %ax,0x52(%esi)
+80104ef5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104ef9:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b9d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104ba1:	66 89 46 54          	mov    %ax,0x54(%esi)
+80104efd:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104f01:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104ba5:	b8 01 00 00 00       	mov    $0x1,%eax
-80104baa:	66 89 46 56          	mov    %ax,0x56(%esi)
+80104f05:	b8 01 00 00 00       	mov    $0x1,%eax
+80104f0a:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104bae:	89 34 24             	mov    %esi,(%esp)
-80104bb1:	e8 1a cb ff ff       	call   801016d0 <iupdate>
+80104f0e:	89 34 24             	mov    %esi,(%esp)
+80104f11:	e8 ba c7 ff ff       	call   801016d0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104bb6:	83 c4 10             	add    $0x10,%esp
-80104bb9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104bbe:	74 30                	je     80104bf0 <create+0x120>
+80104f16:	83 c4 10             	add    $0x10,%esp
+80104f19:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104f1e:	74 30                	je     80104f50 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104bc0:	83 ec 04             	sub    $0x4,%esp
-80104bc3:	ff 76 04             	push   0x4(%esi)
-80104bc6:	57                   	push   %edi
-80104bc7:	53                   	push   %ebx
-80104bc8:	e8 13 d4 ff ff       	call   80101fe0 <dirlink>
-80104bcd:	83 c4 10             	add    $0x10,%esp
-80104bd0:	85 c0                	test   %eax,%eax
-80104bd2:	78 78                	js     80104c4c <create+0x17c>
+80104f20:	83 ec 04             	sub    $0x4,%esp
+80104f23:	ff 76 04             	push   0x4(%esi)
+80104f26:	57                   	push   %edi
+80104f27:	53                   	push   %ebx
+80104f28:	e8 b3 d0 ff ff       	call   80101fe0 <dirlink>
+80104f2d:	83 c4 10             	add    $0x10,%esp
+80104f30:	85 c0                	test   %eax,%eax
+80104f32:	78 78                	js     80104fac <create+0x17c>
   iunlockput(dp);
-80104bd4:	83 ec 0c             	sub    $0xc,%esp
-80104bd7:	53                   	push   %ebx
-80104bd8:	e8 33 ce ff ff       	call   80101a10 <iunlockput>
+80104f34:	83 ec 0c             	sub    $0xc,%esp
+80104f37:	53                   	push   %ebx
+80104f38:	e8 d3 ca ff ff       	call   80101a10 <iunlockput>
   return ip;
-80104bdd:	83 c4 10             	add    $0x10,%esp
+80104f3d:	83 c4 10             	add    $0x10,%esp
 }
-80104be0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104be3:	89 f0                	mov    %esi,%eax
-80104be5:	5b                   	pop    %ebx
-80104be6:	5e                   	pop    %esi
-80104be7:	5f                   	pop    %edi
-80104be8:	5d                   	pop    %ebp
-80104be9:	c3                   	ret    
-80104bea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f43:	89 f0                	mov    %esi,%eax
+80104f45:	5b                   	pop    %ebx
+80104f46:	5e                   	pop    %esi
+80104f47:	5f                   	pop    %edi
+80104f48:	5d                   	pop    %ebp
+80104f49:	c3                   	ret    
+80104f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bf0:	83 ec 0c             	sub    $0xc,%esp
+80104f50:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bf3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104f53:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bf8:	53                   	push   %ebx
-80104bf9:	e8 d2 ca ff ff       	call   801016d0 <iupdate>
+80104f58:	53                   	push   %ebx
+80104f59:	e8 72 c7 ff ff       	call   801016d0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bfe:	83 c4 0c             	add    $0xc,%esp
-80104c01:	ff 76 04             	push   0x4(%esi)
-80104c04:	68 d4 78 10 80       	push   $0x801078d4
-80104c09:	56                   	push   %esi
-80104c0a:	e8 d1 d3 ff ff       	call   80101fe0 <dirlink>
-80104c0f:	83 c4 10             	add    $0x10,%esp
-80104c12:	85 c0                	test   %eax,%eax
-80104c14:	78 18                	js     80104c2e <create+0x15e>
-80104c16:	83 ec 04             	sub    $0x4,%esp
-80104c19:	ff 73 04             	push   0x4(%ebx)
-80104c1c:	68 d3 78 10 80       	push   $0x801078d3
-80104c21:	56                   	push   %esi
-80104c22:	e8 b9 d3 ff ff       	call   80101fe0 <dirlink>
-80104c27:	83 c4 10             	add    $0x10,%esp
-80104c2a:	85 c0                	test   %eax,%eax
-80104c2c:	79 92                	jns    80104bc0 <create+0xf0>
+80104f5e:	83 c4 0c             	add    $0xc,%esp
+80104f61:	ff 76 04             	push   0x4(%esi)
+80104f64:	68 64 7d 10 80       	push   $0x80107d64
+80104f69:	56                   	push   %esi
+80104f6a:	e8 71 d0 ff ff       	call   80101fe0 <dirlink>
+80104f6f:	83 c4 10             	add    $0x10,%esp
+80104f72:	85 c0                	test   %eax,%eax
+80104f74:	78 18                	js     80104f8e <create+0x15e>
+80104f76:	83 ec 04             	sub    $0x4,%esp
+80104f79:	ff 73 04             	push   0x4(%ebx)
+80104f7c:	68 63 7d 10 80       	push   $0x80107d63
+80104f81:	56                   	push   %esi
+80104f82:	e8 59 d0 ff ff       	call   80101fe0 <dirlink>
+80104f87:	83 c4 10             	add    $0x10,%esp
+80104f8a:	85 c0                	test   %eax,%eax
+80104f8c:	79 92                	jns    80104f20 <create+0xf0>
       panic("create dots");
-80104c2e:	83 ec 0c             	sub    $0xc,%esp
-80104c31:	68 c7 78 10 80       	push   $0x801078c7
-80104c36:	e8 45 b7 ff ff       	call   80100380 <panic>
-80104c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c3f:	90                   	nop
+80104f8e:	83 ec 0c             	sub    $0xc,%esp
+80104f91:	68 57 7d 10 80       	push   $0x80107d57
+80104f96:	e8 e5 b3 ff ff       	call   80100380 <panic>
+80104f9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f9f:	90                   	nop
 }
-80104c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104fa0:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c43:	31 f6                	xor    %esi,%esi
+80104fa3:	31 f6                	xor    %esi,%esi
 }
-80104c45:	5b                   	pop    %ebx
-80104c46:	89 f0                	mov    %esi,%eax
-80104c48:	5e                   	pop    %esi
-80104c49:	5f                   	pop    %edi
-80104c4a:	5d                   	pop    %ebp
-80104c4b:	c3                   	ret    
+80104fa5:	5b                   	pop    %ebx
+80104fa6:	89 f0                	mov    %esi,%eax
+80104fa8:	5e                   	pop    %esi
+80104fa9:	5f                   	pop    %edi
+80104faa:	5d                   	pop    %ebp
+80104fab:	c3                   	ret    
     panic("create: dirlink");
-80104c4c:	83 ec 0c             	sub    $0xc,%esp
-80104c4f:	68 d6 78 10 80       	push   $0x801078d6
-80104c54:	e8 27 b7 ff ff       	call   80100380 <panic>
+80104fac:	83 ec 0c             	sub    $0xc,%esp
+80104faf:	68 66 7d 10 80       	push   $0x80107d66
+80104fb4:	e8 c7 b3 ff ff       	call   80100380 <panic>
     panic("create: ialloc");
-80104c59:	83 ec 0c             	sub    $0xc,%esp
-80104c5c:	68 b8 78 10 80       	push   $0x801078b8
-80104c61:	e8 1a b7 ff ff       	call   80100380 <panic>
-80104c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c6d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104c70 <sys_dup>:
-{
-80104c70:	55                   	push   %ebp
-80104c71:	89 e5                	mov    %esp,%ebp
-80104c73:	56                   	push   %esi
-80104c74:	53                   	push   %ebx
+80104fb9:	83 ec 0c             	sub    $0xc,%esp
+80104fbc:	68 48 7d 10 80       	push   $0x80107d48
+80104fc1:	e8 ba b3 ff ff       	call   80100380 <panic>
+80104fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fcd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104fd0 <sys_dup>:
+{
+80104fd0:	55                   	push   %ebp
+80104fd1:	89 e5                	mov    %esp,%ebp
+80104fd3:	56                   	push   %esi
+80104fd4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104c75:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104fd5:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80104c78:	83 ec 18             	sub    $0x18,%esp
+80104fd8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c7b:	50                   	push   %eax
-80104c7c:	6a 00                	push   $0x0
-80104c7e:	e8 9d fc ff ff       	call   80104920 <argint>
-80104c83:	83 c4 10             	add    $0x10,%esp
-80104c86:	85 c0                	test   %eax,%eax
-80104c88:	78 36                	js     80104cc0 <sys_dup+0x50>
+80104fdb:	50                   	push   %eax
+80104fdc:	6a 00                	push   $0x0
+80104fde:	e8 9d fc ff ff       	call   80104c80 <argint>
+80104fe3:	83 c4 10             	add    $0x10,%esp
+80104fe6:	85 c0                	test   %eax,%eax
+80104fe8:	78 36                	js     80105020 <sys_dup+0x50>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c8a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c8e:	77 30                	ja     80104cc0 <sys_dup+0x50>
-80104c90:	e8 db ec ff ff       	call   80103970 <myproc>
-80104c95:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c98:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104c9c:	85 f6                	test   %esi,%esi
-80104c9e:	74 20                	je     80104cc0 <sys_dup+0x50>
+80104fea:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104fee:	77 30                	ja     80105020 <sys_dup+0x50>
+80104ff0:	e8 bb e9 ff ff       	call   801039b0 <myproc>
+80104ff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104ff8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80104ffc:	85 f6                	test   %esi,%esi
+80104ffe:	74 20                	je     80105020 <sys_dup+0x50>
   struct proc *curproc = myproc();
-80104ca0:	e8 cb ec ff ff       	call   80103970 <myproc>
+80105000:	e8 ab e9 ff ff       	call   801039b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104ca5:	31 db                	xor    %ebx,%ebx
-80104ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104cae:	66 90                	xchg   %ax,%ax
+80105005:	31 db                	xor    %ebx,%ebx
+80105007:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010500e:	66 90                	xchg   %ax,%ax
     if(curproc->ofile[fd] == 0){
-80104cb0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104cb4:	85 d2                	test   %edx,%edx
-80104cb6:	74 18                	je     80104cd0 <sys_dup+0x60>
+80105010:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105014:	85 d2                	test   %edx,%edx
+80105016:	74 18                	je     80105030 <sys_dup+0x60>
   for(fd = 0; fd < NOFILE; fd++){
-80104cb8:	83 c3 01             	add    $0x1,%ebx
-80104cbb:	83 fb 10             	cmp    $0x10,%ebx
-80104cbe:	75 f0                	jne    80104cb0 <sys_dup+0x40>
-}
-80104cc0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cc3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104cc8:	89 d8                	mov    %ebx,%eax
-80104cca:	5b                   	pop    %ebx
-80104ccb:	5e                   	pop    %esi
-80104ccc:	5d                   	pop    %ebp
-80104ccd:	c3                   	ret    
-80104cce:	66 90                	xchg   %ax,%ax
+80105018:	83 c3 01             	add    $0x1,%ebx
+8010501b:	83 fb 10             	cmp    $0x10,%ebx
+8010501e:	75 f0                	jne    80105010 <sys_dup+0x40>
+}
+80105020:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80105023:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105028:	89 d8                	mov    %ebx,%eax
+8010502a:	5b                   	pop    %ebx
+8010502b:	5e                   	pop    %esi
+8010502c:	5d                   	pop    %ebp
+8010502d:	c3                   	ret    
+8010502e:	66 90                	xchg   %ax,%ax
   filedup(f);
-80104cd0:	83 ec 0c             	sub    $0xc,%esp
+80105030:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-80104cd3:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105033:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104cd7:	56                   	push   %esi
-80104cd8:	e8 c3 c1 ff ff       	call   80100ea0 <filedup>
+80105037:	56                   	push   %esi
+80105038:	e8 63 be ff ff       	call   80100ea0 <filedup>
   return fd;
-80104cdd:	83 c4 10             	add    $0x10,%esp
+8010503d:	83 c4 10             	add    $0x10,%esp
 }
-80104ce0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ce3:	89 d8                	mov    %ebx,%eax
-80104ce5:	5b                   	pop    %ebx
-80104ce6:	5e                   	pop    %esi
-80104ce7:	5d                   	pop    %ebp
-80104ce8:	c3                   	ret    
-80104ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80104cf0 <sys_read>:
-{
-80104cf0:	55                   	push   %ebp
-80104cf1:	89 e5                	mov    %esp,%ebp
-80104cf3:	56                   	push   %esi
-80104cf4:	53                   	push   %ebx
+80105040:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105043:	89 d8                	mov    %ebx,%eax
+80105045:	5b                   	pop    %ebx
+80105046:	5e                   	pop    %esi
+80105047:	5d                   	pop    %ebp
+80105048:	c3                   	ret    
+80105049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105050 <sys_read>:
+{
+80105050:	55                   	push   %ebp
+80105051:	89 e5                	mov    %esp,%ebp
+80105053:	56                   	push   %esi
+80105054:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104cf5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+80105055:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80104cf8:	83 ec 18             	sub    $0x18,%esp
+80105058:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104cfb:	53                   	push   %ebx
-80104cfc:	6a 00                	push   $0x0
-80104cfe:	e8 1d fc ff ff       	call   80104920 <argint>
-80104d03:	83 c4 10             	add    $0x10,%esp
-80104d06:	85 c0                	test   %eax,%eax
-80104d08:	78 5e                	js     80104d68 <sys_read+0x78>
+8010505b:	53                   	push   %ebx
+8010505c:	6a 00                	push   $0x0
+8010505e:	e8 1d fc ff ff       	call   80104c80 <argint>
+80105063:	83 c4 10             	add    $0x10,%esp
+80105066:	85 c0                	test   %eax,%eax
+80105068:	78 5e                	js     801050c8 <sys_read+0x78>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104d0a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104d0e:	77 58                	ja     80104d68 <sys_read+0x78>
-80104d10:	e8 5b ec ff ff       	call   80103970 <myproc>
-80104d15:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104d18:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104d1c:	85 f6                	test   %esi,%esi
-80104d1e:	74 48                	je     80104d68 <sys_read+0x78>
+8010506a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+8010506e:	77 58                	ja     801050c8 <sys_read+0x78>
+80105070:	e8 3b e9 ff ff       	call   801039b0 <myproc>
+80105075:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105078:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+8010507c:	85 f6                	test   %esi,%esi
+8010507e:	74 48                	je     801050c8 <sys_read+0x78>
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d20:	83 ec 08             	sub    $0x8,%esp
-80104d23:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d26:	50                   	push   %eax
-80104d27:	6a 02                	push   $0x2
-80104d29:	e8 f2 fb ff ff       	call   80104920 <argint>
-80104d2e:	83 c4 10             	add    $0x10,%esp
-80104d31:	85 c0                	test   %eax,%eax
-80104d33:	78 33                	js     80104d68 <sys_read+0x78>
-80104d35:	83 ec 04             	sub    $0x4,%esp
-80104d38:	ff 75 f0             	push   -0x10(%ebp)
-80104d3b:	53                   	push   %ebx
-80104d3c:	6a 01                	push   $0x1
-80104d3e:	e8 2d fc ff ff       	call   80104970 <argptr>
-80104d43:	83 c4 10             	add    $0x10,%esp
-80104d46:	85 c0                	test   %eax,%eax
-80104d48:	78 1e                	js     80104d68 <sys_read+0x78>
+80105080:	83 ec 08             	sub    $0x8,%esp
+80105083:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105086:	50                   	push   %eax
+80105087:	6a 02                	push   $0x2
+80105089:	e8 f2 fb ff ff       	call   80104c80 <argint>
+8010508e:	83 c4 10             	add    $0x10,%esp
+80105091:	85 c0                	test   %eax,%eax
+80105093:	78 33                	js     801050c8 <sys_read+0x78>
+80105095:	83 ec 04             	sub    $0x4,%esp
+80105098:	ff 75 f0             	push   -0x10(%ebp)
+8010509b:	53                   	push   %ebx
+8010509c:	6a 01                	push   $0x1
+8010509e:	e8 2d fc ff ff       	call   80104cd0 <argptr>
+801050a3:	83 c4 10             	add    $0x10,%esp
+801050a6:	85 c0                	test   %eax,%eax
+801050a8:	78 1e                	js     801050c8 <sys_read+0x78>
   return fileread(f, p, n);
-80104d4a:	83 ec 04             	sub    $0x4,%esp
-80104d4d:	ff 75 f0             	push   -0x10(%ebp)
-80104d50:	ff 75 f4             	push   -0xc(%ebp)
-80104d53:	56                   	push   %esi
-80104d54:	e8 c7 c2 ff ff       	call   80101020 <fileread>
-80104d59:	83 c4 10             	add    $0x10,%esp
-}
-80104d5c:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d5f:	5b                   	pop    %ebx
-80104d60:	5e                   	pop    %esi
-80104d61:	5d                   	pop    %ebp
-80104d62:	c3                   	ret    
-80104d63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d67:	90                   	nop
-    return -1;
-80104d68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104d6d:	eb ed                	jmp    80104d5c <sys_read+0x6c>
-80104d6f:	90                   	nop
-
-80104d70 <sys_write>:
-{
-80104d70:	55                   	push   %ebp
-80104d71:	89 e5                	mov    %esp,%ebp
-80104d73:	56                   	push   %esi
-80104d74:	53                   	push   %ebx
+801050aa:	83 ec 04             	sub    $0x4,%esp
+801050ad:	ff 75 f0             	push   -0x10(%ebp)
+801050b0:	ff 75 f4             	push   -0xc(%ebp)
+801050b3:	56                   	push   %esi
+801050b4:	e8 67 bf ff ff       	call   80101020 <fileread>
+801050b9:	83 c4 10             	add    $0x10,%esp
+}
+801050bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801050bf:	5b                   	pop    %ebx
+801050c0:	5e                   	pop    %esi
+801050c1:	5d                   	pop    %ebp
+801050c2:	c3                   	ret    
+801050c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050c7:	90                   	nop
+    return -1;
+801050c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801050cd:	eb ed                	jmp    801050bc <sys_read+0x6c>
+801050cf:	90                   	nop
+
+801050d0 <sys_write>:
+{
+801050d0:	55                   	push   %ebp
+801050d1:	89 e5                	mov    %esp,%ebp
+801050d3:	56                   	push   %esi
+801050d4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104d75:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+801050d5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80104d78:	83 ec 18             	sub    $0x18,%esp
+801050d8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104d7b:	53                   	push   %ebx
-80104d7c:	6a 00                	push   $0x0
-80104d7e:	e8 9d fb ff ff       	call   80104920 <argint>
-80104d83:	83 c4 10             	add    $0x10,%esp
-80104d86:	85 c0                	test   %eax,%eax
-80104d88:	78 5e                	js     80104de8 <sys_write+0x78>
+801050db:	53                   	push   %ebx
+801050dc:	6a 00                	push   $0x0
+801050de:	e8 9d fb ff ff       	call   80104c80 <argint>
+801050e3:	83 c4 10             	add    $0x10,%esp
+801050e6:	85 c0                	test   %eax,%eax
+801050e8:	78 5e                	js     80105148 <sys_write+0x78>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104d8a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104d8e:	77 58                	ja     80104de8 <sys_write+0x78>
-80104d90:	e8 db eb ff ff       	call   80103970 <myproc>
-80104d95:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104d98:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104d9c:	85 f6                	test   %esi,%esi
-80104d9e:	74 48                	je     80104de8 <sys_write+0x78>
+801050ea:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801050ee:	77 58                	ja     80105148 <sys_write+0x78>
+801050f0:	e8 bb e8 ff ff       	call   801039b0 <myproc>
+801050f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801050f8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+801050fc:	85 f6                	test   %esi,%esi
+801050fe:	74 48                	je     80105148 <sys_write+0x78>
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104da0:	83 ec 08             	sub    $0x8,%esp
-80104da3:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104da6:	50                   	push   %eax
-80104da7:	6a 02                	push   $0x2
-80104da9:	e8 72 fb ff ff       	call   80104920 <argint>
-80104dae:	83 c4 10             	add    $0x10,%esp
-80104db1:	85 c0                	test   %eax,%eax
-80104db3:	78 33                	js     80104de8 <sys_write+0x78>
-80104db5:	83 ec 04             	sub    $0x4,%esp
-80104db8:	ff 75 f0             	push   -0x10(%ebp)
-80104dbb:	53                   	push   %ebx
-80104dbc:	6a 01                	push   $0x1
-80104dbe:	e8 ad fb ff ff       	call   80104970 <argptr>
-80104dc3:	83 c4 10             	add    $0x10,%esp
-80104dc6:	85 c0                	test   %eax,%eax
-80104dc8:	78 1e                	js     80104de8 <sys_write+0x78>
+80105100:	83 ec 08             	sub    $0x8,%esp
+80105103:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105106:	50                   	push   %eax
+80105107:	6a 02                	push   $0x2
+80105109:	e8 72 fb ff ff       	call   80104c80 <argint>
+8010510e:	83 c4 10             	add    $0x10,%esp
+80105111:	85 c0                	test   %eax,%eax
+80105113:	78 33                	js     80105148 <sys_write+0x78>
+80105115:	83 ec 04             	sub    $0x4,%esp
+80105118:	ff 75 f0             	push   -0x10(%ebp)
+8010511b:	53                   	push   %ebx
+8010511c:	6a 01                	push   $0x1
+8010511e:	e8 ad fb ff ff       	call   80104cd0 <argptr>
+80105123:	83 c4 10             	add    $0x10,%esp
+80105126:	85 c0                	test   %eax,%eax
+80105128:	78 1e                	js     80105148 <sys_write+0x78>
   return filewrite(f, p, n);
-80104dca:	83 ec 04             	sub    $0x4,%esp
-80104dcd:	ff 75 f0             	push   -0x10(%ebp)
-80104dd0:	ff 75 f4             	push   -0xc(%ebp)
-80104dd3:	56                   	push   %esi
-80104dd4:	e8 d7 c2 ff ff       	call   801010b0 <filewrite>
-80104dd9:	83 c4 10             	add    $0x10,%esp
-}
-80104ddc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ddf:	5b                   	pop    %ebx
-80104de0:	5e                   	pop    %esi
-80104de1:	5d                   	pop    %ebp
-80104de2:	c3                   	ret    
-80104de3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104de7:	90                   	nop
-    return -1;
-80104de8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104ded:	eb ed                	jmp    80104ddc <sys_write+0x6c>
-80104def:	90                   	nop
-
-80104df0 <sys_close>:
-{
-80104df0:	55                   	push   %ebp
-80104df1:	89 e5                	mov    %esp,%ebp
-80104df3:	56                   	push   %esi
-80104df4:	53                   	push   %ebx
+8010512a:	83 ec 04             	sub    $0x4,%esp
+8010512d:	ff 75 f0             	push   -0x10(%ebp)
+80105130:	ff 75 f4             	push   -0xc(%ebp)
+80105133:	56                   	push   %esi
+80105134:	e8 77 bf ff ff       	call   801010b0 <filewrite>
+80105139:	83 c4 10             	add    $0x10,%esp
+}
+8010513c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010513f:	5b                   	pop    %ebx
+80105140:	5e                   	pop    %esi
+80105141:	5d                   	pop    %ebp
+80105142:	c3                   	ret    
+80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105147:	90                   	nop
+    return -1;
+80105148:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010514d:	eb ed                	jmp    8010513c <sys_write+0x6c>
+8010514f:	90                   	nop
+
+80105150 <sys_close>:
+{
+80105150:	55                   	push   %ebp
+80105151:	89 e5                	mov    %esp,%ebp
+80105153:	56                   	push   %esi
+80105154:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104df5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105155:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80104df8:	83 ec 18             	sub    $0x18,%esp
+80105158:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104dfb:	50                   	push   %eax
-80104dfc:	6a 00                	push   $0x0
-80104dfe:	e8 1d fb ff ff       	call   80104920 <argint>
-80104e03:	83 c4 10             	add    $0x10,%esp
-80104e06:	85 c0                	test   %eax,%eax
-80104e08:	78 3e                	js     80104e48 <sys_close+0x58>
+8010515b:	50                   	push   %eax
+8010515c:	6a 00                	push   $0x0
+8010515e:	e8 1d fb ff ff       	call   80104c80 <argint>
+80105163:	83 c4 10             	add    $0x10,%esp
+80105166:	85 c0                	test   %eax,%eax
+80105168:	78 3e                	js     801051a8 <sys_close+0x58>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104e0a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104e0e:	77 38                	ja     80104e48 <sys_close+0x58>
-80104e10:	e8 5b eb ff ff       	call   80103970 <myproc>
-80104e15:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104e18:	8d 5a 08             	lea    0x8(%edx),%ebx
-80104e1b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
-80104e1f:	85 f6                	test   %esi,%esi
-80104e21:	74 25                	je     80104e48 <sys_close+0x58>
+8010516a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+8010516e:	77 38                	ja     801051a8 <sys_close+0x58>
+80105170:	e8 3b e8 ff ff       	call   801039b0 <myproc>
+80105175:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105178:	8d 5a 08             	lea    0x8(%edx),%ebx
+8010517b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
+8010517f:	85 f6                	test   %esi,%esi
+80105181:	74 25                	je     801051a8 <sys_close+0x58>
   myproc()->ofile[fd] = 0;
-80104e23:	e8 48 eb ff ff       	call   80103970 <myproc>
+80105183:	e8 28 e8 ff ff       	call   801039b0 <myproc>
   fileclose(f);
-80104e28:	83 ec 0c             	sub    $0xc,%esp
+80105188:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e2b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
-80104e32:	00 
+8010518b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
+80105192:	00 
   fileclose(f);
-80104e33:	56                   	push   %esi
-80104e34:	e8 b7 c0 ff ff       	call   80100ef0 <fileclose>
+80105193:	56                   	push   %esi
+80105194:	e8 57 bd ff ff       	call   80100ef0 <fileclose>
   return 0;
-80104e39:	83 c4 10             	add    $0x10,%esp
-80104e3c:	31 c0                	xor    %eax,%eax
+80105199:	83 c4 10             	add    $0x10,%esp
+8010519c:	31 c0                	xor    %eax,%eax
 }
-80104e3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104e41:	5b                   	pop    %ebx
-80104e42:	5e                   	pop    %esi
-80104e43:	5d                   	pop    %ebp
-80104e44:	c3                   	ret    
-80104e45:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104e48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104e4d:	eb ef                	jmp    80104e3e <sys_close+0x4e>
-80104e4f:	90                   	nop
-
-80104e50 <sys_fstat>:
-{
-80104e50:	55                   	push   %ebp
-80104e51:	89 e5                	mov    %esp,%ebp
-80104e53:	56                   	push   %esi
-80104e54:	53                   	push   %ebx
+8010519e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801051a1:	5b                   	pop    %ebx
+801051a2:	5e                   	pop    %esi
+801051a3:	5d                   	pop    %ebp
+801051a4:	c3                   	ret    
+801051a5:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801051a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801051ad:	eb ef                	jmp    8010519e <sys_close+0x4e>
+801051af:	90                   	nop
+
+801051b0 <sys_fstat>:
+{
+801051b0:	55                   	push   %ebp
+801051b1:	89 e5                	mov    %esp,%ebp
+801051b3:	56                   	push   %esi
+801051b4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104e55:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+801051b5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80104e58:	83 ec 18             	sub    $0x18,%esp
+801051b8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104e5b:	53                   	push   %ebx
-80104e5c:	6a 00                	push   $0x0
-80104e5e:	e8 bd fa ff ff       	call   80104920 <argint>
-80104e63:	83 c4 10             	add    $0x10,%esp
-80104e66:	85 c0                	test   %eax,%eax
-80104e68:	78 46                	js     80104eb0 <sys_fstat+0x60>
+801051bb:	53                   	push   %ebx
+801051bc:	6a 00                	push   $0x0
+801051be:	e8 bd fa ff ff       	call   80104c80 <argint>
+801051c3:	83 c4 10             	add    $0x10,%esp
+801051c6:	85 c0                	test   %eax,%eax
+801051c8:	78 46                	js     80105210 <sys_fstat+0x60>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104e6a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104e6e:	77 40                	ja     80104eb0 <sys_fstat+0x60>
-80104e70:	e8 fb ea ff ff       	call   80103970 <myproc>
-80104e75:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104e78:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104e7c:	85 f6                	test   %esi,%esi
-80104e7e:	74 30                	je     80104eb0 <sys_fstat+0x60>
+801051ca:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801051ce:	77 40                	ja     80105210 <sys_fstat+0x60>
+801051d0:	e8 db e7 ff ff       	call   801039b0 <myproc>
+801051d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801051d8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+801051dc:	85 f6                	test   %esi,%esi
+801051de:	74 30                	je     80105210 <sys_fstat+0x60>
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e80:	83 ec 04             	sub    $0x4,%esp
-80104e83:	6a 14                	push   $0x14
-80104e85:	53                   	push   %ebx
-80104e86:	6a 01                	push   $0x1
-80104e88:	e8 e3 fa ff ff       	call   80104970 <argptr>
-80104e8d:	83 c4 10             	add    $0x10,%esp
-80104e90:	85 c0                	test   %eax,%eax
-80104e92:	78 1c                	js     80104eb0 <sys_fstat+0x60>
+801051e0:	83 ec 04             	sub    $0x4,%esp
+801051e3:	6a 14                	push   $0x14
+801051e5:	53                   	push   %ebx
+801051e6:	6a 01                	push   $0x1
+801051e8:	e8 e3 fa ff ff       	call   80104cd0 <argptr>
+801051ed:	83 c4 10             	add    $0x10,%esp
+801051f0:	85 c0                	test   %eax,%eax
+801051f2:	78 1c                	js     80105210 <sys_fstat+0x60>
   return filestat(f, st);
-80104e94:	83 ec 08             	sub    $0x8,%esp
-80104e97:	ff 75 f4             	push   -0xc(%ebp)
-80104e9a:	56                   	push   %esi
-80104e9b:	e8 30 c1 ff ff       	call   80100fd0 <filestat>
-80104ea0:	83 c4 10             	add    $0x10,%esp
-}
-80104ea3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ea6:	5b                   	pop    %ebx
-80104ea7:	5e                   	pop    %esi
-80104ea8:	5d                   	pop    %ebp
-80104ea9:	c3                   	ret    
-80104eaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80104eb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104eb5:	eb ec                	jmp    80104ea3 <sys_fstat+0x53>
-80104eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ebe:	66 90                	xchg   %ax,%ax
-
-80104ec0 <sys_link>:
-{
-80104ec0:	55                   	push   %ebp
-80104ec1:	89 e5                	mov    %esp,%ebp
-80104ec3:	57                   	push   %edi
-80104ec4:	56                   	push   %esi
+801051f4:	83 ec 08             	sub    $0x8,%esp
+801051f7:	ff 75 f4             	push   -0xc(%ebp)
+801051fa:	56                   	push   %esi
+801051fb:	e8 d0 bd ff ff       	call   80100fd0 <filestat>
+80105200:	83 c4 10             	add    $0x10,%esp
+}
+80105203:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105206:	5b                   	pop    %ebx
+80105207:	5e                   	pop    %esi
+80105208:	5d                   	pop    %ebp
+80105209:	c3                   	ret    
+8010520a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80105210:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105215:	eb ec                	jmp    80105203 <sys_fstat+0x53>
+80105217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010521e:	66 90                	xchg   %ax,%ax
+
+80105220 <sys_link>:
+{
+80105220:	55                   	push   %ebp
+80105221:	89 e5                	mov    %esp,%ebp
+80105223:	57                   	push   %edi
+80105224:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ec5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105225:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104ec8:	53                   	push   %ebx
-80104ec9:	83 ec 34             	sub    $0x34,%esp
+80105228:	53                   	push   %ebx
+80105229:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ecc:	50                   	push   %eax
-80104ecd:	6a 00                	push   $0x0
-80104ecf:	e8 0c fb ff ff       	call   801049e0 <argstr>
-80104ed4:	83 c4 10             	add    $0x10,%esp
-80104ed7:	85 c0                	test   %eax,%eax
-80104ed9:	0f 88 fb 00 00 00    	js     80104fda <sys_link+0x11a>
-80104edf:	83 ec 08             	sub    $0x8,%esp
-80104ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104ee5:	50                   	push   %eax
-80104ee6:	6a 01                	push   $0x1
-80104ee8:	e8 f3 fa ff ff       	call   801049e0 <argstr>
-80104eed:	83 c4 10             	add    $0x10,%esp
-80104ef0:	85 c0                	test   %eax,%eax
-80104ef2:	0f 88 e2 00 00 00    	js     80104fda <sys_link+0x11a>
+8010522c:	50                   	push   %eax
+8010522d:	6a 00                	push   $0x0
+8010522f:	e8 0c fb ff ff       	call   80104d40 <argstr>
+80105234:	83 c4 10             	add    $0x10,%esp
+80105237:	85 c0                	test   %eax,%eax
+80105239:	0f 88 fb 00 00 00    	js     8010533a <sys_link+0x11a>
+8010523f:	83 ec 08             	sub    $0x8,%esp
+80105242:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105245:	50                   	push   %eax
+80105246:	6a 01                	push   $0x1
+80105248:	e8 f3 fa ff ff       	call   80104d40 <argstr>
+8010524d:	83 c4 10             	add    $0x10,%esp
+80105250:	85 c0                	test   %eax,%eax
+80105252:	0f 88 e2 00 00 00    	js     8010533a <sys_link+0x11a>
   begin_op();
-80104ef8:	e8 63 de ff ff       	call   80102d60 <begin_op>
+80105258:	e8 03 db ff ff       	call   80102d60 <begin_op>
   if((ip = namei(old)) == 0){
-80104efd:	83 ec 0c             	sub    $0xc,%esp
-80104f00:	ff 75 d4             	push   -0x2c(%ebp)
-80104f03:	e8 98 d1 ff ff       	call   801020a0 <namei>
-80104f08:	83 c4 10             	add    $0x10,%esp
-80104f0b:	89 c3                	mov    %eax,%ebx
-80104f0d:	85 c0                	test   %eax,%eax
-80104f0f:	0f 84 e4 00 00 00    	je     80104ff9 <sys_link+0x139>
+8010525d:	83 ec 0c             	sub    $0xc,%esp
+80105260:	ff 75 d4             	push   -0x2c(%ebp)
+80105263:	e8 38 ce ff ff       	call   801020a0 <namei>
+80105268:	83 c4 10             	add    $0x10,%esp
+8010526b:	89 c3                	mov    %eax,%ebx
+8010526d:	85 c0                	test   %eax,%eax
+8010526f:	0f 84 e4 00 00 00    	je     80105359 <sys_link+0x139>
   ilock(ip);
-80104f15:	83 ec 0c             	sub    $0xc,%esp
-80104f18:	50                   	push   %eax
-80104f19:	e8 62 c8 ff ff       	call   80101780 <ilock>
+80105275:	83 ec 0c             	sub    $0xc,%esp
+80105278:	50                   	push   %eax
+80105279:	e8 02 c5 ff ff       	call   80101780 <ilock>
   if(ip->type == T_DIR){
-80104f1e:	83 c4 10             	add    $0x10,%esp
-80104f21:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104f26:	0f 84 b5 00 00 00    	je     80104fe1 <sys_link+0x121>
+8010527e:	83 c4 10             	add    $0x10,%esp
+80105281:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105286:	0f 84 b5 00 00 00    	je     80105341 <sys_link+0x121>
   iupdate(ip);
-80104f2c:	83 ec 0c             	sub    $0xc,%esp
+8010528c:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f2f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+8010528f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f34:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105294:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f37:	53                   	push   %ebx
-80104f38:	e8 93 c7 ff ff       	call   801016d0 <iupdate>
+80105297:	53                   	push   %ebx
+80105298:	e8 33 c4 ff ff       	call   801016d0 <iupdate>
   iunlock(ip);
-80104f3d:	89 1c 24             	mov    %ebx,(%esp)
-80104f40:	e8 1b c9 ff ff       	call   80101860 <iunlock>
+8010529d:	89 1c 24             	mov    %ebx,(%esp)
+801052a0:	e8 bb c5 ff ff       	call   80101860 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f45:	58                   	pop    %eax
-80104f46:	5a                   	pop    %edx
-80104f47:	57                   	push   %edi
-80104f48:	ff 75 d0             	push   -0x30(%ebp)
-80104f4b:	e8 70 d1 ff ff       	call   801020c0 <nameiparent>
-80104f50:	83 c4 10             	add    $0x10,%esp
-80104f53:	89 c6                	mov    %eax,%esi
-80104f55:	85 c0                	test   %eax,%eax
-80104f57:	74 5b                	je     80104fb4 <sys_link+0xf4>
+801052a5:	58                   	pop    %eax
+801052a6:	5a                   	pop    %edx
+801052a7:	57                   	push   %edi
+801052a8:	ff 75 d0             	push   -0x30(%ebp)
+801052ab:	e8 10 ce ff ff       	call   801020c0 <nameiparent>
+801052b0:	83 c4 10             	add    $0x10,%esp
+801052b3:	89 c6                	mov    %eax,%esi
+801052b5:	85 c0                	test   %eax,%eax
+801052b7:	74 5b                	je     80105314 <sys_link+0xf4>
   ilock(dp);
-80104f59:	83 ec 0c             	sub    $0xc,%esp
-80104f5c:	50                   	push   %eax
-80104f5d:	e8 1e c8 ff ff       	call   80101780 <ilock>
+801052b9:	83 ec 0c             	sub    $0xc,%esp
+801052bc:	50                   	push   %eax
+801052bd:	e8 be c4 ff ff       	call   80101780 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f62:	8b 03                	mov    (%ebx),%eax
-80104f64:	83 c4 10             	add    $0x10,%esp
-80104f67:	39 06                	cmp    %eax,(%esi)
-80104f69:	75 3d                	jne    80104fa8 <sys_link+0xe8>
-80104f6b:	83 ec 04             	sub    $0x4,%esp
-80104f6e:	ff 73 04             	push   0x4(%ebx)
-80104f71:	57                   	push   %edi
-80104f72:	56                   	push   %esi
-80104f73:	e8 68 d0 ff ff       	call   80101fe0 <dirlink>
-80104f78:	83 c4 10             	add    $0x10,%esp
-80104f7b:	85 c0                	test   %eax,%eax
-80104f7d:	78 29                	js     80104fa8 <sys_link+0xe8>
+801052c2:	8b 03                	mov    (%ebx),%eax
+801052c4:	83 c4 10             	add    $0x10,%esp
+801052c7:	39 06                	cmp    %eax,(%esi)
+801052c9:	75 3d                	jne    80105308 <sys_link+0xe8>
+801052cb:	83 ec 04             	sub    $0x4,%esp
+801052ce:	ff 73 04             	push   0x4(%ebx)
+801052d1:	57                   	push   %edi
+801052d2:	56                   	push   %esi
+801052d3:	e8 08 cd ff ff       	call   80101fe0 <dirlink>
+801052d8:	83 c4 10             	add    $0x10,%esp
+801052db:	85 c0                	test   %eax,%eax
+801052dd:	78 29                	js     80105308 <sys_link+0xe8>
   iunlockput(dp);
-80104f7f:	83 ec 0c             	sub    $0xc,%esp
-80104f82:	56                   	push   %esi
-80104f83:	e8 88 ca ff ff       	call   80101a10 <iunlockput>
+801052df:	83 ec 0c             	sub    $0xc,%esp
+801052e2:	56                   	push   %esi
+801052e3:	e8 28 c7 ff ff       	call   80101a10 <iunlockput>
   iput(ip);
-80104f88:	89 1c 24             	mov    %ebx,(%esp)
-80104f8b:	e8 20 c9 ff ff       	call   801018b0 <iput>
+801052e8:	89 1c 24             	mov    %ebx,(%esp)
+801052eb:	e8 c0 c5 ff ff       	call   801018b0 <iput>
   end_op();
-80104f90:	e8 3b de ff ff       	call   80102dd0 <end_op>
+801052f0:	e8 db da ff ff       	call   80102dd0 <end_op>
   return 0;
-80104f95:	83 c4 10             	add    $0x10,%esp
-80104f98:	31 c0                	xor    %eax,%eax
+801052f5:	83 c4 10             	add    $0x10,%esp
+801052f8:	31 c0                	xor    %eax,%eax
 }
-80104f9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f9d:	5b                   	pop    %ebx
-80104f9e:	5e                   	pop    %esi
-80104f9f:	5f                   	pop    %edi
-80104fa0:	5d                   	pop    %ebp
-80104fa1:	c3                   	ret    
-80104fa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801052fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052fd:	5b                   	pop    %ebx
+801052fe:	5e                   	pop    %esi
+801052ff:	5f                   	pop    %edi
+80105300:	5d                   	pop    %ebp
+80105301:	c3                   	ret    
+80105302:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104fa8:	83 ec 0c             	sub    $0xc,%esp
-80104fab:	56                   	push   %esi
-80104fac:	e8 5f ca ff ff       	call   80101a10 <iunlockput>
+80105308:	83 ec 0c             	sub    $0xc,%esp
+8010530b:	56                   	push   %esi
+8010530c:	e8 ff c6 ff ff       	call   80101a10 <iunlockput>
     goto bad;
-80104fb1:	83 c4 10             	add    $0x10,%esp
+80105311:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104fb4:	83 ec 0c             	sub    $0xc,%esp
-80104fb7:	53                   	push   %ebx
-80104fb8:	e8 c3 c7 ff ff       	call   80101780 <ilock>
+80105314:	83 ec 0c             	sub    $0xc,%esp
+80105317:	53                   	push   %ebx
+80105318:	e8 63 c4 ff ff       	call   80101780 <ilock>
   ip->nlink--;
-80104fbd:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+8010531d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104fc2:	89 1c 24             	mov    %ebx,(%esp)
-80104fc5:	e8 06 c7 ff ff       	call   801016d0 <iupdate>
+80105322:	89 1c 24             	mov    %ebx,(%esp)
+80105325:	e8 a6 c3 ff ff       	call   801016d0 <iupdate>
   iunlockput(ip);
-80104fca:	89 1c 24             	mov    %ebx,(%esp)
-80104fcd:	e8 3e ca ff ff       	call   80101a10 <iunlockput>
+8010532a:	89 1c 24             	mov    %ebx,(%esp)
+8010532d:	e8 de c6 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80104fd2:	e8 f9 dd ff ff       	call   80102dd0 <end_op>
+80105332:	e8 99 da ff ff       	call   80102dd0 <end_op>
   return -1;
-80104fd7:	83 c4 10             	add    $0x10,%esp
-80104fda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdf:	eb b9                	jmp    80104f9a <sys_link+0xda>
+80105337:	83 c4 10             	add    $0x10,%esp
+8010533a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010533f:	eb b9                	jmp    801052fa <sys_link+0xda>
     iunlockput(ip);
-80104fe1:	83 ec 0c             	sub    $0xc,%esp
-80104fe4:	53                   	push   %ebx
-80104fe5:	e8 26 ca ff ff       	call   80101a10 <iunlockput>
+80105341:	83 ec 0c             	sub    $0xc,%esp
+80105344:	53                   	push   %ebx
+80105345:	e8 c6 c6 ff ff       	call   80101a10 <iunlockput>
     end_op();
-80104fea:	e8 e1 dd ff ff       	call   80102dd0 <end_op>
+8010534a:	e8 81 da ff ff       	call   80102dd0 <end_op>
     return -1;
-80104fef:	83 c4 10             	add    $0x10,%esp
-80104ff2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104ff7:	eb a1                	jmp    80104f9a <sys_link+0xda>
+8010534f:	83 c4 10             	add    $0x10,%esp
+80105352:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105357:	eb a1                	jmp    801052fa <sys_link+0xda>
     end_op();
-80104ff9:	e8 d2 dd ff ff       	call   80102dd0 <end_op>
+80105359:	e8 72 da ff ff       	call   80102dd0 <end_op>
     return -1;
-80104ffe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105003:	eb 95                	jmp    80104f9a <sys_link+0xda>
-80105005:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010500c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80105010 <sys_unlink>:
-{
-80105010:	55                   	push   %ebp
-80105011:	89 e5                	mov    %esp,%ebp
-80105013:	57                   	push   %edi
-80105014:	56                   	push   %esi
+8010535e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105363:	eb 95                	jmp    801052fa <sys_link+0xda>
+80105365:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010536c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105370 <sys_unlink>:
+{
+80105370:	55                   	push   %ebp
+80105371:	89 e5                	mov    %esp,%ebp
+80105373:	57                   	push   %edi
+80105374:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80105015:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80105375:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80105018:	53                   	push   %ebx
-80105019:	83 ec 54             	sub    $0x54,%esp
+80105378:	53                   	push   %ebx
+80105379:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-8010501c:	50                   	push   %eax
-8010501d:	6a 00                	push   $0x0
-8010501f:	e8 bc f9 ff ff       	call   801049e0 <argstr>
-80105024:	83 c4 10             	add    $0x10,%esp
-80105027:	85 c0                	test   %eax,%eax
-80105029:	0f 88 7a 01 00 00    	js     801051a9 <sys_unlink+0x199>
+8010537c:	50                   	push   %eax
+8010537d:	6a 00                	push   $0x0
+8010537f:	e8 bc f9 ff ff       	call   80104d40 <argstr>
+80105384:	83 c4 10             	add    $0x10,%esp
+80105387:	85 c0                	test   %eax,%eax
+80105389:	0f 88 7a 01 00 00    	js     80105509 <sys_unlink+0x199>
   begin_op();
-8010502f:	e8 2c dd ff ff       	call   80102d60 <begin_op>
+8010538f:	e8 cc d9 ff ff       	call   80102d60 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105034:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-80105037:	83 ec 08             	sub    $0x8,%esp
-8010503a:	53                   	push   %ebx
-8010503b:	ff 75 c0             	push   -0x40(%ebp)
-8010503e:	e8 7d d0 ff ff       	call   801020c0 <nameiparent>
-80105043:	83 c4 10             	add    $0x10,%esp
-80105046:	89 45 b4             	mov    %eax,-0x4c(%ebp)
-80105049:	85 c0                	test   %eax,%eax
-8010504b:	0f 84 62 01 00 00    	je     801051b3 <sys_unlink+0x1a3>
+80105394:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80105397:	83 ec 08             	sub    $0x8,%esp
+8010539a:	53                   	push   %ebx
+8010539b:	ff 75 c0             	push   -0x40(%ebp)
+8010539e:	e8 1d cd ff ff       	call   801020c0 <nameiparent>
+801053a3:	83 c4 10             	add    $0x10,%esp
+801053a6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+801053a9:	85 c0                	test   %eax,%eax
+801053ab:	0f 84 62 01 00 00    	je     80105513 <sys_unlink+0x1a3>
   ilock(dp);
-80105051:	8b 7d b4             	mov    -0x4c(%ebp),%edi
-80105054:	83 ec 0c             	sub    $0xc,%esp
-80105057:	57                   	push   %edi
-80105058:	e8 23 c7 ff ff       	call   80101780 <ilock>
+801053b1:	8b 7d b4             	mov    -0x4c(%ebp),%edi
+801053b4:	83 ec 0c             	sub    $0xc,%esp
+801053b7:	57                   	push   %edi
+801053b8:	e8 c3 c3 ff ff       	call   80101780 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010505d:	58                   	pop    %eax
-8010505e:	5a                   	pop    %edx
-8010505f:	68 d4 78 10 80       	push   $0x801078d4
-80105064:	53                   	push   %ebx
-80105065:	e8 56 cc ff ff       	call   80101cc0 <namecmp>
-8010506a:	83 c4 10             	add    $0x10,%esp
-8010506d:	85 c0                	test   %eax,%eax
-8010506f:	0f 84 fb 00 00 00    	je     80105170 <sys_unlink+0x160>
-80105075:	83 ec 08             	sub    $0x8,%esp
-80105078:	68 d3 78 10 80       	push   $0x801078d3
-8010507d:	53                   	push   %ebx
-8010507e:	e8 3d cc ff ff       	call   80101cc0 <namecmp>
-80105083:	83 c4 10             	add    $0x10,%esp
-80105086:	85 c0                	test   %eax,%eax
-80105088:	0f 84 e2 00 00 00    	je     80105170 <sys_unlink+0x160>
+801053bd:	58                   	pop    %eax
+801053be:	5a                   	pop    %edx
+801053bf:	68 64 7d 10 80       	push   $0x80107d64
+801053c4:	53                   	push   %ebx
+801053c5:	e8 f6 c8 ff ff       	call   80101cc0 <namecmp>
+801053ca:	83 c4 10             	add    $0x10,%esp
+801053cd:	85 c0                	test   %eax,%eax
+801053cf:	0f 84 fb 00 00 00    	je     801054d0 <sys_unlink+0x160>
+801053d5:	83 ec 08             	sub    $0x8,%esp
+801053d8:	68 63 7d 10 80       	push   $0x80107d63
+801053dd:	53                   	push   %ebx
+801053de:	e8 dd c8 ff ff       	call   80101cc0 <namecmp>
+801053e3:	83 c4 10             	add    $0x10,%esp
+801053e6:	85 c0                	test   %eax,%eax
+801053e8:	0f 84 e2 00 00 00    	je     801054d0 <sys_unlink+0x160>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010508e:	83 ec 04             	sub    $0x4,%esp
-80105091:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105094:	50                   	push   %eax
-80105095:	53                   	push   %ebx
-80105096:	57                   	push   %edi
-80105097:	e8 44 cc ff ff       	call   80101ce0 <dirlookup>
-8010509c:	83 c4 10             	add    $0x10,%esp
-8010509f:	89 c3                	mov    %eax,%ebx
-801050a1:	85 c0                	test   %eax,%eax
-801050a3:	0f 84 c7 00 00 00    	je     80105170 <sys_unlink+0x160>
+801053ee:	83 ec 04             	sub    $0x4,%esp
+801053f1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+801053f4:	50                   	push   %eax
+801053f5:	53                   	push   %ebx
+801053f6:	57                   	push   %edi
+801053f7:	e8 e4 c8 ff ff       	call   80101ce0 <dirlookup>
+801053fc:	83 c4 10             	add    $0x10,%esp
+801053ff:	89 c3                	mov    %eax,%ebx
+80105401:	85 c0                	test   %eax,%eax
+80105403:	0f 84 c7 00 00 00    	je     801054d0 <sys_unlink+0x160>
   ilock(ip);
-801050a9:	83 ec 0c             	sub    $0xc,%esp
-801050ac:	50                   	push   %eax
-801050ad:	e8 ce c6 ff ff       	call   80101780 <ilock>
+80105409:	83 ec 0c             	sub    $0xc,%esp
+8010540c:	50                   	push   %eax
+8010540d:	e8 6e c3 ff ff       	call   80101780 <ilock>
   if(ip->nlink < 1)
-801050b2:	83 c4 10             	add    $0x10,%esp
-801050b5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-801050ba:	0f 8e 1c 01 00 00    	jle    801051dc <sys_unlink+0x1cc>
+80105412:	83 c4 10             	add    $0x10,%esp
+80105415:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010541a:	0f 8e 1c 01 00 00    	jle    8010553c <sys_unlink+0x1cc>
   if(ip->type == T_DIR && !isdirempty(ip)){
-801050c0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c5:	8d 7d d8             	lea    -0x28(%ebp),%edi
-801050c8:	74 66                	je     80105130 <sys_unlink+0x120>
+80105420:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105425:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105428:	74 66                	je     80105490 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-801050ca:	83 ec 04             	sub    $0x4,%esp
-801050cd:	6a 10                	push   $0x10
-801050cf:	6a 00                	push   $0x0
-801050d1:	57                   	push   %edi
-801050d2:	e8 89 f5 ff ff       	call   80104660 <memset>
+8010542a:	83 ec 04             	sub    $0x4,%esp
+8010542d:	6a 10                	push   $0x10
+8010542f:	6a 00                	push   $0x0
+80105431:	57                   	push   %edi
+80105432:	e8 89 f5 ff ff       	call   801049c0 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050d7:	6a 10                	push   $0x10
-801050d9:	ff 75 c4             	push   -0x3c(%ebp)
-801050dc:	57                   	push   %edi
-801050dd:	ff 75 b4             	push   -0x4c(%ebp)
-801050e0:	e8 ab ca ff ff       	call   80101b90 <writei>
-801050e5:	83 c4 20             	add    $0x20,%esp
-801050e8:	83 f8 10             	cmp    $0x10,%eax
-801050eb:	0f 85 de 00 00 00    	jne    801051cf <sys_unlink+0x1bf>
+80105437:	6a 10                	push   $0x10
+80105439:	ff 75 c4             	push   -0x3c(%ebp)
+8010543c:	57                   	push   %edi
+8010543d:	ff 75 b4             	push   -0x4c(%ebp)
+80105440:	e8 4b c7 ff ff       	call   80101b90 <writei>
+80105445:	83 c4 20             	add    $0x20,%esp
+80105448:	83 f8 10             	cmp    $0x10,%eax
+8010544b:	0f 85 de 00 00 00    	jne    8010552f <sys_unlink+0x1bf>
   if(ip->type == T_DIR){
-801050f1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050f6:	0f 84 94 00 00 00    	je     80105190 <sys_unlink+0x180>
+80105451:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105456:	0f 84 94 00 00 00    	je     801054f0 <sys_unlink+0x180>
   iunlockput(dp);
-801050fc:	83 ec 0c             	sub    $0xc,%esp
-801050ff:	ff 75 b4             	push   -0x4c(%ebp)
-80105102:	e8 09 c9 ff ff       	call   80101a10 <iunlockput>
+8010545c:	83 ec 0c             	sub    $0xc,%esp
+8010545f:	ff 75 b4             	push   -0x4c(%ebp)
+80105462:	e8 a9 c5 ff ff       	call   80101a10 <iunlockput>
   ip->nlink--;
-80105107:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105467:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-8010510c:	89 1c 24             	mov    %ebx,(%esp)
-8010510f:	e8 bc c5 ff ff       	call   801016d0 <iupdate>
+8010546c:	89 1c 24             	mov    %ebx,(%esp)
+8010546f:	e8 5c c2 ff ff       	call   801016d0 <iupdate>
   iunlockput(ip);
-80105114:	89 1c 24             	mov    %ebx,(%esp)
-80105117:	e8 f4 c8 ff ff       	call   80101a10 <iunlockput>
+80105474:	89 1c 24             	mov    %ebx,(%esp)
+80105477:	e8 94 c5 ff ff       	call   80101a10 <iunlockput>
   end_op();
-8010511c:	e8 af dc ff ff       	call   80102dd0 <end_op>
+8010547c:	e8 4f d9 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105121:	83 c4 10             	add    $0x10,%esp
-80105124:	31 c0                	xor    %eax,%eax
+80105481:	83 c4 10             	add    $0x10,%esp
+80105484:	31 c0                	xor    %eax,%eax
 }
-80105126:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105129:	5b                   	pop    %ebx
-8010512a:	5e                   	pop    %esi
-8010512b:	5f                   	pop    %edi
-8010512c:	5d                   	pop    %ebp
-8010512d:	c3                   	ret    
-8010512e:	66 90                	xchg   %ax,%ax
+80105486:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105489:	5b                   	pop    %ebx
+8010548a:	5e                   	pop    %esi
+8010548b:	5f                   	pop    %edi
+8010548c:	5d                   	pop    %ebp
+8010548d:	c3                   	ret    
+8010548e:	66 90                	xchg   %ax,%ax
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105130:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105134:	76 94                	jbe    801050ca <sys_unlink+0xba>
-80105136:	be 20 00 00 00       	mov    $0x20,%esi
-8010513b:	eb 0b                	jmp    80105148 <sys_unlink+0x138>
-8010513d:	8d 76 00             	lea    0x0(%esi),%esi
-80105140:	83 c6 10             	add    $0x10,%esi
-80105143:	3b 73 58             	cmp    0x58(%ebx),%esi
-80105146:	73 82                	jae    801050ca <sys_unlink+0xba>
+80105490:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105494:	76 94                	jbe    8010542a <sys_unlink+0xba>
+80105496:	be 20 00 00 00       	mov    $0x20,%esi
+8010549b:	eb 0b                	jmp    801054a8 <sys_unlink+0x138>
+8010549d:	8d 76 00             	lea    0x0(%esi),%esi
+801054a0:	83 c6 10             	add    $0x10,%esi
+801054a3:	3b 73 58             	cmp    0x58(%ebx),%esi
+801054a6:	73 82                	jae    8010542a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105148:	6a 10                	push   $0x10
-8010514a:	56                   	push   %esi
-8010514b:	57                   	push   %edi
-8010514c:	53                   	push   %ebx
-8010514d:	e8 3e c9 ff ff       	call   80101a90 <readi>
-80105152:	83 c4 10             	add    $0x10,%esp
-80105155:	83 f8 10             	cmp    $0x10,%eax
-80105158:	75 68                	jne    801051c2 <sys_unlink+0x1b2>
+801054a8:	6a 10                	push   $0x10
+801054aa:	56                   	push   %esi
+801054ab:	57                   	push   %edi
+801054ac:	53                   	push   %ebx
+801054ad:	e8 de c5 ff ff       	call   80101a90 <readi>
+801054b2:	83 c4 10             	add    $0x10,%esp
+801054b5:	83 f8 10             	cmp    $0x10,%eax
+801054b8:	75 68                	jne    80105522 <sys_unlink+0x1b2>
     if(de.inum != 0)
-8010515a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-8010515f:	74 df                	je     80105140 <sys_unlink+0x130>
+801054ba:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801054bf:	74 df                	je     801054a0 <sys_unlink+0x130>
     iunlockput(ip);
-80105161:	83 ec 0c             	sub    $0xc,%esp
-80105164:	53                   	push   %ebx
-80105165:	e8 a6 c8 ff ff       	call   80101a10 <iunlockput>
+801054c1:	83 ec 0c             	sub    $0xc,%esp
+801054c4:	53                   	push   %ebx
+801054c5:	e8 46 c5 ff ff       	call   80101a10 <iunlockput>
     goto bad;
-8010516a:	83 c4 10             	add    $0x10,%esp
-8010516d:	8d 76 00             	lea    0x0(%esi),%esi
+801054ca:	83 c4 10             	add    $0x10,%esp
+801054cd:	8d 76 00             	lea    0x0(%esi),%esi
   iunlockput(dp);
-80105170:	83 ec 0c             	sub    $0xc,%esp
-80105173:	ff 75 b4             	push   -0x4c(%ebp)
-80105176:	e8 95 c8 ff ff       	call   80101a10 <iunlockput>
+801054d0:	83 ec 0c             	sub    $0xc,%esp
+801054d3:	ff 75 b4             	push   -0x4c(%ebp)
+801054d6:	e8 35 c5 ff ff       	call   80101a10 <iunlockput>
   end_op();
-8010517b:	e8 50 dc ff ff       	call   80102dd0 <end_op>
+801054db:	e8 f0 d8 ff ff       	call   80102dd0 <end_op>
   return -1;
-80105180:	83 c4 10             	add    $0x10,%esp
-80105183:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105188:	eb 9c                	jmp    80105126 <sys_unlink+0x116>
-8010518a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801054e0:	83 c4 10             	add    $0x10,%esp
+801054e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054e8:	eb 9c                	jmp    80105486 <sys_unlink+0x116>
+801054ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     dp->nlink--;
-80105190:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+801054f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
     iupdate(dp);
-80105193:	83 ec 0c             	sub    $0xc,%esp
+801054f3:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105196:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
+801054f6:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
     iupdate(dp);
-8010519b:	50                   	push   %eax
-8010519c:	e8 2f c5 ff ff       	call   801016d0 <iupdate>
-801051a1:	83 c4 10             	add    $0x10,%esp
-801051a4:	e9 53 ff ff ff       	jmp    801050fc <sys_unlink+0xec>
+801054fb:	50                   	push   %eax
+801054fc:	e8 cf c1 ff ff       	call   801016d0 <iupdate>
+80105501:	83 c4 10             	add    $0x10,%esp
+80105504:	e9 53 ff ff ff       	jmp    8010545c <sys_unlink+0xec>
     return -1;
-801051a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801051ae:	e9 73 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
+80105509:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010550e:	e9 73 ff ff ff       	jmp    80105486 <sys_unlink+0x116>
     end_op();
-801051b3:	e8 18 dc ff ff       	call   80102dd0 <end_op>
+80105513:	e8 b8 d8 ff ff       	call   80102dd0 <end_op>
     return -1;
-801051b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801051bd:	e9 64 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
+80105518:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010551d:	e9 64 ff ff ff       	jmp    80105486 <sys_unlink+0x116>
       panic("isdirempty: readi");
-801051c2:	83 ec 0c             	sub    $0xc,%esp
-801051c5:	68 f8 78 10 80       	push   $0x801078f8
-801051ca:	e8 b1 b1 ff ff       	call   80100380 <panic>
+80105522:	83 ec 0c             	sub    $0xc,%esp
+80105525:	68 88 7d 10 80       	push   $0x80107d88
+8010552a:	e8 51 ae ff ff       	call   80100380 <panic>
     panic("unlink: writei");
-801051cf:	83 ec 0c             	sub    $0xc,%esp
-801051d2:	68 0a 79 10 80       	push   $0x8010790a
-801051d7:	e8 a4 b1 ff ff       	call   80100380 <panic>
+8010552f:	83 ec 0c             	sub    $0xc,%esp
+80105532:	68 9a 7d 10 80       	push   $0x80107d9a
+80105537:	e8 44 ae ff ff       	call   80100380 <panic>
     panic("unlink: nlink < 1");
-801051dc:	83 ec 0c             	sub    $0xc,%esp
-801051df:	68 e6 78 10 80       	push   $0x801078e6
-801051e4:	e8 97 b1 ff ff       	call   80100380 <panic>
-801051e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010553c:	83 ec 0c             	sub    $0xc,%esp
+8010553f:	68 76 7d 10 80       	push   $0x80107d76
+80105544:	e8 37 ae ff ff       	call   80100380 <panic>
+80105549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801051f0 <sys_open>:
+80105550 <sys_open>:
 
 int
 sys_open(void)
 {
-801051f0:	55                   	push   %ebp
-801051f1:	89 e5                	mov    %esp,%ebp
-801051f3:	57                   	push   %edi
-801051f4:	56                   	push   %esi
+80105550:	55                   	push   %ebp
+80105551:	89 e5                	mov    %esp,%ebp
+80105553:	57                   	push   %edi
+80105554:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051f5:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105555:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051f8:	53                   	push   %ebx
-801051f9:	83 ec 24             	sub    $0x24,%esp
+80105558:	53                   	push   %ebx
+80105559:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051fc:	50                   	push   %eax
-801051fd:	6a 00                	push   $0x0
-801051ff:	e8 dc f7 ff ff       	call   801049e0 <argstr>
-80105204:	83 c4 10             	add    $0x10,%esp
-80105207:	85 c0                	test   %eax,%eax
-80105209:	0f 88 8e 00 00 00    	js     8010529d <sys_open+0xad>
-8010520f:	83 ec 08             	sub    $0x8,%esp
-80105212:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105215:	50                   	push   %eax
-80105216:	6a 01                	push   $0x1
-80105218:	e8 03 f7 ff ff       	call   80104920 <argint>
-8010521d:	83 c4 10             	add    $0x10,%esp
-80105220:	85 c0                	test   %eax,%eax
-80105222:	78 79                	js     8010529d <sys_open+0xad>
+8010555c:	50                   	push   %eax
+8010555d:	6a 00                	push   $0x0
+8010555f:	e8 dc f7 ff ff       	call   80104d40 <argstr>
+80105564:	83 c4 10             	add    $0x10,%esp
+80105567:	85 c0                	test   %eax,%eax
+80105569:	0f 88 8e 00 00 00    	js     801055fd <sys_open+0xad>
+8010556f:	83 ec 08             	sub    $0x8,%esp
+80105572:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105575:	50                   	push   %eax
+80105576:	6a 01                	push   $0x1
+80105578:	e8 03 f7 ff ff       	call   80104c80 <argint>
+8010557d:	83 c4 10             	add    $0x10,%esp
+80105580:	85 c0                	test   %eax,%eax
+80105582:	78 79                	js     801055fd <sys_open+0xad>
     return -1;
 
   begin_op();
-80105224:	e8 37 db ff ff       	call   80102d60 <begin_op>
+80105584:	e8 d7 d7 ff ff       	call   80102d60 <begin_op>
 
   if(omode & O_CREATE){
-80105229:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-8010522d:	75 79                	jne    801052a8 <sys_open+0xb8>
+80105589:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+8010558d:	75 79                	jne    80105608 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-8010522f:	83 ec 0c             	sub    $0xc,%esp
-80105232:	ff 75 e0             	push   -0x20(%ebp)
-80105235:	e8 66 ce ff ff       	call   801020a0 <namei>
-8010523a:	83 c4 10             	add    $0x10,%esp
-8010523d:	89 c6                	mov    %eax,%esi
-8010523f:	85 c0                	test   %eax,%eax
-80105241:	0f 84 7e 00 00 00    	je     801052c5 <sys_open+0xd5>
+8010558f:	83 ec 0c             	sub    $0xc,%esp
+80105592:	ff 75 e0             	push   -0x20(%ebp)
+80105595:	e8 06 cb ff ff       	call   801020a0 <namei>
+8010559a:	83 c4 10             	add    $0x10,%esp
+8010559d:	89 c6                	mov    %eax,%esi
+8010559f:	85 c0                	test   %eax,%eax
+801055a1:	0f 84 7e 00 00 00    	je     80105625 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105247:	83 ec 0c             	sub    $0xc,%esp
-8010524a:	50                   	push   %eax
-8010524b:	e8 30 c5 ff ff       	call   80101780 <ilock>
+801055a7:	83 ec 0c             	sub    $0xc,%esp
+801055aa:	50                   	push   %eax
+801055ab:	e8 d0 c1 ff ff       	call   80101780 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105250:	83 c4 10             	add    $0x10,%esp
-80105253:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105258:	0f 84 c2 00 00 00    	je     80105320 <sys_open+0x130>
+801055b0:	83 c4 10             	add    $0x10,%esp
+801055b3:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+801055b8:	0f 84 c2 00 00 00    	je     80105680 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010525e:	e8 cd bb ff ff       	call   80100e30 <filealloc>
-80105263:	89 c7                	mov    %eax,%edi
-80105265:	85 c0                	test   %eax,%eax
-80105267:	74 23                	je     8010528c <sys_open+0x9c>
+801055be:	e8 6d b8 ff ff       	call   80100e30 <filealloc>
+801055c3:	89 c7                	mov    %eax,%edi
+801055c5:	85 c0                	test   %eax,%eax
+801055c7:	74 23                	je     801055ec <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105269:	e8 02 e7 ff ff       	call   80103970 <myproc>
+801055c9:	e8 e2 e3 ff ff       	call   801039b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010526e:	31 db                	xor    %ebx,%ebx
+801055ce:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105270:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105274:	85 d2                	test   %edx,%edx
-80105276:	74 60                	je     801052d8 <sys_open+0xe8>
+801055d0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801055d4:	85 d2                	test   %edx,%edx
+801055d6:	74 60                	je     80105638 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105278:	83 c3 01             	add    $0x1,%ebx
-8010527b:	83 fb 10             	cmp    $0x10,%ebx
-8010527e:	75 f0                	jne    80105270 <sys_open+0x80>
+801055d8:	83 c3 01             	add    $0x1,%ebx
+801055db:	83 fb 10             	cmp    $0x10,%ebx
+801055de:	75 f0                	jne    801055d0 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105280:	83 ec 0c             	sub    $0xc,%esp
-80105283:	57                   	push   %edi
-80105284:	e8 67 bc ff ff       	call   80100ef0 <fileclose>
-80105289:	83 c4 10             	add    $0x10,%esp
+801055e0:	83 ec 0c             	sub    $0xc,%esp
+801055e3:	57                   	push   %edi
+801055e4:	e8 07 b9 ff ff       	call   80100ef0 <fileclose>
+801055e9:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010528c:	83 ec 0c             	sub    $0xc,%esp
-8010528f:	56                   	push   %esi
-80105290:	e8 7b c7 ff ff       	call   80101a10 <iunlockput>
+801055ec:	83 ec 0c             	sub    $0xc,%esp
+801055ef:	56                   	push   %esi
+801055f0:	e8 1b c4 ff ff       	call   80101a10 <iunlockput>
     end_op();
-80105295:	e8 36 db ff ff       	call   80102dd0 <end_op>
+801055f5:	e8 d6 d7 ff ff       	call   80102dd0 <end_op>
     return -1;
-8010529a:	83 c4 10             	add    $0x10,%esp
-8010529d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801052a2:	eb 6d                	jmp    80105311 <sys_open+0x121>
-801052a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801055fa:	83 c4 10             	add    $0x10,%esp
+801055fd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105602:	eb 6d                	jmp    80105671 <sys_open+0x121>
+80105604:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
-801052ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801052ae:	31 c9                	xor    %ecx,%ecx
-801052b0:	ba 02 00 00 00       	mov    $0x2,%edx
-801052b5:	6a 00                	push   $0x0
-801052b7:	e8 14 f8 ff ff       	call   80104ad0 <create>
+80105608:	83 ec 0c             	sub    $0xc,%esp
+8010560b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010560e:	31 c9                	xor    %ecx,%ecx
+80105610:	ba 02 00 00 00       	mov    $0x2,%edx
+80105615:	6a 00                	push   $0x0
+80105617:	e8 14 f8 ff ff       	call   80104e30 <create>
     if(ip == 0){
-801052bc:	83 c4 10             	add    $0x10,%esp
+8010561c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-801052bf:	89 c6                	mov    %eax,%esi
+8010561f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-801052c1:	85 c0                	test   %eax,%eax
-801052c3:	75 99                	jne    8010525e <sys_open+0x6e>
+80105621:	85 c0                	test   %eax,%eax
+80105623:	75 99                	jne    801055be <sys_open+0x6e>
       end_op();
-801052c5:	e8 06 db ff ff       	call   80102dd0 <end_op>
+80105625:	e8 a6 d7 ff ff       	call   80102dd0 <end_op>
       return -1;
-801052ca:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801052cf:	eb 40                	jmp    80105311 <sys_open+0x121>
-801052d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010562a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010562f:	eb 40                	jmp    80105671 <sys_open+0x121>
+80105631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052d8:	83 ec 0c             	sub    $0xc,%esp
+80105638:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052db:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+8010563b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-801052df:	56                   	push   %esi
-801052e0:	e8 7b c5 ff ff       	call   80101860 <iunlock>
+8010563f:	56                   	push   %esi
+80105640:	e8 1b c2 ff ff       	call   80101860 <iunlock>
   end_op();
-801052e5:	e8 e6 da ff ff       	call   80102dd0 <end_op>
+80105645:	e8 86 d7 ff ff       	call   80102dd0 <end_op>
 
   f->type = FD_INODE;
-801052ea:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+8010564a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105650:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052f3:	83 c4 10             	add    $0x10,%esp
+80105653:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052f6:	89 77 10             	mov    %esi,0x10(%edi)
+80105656:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052f9:	89 d0                	mov    %edx,%eax
+80105659:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052fb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+8010565b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-80105302:	f7 d0                	not    %eax
-80105304:	83 e0 01             	and    $0x1,%eax
+80105662:	f7 d0                	not    %eax
+80105664:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105307:	83 e2 03             	and    $0x3,%edx
+80105667:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-8010530a:	88 47 08             	mov    %al,0x8(%edi)
+8010566a:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-8010530d:	0f 95 47 09          	setne  0x9(%edi)
+8010566d:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-80105311:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105314:	89 d8                	mov    %ebx,%eax
-80105316:	5b                   	pop    %ebx
-80105317:	5e                   	pop    %esi
-80105318:	5f                   	pop    %edi
-80105319:	5d                   	pop    %ebp
-8010531a:	c3                   	ret    
-8010531b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010531f:	90                   	nop
+80105671:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105674:	89 d8                	mov    %ebx,%eax
+80105676:	5b                   	pop    %ebx
+80105677:	5e                   	pop    %esi
+80105678:	5f                   	pop    %edi
+80105679:	5d                   	pop    %ebp
+8010567a:	c3                   	ret    
+8010567b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010567f:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105320:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80105323:	85 c9                	test   %ecx,%ecx
-80105325:	0f 84 33 ff ff ff    	je     8010525e <sys_open+0x6e>
-8010532b:	e9 5c ff ff ff       	jmp    8010528c <sys_open+0x9c>
+80105680:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105683:	85 c9                	test   %ecx,%ecx
+80105685:	0f 84 33 ff ff ff    	je     801055be <sys_open+0x6e>
+8010568b:	e9 5c ff ff ff       	jmp    801055ec <sys_open+0x9c>
 
-80105330 <sys_mkdir>:
+80105690 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105330:	55                   	push   %ebp
-80105331:	89 e5                	mov    %esp,%ebp
-80105333:	83 ec 18             	sub    $0x18,%esp
+80105690:	55                   	push   %ebp
+80105691:	89 e5                	mov    %esp,%ebp
+80105693:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-80105336:	e8 25 da ff ff       	call   80102d60 <begin_op>
+80105696:	e8 c5 d6 ff ff       	call   80102d60 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010533b:	83 ec 08             	sub    $0x8,%esp
-8010533e:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105341:	50                   	push   %eax
-80105342:	6a 00                	push   $0x0
-80105344:	e8 97 f6 ff ff       	call   801049e0 <argstr>
-80105349:	83 c4 10             	add    $0x10,%esp
-8010534c:	85 c0                	test   %eax,%eax
-8010534e:	78 30                	js     80105380 <sys_mkdir+0x50>
-80105350:	83 ec 0c             	sub    $0xc,%esp
-80105353:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105356:	31 c9                	xor    %ecx,%ecx
-80105358:	ba 01 00 00 00       	mov    $0x1,%edx
-8010535d:	6a 00                	push   $0x0
-8010535f:	e8 6c f7 ff ff       	call   80104ad0 <create>
-80105364:	83 c4 10             	add    $0x10,%esp
-80105367:	85 c0                	test   %eax,%eax
-80105369:	74 15                	je     80105380 <sys_mkdir+0x50>
+8010569b:	83 ec 08             	sub    $0x8,%esp
+8010569e:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801056a1:	50                   	push   %eax
+801056a2:	6a 00                	push   $0x0
+801056a4:	e8 97 f6 ff ff       	call   80104d40 <argstr>
+801056a9:	83 c4 10             	add    $0x10,%esp
+801056ac:	85 c0                	test   %eax,%eax
+801056ae:	78 30                	js     801056e0 <sys_mkdir+0x50>
+801056b0:	83 ec 0c             	sub    $0xc,%esp
+801056b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801056b6:	31 c9                	xor    %ecx,%ecx
+801056b8:	ba 01 00 00 00       	mov    $0x1,%edx
+801056bd:	6a 00                	push   $0x0
+801056bf:	e8 6c f7 ff ff       	call   80104e30 <create>
+801056c4:	83 c4 10             	add    $0x10,%esp
+801056c7:	85 c0                	test   %eax,%eax
+801056c9:	74 15                	je     801056e0 <sys_mkdir+0x50>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010536b:	83 ec 0c             	sub    $0xc,%esp
-8010536e:	50                   	push   %eax
-8010536f:	e8 9c c6 ff ff       	call   80101a10 <iunlockput>
+801056cb:	83 ec 0c             	sub    $0xc,%esp
+801056ce:	50                   	push   %eax
+801056cf:	e8 3c c3 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80105374:	e8 57 da ff ff       	call   80102dd0 <end_op>
+801056d4:	e8 f7 d6 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105379:	83 c4 10             	add    $0x10,%esp
-8010537c:	31 c0                	xor    %eax,%eax
+801056d9:	83 c4 10             	add    $0x10,%esp
+801056dc:	31 c0                	xor    %eax,%eax
 }
-8010537e:	c9                   	leave  
-8010537f:	c3                   	ret    
+801056de:	c9                   	leave  
+801056df:	c3                   	ret    
     end_op();
-80105380:	e8 4b da ff ff       	call   80102dd0 <end_op>
+801056e0:	e8 eb d6 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105385:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010538a:	c9                   	leave  
-8010538b:	c3                   	ret    
-8010538c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056ea:	c9                   	leave  
+801056eb:	c3                   	ret    
+801056ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105390 <sys_mknod>:
+801056f0 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105390:	55                   	push   %ebp
-80105391:	89 e5                	mov    %esp,%ebp
-80105393:	83 ec 18             	sub    $0x18,%esp
+801056f0:	55                   	push   %ebp
+801056f1:	89 e5                	mov    %esp,%ebp
+801056f3:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-80105396:	e8 c5 d9 ff ff       	call   80102d60 <begin_op>
+801056f6:	e8 65 d6 ff ff       	call   80102d60 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010539b:	83 ec 08             	sub    $0x8,%esp
-8010539e:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801053a1:	50                   	push   %eax
-801053a2:	6a 00                	push   $0x0
-801053a4:	e8 37 f6 ff ff       	call   801049e0 <argstr>
-801053a9:	83 c4 10             	add    $0x10,%esp
-801053ac:	85 c0                	test   %eax,%eax
-801053ae:	78 60                	js     80105410 <sys_mknod+0x80>
+801056fb:	83 ec 08             	sub    $0x8,%esp
+801056fe:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105701:	50                   	push   %eax
+80105702:	6a 00                	push   $0x0
+80105704:	e8 37 f6 ff ff       	call   80104d40 <argstr>
+80105709:	83 c4 10             	add    $0x10,%esp
+8010570c:	85 c0                	test   %eax,%eax
+8010570e:	78 60                	js     80105770 <sys_mknod+0x80>
      argint(1, &major) < 0 ||
-801053b0:	83 ec 08             	sub    $0x8,%esp
-801053b3:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801053b6:	50                   	push   %eax
-801053b7:	6a 01                	push   $0x1
-801053b9:	e8 62 f5 ff ff       	call   80104920 <argint>
+80105710:	83 ec 08             	sub    $0x8,%esp
+80105713:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105716:	50                   	push   %eax
+80105717:	6a 01                	push   $0x1
+80105719:	e8 62 f5 ff ff       	call   80104c80 <argint>
   if((argstr(0, &path)) < 0 ||
-801053be:	83 c4 10             	add    $0x10,%esp
-801053c1:	85 c0                	test   %eax,%eax
-801053c3:	78 4b                	js     80105410 <sys_mknod+0x80>
+8010571e:	83 c4 10             	add    $0x10,%esp
+80105721:	85 c0                	test   %eax,%eax
+80105723:	78 4b                	js     80105770 <sys_mknod+0x80>
      argint(2, &minor) < 0 ||
-801053c5:	83 ec 08             	sub    $0x8,%esp
-801053c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053cb:	50                   	push   %eax
-801053cc:	6a 02                	push   $0x2
-801053ce:	e8 4d f5 ff ff       	call   80104920 <argint>
+80105725:	83 ec 08             	sub    $0x8,%esp
+80105728:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010572b:	50                   	push   %eax
+8010572c:	6a 02                	push   $0x2
+8010572e:	e8 4d f5 ff ff       	call   80104c80 <argint>
      argint(1, &major) < 0 ||
-801053d3:	83 c4 10             	add    $0x10,%esp
-801053d6:	85 c0                	test   %eax,%eax
-801053d8:	78 36                	js     80105410 <sys_mknod+0x80>
+80105733:	83 c4 10             	add    $0x10,%esp
+80105736:	85 c0                	test   %eax,%eax
+80105738:	78 36                	js     80105770 <sys_mknod+0x80>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053da:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053e5:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ea:	50                   	push   %eax
-801053eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053ee:	e8 dd f6 ff ff       	call   80104ad0 <create>
+8010573a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+8010573e:	83 ec 0c             	sub    $0xc,%esp
+80105741:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105745:	ba 03 00 00 00       	mov    $0x3,%edx
+8010574a:	50                   	push   %eax
+8010574b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010574e:	e8 dd f6 ff ff       	call   80104e30 <create>
      argint(2, &minor) < 0 ||
-801053f3:	83 c4 10             	add    $0x10,%esp
-801053f6:	85 c0                	test   %eax,%eax
-801053f8:	74 16                	je     80105410 <sys_mknod+0x80>
+80105753:	83 c4 10             	add    $0x10,%esp
+80105756:	85 c0                	test   %eax,%eax
+80105758:	74 16                	je     80105770 <sys_mknod+0x80>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053fa:	83 ec 0c             	sub    $0xc,%esp
-801053fd:	50                   	push   %eax
-801053fe:	e8 0d c6 ff ff       	call   80101a10 <iunlockput>
+8010575a:	83 ec 0c             	sub    $0xc,%esp
+8010575d:	50                   	push   %eax
+8010575e:	e8 ad c2 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80105403:	e8 c8 d9 ff ff       	call   80102dd0 <end_op>
+80105763:	e8 68 d6 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105408:	83 c4 10             	add    $0x10,%esp
-8010540b:	31 c0                	xor    %eax,%eax
+80105768:	83 c4 10             	add    $0x10,%esp
+8010576b:	31 c0                	xor    %eax,%eax
 }
-8010540d:	c9                   	leave  
-8010540e:	c3                   	ret    
-8010540f:	90                   	nop
+8010576d:	c9                   	leave  
+8010576e:	c3                   	ret    
+8010576f:	90                   	nop
     end_op();
-80105410:	e8 bb d9 ff ff       	call   80102dd0 <end_op>
+80105770:	e8 5b d6 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105415:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105775:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010541a:	c9                   	leave  
-8010541b:	c3                   	ret    
-8010541c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010577a:	c9                   	leave  
+8010577b:	c3                   	ret    
+8010577c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105420 <sys_chdir>:
+80105780 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105420:	55                   	push   %ebp
-80105421:	89 e5                	mov    %esp,%ebp
-80105423:	56                   	push   %esi
-80105424:	53                   	push   %ebx
-80105425:	83 ec 10             	sub    $0x10,%esp
+80105780:	55                   	push   %ebp
+80105781:	89 e5                	mov    %esp,%ebp
+80105783:	56                   	push   %esi
+80105784:	53                   	push   %ebx
+80105785:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-80105428:	e8 43 e5 ff ff       	call   80103970 <myproc>
-8010542d:	89 c6                	mov    %eax,%esi
+80105788:	e8 23 e2 ff ff       	call   801039b0 <myproc>
+8010578d:	89 c6                	mov    %eax,%esi
   
   begin_op();
-8010542f:	e8 2c d9 ff ff       	call   80102d60 <begin_op>
+8010578f:	e8 cc d5 ff ff       	call   80102d60 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105434:	83 ec 08             	sub    $0x8,%esp
-80105437:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010543a:	50                   	push   %eax
-8010543b:	6a 00                	push   $0x0
-8010543d:	e8 9e f5 ff ff       	call   801049e0 <argstr>
-80105442:	83 c4 10             	add    $0x10,%esp
-80105445:	85 c0                	test   %eax,%eax
-80105447:	78 77                	js     801054c0 <sys_chdir+0xa0>
-80105449:	83 ec 0c             	sub    $0xc,%esp
-8010544c:	ff 75 f4             	push   -0xc(%ebp)
-8010544f:	e8 4c cc ff ff       	call   801020a0 <namei>
-80105454:	83 c4 10             	add    $0x10,%esp
-80105457:	89 c3                	mov    %eax,%ebx
-80105459:	85 c0                	test   %eax,%eax
-8010545b:	74 63                	je     801054c0 <sys_chdir+0xa0>
+80105794:	83 ec 08             	sub    $0x8,%esp
+80105797:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010579a:	50                   	push   %eax
+8010579b:	6a 00                	push   $0x0
+8010579d:	e8 9e f5 ff ff       	call   80104d40 <argstr>
+801057a2:	83 c4 10             	add    $0x10,%esp
+801057a5:	85 c0                	test   %eax,%eax
+801057a7:	78 77                	js     80105820 <sys_chdir+0xa0>
+801057a9:	83 ec 0c             	sub    $0xc,%esp
+801057ac:	ff 75 f4             	push   -0xc(%ebp)
+801057af:	e8 ec c8 ff ff       	call   801020a0 <namei>
+801057b4:	83 c4 10             	add    $0x10,%esp
+801057b7:	89 c3                	mov    %eax,%ebx
+801057b9:	85 c0                	test   %eax,%eax
+801057bb:	74 63                	je     80105820 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-8010545d:	83 ec 0c             	sub    $0xc,%esp
-80105460:	50                   	push   %eax
-80105461:	e8 1a c3 ff ff       	call   80101780 <ilock>
+801057bd:	83 ec 0c             	sub    $0xc,%esp
+801057c0:	50                   	push   %eax
+801057c1:	e8 ba bf ff ff       	call   80101780 <ilock>
   if(ip->type != T_DIR){
-80105466:	83 c4 10             	add    $0x10,%esp
-80105469:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-8010546e:	75 30                	jne    801054a0 <sys_chdir+0x80>
+801057c6:	83 c4 10             	add    $0x10,%esp
+801057c9:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801057ce:	75 30                	jne    80105800 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105470:	83 ec 0c             	sub    $0xc,%esp
-80105473:	53                   	push   %ebx
-80105474:	e8 e7 c3 ff ff       	call   80101860 <iunlock>
+801057d0:	83 ec 0c             	sub    $0xc,%esp
+801057d3:	53                   	push   %ebx
+801057d4:	e8 87 c0 ff ff       	call   80101860 <iunlock>
   iput(curproc->cwd);
-80105479:	58                   	pop    %eax
-8010547a:	ff 76 68             	push   0x68(%esi)
-8010547d:	e8 2e c4 ff ff       	call   801018b0 <iput>
+801057d9:	58                   	pop    %eax
+801057da:	ff 76 68             	push   0x68(%esi)
+801057dd:	e8 ce c0 ff ff       	call   801018b0 <iput>
   end_op();
-80105482:	e8 49 d9 ff ff       	call   80102dd0 <end_op>
+801057e2:	e8 e9 d5 ff ff       	call   80102dd0 <end_op>
   curproc->cwd = ip;
-80105487:	89 5e 68             	mov    %ebx,0x68(%esi)
+801057e7:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-8010548a:	83 c4 10             	add    $0x10,%esp
-8010548d:	31 c0                	xor    %eax,%eax
+801057ea:	83 c4 10             	add    $0x10,%esp
+801057ed:	31 c0                	xor    %eax,%eax
 }
-8010548f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105492:	5b                   	pop    %ebx
-80105493:	5e                   	pop    %esi
-80105494:	5d                   	pop    %ebp
-80105495:	c3                   	ret    
-80105496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010549d:	8d 76 00             	lea    0x0(%esi),%esi
+801057ef:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801057f2:	5b                   	pop    %ebx
+801057f3:	5e                   	pop    %esi
+801057f4:	5d                   	pop    %ebp
+801057f5:	c3                   	ret    
+801057f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057fd:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-801054a0:	83 ec 0c             	sub    $0xc,%esp
-801054a3:	53                   	push   %ebx
-801054a4:	e8 67 c5 ff ff       	call   80101a10 <iunlockput>
+80105800:	83 ec 0c             	sub    $0xc,%esp
+80105803:	53                   	push   %ebx
+80105804:	e8 07 c2 ff ff       	call   80101a10 <iunlockput>
     end_op();
-801054a9:	e8 22 d9 ff ff       	call   80102dd0 <end_op>
+80105809:	e8 c2 d5 ff ff       	call   80102dd0 <end_op>
     return -1;
-801054ae:	83 c4 10             	add    $0x10,%esp
-801054b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054b6:	eb d7                	jmp    8010548f <sys_chdir+0x6f>
-801054b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054bf:	90                   	nop
+8010580e:	83 c4 10             	add    $0x10,%esp
+80105811:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105816:	eb d7                	jmp    801057ef <sys_chdir+0x6f>
+80105818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010581f:	90                   	nop
     end_op();
-801054c0:	e8 0b d9 ff ff       	call   80102dd0 <end_op>
+80105820:	e8 ab d5 ff ff       	call   80102dd0 <end_op>
     return -1;
-801054c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ca:	eb c3                	jmp    8010548f <sys_chdir+0x6f>
-801054cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105825:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010582a:	eb c3                	jmp    801057ef <sys_chdir+0x6f>
+8010582c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054d0 <sys_exec>:
+80105830 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054d0:	55                   	push   %ebp
-801054d1:	89 e5                	mov    %esp,%ebp
-801054d3:	57                   	push   %edi
-801054d4:	56                   	push   %esi
+80105830:	55                   	push   %ebp
+80105831:	89 e5                	mov    %esp,%ebp
+80105833:	57                   	push   %edi
+80105834:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105835:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054db:	53                   	push   %ebx
-801054dc:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+8010583b:	53                   	push   %ebx
+8010583c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054e2:	50                   	push   %eax
-801054e3:	6a 00                	push   $0x0
-801054e5:	e8 f6 f4 ff ff       	call   801049e0 <argstr>
-801054ea:	83 c4 10             	add    $0x10,%esp
-801054ed:	85 c0                	test   %eax,%eax
-801054ef:	0f 88 87 00 00 00    	js     8010557c <sys_exec+0xac>
-801054f5:	83 ec 08             	sub    $0x8,%esp
-801054f8:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054fe:	50                   	push   %eax
-801054ff:	6a 01                	push   $0x1
-80105501:	e8 1a f4 ff ff       	call   80104920 <argint>
-80105506:	83 c4 10             	add    $0x10,%esp
-80105509:	85 c0                	test   %eax,%eax
-8010550b:	78 6f                	js     8010557c <sys_exec+0xac>
+80105842:	50                   	push   %eax
+80105843:	6a 00                	push   $0x0
+80105845:	e8 f6 f4 ff ff       	call   80104d40 <argstr>
+8010584a:	83 c4 10             	add    $0x10,%esp
+8010584d:	85 c0                	test   %eax,%eax
+8010584f:	0f 88 87 00 00 00    	js     801058dc <sys_exec+0xac>
+80105855:	83 ec 08             	sub    $0x8,%esp
+80105858:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+8010585e:	50                   	push   %eax
+8010585f:	6a 01                	push   $0x1
+80105861:	e8 1a f4 ff ff       	call   80104c80 <argint>
+80105866:	83 c4 10             	add    $0x10,%esp
+80105869:	85 c0                	test   %eax,%eax
+8010586b:	78 6f                	js     801058dc <sys_exec+0xac>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-8010550d:	83 ec 04             	sub    $0x4,%esp
-80105510:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
+8010586d:	83 ec 04             	sub    $0x4,%esp
+80105870:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
   for(i=0;; i++){
-80105516:	31 db                	xor    %ebx,%ebx
+80105876:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-80105518:	68 80 00 00 00       	push   $0x80
-8010551d:	6a 00                	push   $0x0
-8010551f:	56                   	push   %esi
-80105520:	e8 3b f1 ff ff       	call   80104660 <memset>
-80105525:	83 c4 10             	add    $0x10,%esp
-80105528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010552f:	90                   	nop
+80105878:	68 80 00 00 00       	push   $0x80
+8010587d:	6a 00                	push   $0x0
+8010587f:	56                   	push   %esi
+80105880:	e8 3b f1 ff ff       	call   801049c0 <memset>
+80105885:	83 c4 10             	add    $0x10,%esp
+80105888:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010588f:	90                   	nop
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105530:	83 ec 08             	sub    $0x8,%esp
-80105533:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
-80105539:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
-80105540:	50                   	push   %eax
-80105541:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-80105547:	01 f8                	add    %edi,%eax
-80105549:	50                   	push   %eax
-8010554a:	e8 41 f3 ff ff       	call   80104890 <fetchint>
-8010554f:	83 c4 10             	add    $0x10,%esp
-80105552:	85 c0                	test   %eax,%eax
-80105554:	78 26                	js     8010557c <sys_exec+0xac>
+80105890:	83 ec 08             	sub    $0x8,%esp
+80105893:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
+80105899:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
+801058a0:	50                   	push   %eax
+801058a1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+801058a7:	01 f8                	add    %edi,%eax
+801058a9:	50                   	push   %eax
+801058aa:	e8 41 f3 ff ff       	call   80104bf0 <fetchint>
+801058af:	83 c4 10             	add    $0x10,%esp
+801058b2:	85 c0                	test   %eax,%eax
+801058b4:	78 26                	js     801058dc <sys_exec+0xac>
       return -1;
     if(uarg == 0){
-80105556:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010555c:	85 c0                	test   %eax,%eax
-8010555e:	74 30                	je     80105590 <sys_exec+0xc0>
+801058b6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+801058bc:	85 c0                	test   %eax,%eax
+801058be:	74 30                	je     801058f0 <sys_exec+0xc0>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105560:	83 ec 08             	sub    $0x8,%esp
-80105563:	8d 14 3e             	lea    (%esi,%edi,1),%edx
-80105566:	52                   	push   %edx
-80105567:	50                   	push   %eax
-80105568:	e8 63 f3 ff ff       	call   801048d0 <fetchstr>
-8010556d:	83 c4 10             	add    $0x10,%esp
-80105570:	85 c0                	test   %eax,%eax
-80105572:	78 08                	js     8010557c <sys_exec+0xac>
+801058c0:	83 ec 08             	sub    $0x8,%esp
+801058c3:	8d 14 3e             	lea    (%esi,%edi,1),%edx
+801058c6:	52                   	push   %edx
+801058c7:	50                   	push   %eax
+801058c8:	e8 63 f3 ff ff       	call   80104c30 <fetchstr>
+801058cd:	83 c4 10             	add    $0x10,%esp
+801058d0:	85 c0                	test   %eax,%eax
+801058d2:	78 08                	js     801058dc <sys_exec+0xac>
   for(i=0;; i++){
-80105574:	83 c3 01             	add    $0x1,%ebx
+801058d4:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-80105577:	83 fb 20             	cmp    $0x20,%ebx
-8010557a:	75 b4                	jne    80105530 <sys_exec+0x60>
+801058d7:	83 fb 20             	cmp    $0x20,%ebx
+801058da:	75 b4                	jne    80105890 <sys_exec+0x60>
       return -1;
   }
   return exec(path, argv);
 }
-8010557c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801058dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-8010557f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105584:	5b                   	pop    %ebx
-80105585:	5e                   	pop    %esi
-80105586:	5f                   	pop    %edi
-80105587:	5d                   	pop    %ebp
-80105588:	c3                   	ret    
-80105589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058e4:	5b                   	pop    %ebx
+801058e5:	5e                   	pop    %esi
+801058e6:	5f                   	pop    %edi
+801058e7:	5d                   	pop    %ebp
+801058e8:	c3                   	ret    
+801058e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       argv[i] = 0;
-80105590:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105597:	00 00 00 00 
+801058f0:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+801058f7:	00 00 00 00 
   return exec(path, argv);
-8010559b:	83 ec 08             	sub    $0x8,%esp
-8010559e:	56                   	push   %esi
-8010559f:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
-801055a5:	e8 06 b5 ff ff       	call   80100ab0 <exec>
-801055aa:	83 c4 10             	add    $0x10,%esp
-}
-801055ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055b0:	5b                   	pop    %ebx
-801055b1:	5e                   	pop    %esi
-801055b2:	5f                   	pop    %edi
-801055b3:	5d                   	pop    %ebp
-801055b4:	c3                   	ret    
-801055b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058fb:	83 ec 08             	sub    $0x8,%esp
+801058fe:	56                   	push   %esi
+801058ff:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
+80105905:	e8 a6 b1 ff ff       	call   80100ab0 <exec>
+8010590a:	83 c4 10             	add    $0x10,%esp
+}
+8010590d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105910:	5b                   	pop    %ebx
+80105911:	5e                   	pop    %esi
+80105912:	5f                   	pop    %edi
+80105913:	5d                   	pop    %ebp
+80105914:	c3                   	ret    
+80105915:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010591c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801055c0 <sys_pipe>:
+80105920 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	55                   	push   %ebp
-801055c1:	89 e5                	mov    %esp,%ebp
-801055c3:	57                   	push   %edi
-801055c4:	56                   	push   %esi
+80105920:	55                   	push   %ebp
+80105921:	89 e5                	mov    %esp,%ebp
+80105923:	57                   	push   %edi
+80105924:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c5:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80105925:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055c8:	53                   	push   %ebx
-801055c9:	83 ec 20             	sub    $0x20,%esp
+80105928:	53                   	push   %ebx
+80105929:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055cc:	6a 08                	push   $0x8
-801055ce:	50                   	push   %eax
-801055cf:	6a 00                	push   $0x0
-801055d1:	e8 9a f3 ff ff       	call   80104970 <argptr>
-801055d6:	83 c4 10             	add    $0x10,%esp
-801055d9:	85 c0                	test   %eax,%eax
-801055db:	78 4a                	js     80105627 <sys_pipe+0x67>
+8010592c:	6a 08                	push   $0x8
+8010592e:	50                   	push   %eax
+8010592f:	6a 00                	push   $0x0
+80105931:	e8 9a f3 ff ff       	call   80104cd0 <argptr>
+80105936:	83 c4 10             	add    $0x10,%esp
+80105939:	85 c0                	test   %eax,%eax
+8010593b:	78 4a                	js     80105987 <sys_pipe+0x67>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055dd:	83 ec 08             	sub    $0x8,%esp
-801055e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e3:	50                   	push   %eax
-801055e4:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	e8 43 de ff ff       	call   80103430 <pipealloc>
-801055ed:	83 c4 10             	add    $0x10,%esp
-801055f0:	85 c0                	test   %eax,%eax
-801055f2:	78 33                	js     80105627 <sys_pipe+0x67>
+8010593d:	83 ec 08             	sub    $0x8,%esp
+80105940:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105943:	50                   	push   %eax
+80105944:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105947:	50                   	push   %eax
+80105948:	e8 e3 da ff ff       	call   80103430 <pipealloc>
+8010594d:	83 c4 10             	add    $0x10,%esp
+80105950:	85 c0                	test   %eax,%eax
+80105952:	78 33                	js     80105987 <sys_pipe+0x67>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80105954:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055f7:	31 db                	xor    %ebx,%ebx
+80105957:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055f9:	e8 72 e3 ff ff       	call   80103970 <myproc>
+80105959:	e8 52 e0 ff ff       	call   801039b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-801055fe:	66 90                	xchg   %ax,%ax
+8010595e:	66 90                	xchg   %ax,%ax
     if(curproc->ofile[fd] == 0){
-80105600:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-80105604:	85 f6                	test   %esi,%esi
-80105606:	74 28                	je     80105630 <sys_pipe+0x70>
+80105960:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80105964:	85 f6                	test   %esi,%esi
+80105966:	74 28                	je     80105990 <sys_pipe+0x70>
   for(fd = 0; fd < NOFILE; fd++){
-80105608:	83 c3 01             	add    $0x1,%ebx
-8010560b:	83 fb 10             	cmp    $0x10,%ebx
-8010560e:	75 f0                	jne    80105600 <sys_pipe+0x40>
+80105968:	83 c3 01             	add    $0x1,%ebx
+8010596b:	83 fb 10             	cmp    $0x10,%ebx
+8010596e:	75 f0                	jne    80105960 <sys_pipe+0x40>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105610:	83 ec 0c             	sub    $0xc,%esp
-80105613:	ff 75 e0             	push   -0x20(%ebp)
-80105616:	e8 d5 b8 ff ff       	call   80100ef0 <fileclose>
+80105970:	83 ec 0c             	sub    $0xc,%esp
+80105973:	ff 75 e0             	push   -0x20(%ebp)
+80105976:	e8 75 b5 ff ff       	call   80100ef0 <fileclose>
     fileclose(wf);
-8010561b:	58                   	pop    %eax
-8010561c:	ff 75 e4             	push   -0x1c(%ebp)
-8010561f:	e8 cc b8 ff ff       	call   80100ef0 <fileclose>
-    return -1;
-80105624:	83 c4 10             	add    $0x10,%esp
-80105627:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010562c:	eb 53                	jmp    80105681 <sys_pipe+0xc1>
-8010562e:	66 90                	xchg   %ax,%ax
+8010597b:	58                   	pop    %eax
+8010597c:	ff 75 e4             	push   -0x1c(%ebp)
+8010597f:	e8 6c b5 ff ff       	call   80100ef0 <fileclose>
+    return -1;
+80105984:	83 c4 10             	add    $0x10,%esp
+80105987:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010598c:	eb 53                	jmp    801059e1 <sys_pipe+0xc1>
+8010598e:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105630:	8d 73 08             	lea    0x8(%ebx),%esi
-80105633:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80105990:	8d 73 08             	lea    0x8(%ebx),%esi
+80105993:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105637:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80105997:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010563a:	e8 31 e3 ff ff       	call   80103970 <myproc>
+8010599a:	e8 11 e0 ff ff       	call   801039b0 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010563f:	31 d2                	xor    %edx,%edx
-80105641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010599f:	31 d2                	xor    %edx,%edx
+801059a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105648:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010564c:	85 c9                	test   %ecx,%ecx
-8010564e:	74 20                	je     80105670 <sys_pipe+0xb0>
+801059a8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801059ac:	85 c9                	test   %ecx,%ecx
+801059ae:	74 20                	je     801059d0 <sys_pipe+0xb0>
   for(fd = 0; fd < NOFILE; fd++){
-80105650:	83 c2 01             	add    $0x1,%edx
-80105653:	83 fa 10             	cmp    $0x10,%edx
-80105656:	75 f0                	jne    80105648 <sys_pipe+0x88>
+801059b0:	83 c2 01             	add    $0x1,%edx
+801059b3:	83 fa 10             	cmp    $0x10,%edx
+801059b6:	75 f0                	jne    801059a8 <sys_pipe+0x88>
       myproc()->ofile[fd0] = 0;
-80105658:	e8 13 e3 ff ff       	call   80103970 <myproc>
-8010565d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105664:	00 
-80105665:	eb a9                	jmp    80105610 <sys_pipe+0x50>
-80105667:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010566e:	66 90                	xchg   %ax,%ax
+801059b8:	e8 f3 df ff ff       	call   801039b0 <myproc>
+801059bd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+801059c4:	00 
+801059c5:	eb a9                	jmp    80105970 <sys_pipe+0x50>
+801059c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ce:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105670:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+801059d0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105674:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105677:	89 18                	mov    %ebx,(%eax)
+801059d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801059d7:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105679:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010567c:	89 50 04             	mov    %edx,0x4(%eax)
+801059d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801059dc:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010567f:	31 c0                	xor    %eax,%eax
+801059df:	31 c0                	xor    %eax,%eax
 }
-80105681:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105684:	5b                   	pop    %ebx
-80105685:	5e                   	pop    %esi
-80105686:	5f                   	pop    %edi
-80105687:	5d                   	pop    %ebp
-80105688:	c3                   	ret    
-80105689:	66 90                	xchg   %ax,%ax
-8010568b:	66 90                	xchg   %ax,%ax
-8010568d:	66 90                	xchg   %ax,%ax
-8010568f:	90                   	nop
+801059e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801059e4:	5b                   	pop    %ebx
+801059e5:	5e                   	pop    %esi
+801059e6:	5f                   	pop    %edi
+801059e7:	5d                   	pop    %ebp
+801059e8:	c3                   	ret    
+801059e9:	66 90                	xchg   %ax,%ax
+801059eb:	66 90                	xchg   %ax,%ax
+801059ed:	66 90                	xchg   %ax,%ax
+801059ef:	90                   	nop
 
-80105690 <sys_fork>:
+801059f0 <sys_fork>:
 #include "proc.h"
 
 int
 sys_fork(void)
 {
   return fork();
-80105690:	e9 7b e4 ff ff       	jmp    80103b10 <fork>
-80105695:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010569c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801059f0:	e9 5b e1 ff ff       	jmp    80103b50 <fork>
+801059f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801056a0 <sys_exit>:
+80105a00 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056a0:	55                   	push   %ebp
-801056a1:	89 e5                	mov    %esp,%ebp
-801056a3:	83 ec 08             	sub    $0x8,%esp
+80105a00:	55                   	push   %ebp
+80105a01:	89 e5                	mov    %esp,%ebp
+80105a03:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056a6:	e8 e5 e6 ff ff       	call   80103d90 <exit>
+80105a06:	e8 c5 e3 ff ff       	call   80103dd0 <exit>
   return 0;  // not reached
 }
-801056ab:	31 c0                	xor    %eax,%eax
-801056ad:	c9                   	leave  
-801056ae:	c3                   	ret    
-801056af:	90                   	nop
+80105a0b:	31 c0                	xor    %eax,%eax
+80105a0d:	c9                   	leave  
+80105a0e:	c3                   	ret    
+80105a0f:	90                   	nop
 
-801056b0 <sys_wait>:
+80105a10 <sys_wait>:
 
 int
 sys_wait(void)
 {
   return wait();
-801056b0:	e9 0b e8 ff ff       	jmp    80103ec0 <wait>
-801056b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a10:	e9 bb e4 ff ff       	jmp    80103ed0 <wait>
+80105a15:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801056c0 <sys_kill>:
+80105a20 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056c0:	55                   	push   %ebp
-801056c1:	89 e5                	mov    %esp,%ebp
-801056c3:	83 ec 20             	sub    $0x20,%esp
+80105a20:	55                   	push   %ebp
+80105a21:	89 e5                	mov    %esp,%ebp
+80105a23:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056c6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056c9:	50                   	push   %eax
-801056ca:	6a 00                	push   $0x0
-801056cc:	e8 4f f2 ff ff       	call   80104920 <argint>
-801056d1:	83 c4 10             	add    $0x10,%esp
-801056d4:	85 c0                	test   %eax,%eax
-801056d6:	78 18                	js     801056f0 <sys_kill+0x30>
+80105a26:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a29:	50                   	push   %eax
+80105a2a:	6a 00                	push   $0x0
+80105a2c:	e8 4f f2 ff ff       	call   80104c80 <argint>
+80105a31:	83 c4 10             	add    $0x10,%esp
+80105a34:	85 c0                	test   %eax,%eax
+80105a36:	78 18                	js     80105a50 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056d8:	83 ec 0c             	sub    $0xc,%esp
-801056db:	ff 75 f4             	push   -0xc(%ebp)
-801056de:	e8 7d ea ff ff       	call   80104160 <kill>
-801056e3:	83 c4 10             	add    $0x10,%esp
-}
-801056e6:	c9                   	leave  
-801056e7:	c3                   	ret    
-801056e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ef:	90                   	nop
-801056f0:	c9                   	leave  
-    return -1;
-801056f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801056f6:	c3                   	ret    
-801056f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056fe:	66 90                	xchg   %ax,%ax
+80105a38:	83 ec 0c             	sub    $0xc,%esp
+80105a3b:	ff 75 f4             	push   -0xc(%ebp)
+80105a3e:	e8 2d e7 ff ff       	call   80104170 <kill>
+80105a43:	83 c4 10             	add    $0x10,%esp
+}
+80105a46:	c9                   	leave  
+80105a47:	c3                   	ret    
+80105a48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a4f:	90                   	nop
+80105a50:	c9                   	leave  
+    return -1;
+80105a51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a56:	c3                   	ret    
+80105a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a5e:	66 90                	xchg   %ax,%ax
 
-80105700 <sys_getpid>:
+80105a60 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105700:	55                   	push   %ebp
-80105701:	89 e5                	mov    %esp,%ebp
-80105703:	83 ec 08             	sub    $0x8,%esp
+80105a60:	55                   	push   %ebp
+80105a61:	89 e5                	mov    %esp,%ebp
+80105a63:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-80105706:	e8 65 e2 ff ff       	call   80103970 <myproc>
-8010570b:	8b 40 10             	mov    0x10(%eax),%eax
+80105a66:	e8 45 df ff ff       	call   801039b0 <myproc>
+80105a6b:	8b 40 10             	mov    0x10(%eax),%eax
 }
-8010570e:	c9                   	leave  
-8010570f:	c3                   	ret    
+80105a6e:	c9                   	leave  
+80105a6f:	c3                   	ret    
 
-80105710 <sys_sbrk>:
+80105a70 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105710:	55                   	push   %ebp
-80105711:	89 e5                	mov    %esp,%ebp
-80105713:	53                   	push   %ebx
+80105a70:	55                   	push   %ebp
+80105a71:	89 e5                	mov    %esp,%ebp
+80105a73:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105714:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a74:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105717:	83 ec 1c             	sub    $0x1c,%esp
+80105a77:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010571a:	50                   	push   %eax
-8010571b:	6a 00                	push   $0x0
-8010571d:	e8 fe f1 ff ff       	call   80104920 <argint>
-80105722:	83 c4 10             	add    $0x10,%esp
-80105725:	85 c0                	test   %eax,%eax
-80105727:	78 27                	js     80105750 <sys_sbrk+0x40>
+80105a7a:	50                   	push   %eax
+80105a7b:	6a 00                	push   $0x0
+80105a7d:	e8 fe f1 ff ff       	call   80104c80 <argint>
+80105a82:	83 c4 10             	add    $0x10,%esp
+80105a85:	85 c0                	test   %eax,%eax
+80105a87:	78 27                	js     80105ab0 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-80105729:	e8 42 e2 ff ff       	call   80103970 <myproc>
+80105a89:	e8 22 df ff ff       	call   801039b0 <myproc>
   if(growproc(n) < 0)
-8010572e:	83 ec 0c             	sub    $0xc,%esp
+80105a8e:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105731:	8b 18                	mov    (%eax),%ebx
+80105a91:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105733:	ff 75 f4             	push   -0xc(%ebp)
-80105736:	e8 55 e3 ff ff       	call   80103a90 <growproc>
-8010573b:	83 c4 10             	add    $0x10,%esp
-8010573e:	85 c0                	test   %eax,%eax
-80105740:	78 0e                	js     80105750 <sys_sbrk+0x40>
+80105a93:	ff 75 f4             	push   -0xc(%ebp)
+80105a96:	e8 35 e0 ff ff       	call   80103ad0 <growproc>
+80105a9b:	83 c4 10             	add    $0x10,%esp
+80105a9e:	85 c0                	test   %eax,%eax
+80105aa0:	78 0e                	js     80105ab0 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105742:	89 d8                	mov    %ebx,%eax
-80105744:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105747:	c9                   	leave  
-80105748:	c3                   	ret    
-80105749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80105750:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105755:	eb eb                	jmp    80105742 <sys_sbrk+0x32>
-80105757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010575e:	66 90                	xchg   %ax,%ax
+80105aa2:	89 d8                	mov    %ebx,%eax
+80105aa4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105aa7:	c9                   	leave  
+80105aa8:	c3                   	ret    
+80105aa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105ab0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105ab5:	eb eb                	jmp    80105aa2 <sys_sbrk+0x32>
+80105ab7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105abe:	66 90                	xchg   %ax,%ax
 
-80105760 <sys_sleep>:
+80105ac0 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105760:	55                   	push   %ebp
-80105761:	89 e5                	mov    %esp,%ebp
-80105763:	53                   	push   %ebx
+80105ac0:	55                   	push   %ebp
+80105ac1:	89 e5                	mov    %esp,%ebp
+80105ac3:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105764:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105ac4:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105767:	83 ec 1c             	sub    $0x1c,%esp
+80105ac7:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010576a:	50                   	push   %eax
-8010576b:	6a 00                	push   $0x0
-8010576d:	e8 ae f1 ff ff       	call   80104920 <argint>
-80105772:	83 c4 10             	add    $0x10,%esp
-80105775:	85 c0                	test   %eax,%eax
-80105777:	0f 88 8a 00 00 00    	js     80105807 <sys_sleep+0xa7>
+80105aca:	50                   	push   %eax
+80105acb:	6a 00                	push   $0x0
+80105acd:	e8 ae f1 ff ff       	call   80104c80 <argint>
+80105ad2:	83 c4 10             	add    $0x10,%esp
+80105ad5:	85 c0                	test   %eax,%eax
+80105ad7:	0f 88 8a 00 00 00    	js     80105b67 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-8010577d:	83 ec 0c             	sub    $0xc,%esp
-80105780:	68 80 3c 11 80       	push   $0x80113c80
-80105785:	e8 16 ee ff ff       	call   801045a0 <acquire>
+80105add:	83 ec 0c             	sub    $0xc,%esp
+80105ae0:	68 80 3d 11 80       	push   $0x80113d80
+80105ae5:	e8 16 ee ff ff       	call   80104900 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-8010578a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-8010578d:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
+80105aed:	8b 1d 60 3d 11 80    	mov    0x80113d60,%ebx
   while(ticks - ticks0 < n){
-80105793:	83 c4 10             	add    $0x10,%esp
-80105796:	85 d2                	test   %edx,%edx
-80105798:	75 27                	jne    801057c1 <sys_sleep+0x61>
-8010579a:	eb 54                	jmp    801057f0 <sys_sleep+0x90>
-8010579c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105af3:	83 c4 10             	add    $0x10,%esp
+80105af6:	85 d2                	test   %edx,%edx
+80105af8:	75 27                	jne    80105b21 <sys_sleep+0x61>
+80105afa:	eb 54                	jmp    80105b50 <sys_sleep+0x90>
+80105afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057a0:	83 ec 08             	sub    $0x8,%esp
-801057a3:	68 80 3c 11 80       	push   $0x80113c80
-801057a8:	68 60 3c 11 80       	push   $0x80113c60
-801057ad:	e8 8e e8 ff ff       	call   80104040 <sleep>
+80105b00:	83 ec 08             	sub    $0x8,%esp
+80105b03:	68 80 3d 11 80       	push   $0x80113d80
+80105b08:	68 60 3d 11 80       	push   $0x80113d60
+80105b0d:	e8 3e e5 ff ff       	call   80104050 <sleep>
   while(ticks - ticks0 < n){
-801057b2:	a1 60 3c 11 80       	mov    0x80113c60,%eax
-801057b7:	83 c4 10             	add    $0x10,%esp
-801057ba:	29 d8                	sub    %ebx,%eax
-801057bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057bf:	73 2f                	jae    801057f0 <sys_sleep+0x90>
+80105b12:	a1 60 3d 11 80       	mov    0x80113d60,%eax
+80105b17:	83 c4 10             	add    $0x10,%esp
+80105b1a:	29 d8                	sub    %ebx,%eax
+80105b1c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80105b1f:	73 2f                	jae    80105b50 <sys_sleep+0x90>
     if(myproc()->killed){
-801057c1:	e8 aa e1 ff ff       	call   80103970 <myproc>
-801057c6:	8b 40 24             	mov    0x24(%eax),%eax
-801057c9:	85 c0                	test   %eax,%eax
-801057cb:	74 d3                	je     801057a0 <sys_sleep+0x40>
+80105b21:	e8 8a de ff ff       	call   801039b0 <myproc>
+80105b26:	8b 40 24             	mov    0x24(%eax),%eax
+80105b29:	85 c0                	test   %eax,%eax
+80105b2b:	74 d3                	je     80105b00 <sys_sleep+0x40>
       release(&tickslock);
-801057cd:	83 ec 0c             	sub    $0xc,%esp
-801057d0:	68 80 3c 11 80       	push   $0x80113c80
-801057d5:	e8 66 ed ff ff       	call   80104540 <release>
+80105b2d:	83 ec 0c             	sub    $0xc,%esp
+80105b30:	68 80 3d 11 80       	push   $0x80113d80
+80105b35:	e8 66 ed ff ff       	call   801048a0 <release>
   }
   release(&tickslock);
   return 0;
 }
-801057da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b3a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-801057dd:	83 c4 10             	add    $0x10,%esp
-801057e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b3d:	83 c4 10             	add    $0x10,%esp
+80105b40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801057e5:	c9                   	leave  
-801057e6:	c3                   	ret    
-801057e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801057ee:	66 90                	xchg   %ax,%ax
+80105b45:	c9                   	leave  
+80105b46:	c3                   	ret    
+80105b47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b4e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-801057f0:	83 ec 0c             	sub    $0xc,%esp
-801057f3:	68 80 3c 11 80       	push   $0x80113c80
-801057f8:	e8 43 ed ff ff       	call   80104540 <release>
+80105b50:	83 ec 0c             	sub    $0xc,%esp
+80105b53:	68 80 3d 11 80       	push   $0x80113d80
+80105b58:	e8 43 ed ff ff       	call   801048a0 <release>
   return 0;
-801057fd:	83 c4 10             	add    $0x10,%esp
-80105800:	31 c0                	xor    %eax,%eax
+80105b5d:	83 c4 10             	add    $0x10,%esp
+80105b60:	31 c0                	xor    %eax,%eax
 }
-80105802:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105805:	c9                   	leave  
-80105806:	c3                   	ret    
-    return -1;
-80105807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010580c:	eb f4                	jmp    80105802 <sys_sleep+0xa2>
-8010580e:	66 90                	xchg   %ax,%ax
+80105b62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b65:	c9                   	leave  
+80105b66:	c3                   	ret    
+    return -1;
+80105b67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b6c:	eb f4                	jmp    80105b62 <sys_sleep+0xa2>
+80105b6e:	66 90                	xchg   %ax,%ax
 
-80105810 <sys_uptime>:
+80105b70 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105810:	55                   	push   %ebp
-80105811:	89 e5                	mov    %esp,%ebp
-80105813:	53                   	push   %ebx
-80105814:	83 ec 10             	sub    $0x10,%esp
+80105b70:	55                   	push   %ebp
+80105b71:	89 e5                	mov    %esp,%ebp
+80105b73:	53                   	push   %ebx
+80105b74:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-80105817:	68 80 3c 11 80       	push   $0x80113c80
-8010581c:	e8 7f ed ff ff       	call   801045a0 <acquire>
+80105b77:	68 80 3d 11 80       	push   $0x80113d80
+80105b7c:	e8 7f ed ff ff       	call   80104900 <acquire>
   xticks = ticks;
-80105821:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
+80105b81:	8b 1d 60 3d 11 80    	mov    0x80113d60,%ebx
   release(&tickslock);
-80105827:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
-8010582e:	e8 0d ed ff ff       	call   80104540 <release>
+80105b87:	c7 04 24 80 3d 11 80 	movl   $0x80113d80,(%esp)
+80105b8e:	e8 0d ed ff ff       	call   801048a0 <release>
   return xticks;
 }
-80105833:	89 d8                	mov    %ebx,%eax
-80105835:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105838:	c9                   	leave  
-80105839:	c3                   	ret    
+80105b93:	89 d8                	mov    %ebx,%eax
+80105b95:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b98:	c9                   	leave  
+80105b99:	c3                   	ret    
+80105b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105ba0 <sys_thread_create>:
+
+int sys_thread_create(void){
+80105ba0:	55                   	push   %ebp
+80105ba1:	89 e5                	mov    %esp,%ebp
+80105ba3:	83 ec 1c             	sub    $0x1c,%esp
+  void (*fcn)(void*),*arg,*stack;
+  argptr(0,(void*) &fcn, sizeof(void(*)(void *)));
+80105ba6:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105ba9:	6a 04                	push   $0x4
+80105bab:	50                   	push   %eax
+80105bac:	6a 00                	push   $0x0
+80105bae:	e8 1d f1 ff ff       	call   80104cd0 <argptr>
+  argptr(1, (void*) &arg, sizeof(void*));
+80105bb3:	83 c4 0c             	add    $0xc,%esp
+80105bb6:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105bb9:	6a 04                	push   $0x4
+80105bbb:	50                   	push   %eax
+80105bbc:	6a 01                	push   $0x1
+80105bbe:	e8 0d f1 ff ff       	call   80104cd0 <argptr>
+  argptr(2, (void*) &stack, sizeof(void *));
+80105bc3:	83 c4 0c             	add    $0xc,%esp
+80105bc6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105bc9:	6a 04                	push   $0x4
+80105bcb:	50                   	push   %eax
+80105bcc:	6a 02                	push   $0x2
+80105bce:	e8 fd f0 ff ff       	call   80104cd0 <argptr>
+  return thread_create(fcn,arg,stack);
+80105bd3:	83 c4 0c             	add    $0xc,%esp
+80105bd6:	ff 75 f4             	push   -0xc(%ebp)
+80105bd9:	ff 75 f0             	push   -0x10(%ebp)
+80105bdc:	ff 75 ec             	push   -0x14(%ebp)
+80105bdf:	e8 cc e6 ff ff       	call   801042b0 <thread_create>
+}
+80105be4:	c9                   	leave  
+80105be5:	c3                   	ret    
+80105be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bed:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105bf0 <sys_thread_join>:
+
+int sys_thread_join(void){
+  return thread_join();
+80105bf0:	e9 eb e7 ff ff       	jmp    801043e0 <thread_join>
+80105bf5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105c00 <sys_thread_exit>:
+}
+
+
+int sys_thread_exit(void){
+  return thread_exit();
+80105c00:	e9 fb e8 ff ff       	jmp    80104500 <thread_exit>
+80105c05:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105c10 <sys_draw>:
+}
+
+int 
+sys_draw(void){
+80105c10:	55                   	push   %ebp
+80105c11:	89 e5                	mov    %esp,%ebp
+80105c13:	83 ec 3c             	sub    $0x3c,%esp
+  void* buf;
+  uint size;
+  argptr(0,(void*)&buf,sizeof(buf));
+80105c16:	8d 45 cc             	lea    -0x34(%ebp),%eax
+80105c19:	6a 04                	push   $0x4
+80105c1b:	50                   	push   %eax
+80105c1c:	6a 00                	push   $0x0
+80105c1e:	e8 ad f0 ff ff       	call   80104cd0 <argptr>
+  argptr(1,(void*)&size,sizeof(size));
+80105c23:	83 c4 0c             	add    $0xc,%esp
+80105c26:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105c29:	6a 04                	push   $0x4
+80105c2b:	50                   	push   %eax
+80105c2c:	6a 01                	push   $0x1
+80105c2e:	e8 9d f0 ff ff       	call   80104cd0 <argptr>
+  char figure[] = "\n\
+80105c33:	b8 0a 00 00 00       	mov    $0xa,%eax
+     			---------------------- \n";
+  if(sizeof(figure)>size)return -1;
+80105c38:	83 c4 10             	add    $0x10,%esp
+  char figure[] = "\n\
+80105c3b:	c7 45 d6 0a 20 20 20 	movl   $0x2020200a,-0x2a(%ebp)
+80105c42:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  if(sizeof(figure)>size)return -1;
+80105c46:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  char figure[] = "\n\
+80105c49:	c7 45 da 20 20 09 09 	movl   $0x9092020,-0x26(%ebp)
+80105c50:	c7 45 de 09 2d 2d 2d 	movl   $0x2d2d2d09,-0x22(%ebp)
+80105c57:	c7 45 e2 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x1e(%ebp)
+80105c5e:	c7 45 e6 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x1a(%ebp)
+80105c65:	c7 45 ea 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x16(%ebp)
+80105c6c:	c7 45 ee 2d 2d 2d 2d 	movl   $0x2d2d2d2d,-0x12(%ebp)
+80105c73:	c7 45 f2 2d 2d 2d 20 	movl   $0x202d2d2d,-0xe(%ebp)
+  if(sizeof(figure)>size)return -1;
+80105c7a:	83 f8 21             	cmp    $0x21,%eax
+80105c7d:	76 21                	jbe    80105ca0 <sys_draw+0x90>
+  strncpy((char *)buf,figure,size);
+80105c7f:	83 ec 04             	sub    $0x4,%esp
+80105c82:	50                   	push   %eax
+80105c83:	8d 45 d6             	lea    -0x2a(%ebp),%eax
+80105c86:	50                   	push   %eax
+80105c87:	ff 75 cc             	push   -0x34(%ebp)
+80105c8a:	e8 91 ee ff ff       	call   80104b20 <strncpy>
+  return sizeof(figure);                
+80105c8f:	83 c4 10             	add    $0x10,%esp
+80105c92:	b8 22 00 00 00       	mov    $0x22,%eax
+}
+80105c97:	c9                   	leave  
+80105c98:	c3                   	ret    
+80105c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ca0:	c9                   	leave  
+  if(sizeof(figure)>size)return -1;
+80105ca1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105ca6:	c3                   	ret    
 
-8010583a <alltraps>:
+80105ca7 <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-8010583a:	1e                   	push   %ds
+80105ca7:	1e                   	push   %ds
   pushl %es
-8010583b:	06                   	push   %es
+80105ca8:	06                   	push   %es
   pushl %fs
-8010583c:	0f a0                	push   %fs
+80105ca9:	0f a0                	push   %fs
   pushl %gs
-8010583e:	0f a8                	push   %gs
+80105cab:	0f a8                	push   %gs
   pushal
-80105840:	60                   	pusha  
+80105cad:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105841:	66 b8 10 00          	mov    $0x10,%ax
+80105cae:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105845:	8e d8                	mov    %eax,%ds
+80105cb2:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-80105847:	8e c0                	mov    %eax,%es
+80105cb4:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-80105849:	54                   	push   %esp
+80105cb6:	54                   	push   %esp
   call trap
-8010584a:	e8 c1 00 00 00       	call   80105910 <trap>
+80105cb7:	e8 c4 00 00 00       	call   80105d80 <trap>
   addl $4, %esp
-8010584f:	83 c4 04             	add    $0x4,%esp
+80105cbc:	83 c4 04             	add    $0x4,%esp
 
-80105852 <trapret>:
+80105cbf <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105852:	61                   	popa   
+80105cbf:	61                   	popa   
   popl %gs
-80105853:	0f a9                	pop    %gs
+80105cc0:	0f a9                	pop    %gs
   popl %fs
-80105855:	0f a1                	pop    %fs
+80105cc2:	0f a1                	pop    %fs
   popl %es
-80105857:	07                   	pop    %es
+80105cc4:	07                   	pop    %es
   popl %ds
-80105858:	1f                   	pop    %ds
+80105cc5:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-80105859:	83 c4 08             	add    $0x8,%esp
+80105cc6:	83 c4 08             	add    $0x8,%esp
   iret
-8010585c:	cf                   	iret   
-8010585d:	66 90                	xchg   %ax,%ax
-8010585f:	90                   	nop
+80105cc9:	cf                   	iret   
+80105cca:	66 90                	xchg   %ax,%ax
+80105ccc:	66 90                	xchg   %ax,%ax
+80105cce:	66 90                	xchg   %ax,%ax
 
-80105860 <tvinit>:
+80105cd0 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-80105860:	55                   	push   %ebp
+80105cd0:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-80105861:	31 c0                	xor    %eax,%eax
+80105cd1:	31 c0                	xor    %eax,%eax
 {
-80105863:	89 e5                	mov    %esp,%ebp
-80105865:	83 ec 08             	sub    $0x8,%esp
-80105868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010586f:	90                   	nop
+80105cd3:	89 e5                	mov    %esp,%ebp
+80105cd5:	83 ec 08             	sub    $0x8,%esp
+80105cd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cdf:	90                   	nop
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105870:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-80105877:	c7 04 c5 c2 3c 11 80 	movl   $0x8e000008,-0x7feec33e(,%eax,8)
-8010587e:	08 00 00 8e 
-80105882:	66 89 14 c5 c0 3c 11 	mov    %dx,-0x7feec340(,%eax,8)
-80105889:	80 
-8010588a:	c1 ea 10             	shr    $0x10,%edx
-8010588d:	66 89 14 c5 c6 3c 11 	mov    %dx,-0x7feec33a(,%eax,8)
-80105894:	80 
+80105ce0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105ce7:	c7 04 c5 c2 3d 11 80 	movl   $0x8e000008,-0x7feec23e(,%eax,8)
+80105cee:	08 00 00 8e 
+80105cf2:	66 89 14 c5 c0 3d 11 	mov    %dx,-0x7feec240(,%eax,8)
+80105cf9:	80 
+80105cfa:	c1 ea 10             	shr    $0x10,%edx
+80105cfd:	66 89 14 c5 c6 3d 11 	mov    %dx,-0x7feec23a(,%eax,8)
+80105d04:	80 
   for(i = 0; i < 256; i++)
-80105895:	83 c0 01             	add    $0x1,%eax
-80105898:	3d 00 01 00 00       	cmp    $0x100,%eax
-8010589d:	75 d1                	jne    80105870 <tvinit+0x10>
+80105d05:	83 c0 01             	add    $0x1,%eax
+80105d08:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105d0d:	75 d1                	jne    80105ce0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-8010589f:	83 ec 08             	sub    $0x8,%esp
+80105d0f:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058a2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058a7:	c7 05 c2 3e 11 80 08 	movl   $0xef000008,0x80113ec2
-801058ae:	00 00 ef 
+80105d12:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105d17:	c7 05 c2 3f 11 80 08 	movl   $0xef000008,0x80113fc2
+80105d1e:	00 00 ef 
   initlock(&tickslock, "time");
-801058b1:	68 19 79 10 80       	push   $0x80107919
-801058b6:	68 80 3c 11 80       	push   $0x80113c80
+80105d21:	68 a9 7d 10 80       	push   $0x80107da9
+80105d26:	68 80 3d 11 80       	push   $0x80113d80
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058bb:	66 a3 c0 3e 11 80    	mov    %ax,0x80113ec0
-801058c1:	c1 e8 10             	shr    $0x10,%eax
-801058c4:	66 a3 c6 3e 11 80    	mov    %ax,0x80113ec6
+80105d2b:	66 a3 c0 3f 11 80    	mov    %ax,0x80113fc0
+80105d31:	c1 e8 10             	shr    $0x10,%eax
+80105d34:	66 a3 c6 3f 11 80    	mov    %ax,0x80113fc6
   initlock(&tickslock, "time");
-801058ca:	e8 01 eb ff ff       	call   801043d0 <initlock>
+80105d3a:	e8 f1 e9 ff ff       	call   80104730 <initlock>
 }
-801058cf:	83 c4 10             	add    $0x10,%esp
-801058d2:	c9                   	leave  
-801058d3:	c3                   	ret    
-801058d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801058db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801058df:	90                   	nop
+80105d3f:	83 c4 10             	add    $0x10,%esp
+80105d42:	c9                   	leave  
+80105d43:	c3                   	ret    
+80105d44:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d4f:	90                   	nop
 
-801058e0 <idtinit>:
+80105d50 <idtinit>:
 
 void
 idtinit(void)
 {
-801058e0:	55                   	push   %ebp
+80105d50:	55                   	push   %ebp
   pd[0] = size-1;
-801058e1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-801058e6:	89 e5                	mov    %esp,%ebp
-801058e8:	83 ec 10             	sub    $0x10,%esp
-801058eb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105d51:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105d56:	89 e5                	mov    %esp,%ebp
+80105d58:	83 ec 10             	sub    $0x10,%esp
+80105d5b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-801058ef:	b8 c0 3c 11 80       	mov    $0x80113cc0,%eax
-801058f4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80105d5f:	b8 c0 3d 11 80       	mov    $0x80113dc0,%eax
+80105d64:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-801058f8:	c1 e8 10             	shr    $0x10,%eax
-801058fb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80105d68:	c1 e8 10             	shr    $0x10,%eax
+80105d6b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-801058ff:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105902:	0f 01 18             	lidtl  (%eax)
+80105d6f:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105d72:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105905:	c9                   	leave  
-80105906:	c3                   	ret    
-80105907:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010590e:	66 90                	xchg   %ax,%ax
+80105d75:	c9                   	leave  
+80105d76:	c3                   	ret    
+80105d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d7e:	66 90                	xchg   %ax,%ax
 
-80105910 <trap>:
+80105d80 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105910:	55                   	push   %ebp
-80105911:	89 e5                	mov    %esp,%ebp
-80105913:	57                   	push   %edi
-80105914:	56                   	push   %esi
-80105915:	53                   	push   %ebx
-80105916:	83 ec 1c             	sub    $0x1c,%esp
-80105919:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105d80:	55                   	push   %ebp
+80105d81:	89 e5                	mov    %esp,%ebp
+80105d83:	57                   	push   %edi
+80105d84:	56                   	push   %esi
+80105d85:	53                   	push   %ebx
+80105d86:	83 ec 1c             	sub    $0x1c,%esp
+80105d89:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-8010591c:	8b 43 30             	mov    0x30(%ebx),%eax
-8010591f:	83 f8 40             	cmp    $0x40,%eax
-80105922:	0f 84 68 01 00 00    	je     80105a90 <trap+0x180>
+80105d8c:	8b 43 30             	mov    0x30(%ebx),%eax
+80105d8f:	83 f8 40             	cmp    $0x40,%eax
+80105d92:	0f 84 68 01 00 00    	je     80105f00 <trap+0x180>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-80105928:	83 e8 20             	sub    $0x20,%eax
-8010592b:	83 f8 1f             	cmp    $0x1f,%eax
-8010592e:	0f 87 8c 00 00 00    	ja     801059c0 <trap+0xb0>
-80105934:	ff 24 85 c0 79 10 80 	jmp    *-0x7fef8640(,%eax,4)
-8010593b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010593f:	90                   	nop
+80105d98:	83 e8 20             	sub    $0x20,%eax
+80105d9b:	83 f8 1f             	cmp    $0x1f,%eax
+80105d9e:	0f 87 8c 00 00 00    	ja     80105e30 <trap+0xb0>
+80105da4:	ff 24 85 50 7e 10 80 	jmp    *-0x7fef81b0(,%eax,4)
+80105dab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105daf:	90                   	nop
       release(&tickslock);
     }
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_IDE:
     ideintr();
-80105940:	e8 fb c8 ff ff       	call   80102240 <ideintr>
+80105db0:	e8 8b c4 ff ff       	call   80102240 <ideintr>
     lapiceoi();
-80105945:	e8 c6 cf ff ff       	call   80102910 <lapiceoi>
+80105db5:	e8 56 cb ff ff       	call   80102910 <lapiceoi>
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-8010594a:	e8 21 e0 ff ff       	call   80103970 <myproc>
-8010594f:	85 c0                	test   %eax,%eax
-80105951:	74 1d                	je     80105970 <trap+0x60>
-80105953:	e8 18 e0 ff ff       	call   80103970 <myproc>
-80105958:	8b 50 24             	mov    0x24(%eax),%edx
-8010595b:	85 d2                	test   %edx,%edx
-8010595d:	74 11                	je     80105970 <trap+0x60>
-8010595f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105963:	83 e0 03             	and    $0x3,%eax
-80105966:	66 83 f8 03          	cmp    $0x3,%ax
-8010596a:	0f 84 e8 01 00 00    	je     80105b58 <trap+0x248>
+80105dba:	e8 f1 db ff ff       	call   801039b0 <myproc>
+80105dbf:	85 c0                	test   %eax,%eax
+80105dc1:	74 1d                	je     80105de0 <trap+0x60>
+80105dc3:	e8 e8 db ff ff       	call   801039b0 <myproc>
+80105dc8:	8b 50 24             	mov    0x24(%eax),%edx
+80105dcb:	85 d2                	test   %edx,%edx
+80105dcd:	74 11                	je     80105de0 <trap+0x60>
+80105dcf:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105dd3:	83 e0 03             	and    $0x3,%eax
+80105dd6:	66 83 f8 03          	cmp    $0x3,%ax
+80105dda:	0f 84 e8 01 00 00    	je     80105fc8 <trap+0x248>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105970:	e8 fb df ff ff       	call   80103970 <myproc>
-80105975:	85 c0                	test   %eax,%eax
-80105977:	74 0f                	je     80105988 <trap+0x78>
-80105979:	e8 f2 df ff ff       	call   80103970 <myproc>
-8010597e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105982:	0f 84 b8 00 00 00    	je     80105a40 <trap+0x130>
+80105de0:	e8 cb db ff ff       	call   801039b0 <myproc>
+80105de5:	85 c0                	test   %eax,%eax
+80105de7:	74 0f                	je     80105df8 <trap+0x78>
+80105de9:	e8 c2 db ff ff       	call   801039b0 <myproc>
+80105dee:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105df2:	0f 84 b8 00 00 00    	je     80105eb0 <trap+0x130>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105988:	e8 e3 df ff ff       	call   80103970 <myproc>
-8010598d:	85 c0                	test   %eax,%eax
-8010598f:	74 1d                	je     801059ae <trap+0x9e>
-80105991:	e8 da df ff ff       	call   80103970 <myproc>
-80105996:	8b 40 24             	mov    0x24(%eax),%eax
-80105999:	85 c0                	test   %eax,%eax
-8010599b:	74 11                	je     801059ae <trap+0x9e>
-8010599d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801059a1:	83 e0 03             	and    $0x3,%eax
-801059a4:	66 83 f8 03          	cmp    $0x3,%ax
-801059a8:	0f 84 0f 01 00 00    	je     80105abd <trap+0x1ad>
+80105df8:	e8 b3 db ff ff       	call   801039b0 <myproc>
+80105dfd:	85 c0                	test   %eax,%eax
+80105dff:	74 1d                	je     80105e1e <trap+0x9e>
+80105e01:	e8 aa db ff ff       	call   801039b0 <myproc>
+80105e06:	8b 40 24             	mov    0x24(%eax),%eax
+80105e09:	85 c0                	test   %eax,%eax
+80105e0b:	74 11                	je     80105e1e <trap+0x9e>
+80105e0d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105e11:	83 e0 03             	and    $0x3,%eax
+80105e14:	66 83 f8 03          	cmp    $0x3,%ax
+80105e18:	0f 84 0f 01 00 00    	je     80105f2d <trap+0x1ad>
     exit();
 }
-801059ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801059b1:	5b                   	pop    %ebx
-801059b2:	5e                   	pop    %esi
-801059b3:	5f                   	pop    %edi
-801059b4:	5d                   	pop    %ebp
-801059b5:	c3                   	ret    
-801059b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801059bd:	8d 76 00             	lea    0x0(%esi),%esi
+80105e1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105e21:	5b                   	pop    %ebx
+80105e22:	5e                   	pop    %esi
+80105e23:	5f                   	pop    %edi
+80105e24:	5d                   	pop    %ebp
+80105e25:	c3                   	ret    
+80105e26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e2d:	8d 76 00             	lea    0x0(%esi),%esi
     if(myproc() == 0 || (tf->cs&3) == 0){
-801059c0:	e8 ab df ff ff       	call   80103970 <myproc>
-801059c5:	8b 7b 38             	mov    0x38(%ebx),%edi
-801059c8:	85 c0                	test   %eax,%eax
-801059ca:	0f 84 a2 01 00 00    	je     80105b72 <trap+0x262>
-801059d0:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-801059d4:	0f 84 98 01 00 00    	je     80105b72 <trap+0x262>
+80105e30:	e8 7b db ff ff       	call   801039b0 <myproc>
+80105e35:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105e38:	85 c0                	test   %eax,%eax
+80105e3a:	0f 84 a2 01 00 00    	je     80105fe2 <trap+0x262>
+80105e40:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105e44:	0f 84 98 01 00 00    	je     80105fe2 <trap+0x262>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-801059da:	0f 20 d1             	mov    %cr2,%ecx
-801059dd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105e4a:	0f 20 d1             	mov    %cr2,%ecx
+80105e4d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059e0:	e8 6b df ff ff       	call   80103950 <cpuid>
-801059e5:	8b 73 30             	mov    0x30(%ebx),%esi
-801059e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059eb:	8b 43 34             	mov    0x34(%ebx),%eax
-801059ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80105e50:	e8 3b db ff ff       	call   80103990 <cpuid>
+80105e55:	8b 73 30             	mov    0x30(%ebx),%esi
+80105e58:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105e5b:	8b 43 34             	mov    0x34(%ebx),%eax
+80105e5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             myproc()->pid, myproc()->name, tf->trapno,
-801059f1:	e8 7a df ff ff       	call   80103970 <myproc>
-801059f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059f9:	e8 72 df ff ff       	call   80103970 <myproc>
+80105e61:	e8 4a db ff ff       	call   801039b0 <myproc>
+80105e66:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105e69:	e8 42 db ff ff       	call   801039b0 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059fe:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105a01:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105a04:	51                   	push   %ecx
-80105a05:	57                   	push   %edi
-80105a06:	52                   	push   %edx
-80105a07:	ff 75 e4             	push   -0x1c(%ebp)
-80105a0a:	56                   	push   %esi
+80105e6e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105e71:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105e74:	51                   	push   %ecx
+80105e75:	57                   	push   %edi
+80105e76:	52                   	push   %edx
+80105e77:	ff 75 e4             	push   -0x1c(%ebp)
+80105e7a:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-80105a0b:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80105a0e:	83 c6 6c             	add    $0x6c,%esi
+80105e7b:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105e7e:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105a11:	56                   	push   %esi
-80105a12:	ff 70 10             	push   0x10(%eax)
-80105a15:	68 7c 79 10 80       	push   $0x8010797c
-80105a1a:	e8 81 ac ff ff       	call   801006a0 <cprintf>
+80105e81:	56                   	push   %esi
+80105e82:	ff 70 10             	push   0x10(%eax)
+80105e85:	68 0c 7e 10 80       	push   $0x80107e0c
+80105e8a:	e8 11 a8 ff ff       	call   801006a0 <cprintf>
     myproc()->killed = 1;
-80105a1f:	83 c4 20             	add    $0x20,%esp
-80105a22:	e8 49 df ff ff       	call   80103970 <myproc>
-80105a27:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80105e8f:	83 c4 20             	add    $0x20,%esp
+80105e92:	e8 19 db ff ff       	call   801039b0 <myproc>
+80105e97:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a2e:	e8 3d df ff ff       	call   80103970 <myproc>
-80105a33:	85 c0                	test   %eax,%eax
-80105a35:	0f 85 18 ff ff ff    	jne    80105953 <trap+0x43>
-80105a3b:	e9 30 ff ff ff       	jmp    80105970 <trap+0x60>
+80105e9e:	e8 0d db ff ff       	call   801039b0 <myproc>
+80105ea3:	85 c0                	test   %eax,%eax
+80105ea5:	0f 85 18 ff ff ff    	jne    80105dc3 <trap+0x43>
+80105eab:	e9 30 ff ff ff       	jmp    80105de0 <trap+0x60>
   if(myproc() && myproc()->state == RUNNING &&
-80105a40:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105a44:	0f 85 3e ff ff ff    	jne    80105988 <trap+0x78>
+80105eb0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105eb4:	0f 85 3e ff ff ff    	jne    80105df8 <trap+0x78>
     yield();
-80105a4a:	e8 a1 e5 ff ff       	call   80103ff0 <yield>
-80105a4f:	e9 34 ff ff ff       	jmp    80105988 <trap+0x78>
-80105a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eba:	e8 41 e1 ff ff       	call   80104000 <yield>
+80105ebf:	e9 34 ff ff ff       	jmp    80105df8 <trap+0x78>
+80105ec4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105a58:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105a5b:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105a5f:	e8 ec de ff ff       	call   80103950 <cpuid>
-80105a64:	57                   	push   %edi
-80105a65:	56                   	push   %esi
-80105a66:	50                   	push   %eax
-80105a67:	68 24 79 10 80       	push   $0x80107924
-80105a6c:	e8 2f ac ff ff       	call   801006a0 <cprintf>
+80105ec8:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105ecb:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105ecf:	e8 bc da ff ff       	call   80103990 <cpuid>
+80105ed4:	57                   	push   %edi
+80105ed5:	56                   	push   %esi
+80105ed6:	50                   	push   %eax
+80105ed7:	68 b4 7d 10 80       	push   $0x80107db4
+80105edc:	e8 bf a7 ff ff       	call   801006a0 <cprintf>
     lapiceoi();
-80105a71:	e8 9a ce ff ff       	call   80102910 <lapiceoi>
+80105ee1:	e8 2a ca ff ff       	call   80102910 <lapiceoi>
     break;
-80105a76:	83 c4 10             	add    $0x10,%esp
+80105ee6:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a79:	e8 f2 de ff ff       	call   80103970 <myproc>
-80105a7e:	85 c0                	test   %eax,%eax
-80105a80:	0f 85 cd fe ff ff    	jne    80105953 <trap+0x43>
-80105a86:	e9 e5 fe ff ff       	jmp    80105970 <trap+0x60>
-80105a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105a8f:	90                   	nop
+80105ee9:	e8 c2 da ff ff       	call   801039b0 <myproc>
+80105eee:	85 c0                	test   %eax,%eax
+80105ef0:	0f 85 cd fe ff ff    	jne    80105dc3 <trap+0x43>
+80105ef6:	e9 e5 fe ff ff       	jmp    80105de0 <trap+0x60>
+80105efb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eff:	90                   	nop
     if(myproc()->killed)
-80105a90:	e8 db de ff ff       	call   80103970 <myproc>
-80105a95:	8b 70 24             	mov    0x24(%eax),%esi
-80105a98:	85 f6                	test   %esi,%esi
-80105a9a:	0f 85 c8 00 00 00    	jne    80105b68 <trap+0x258>
+80105f00:	e8 ab da ff ff       	call   801039b0 <myproc>
+80105f05:	8b 70 24             	mov    0x24(%eax),%esi
+80105f08:	85 f6                	test   %esi,%esi
+80105f0a:	0f 85 c8 00 00 00    	jne    80105fd8 <trap+0x258>
     myproc()->tf = tf;
-80105aa0:	e8 cb de ff ff       	call   80103970 <myproc>
-80105aa5:	89 58 18             	mov    %ebx,0x18(%eax)
+80105f10:	e8 9b da ff ff       	call   801039b0 <myproc>
+80105f15:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105aa8:	e8 b3 ef ff ff       	call   80104a60 <syscall>
+80105f18:	e8 a3 ee ff ff       	call   80104dc0 <syscall>
     if(myproc()->killed)
-80105aad:	e8 be de ff ff       	call   80103970 <myproc>
-80105ab2:	8b 48 24             	mov    0x24(%eax),%ecx
-80105ab5:	85 c9                	test   %ecx,%ecx
-80105ab7:	0f 84 f1 fe ff ff    	je     801059ae <trap+0x9e>
-}
-80105abd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105ac0:	5b                   	pop    %ebx
-80105ac1:	5e                   	pop    %esi
-80105ac2:	5f                   	pop    %edi
-80105ac3:	5d                   	pop    %ebp
+80105f1d:	e8 8e da ff ff       	call   801039b0 <myproc>
+80105f22:	8b 48 24             	mov    0x24(%eax),%ecx
+80105f25:	85 c9                	test   %ecx,%ecx
+80105f27:	0f 84 f1 fe ff ff    	je     80105e1e <trap+0x9e>
+}
+80105f2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105f30:	5b                   	pop    %ebx
+80105f31:	5e                   	pop    %esi
+80105f32:	5f                   	pop    %edi
+80105f33:	5d                   	pop    %ebp
       exit();
-80105ac4:	e9 c7 e2 ff ff       	jmp    80103d90 <exit>
-80105ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f34:	e9 97 de ff ff       	jmp    80103dd0 <exit>
+80105f39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     uartintr();
-80105ad0:	e8 3b 02 00 00       	call   80105d10 <uartintr>
+80105f40:	e8 3b 02 00 00       	call   80106180 <uartintr>
     lapiceoi();
-80105ad5:	e8 36 ce ff ff       	call   80102910 <lapiceoi>
+80105f45:	e8 c6 c9 ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105ada:	e8 91 de ff ff       	call   80103970 <myproc>
-80105adf:	85 c0                	test   %eax,%eax
-80105ae1:	0f 85 6c fe ff ff    	jne    80105953 <trap+0x43>
-80105ae7:	e9 84 fe ff ff       	jmp    80105970 <trap+0x60>
-80105aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f4a:	e8 61 da ff ff       	call   801039b0 <myproc>
+80105f4f:	85 c0                	test   %eax,%eax
+80105f51:	0f 85 6c fe ff ff    	jne    80105dc3 <trap+0x43>
+80105f57:	e9 84 fe ff ff       	jmp    80105de0 <trap+0x60>
+80105f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     kbdintr();
-80105af0:	e8 db cc ff ff       	call   801027d0 <kbdintr>
+80105f60:	e8 6b c8 ff ff       	call   801027d0 <kbdintr>
     lapiceoi();
-80105af5:	e8 16 ce ff ff       	call   80102910 <lapiceoi>
+80105f65:	e8 a6 c9 ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afa:	e8 71 de ff ff       	call   80103970 <myproc>
-80105aff:	85 c0                	test   %eax,%eax
-80105b01:	0f 85 4c fe ff ff    	jne    80105953 <trap+0x43>
-80105b07:	e9 64 fe ff ff       	jmp    80105970 <trap+0x60>
-80105b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f6a:	e8 41 da ff ff       	call   801039b0 <myproc>
+80105f6f:	85 c0                	test   %eax,%eax
+80105f71:	0f 85 4c fe ff ff    	jne    80105dc3 <trap+0x43>
+80105f77:	e9 64 fe ff ff       	jmp    80105de0 <trap+0x60>
+80105f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(cpuid() == 0){
-80105b10:	e8 3b de ff ff       	call   80103950 <cpuid>
-80105b15:	85 c0                	test   %eax,%eax
-80105b17:	0f 85 28 fe ff ff    	jne    80105945 <trap+0x35>
+80105f80:	e8 0b da ff ff       	call   80103990 <cpuid>
+80105f85:	85 c0                	test   %eax,%eax
+80105f87:	0f 85 28 fe ff ff    	jne    80105db5 <trap+0x35>
       acquire(&tickslock);
-80105b1d:	83 ec 0c             	sub    $0xc,%esp
-80105b20:	68 80 3c 11 80       	push   $0x80113c80
-80105b25:	e8 76 ea ff ff       	call   801045a0 <acquire>
+80105f8d:	83 ec 0c             	sub    $0xc,%esp
+80105f90:	68 80 3d 11 80       	push   $0x80113d80
+80105f95:	e8 66 e9 ff ff       	call   80104900 <acquire>
       wakeup(&ticks);
-80105b2a:	c7 04 24 60 3c 11 80 	movl   $0x80113c60,(%esp)
+80105f9a:	c7 04 24 60 3d 11 80 	movl   $0x80113d60,(%esp)
       ticks++;
-80105b31:	83 05 60 3c 11 80 01 	addl   $0x1,0x80113c60
+80105fa1:	83 05 60 3d 11 80 01 	addl   $0x1,0x80113d60
       wakeup(&ticks);
-80105b38:	e8 c3 e5 ff ff       	call   80104100 <wakeup>
+80105fa8:	e8 63 e1 ff ff       	call   80104110 <wakeup>
       release(&tickslock);
-80105b3d:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
-80105b44:	e8 f7 e9 ff ff       	call   80104540 <release>
-80105b49:	83 c4 10             	add    $0x10,%esp
+80105fad:	c7 04 24 80 3d 11 80 	movl   $0x80113d80,(%esp)
+80105fb4:	e8 e7 e8 ff ff       	call   801048a0 <release>
+80105fb9:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105b4c:	e9 f4 fd ff ff       	jmp    80105945 <trap+0x35>
-80105b51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105fbc:	e9 f4 fd ff ff       	jmp    80105db5 <trap+0x35>
+80105fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     exit();
-80105b58:	e8 33 e2 ff ff       	call   80103d90 <exit>
-80105b5d:	e9 0e fe ff ff       	jmp    80105970 <trap+0x60>
-80105b62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105fc8:	e8 03 de ff ff       	call   80103dd0 <exit>
+80105fcd:	e9 0e fe ff ff       	jmp    80105de0 <trap+0x60>
+80105fd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b68:	e8 23 e2 ff ff       	call   80103d90 <exit>
-80105b6d:	e9 2e ff ff ff       	jmp    80105aa0 <trap+0x190>
-80105b72:	0f 20 d6             	mov    %cr2,%esi
+80105fd8:	e8 f3 dd ff ff       	call   80103dd0 <exit>
+80105fdd:	e9 2e ff ff ff       	jmp    80105f10 <trap+0x190>
+80105fe2:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b75:	e8 d6 dd ff ff       	call   80103950 <cpuid>
-80105b7a:	83 ec 0c             	sub    $0xc,%esp
-80105b7d:	56                   	push   %esi
-80105b7e:	57                   	push   %edi
-80105b7f:	50                   	push   %eax
-80105b80:	ff 73 30             	push   0x30(%ebx)
-80105b83:	68 48 79 10 80       	push   $0x80107948
-80105b88:	e8 13 ab ff ff       	call   801006a0 <cprintf>
+80105fe5:	e8 a6 d9 ff ff       	call   80103990 <cpuid>
+80105fea:	83 ec 0c             	sub    $0xc,%esp
+80105fed:	56                   	push   %esi
+80105fee:	57                   	push   %edi
+80105fef:	50                   	push   %eax
+80105ff0:	ff 73 30             	push   0x30(%ebx)
+80105ff3:	68 d8 7d 10 80       	push   $0x80107dd8
+80105ff8:	e8 a3 a6 ff ff       	call   801006a0 <cprintf>
       panic("trap");
-80105b8d:	83 c4 14             	add    $0x14,%esp
-80105b90:	68 1e 79 10 80       	push   $0x8010791e
-80105b95:	e8 e6 a7 ff ff       	call   80100380 <panic>
-80105b9a:	66 90                	xchg   %ax,%ax
-80105b9c:	66 90                	xchg   %ax,%ax
-80105b9e:	66 90                	xchg   %ax,%ax
+80105ffd:	83 c4 14             	add    $0x14,%esp
+80106000:	68 ae 7d 10 80       	push   $0x80107dae
+80106005:	e8 76 a3 ff ff       	call   80100380 <panic>
+8010600a:	66 90                	xchg   %ax,%ax
+8010600c:	66 90                	xchg   %ax,%ax
+8010600e:	66 90                	xchg   %ax,%ax
 
-80105ba0 <uartgetc>:
+80106010 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
   if(!uart)
-80105ba0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
-80105ba5:	85 c0                	test   %eax,%eax
-80105ba7:	74 17                	je     80105bc0 <uartgetc+0x20>
+80106010:	a1 c0 45 11 80       	mov    0x801145c0,%eax
+80106015:	85 c0                	test   %eax,%eax
+80106017:	74 17                	je     80106030 <uartgetc+0x20>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105ba9:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bae:	ec                   	in     (%dx),%al
+80106019:	ba fd 03 00 00       	mov    $0x3fd,%edx
+8010601e:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105baf:	a8 01                	test   $0x1,%al
-80105bb1:	74 0d                	je     80105bc0 <uartgetc+0x20>
-80105bb3:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bb8:	ec                   	in     (%dx),%al
+8010601f:	a8 01                	test   $0x1,%al
+80106021:	74 0d                	je     80106030 <uartgetc+0x20>
+80106023:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106028:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bb9:	0f b6 c0             	movzbl %al,%eax
-80105bbc:	c3                   	ret    
-80105bbd:	8d 76 00             	lea    0x0(%esi),%esi
+80106029:	0f b6 c0             	movzbl %al,%eax
+8010602c:	c3                   	ret    
+8010602d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105bc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106030:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bc5:	c3                   	ret    
-80105bc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bcd:	8d 76 00             	lea    0x0(%esi),%esi
+80106035:	c3                   	ret    
+80106036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010603d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80105bd0 <uartinit>:
+80106040 <uartinit>:
 {
-80105bd0:	55                   	push   %ebp
+80106040:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105bd1:	31 c9                	xor    %ecx,%ecx
-80105bd3:	89 c8                	mov    %ecx,%eax
-80105bd5:	89 e5                	mov    %esp,%ebp
-80105bd7:	57                   	push   %edi
-80105bd8:	bf fa 03 00 00       	mov    $0x3fa,%edi
-80105bdd:	56                   	push   %esi
-80105bde:	89 fa                	mov    %edi,%edx
-80105be0:	53                   	push   %ebx
-80105be1:	83 ec 1c             	sub    $0x1c,%esp
-80105be4:	ee                   	out    %al,(%dx)
-80105be5:	be fb 03 00 00       	mov    $0x3fb,%esi
-80105bea:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105bef:	89 f2                	mov    %esi,%edx
-80105bf1:	ee                   	out    %al,(%dx)
-80105bf2:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105bf7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bfc:	ee                   	out    %al,(%dx)
-80105bfd:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-80105c02:	89 c8                	mov    %ecx,%eax
-80105c04:	89 da                	mov    %ebx,%edx
-80105c06:	ee                   	out    %al,(%dx)
-80105c07:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c0c:	89 f2                	mov    %esi,%edx
-80105c0e:	ee                   	out    %al,(%dx)
-80105c0f:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c14:	89 c8                	mov    %ecx,%eax
-80105c16:	ee                   	out    %al,(%dx)
-80105c17:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c1c:	89 da                	mov    %ebx,%edx
-80105c1e:	ee                   	out    %al,(%dx)
+80106041:	31 c9                	xor    %ecx,%ecx
+80106043:	89 c8                	mov    %ecx,%eax
+80106045:	89 e5                	mov    %esp,%ebp
+80106047:	57                   	push   %edi
+80106048:	bf fa 03 00 00       	mov    $0x3fa,%edi
+8010604d:	56                   	push   %esi
+8010604e:	89 fa                	mov    %edi,%edx
+80106050:	53                   	push   %ebx
+80106051:	83 ec 1c             	sub    $0x1c,%esp
+80106054:	ee                   	out    %al,(%dx)
+80106055:	be fb 03 00 00       	mov    $0x3fb,%esi
+8010605a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+8010605f:	89 f2                	mov    %esi,%edx
+80106061:	ee                   	out    %al,(%dx)
+80106062:	b8 0c 00 00 00       	mov    $0xc,%eax
+80106067:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010606c:	ee                   	out    %al,(%dx)
+8010606d:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+80106072:	89 c8                	mov    %ecx,%eax
+80106074:	89 da                	mov    %ebx,%edx
+80106076:	ee                   	out    %al,(%dx)
+80106077:	b8 03 00 00 00       	mov    $0x3,%eax
+8010607c:	89 f2                	mov    %esi,%edx
+8010607e:	ee                   	out    %al,(%dx)
+8010607f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80106084:	89 c8                	mov    %ecx,%eax
+80106086:	ee                   	out    %al,(%dx)
+80106087:	b8 01 00 00 00       	mov    $0x1,%eax
+8010608c:	89 da                	mov    %ebx,%edx
+8010608e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c1f:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c24:	ec                   	in     (%dx),%al
+8010608f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106094:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c25:	3c ff                	cmp    $0xff,%al
-80105c27:	74 78                	je     80105ca1 <uartinit+0xd1>
+80106095:	3c ff                	cmp    $0xff,%al
+80106097:	74 78                	je     80106111 <uartinit+0xd1>
   uart = 1;
-80105c29:	c7 05 c0 44 11 80 01 	movl   $0x1,0x801144c0
-80105c30:	00 00 00 
-80105c33:	89 fa                	mov    %edi,%edx
-80105c35:	ec                   	in     (%dx),%al
-80105c36:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c3b:	ec                   	in     (%dx),%al
+80106099:	c7 05 c0 45 11 80 01 	movl   $0x1,0x801145c0
+801060a0:	00 00 00 
+801060a3:	89 fa                	mov    %edi,%edx
+801060a5:	ec                   	in     (%dx),%al
+801060a6:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801060ab:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c3c:	83 ec 08             	sub    $0x8,%esp
+801060ac:	83 ec 08             	sub    $0x8,%esp
   for(p="xv6...\n"; *p; p++)
-80105c3f:	bf 40 7a 10 80       	mov    $0x80107a40,%edi
-80105c44:	be fd 03 00 00       	mov    $0x3fd,%esi
+801060af:	bf d0 7e 10 80       	mov    $0x80107ed0,%edi
+801060b4:	be fd 03 00 00       	mov    $0x3fd,%esi
   ioapicenable(IRQ_COM1, 0);
-80105c49:	6a 00                	push   $0x0
-80105c4b:	6a 04                	push   $0x4
-80105c4d:	e8 2e c8 ff ff       	call   80102480 <ioapicenable>
+801060b9:	6a 00                	push   $0x0
+801060bb:	6a 04                	push   $0x4
+801060bd:	e8 be c3 ff ff       	call   80102480 <ioapicenable>
   for(p="xv6...\n"; *p; p++)
-80105c52:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
+801060c2:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
   ioapicenable(IRQ_COM1, 0);
-80105c56:	83 c4 10             	add    $0x10,%esp
-80105c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060c6:	83 c4 10             	add    $0x10,%esp
+801060c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(!uart)
-80105c60:	a1 c0 44 11 80       	mov    0x801144c0,%eax
-80105c65:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105c6a:	85 c0                	test   %eax,%eax
-80105c6c:	75 14                	jne    80105c82 <uartinit+0xb2>
-80105c6e:	eb 23                	jmp    80105c93 <uartinit+0xc3>
+801060d0:	a1 c0 45 11 80       	mov    0x801145c0,%eax
+801060d5:	bb 80 00 00 00       	mov    $0x80,%ebx
+801060da:	85 c0                	test   %eax,%eax
+801060dc:	75 14                	jne    801060f2 <uartinit+0xb2>
+801060de:	eb 23                	jmp    80106103 <uartinit+0xc3>
     microdelay(10);
-80105c70:	83 ec 0c             	sub    $0xc,%esp
-80105c73:	6a 0a                	push   $0xa
-80105c75:	e8 b6 cc ff ff       	call   80102930 <microdelay>
+801060e0:	83 ec 0c             	sub    $0xc,%esp
+801060e3:	6a 0a                	push   $0xa
+801060e5:	e8 46 c8 ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105c7a:	83 c4 10             	add    $0x10,%esp
-80105c7d:	83 eb 01             	sub    $0x1,%ebx
-80105c80:	74 07                	je     80105c89 <uartinit+0xb9>
-80105c82:	89 f2                	mov    %esi,%edx
-80105c84:	ec                   	in     (%dx),%al
-80105c85:	a8 20                	test   $0x20,%al
-80105c87:	74 e7                	je     80105c70 <uartinit+0xa0>
+801060ea:	83 c4 10             	add    $0x10,%esp
+801060ed:	83 eb 01             	sub    $0x1,%ebx
+801060f0:	74 07                	je     801060f9 <uartinit+0xb9>
+801060f2:	89 f2                	mov    %esi,%edx
+801060f4:	ec                   	in     (%dx),%al
+801060f5:	a8 20                	test   $0x20,%al
+801060f7:	74 e7                	je     801060e0 <uartinit+0xa0>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c89:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-80105c8d:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c92:	ee                   	out    %al,(%dx)
+801060f9:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801060fd:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106102:	ee                   	out    %al,(%dx)
   for(p="xv6...\n"; *p; p++)
-80105c93:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-80105c97:	83 c7 01             	add    $0x1,%edi
-80105c9a:	88 45 e7             	mov    %al,-0x19(%ebp)
-80105c9d:	84 c0                	test   %al,%al
-80105c9f:	75 bf                	jne    80105c60 <uartinit+0x90>
-}
-80105ca1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105ca4:	5b                   	pop    %ebx
-80105ca5:	5e                   	pop    %esi
-80105ca6:	5f                   	pop    %edi
-80105ca7:	5d                   	pop    %ebp
-80105ca8:	c3                   	ret    
-80105ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106103:	0f b6 47 01          	movzbl 0x1(%edi),%eax
+80106107:	83 c7 01             	add    $0x1,%edi
+8010610a:	88 45 e7             	mov    %al,-0x19(%ebp)
+8010610d:	84 c0                	test   %al,%al
+8010610f:	75 bf                	jne    801060d0 <uartinit+0x90>
+}
+80106111:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106114:	5b                   	pop    %ebx
+80106115:	5e                   	pop    %esi
+80106116:	5f                   	pop    %edi
+80106117:	5d                   	pop    %ebp
+80106118:	c3                   	ret    
+80106119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105cb0 <uartputc>:
+80106120 <uartputc>:
   if(!uart)
-80105cb0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
-80105cb5:	85 c0                	test   %eax,%eax
-80105cb7:	74 47                	je     80105d00 <uartputc+0x50>
-{
-80105cb9:	55                   	push   %ebp
-80105cba:	89 e5                	mov    %esp,%ebp
-80105cbc:	56                   	push   %esi
+80106120:	a1 c0 45 11 80       	mov    0x801145c0,%eax
+80106125:	85 c0                	test   %eax,%eax
+80106127:	74 47                	je     80106170 <uartputc+0x50>
+{
+80106129:	55                   	push   %ebp
+8010612a:	89 e5                	mov    %esp,%ebp
+8010612c:	56                   	push   %esi
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105cbd:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105cc2:	53                   	push   %ebx
-80105cc3:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105cc8:	eb 18                	jmp    80105ce2 <uartputc+0x32>
-80105cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010612d:	be fd 03 00 00       	mov    $0x3fd,%esi
+80106132:	53                   	push   %ebx
+80106133:	bb 80 00 00 00       	mov    $0x80,%ebx
+80106138:	eb 18                	jmp    80106152 <uartputc+0x32>
+8010613a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     microdelay(10);
-80105cd0:	83 ec 0c             	sub    $0xc,%esp
-80105cd3:	6a 0a                	push   $0xa
-80105cd5:	e8 56 cc ff ff       	call   80102930 <microdelay>
+80106140:	83 ec 0c             	sub    $0xc,%esp
+80106143:	6a 0a                	push   $0xa
+80106145:	e8 e6 c7 ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105cda:	83 c4 10             	add    $0x10,%esp
-80105cdd:	83 eb 01             	sub    $0x1,%ebx
-80105ce0:	74 07                	je     80105ce9 <uartputc+0x39>
-80105ce2:	89 f2                	mov    %esi,%edx
-80105ce4:	ec                   	in     (%dx),%al
-80105ce5:	a8 20                	test   $0x20,%al
-80105ce7:	74 e7                	je     80105cd0 <uartputc+0x20>
+8010614a:	83 c4 10             	add    $0x10,%esp
+8010614d:	83 eb 01             	sub    $0x1,%ebx
+80106150:	74 07                	je     80106159 <uartputc+0x39>
+80106152:	89 f2                	mov    %esi,%edx
+80106154:	ec                   	in     (%dx),%al
+80106155:	a8 20                	test   $0x20,%al
+80106157:	74 e7                	je     80106140 <uartputc+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105ce9:	8b 45 08             	mov    0x8(%ebp),%eax
-80105cec:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105cf1:	ee                   	out    %al,(%dx)
-}
-80105cf2:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105cf5:	5b                   	pop    %ebx
-80105cf6:	5e                   	pop    %esi
-80105cf7:	5d                   	pop    %ebp
-80105cf8:	c3                   	ret    
-80105cf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d00:	c3                   	ret    
-80105d01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d0f:	90                   	nop
+80106159:	8b 45 08             	mov    0x8(%ebp),%eax
+8010615c:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106161:	ee                   	out    %al,(%dx)
+}
+80106162:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106165:	5b                   	pop    %ebx
+80106166:	5e                   	pop    %esi
+80106167:	5d                   	pop    %ebp
+80106168:	c3                   	ret    
+80106169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106170:	c3                   	ret    
+80106171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106178:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010617f:	90                   	nop
 
-80105d10 <uartintr>:
+80106180 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	55                   	push   %ebp
-80105d11:	89 e5                	mov    %esp,%ebp
-80105d13:	83 ec 14             	sub    $0x14,%esp
+80106180:	55                   	push   %ebp
+80106181:	89 e5                	mov    %esp,%ebp
+80106183:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d16:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1b:	e8 60 ab ff ff       	call   80100880 <consoleintr>
+80106186:	68 10 60 10 80       	push   $0x80106010
+8010618b:	e8 f0 a6 ff ff       	call   80100880 <consoleintr>
 }
-80105d20:	83 c4 10             	add    $0x10,%esp
-80105d23:	c9                   	leave  
-80105d24:	c3                   	ret    
+80106190:	83 c4 10             	add    $0x10,%esp
+80106193:	c9                   	leave  
+80106194:	c3                   	ret    
 
-80105d25 <vector0>:
+80106195 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105d25:	6a 00                	push   $0x0
+80106195:	6a 00                	push   $0x0
   pushl $0
-80105d27:	6a 00                	push   $0x0
+80106197:	6a 00                	push   $0x0
   jmp alltraps
-80105d29:	e9 0c fb ff ff       	jmp    8010583a <alltraps>
+80106199:	e9 09 fb ff ff       	jmp    80105ca7 <alltraps>
 
-80105d2e <vector1>:
+8010619e <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105d2e:	6a 00                	push   $0x0
+8010619e:	6a 00                	push   $0x0
   pushl $1
-80105d30:	6a 01                	push   $0x1
+801061a0:	6a 01                	push   $0x1
   jmp alltraps
-80105d32:	e9 03 fb ff ff       	jmp    8010583a <alltraps>
+801061a2:	e9 00 fb ff ff       	jmp    80105ca7 <alltraps>
 
-80105d37 <vector2>:
+801061a7 <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105d37:	6a 00                	push   $0x0
+801061a7:	6a 00                	push   $0x0
   pushl $2
-80105d39:	6a 02                	push   $0x2
+801061a9:	6a 02                	push   $0x2
   jmp alltraps
-80105d3b:	e9 fa fa ff ff       	jmp    8010583a <alltraps>
+801061ab:	e9 f7 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d40 <vector3>:
+801061b0 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105d40:	6a 00                	push   $0x0
+801061b0:	6a 00                	push   $0x0
   pushl $3
-80105d42:	6a 03                	push   $0x3
+801061b2:	6a 03                	push   $0x3
   jmp alltraps
-80105d44:	e9 f1 fa ff ff       	jmp    8010583a <alltraps>
+801061b4:	e9 ee fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d49 <vector4>:
+801061b9 <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105d49:	6a 00                	push   $0x0
+801061b9:	6a 00                	push   $0x0
   pushl $4
-80105d4b:	6a 04                	push   $0x4
+801061bb:	6a 04                	push   $0x4
   jmp alltraps
-80105d4d:	e9 e8 fa ff ff       	jmp    8010583a <alltraps>
+801061bd:	e9 e5 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d52 <vector5>:
+801061c2 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105d52:	6a 00                	push   $0x0
+801061c2:	6a 00                	push   $0x0
   pushl $5
-80105d54:	6a 05                	push   $0x5
+801061c4:	6a 05                	push   $0x5
   jmp alltraps
-80105d56:	e9 df fa ff ff       	jmp    8010583a <alltraps>
+801061c6:	e9 dc fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d5b <vector6>:
+801061cb <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105d5b:	6a 00                	push   $0x0
+801061cb:	6a 00                	push   $0x0
   pushl $6
-80105d5d:	6a 06                	push   $0x6
+801061cd:	6a 06                	push   $0x6
   jmp alltraps
-80105d5f:	e9 d6 fa ff ff       	jmp    8010583a <alltraps>
+801061cf:	e9 d3 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d64 <vector7>:
+801061d4 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105d64:	6a 00                	push   $0x0
+801061d4:	6a 00                	push   $0x0
   pushl $7
-80105d66:	6a 07                	push   $0x7
+801061d6:	6a 07                	push   $0x7
   jmp alltraps
-80105d68:	e9 cd fa ff ff       	jmp    8010583a <alltraps>
+801061d8:	e9 ca fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d6d <vector8>:
+801061dd <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105d6d:	6a 08                	push   $0x8
+801061dd:	6a 08                	push   $0x8
   jmp alltraps
-80105d6f:	e9 c6 fa ff ff       	jmp    8010583a <alltraps>
+801061df:	e9 c3 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d74 <vector9>:
+801061e4 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105d74:	6a 00                	push   $0x0
+801061e4:	6a 00                	push   $0x0
   pushl $9
-80105d76:	6a 09                	push   $0x9
+801061e6:	6a 09                	push   $0x9
   jmp alltraps
-80105d78:	e9 bd fa ff ff       	jmp    8010583a <alltraps>
+801061e8:	e9 ba fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d7d <vector10>:
+801061ed <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105d7d:	6a 0a                	push   $0xa
+801061ed:	6a 0a                	push   $0xa
   jmp alltraps
-80105d7f:	e9 b6 fa ff ff       	jmp    8010583a <alltraps>
+801061ef:	e9 b3 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d84 <vector11>:
+801061f4 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105d84:	6a 0b                	push   $0xb
+801061f4:	6a 0b                	push   $0xb
   jmp alltraps
-80105d86:	e9 af fa ff ff       	jmp    8010583a <alltraps>
+801061f6:	e9 ac fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d8b <vector12>:
+801061fb <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105d8b:	6a 0c                	push   $0xc
+801061fb:	6a 0c                	push   $0xc
   jmp alltraps
-80105d8d:	e9 a8 fa ff ff       	jmp    8010583a <alltraps>
+801061fd:	e9 a5 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d92 <vector13>:
+80106202 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105d92:	6a 0d                	push   $0xd
+80106202:	6a 0d                	push   $0xd
   jmp alltraps
-80105d94:	e9 a1 fa ff ff       	jmp    8010583a <alltraps>
+80106204:	e9 9e fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105d99 <vector14>:
+80106209 <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105d99:	6a 0e                	push   $0xe
+80106209:	6a 0e                	push   $0xe
   jmp alltraps
-80105d9b:	e9 9a fa ff ff       	jmp    8010583a <alltraps>
+8010620b:	e9 97 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105da0 <vector15>:
+80106210 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105da0:	6a 00                	push   $0x0
+80106210:	6a 00                	push   $0x0
   pushl $15
-80105da2:	6a 0f                	push   $0xf
+80106212:	6a 0f                	push   $0xf
   jmp alltraps
-80105da4:	e9 91 fa ff ff       	jmp    8010583a <alltraps>
+80106214:	e9 8e fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105da9 <vector16>:
+80106219 <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105da9:	6a 00                	push   $0x0
+80106219:	6a 00                	push   $0x0
   pushl $16
-80105dab:	6a 10                	push   $0x10
+8010621b:	6a 10                	push   $0x10
   jmp alltraps
-80105dad:	e9 88 fa ff ff       	jmp    8010583a <alltraps>
+8010621d:	e9 85 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105db2 <vector17>:
+80106222 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105db2:	6a 11                	push   $0x11
+80106222:	6a 11                	push   $0x11
   jmp alltraps
-80105db4:	e9 81 fa ff ff       	jmp    8010583a <alltraps>
+80106224:	e9 7e fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105db9 <vector18>:
+80106229 <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105db9:	6a 00                	push   $0x0
+80106229:	6a 00                	push   $0x0
   pushl $18
-80105dbb:	6a 12                	push   $0x12
+8010622b:	6a 12                	push   $0x12
   jmp alltraps
-80105dbd:	e9 78 fa ff ff       	jmp    8010583a <alltraps>
+8010622d:	e9 75 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105dc2 <vector19>:
+80106232 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105dc2:	6a 00                	push   $0x0
+80106232:	6a 00                	push   $0x0
   pushl $19
-80105dc4:	6a 13                	push   $0x13
+80106234:	6a 13                	push   $0x13
   jmp alltraps
-80105dc6:	e9 6f fa ff ff       	jmp    8010583a <alltraps>
+80106236:	e9 6c fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105dcb <vector20>:
+8010623b <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105dcb:	6a 00                	push   $0x0
+8010623b:	6a 00                	push   $0x0
   pushl $20
-80105dcd:	6a 14                	push   $0x14
+8010623d:	6a 14                	push   $0x14
   jmp alltraps
-80105dcf:	e9 66 fa ff ff       	jmp    8010583a <alltraps>
+8010623f:	e9 63 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105dd4 <vector21>:
+80106244 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105dd4:	6a 00                	push   $0x0
+80106244:	6a 00                	push   $0x0
   pushl $21
-80105dd6:	6a 15                	push   $0x15
+80106246:	6a 15                	push   $0x15
   jmp alltraps
-80105dd8:	e9 5d fa ff ff       	jmp    8010583a <alltraps>
+80106248:	e9 5a fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105ddd <vector22>:
+8010624d <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105ddd:	6a 00                	push   $0x0
+8010624d:	6a 00                	push   $0x0
   pushl $22
-80105ddf:	6a 16                	push   $0x16
+8010624f:	6a 16                	push   $0x16
   jmp alltraps
-80105de1:	e9 54 fa ff ff       	jmp    8010583a <alltraps>
+80106251:	e9 51 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105de6 <vector23>:
+80106256 <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105de6:	6a 00                	push   $0x0
+80106256:	6a 00                	push   $0x0
   pushl $23
-80105de8:	6a 17                	push   $0x17
+80106258:	6a 17                	push   $0x17
   jmp alltraps
-80105dea:	e9 4b fa ff ff       	jmp    8010583a <alltraps>
+8010625a:	e9 48 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105def <vector24>:
+8010625f <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105def:	6a 00                	push   $0x0
+8010625f:	6a 00                	push   $0x0
   pushl $24
-80105df1:	6a 18                	push   $0x18
+80106261:	6a 18                	push   $0x18
   jmp alltraps
-80105df3:	e9 42 fa ff ff       	jmp    8010583a <alltraps>
+80106263:	e9 3f fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105df8 <vector25>:
+80106268 <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105df8:	6a 00                	push   $0x0
+80106268:	6a 00                	push   $0x0
   pushl $25
-80105dfa:	6a 19                	push   $0x19
+8010626a:	6a 19                	push   $0x19
   jmp alltraps
-80105dfc:	e9 39 fa ff ff       	jmp    8010583a <alltraps>
+8010626c:	e9 36 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e01 <vector26>:
+80106271 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e01:	6a 00                	push   $0x0
+80106271:	6a 00                	push   $0x0
   pushl $26
-80105e03:	6a 1a                	push   $0x1a
+80106273:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e05:	e9 30 fa ff ff       	jmp    8010583a <alltraps>
+80106275:	e9 2d fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e0a <vector27>:
+8010627a <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e0a:	6a 00                	push   $0x0
+8010627a:	6a 00                	push   $0x0
   pushl $27
-80105e0c:	6a 1b                	push   $0x1b
+8010627c:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e0e:	e9 27 fa ff ff       	jmp    8010583a <alltraps>
+8010627e:	e9 24 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e13 <vector28>:
+80106283 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105e13:	6a 00                	push   $0x0
+80106283:	6a 00                	push   $0x0
   pushl $28
-80105e15:	6a 1c                	push   $0x1c
+80106285:	6a 1c                	push   $0x1c
   jmp alltraps
-80105e17:	e9 1e fa ff ff       	jmp    8010583a <alltraps>
+80106287:	e9 1b fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e1c <vector29>:
+8010628c <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105e1c:	6a 00                	push   $0x0
+8010628c:	6a 00                	push   $0x0
   pushl $29
-80105e1e:	6a 1d                	push   $0x1d
+8010628e:	6a 1d                	push   $0x1d
   jmp alltraps
-80105e20:	e9 15 fa ff ff       	jmp    8010583a <alltraps>
+80106290:	e9 12 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e25 <vector30>:
+80106295 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105e25:	6a 00                	push   $0x0
+80106295:	6a 00                	push   $0x0
   pushl $30
-80105e27:	6a 1e                	push   $0x1e
+80106297:	6a 1e                	push   $0x1e
   jmp alltraps
-80105e29:	e9 0c fa ff ff       	jmp    8010583a <alltraps>
+80106299:	e9 09 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e2e <vector31>:
+8010629e <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105e2e:	6a 00                	push   $0x0
+8010629e:	6a 00                	push   $0x0
   pushl $31
-80105e30:	6a 1f                	push   $0x1f
+801062a0:	6a 1f                	push   $0x1f
   jmp alltraps
-80105e32:	e9 03 fa ff ff       	jmp    8010583a <alltraps>
+801062a2:	e9 00 fa ff ff       	jmp    80105ca7 <alltraps>
 
-80105e37 <vector32>:
+801062a7 <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105e37:	6a 00                	push   $0x0
+801062a7:	6a 00                	push   $0x0
   pushl $32
-80105e39:	6a 20                	push   $0x20
+801062a9:	6a 20                	push   $0x20
   jmp alltraps
-80105e3b:	e9 fa f9 ff ff       	jmp    8010583a <alltraps>
+801062ab:	e9 f7 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e40 <vector33>:
+801062b0 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105e40:	6a 00                	push   $0x0
+801062b0:	6a 00                	push   $0x0
   pushl $33
-80105e42:	6a 21                	push   $0x21
+801062b2:	6a 21                	push   $0x21
   jmp alltraps
-80105e44:	e9 f1 f9 ff ff       	jmp    8010583a <alltraps>
+801062b4:	e9 ee f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e49 <vector34>:
+801062b9 <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105e49:	6a 00                	push   $0x0
+801062b9:	6a 00                	push   $0x0
   pushl $34
-80105e4b:	6a 22                	push   $0x22
+801062bb:	6a 22                	push   $0x22
   jmp alltraps
-80105e4d:	e9 e8 f9 ff ff       	jmp    8010583a <alltraps>
+801062bd:	e9 e5 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e52 <vector35>:
+801062c2 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105e52:	6a 00                	push   $0x0
+801062c2:	6a 00                	push   $0x0
   pushl $35
-80105e54:	6a 23                	push   $0x23
+801062c4:	6a 23                	push   $0x23
   jmp alltraps
-80105e56:	e9 df f9 ff ff       	jmp    8010583a <alltraps>
+801062c6:	e9 dc f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e5b <vector36>:
+801062cb <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105e5b:	6a 00                	push   $0x0
+801062cb:	6a 00                	push   $0x0
   pushl $36
-80105e5d:	6a 24                	push   $0x24
+801062cd:	6a 24                	push   $0x24
   jmp alltraps
-80105e5f:	e9 d6 f9 ff ff       	jmp    8010583a <alltraps>
+801062cf:	e9 d3 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e64 <vector37>:
+801062d4 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105e64:	6a 00                	push   $0x0
+801062d4:	6a 00                	push   $0x0
   pushl $37
-80105e66:	6a 25                	push   $0x25
+801062d6:	6a 25                	push   $0x25
   jmp alltraps
-80105e68:	e9 cd f9 ff ff       	jmp    8010583a <alltraps>
+801062d8:	e9 ca f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e6d <vector38>:
+801062dd <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105e6d:	6a 00                	push   $0x0
+801062dd:	6a 00                	push   $0x0
   pushl $38
-80105e6f:	6a 26                	push   $0x26
+801062df:	6a 26                	push   $0x26
   jmp alltraps
-80105e71:	e9 c4 f9 ff ff       	jmp    8010583a <alltraps>
+801062e1:	e9 c1 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e76 <vector39>:
+801062e6 <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105e76:	6a 00                	push   $0x0
+801062e6:	6a 00                	push   $0x0
   pushl $39
-80105e78:	6a 27                	push   $0x27
+801062e8:	6a 27                	push   $0x27
   jmp alltraps
-80105e7a:	e9 bb f9 ff ff       	jmp    8010583a <alltraps>
+801062ea:	e9 b8 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e7f <vector40>:
+801062ef <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105e7f:	6a 00                	push   $0x0
+801062ef:	6a 00                	push   $0x0
   pushl $40
-80105e81:	6a 28                	push   $0x28
+801062f1:	6a 28                	push   $0x28
   jmp alltraps
-80105e83:	e9 b2 f9 ff ff       	jmp    8010583a <alltraps>
+801062f3:	e9 af f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e88 <vector41>:
+801062f8 <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105e88:	6a 00                	push   $0x0
+801062f8:	6a 00                	push   $0x0
   pushl $41
-80105e8a:	6a 29                	push   $0x29
+801062fa:	6a 29                	push   $0x29
   jmp alltraps
-80105e8c:	e9 a9 f9 ff ff       	jmp    8010583a <alltraps>
+801062fc:	e9 a6 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e91 <vector42>:
+80106301 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105e91:	6a 00                	push   $0x0
+80106301:	6a 00                	push   $0x0
   pushl $42
-80105e93:	6a 2a                	push   $0x2a
+80106303:	6a 2a                	push   $0x2a
   jmp alltraps
-80105e95:	e9 a0 f9 ff ff       	jmp    8010583a <alltraps>
+80106305:	e9 9d f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105e9a <vector43>:
+8010630a <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105e9a:	6a 00                	push   $0x0
+8010630a:	6a 00                	push   $0x0
   pushl $43
-80105e9c:	6a 2b                	push   $0x2b
+8010630c:	6a 2b                	push   $0x2b
   jmp alltraps
-80105e9e:	e9 97 f9 ff ff       	jmp    8010583a <alltraps>
+8010630e:	e9 94 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ea3 <vector44>:
+80106313 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105ea3:	6a 00                	push   $0x0
+80106313:	6a 00                	push   $0x0
   pushl $44
-80105ea5:	6a 2c                	push   $0x2c
+80106315:	6a 2c                	push   $0x2c
   jmp alltraps
-80105ea7:	e9 8e f9 ff ff       	jmp    8010583a <alltraps>
+80106317:	e9 8b f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105eac <vector45>:
+8010631c <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105eac:	6a 00                	push   $0x0
+8010631c:	6a 00                	push   $0x0
   pushl $45
-80105eae:	6a 2d                	push   $0x2d
+8010631e:	6a 2d                	push   $0x2d
   jmp alltraps
-80105eb0:	e9 85 f9 ff ff       	jmp    8010583a <alltraps>
+80106320:	e9 82 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105eb5 <vector46>:
+80106325 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105eb5:	6a 00                	push   $0x0
+80106325:	6a 00                	push   $0x0
   pushl $46
-80105eb7:	6a 2e                	push   $0x2e
+80106327:	6a 2e                	push   $0x2e
   jmp alltraps
-80105eb9:	e9 7c f9 ff ff       	jmp    8010583a <alltraps>
+80106329:	e9 79 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ebe <vector47>:
+8010632e <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105ebe:	6a 00                	push   $0x0
+8010632e:	6a 00                	push   $0x0
   pushl $47
-80105ec0:	6a 2f                	push   $0x2f
+80106330:	6a 2f                	push   $0x2f
   jmp alltraps
-80105ec2:	e9 73 f9 ff ff       	jmp    8010583a <alltraps>
+80106332:	e9 70 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ec7 <vector48>:
+80106337 <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105ec7:	6a 00                	push   $0x0
+80106337:	6a 00                	push   $0x0
   pushl $48
-80105ec9:	6a 30                	push   $0x30
+80106339:	6a 30                	push   $0x30
   jmp alltraps
-80105ecb:	e9 6a f9 ff ff       	jmp    8010583a <alltraps>
+8010633b:	e9 67 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ed0 <vector49>:
+80106340 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105ed0:	6a 00                	push   $0x0
+80106340:	6a 00                	push   $0x0
   pushl $49
-80105ed2:	6a 31                	push   $0x31
+80106342:	6a 31                	push   $0x31
   jmp alltraps
-80105ed4:	e9 61 f9 ff ff       	jmp    8010583a <alltraps>
+80106344:	e9 5e f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ed9 <vector50>:
+80106349 <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105ed9:	6a 00                	push   $0x0
+80106349:	6a 00                	push   $0x0
   pushl $50
-80105edb:	6a 32                	push   $0x32
+8010634b:	6a 32                	push   $0x32
   jmp alltraps
-80105edd:	e9 58 f9 ff ff       	jmp    8010583a <alltraps>
+8010634d:	e9 55 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ee2 <vector51>:
+80106352 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105ee2:	6a 00                	push   $0x0
+80106352:	6a 00                	push   $0x0
   pushl $51
-80105ee4:	6a 33                	push   $0x33
+80106354:	6a 33                	push   $0x33
   jmp alltraps
-80105ee6:	e9 4f f9 ff ff       	jmp    8010583a <alltraps>
+80106356:	e9 4c f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105eeb <vector52>:
+8010635b <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105eeb:	6a 00                	push   $0x0
+8010635b:	6a 00                	push   $0x0
   pushl $52
-80105eed:	6a 34                	push   $0x34
+8010635d:	6a 34                	push   $0x34
   jmp alltraps
-80105eef:	e9 46 f9 ff ff       	jmp    8010583a <alltraps>
+8010635f:	e9 43 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ef4 <vector53>:
+80106364 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105ef4:	6a 00                	push   $0x0
+80106364:	6a 00                	push   $0x0
   pushl $53
-80105ef6:	6a 35                	push   $0x35
+80106366:	6a 35                	push   $0x35
   jmp alltraps
-80105ef8:	e9 3d f9 ff ff       	jmp    8010583a <alltraps>
+80106368:	e9 3a f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105efd <vector54>:
+8010636d <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105efd:	6a 00                	push   $0x0
+8010636d:	6a 00                	push   $0x0
   pushl $54
-80105eff:	6a 36                	push   $0x36
+8010636f:	6a 36                	push   $0x36
   jmp alltraps
-80105f01:	e9 34 f9 ff ff       	jmp    8010583a <alltraps>
+80106371:	e9 31 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f06 <vector55>:
+80106376 <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f06:	6a 00                	push   $0x0
+80106376:	6a 00                	push   $0x0
   pushl $55
-80105f08:	6a 37                	push   $0x37
+80106378:	6a 37                	push   $0x37
   jmp alltraps
-80105f0a:	e9 2b f9 ff ff       	jmp    8010583a <alltraps>
+8010637a:	e9 28 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f0f <vector56>:
+8010637f <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f0f:	6a 00                	push   $0x0
+8010637f:	6a 00                	push   $0x0
   pushl $56
-80105f11:	6a 38                	push   $0x38
+80106381:	6a 38                	push   $0x38
   jmp alltraps
-80105f13:	e9 22 f9 ff ff       	jmp    8010583a <alltraps>
+80106383:	e9 1f f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f18 <vector57>:
+80106388 <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105f18:	6a 00                	push   $0x0
+80106388:	6a 00                	push   $0x0
   pushl $57
-80105f1a:	6a 39                	push   $0x39
+8010638a:	6a 39                	push   $0x39
   jmp alltraps
-80105f1c:	e9 19 f9 ff ff       	jmp    8010583a <alltraps>
+8010638c:	e9 16 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f21 <vector58>:
+80106391 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105f21:	6a 00                	push   $0x0
+80106391:	6a 00                	push   $0x0
   pushl $58
-80105f23:	6a 3a                	push   $0x3a
+80106393:	6a 3a                	push   $0x3a
   jmp alltraps
-80105f25:	e9 10 f9 ff ff       	jmp    8010583a <alltraps>
+80106395:	e9 0d f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f2a <vector59>:
+8010639a <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105f2a:	6a 00                	push   $0x0
+8010639a:	6a 00                	push   $0x0
   pushl $59
-80105f2c:	6a 3b                	push   $0x3b
+8010639c:	6a 3b                	push   $0x3b
   jmp alltraps
-80105f2e:	e9 07 f9 ff ff       	jmp    8010583a <alltraps>
+8010639e:	e9 04 f9 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f33 <vector60>:
+801063a3 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105f33:	6a 00                	push   $0x0
+801063a3:	6a 00                	push   $0x0
   pushl $60
-80105f35:	6a 3c                	push   $0x3c
+801063a5:	6a 3c                	push   $0x3c
   jmp alltraps
-80105f37:	e9 fe f8 ff ff       	jmp    8010583a <alltraps>
+801063a7:	e9 fb f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f3c <vector61>:
+801063ac <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105f3c:	6a 00                	push   $0x0
+801063ac:	6a 00                	push   $0x0
   pushl $61
-80105f3e:	6a 3d                	push   $0x3d
+801063ae:	6a 3d                	push   $0x3d
   jmp alltraps
-80105f40:	e9 f5 f8 ff ff       	jmp    8010583a <alltraps>
+801063b0:	e9 f2 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f45 <vector62>:
+801063b5 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105f45:	6a 00                	push   $0x0
+801063b5:	6a 00                	push   $0x0
   pushl $62
-80105f47:	6a 3e                	push   $0x3e
+801063b7:	6a 3e                	push   $0x3e
   jmp alltraps
-80105f49:	e9 ec f8 ff ff       	jmp    8010583a <alltraps>
+801063b9:	e9 e9 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f4e <vector63>:
+801063be <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105f4e:	6a 00                	push   $0x0
+801063be:	6a 00                	push   $0x0
   pushl $63
-80105f50:	6a 3f                	push   $0x3f
+801063c0:	6a 3f                	push   $0x3f
   jmp alltraps
-80105f52:	e9 e3 f8 ff ff       	jmp    8010583a <alltraps>
+801063c2:	e9 e0 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f57 <vector64>:
+801063c7 <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105f57:	6a 00                	push   $0x0
+801063c7:	6a 00                	push   $0x0
   pushl $64
-80105f59:	6a 40                	push   $0x40
+801063c9:	6a 40                	push   $0x40
   jmp alltraps
-80105f5b:	e9 da f8 ff ff       	jmp    8010583a <alltraps>
+801063cb:	e9 d7 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f60 <vector65>:
+801063d0 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105f60:	6a 00                	push   $0x0
+801063d0:	6a 00                	push   $0x0
   pushl $65
-80105f62:	6a 41                	push   $0x41
+801063d2:	6a 41                	push   $0x41
   jmp alltraps
-80105f64:	e9 d1 f8 ff ff       	jmp    8010583a <alltraps>
+801063d4:	e9 ce f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f69 <vector66>:
+801063d9 <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105f69:	6a 00                	push   $0x0
+801063d9:	6a 00                	push   $0x0
   pushl $66
-80105f6b:	6a 42                	push   $0x42
+801063db:	6a 42                	push   $0x42
   jmp alltraps
-80105f6d:	e9 c8 f8 ff ff       	jmp    8010583a <alltraps>
+801063dd:	e9 c5 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f72 <vector67>:
+801063e2 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105f72:	6a 00                	push   $0x0
+801063e2:	6a 00                	push   $0x0
   pushl $67
-80105f74:	6a 43                	push   $0x43
+801063e4:	6a 43                	push   $0x43
   jmp alltraps
-80105f76:	e9 bf f8 ff ff       	jmp    8010583a <alltraps>
+801063e6:	e9 bc f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f7b <vector68>:
+801063eb <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105f7b:	6a 00                	push   $0x0
+801063eb:	6a 00                	push   $0x0
   pushl $68
-80105f7d:	6a 44                	push   $0x44
+801063ed:	6a 44                	push   $0x44
   jmp alltraps
-80105f7f:	e9 b6 f8 ff ff       	jmp    8010583a <alltraps>
+801063ef:	e9 b3 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f84 <vector69>:
+801063f4 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105f84:	6a 00                	push   $0x0
+801063f4:	6a 00                	push   $0x0
   pushl $69
-80105f86:	6a 45                	push   $0x45
+801063f6:	6a 45                	push   $0x45
   jmp alltraps
-80105f88:	e9 ad f8 ff ff       	jmp    8010583a <alltraps>
+801063f8:	e9 aa f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f8d <vector70>:
+801063fd <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105f8d:	6a 00                	push   $0x0
+801063fd:	6a 00                	push   $0x0
   pushl $70
-80105f8f:	6a 46                	push   $0x46
+801063ff:	6a 46                	push   $0x46
   jmp alltraps
-80105f91:	e9 a4 f8 ff ff       	jmp    8010583a <alltraps>
+80106401:	e9 a1 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f96 <vector71>:
+80106406 <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105f96:	6a 00                	push   $0x0
+80106406:	6a 00                	push   $0x0
   pushl $71
-80105f98:	6a 47                	push   $0x47
+80106408:	6a 47                	push   $0x47
   jmp alltraps
-80105f9a:	e9 9b f8 ff ff       	jmp    8010583a <alltraps>
+8010640a:	e9 98 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105f9f <vector72>:
+8010640f <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105f9f:	6a 00                	push   $0x0
+8010640f:	6a 00                	push   $0x0
   pushl $72
-80105fa1:	6a 48                	push   $0x48
+80106411:	6a 48                	push   $0x48
   jmp alltraps
-80105fa3:	e9 92 f8 ff ff       	jmp    8010583a <alltraps>
+80106413:	e9 8f f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fa8 <vector73>:
+80106418 <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105fa8:	6a 00                	push   $0x0
+80106418:	6a 00                	push   $0x0
   pushl $73
-80105faa:	6a 49                	push   $0x49
+8010641a:	6a 49                	push   $0x49
   jmp alltraps
-80105fac:	e9 89 f8 ff ff       	jmp    8010583a <alltraps>
+8010641c:	e9 86 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fb1 <vector74>:
+80106421 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105fb1:	6a 00                	push   $0x0
+80106421:	6a 00                	push   $0x0
   pushl $74
-80105fb3:	6a 4a                	push   $0x4a
+80106423:	6a 4a                	push   $0x4a
   jmp alltraps
-80105fb5:	e9 80 f8 ff ff       	jmp    8010583a <alltraps>
+80106425:	e9 7d f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fba <vector75>:
+8010642a <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105fba:	6a 00                	push   $0x0
+8010642a:	6a 00                	push   $0x0
   pushl $75
-80105fbc:	6a 4b                	push   $0x4b
+8010642c:	6a 4b                	push   $0x4b
   jmp alltraps
-80105fbe:	e9 77 f8 ff ff       	jmp    8010583a <alltraps>
+8010642e:	e9 74 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fc3 <vector76>:
+80106433 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105fc3:	6a 00                	push   $0x0
+80106433:	6a 00                	push   $0x0
   pushl $76
-80105fc5:	6a 4c                	push   $0x4c
+80106435:	6a 4c                	push   $0x4c
   jmp alltraps
-80105fc7:	e9 6e f8 ff ff       	jmp    8010583a <alltraps>
+80106437:	e9 6b f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fcc <vector77>:
+8010643c <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105fcc:	6a 00                	push   $0x0
+8010643c:	6a 00                	push   $0x0
   pushl $77
-80105fce:	6a 4d                	push   $0x4d
+8010643e:	6a 4d                	push   $0x4d
   jmp alltraps
-80105fd0:	e9 65 f8 ff ff       	jmp    8010583a <alltraps>
+80106440:	e9 62 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fd5 <vector78>:
+80106445 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105fd5:	6a 00                	push   $0x0
+80106445:	6a 00                	push   $0x0
   pushl $78
-80105fd7:	6a 4e                	push   $0x4e
+80106447:	6a 4e                	push   $0x4e
   jmp alltraps
-80105fd9:	e9 5c f8 ff ff       	jmp    8010583a <alltraps>
+80106449:	e9 59 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fde <vector79>:
+8010644e <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105fde:	6a 00                	push   $0x0
+8010644e:	6a 00                	push   $0x0
   pushl $79
-80105fe0:	6a 4f                	push   $0x4f
+80106450:	6a 4f                	push   $0x4f
   jmp alltraps
-80105fe2:	e9 53 f8 ff ff       	jmp    8010583a <alltraps>
+80106452:	e9 50 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105fe7 <vector80>:
+80106457 <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105fe7:	6a 00                	push   $0x0
+80106457:	6a 00                	push   $0x0
   pushl $80
-80105fe9:	6a 50                	push   $0x50
+80106459:	6a 50                	push   $0x50
   jmp alltraps
-80105feb:	e9 4a f8 ff ff       	jmp    8010583a <alltraps>
+8010645b:	e9 47 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ff0 <vector81>:
+80106460 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105ff0:	6a 00                	push   $0x0
+80106460:	6a 00                	push   $0x0
   pushl $81
-80105ff2:	6a 51                	push   $0x51
+80106462:	6a 51                	push   $0x51
   jmp alltraps
-80105ff4:	e9 41 f8 ff ff       	jmp    8010583a <alltraps>
+80106464:	e9 3e f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80105ff9 <vector82>:
+80106469 <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105ff9:	6a 00                	push   $0x0
+80106469:	6a 00                	push   $0x0
   pushl $82
-80105ffb:	6a 52                	push   $0x52
+8010646b:	6a 52                	push   $0x52
   jmp alltraps
-80105ffd:	e9 38 f8 ff ff       	jmp    8010583a <alltraps>
+8010646d:	e9 35 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80106002 <vector83>:
+80106472 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106002:	6a 00                	push   $0x0
+80106472:	6a 00                	push   $0x0
   pushl $83
-80106004:	6a 53                	push   $0x53
+80106474:	6a 53                	push   $0x53
   jmp alltraps
-80106006:	e9 2f f8 ff ff       	jmp    8010583a <alltraps>
+80106476:	e9 2c f8 ff ff       	jmp    80105ca7 <alltraps>
 
-8010600b <vector84>:
+8010647b <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010600b:	6a 00                	push   $0x0
+8010647b:	6a 00                	push   $0x0
   pushl $84
-8010600d:	6a 54                	push   $0x54
+8010647d:	6a 54                	push   $0x54
   jmp alltraps
-8010600f:	e9 26 f8 ff ff       	jmp    8010583a <alltraps>
+8010647f:	e9 23 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80106014 <vector85>:
+80106484 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106014:	6a 00                	push   $0x0
+80106484:	6a 00                	push   $0x0
   pushl $85
-80106016:	6a 55                	push   $0x55
+80106486:	6a 55                	push   $0x55
   jmp alltraps
-80106018:	e9 1d f8 ff ff       	jmp    8010583a <alltraps>
+80106488:	e9 1a f8 ff ff       	jmp    80105ca7 <alltraps>
 
-8010601d <vector86>:
+8010648d <vector86>:
 .globl vector86
 vector86:
   pushl $0
-8010601d:	6a 00                	push   $0x0
+8010648d:	6a 00                	push   $0x0
   pushl $86
-8010601f:	6a 56                	push   $0x56
+8010648f:	6a 56                	push   $0x56
   jmp alltraps
-80106021:	e9 14 f8 ff ff       	jmp    8010583a <alltraps>
+80106491:	e9 11 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-80106026 <vector87>:
+80106496 <vector87>:
 .globl vector87
 vector87:
   pushl $0
-80106026:	6a 00                	push   $0x0
+80106496:	6a 00                	push   $0x0
   pushl $87
-80106028:	6a 57                	push   $0x57
+80106498:	6a 57                	push   $0x57
   jmp alltraps
-8010602a:	e9 0b f8 ff ff       	jmp    8010583a <alltraps>
+8010649a:	e9 08 f8 ff ff       	jmp    80105ca7 <alltraps>
 
-8010602f <vector88>:
+8010649f <vector88>:
 .globl vector88
 vector88:
   pushl $0
-8010602f:	6a 00                	push   $0x0
+8010649f:	6a 00                	push   $0x0
   pushl $88
-80106031:	6a 58                	push   $0x58
+801064a1:	6a 58                	push   $0x58
   jmp alltraps
-80106033:	e9 02 f8 ff ff       	jmp    8010583a <alltraps>
+801064a3:	e9 ff f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106038 <vector89>:
+801064a8 <vector89>:
 .globl vector89
 vector89:
   pushl $0
-80106038:	6a 00                	push   $0x0
+801064a8:	6a 00                	push   $0x0
   pushl $89
-8010603a:	6a 59                	push   $0x59
+801064aa:	6a 59                	push   $0x59
   jmp alltraps
-8010603c:	e9 f9 f7 ff ff       	jmp    8010583a <alltraps>
+801064ac:	e9 f6 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106041 <vector90>:
+801064b1 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106041:	6a 00                	push   $0x0
+801064b1:	6a 00                	push   $0x0
   pushl $90
-80106043:	6a 5a                	push   $0x5a
+801064b3:	6a 5a                	push   $0x5a
   jmp alltraps
-80106045:	e9 f0 f7 ff ff       	jmp    8010583a <alltraps>
+801064b5:	e9 ed f7 ff ff       	jmp    80105ca7 <alltraps>
 
-8010604a <vector91>:
+801064ba <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010604a:	6a 00                	push   $0x0
+801064ba:	6a 00                	push   $0x0
   pushl $91
-8010604c:	6a 5b                	push   $0x5b
+801064bc:	6a 5b                	push   $0x5b
   jmp alltraps
-8010604e:	e9 e7 f7 ff ff       	jmp    8010583a <alltraps>
+801064be:	e9 e4 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106053 <vector92>:
+801064c3 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106053:	6a 00                	push   $0x0
+801064c3:	6a 00                	push   $0x0
   pushl $92
-80106055:	6a 5c                	push   $0x5c
+801064c5:	6a 5c                	push   $0x5c
   jmp alltraps
-80106057:	e9 de f7 ff ff       	jmp    8010583a <alltraps>
+801064c7:	e9 db f7 ff ff       	jmp    80105ca7 <alltraps>
 
-8010605c <vector93>:
+801064cc <vector93>:
 .globl vector93
 vector93:
   pushl $0
-8010605c:	6a 00                	push   $0x0
+801064cc:	6a 00                	push   $0x0
   pushl $93
-8010605e:	6a 5d                	push   $0x5d
+801064ce:	6a 5d                	push   $0x5d
   jmp alltraps
-80106060:	e9 d5 f7 ff ff       	jmp    8010583a <alltraps>
+801064d0:	e9 d2 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106065 <vector94>:
+801064d5 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106065:	6a 00                	push   $0x0
+801064d5:	6a 00                	push   $0x0
   pushl $94
-80106067:	6a 5e                	push   $0x5e
+801064d7:	6a 5e                	push   $0x5e
   jmp alltraps
-80106069:	e9 cc f7 ff ff       	jmp    8010583a <alltraps>
+801064d9:	e9 c9 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-8010606e <vector95>:
+801064de <vector95>:
 .globl vector95
 vector95:
   pushl $0
-8010606e:	6a 00                	push   $0x0
+801064de:	6a 00                	push   $0x0
   pushl $95
-80106070:	6a 5f                	push   $0x5f
+801064e0:	6a 5f                	push   $0x5f
   jmp alltraps
-80106072:	e9 c3 f7 ff ff       	jmp    8010583a <alltraps>
+801064e2:	e9 c0 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106077 <vector96>:
+801064e7 <vector96>:
 .globl vector96
 vector96:
   pushl $0
-80106077:	6a 00                	push   $0x0
+801064e7:	6a 00                	push   $0x0
   pushl $96
-80106079:	6a 60                	push   $0x60
+801064e9:	6a 60                	push   $0x60
   jmp alltraps
-8010607b:	e9 ba f7 ff ff       	jmp    8010583a <alltraps>
+801064eb:	e9 b7 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106080 <vector97>:
+801064f0 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106080:	6a 00                	push   $0x0
+801064f0:	6a 00                	push   $0x0
   pushl $97
-80106082:	6a 61                	push   $0x61
+801064f2:	6a 61                	push   $0x61
   jmp alltraps
-80106084:	e9 b1 f7 ff ff       	jmp    8010583a <alltraps>
+801064f4:	e9 ae f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106089 <vector98>:
+801064f9 <vector98>:
 .globl vector98
 vector98:
   pushl $0
-80106089:	6a 00                	push   $0x0
+801064f9:	6a 00                	push   $0x0
   pushl $98
-8010608b:	6a 62                	push   $0x62
+801064fb:	6a 62                	push   $0x62
   jmp alltraps
-8010608d:	e9 a8 f7 ff ff       	jmp    8010583a <alltraps>
+801064fd:	e9 a5 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106092 <vector99>:
+80106502 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106092:	6a 00                	push   $0x0
+80106502:	6a 00                	push   $0x0
   pushl $99
-80106094:	6a 63                	push   $0x63
+80106504:	6a 63                	push   $0x63
   jmp alltraps
-80106096:	e9 9f f7 ff ff       	jmp    8010583a <alltraps>
+80106506:	e9 9c f7 ff ff       	jmp    80105ca7 <alltraps>
 
-8010609b <vector100>:
+8010650b <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010609b:	6a 00                	push   $0x0
+8010650b:	6a 00                	push   $0x0
   pushl $100
-8010609d:	6a 64                	push   $0x64
+8010650d:	6a 64                	push   $0x64
   jmp alltraps
-8010609f:	e9 96 f7 ff ff       	jmp    8010583a <alltraps>
+8010650f:	e9 93 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060a4 <vector101>:
+80106514 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801060a4:	6a 00                	push   $0x0
+80106514:	6a 00                	push   $0x0
   pushl $101
-801060a6:	6a 65                	push   $0x65
+80106516:	6a 65                	push   $0x65
   jmp alltraps
-801060a8:	e9 8d f7 ff ff       	jmp    8010583a <alltraps>
+80106518:	e9 8a f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060ad <vector102>:
+8010651d <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801060ad:	6a 00                	push   $0x0
+8010651d:	6a 00                	push   $0x0
   pushl $102
-801060af:	6a 66                	push   $0x66
+8010651f:	6a 66                	push   $0x66
   jmp alltraps
-801060b1:	e9 84 f7 ff ff       	jmp    8010583a <alltraps>
+80106521:	e9 81 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060b6 <vector103>:
+80106526 <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801060b6:	6a 00                	push   $0x0
+80106526:	6a 00                	push   $0x0
   pushl $103
-801060b8:	6a 67                	push   $0x67
+80106528:	6a 67                	push   $0x67
   jmp alltraps
-801060ba:	e9 7b f7 ff ff       	jmp    8010583a <alltraps>
+8010652a:	e9 78 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060bf <vector104>:
+8010652f <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801060bf:	6a 00                	push   $0x0
+8010652f:	6a 00                	push   $0x0
   pushl $104
-801060c1:	6a 68                	push   $0x68
+80106531:	6a 68                	push   $0x68
   jmp alltraps
-801060c3:	e9 72 f7 ff ff       	jmp    8010583a <alltraps>
+80106533:	e9 6f f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060c8 <vector105>:
+80106538 <vector105>:
 .globl vector105
 vector105:
   pushl $0
-801060c8:	6a 00                	push   $0x0
+80106538:	6a 00                	push   $0x0
   pushl $105
-801060ca:	6a 69                	push   $0x69
+8010653a:	6a 69                	push   $0x69
   jmp alltraps
-801060cc:	e9 69 f7 ff ff       	jmp    8010583a <alltraps>
+8010653c:	e9 66 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060d1 <vector106>:
+80106541 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-801060d1:	6a 00                	push   $0x0
+80106541:	6a 00                	push   $0x0
   pushl $106
-801060d3:	6a 6a                	push   $0x6a
+80106543:	6a 6a                	push   $0x6a
   jmp alltraps
-801060d5:	e9 60 f7 ff ff       	jmp    8010583a <alltraps>
+80106545:	e9 5d f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060da <vector107>:
+8010654a <vector107>:
 .globl vector107
 vector107:
   pushl $0
-801060da:	6a 00                	push   $0x0
+8010654a:	6a 00                	push   $0x0
   pushl $107
-801060dc:	6a 6b                	push   $0x6b
+8010654c:	6a 6b                	push   $0x6b
   jmp alltraps
-801060de:	e9 57 f7 ff ff       	jmp    8010583a <alltraps>
+8010654e:	e9 54 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060e3 <vector108>:
+80106553 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-801060e3:	6a 00                	push   $0x0
+80106553:	6a 00                	push   $0x0
   pushl $108
-801060e5:	6a 6c                	push   $0x6c
+80106555:	6a 6c                	push   $0x6c
   jmp alltraps
-801060e7:	e9 4e f7 ff ff       	jmp    8010583a <alltraps>
+80106557:	e9 4b f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060ec <vector109>:
+8010655c <vector109>:
 .globl vector109
 vector109:
   pushl $0
-801060ec:	6a 00                	push   $0x0
+8010655c:	6a 00                	push   $0x0
   pushl $109
-801060ee:	6a 6d                	push   $0x6d
+8010655e:	6a 6d                	push   $0x6d
   jmp alltraps
-801060f0:	e9 45 f7 ff ff       	jmp    8010583a <alltraps>
+80106560:	e9 42 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060f5 <vector110>:
+80106565 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-801060f5:	6a 00                	push   $0x0
+80106565:	6a 00                	push   $0x0
   pushl $110
-801060f7:	6a 6e                	push   $0x6e
+80106567:	6a 6e                	push   $0x6e
   jmp alltraps
-801060f9:	e9 3c f7 ff ff       	jmp    8010583a <alltraps>
+80106569:	e9 39 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-801060fe <vector111>:
+8010656e <vector111>:
 .globl vector111
 vector111:
   pushl $0
-801060fe:	6a 00                	push   $0x0
+8010656e:	6a 00                	push   $0x0
   pushl $111
-80106100:	6a 6f                	push   $0x6f
+80106570:	6a 6f                	push   $0x6f
   jmp alltraps
-80106102:	e9 33 f7 ff ff       	jmp    8010583a <alltraps>
+80106572:	e9 30 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106107 <vector112>:
+80106577 <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80106107:	6a 00                	push   $0x0
+80106577:	6a 00                	push   $0x0
   pushl $112
-80106109:	6a 70                	push   $0x70
+80106579:	6a 70                	push   $0x70
   jmp alltraps
-8010610b:	e9 2a f7 ff ff       	jmp    8010583a <alltraps>
+8010657b:	e9 27 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106110 <vector113>:
+80106580 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106110:	6a 00                	push   $0x0
+80106580:	6a 00                	push   $0x0
   pushl $113
-80106112:	6a 71                	push   $0x71
+80106582:	6a 71                	push   $0x71
   jmp alltraps
-80106114:	e9 21 f7 ff ff       	jmp    8010583a <alltraps>
+80106584:	e9 1e f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106119 <vector114>:
+80106589 <vector114>:
 .globl vector114
 vector114:
   pushl $0
-80106119:	6a 00                	push   $0x0
+80106589:	6a 00                	push   $0x0
   pushl $114
-8010611b:	6a 72                	push   $0x72
+8010658b:	6a 72                	push   $0x72
   jmp alltraps
-8010611d:	e9 18 f7 ff ff       	jmp    8010583a <alltraps>
+8010658d:	e9 15 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106122 <vector115>:
+80106592 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106122:	6a 00                	push   $0x0
+80106592:	6a 00                	push   $0x0
   pushl $115
-80106124:	6a 73                	push   $0x73
+80106594:	6a 73                	push   $0x73
   jmp alltraps
-80106126:	e9 0f f7 ff ff       	jmp    8010583a <alltraps>
+80106596:	e9 0c f7 ff ff       	jmp    80105ca7 <alltraps>
 
-8010612b <vector116>:
+8010659b <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010612b:	6a 00                	push   $0x0
+8010659b:	6a 00                	push   $0x0
   pushl $116
-8010612d:	6a 74                	push   $0x74
+8010659d:	6a 74                	push   $0x74
   jmp alltraps
-8010612f:	e9 06 f7 ff ff       	jmp    8010583a <alltraps>
+8010659f:	e9 03 f7 ff ff       	jmp    80105ca7 <alltraps>
 
-80106134 <vector117>:
+801065a4 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106134:	6a 00                	push   $0x0
+801065a4:	6a 00                	push   $0x0
   pushl $117
-80106136:	6a 75                	push   $0x75
+801065a6:	6a 75                	push   $0x75
   jmp alltraps
-80106138:	e9 fd f6 ff ff       	jmp    8010583a <alltraps>
+801065a8:	e9 fa f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010613d <vector118>:
+801065ad <vector118>:
 .globl vector118
 vector118:
   pushl $0
-8010613d:	6a 00                	push   $0x0
+801065ad:	6a 00                	push   $0x0
   pushl $118
-8010613f:	6a 76                	push   $0x76
+801065af:	6a 76                	push   $0x76
   jmp alltraps
-80106141:	e9 f4 f6 ff ff       	jmp    8010583a <alltraps>
+801065b1:	e9 f1 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106146 <vector119>:
+801065b6 <vector119>:
 .globl vector119
 vector119:
   pushl $0
-80106146:	6a 00                	push   $0x0
+801065b6:	6a 00                	push   $0x0
   pushl $119
-80106148:	6a 77                	push   $0x77
+801065b8:	6a 77                	push   $0x77
   jmp alltraps
-8010614a:	e9 eb f6 ff ff       	jmp    8010583a <alltraps>
+801065ba:	e9 e8 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010614f <vector120>:
+801065bf <vector120>:
 .globl vector120
 vector120:
   pushl $0
-8010614f:	6a 00                	push   $0x0
+801065bf:	6a 00                	push   $0x0
   pushl $120
-80106151:	6a 78                	push   $0x78
+801065c1:	6a 78                	push   $0x78
   jmp alltraps
-80106153:	e9 e2 f6 ff ff       	jmp    8010583a <alltraps>
+801065c3:	e9 df f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106158 <vector121>:
+801065c8 <vector121>:
 .globl vector121
 vector121:
   pushl $0
-80106158:	6a 00                	push   $0x0
+801065c8:	6a 00                	push   $0x0
   pushl $121
-8010615a:	6a 79                	push   $0x79
+801065ca:	6a 79                	push   $0x79
   jmp alltraps
-8010615c:	e9 d9 f6 ff ff       	jmp    8010583a <alltraps>
+801065cc:	e9 d6 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106161 <vector122>:
+801065d1 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106161:	6a 00                	push   $0x0
+801065d1:	6a 00                	push   $0x0
   pushl $122
-80106163:	6a 7a                	push   $0x7a
+801065d3:	6a 7a                	push   $0x7a
   jmp alltraps
-80106165:	e9 d0 f6 ff ff       	jmp    8010583a <alltraps>
+801065d5:	e9 cd f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010616a <vector123>:
+801065da <vector123>:
 .globl vector123
 vector123:
   pushl $0
-8010616a:	6a 00                	push   $0x0
+801065da:	6a 00                	push   $0x0
   pushl $123
-8010616c:	6a 7b                	push   $0x7b
+801065dc:	6a 7b                	push   $0x7b
   jmp alltraps
-8010616e:	e9 c7 f6 ff ff       	jmp    8010583a <alltraps>
+801065de:	e9 c4 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106173 <vector124>:
+801065e3 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106173:	6a 00                	push   $0x0
+801065e3:	6a 00                	push   $0x0
   pushl $124
-80106175:	6a 7c                	push   $0x7c
+801065e5:	6a 7c                	push   $0x7c
   jmp alltraps
-80106177:	e9 be f6 ff ff       	jmp    8010583a <alltraps>
+801065e7:	e9 bb f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010617c <vector125>:
+801065ec <vector125>:
 .globl vector125
 vector125:
   pushl $0
-8010617c:	6a 00                	push   $0x0
+801065ec:	6a 00                	push   $0x0
   pushl $125
-8010617e:	6a 7d                	push   $0x7d
+801065ee:	6a 7d                	push   $0x7d
   jmp alltraps
-80106180:	e9 b5 f6 ff ff       	jmp    8010583a <alltraps>
+801065f0:	e9 b2 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106185 <vector126>:
+801065f5 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106185:	6a 00                	push   $0x0
+801065f5:	6a 00                	push   $0x0
   pushl $126
-80106187:	6a 7e                	push   $0x7e
+801065f7:	6a 7e                	push   $0x7e
   jmp alltraps
-80106189:	e9 ac f6 ff ff       	jmp    8010583a <alltraps>
+801065f9:	e9 a9 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010618e <vector127>:
+801065fe <vector127>:
 .globl vector127
 vector127:
   pushl $0
-8010618e:	6a 00                	push   $0x0
+801065fe:	6a 00                	push   $0x0
   pushl $127
-80106190:	6a 7f                	push   $0x7f
+80106600:	6a 7f                	push   $0x7f
   jmp alltraps
-80106192:	e9 a3 f6 ff ff       	jmp    8010583a <alltraps>
+80106602:	e9 a0 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106197 <vector128>:
+80106607 <vector128>:
 .globl vector128
 vector128:
   pushl $0
-80106197:	6a 00                	push   $0x0
+80106607:	6a 00                	push   $0x0
   pushl $128
-80106199:	68 80 00 00 00       	push   $0x80
+80106609:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-8010619e:	e9 97 f6 ff ff       	jmp    8010583a <alltraps>
+8010660e:	e9 94 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061a3 <vector129>:
+80106613 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801061a3:	6a 00                	push   $0x0
+80106613:	6a 00                	push   $0x0
   pushl $129
-801061a5:	68 81 00 00 00       	push   $0x81
+80106615:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801061aa:	e9 8b f6 ff ff       	jmp    8010583a <alltraps>
+8010661a:	e9 88 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061af <vector130>:
+8010661f <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801061af:	6a 00                	push   $0x0
+8010661f:	6a 00                	push   $0x0
   pushl $130
-801061b1:	68 82 00 00 00       	push   $0x82
+80106621:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801061b6:	e9 7f f6 ff ff       	jmp    8010583a <alltraps>
+80106626:	e9 7c f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061bb <vector131>:
+8010662b <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801061bb:	6a 00                	push   $0x0
+8010662b:	6a 00                	push   $0x0
   pushl $131
-801061bd:	68 83 00 00 00       	push   $0x83
+8010662d:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-801061c2:	e9 73 f6 ff ff       	jmp    8010583a <alltraps>
+80106632:	e9 70 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061c7 <vector132>:
+80106637 <vector132>:
 .globl vector132
 vector132:
   pushl $0
-801061c7:	6a 00                	push   $0x0
+80106637:	6a 00                	push   $0x0
   pushl $132
-801061c9:	68 84 00 00 00       	push   $0x84
+80106639:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-801061ce:	e9 67 f6 ff ff       	jmp    8010583a <alltraps>
+8010663e:	e9 64 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061d3 <vector133>:
+80106643 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-801061d3:	6a 00                	push   $0x0
+80106643:	6a 00                	push   $0x0
   pushl $133
-801061d5:	68 85 00 00 00       	push   $0x85
+80106645:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-801061da:	e9 5b f6 ff ff       	jmp    8010583a <alltraps>
+8010664a:	e9 58 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061df <vector134>:
+8010664f <vector134>:
 .globl vector134
 vector134:
   pushl $0
-801061df:	6a 00                	push   $0x0
+8010664f:	6a 00                	push   $0x0
   pushl $134
-801061e1:	68 86 00 00 00       	push   $0x86
+80106651:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-801061e6:	e9 4f f6 ff ff       	jmp    8010583a <alltraps>
+80106656:	e9 4c f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061eb <vector135>:
+8010665b <vector135>:
 .globl vector135
 vector135:
   pushl $0
-801061eb:	6a 00                	push   $0x0
+8010665b:	6a 00                	push   $0x0
   pushl $135
-801061ed:	68 87 00 00 00       	push   $0x87
+8010665d:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-801061f2:	e9 43 f6 ff ff       	jmp    8010583a <alltraps>
+80106662:	e9 40 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-801061f7 <vector136>:
+80106667 <vector136>:
 .globl vector136
 vector136:
   pushl $0
-801061f7:	6a 00                	push   $0x0
+80106667:	6a 00                	push   $0x0
   pushl $136
-801061f9:	68 88 00 00 00       	push   $0x88
+80106669:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-801061fe:	e9 37 f6 ff ff       	jmp    8010583a <alltraps>
+8010666e:	e9 34 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106203 <vector137>:
+80106673 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106203:	6a 00                	push   $0x0
+80106673:	6a 00                	push   $0x0
   pushl $137
-80106205:	68 89 00 00 00       	push   $0x89
+80106675:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010620a:	e9 2b f6 ff ff       	jmp    8010583a <alltraps>
+8010667a:	e9 28 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010620f <vector138>:
+8010667f <vector138>:
 .globl vector138
 vector138:
   pushl $0
-8010620f:	6a 00                	push   $0x0
+8010667f:	6a 00                	push   $0x0
   pushl $138
-80106211:	68 8a 00 00 00       	push   $0x8a
+80106681:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-80106216:	e9 1f f6 ff ff       	jmp    8010583a <alltraps>
+80106686:	e9 1c f6 ff ff       	jmp    80105ca7 <alltraps>
 
-8010621b <vector139>:
+8010668b <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010621b:	6a 00                	push   $0x0
+8010668b:	6a 00                	push   $0x0
   pushl $139
-8010621d:	68 8b 00 00 00       	push   $0x8b
+8010668d:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106222:	e9 13 f6 ff ff       	jmp    8010583a <alltraps>
+80106692:	e9 10 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106227 <vector140>:
+80106697 <vector140>:
 .globl vector140
 vector140:
   pushl $0
-80106227:	6a 00                	push   $0x0
+80106697:	6a 00                	push   $0x0
   pushl $140
-80106229:	68 8c 00 00 00       	push   $0x8c
+80106699:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-8010622e:	e9 07 f6 ff ff       	jmp    8010583a <alltraps>
+8010669e:	e9 04 f6 ff ff       	jmp    80105ca7 <alltraps>
 
-80106233 <vector141>:
+801066a3 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106233:	6a 00                	push   $0x0
+801066a3:	6a 00                	push   $0x0
   pushl $141
-80106235:	68 8d 00 00 00       	push   $0x8d
+801066a5:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010623a:	e9 fb f5 ff ff       	jmp    8010583a <alltraps>
+801066aa:	e9 f8 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010623f <vector142>:
+801066af <vector142>:
 .globl vector142
 vector142:
   pushl $0
-8010623f:	6a 00                	push   $0x0
+801066af:	6a 00                	push   $0x0
   pushl $142
-80106241:	68 8e 00 00 00       	push   $0x8e
+801066b1:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-80106246:	e9 ef f5 ff ff       	jmp    8010583a <alltraps>
+801066b6:	e9 ec f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010624b <vector143>:
+801066bb <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010624b:	6a 00                	push   $0x0
+801066bb:	6a 00                	push   $0x0
   pushl $143
-8010624d:	68 8f 00 00 00       	push   $0x8f
+801066bd:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106252:	e9 e3 f5 ff ff       	jmp    8010583a <alltraps>
+801066c2:	e9 e0 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-80106257 <vector144>:
+801066c7 <vector144>:
 .globl vector144
 vector144:
   pushl $0
-80106257:	6a 00                	push   $0x0
+801066c7:	6a 00                	push   $0x0
   pushl $144
-80106259:	68 90 00 00 00       	push   $0x90
+801066c9:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-8010625e:	e9 d7 f5 ff ff       	jmp    8010583a <alltraps>
+801066ce:	e9 d4 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-80106263 <vector145>:
+801066d3 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106263:	6a 00                	push   $0x0
+801066d3:	6a 00                	push   $0x0
   pushl $145
-80106265:	68 91 00 00 00       	push   $0x91
+801066d5:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-8010626a:	e9 cb f5 ff ff       	jmp    8010583a <alltraps>
+801066da:	e9 c8 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010626f <vector146>:
+801066df <vector146>:
 .globl vector146
 vector146:
   pushl $0
-8010626f:	6a 00                	push   $0x0
+801066df:	6a 00                	push   $0x0
   pushl $146
-80106271:	68 92 00 00 00       	push   $0x92
+801066e1:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-80106276:	e9 bf f5 ff ff       	jmp    8010583a <alltraps>
+801066e6:	e9 bc f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010627b <vector147>:
+801066eb <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010627b:	6a 00                	push   $0x0
+801066eb:	6a 00                	push   $0x0
   pushl $147
-8010627d:	68 93 00 00 00       	push   $0x93
+801066ed:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106282:	e9 b3 f5 ff ff       	jmp    8010583a <alltraps>
+801066f2:	e9 b0 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-80106287 <vector148>:
+801066f7 <vector148>:
 .globl vector148
 vector148:
   pushl $0
-80106287:	6a 00                	push   $0x0
+801066f7:	6a 00                	push   $0x0
   pushl $148
-80106289:	68 94 00 00 00       	push   $0x94
+801066f9:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-8010628e:	e9 a7 f5 ff ff       	jmp    8010583a <alltraps>
+801066fe:	e9 a4 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-80106293 <vector149>:
+80106703 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106293:	6a 00                	push   $0x0
+80106703:	6a 00                	push   $0x0
   pushl $149
-80106295:	68 95 00 00 00       	push   $0x95
+80106705:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010629a:	e9 9b f5 ff ff       	jmp    8010583a <alltraps>
+8010670a:	e9 98 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010629f <vector150>:
+8010670f <vector150>:
 .globl vector150
 vector150:
   pushl $0
-8010629f:	6a 00                	push   $0x0
+8010670f:	6a 00                	push   $0x0
   pushl $150
-801062a1:	68 96 00 00 00       	push   $0x96
+80106711:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801062a6:	e9 8f f5 ff ff       	jmp    8010583a <alltraps>
+80106716:	e9 8c f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062ab <vector151>:
+8010671b <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801062ab:	6a 00                	push   $0x0
+8010671b:	6a 00                	push   $0x0
   pushl $151
-801062ad:	68 97 00 00 00       	push   $0x97
+8010671d:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801062b2:	e9 83 f5 ff ff       	jmp    8010583a <alltraps>
+80106722:	e9 80 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062b7 <vector152>:
+80106727 <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801062b7:	6a 00                	push   $0x0
+80106727:	6a 00                	push   $0x0
   pushl $152
-801062b9:	68 98 00 00 00       	push   $0x98
+80106729:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801062be:	e9 77 f5 ff ff       	jmp    8010583a <alltraps>
+8010672e:	e9 74 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062c3 <vector153>:
+80106733 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-801062c3:	6a 00                	push   $0x0
+80106733:	6a 00                	push   $0x0
   pushl $153
-801062c5:	68 99 00 00 00       	push   $0x99
+80106735:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-801062ca:	e9 6b f5 ff ff       	jmp    8010583a <alltraps>
+8010673a:	e9 68 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062cf <vector154>:
+8010673f <vector154>:
 .globl vector154
 vector154:
   pushl $0
-801062cf:	6a 00                	push   $0x0
+8010673f:	6a 00                	push   $0x0
   pushl $154
-801062d1:	68 9a 00 00 00       	push   $0x9a
+80106741:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-801062d6:	e9 5f f5 ff ff       	jmp    8010583a <alltraps>
+80106746:	e9 5c f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062db <vector155>:
+8010674b <vector155>:
 .globl vector155
 vector155:
   pushl $0
-801062db:	6a 00                	push   $0x0
+8010674b:	6a 00                	push   $0x0
   pushl $155
-801062dd:	68 9b 00 00 00       	push   $0x9b
+8010674d:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-801062e2:	e9 53 f5 ff ff       	jmp    8010583a <alltraps>
+80106752:	e9 50 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062e7 <vector156>:
+80106757 <vector156>:
 .globl vector156
 vector156:
   pushl $0
-801062e7:	6a 00                	push   $0x0
+80106757:	6a 00                	push   $0x0
   pushl $156
-801062e9:	68 9c 00 00 00       	push   $0x9c
+80106759:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-801062ee:	e9 47 f5 ff ff       	jmp    8010583a <alltraps>
+8010675e:	e9 44 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062f3 <vector157>:
+80106763 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-801062f3:	6a 00                	push   $0x0
+80106763:	6a 00                	push   $0x0
   pushl $157
-801062f5:	68 9d 00 00 00       	push   $0x9d
+80106765:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-801062fa:	e9 3b f5 ff ff       	jmp    8010583a <alltraps>
+8010676a:	e9 38 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-801062ff <vector158>:
+8010676f <vector158>:
 .globl vector158
 vector158:
   pushl $0
-801062ff:	6a 00                	push   $0x0
+8010676f:	6a 00                	push   $0x0
   pushl $158
-80106301:	68 9e 00 00 00       	push   $0x9e
+80106771:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106306:	e9 2f f5 ff ff       	jmp    8010583a <alltraps>
+80106776:	e9 2c f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010630b <vector159>:
+8010677b <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010630b:	6a 00                	push   $0x0
+8010677b:	6a 00                	push   $0x0
   pushl $159
-8010630d:	68 9f 00 00 00       	push   $0x9f
+8010677d:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106312:	e9 23 f5 ff ff       	jmp    8010583a <alltraps>
+80106782:	e9 20 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-80106317 <vector160>:
+80106787 <vector160>:
 .globl vector160
 vector160:
   pushl $0
-80106317:	6a 00                	push   $0x0
+80106787:	6a 00                	push   $0x0
   pushl $160
-80106319:	68 a0 00 00 00       	push   $0xa0
+80106789:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-8010631e:	e9 17 f5 ff ff       	jmp    8010583a <alltraps>
+8010678e:	e9 14 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-80106323 <vector161>:
+80106793 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106323:	6a 00                	push   $0x0
+80106793:	6a 00                	push   $0x0
   pushl $161
-80106325:	68 a1 00 00 00       	push   $0xa1
+80106795:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010632a:	e9 0b f5 ff ff       	jmp    8010583a <alltraps>
+8010679a:	e9 08 f5 ff ff       	jmp    80105ca7 <alltraps>
 
-8010632f <vector162>:
+8010679f <vector162>:
 .globl vector162
 vector162:
   pushl $0
-8010632f:	6a 00                	push   $0x0
+8010679f:	6a 00                	push   $0x0
   pushl $162
-80106331:	68 a2 00 00 00       	push   $0xa2
+801067a1:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-80106336:	e9 ff f4 ff ff       	jmp    8010583a <alltraps>
+801067a6:	e9 fc f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010633b <vector163>:
+801067ab <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010633b:	6a 00                	push   $0x0
+801067ab:	6a 00                	push   $0x0
   pushl $163
-8010633d:	68 a3 00 00 00       	push   $0xa3
+801067ad:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106342:	e9 f3 f4 ff ff       	jmp    8010583a <alltraps>
+801067b2:	e9 f0 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106347 <vector164>:
+801067b7 <vector164>:
 .globl vector164
 vector164:
   pushl $0
-80106347:	6a 00                	push   $0x0
+801067b7:	6a 00                	push   $0x0
   pushl $164
-80106349:	68 a4 00 00 00       	push   $0xa4
+801067b9:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-8010634e:	e9 e7 f4 ff ff       	jmp    8010583a <alltraps>
+801067be:	e9 e4 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106353 <vector165>:
+801067c3 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106353:	6a 00                	push   $0x0
+801067c3:	6a 00                	push   $0x0
   pushl $165
-80106355:	68 a5 00 00 00       	push   $0xa5
+801067c5:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010635a:	e9 db f4 ff ff       	jmp    8010583a <alltraps>
+801067ca:	e9 d8 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010635f <vector166>:
+801067cf <vector166>:
 .globl vector166
 vector166:
   pushl $0
-8010635f:	6a 00                	push   $0x0
+801067cf:	6a 00                	push   $0x0
   pushl $166
-80106361:	68 a6 00 00 00       	push   $0xa6
+801067d1:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-80106366:	e9 cf f4 ff ff       	jmp    8010583a <alltraps>
+801067d6:	e9 cc f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010636b <vector167>:
+801067db <vector167>:
 .globl vector167
 vector167:
   pushl $0
-8010636b:	6a 00                	push   $0x0
+801067db:	6a 00                	push   $0x0
   pushl $167
-8010636d:	68 a7 00 00 00       	push   $0xa7
+801067dd:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106372:	e9 c3 f4 ff ff       	jmp    8010583a <alltraps>
+801067e2:	e9 c0 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106377 <vector168>:
+801067e7 <vector168>:
 .globl vector168
 vector168:
   pushl $0
-80106377:	6a 00                	push   $0x0
+801067e7:	6a 00                	push   $0x0
   pushl $168
-80106379:	68 a8 00 00 00       	push   $0xa8
+801067e9:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-8010637e:	e9 b7 f4 ff ff       	jmp    8010583a <alltraps>
+801067ee:	e9 b4 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106383 <vector169>:
+801067f3 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106383:	6a 00                	push   $0x0
+801067f3:	6a 00                	push   $0x0
   pushl $169
-80106385:	68 a9 00 00 00       	push   $0xa9
+801067f5:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010638a:	e9 ab f4 ff ff       	jmp    8010583a <alltraps>
+801067fa:	e9 a8 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010638f <vector170>:
+801067ff <vector170>:
 .globl vector170
 vector170:
   pushl $0
-8010638f:	6a 00                	push   $0x0
+801067ff:	6a 00                	push   $0x0
   pushl $170
-80106391:	68 aa 00 00 00       	push   $0xaa
+80106801:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-80106396:	e9 9f f4 ff ff       	jmp    8010583a <alltraps>
+80106806:	e9 9c f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010639b <vector171>:
+8010680b <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010639b:	6a 00                	push   $0x0
+8010680b:	6a 00                	push   $0x0
   pushl $171
-8010639d:	68 ab 00 00 00       	push   $0xab
+8010680d:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801063a2:	e9 93 f4 ff ff       	jmp    8010583a <alltraps>
+80106812:	e9 90 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063a7 <vector172>:
+80106817 <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801063a7:	6a 00                	push   $0x0
+80106817:	6a 00                	push   $0x0
   pushl $172
-801063a9:	68 ac 00 00 00       	push   $0xac
+80106819:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801063ae:	e9 87 f4 ff ff       	jmp    8010583a <alltraps>
+8010681e:	e9 84 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063b3 <vector173>:
+80106823 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801063b3:	6a 00                	push   $0x0
+80106823:	6a 00                	push   $0x0
   pushl $173
-801063b5:	68 ad 00 00 00       	push   $0xad
+80106825:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801063ba:	e9 7b f4 ff ff       	jmp    8010583a <alltraps>
+8010682a:	e9 78 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063bf <vector174>:
+8010682f <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801063bf:	6a 00                	push   $0x0
+8010682f:	6a 00                	push   $0x0
   pushl $174
-801063c1:	68 ae 00 00 00       	push   $0xae
+80106831:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-801063c6:	e9 6f f4 ff ff       	jmp    8010583a <alltraps>
+80106836:	e9 6c f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063cb <vector175>:
+8010683b <vector175>:
 .globl vector175
 vector175:
   pushl $0
-801063cb:	6a 00                	push   $0x0
+8010683b:	6a 00                	push   $0x0
   pushl $175
-801063cd:	68 af 00 00 00       	push   $0xaf
+8010683d:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-801063d2:	e9 63 f4 ff ff       	jmp    8010583a <alltraps>
+80106842:	e9 60 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063d7 <vector176>:
+80106847 <vector176>:
 .globl vector176
 vector176:
   pushl $0
-801063d7:	6a 00                	push   $0x0
+80106847:	6a 00                	push   $0x0
   pushl $176
-801063d9:	68 b0 00 00 00       	push   $0xb0
+80106849:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-801063de:	e9 57 f4 ff ff       	jmp    8010583a <alltraps>
+8010684e:	e9 54 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063e3 <vector177>:
+80106853 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-801063e3:	6a 00                	push   $0x0
+80106853:	6a 00                	push   $0x0
   pushl $177
-801063e5:	68 b1 00 00 00       	push   $0xb1
+80106855:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-801063ea:	e9 4b f4 ff ff       	jmp    8010583a <alltraps>
+8010685a:	e9 48 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063ef <vector178>:
+8010685f <vector178>:
 .globl vector178
 vector178:
   pushl $0
-801063ef:	6a 00                	push   $0x0
+8010685f:	6a 00                	push   $0x0
   pushl $178
-801063f1:	68 b2 00 00 00       	push   $0xb2
+80106861:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-801063f6:	e9 3f f4 ff ff       	jmp    8010583a <alltraps>
+80106866:	e9 3c f4 ff ff       	jmp    80105ca7 <alltraps>
 
-801063fb <vector179>:
+8010686b <vector179>:
 .globl vector179
 vector179:
   pushl $0
-801063fb:	6a 00                	push   $0x0
+8010686b:	6a 00                	push   $0x0
   pushl $179
-801063fd:	68 b3 00 00 00       	push   $0xb3
+8010686d:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106402:	e9 33 f4 ff ff       	jmp    8010583a <alltraps>
+80106872:	e9 30 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106407 <vector180>:
+80106877 <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106407:	6a 00                	push   $0x0
+80106877:	6a 00                	push   $0x0
   pushl $180
-80106409:	68 b4 00 00 00       	push   $0xb4
+80106879:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-8010640e:	e9 27 f4 ff ff       	jmp    8010583a <alltraps>
+8010687e:	e9 24 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106413 <vector181>:
+80106883 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106413:	6a 00                	push   $0x0
+80106883:	6a 00                	push   $0x0
   pushl $181
-80106415:	68 b5 00 00 00       	push   $0xb5
+80106885:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010641a:	e9 1b f4 ff ff       	jmp    8010583a <alltraps>
+8010688a:	e9 18 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010641f <vector182>:
+8010688f <vector182>:
 .globl vector182
 vector182:
   pushl $0
-8010641f:	6a 00                	push   $0x0
+8010688f:	6a 00                	push   $0x0
   pushl $182
-80106421:	68 b6 00 00 00       	push   $0xb6
+80106891:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-80106426:	e9 0f f4 ff ff       	jmp    8010583a <alltraps>
+80106896:	e9 0c f4 ff ff       	jmp    80105ca7 <alltraps>
 
-8010642b <vector183>:
+8010689b <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010642b:	6a 00                	push   $0x0
+8010689b:	6a 00                	push   $0x0
   pushl $183
-8010642d:	68 b7 00 00 00       	push   $0xb7
+8010689d:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106432:	e9 03 f4 ff ff       	jmp    8010583a <alltraps>
+801068a2:	e9 00 f4 ff ff       	jmp    80105ca7 <alltraps>
 
-80106437 <vector184>:
+801068a7 <vector184>:
 .globl vector184
 vector184:
   pushl $0
-80106437:	6a 00                	push   $0x0
+801068a7:	6a 00                	push   $0x0
   pushl $184
-80106439:	68 b8 00 00 00       	push   $0xb8
+801068a9:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-8010643e:	e9 f7 f3 ff ff       	jmp    8010583a <alltraps>
+801068ae:	e9 f4 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106443 <vector185>:
+801068b3 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106443:	6a 00                	push   $0x0
+801068b3:	6a 00                	push   $0x0
   pushl $185
-80106445:	68 b9 00 00 00       	push   $0xb9
+801068b5:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010644a:	e9 eb f3 ff ff       	jmp    8010583a <alltraps>
+801068ba:	e9 e8 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-8010644f <vector186>:
+801068bf <vector186>:
 .globl vector186
 vector186:
   pushl $0
-8010644f:	6a 00                	push   $0x0
+801068bf:	6a 00                	push   $0x0
   pushl $186
-80106451:	68 ba 00 00 00       	push   $0xba
+801068c1:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-80106456:	e9 df f3 ff ff       	jmp    8010583a <alltraps>
+801068c6:	e9 dc f3 ff ff       	jmp    80105ca7 <alltraps>
 
-8010645b <vector187>:
+801068cb <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010645b:	6a 00                	push   $0x0
+801068cb:	6a 00                	push   $0x0
   pushl $187
-8010645d:	68 bb 00 00 00       	push   $0xbb
+801068cd:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106462:	e9 d3 f3 ff ff       	jmp    8010583a <alltraps>
+801068d2:	e9 d0 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106467 <vector188>:
+801068d7 <vector188>:
 .globl vector188
 vector188:
   pushl $0
-80106467:	6a 00                	push   $0x0
+801068d7:	6a 00                	push   $0x0
   pushl $188
-80106469:	68 bc 00 00 00       	push   $0xbc
+801068d9:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-8010646e:	e9 c7 f3 ff ff       	jmp    8010583a <alltraps>
+801068de:	e9 c4 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106473 <vector189>:
+801068e3 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106473:	6a 00                	push   $0x0
+801068e3:	6a 00                	push   $0x0
   pushl $189
-80106475:	68 bd 00 00 00       	push   $0xbd
+801068e5:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010647a:	e9 bb f3 ff ff       	jmp    8010583a <alltraps>
+801068ea:	e9 b8 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-8010647f <vector190>:
+801068ef <vector190>:
 .globl vector190
 vector190:
   pushl $0
-8010647f:	6a 00                	push   $0x0
+801068ef:	6a 00                	push   $0x0
   pushl $190
-80106481:	68 be 00 00 00       	push   $0xbe
+801068f1:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-80106486:	e9 af f3 ff ff       	jmp    8010583a <alltraps>
+801068f6:	e9 ac f3 ff ff       	jmp    80105ca7 <alltraps>
 
-8010648b <vector191>:
+801068fb <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010648b:	6a 00                	push   $0x0
+801068fb:	6a 00                	push   $0x0
   pushl $191
-8010648d:	68 bf 00 00 00       	push   $0xbf
+801068fd:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106492:	e9 a3 f3 ff ff       	jmp    8010583a <alltraps>
+80106902:	e9 a0 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106497 <vector192>:
+80106907 <vector192>:
 .globl vector192
 vector192:
   pushl $0
-80106497:	6a 00                	push   $0x0
+80106907:	6a 00                	push   $0x0
   pushl $192
-80106499:	68 c0 00 00 00       	push   $0xc0
+80106909:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-8010649e:	e9 97 f3 ff ff       	jmp    8010583a <alltraps>
+8010690e:	e9 94 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064a3 <vector193>:
+80106913 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801064a3:	6a 00                	push   $0x0
+80106913:	6a 00                	push   $0x0
   pushl $193
-801064a5:	68 c1 00 00 00       	push   $0xc1
+80106915:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801064aa:	e9 8b f3 ff ff       	jmp    8010583a <alltraps>
+8010691a:	e9 88 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064af <vector194>:
+8010691f <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801064af:	6a 00                	push   $0x0
+8010691f:	6a 00                	push   $0x0
   pushl $194
-801064b1:	68 c2 00 00 00       	push   $0xc2
+80106921:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801064b6:	e9 7f f3 ff ff       	jmp    8010583a <alltraps>
+80106926:	e9 7c f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064bb <vector195>:
+8010692b <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801064bb:	6a 00                	push   $0x0
+8010692b:	6a 00                	push   $0x0
   pushl $195
-801064bd:	68 c3 00 00 00       	push   $0xc3
+8010692d:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-801064c2:	e9 73 f3 ff ff       	jmp    8010583a <alltraps>
+80106932:	e9 70 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064c7 <vector196>:
+80106937 <vector196>:
 .globl vector196
 vector196:
   pushl $0
-801064c7:	6a 00                	push   $0x0
+80106937:	6a 00                	push   $0x0
   pushl $196
-801064c9:	68 c4 00 00 00       	push   $0xc4
+80106939:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-801064ce:	e9 67 f3 ff ff       	jmp    8010583a <alltraps>
+8010693e:	e9 64 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064d3 <vector197>:
+80106943 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-801064d3:	6a 00                	push   $0x0
+80106943:	6a 00                	push   $0x0
   pushl $197
-801064d5:	68 c5 00 00 00       	push   $0xc5
+80106945:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-801064da:	e9 5b f3 ff ff       	jmp    8010583a <alltraps>
+8010694a:	e9 58 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064df <vector198>:
+8010694f <vector198>:
 .globl vector198
 vector198:
   pushl $0
-801064df:	6a 00                	push   $0x0
+8010694f:	6a 00                	push   $0x0
   pushl $198
-801064e1:	68 c6 00 00 00       	push   $0xc6
+80106951:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-801064e6:	e9 4f f3 ff ff       	jmp    8010583a <alltraps>
+80106956:	e9 4c f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064eb <vector199>:
+8010695b <vector199>:
 .globl vector199
 vector199:
   pushl $0
-801064eb:	6a 00                	push   $0x0
+8010695b:	6a 00                	push   $0x0
   pushl $199
-801064ed:	68 c7 00 00 00       	push   $0xc7
+8010695d:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-801064f2:	e9 43 f3 ff ff       	jmp    8010583a <alltraps>
+80106962:	e9 40 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-801064f7 <vector200>:
+80106967 <vector200>:
 .globl vector200
 vector200:
   pushl $0
-801064f7:	6a 00                	push   $0x0
+80106967:	6a 00                	push   $0x0
   pushl $200
-801064f9:	68 c8 00 00 00       	push   $0xc8
+80106969:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-801064fe:	e9 37 f3 ff ff       	jmp    8010583a <alltraps>
+8010696e:	e9 34 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106503 <vector201>:
+80106973 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106503:	6a 00                	push   $0x0
+80106973:	6a 00                	push   $0x0
   pushl $201
-80106505:	68 c9 00 00 00       	push   $0xc9
+80106975:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010650a:	e9 2b f3 ff ff       	jmp    8010583a <alltraps>
+8010697a:	e9 28 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-8010650f <vector202>:
+8010697f <vector202>:
 .globl vector202
 vector202:
   pushl $0
-8010650f:	6a 00                	push   $0x0
+8010697f:	6a 00                	push   $0x0
   pushl $202
-80106511:	68 ca 00 00 00       	push   $0xca
+80106981:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-80106516:	e9 1f f3 ff ff       	jmp    8010583a <alltraps>
+80106986:	e9 1c f3 ff ff       	jmp    80105ca7 <alltraps>
 
-8010651b <vector203>:
+8010698b <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010651b:	6a 00                	push   $0x0
+8010698b:	6a 00                	push   $0x0
   pushl $203
-8010651d:	68 cb 00 00 00       	push   $0xcb
+8010698d:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106522:	e9 13 f3 ff ff       	jmp    8010583a <alltraps>
+80106992:	e9 10 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106527 <vector204>:
+80106997 <vector204>:
 .globl vector204
 vector204:
   pushl $0
-80106527:	6a 00                	push   $0x0
+80106997:	6a 00                	push   $0x0
   pushl $204
-80106529:	68 cc 00 00 00       	push   $0xcc
+80106999:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-8010652e:	e9 07 f3 ff ff       	jmp    8010583a <alltraps>
+8010699e:	e9 04 f3 ff ff       	jmp    80105ca7 <alltraps>
 
-80106533 <vector205>:
+801069a3 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106533:	6a 00                	push   $0x0
+801069a3:	6a 00                	push   $0x0
   pushl $205
-80106535:	68 cd 00 00 00       	push   $0xcd
+801069a5:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010653a:	e9 fb f2 ff ff       	jmp    8010583a <alltraps>
+801069aa:	e9 f8 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010653f <vector206>:
+801069af <vector206>:
 .globl vector206
 vector206:
   pushl $0
-8010653f:	6a 00                	push   $0x0
+801069af:	6a 00                	push   $0x0
   pushl $206
-80106541:	68 ce 00 00 00       	push   $0xce
+801069b1:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-80106546:	e9 ef f2 ff ff       	jmp    8010583a <alltraps>
+801069b6:	e9 ec f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010654b <vector207>:
+801069bb <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010654b:	6a 00                	push   $0x0
+801069bb:	6a 00                	push   $0x0
   pushl $207
-8010654d:	68 cf 00 00 00       	push   $0xcf
+801069bd:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106552:	e9 e3 f2 ff ff       	jmp    8010583a <alltraps>
+801069c2:	e9 e0 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-80106557 <vector208>:
+801069c7 <vector208>:
 .globl vector208
 vector208:
   pushl $0
-80106557:	6a 00                	push   $0x0
+801069c7:	6a 00                	push   $0x0
   pushl $208
-80106559:	68 d0 00 00 00       	push   $0xd0
+801069c9:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-8010655e:	e9 d7 f2 ff ff       	jmp    8010583a <alltraps>
+801069ce:	e9 d4 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-80106563 <vector209>:
+801069d3 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80106563:	6a 00                	push   $0x0
+801069d3:	6a 00                	push   $0x0
   pushl $209
-80106565:	68 d1 00 00 00       	push   $0xd1
+801069d5:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010656a:	e9 cb f2 ff ff       	jmp    8010583a <alltraps>
+801069da:	e9 c8 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010656f <vector210>:
+801069df <vector210>:
 .globl vector210
 vector210:
   pushl $0
-8010656f:	6a 00                	push   $0x0
+801069df:	6a 00                	push   $0x0
   pushl $210
-80106571:	68 d2 00 00 00       	push   $0xd2
+801069e1:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-80106576:	e9 bf f2 ff ff       	jmp    8010583a <alltraps>
+801069e6:	e9 bc f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010657b <vector211>:
+801069eb <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010657b:	6a 00                	push   $0x0
+801069eb:	6a 00                	push   $0x0
   pushl $211
-8010657d:	68 d3 00 00 00       	push   $0xd3
+801069ed:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106582:	e9 b3 f2 ff ff       	jmp    8010583a <alltraps>
+801069f2:	e9 b0 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-80106587 <vector212>:
+801069f7 <vector212>:
 .globl vector212
 vector212:
   pushl $0
-80106587:	6a 00                	push   $0x0
+801069f7:	6a 00                	push   $0x0
   pushl $212
-80106589:	68 d4 00 00 00       	push   $0xd4
+801069f9:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-8010658e:	e9 a7 f2 ff ff       	jmp    8010583a <alltraps>
+801069fe:	e9 a4 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-80106593 <vector213>:
+80106a03 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106593:	6a 00                	push   $0x0
+80106a03:	6a 00                	push   $0x0
   pushl $213
-80106595:	68 d5 00 00 00       	push   $0xd5
+80106a05:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010659a:	e9 9b f2 ff ff       	jmp    8010583a <alltraps>
+80106a0a:	e9 98 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010659f <vector214>:
+80106a0f <vector214>:
 .globl vector214
 vector214:
   pushl $0
-8010659f:	6a 00                	push   $0x0
+80106a0f:	6a 00                	push   $0x0
   pushl $214
-801065a1:	68 d6 00 00 00       	push   $0xd6
+80106a11:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801065a6:	e9 8f f2 ff ff       	jmp    8010583a <alltraps>
+80106a16:	e9 8c f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065ab <vector215>:
+80106a1b <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801065ab:	6a 00                	push   $0x0
+80106a1b:	6a 00                	push   $0x0
   pushl $215
-801065ad:	68 d7 00 00 00       	push   $0xd7
+80106a1d:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801065b2:	e9 83 f2 ff ff       	jmp    8010583a <alltraps>
+80106a22:	e9 80 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065b7 <vector216>:
+80106a27 <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801065b7:	6a 00                	push   $0x0
+80106a27:	6a 00                	push   $0x0
   pushl $216
-801065b9:	68 d8 00 00 00       	push   $0xd8
+80106a29:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801065be:	e9 77 f2 ff ff       	jmp    8010583a <alltraps>
+80106a2e:	e9 74 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065c3 <vector217>:
+80106a33 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-801065c3:	6a 00                	push   $0x0
+80106a33:	6a 00                	push   $0x0
   pushl $217
-801065c5:	68 d9 00 00 00       	push   $0xd9
+80106a35:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-801065ca:	e9 6b f2 ff ff       	jmp    8010583a <alltraps>
+80106a3a:	e9 68 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065cf <vector218>:
+80106a3f <vector218>:
 .globl vector218
 vector218:
   pushl $0
-801065cf:	6a 00                	push   $0x0
+80106a3f:	6a 00                	push   $0x0
   pushl $218
-801065d1:	68 da 00 00 00       	push   $0xda
+80106a41:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-801065d6:	e9 5f f2 ff ff       	jmp    8010583a <alltraps>
+80106a46:	e9 5c f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065db <vector219>:
+80106a4b <vector219>:
 .globl vector219
 vector219:
   pushl $0
-801065db:	6a 00                	push   $0x0
+80106a4b:	6a 00                	push   $0x0
   pushl $219
-801065dd:	68 db 00 00 00       	push   $0xdb
+80106a4d:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-801065e2:	e9 53 f2 ff ff       	jmp    8010583a <alltraps>
+80106a52:	e9 50 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065e7 <vector220>:
+80106a57 <vector220>:
 .globl vector220
 vector220:
   pushl $0
-801065e7:	6a 00                	push   $0x0
+80106a57:	6a 00                	push   $0x0
   pushl $220
-801065e9:	68 dc 00 00 00       	push   $0xdc
+80106a59:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-801065ee:	e9 47 f2 ff ff       	jmp    8010583a <alltraps>
+80106a5e:	e9 44 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065f3 <vector221>:
+80106a63 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-801065f3:	6a 00                	push   $0x0
+80106a63:	6a 00                	push   $0x0
   pushl $221
-801065f5:	68 dd 00 00 00       	push   $0xdd
+80106a65:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-801065fa:	e9 3b f2 ff ff       	jmp    8010583a <alltraps>
+80106a6a:	e9 38 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-801065ff <vector222>:
+80106a6f <vector222>:
 .globl vector222
 vector222:
   pushl $0
-801065ff:	6a 00                	push   $0x0
+80106a6f:	6a 00                	push   $0x0
   pushl $222
-80106601:	68 de 00 00 00       	push   $0xde
+80106a71:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-80106606:	e9 2f f2 ff ff       	jmp    8010583a <alltraps>
+80106a76:	e9 2c f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010660b <vector223>:
+80106a7b <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010660b:	6a 00                	push   $0x0
+80106a7b:	6a 00                	push   $0x0
   pushl $223
-8010660d:	68 df 00 00 00       	push   $0xdf
+80106a7d:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106612:	e9 23 f2 ff ff       	jmp    8010583a <alltraps>
+80106a82:	e9 20 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-80106617 <vector224>:
+80106a87 <vector224>:
 .globl vector224
 vector224:
   pushl $0
-80106617:	6a 00                	push   $0x0
+80106a87:	6a 00                	push   $0x0
   pushl $224
-80106619:	68 e0 00 00 00       	push   $0xe0
+80106a89:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-8010661e:	e9 17 f2 ff ff       	jmp    8010583a <alltraps>
+80106a8e:	e9 14 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-80106623 <vector225>:
+80106a93 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106623:	6a 00                	push   $0x0
+80106a93:	6a 00                	push   $0x0
   pushl $225
-80106625:	68 e1 00 00 00       	push   $0xe1
+80106a95:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010662a:	e9 0b f2 ff ff       	jmp    8010583a <alltraps>
+80106a9a:	e9 08 f2 ff ff       	jmp    80105ca7 <alltraps>
 
-8010662f <vector226>:
+80106a9f <vector226>:
 .globl vector226
 vector226:
   pushl $0
-8010662f:	6a 00                	push   $0x0
+80106a9f:	6a 00                	push   $0x0
   pushl $226
-80106631:	68 e2 00 00 00       	push   $0xe2
+80106aa1:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-80106636:	e9 ff f1 ff ff       	jmp    8010583a <alltraps>
+80106aa6:	e9 fc f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010663b <vector227>:
+80106aab <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010663b:	6a 00                	push   $0x0
+80106aab:	6a 00                	push   $0x0
   pushl $227
-8010663d:	68 e3 00 00 00       	push   $0xe3
+80106aad:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106642:	e9 f3 f1 ff ff       	jmp    8010583a <alltraps>
+80106ab2:	e9 f0 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106647 <vector228>:
+80106ab7 <vector228>:
 .globl vector228
 vector228:
   pushl $0
-80106647:	6a 00                	push   $0x0
+80106ab7:	6a 00                	push   $0x0
   pushl $228
-80106649:	68 e4 00 00 00       	push   $0xe4
+80106ab9:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-8010664e:	e9 e7 f1 ff ff       	jmp    8010583a <alltraps>
+80106abe:	e9 e4 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106653 <vector229>:
+80106ac3 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106653:	6a 00                	push   $0x0
+80106ac3:	6a 00                	push   $0x0
   pushl $229
-80106655:	68 e5 00 00 00       	push   $0xe5
+80106ac5:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010665a:	e9 db f1 ff ff       	jmp    8010583a <alltraps>
+80106aca:	e9 d8 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010665f <vector230>:
+80106acf <vector230>:
 .globl vector230
 vector230:
   pushl $0
-8010665f:	6a 00                	push   $0x0
+80106acf:	6a 00                	push   $0x0
   pushl $230
-80106661:	68 e6 00 00 00       	push   $0xe6
+80106ad1:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-80106666:	e9 cf f1 ff ff       	jmp    8010583a <alltraps>
+80106ad6:	e9 cc f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010666b <vector231>:
+80106adb <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010666b:	6a 00                	push   $0x0
+80106adb:	6a 00                	push   $0x0
   pushl $231
-8010666d:	68 e7 00 00 00       	push   $0xe7
+80106add:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106672:	e9 c3 f1 ff ff       	jmp    8010583a <alltraps>
+80106ae2:	e9 c0 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106677 <vector232>:
+80106ae7 <vector232>:
 .globl vector232
 vector232:
   pushl $0
-80106677:	6a 00                	push   $0x0
+80106ae7:	6a 00                	push   $0x0
   pushl $232
-80106679:	68 e8 00 00 00       	push   $0xe8
+80106ae9:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-8010667e:	e9 b7 f1 ff ff       	jmp    8010583a <alltraps>
+80106aee:	e9 b4 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106683 <vector233>:
+80106af3 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106683:	6a 00                	push   $0x0
+80106af3:	6a 00                	push   $0x0
   pushl $233
-80106685:	68 e9 00 00 00       	push   $0xe9
+80106af5:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010668a:	e9 ab f1 ff ff       	jmp    8010583a <alltraps>
+80106afa:	e9 a8 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010668f <vector234>:
+80106aff <vector234>:
 .globl vector234
 vector234:
   pushl $0
-8010668f:	6a 00                	push   $0x0
+80106aff:	6a 00                	push   $0x0
   pushl $234
-80106691:	68 ea 00 00 00       	push   $0xea
+80106b01:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-80106696:	e9 9f f1 ff ff       	jmp    8010583a <alltraps>
+80106b06:	e9 9c f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010669b <vector235>:
+80106b0b <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010669b:	6a 00                	push   $0x0
+80106b0b:	6a 00                	push   $0x0
   pushl $235
-8010669d:	68 eb 00 00 00       	push   $0xeb
+80106b0d:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801066a2:	e9 93 f1 ff ff       	jmp    8010583a <alltraps>
+80106b12:	e9 90 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066a7 <vector236>:
+80106b17 <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801066a7:	6a 00                	push   $0x0
+80106b17:	6a 00                	push   $0x0
   pushl $236
-801066a9:	68 ec 00 00 00       	push   $0xec
+80106b19:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801066ae:	e9 87 f1 ff ff       	jmp    8010583a <alltraps>
+80106b1e:	e9 84 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066b3 <vector237>:
+80106b23 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801066b3:	6a 00                	push   $0x0
+80106b23:	6a 00                	push   $0x0
   pushl $237
-801066b5:	68 ed 00 00 00       	push   $0xed
+80106b25:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801066ba:	e9 7b f1 ff ff       	jmp    8010583a <alltraps>
+80106b2a:	e9 78 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066bf <vector238>:
+80106b2f <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801066bf:	6a 00                	push   $0x0
+80106b2f:	6a 00                	push   $0x0
   pushl $238
-801066c1:	68 ee 00 00 00       	push   $0xee
+80106b31:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-801066c6:	e9 6f f1 ff ff       	jmp    8010583a <alltraps>
+80106b36:	e9 6c f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066cb <vector239>:
+80106b3b <vector239>:
 .globl vector239
 vector239:
   pushl $0
-801066cb:	6a 00                	push   $0x0
+80106b3b:	6a 00                	push   $0x0
   pushl $239
-801066cd:	68 ef 00 00 00       	push   $0xef
+80106b3d:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-801066d2:	e9 63 f1 ff ff       	jmp    8010583a <alltraps>
+80106b42:	e9 60 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066d7 <vector240>:
+80106b47 <vector240>:
 .globl vector240
 vector240:
   pushl $0
-801066d7:	6a 00                	push   $0x0
+80106b47:	6a 00                	push   $0x0
   pushl $240
-801066d9:	68 f0 00 00 00       	push   $0xf0
+80106b49:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-801066de:	e9 57 f1 ff ff       	jmp    8010583a <alltraps>
+80106b4e:	e9 54 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066e3 <vector241>:
+80106b53 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-801066e3:	6a 00                	push   $0x0
+80106b53:	6a 00                	push   $0x0
   pushl $241
-801066e5:	68 f1 00 00 00       	push   $0xf1
+80106b55:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-801066ea:	e9 4b f1 ff ff       	jmp    8010583a <alltraps>
+80106b5a:	e9 48 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066ef <vector242>:
+80106b5f <vector242>:
 .globl vector242
 vector242:
   pushl $0
-801066ef:	6a 00                	push   $0x0
+80106b5f:	6a 00                	push   $0x0
   pushl $242
-801066f1:	68 f2 00 00 00       	push   $0xf2
+80106b61:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-801066f6:	e9 3f f1 ff ff       	jmp    8010583a <alltraps>
+80106b66:	e9 3c f1 ff ff       	jmp    80105ca7 <alltraps>
 
-801066fb <vector243>:
+80106b6b <vector243>:
 .globl vector243
 vector243:
   pushl $0
-801066fb:	6a 00                	push   $0x0
+80106b6b:	6a 00                	push   $0x0
   pushl $243
-801066fd:	68 f3 00 00 00       	push   $0xf3
+80106b6d:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106702:	e9 33 f1 ff ff       	jmp    8010583a <alltraps>
+80106b72:	e9 30 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106707 <vector244>:
+80106b77 <vector244>:
 .globl vector244
 vector244:
   pushl $0
-80106707:	6a 00                	push   $0x0
+80106b77:	6a 00                	push   $0x0
   pushl $244
-80106709:	68 f4 00 00 00       	push   $0xf4
+80106b79:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-8010670e:	e9 27 f1 ff ff       	jmp    8010583a <alltraps>
+80106b7e:	e9 24 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106713 <vector245>:
+80106b83 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106713:	6a 00                	push   $0x0
+80106b83:	6a 00                	push   $0x0
   pushl $245
-80106715:	68 f5 00 00 00       	push   $0xf5
+80106b85:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010671a:	e9 1b f1 ff ff       	jmp    8010583a <alltraps>
+80106b8a:	e9 18 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010671f <vector246>:
+80106b8f <vector246>:
 .globl vector246
 vector246:
   pushl $0
-8010671f:	6a 00                	push   $0x0
+80106b8f:	6a 00                	push   $0x0
   pushl $246
-80106721:	68 f6 00 00 00       	push   $0xf6
+80106b91:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-80106726:	e9 0f f1 ff ff       	jmp    8010583a <alltraps>
+80106b96:	e9 0c f1 ff ff       	jmp    80105ca7 <alltraps>
 
-8010672b <vector247>:
+80106b9b <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010672b:	6a 00                	push   $0x0
+80106b9b:	6a 00                	push   $0x0
   pushl $247
-8010672d:	68 f7 00 00 00       	push   $0xf7
+80106b9d:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106732:	e9 03 f1 ff ff       	jmp    8010583a <alltraps>
+80106ba2:	e9 00 f1 ff ff       	jmp    80105ca7 <alltraps>
 
-80106737 <vector248>:
+80106ba7 <vector248>:
 .globl vector248
 vector248:
   pushl $0
-80106737:	6a 00                	push   $0x0
+80106ba7:	6a 00                	push   $0x0
   pushl $248
-80106739:	68 f8 00 00 00       	push   $0xf8
+80106ba9:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-8010673e:	e9 f7 f0 ff ff       	jmp    8010583a <alltraps>
+80106bae:	e9 f4 f0 ff ff       	jmp    80105ca7 <alltraps>
 
-80106743 <vector249>:
+80106bb3 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106743:	6a 00                	push   $0x0
+80106bb3:	6a 00                	push   $0x0
   pushl $249
-80106745:	68 f9 00 00 00       	push   $0xf9
+80106bb5:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010674a:	e9 eb f0 ff ff       	jmp    8010583a <alltraps>
+80106bba:	e9 e8 f0 ff ff       	jmp    80105ca7 <alltraps>
 
-8010674f <vector250>:
+80106bbf <vector250>:
 .globl vector250
 vector250:
   pushl $0
-8010674f:	6a 00                	push   $0x0
+80106bbf:	6a 00                	push   $0x0
   pushl $250
-80106751:	68 fa 00 00 00       	push   $0xfa
+80106bc1:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-80106756:	e9 df f0 ff ff       	jmp    8010583a <alltraps>
+80106bc6:	e9 dc f0 ff ff       	jmp    80105ca7 <alltraps>
 
-8010675b <vector251>:
+80106bcb <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010675b:	6a 00                	push   $0x0
+80106bcb:	6a 00                	push   $0x0
   pushl $251
-8010675d:	68 fb 00 00 00       	push   $0xfb
+80106bcd:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106762:	e9 d3 f0 ff ff       	jmp    8010583a <alltraps>
+80106bd2:	e9 d0 f0 ff ff       	jmp    80105ca7 <alltraps>
 
-80106767 <vector252>:
+80106bd7 <vector252>:
 .globl vector252
 vector252:
   pushl $0
-80106767:	6a 00                	push   $0x0
+80106bd7:	6a 00                	push   $0x0
   pushl $252
-80106769:	68 fc 00 00 00       	push   $0xfc
+80106bd9:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-8010676e:	e9 c7 f0 ff ff       	jmp    8010583a <alltraps>
+80106bde:	e9 c4 f0 ff ff       	jmp    80105ca7 <alltraps>
 
-80106773 <vector253>:
+80106be3 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106773:	6a 00                	push   $0x0
+80106be3:	6a 00                	push   $0x0
   pushl $253
-80106775:	68 fd 00 00 00       	push   $0xfd
+80106be5:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010677a:	e9 bb f0 ff ff       	jmp    8010583a <alltraps>
+80106bea:	e9 b8 f0 ff ff       	jmp    80105ca7 <alltraps>
 
-8010677f <vector254>:
+80106bef <vector254>:
 .globl vector254
 vector254:
   pushl $0
-8010677f:	6a 00                	push   $0x0
+80106bef:	6a 00                	push   $0x0
   pushl $254
-80106781:	68 fe 00 00 00       	push   $0xfe
+80106bf1:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-80106786:	e9 af f0 ff ff       	jmp    8010583a <alltraps>
+80106bf6:	e9 ac f0 ff ff       	jmp    80105ca7 <alltraps>
 
-8010678b <vector255>:
+80106bfb <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010678b:	6a 00                	push   $0x0
+80106bfb:	6a 00                	push   $0x0
   pushl $255
-8010678d:	68 ff 00 00 00       	push   $0xff
+80106bfd:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106792:	e9 a3 f0 ff ff       	jmp    8010583a <alltraps>
-80106797:	66 90                	xchg   %ax,%ax
-80106799:	66 90                	xchg   %ax,%ax
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80106c02:	e9 a0 f0 ff ff       	jmp    80105ca7 <alltraps>
+80106c07:	66 90                	xchg   %ax,%ax
+80106c09:	66 90                	xchg   %ax,%ax
+80106c0b:	66 90                	xchg   %ax,%ax
+80106c0d:	66 90                	xchg   %ax,%ax
+80106c0f:	90                   	nop
 
-801067a0 <deallocuvm.part.0>:
+80106c10 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	53                   	push   %ebx
+80106c10:	55                   	push   %ebp
+80106c11:	89 e5                	mov    %esp,%ebp
+80106c13:	57                   	push   %edi
+80106c14:	56                   	push   %esi
+80106c15:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801067a6:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
-801067ac:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106c16:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+80106c1c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801067b2:	83 ec 1c             	sub    $0x1c,%esp
-801067b5:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80106c22:	83 ec 1c             	sub    $0x1c,%esp
+80106c25:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801067b8:	39 d3                	cmp    %edx,%ebx
-801067ba:	73 49                	jae    80106805 <deallocuvm.part.0+0x65>
-801067bc:	89 c7                	mov    %eax,%edi
-801067be:	eb 0c                	jmp    801067cc <deallocuvm.part.0+0x2c>
+80106c28:	39 d3                	cmp    %edx,%ebx
+80106c2a:	73 49                	jae    80106c75 <deallocuvm.part.0+0x65>
+80106c2c:	89 c7                	mov    %eax,%edi
+80106c2e:	eb 0c                	jmp    80106c3c <deallocuvm.part.0+0x2c>
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-801067c0:	83 c0 01             	add    $0x1,%eax
-801067c3:	c1 e0 16             	shl    $0x16,%eax
-801067c6:	89 c3                	mov    %eax,%ebx
+80106c30:	83 c0 01             	add    $0x1,%eax
+80106c33:	c1 e0 16             	shl    $0x16,%eax
+80106c36:	89 c3                	mov    %eax,%ebx
   for(; a  < oldsz; a += PGSIZE){
-801067c8:	39 da                	cmp    %ebx,%edx
-801067ca:	76 39                	jbe    80106805 <deallocuvm.part.0+0x65>
+80106c38:	39 da                	cmp    %ebx,%edx
+80106c3a:	76 39                	jbe    80106c75 <deallocuvm.part.0+0x65>
   pde = &pgdir[PDX(va)];
-801067cc:	89 d8                	mov    %ebx,%eax
-801067ce:	c1 e8 16             	shr    $0x16,%eax
+80106c3c:	89 d8                	mov    %ebx,%eax
+80106c3e:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-801067d1:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
-801067d4:	f6 c1 01             	test   $0x1,%cl
-801067d7:	74 e7                	je     801067c0 <deallocuvm.part.0+0x20>
+80106c41:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
+80106c44:	f6 c1 01             	test   $0x1,%cl
+80106c47:	74 e7                	je     80106c30 <deallocuvm.part.0+0x20>
   return &pgtab[PTX(va)];
-801067d9:	89 de                	mov    %ebx,%esi
+80106c49:	89 de                	mov    %ebx,%esi
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067db:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+80106c4b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-801067e1:	c1 ee 0a             	shr    $0xa,%esi
-801067e4:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
-801067ea:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
+80106c51:	c1 ee 0a             	shr    $0xa,%esi
+80106c54:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
+80106c5a:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
     if(!pte)
-801067f1:	85 f6                	test   %esi,%esi
-801067f3:	74 cb                	je     801067c0 <deallocuvm.part.0+0x20>
+80106c61:	85 f6                	test   %esi,%esi
+80106c63:	74 cb                	je     80106c30 <deallocuvm.part.0+0x20>
     else if((*pte & PTE_P) != 0){
-801067f5:	8b 06                	mov    (%esi),%eax
-801067f7:	a8 01                	test   $0x1,%al
-801067f9:	75 15                	jne    80106810 <deallocuvm.part.0+0x70>
+80106c65:	8b 06                	mov    (%esi),%eax
+80106c67:	a8 01                	test   $0x1,%al
+80106c69:	75 15                	jne    80106c80 <deallocuvm.part.0+0x70>
   for(; a  < oldsz; a += PGSIZE){
-801067fb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106801:	39 da                	cmp    %ebx,%edx
-80106803:	77 c7                	ja     801067cc <deallocuvm.part.0+0x2c>
+80106c6b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106c71:	39 da                	cmp    %ebx,%edx
+80106c73:	77 c7                	ja     80106c3c <deallocuvm.part.0+0x2c>
       kfree(v);
       *pte = 0;
     }
   }
   return newsz;
 }
-80106805:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106808:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010680b:	5b                   	pop    %ebx
-8010680c:	5e                   	pop    %esi
-8010680d:	5f                   	pop    %edi
-8010680e:	5d                   	pop    %ebp
-8010680f:	c3                   	ret    
+80106c75:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106c78:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c7b:	5b                   	pop    %ebx
+80106c7c:	5e                   	pop    %esi
+80106c7d:	5f                   	pop    %edi
+80106c7e:	5d                   	pop    %ebp
+80106c7f:	c3                   	ret    
       if(pa == 0)
-80106810:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106815:	74 25                	je     8010683c <deallocuvm.part.0+0x9c>
+80106c80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106c85:	74 25                	je     80106cac <deallocuvm.part.0+0x9c>
       kfree(v);
-80106817:	83 ec 0c             	sub    $0xc,%esp
+80106c87:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010681a:	05 00 00 00 80       	add    $0x80000000,%eax
-8010681f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80106c8a:	05 00 00 00 80       	add    $0x80000000,%eax
+80106c8f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-80106822:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106c92:	81 c3 00 10 00 00    	add    $0x1000,%ebx
       kfree(v);
-80106828:	50                   	push   %eax
-80106829:	e8 92 bc ff ff       	call   801024c0 <kfree>
+80106c98:	50                   	push   %eax
+80106c99:	e8 22 b8 ff ff       	call   801024c0 <kfree>
       *pte = 0;
-8010682e:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80106c9e:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
   for(; a  < oldsz; a += PGSIZE){
-80106834:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106837:	83 c4 10             	add    $0x10,%esp
-8010683a:	eb 8c                	jmp    801067c8 <deallocuvm.part.0+0x28>
+80106ca4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106ca7:	83 c4 10             	add    $0x10,%esp
+80106caa:	eb 8c                	jmp    80106c38 <deallocuvm.part.0+0x28>
         panic("kfree");
-8010683c:	83 ec 0c             	sub    $0xc,%esp
-8010683f:	68 06 74 10 80       	push   $0x80107406
-80106844:	e8 37 9b ff ff       	call   80100380 <panic>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106850 <mappages>:
-{
-80106850:	55                   	push   %ebp
-80106851:	89 e5                	mov    %esp,%ebp
-80106853:	57                   	push   %edi
-80106854:	56                   	push   %esi
-80106855:	53                   	push   %ebx
+80106cac:	83 ec 0c             	sub    $0xc,%esp
+80106caf:	68 66 78 10 80       	push   $0x80107866
+80106cb4:	e8 c7 96 ff ff       	call   80100380 <panic>
+80106cb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106cc0 <mappages>:
+{
+80106cc0:	55                   	push   %ebp
+80106cc1:	89 e5                	mov    %esp,%ebp
+80106cc3:	57                   	push   %edi
+80106cc4:	56                   	push   %esi
+80106cc5:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106856:	89 d3                	mov    %edx,%ebx
-80106858:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106cc6:	89 d3                	mov    %edx,%ebx
+80106cc8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 {
-8010685e:	83 ec 1c             	sub    $0x1c,%esp
-80106861:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106cce:	83 ec 1c             	sub    $0x1c,%esp
+80106cd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106864:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-80106868:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-8010686d:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106870:	8b 45 08             	mov    0x8(%ebp),%eax
-80106873:	29 d8                	sub    %ebx,%eax
-80106875:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106878:	eb 3d                	jmp    801068b7 <mappages+0x67>
-8010687a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106cd4:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106cd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106cdd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106ce0:	8b 45 08             	mov    0x8(%ebp),%eax
+80106ce3:	29 d8                	sub    %ebx,%eax
+80106ce5:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106ce8:	eb 3d                	jmp    80106d27 <mappages+0x67>
+80106cea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106880:	89 da                	mov    %ebx,%edx
+80106cf0:	89 da                	mov    %ebx,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106882:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106cf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80106887:	c1 ea 0a             	shr    $0xa,%edx
-8010688a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106890:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80106cf7:	c1 ea 0a             	shr    $0xa,%edx
+80106cfa:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106d00:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106897:	85 c0                	test   %eax,%eax
-80106899:	74 75                	je     80106910 <mappages+0xc0>
+80106d07:	85 c0                	test   %eax,%eax
+80106d09:	74 75                	je     80106d80 <mappages+0xc0>
     if(*pte & PTE_P)
-8010689b:	f6 00 01             	testb  $0x1,(%eax)
-8010689e:	0f 85 86 00 00 00    	jne    8010692a <mappages+0xda>
+80106d0b:	f6 00 01             	testb  $0x1,(%eax)
+80106d0e:	0f 85 86 00 00 00    	jne    80106d9a <mappages+0xda>
     *pte = pa | perm | PTE_P;
-801068a4:	0b 75 0c             	or     0xc(%ebp),%esi
-801068a7:	83 ce 01             	or     $0x1,%esi
-801068aa:	89 30                	mov    %esi,(%eax)
+80106d14:	0b 75 0c             	or     0xc(%ebp),%esi
+80106d17:	83 ce 01             	or     $0x1,%esi
+80106d1a:	89 30                	mov    %esi,(%eax)
     if(a == last)
-801068ac:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
-801068af:	74 6f                	je     80106920 <mappages+0xd0>
+80106d1c:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
+80106d1f:	74 6f                	je     80106d90 <mappages+0xd0>
     a += PGSIZE;
-801068b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106d21:	81 c3 00 10 00 00    	add    $0x1000,%ebx
   for(;;){
-801068b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106d27:	8b 45 e0             	mov    -0x20(%ebp),%eax
   pde = &pgdir[PDX(va)];
-801068ba:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801068bd:	8d 34 18             	lea    (%eax,%ebx,1),%esi
-801068c0:	89 d8                	mov    %ebx,%eax
-801068c2:	c1 e8 16             	shr    $0x16,%eax
-801068c5:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
+80106d2a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106d2d:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+80106d30:	89 d8                	mov    %ebx,%eax
+80106d32:	c1 e8 16             	shr    $0x16,%eax
+80106d35:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
   if(*pde & PTE_P){
-801068c8:	8b 07                	mov    (%edi),%eax
-801068ca:	a8 01                	test   $0x1,%al
-801068cc:	75 b2                	jne    80106880 <mappages+0x30>
+80106d38:	8b 07                	mov    (%edi),%eax
+80106d3a:	a8 01                	test   $0x1,%al
+80106d3c:	75 b2                	jne    80106cf0 <mappages+0x30>
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801068ce:	e8 ad bd ff ff       	call   80102680 <kalloc>
-801068d3:	85 c0                	test   %eax,%eax
-801068d5:	74 39                	je     80106910 <mappages+0xc0>
+80106d3e:	e8 3d b9 ff ff       	call   80102680 <kalloc>
+80106d43:	85 c0                	test   %eax,%eax
+80106d45:	74 39                	je     80106d80 <mappages+0xc0>
     memset(pgtab, 0, PGSIZE);
-801068d7:	83 ec 04             	sub    $0x4,%esp
-801068da:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801068dd:	68 00 10 00 00       	push   $0x1000
-801068e2:	6a 00                	push   $0x0
-801068e4:	50                   	push   %eax
-801068e5:	e8 76 dd ff ff       	call   80104660 <memset>
+80106d47:	83 ec 04             	sub    $0x4,%esp
+80106d4a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80106d4d:	68 00 10 00 00       	push   $0x1000
+80106d52:	6a 00                	push   $0x0
+80106d54:	50                   	push   %eax
+80106d55:	e8 66 dc ff ff       	call   801049c0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801068ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
+80106d5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   return &pgtab[PTX(va)];
-801068ed:	83 c4 10             	add    $0x10,%esp
+80106d5d:	83 c4 10             	add    $0x10,%esp
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801068f0:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
-801068f6:	83 c8 07             	or     $0x7,%eax
-801068f9:	89 07                	mov    %eax,(%edi)
+80106d60:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
+80106d66:	83 c8 07             	or     $0x7,%eax
+80106d69:	89 07                	mov    %eax,(%edi)
   return &pgtab[PTX(va)];
-801068fb:	89 d8                	mov    %ebx,%eax
-801068fd:	c1 e8 0a             	shr    $0xa,%eax
-80106900:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106905:	01 d0                	add    %edx,%eax
-80106907:	eb 92                	jmp    8010689b <mappages+0x4b>
-80106909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d6b:	89 d8                	mov    %ebx,%eax
+80106d6d:	c1 e8 0a             	shr    $0xa,%eax
+80106d70:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106d75:	01 d0                	add    %edx,%eax
+80106d77:	eb 92                	jmp    80106d0b <mappages+0x4b>
+80106d79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 }
-80106910:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d80:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106913:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106d83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106918:	5b                   	pop    %ebx
-80106919:	5e                   	pop    %esi
-8010691a:	5f                   	pop    %edi
-8010691b:	5d                   	pop    %ebp
-8010691c:	c3                   	ret    
-8010691d:	8d 76 00             	lea    0x0(%esi),%esi
-80106920:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d88:	5b                   	pop    %ebx
+80106d89:	5e                   	pop    %esi
+80106d8a:	5f                   	pop    %edi
+80106d8b:	5d                   	pop    %ebp
+80106d8c:	c3                   	ret    
+80106d8d:	8d 76 00             	lea    0x0(%esi),%esi
+80106d90:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106923:	31 c0                	xor    %eax,%eax
+80106d93:	31 c0                	xor    %eax,%eax
 }
-80106925:	5b                   	pop    %ebx
-80106926:	5e                   	pop    %esi
-80106927:	5f                   	pop    %edi
-80106928:	5d                   	pop    %ebp
-80106929:	c3                   	ret    
+80106d95:	5b                   	pop    %ebx
+80106d96:	5e                   	pop    %esi
+80106d97:	5f                   	pop    %edi
+80106d98:	5d                   	pop    %ebp
+80106d99:	c3                   	ret    
       panic("remap");
-8010692a:	83 ec 0c             	sub    $0xc,%esp
-8010692d:	68 48 7a 10 80       	push   $0x80107a48
-80106932:	e8 49 9a ff ff       	call   80100380 <panic>
-80106937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693e:	66 90                	xchg   %ax,%ax
-
-80106940 <seginit>:
-{
-80106940:	55                   	push   %ebp
-80106941:	89 e5                	mov    %esp,%ebp
-80106943:	83 ec 18             	sub    $0x18,%esp
+80106d9a:	83 ec 0c             	sub    $0xc,%esp
+80106d9d:	68 d8 7e 10 80       	push   $0x80107ed8
+80106da2:	e8 d9 95 ff ff       	call   80100380 <panic>
+80106da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106dae:	66 90                	xchg   %ax,%ax
+
+80106db0 <seginit>:
+{
+80106db0:	55                   	push   %ebp
+80106db1:	89 e5                	mov    %esp,%ebp
+80106db3:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-80106946:	e8 05 d0 ff ff       	call   80103950 <cpuid>
+80106db6:	e8 d5 cb ff ff       	call   80103990 <cpuid>
   pd[0] = size-1;
-8010694b:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106950:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-80106956:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+80106dbb:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106dc0:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106dc6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010695a:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
-80106961:	ff 00 00 
-80106964:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
-8010696b:	9a cf 00 
+80106dca:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
+80106dd1:	ff 00 00 
+80106dd4:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
+80106ddb:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-8010696e:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
-80106975:	ff 00 00 
-80106978:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
-8010697f:	92 cf 00 
+80106dde:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
+80106de5:	ff 00 00 
+80106de8:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
+80106def:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106982:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
-80106989:	ff 00 00 
-8010698c:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
-80106993:	fa cf 00 
+80106df2:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
+80106df9:	ff 00 00 
+80106dfc:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
+80106e03:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106996:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
-8010699d:	ff 00 00 
-801069a0:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
-801069a7:	f2 cf 00 
+80106e06:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
+80106e0d:	ff 00 00 
+80106e10:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
+80106e17:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069aa:	05 10 18 11 80       	add    $0x80111810,%eax
+80106e1a:	05 10 18 11 80       	add    $0x80111810,%eax
   pd[1] = (uint)p;
-801069af:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80106e1f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069b3:	c1 e8 10             	shr    $0x10,%eax
-801069b6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106e23:	c1 e8 10             	shr    $0x10,%eax
+80106e26:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069ba:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069bd:	0f 01 10             	lgdtl  (%eax)
+80106e2a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106e2d:	0f 01 10             	lgdtl  (%eax)
 }
-801069c0:	c9                   	leave  
-801069c1:	c3                   	ret    
-801069c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e30:	c9                   	leave  
+80106e31:	c3                   	ret    
+80106e32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801069d0 <switchkvm>:
+80106e40 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069d0:	a1 c4 44 11 80       	mov    0x801144c4,%eax
-801069d5:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e40:	a1 c4 45 11 80       	mov    0x801145c4,%eax
+80106e45:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069da:	0f 22 d8             	mov    %eax,%cr3
+80106e4a:	0f 22 d8             	mov    %eax,%cr3
 }
-801069dd:	c3                   	ret    
-801069de:	66 90                	xchg   %ax,%ax
+80106e4d:	c3                   	ret    
+80106e4e:	66 90                	xchg   %ax,%ax
 
-801069e0 <switchuvm>:
+80106e50 <switchuvm>:
 {
-801069e0:	55                   	push   %ebp
-801069e1:	89 e5                	mov    %esp,%ebp
-801069e3:	57                   	push   %edi
-801069e4:	56                   	push   %esi
-801069e5:	53                   	push   %ebx
-801069e6:	83 ec 1c             	sub    $0x1c,%esp
-801069e9:	8b 75 08             	mov    0x8(%ebp),%esi
+80106e50:	55                   	push   %ebp
+80106e51:	89 e5                	mov    %esp,%ebp
+80106e53:	57                   	push   %edi
+80106e54:	56                   	push   %esi
+80106e55:	53                   	push   %ebx
+80106e56:	83 ec 1c             	sub    $0x1c,%esp
+80106e59:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-801069ec:	85 f6                	test   %esi,%esi
-801069ee:	0f 84 cb 00 00 00    	je     80106abf <switchuvm+0xdf>
+80106e5c:	85 f6                	test   %esi,%esi
+80106e5e:	0f 84 cb 00 00 00    	je     80106f2f <switchuvm+0xdf>
   if(p->kstack == 0)
-801069f4:	8b 46 08             	mov    0x8(%esi),%eax
-801069f7:	85 c0                	test   %eax,%eax
-801069f9:	0f 84 da 00 00 00    	je     80106ad9 <switchuvm+0xf9>
+80106e64:	8b 46 08             	mov    0x8(%esi),%eax
+80106e67:	85 c0                	test   %eax,%eax
+80106e69:	0f 84 da 00 00 00    	je     80106f49 <switchuvm+0xf9>
   if(p->pgdir == 0)
-801069ff:	8b 46 04             	mov    0x4(%esi),%eax
-80106a02:	85 c0                	test   %eax,%eax
-80106a04:	0f 84 c2 00 00 00    	je     80106acc <switchuvm+0xec>
+80106e6f:	8b 46 04             	mov    0x4(%esi),%eax
+80106e72:	85 c0                	test   %eax,%eax
+80106e74:	0f 84 c2 00 00 00    	je     80106f3c <switchuvm+0xec>
   pushcli();
-80106a0a:	e8 41 da ff ff       	call   80104450 <pushcli>
+80106e7a:	e8 31 d9 ff ff       	call   801047b0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a0f:	e8 dc ce ff ff       	call   801038f0 <mycpu>
-80106a14:	89 c3                	mov    %eax,%ebx
-80106a16:	e8 d5 ce ff ff       	call   801038f0 <mycpu>
-80106a1b:	89 c7                	mov    %eax,%edi
-80106a1d:	e8 ce ce ff ff       	call   801038f0 <mycpu>
-80106a22:	83 c7 08             	add    $0x8,%edi
-80106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a28:	e8 c3 ce ff ff       	call   801038f0 <mycpu>
-80106a2d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a30:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a35:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a3c:	83 c0 08             	add    $0x8,%eax
-80106a3f:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80106e7f:	e8 ac ca ff ff       	call   80103930 <mycpu>
+80106e84:	89 c3                	mov    %eax,%ebx
+80106e86:	e8 a5 ca ff ff       	call   80103930 <mycpu>
+80106e8b:	89 c7                	mov    %eax,%edi
+80106e8d:	e8 9e ca ff ff       	call   80103930 <mycpu>
+80106e92:	83 c7 08             	add    $0x8,%edi
+80106e95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106e98:	e8 93 ca ff ff       	call   80103930 <mycpu>
+80106e9d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106ea0:	ba 67 00 00 00       	mov    $0x67,%edx
+80106ea5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106eac:	83 c0 08             	add    $0x8,%eax
+80106eaf:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a46:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80106eb6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a4b:	83 c1 08             	add    $0x8,%ecx
-80106a4e:	c1 e8 18             	shr    $0x18,%eax
-80106a51:	c1 e9 10             	shr    $0x10,%ecx
-80106a54:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a5a:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a60:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a65:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80106ebb:	83 c1 08             	add    $0x8,%ecx
+80106ebe:	c1 e8 18             	shr    $0x18,%eax
+80106ec1:	c1 e9 10             	shr    $0x10,%ecx
+80106ec4:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106eca:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106ed0:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106ed5:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106a6c:	bb 10 00 00 00       	mov    $0x10,%ebx
+80106edc:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106a71:	e8 7a ce ff ff       	call   801038f0 <mycpu>
-80106a76:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80106ee1:	e8 4a ca ff ff       	call   80103930 <mycpu>
+80106ee6:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106a7d:	e8 6e ce ff ff       	call   801038f0 <mycpu>
-80106a82:	66 89 58 10          	mov    %bx,0x10(%eax)
+80106eed:	e8 3e ca ff ff       	call   80103930 <mycpu>
+80106ef2:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106a86:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106a89:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106a8f:	e8 5c ce ff ff       	call   801038f0 <mycpu>
-80106a94:	89 58 0c             	mov    %ebx,0xc(%eax)
+80106ef6:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106ef9:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106eff:	e8 2c ca ff ff       	call   80103930 <mycpu>
+80106f04:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a97:	e8 54 ce ff ff       	call   801038f0 <mycpu>
-80106a9c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80106f07:	e8 24 ca ff ff       	call   80103930 <mycpu>
+80106f0c:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106aa0:	b8 28 00 00 00       	mov    $0x28,%eax
-80106aa5:	0f 00 d8             	ltr    %ax
+80106f10:	b8 28 00 00 00       	mov    $0x28,%eax
+80106f15:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106aa8:	8b 46 04             	mov    0x4(%esi),%eax
-80106aab:	05 00 00 00 80       	add    $0x80000000,%eax
+80106f18:	8b 46 04             	mov    0x4(%esi),%eax
+80106f1b:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ab0:	0f 22 d8             	mov    %eax,%cr3
+80106f20:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ab3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106ab6:	5b                   	pop    %ebx
-80106ab7:	5e                   	pop    %esi
-80106ab8:	5f                   	pop    %edi
-80106ab9:	5d                   	pop    %ebp
+80106f23:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106f26:	5b                   	pop    %ebx
+80106f27:	5e                   	pop    %esi
+80106f28:	5f                   	pop    %edi
+80106f29:	5d                   	pop    %ebp
   popcli();
-80106aba:	e9 e1 d9 ff ff       	jmp    801044a0 <popcli>
+80106f2a:	e9 d1 d8 ff ff       	jmp    80104800 <popcli>
     panic("switchuvm: no process");
-80106abf:	83 ec 0c             	sub    $0xc,%esp
-80106ac2:	68 4e 7a 10 80       	push   $0x80107a4e
-80106ac7:	e8 b4 98 ff ff       	call   80100380 <panic>
+80106f2f:	83 ec 0c             	sub    $0xc,%esp
+80106f32:	68 de 7e 10 80       	push   $0x80107ede
+80106f37:	e8 44 94 ff ff       	call   80100380 <panic>
     panic("switchuvm: no pgdir");
-80106acc:	83 ec 0c             	sub    $0xc,%esp
-80106acf:	68 79 7a 10 80       	push   $0x80107a79
-80106ad4:	e8 a7 98 ff ff       	call   80100380 <panic>
+80106f3c:	83 ec 0c             	sub    $0xc,%esp
+80106f3f:	68 09 7f 10 80       	push   $0x80107f09
+80106f44:	e8 37 94 ff ff       	call   80100380 <panic>
     panic("switchuvm: no kstack");
-80106ad9:	83 ec 0c             	sub    $0xc,%esp
-80106adc:	68 64 7a 10 80       	push   $0x80107a64
-80106ae1:	e8 9a 98 ff ff       	call   80100380 <panic>
-80106ae6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106aed:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106af0 <inituvm>:
-{
-80106af0:	55                   	push   %ebp
-80106af1:	89 e5                	mov    %esp,%ebp
-80106af3:	57                   	push   %edi
-80106af4:	56                   	push   %esi
-80106af5:	53                   	push   %ebx
-80106af6:	83 ec 1c             	sub    $0x1c,%esp
-80106af9:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106afc:	8b 75 10             	mov    0x10(%ebp),%esi
-80106aff:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106f49:	83 ec 0c             	sub    $0xc,%esp
+80106f4c:	68 f4 7e 10 80       	push   $0x80107ef4
+80106f51:	e8 2a 94 ff ff       	call   80100380 <panic>
+80106f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106f60 <inituvm>:
+{
+80106f60:	55                   	push   %ebp
+80106f61:	89 e5                	mov    %esp,%ebp
+80106f63:	57                   	push   %edi
+80106f64:	56                   	push   %esi
+80106f65:	53                   	push   %ebx
+80106f66:	83 ec 1c             	sub    $0x1c,%esp
+80106f69:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f6c:	8b 75 10             	mov    0x10(%ebp),%esi
+80106f6f:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106f72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b05:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b0b:	77 4b                	ja     80106b58 <inituvm+0x68>
+80106f75:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106f7b:	77 4b                	ja     80106fc8 <inituvm+0x68>
   mem = kalloc();
-80106b0d:	e8 6e bb ff ff       	call   80102680 <kalloc>
+80106f7d:	e8 fe b6 ff ff       	call   80102680 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b12:	83 ec 04             	sub    $0x4,%esp
-80106b15:	68 00 10 00 00       	push   $0x1000
+80106f82:	83 ec 04             	sub    $0x4,%esp
+80106f85:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b1a:	89 c3                	mov    %eax,%ebx
+80106f8a:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b1c:	6a 00                	push   $0x0
-80106b1e:	50                   	push   %eax
-80106b1f:	e8 3c db ff ff       	call   80104660 <memset>
+80106f8c:	6a 00                	push   $0x0
+80106f8e:	50                   	push   %eax
+80106f8f:	e8 2c da ff ff       	call   801049c0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b24:	58                   	pop    %eax
-80106b25:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b2b:	5a                   	pop    %edx
-80106b2c:	6a 06                	push   $0x6
-80106b2e:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b33:	31 d2                	xor    %edx,%edx
-80106b35:	50                   	push   %eax
-80106b36:	89 f8                	mov    %edi,%eax
-80106b38:	e8 13 fd ff ff       	call   80106850 <mappages>
+80106f94:	58                   	pop    %eax
+80106f95:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106f9b:	5a                   	pop    %edx
+80106f9c:	6a 06                	push   $0x6
+80106f9e:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106fa3:	31 d2                	xor    %edx,%edx
+80106fa5:	50                   	push   %eax
+80106fa6:	89 f8                	mov    %edi,%eax
+80106fa8:	e8 13 fd ff ff       	call   80106cc0 <mappages>
   memmove(mem, init, sz);
-80106b3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b40:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b43:	83 c4 10             	add    $0x10,%esp
-80106b46:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b49:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b4f:	5b                   	pop    %ebx
-80106b50:	5e                   	pop    %esi
-80106b51:	5f                   	pop    %edi
-80106b52:	5d                   	pop    %ebp
+80106fad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106fb0:	89 75 10             	mov    %esi,0x10(%ebp)
+80106fb3:	83 c4 10             	add    $0x10,%esp
+80106fb6:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80106fb9:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80106fbc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fbf:	5b                   	pop    %ebx
+80106fc0:	5e                   	pop    %esi
+80106fc1:	5f                   	pop    %edi
+80106fc2:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b53:	e9 a8 db ff ff       	jmp    80104700 <memmove>
+80106fc3:	e9 98 da ff ff       	jmp    80104a60 <memmove>
     panic("inituvm: more than a page");
-80106b58:	83 ec 0c             	sub    $0xc,%esp
-80106b5b:	68 8d 7a 10 80       	push   $0x80107a8d
-80106b60:	e8 1b 98 ff ff       	call   80100380 <panic>
-80106b65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106b70 <loaduvm>:
-{
-80106b70:	55                   	push   %ebp
-80106b71:	89 e5                	mov    %esp,%ebp
-80106b73:	57                   	push   %edi
-80106b74:	56                   	push   %esi
-80106b75:	53                   	push   %ebx
-80106b76:	83 ec 1c             	sub    $0x1c,%esp
-80106b79:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b7c:	8b 75 18             	mov    0x18(%ebp),%esi
+80106fc8:	83 ec 0c             	sub    $0xc,%esp
+80106fcb:	68 1d 7f 10 80       	push   $0x80107f1d
+80106fd0:	e8 ab 93 ff ff       	call   80100380 <panic>
+80106fd5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106fdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106fe0 <loaduvm>:
+{
+80106fe0:	55                   	push   %ebp
+80106fe1:	89 e5                	mov    %esp,%ebp
+80106fe3:	57                   	push   %edi
+80106fe4:	56                   	push   %esi
+80106fe5:	53                   	push   %ebx
+80106fe6:	83 ec 1c             	sub    $0x1c,%esp
+80106fe9:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106fec:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106b7f:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106b84:	0f 85 bb 00 00 00    	jne    80106c45 <loaduvm+0xd5>
+80106fef:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106ff4:	0f 85 bb 00 00 00    	jne    801070b5 <loaduvm+0xd5>
   for(i = 0; i < sz; i += PGSIZE){
-80106b8a:	01 f0                	add    %esi,%eax
-80106b8c:	89 f3                	mov    %esi,%ebx
-80106b8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106ffa:	01 f0                	add    %esi,%eax
+80106ffc:	89 f3                	mov    %esi,%ebx
+80106ffe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106b91:	8b 45 14             	mov    0x14(%ebp),%eax
-80106b94:	01 f0                	add    %esi,%eax
-80106b96:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107001:	8b 45 14             	mov    0x14(%ebp),%eax
+80107004:	01 f0                	add    %esi,%eax
+80107006:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106b99:	85 f6                	test   %esi,%esi
-80106b9b:	0f 84 87 00 00 00    	je     80106c28 <loaduvm+0xb8>
-80106ba1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107009:	85 f6                	test   %esi,%esi
+8010700b:	0f 84 87 00 00 00    	je     80107098 <loaduvm+0xb8>
+80107011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   pde = &pgdir[PDX(va)];
-80106ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107018:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   if(*pde & PTE_P){
-80106bab:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80106bae:	29 d8                	sub    %ebx,%eax
+8010701b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010701e:	29 d8                	sub    %ebx,%eax
   pde = &pgdir[PDX(va)];
-80106bb0:	89 c2                	mov    %eax,%edx
-80106bb2:	c1 ea 16             	shr    $0x16,%edx
+80107020:	89 c2                	mov    %eax,%edx
+80107022:	c1 ea 16             	shr    $0x16,%edx
   if(*pde & PTE_P){
-80106bb5:	8b 14 91             	mov    (%ecx,%edx,4),%edx
-80106bb8:	f6 c2 01             	test   $0x1,%dl
-80106bbb:	75 13                	jne    80106bd0 <loaduvm+0x60>
+80107025:	8b 14 91             	mov    (%ecx,%edx,4),%edx
+80107028:	f6 c2 01             	test   $0x1,%dl
+8010702b:	75 13                	jne    80107040 <loaduvm+0x60>
       panic("loaduvm: address should exist");
-80106bbd:	83 ec 0c             	sub    $0xc,%esp
-80106bc0:	68 a7 7a 10 80       	push   $0x80107aa7
-80106bc5:	e8 b6 97 ff ff       	call   80100380 <panic>
-80106bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010702d:	83 ec 0c             	sub    $0xc,%esp
+80107030:	68 37 7f 10 80       	push   $0x80107f37
+80107035:	e8 46 93 ff ff       	call   80100380 <panic>
+8010703a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106bd0:	c1 e8 0a             	shr    $0xa,%eax
+80107040:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106bd3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80107043:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80106bd9:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106bde:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80107049:	25 fc 0f 00 00       	and    $0xffc,%eax
+8010704e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be5:	85 c0                	test   %eax,%eax
-80106be7:	74 d4                	je     80106bbd <loaduvm+0x4d>
+80107055:	85 c0                	test   %eax,%eax
+80107057:	74 d4                	je     8010702d <loaduvm+0x4d>
     pa = PTE_ADDR(*pte);
-80106be9:	8b 00                	mov    (%eax),%eax
+80107059:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106beb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010705b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bee:	bf 00 10 00 00       	mov    $0x1000,%edi
+8010705e:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106bf3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107063:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106bf8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106bfe:	0f 46 fb             	cmovbe %ebx,%edi
+80107068:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+8010706e:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c01:	29 d9                	sub    %ebx,%ecx
-80106c03:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c08:	57                   	push   %edi
-80106c09:	51                   	push   %ecx
-80106c0a:	50                   	push   %eax
-80106c0b:	ff 75 10             	push   0x10(%ebp)
-80106c0e:	e8 7d ae ff ff       	call   80101a90 <readi>
-80106c13:	83 c4 10             	add    $0x10,%esp
-80106c16:	39 f8                	cmp    %edi,%eax
-80106c18:	75 1e                	jne    80106c38 <loaduvm+0xc8>
+80107071:	29 d9                	sub    %ebx,%ecx
+80107073:	05 00 00 00 80       	add    $0x80000000,%eax
+80107078:	57                   	push   %edi
+80107079:	51                   	push   %ecx
+8010707a:	50                   	push   %eax
+8010707b:	ff 75 10             	push   0x10(%ebp)
+8010707e:	e8 0d aa ff ff       	call   80101a90 <readi>
+80107083:	83 c4 10             	add    $0x10,%esp
+80107086:	39 f8                	cmp    %edi,%eax
+80107088:	75 1e                	jne    801070a8 <loaduvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106c1a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106c20:	89 f0                	mov    %esi,%eax
-80106c22:	29 d8                	sub    %ebx,%eax
-80106c24:	39 c6                	cmp    %eax,%esi
-80106c26:	77 80                	ja     80106ba8 <loaduvm+0x38>
+8010708a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80107090:	89 f0                	mov    %esi,%eax
+80107092:	29 d8                	sub    %ebx,%eax
+80107094:	39 c6                	cmp    %eax,%esi
+80107096:	77 80                	ja     80107018 <loaduvm+0x38>
 }
-80106c28:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107098:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c2b:	31 c0                	xor    %eax,%eax
+8010709b:	31 c0                	xor    %eax,%eax
 }
-80106c2d:	5b                   	pop    %ebx
-80106c2e:	5e                   	pop    %esi
-80106c2f:	5f                   	pop    %edi
-80106c30:	5d                   	pop    %ebp
-80106c31:	c3                   	ret    
-80106c32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106c38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010709d:	5b                   	pop    %ebx
+8010709e:	5e                   	pop    %esi
+8010709f:	5f                   	pop    %edi
+801070a0:	5d                   	pop    %ebp
+801070a1:	c3                   	ret    
+801070a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801070a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801070ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c40:	5b                   	pop    %ebx
-80106c41:	5e                   	pop    %esi
-80106c42:	5f                   	pop    %edi
-80106c43:	5d                   	pop    %ebp
-80106c44:	c3                   	ret    
+801070b0:	5b                   	pop    %ebx
+801070b1:	5e                   	pop    %esi
+801070b2:	5f                   	pop    %edi
+801070b3:	5d                   	pop    %ebp
+801070b4:	c3                   	ret    
     panic("loaduvm: addr must be page aligned");
-80106c45:	83 ec 0c             	sub    $0xc,%esp
-80106c48:	68 48 7b 10 80       	push   $0x80107b48
-80106c4d:	e8 2e 97 ff ff       	call   80100380 <panic>
-80106c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106c60 <allocuvm>:
-{
-80106c60:	55                   	push   %ebp
-80106c61:	89 e5                	mov    %esp,%ebp
-80106c63:	57                   	push   %edi
-80106c64:	56                   	push   %esi
-80106c65:	53                   	push   %ebx
-80106c66:	83 ec 1c             	sub    $0x1c,%esp
+801070b5:	83 ec 0c             	sub    $0xc,%esp
+801070b8:	68 d8 7f 10 80       	push   $0x80107fd8
+801070bd:	e8 be 92 ff ff       	call   80100380 <panic>
+801070c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801070d0 <allocuvm>:
+{
+801070d0:	55                   	push   %ebp
+801070d1:	89 e5                	mov    %esp,%ebp
+801070d3:	57                   	push   %edi
+801070d4:	56                   	push   %esi
+801070d5:	53                   	push   %ebx
+801070d6:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c69:	8b 45 10             	mov    0x10(%ebp),%eax
+801070d9:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106c6c:	8b 7d 08             	mov    0x8(%ebp),%edi
+801070dc:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106c6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c72:	85 c0                	test   %eax,%eax
-80106c74:	0f 88 b6 00 00 00    	js     80106d30 <allocuvm+0xd0>
+801070df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801070e2:	85 c0                	test   %eax,%eax
+801070e4:	0f 88 b6 00 00 00    	js     801071a0 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106c7a:	3b 45 0c             	cmp    0xc(%ebp),%eax
+801070ea:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
+801070ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106c80:	0f 82 9a 00 00 00    	jb     80106d20 <allocuvm+0xc0>
+801070f0:	0f 82 9a 00 00 00    	jb     80107190 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106c86:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106c8c:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+801070f6:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+801070fc:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106c92:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106c95:	77 44                	ja     80106cdb <allocuvm+0x7b>
-80106c97:	e9 87 00 00 00       	jmp    80106d23 <allocuvm+0xc3>
-80106c9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107102:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107105:	77 44                	ja     8010714b <allocuvm+0x7b>
+80107107:	e9 87 00 00 00       	jmp    80107193 <allocuvm+0xc3>
+8010710c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     memset(mem, 0, PGSIZE);
-80106ca0:	83 ec 04             	sub    $0x4,%esp
-80106ca3:	68 00 10 00 00       	push   $0x1000
-80106ca8:	6a 00                	push   $0x0
-80106caa:	50                   	push   %eax
-80106cab:	e8 b0 d9 ff ff       	call   80104660 <memset>
+80107110:	83 ec 04             	sub    $0x4,%esp
+80107113:	68 00 10 00 00       	push   $0x1000
+80107118:	6a 00                	push   $0x0
+8010711a:	50                   	push   %eax
+8010711b:	e8 a0 d8 ff ff       	call   801049c0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cb0:	58                   	pop    %eax
-80106cb1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cb7:	5a                   	pop    %edx
-80106cb8:	6a 06                	push   $0x6
-80106cba:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106cbf:	89 f2                	mov    %esi,%edx
-80106cc1:	50                   	push   %eax
-80106cc2:	89 f8                	mov    %edi,%eax
-80106cc4:	e8 87 fb ff ff       	call   80106850 <mappages>
-80106cc9:	83 c4 10             	add    $0x10,%esp
-80106ccc:	85 c0                	test   %eax,%eax
-80106cce:	78 78                	js     80106d48 <allocuvm+0xe8>
+80107120:	58                   	pop    %eax
+80107121:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107127:	5a                   	pop    %edx
+80107128:	6a 06                	push   $0x6
+8010712a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+8010712f:	89 f2                	mov    %esi,%edx
+80107131:	50                   	push   %eax
+80107132:	89 f8                	mov    %edi,%eax
+80107134:	e8 87 fb ff ff       	call   80106cc0 <mappages>
+80107139:	83 c4 10             	add    $0x10,%esp
+8010713c:	85 c0                	test   %eax,%eax
+8010713e:	78 78                	js     801071b8 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106cd0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106cd6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106cd9:	76 48                	jbe    80106d23 <allocuvm+0xc3>
+80107140:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107146:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107149:	76 48                	jbe    80107193 <allocuvm+0xc3>
     mem = kalloc();
-80106cdb:	e8 a0 b9 ff ff       	call   80102680 <kalloc>
-80106ce0:	89 c3                	mov    %eax,%ebx
+8010714b:	e8 30 b5 ff ff       	call   80102680 <kalloc>
+80107150:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106ce2:	85 c0                	test   %eax,%eax
-80106ce4:	75 ba                	jne    80106ca0 <allocuvm+0x40>
+80107152:	85 c0                	test   %eax,%eax
+80107154:	75 ba                	jne    80107110 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106ce6:	83 ec 0c             	sub    $0xc,%esp
-80106ce9:	68 c5 7a 10 80       	push   $0x80107ac5
-80106cee:	e8 ad 99 ff ff       	call   801006a0 <cprintf>
+80107156:	83 ec 0c             	sub    $0xc,%esp
+80107159:	68 55 7f 10 80       	push   $0x80107f55
+8010715e:	e8 3d 95 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80106cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106cf6:	83 c4 10             	add    $0x10,%esp
-80106cf9:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106cfc:	74 32                	je     80106d30 <allocuvm+0xd0>
-80106cfe:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d01:	89 c1                	mov    %eax,%ecx
-80106d03:	89 f8                	mov    %edi,%eax
-80106d05:	e8 96 fa ff ff       	call   801067a0 <deallocuvm.part.0>
+80107163:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107166:	83 c4 10             	add    $0x10,%esp
+80107169:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010716c:	74 32                	je     801071a0 <allocuvm+0xd0>
+8010716e:	8b 55 10             	mov    0x10(%ebp),%edx
+80107171:	89 c1                	mov    %eax,%ecx
+80107173:	89 f8                	mov    %edi,%eax
+80107175:	e8 96 fa ff ff       	call   80106c10 <deallocuvm.part.0>
       return 0;
-80106d0a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010717a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d17:	5b                   	pop    %ebx
-80106d18:	5e                   	pop    %esi
-80106d19:	5f                   	pop    %edi
-80106d1a:	5d                   	pop    %ebp
-80106d1b:	c3                   	ret    
-80106d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107181:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107184:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107187:	5b                   	pop    %ebx
+80107188:	5e                   	pop    %esi
+80107189:	5f                   	pop    %edi
+8010718a:	5d                   	pop    %ebp
+8010718b:	c3                   	ret    
+8010718c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107190:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106d23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d26:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d29:	5b                   	pop    %ebx
-80106d2a:	5e                   	pop    %esi
-80106d2b:	5f                   	pop    %edi
-80106d2c:	5d                   	pop    %ebp
-80106d2d:	c3                   	ret    
-80106d2e:	66 90                	xchg   %ax,%ax
+80107193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107196:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107199:	5b                   	pop    %ebx
+8010719a:	5e                   	pop    %esi
+8010719b:	5f                   	pop    %edi
+8010719c:	5d                   	pop    %ebp
+8010719d:	c3                   	ret    
+8010719e:	66 90                	xchg   %ax,%ax
     return 0;
-80106d30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801071a0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d3d:	5b                   	pop    %ebx
-80106d3e:	5e                   	pop    %esi
-80106d3f:	5f                   	pop    %edi
-80106d40:	5d                   	pop    %ebp
-80106d41:	c3                   	ret    
-80106d42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801071a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801071aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801071ad:	5b                   	pop    %ebx
+801071ae:	5e                   	pop    %esi
+801071af:	5f                   	pop    %edi
+801071b0:	5d                   	pop    %ebp
+801071b1:	c3                   	ret    
+801071b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d48:	83 ec 0c             	sub    $0xc,%esp
-80106d4b:	68 dd 7a 10 80       	push   $0x80107add
-80106d50:	e8 4b 99 ff ff       	call   801006a0 <cprintf>
+801071b8:	83 ec 0c             	sub    $0xc,%esp
+801071bb:	68 6d 7f 10 80       	push   $0x80107f6d
+801071c0:	e8 db 94 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d58:	83 c4 10             	add    $0x10,%esp
-80106d5b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d5e:	74 0c                	je     80106d6c <allocuvm+0x10c>
-80106d60:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d63:	89 c1                	mov    %eax,%ecx
-80106d65:	89 f8                	mov    %edi,%eax
-80106d67:	e8 34 fa ff ff       	call   801067a0 <deallocuvm.part.0>
+801071c5:	8b 45 0c             	mov    0xc(%ebp),%eax
+801071c8:	83 c4 10             	add    $0x10,%esp
+801071cb:	39 45 10             	cmp    %eax,0x10(%ebp)
+801071ce:	74 0c                	je     801071dc <allocuvm+0x10c>
+801071d0:	8b 55 10             	mov    0x10(%ebp),%edx
+801071d3:	89 c1                	mov    %eax,%ecx
+801071d5:	89 f8                	mov    %edi,%eax
+801071d7:	e8 34 fa ff ff       	call   80106c10 <deallocuvm.part.0>
       kfree(mem);
-80106d6c:	83 ec 0c             	sub    $0xc,%esp
-80106d6f:	53                   	push   %ebx
-80106d70:	e8 4b b7 ff ff       	call   801024c0 <kfree>
+801071dc:	83 ec 0c             	sub    $0xc,%esp
+801071df:	53                   	push   %ebx
+801071e0:	e8 db b2 ff ff       	call   801024c0 <kfree>
       return 0;
-80106d75:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d7c:	83 c4 10             	add    $0x10,%esp
+801071e5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801071ec:	83 c4 10             	add    $0x10,%esp
 }
-80106d7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d82:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d85:	5b                   	pop    %ebx
-80106d86:	5e                   	pop    %esi
-80106d87:	5f                   	pop    %edi
-80106d88:	5d                   	pop    %ebp
-80106d89:	c3                   	ret    
-80106d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106d90 <deallocuvm>:
-{
-80106d90:	55                   	push   %ebp
-80106d91:	89 e5                	mov    %esp,%ebp
-80106d93:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106d96:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106d99:	8b 45 08             	mov    0x8(%ebp),%eax
+801071ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801071f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801071f5:	5b                   	pop    %ebx
+801071f6:	5e                   	pop    %esi
+801071f7:	5f                   	pop    %edi
+801071f8:	5d                   	pop    %ebp
+801071f9:	c3                   	ret    
+801071fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107200 <deallocuvm>:
+{
+80107200:	55                   	push   %ebp
+80107201:	89 e5                	mov    %esp,%ebp
+80107203:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107206:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80107209:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106d9c:	39 d1                	cmp    %edx,%ecx
-80106d9e:	73 10                	jae    80106db0 <deallocuvm+0x20>
+8010720c:	39 d1                	cmp    %edx,%ecx
+8010720e:	73 10                	jae    80107220 <deallocuvm+0x20>
 }
-80106da0:	5d                   	pop    %ebp
-80106da1:	e9 fa f9 ff ff       	jmp    801067a0 <deallocuvm.part.0>
-80106da6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dad:	8d 76 00             	lea    0x0(%esi),%esi
-80106db0:	89 d0                	mov    %edx,%eax
-80106db2:	5d                   	pop    %ebp
-80106db3:	c3                   	ret    
-80106db4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dbf:	90                   	nop
+80107210:	5d                   	pop    %ebp
+80107211:	e9 fa f9 ff ff       	jmp    80106c10 <deallocuvm.part.0>
+80107216:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010721d:	8d 76 00             	lea    0x0(%esi),%esi
+80107220:	89 d0                	mov    %edx,%eax
+80107222:	5d                   	pop    %ebp
+80107223:	c3                   	ret    
+80107224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010722b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010722f:	90                   	nop
 
-80106dc0 <freevm>:
+80107230 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dc0:	55                   	push   %ebp
-80106dc1:	89 e5                	mov    %esp,%ebp
-80106dc3:	57                   	push   %edi
-80106dc4:	56                   	push   %esi
-80106dc5:	53                   	push   %ebx
-80106dc6:	83 ec 0c             	sub    $0xc,%esp
-80106dc9:	8b 75 08             	mov    0x8(%ebp),%esi
+80107230:	55                   	push   %ebp
+80107231:	89 e5                	mov    %esp,%ebp
+80107233:	57                   	push   %edi
+80107234:	56                   	push   %esi
+80107235:	53                   	push   %ebx
+80107236:	83 ec 0c             	sub    $0xc,%esp
+80107239:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106dcc:	85 f6                	test   %esi,%esi
-80106dce:	74 59                	je     80106e29 <freevm+0x69>
+8010723c:	85 f6                	test   %esi,%esi
+8010723e:	74 59                	je     80107299 <freevm+0x69>
   if(newsz >= oldsz)
-80106dd0:	31 c9                	xor    %ecx,%ecx
-80106dd2:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106dd7:	89 f0                	mov    %esi,%eax
-80106dd9:	89 f3                	mov    %esi,%ebx
-80106ddb:	e8 c0 f9 ff ff       	call   801067a0 <deallocuvm.part.0>
+80107240:	31 c9                	xor    %ecx,%ecx
+80107242:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107247:	89 f0                	mov    %esi,%eax
+80107249:	89 f3                	mov    %esi,%ebx
+8010724b:	e8 c0 f9 ff ff       	call   80106c10 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106de0:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106de6:	eb 0f                	jmp    80106df7 <freevm+0x37>
-80106de8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106def:	90                   	nop
-80106df0:	83 c3 04             	add    $0x4,%ebx
-80106df3:	39 df                	cmp    %ebx,%edi
-80106df5:	74 23                	je     80106e1a <freevm+0x5a>
+80107250:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80107256:	eb 0f                	jmp    80107267 <freevm+0x37>
+80107258:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010725f:	90                   	nop
+80107260:	83 c3 04             	add    $0x4,%ebx
+80107263:	39 df                	cmp    %ebx,%edi
+80107265:	74 23                	je     8010728a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106df7:	8b 03                	mov    (%ebx),%eax
-80106df9:	a8 01                	test   $0x1,%al
-80106dfb:	74 f3                	je     80106df0 <freevm+0x30>
+80107267:	8b 03                	mov    (%ebx),%eax
+80107269:	a8 01                	test   $0x1,%al
+8010726b:	74 f3                	je     80107260 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106dfd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010726d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e02:	83 ec 0c             	sub    $0xc,%esp
+80107272:	83 ec 0c             	sub    $0xc,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e05:	83 c3 04             	add    $0x4,%ebx
+80107275:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e08:	05 00 00 00 80       	add    $0x80000000,%eax
+80107278:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e0d:	50                   	push   %eax
-80106e0e:	e8 ad b6 ff ff       	call   801024c0 <kfree>
-80106e13:	83 c4 10             	add    $0x10,%esp
+8010727d:	50                   	push   %eax
+8010727e:	e8 3d b2 ff ff       	call   801024c0 <kfree>
+80107283:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e16:	39 df                	cmp    %ebx,%edi
-80106e18:	75 dd                	jne    80106df7 <freevm+0x37>
+80107286:	39 df                	cmp    %ebx,%edi
+80107288:	75 dd                	jne    80107267 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e1a:	89 75 08             	mov    %esi,0x8(%ebp)
+8010728a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e20:	5b                   	pop    %ebx
-80106e21:	5e                   	pop    %esi
-80106e22:	5f                   	pop    %edi
-80106e23:	5d                   	pop    %ebp
+8010728d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107290:	5b                   	pop    %ebx
+80107291:	5e                   	pop    %esi
+80107292:	5f                   	pop    %edi
+80107293:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e24:	e9 97 b6 ff ff       	jmp    801024c0 <kfree>
+80107294:	e9 27 b2 ff ff       	jmp    801024c0 <kfree>
     panic("freevm: no pgdir");
-80106e29:	83 ec 0c             	sub    $0xc,%esp
-80106e2c:	68 f9 7a 10 80       	push   $0x80107af9
-80106e31:	e8 4a 95 ff ff       	call   80100380 <panic>
-80106e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e3d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e40 <setupkvm>:
-{
-80106e40:	55                   	push   %ebp
-80106e41:	89 e5                	mov    %esp,%ebp
-80106e43:	56                   	push   %esi
-80106e44:	53                   	push   %ebx
+80107299:	83 ec 0c             	sub    $0xc,%esp
+8010729c:	68 89 7f 10 80       	push   $0x80107f89
+801072a1:	e8 da 90 ff ff       	call   80100380 <panic>
+801072a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801072ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801072b0 <setupkvm>:
+{
+801072b0:	55                   	push   %ebp
+801072b1:	89 e5                	mov    %esp,%ebp
+801072b3:	56                   	push   %esi
+801072b4:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e45:	e8 36 b8 ff ff       	call   80102680 <kalloc>
-80106e4a:	89 c6                	mov    %eax,%esi
-80106e4c:	85 c0                	test   %eax,%eax
-80106e4e:	74 42                	je     80106e92 <setupkvm+0x52>
+801072b5:	e8 c6 b3 ff ff       	call   80102680 <kalloc>
+801072ba:	89 c6                	mov    %eax,%esi
+801072bc:	85 c0                	test   %eax,%eax
+801072be:	74 42                	je     80107302 <setupkvm+0x52>
   memset(pgdir, 0, PGSIZE);
-80106e50:	83 ec 04             	sub    $0x4,%esp
+801072c0:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e53:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+801072c3:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e58:	68 00 10 00 00       	push   $0x1000
-80106e5d:	6a 00                	push   $0x0
-80106e5f:	50                   	push   %eax
-80106e60:	e8 fb d7 ff ff       	call   80104660 <memset>
-80106e65:	83 c4 10             	add    $0x10,%esp
+801072c8:	68 00 10 00 00       	push   $0x1000
+801072cd:	6a 00                	push   $0x0
+801072cf:	50                   	push   %eax
+801072d0:	e8 eb d6 ff ff       	call   801049c0 <memset>
+801072d5:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e68:	8b 43 04             	mov    0x4(%ebx),%eax
+801072d8:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e6b:	83 ec 08             	sub    $0x8,%esp
-80106e6e:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e71:	ff 73 0c             	push   0xc(%ebx)
-80106e74:	8b 13                	mov    (%ebx),%edx
-80106e76:	50                   	push   %eax
-80106e77:	29 c1                	sub    %eax,%ecx
-80106e79:	89 f0                	mov    %esi,%eax
-80106e7b:	e8 d0 f9 ff ff       	call   80106850 <mappages>
-80106e80:	83 c4 10             	add    $0x10,%esp
-80106e83:	85 c0                	test   %eax,%eax
-80106e85:	78 19                	js     80106ea0 <setupkvm+0x60>
+801072db:	83 ec 08             	sub    $0x8,%esp
+801072de:	8b 4b 08             	mov    0x8(%ebx),%ecx
+801072e1:	ff 73 0c             	push   0xc(%ebx)
+801072e4:	8b 13                	mov    (%ebx),%edx
+801072e6:	50                   	push   %eax
+801072e7:	29 c1                	sub    %eax,%ecx
+801072e9:	89 f0                	mov    %esi,%eax
+801072eb:	e8 d0 f9 ff ff       	call   80106cc0 <mappages>
+801072f0:	83 c4 10             	add    $0x10,%esp
+801072f3:	85 c0                	test   %eax,%eax
+801072f5:	78 19                	js     80107310 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e87:	83 c3 10             	add    $0x10,%ebx
-80106e8a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106e90:	75 d6                	jne    80106e68 <setupkvm+0x28>
-}
-80106e92:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106e95:	89 f0                	mov    %esi,%eax
-80106e97:	5b                   	pop    %ebx
-80106e98:	5e                   	pop    %esi
-80106e99:	5d                   	pop    %ebp
-80106e9a:	c3                   	ret    
-80106e9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e9f:	90                   	nop
+801072f7:	83 c3 10             	add    $0x10,%ebx
+801072fa:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80107300:	75 d6                	jne    801072d8 <setupkvm+0x28>
+}
+80107302:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107305:	89 f0                	mov    %esi,%eax
+80107307:	5b                   	pop    %ebx
+80107308:	5e                   	pop    %esi
+80107309:	5d                   	pop    %ebp
+8010730a:	c3                   	ret    
+8010730b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010730f:	90                   	nop
       freevm(pgdir);
-80106ea0:	83 ec 0c             	sub    $0xc,%esp
-80106ea3:	56                   	push   %esi
+80107310:	83 ec 0c             	sub    $0xc,%esp
+80107313:	56                   	push   %esi
       return 0;
-80106ea4:	31 f6                	xor    %esi,%esi
+80107314:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106ea6:	e8 15 ff ff ff       	call   80106dc0 <freevm>
+80107316:	e8 15 ff ff ff       	call   80107230 <freevm>
       return 0;
-80106eab:	83 c4 10             	add    $0x10,%esp
+8010731b:	83 c4 10             	add    $0x10,%esp
 }
-80106eae:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106eb1:	89 f0                	mov    %esi,%eax
-80106eb3:	5b                   	pop    %ebx
-80106eb4:	5e                   	pop    %esi
-80106eb5:	5d                   	pop    %ebp
-80106eb6:	c3                   	ret    
-80106eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ebe:	66 90                	xchg   %ax,%ax
-
-80106ec0 <kvmalloc>:
-{
-80106ec0:	55                   	push   %ebp
-80106ec1:	89 e5                	mov    %esp,%ebp
-80106ec3:	83 ec 08             	sub    $0x8,%esp
+8010731e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107321:	89 f0                	mov    %esi,%eax
+80107323:	5b                   	pop    %ebx
+80107324:	5e                   	pop    %esi
+80107325:	5d                   	pop    %ebp
+80107326:	c3                   	ret    
+80107327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010732e:	66 90                	xchg   %ax,%ax
+
+80107330 <kvmalloc>:
+{
+80107330:	55                   	push   %ebp
+80107331:	89 e5                	mov    %esp,%ebp
+80107333:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106ec6:	e8 75 ff ff ff       	call   80106e40 <setupkvm>
-80106ecb:	a3 c4 44 11 80       	mov    %eax,0x801144c4
+80107336:	e8 75 ff ff ff       	call   801072b0 <setupkvm>
+8010733b:	a3 c4 45 11 80       	mov    %eax,0x801145c4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ed0:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ed5:	0f 22 d8             	mov    %eax,%cr3
+80107340:	05 00 00 00 80       	add    $0x80000000,%eax
+80107345:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ed8:	c9                   	leave  
-80106ed9:	c3                   	ret    
-80106eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107348:	c9                   	leave  
+80107349:	c3                   	ret    
+8010734a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106ee0 <clearpteu>:
+80107350 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ee0:	55                   	push   %ebp
-80106ee1:	89 e5                	mov    %esp,%ebp
-80106ee3:	83 ec 08             	sub    $0x8,%esp
-80106ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107350:	55                   	push   %ebp
+80107351:	89 e5                	mov    %esp,%ebp
+80107353:	83 ec 08             	sub    $0x8,%esp
+80107356:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-80106ee9:	8b 55 08             	mov    0x8(%ebp),%edx
+80107359:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-80106eec:	89 c1                	mov    %eax,%ecx
-80106eee:	c1 e9 16             	shr    $0x16,%ecx
+8010735c:	89 c1                	mov    %eax,%ecx
+8010735e:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-80106ef1:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80106ef4:	f6 c2 01             	test   $0x1,%dl
-80106ef7:	75 17                	jne    80106f10 <clearpteu+0x30>
+80107361:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+80107364:	f6 c2 01             	test   $0x1,%dl
+80107367:	75 17                	jne    80107380 <clearpteu+0x30>
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
   if(pte == 0)
     panic("clearpteu");
-80106ef9:	83 ec 0c             	sub    $0xc,%esp
-80106efc:	68 0a 7b 10 80       	push   $0x80107b0a
-80106f01:	e8 7a 94 ff ff       	call   80100380 <panic>
-80106f06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f0d:	8d 76 00             	lea    0x0(%esi),%esi
+80107369:	83 ec 0c             	sub    $0xc,%esp
+8010736c:	68 9a 7f 10 80       	push   $0x80107f9a
+80107371:	e8 0a 90 ff ff       	call   80100380 <panic>
+80107376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010737d:	8d 76 00             	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106f10:	c1 e8 0a             	shr    $0xa,%eax
+80107380:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106f13:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80107383:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80106f19:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106f1e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80107389:	25 fc 0f 00 00       	and    $0xffc,%eax
+8010738e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
   if(pte == 0)
-80106f25:	85 c0                	test   %eax,%eax
-80106f27:	74 d0                	je     80106ef9 <clearpteu+0x19>
+80107395:	85 c0                	test   %eax,%eax
+80107397:	74 d0                	je     80107369 <clearpteu+0x19>
   *pte &= ~PTE_U;
-80106f29:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80107399:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f2c:	c9                   	leave  
-80106f2d:	c3                   	ret    
-80106f2e:	66 90                	xchg   %ax,%ax
+8010739c:	c9                   	leave  
+8010739d:	c3                   	ret    
+8010739e:	66 90                	xchg   %ax,%ax
 
-80106f30 <copyuvm>:
+801073a0 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f30:	55                   	push   %ebp
-80106f31:	89 e5                	mov    %esp,%ebp
-80106f33:	57                   	push   %edi
-80106f34:	56                   	push   %esi
-80106f35:	53                   	push   %ebx
-80106f36:	83 ec 1c             	sub    $0x1c,%esp
+801073a0:	55                   	push   %ebp
+801073a1:	89 e5                	mov    %esp,%ebp
+801073a3:	57                   	push   %edi
+801073a4:	56                   	push   %esi
+801073a5:	53                   	push   %ebx
+801073a6:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f39:	e8 02 ff ff ff       	call   80106e40 <setupkvm>
-80106f3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f41:	85 c0                	test   %eax,%eax
-80106f43:	0f 84 bd 00 00 00    	je     80107006 <copyuvm+0xd6>
+801073a9:	e8 02 ff ff ff       	call   801072b0 <setupkvm>
+801073ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801073b1:	85 c0                	test   %eax,%eax
+801073b3:	0f 84 bd 00 00 00    	je     80107476 <copyuvm+0xd6>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f4c:	85 c9                	test   %ecx,%ecx
-80106f4e:	0f 84 b2 00 00 00    	je     80107006 <copyuvm+0xd6>
-80106f54:	31 f6                	xor    %esi,%esi
-80106f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
+801073b9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801073bc:	85 c9                	test   %ecx,%ecx
+801073be:	0f 84 b2 00 00 00    	je     80107476 <copyuvm+0xd6>
+801073c4:	31 f6                	xor    %esi,%esi
+801073c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801073cd:	8d 76 00             	lea    0x0(%esi),%esi
   if(*pde & PTE_P){
-80106f60:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801073d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
   pde = &pgdir[PDX(va)];
-80106f63:	89 f0                	mov    %esi,%eax
-80106f65:	c1 e8 16             	shr    $0x16,%eax
+801073d3:	89 f0                	mov    %esi,%eax
+801073d5:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-80106f68:	8b 04 81             	mov    (%ecx,%eax,4),%eax
-80106f6b:	a8 01                	test   $0x1,%al
-80106f6d:	75 11                	jne    80106f80 <copyuvm+0x50>
+801073d8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
+801073db:	a8 01                	test   $0x1,%al
+801073dd:	75 11                	jne    801073f0 <copyuvm+0x50>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
-80106f6f:	83 ec 0c             	sub    $0xc,%esp
-80106f72:	68 14 7b 10 80       	push   $0x80107b14
-80106f77:	e8 04 94 ff ff       	call   80100380 <panic>
-80106f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801073df:	83 ec 0c             	sub    $0xc,%esp
+801073e2:	68 a4 7f 10 80       	push   $0x80107fa4
+801073e7:	e8 94 8f ff ff       	call   80100380 <panic>
+801073ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return &pgtab[PTX(va)];
-80106f80:	89 f2                	mov    %esi,%edx
+801073f0:	89 f2                	mov    %esi,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106f82:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801073f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80106f87:	c1 ea 0a             	shr    $0xa,%edx
-80106f8a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106f90:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+801073f7:	c1 ea 0a             	shr    $0xa,%edx
+801073fa:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80107400:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f97:	85 c0                	test   %eax,%eax
-80106f99:	74 d4                	je     80106f6f <copyuvm+0x3f>
+80107407:	85 c0                	test   %eax,%eax
+80107409:	74 d4                	je     801073df <copyuvm+0x3f>
     if(!(*pte & PTE_P))
-80106f9b:	8b 00                	mov    (%eax),%eax
-80106f9d:	a8 01                	test   $0x1,%al
-80106f9f:	0f 84 9f 00 00 00    	je     80107044 <copyuvm+0x114>
+8010740b:	8b 00                	mov    (%eax),%eax
+8010740d:	a8 01                	test   $0x1,%al
+8010740f:	0f 84 9f 00 00 00    	je     801074b4 <copyuvm+0x114>
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
-80106fa5:	89 c7                	mov    %eax,%edi
+80107415:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80106fa7:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107417:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010741c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106faf:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+8010741f:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80106fb5:	e8 c6 b6 ff ff       	call   80102680 <kalloc>
-80106fba:	89 c3                	mov    %eax,%ebx
-80106fbc:	85 c0                	test   %eax,%eax
-80106fbe:	74 64                	je     80107024 <copyuvm+0xf4>
+80107425:	e8 56 b2 ff ff       	call   80102680 <kalloc>
+8010742a:	89 c3                	mov    %eax,%ebx
+8010742c:	85 c0                	test   %eax,%eax
+8010742e:	74 64                	je     80107494 <copyuvm+0xf4>
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106fc0:	83 ec 04             	sub    $0x4,%esp
-80106fc3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106fc9:	68 00 10 00 00       	push   $0x1000
-80106fce:	57                   	push   %edi
-80106fcf:	50                   	push   %eax
-80106fd0:	e8 2b d7 ff ff       	call   80104700 <memmove>
+80107430:	83 ec 04             	sub    $0x4,%esp
+80107433:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80107439:	68 00 10 00 00       	push   $0x1000
+8010743e:	57                   	push   %edi
+8010743f:	50                   	push   %eax
+80107440:	e8 1b d6 ff ff       	call   80104a60 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106fd5:	58                   	pop    %eax
-80106fd6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106fdc:	5a                   	pop    %edx
-80106fdd:	ff 75 e4             	push   -0x1c(%ebp)
-80106fe0:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106fe5:	89 f2                	mov    %esi,%edx
-80106fe7:	50                   	push   %eax
-80106fe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106feb:	e8 60 f8 ff ff       	call   80106850 <mappages>
-80106ff0:	83 c4 10             	add    $0x10,%esp
-80106ff3:	85 c0                	test   %eax,%eax
-80106ff5:	78 21                	js     80107018 <copyuvm+0xe8>
+80107445:	58                   	pop    %eax
+80107446:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010744c:	5a                   	pop    %edx
+8010744d:	ff 75 e4             	push   -0x1c(%ebp)
+80107450:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107455:	89 f2                	mov    %esi,%edx
+80107457:	50                   	push   %eax
+80107458:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010745b:	e8 60 f8 ff ff       	call   80106cc0 <mappages>
+80107460:	83 c4 10             	add    $0x10,%esp
+80107463:	85 c0                	test   %eax,%eax
+80107465:	78 21                	js     80107488 <copyuvm+0xe8>
   for(i = 0; i < sz; i += PGSIZE){
-80106ff7:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ffd:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80107000:	0f 87 5a ff ff ff    	ja     80106f60 <copyuvm+0x30>
+80107467:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010746d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107470:	0f 87 5a ff ff ff    	ja     801073d0 <copyuvm+0x30>
   return d;
 
 bad:
   freevm(d);
   return 0;
 }
-80107006:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80107009:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010700c:	5b                   	pop    %ebx
-8010700d:	5e                   	pop    %esi
-8010700e:	5f                   	pop    %edi
-8010700f:	5d                   	pop    %ebp
-80107010:	c3                   	ret    
-80107011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107476:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107479:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010747c:	5b                   	pop    %ebx
+8010747d:	5e                   	pop    %esi
+8010747e:	5f                   	pop    %edi
+8010747f:	5d                   	pop    %ebp
+80107480:	c3                   	ret    
+80107481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       kfree(mem);
-80107018:	83 ec 0c             	sub    $0xc,%esp
-8010701b:	53                   	push   %ebx
-8010701c:	e8 9f b4 ff ff       	call   801024c0 <kfree>
+80107488:	83 ec 0c             	sub    $0xc,%esp
+8010748b:	53                   	push   %ebx
+8010748c:	e8 2f b0 ff ff       	call   801024c0 <kfree>
       goto bad;
-80107021:	83 c4 10             	add    $0x10,%esp
+80107491:	83 c4 10             	add    $0x10,%esp
   freevm(d);
-80107024:	83 ec 0c             	sub    $0xc,%esp
-80107027:	ff 75 e0             	push   -0x20(%ebp)
-8010702a:	e8 91 fd ff ff       	call   80106dc0 <freevm>
+80107494:	83 ec 0c             	sub    $0xc,%esp
+80107497:	ff 75 e0             	push   -0x20(%ebp)
+8010749a:	e8 91 fd ff ff       	call   80107230 <freevm>
   return 0;
-8010702f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80107036:	83 c4 10             	add    $0x10,%esp
+8010749f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+801074a6:	83 c4 10             	add    $0x10,%esp
 }
-80107039:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010703c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010703f:	5b                   	pop    %ebx
-80107040:	5e                   	pop    %esi
-80107041:	5f                   	pop    %edi
-80107042:	5d                   	pop    %ebp
-80107043:	c3                   	ret    
+801074a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801074ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801074af:	5b                   	pop    %ebx
+801074b0:	5e                   	pop    %esi
+801074b1:	5f                   	pop    %edi
+801074b2:	5d                   	pop    %ebp
+801074b3:	c3                   	ret    
       panic("copyuvm: page not present");
-80107044:	83 ec 0c             	sub    $0xc,%esp
-80107047:	68 2e 7b 10 80       	push   $0x80107b2e
-8010704c:	e8 2f 93 ff ff       	call   80100380 <panic>
-80107051:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80107058:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010705f:	90                   	nop
+801074b4:	83 ec 0c             	sub    $0xc,%esp
+801074b7:	68 be 7f 10 80       	push   $0x80107fbe
+801074bc:	e8 bf 8e ff ff       	call   80100380 <panic>
+801074c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074cf:	90                   	nop
 
-80107060 <uva2ka>:
+801074d0 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107060:	55                   	push   %ebp
-80107061:	89 e5                	mov    %esp,%ebp
-80107063:	8b 45 0c             	mov    0xc(%ebp),%eax
+801074d0:	55                   	push   %ebp
+801074d1:	89 e5                	mov    %esp,%ebp
+801074d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-80107066:	8b 55 08             	mov    0x8(%ebp),%edx
+801074d6:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-80107069:	89 c1                	mov    %eax,%ecx
-8010706b:	c1 e9 16             	shr    $0x16,%ecx
+801074d9:	89 c1                	mov    %eax,%ecx
+801074db:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-8010706e:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80107071:	f6 c2 01             	test   $0x1,%dl
-80107074:	0f 84 00 01 00 00    	je     8010717a <uva2ka.cold>
+801074de:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+801074e1:	f6 c2 01             	test   $0x1,%dl
+801074e4:	0f 84 00 01 00 00    	je     801075ea <uva2ka.cold>
   return &pgtab[PTX(va)];
-8010707a:	c1 e8 0c             	shr    $0xc,%eax
+801074ea:	c1 e8 0c             	shr    $0xc,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-8010707d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+801074ed:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   if((*pte & PTE_P) == 0)
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107083:	5d                   	pop    %ebp
+801074f3:	5d                   	pop    %ebp
   return &pgtab[PTX(va)];
-80107084:	25 ff 03 00 00       	and    $0x3ff,%eax
+801074f4:	25 ff 03 00 00       	and    $0x3ff,%eax
   if((*pte & PTE_P) == 0)
-80107089:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
+801074f9:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
   if((*pte & PTE_U) == 0)
-80107090:	89 c2                	mov    %eax,%edx
+80107500:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107092:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107502:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107097:	83 e2 05             	and    $0x5,%edx
+80107507:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010709a:	05 00 00 00 80       	add    $0x80000000,%eax
-8010709f:	83 fa 05             	cmp    $0x5,%edx
-801070a2:	ba 00 00 00 00       	mov    $0x0,%edx
-801070a7:	0f 45 c2             	cmovne %edx,%eax
-}
-801070aa:	c3                   	ret    
-801070ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801070af:	90                   	nop
+8010750a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010750f:	83 fa 05             	cmp    $0x5,%edx
+80107512:	ba 00 00 00 00       	mov    $0x0,%edx
+80107517:	0f 45 c2             	cmovne %edx,%eax
+}
+8010751a:	c3                   	ret    
+8010751b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010751f:	90                   	nop
 
-801070b0 <copyout>:
+80107520 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-801070b0:	55                   	push   %ebp
-801070b1:	89 e5                	mov    %esp,%ebp
-801070b3:	57                   	push   %edi
-801070b4:	56                   	push   %esi
-801070b5:	53                   	push   %ebx
-801070b6:	83 ec 0c             	sub    $0xc,%esp
-801070b9:	8b 75 14             	mov    0x14(%ebp),%esi
-801070bc:	8b 45 0c             	mov    0xc(%ebp),%eax
-801070bf:	8b 55 10             	mov    0x10(%ebp),%edx
+80107520:	55                   	push   %ebp
+80107521:	89 e5                	mov    %esp,%ebp
+80107523:	57                   	push   %edi
+80107524:	56                   	push   %esi
+80107525:	53                   	push   %ebx
+80107526:	83 ec 0c             	sub    $0xc,%esp
+80107529:	8b 75 14             	mov    0x14(%ebp),%esi
+8010752c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010752f:	8b 55 10             	mov    0x10(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-801070c2:	85 f6                	test   %esi,%esi
-801070c4:	75 51                	jne    80107117 <copyout+0x67>
-801070c6:	e9 a5 00 00 00       	jmp    80107170 <copyout+0xc0>
-801070cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801070cf:	90                   	nop
+80107532:	85 f6                	test   %esi,%esi
+80107534:	75 51                	jne    80107587 <copyout+0x67>
+80107536:	e9 a5 00 00 00       	jmp    801075e0 <copyout+0xc0>
+8010753b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010753f:	90                   	nop
   return (char*)P2V(PTE_ADDR(*pte));
-801070d0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801070d6:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
+80107540:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80107546:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
-801070dc:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
-801070e2:	74 75                	je     80107159 <copyout+0xa9>
+8010754c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
+80107552:	74 75                	je     801075c9 <copyout+0xa9>
       return -1;
     n = PGSIZE - (va - va0);
-801070e4:	89 fb                	mov    %edi,%ebx
+80107554:	89 fb                	mov    %edi,%ebx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-801070e6:	89 55 10             	mov    %edx,0x10(%ebp)
+80107556:	89 55 10             	mov    %edx,0x10(%ebp)
     n = PGSIZE - (va - va0);
-801070e9:	29 c3                	sub    %eax,%ebx
-801070eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801070f1:	39 f3                	cmp    %esi,%ebx
-801070f3:	0f 47 de             	cmova  %esi,%ebx
+80107559:	29 c3                	sub    %eax,%ebx
+8010755b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107561:	39 f3                	cmp    %esi,%ebx
+80107563:	0f 47 de             	cmova  %esi,%ebx
     memmove(pa0 + (va - va0), buf, n);
-801070f6:	29 f8                	sub    %edi,%eax
-801070f8:	83 ec 04             	sub    $0x4,%esp
-801070fb:	01 c1                	add    %eax,%ecx
-801070fd:	53                   	push   %ebx
-801070fe:	52                   	push   %edx
-801070ff:	51                   	push   %ecx
-80107100:	e8 fb d5 ff ff       	call   80104700 <memmove>
+80107566:	29 f8                	sub    %edi,%eax
+80107568:	83 ec 04             	sub    $0x4,%esp
+8010756b:	01 c1                	add    %eax,%ecx
+8010756d:	53                   	push   %ebx
+8010756e:	52                   	push   %edx
+8010756f:	51                   	push   %ecx
+80107570:	e8 eb d4 ff ff       	call   80104a60 <memmove>
     len -= n;
     buf += n;
-80107105:	8b 55 10             	mov    0x10(%ebp),%edx
+80107575:	8b 55 10             	mov    0x10(%ebp),%edx
     va = va0 + PGSIZE;
-80107108:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
+80107578:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
   while(len > 0){
-8010710e:	83 c4 10             	add    $0x10,%esp
+8010757e:	83 c4 10             	add    $0x10,%esp
     buf += n;
-80107111:	01 da                	add    %ebx,%edx
+80107581:	01 da                	add    %ebx,%edx
   while(len > 0){
-80107113:	29 de                	sub    %ebx,%esi
-80107115:	74 59                	je     80107170 <copyout+0xc0>
+80107583:	29 de                	sub    %ebx,%esi
+80107585:	74 59                	je     801075e0 <copyout+0xc0>
   if(*pde & PTE_P){
-80107117:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80107587:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pde = &pgdir[PDX(va)];
-8010711a:	89 c1                	mov    %eax,%ecx
+8010758a:	89 c1                	mov    %eax,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-8010711c:	89 c7                	mov    %eax,%edi
+8010758c:	89 c7                	mov    %eax,%edi
   pde = &pgdir[PDX(va)];
-8010711e:	c1 e9 16             	shr    $0x16,%ecx
+8010758e:	c1 e9 16             	shr    $0x16,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-80107121:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80107591:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
   if(*pde & PTE_P){
-80107127:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
-8010712a:	f6 c1 01             	test   $0x1,%cl
-8010712d:	0f 84 4e 00 00 00    	je     80107181 <copyout.cold>
+80107597:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
+8010759a:	f6 c1 01             	test   $0x1,%cl
+8010759d:	0f 84 4e 00 00 00    	je     801075f1 <copyout.cold>
   return &pgtab[PTX(va)];
-80107133:	89 fb                	mov    %edi,%ebx
+801075a3:	89 fb                	mov    %edi,%ebx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107135:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+801075a5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-8010713b:	c1 eb 0c             	shr    $0xc,%ebx
-8010713e:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
+801075ab:	c1 eb 0c             	shr    $0xc,%ebx
+801075ae:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   if((*pte & PTE_P) == 0)
-80107144:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
+801075b4:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
   if((*pte & PTE_U) == 0)
-8010714b:	89 d9                	mov    %ebx,%ecx
-8010714d:	83 e1 05             	and    $0x5,%ecx
-80107150:	83 f9 05             	cmp    $0x5,%ecx
-80107153:	0f 84 77 ff ff ff    	je     801070d0 <copyout+0x20>
+801075bb:	89 d9                	mov    %ebx,%ecx
+801075bd:	83 e1 05             	and    $0x5,%ecx
+801075c0:	83 f9 05             	cmp    $0x5,%ecx
+801075c3:	0f 84 77 ff ff ff    	je     80107540 <copyout+0x20>
   }
   return 0;
 }
-80107159:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-8010715c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801075cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80107161:	5b                   	pop    %ebx
-80107162:	5e                   	pop    %esi
-80107163:	5f                   	pop    %edi
-80107164:	5d                   	pop    %ebp
-80107165:	c3                   	ret    
-80107166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010716d:	8d 76 00             	lea    0x0(%esi),%esi
-80107170:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801075d1:	5b                   	pop    %ebx
+801075d2:	5e                   	pop    %esi
+801075d3:	5f                   	pop    %edi
+801075d4:	5d                   	pop    %ebp
+801075d5:	c3                   	ret    
+801075d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801075dd:	8d 76 00             	lea    0x0(%esi),%esi
+801075e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80107173:	31 c0                	xor    %eax,%eax
+801075e3:	31 c0                	xor    %eax,%eax
 }
-80107175:	5b                   	pop    %ebx
-80107176:	5e                   	pop    %esi
-80107177:	5f                   	pop    %edi
-80107178:	5d                   	pop    %ebp
-80107179:	c3                   	ret    
+801075e5:	5b                   	pop    %ebx
+801075e6:	5e                   	pop    %esi
+801075e7:	5f                   	pop    %edi
+801075e8:	5d                   	pop    %ebp
+801075e9:	c3                   	ret    
 
-8010717a <uva2ka.cold>:
+801075ea <uva2ka.cold>:
   if((*pte & PTE_P) == 0)
-8010717a:	a1 00 00 00 00       	mov    0x0,%eax
-8010717f:	0f 0b                	ud2    
+801075ea:	a1 00 00 00 00       	mov    0x0,%eax
+801075ef:	0f 0b                	ud2    
 
-80107181 <copyout.cold>:
-80107181:	a1 00 00 00 00       	mov    0x0,%eax
-80107186:	0f 0b                	ud2    
+801075f1 <copyout.cold>:
+801075f1:	a1 00 00 00 00       	mov    0x0,%eax
+801075f6:	0f 0b                	ud2    
diff -u xv6-public-org/kernel.sym xv6-public/kernel.sym
--- xv6-public-org/kernel.sym	2022-09-04 11:47:07.295925195 +0530
+++ xv6-public/kernel.sym	2022-09-05 23:16:26.825907044 +0530
@@ -4,7 +4,7 @@
 8010ef58 panicked
 80100400 consputc.part.0
 80100600 printint
-80107210 digits.0
+80107670 digits.0
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -22,9 +22,9 @@
 00000000 kalloc.c
 00000000 kbd.c
 8011167c shift.1
-80107540 shiftcode
-80107440 togglecode
-80107420 charcode.0
+801079a0 shiftcode
+801078a0 togglecode
+80107880 charcode.0
 80108200 normalmap
 80108100 shiftmap
 80108000 ctlmap
@@ -40,464 +40,472 @@
 00000000 picirq.c
 00000000 pipe.c
 00000000 proc.c
-801037b0 allocproc
+801037b0 wakeup1
+801037f0 allocproc
 8010a000 first.1
-80113c54 initproc
-801077ec states.0
+80113d54 initproc
+80107c5c states.0
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80107860 syscalls
+80107ce0 syscalls
 00000000 sysfile.c
-80104ad0 create
+80104e30 create
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105ba0 uartgetc
-801144c0 uart
+80106010 uartgetc
+801145c0 uart
 00000000 vm.c
-801067a0 deallocuvm.part.0
-80106850 mappages
+80106c10 deallocuvm.part.0
+80106cc0 mappages
 8010a420 kmap
-8010717a uva2ka.cold
-80107181 copyout.cold
+801075ea uva2ka.cold
+801075f1 copyout.cold
 80100280 consoleread
-801066ef vector242
-80106146 vector119
+80106b5f vector242
+801065b6 vector119
 8010000c entry
-80106026 vector87
-8010601d vector86
-80104820 safestrcpy
-80104df0 sys_close
-8010675b vector251
-8010604a vector91
-80105e40 vector33
-8010632f vector162
-80103ff0 yield
+80106496 vector87
+8010648d vector86
+80104b80 safestrcpy
+80105150 sys_close
+80106bcb vector251
+801064ba vector91
+801062b0 vector33
+8010679f vector162
+80104000 yield
 801116a0 log
 80111640 kmem
-80106593 vector213
-801060e3 vector108
-80105bd0 uartinit
-80105e9a vector43
+80106a03 vector213
+80106553 vector108
+80106040 uartinit
+8010630a vector43
 80102910 lapiceoi
-80106353 vector165
-80106443 vector185
+801067c3 vector165
+801068b3 vector185
 801023d0 ioapicinit
-80106122 vector115
+80106592 vector115
 80101020 fileread
-80106161 vector122
-80105710 sys_sbrk
+801065d1 vector122
+80105a70 sys_sbrk
 80111780 ioapicid
-801062e7 vector156
-80106713 vector245
+80104500 thread_exit
+80106757 vector156
+80106b83 vector245
 80111634 ioapic
-80106473 vector189
-80105d64 vector7
-80105f3c vector61
-80105def vector24
-801060fe vector111
-801064f7 vector200
-80105f72 vector67
-8010620f vector138
-80105fb1 vector74
-80103cd0 sched
-80104700 memmove
-80105f18 vector57
-80104a60 syscall
-8010659f vector214
-80106092 vector99
-80103950 cpuid
+801068e3 vector189
+801061d4 vector7
+801063ac vector61
+8010625f vector24
+8010656e vector111
+80106967 vector200
+801063e2 vector67
+8010667f vector138
+80106421 vector74
+80103d10 sched
+80104a60 memmove
+80106388 vector57
+80104dc0 syscall
+80106a0f vector214
+80106502 vector99
+80103990 cpuid
 80101b90 writei
-80106233 vector141
-80105690 sys_fork
+801066a3 vector141
+801059f0 sys_fork
 8010a520 bcache
-801063a7 vector172
-801066e3 vector241
-801043f0 getcallerpcs
-80105330 sys_mkdir
-80106773 vector253
-80105d40 vector3
-80105d37 vector2
+80106817 vector172
+80106b53 vector241
+80104750 getcallerpcs
+80105690 sys_mkdir
+80106be3 vector253
+801061b0 vector3
+801061a7 vector2
 80101cc0 namecmp
-8010663b vector227
-8010656f vector210
-801049e0 argstr
-80106617 vector224
-80105e88 vector41
+80106aab vector227
+801069df vector210
+80104d40 argstr
+80106a87 vector224
+801062f8 vector41
 801006a0 cprintf
 80100ea0 filedup
 801020a0 namei
-80105dd4 vector21
+80106244 vector21
 80100040 binit
-801063e3 vector177
-8010613d vector118
-80105f8d vector70
-80105f84 vector69
-801066b3 vector237
-80105f57 vector64
-80105e0a vector27
-801061c7 vector132
-8010644f vector186
-80104cf0 sys_read
-801065c3 vector217
-80104890 fetchint
-80106e40 setupkvm
-80104760 memcpy
-80106dc0 freevm
-80105d2e vector1
-801063ef vector178
-80105e6d vector38
+80106853 vector177
+801065ad vector118
+801063fd vector70
+801063f4 vector69
+80106b23 vector237
+801063c7 vector64
+8010627a vector27
+80106637 vector132
+801068bf vector186
+80105050 sys_read
+80106a33 vector217
+80104bf0 fetchint
+801072b0 setupkvm
+80104ac0 memcpy
+80107230 freevm
+8010619e vector1
+8010685f vector178
+801062dd vector38
 801024c0 kfree
-801066bf vector238
-801038f0 mycpu
+80106b2f vector238
+80103930 mycpu
 801018b0 iput
-801061d3 vector133
-80105fa8 vector73
-80106257 vector144
-8010677f vector254
+80106643 vector133
+80106418 vector73
+801066c7 vector144
+80106bef vector254
 80101520 readsb
 8010a004 nextpid
-801060a4 vector101
-8010657b vector211
+80106514 vector101
+801069eb vector211
 80103210 mpinit
-801063bf vector174
-801066fb vector243
+8010682f vector174
+80106b6b vector243
 80100e10 fileinit
-801043d0 initlock
-80106197 vector128
-801070b0 copyout
-80105ff0 vector81
-80104040 sleep
+80104730 initlock
+80106607 vector128
+80107520 copyout
+80106460 vector81
+80104050 sleep
 80102930 microdelay
-80105d92 vector13
-80105ee2 vector51
-80105da9 vector16
+80106202 vector13
+80106352 vector51
+80106219 vector16
 8010ee80 input
-801066d7 vector240
-80105efd vector54
-80105dc2 vector19
-80106053 vector92
-80106707 vector244
+80106b47 vector240
+8010636d vector54
+80106232 vector19
+801064c3 vector92
+80106b77 vector244
 80101a60 stati
-80106227 vector140
-801056c0 sys_kill
-80105eac vector45
-80105fde vector79
+80106697 vector140
+80105a20 sys_kill
+8010631c vector45
+8010644e vector79
 80103530 pipeclose
-80106653 vector229
-801062ff vector158
-80104e50 sys_fstat
+80106ac3 vector229
+8010676f vector158
+801051b0 sys_fstat
 80100590 consolewrite
-80105e76 vector39
-80106377 vector168
+801062e6 vector39
+801067e7 vector168
+80105ba0 sys_thread_create
 80102dd0 end_op
-80105e52 vector35
-80106110 vector113
+801062c2 vector35
+80106580 vector113
 80102560 freerange
-8010617c vector125
-80106c60 allocuvm
-80105852 trapret
-801065b7 vector216
-80105f4e vector63
-80105e01 vector26
-801064a3 vector193
+801065ec vector125
+801070d0 allocuvm
+80105cbf trapret
+80106a27 vector216
+801063be vector63
+80106271 vector26
+80106913 vector193
 801027f0 lapicinit
-801064c7 vector196
-80106563 vector209
-80105d49 vector4
-8010638f vector170
-801144d0 stack
-801061f7 vector136
-80105d7d vector10
-8010653f vector206
+80106937 vector196
+801069d3 vector209
+801061b9 vector4
+801067ff vector170
+801145d0 stack
+80106667 vector136
+801061ed vector10
+801069af vector206
 80101860 iunlock
-80105760 sys_sleep
-8010678b vector255
-80106413 vector181
-80105f2a vector59
-80106014 vector85
-8010600b vector84
-8010642b vector183
-8010630b vector159
-80106587 vector212
-80104ec0 sys_link
-80105ebe vector47
-80106647 vector228
-80105e91 vector42
-80106119 vector114
-80107060 uva2ka
-801063cb vector175
-8010624b vector143
+80105ac0 sys_sleep
+80106bfb vector255
+80106883 vector181
+8010639a vector59
+80106484 vector85
+8010647b vector84
+8010689b vector183
+8010677b vector159
+801069f7 vector212
+80105220 sys_link
+8010632e vector47
+80106ab7 vector228
+80106301 vector42
+80106589 vector114
+801074d0 uva2ka
+8010683b vector175
+801066bb vector143
 80100e30 filealloc
-80104100 wakeup
-801061af vector130
-8010671f vector246
-80105d74 vector9
-8010623f vector142
-8010609b vector100
-80106503 vector201
-80106ee0 clearpteu
-80103970 myproc
-80105860 tvinit
-80105f33 vector60
-80105de6 vector23
+80104110 wakeup
+8010661f vector130
+80106b8f vector246
+801061e4 vector9
+801066af vector142
+8010650b vector100
+80106973 vector201
+80107350 clearpteu
+801039b0 myproc
+80105cd0 tvinit
+801063a3 vector60
+80106256 vector23
 80101750 idup
-801066a7 vector236
+80106b17 vector236
 801027d0 kbdintr
-801051f0 sys_open
-8010666b vector231
-80105f69 vector66
-80105e1c vector29
+80105550 sys_open
+80106adb vector231
+801063d9 vector66
+8010628c vector29
 80101a90 readi
-801061eb vector135
+8010665b vector135
 80100880 consoleintr
-80104160 kill
-80105fcc vector77
+80104170 kill
+8010643c vector77
 80101610 ialloc
-80106407 vector180
-801144c4 kpgdir
-80106557 vector208
+80106877 vector180
+801145c4 kpgdir
+801069c7 vector208
 801029d0 cmostime
-80105d10 uartintr
-80106089 vector98
-80106080 vector97
-801063d7 vector176
-801064af vector194
-80105e37 vector32
-801154d0 end
-801064eb vector199
-801061bb vector131
-80106767 vector252
+80106180 uartintr
+801064f9 vector98
+801064f0 vector97
+80106847 vector176
+8010691f vector194
+801062a7 vector32
+801155d0 end
+8010695b vector199
+8010662b vector131
+80106bd7 vector252
 801010b0 filewrite
-80105d25 vector0
-80104920 argint
+80106195 vector0
+80104c80 argint
 80100ab0 exec
-80106263 vector145
-80104d70 sys_write
-80104540 release
-801048d0 fetchstr
-801060da vector107
-80105e7f vector40
-80103ec0 wait
-801060ad vector102
+801066d3 vector145
+801050d0 sys_write
+801048a0 release
+80104c30 fetchstr
+8010654a vector107
+801062ef vector40
+80103ed0 wait
+8010651d vector102
 80109000 entrypgdir
 0010000c _start
-80105f0f vector56
-80105f7b vector68
-80105d5b vector6
+8010637f vector56
+801063eb vector68
+801061cb vector6
 8010a48c _binary_initcode_end
 80100000 multiboot_header
-801061a3 vector129
-80103c30 scheduler
+80106613 vector129
+80103c70 scheduler
 80101ce0 dirlookup
-801064d3 vector197
+80106943 vector197
 80100ef0 fileclose
 80102d60 begin_op
-801062b7 vector152
-80106ec0 kvmalloc
-8010665f vector230
-80104770 strncmp
-80105e64 vector37
-80106533 vector205
-80106323 vector161
-80113c80 tickslock
+80106727 vector152
+80107330 kvmalloc
+80106acf vector230
+80104ad0 strncmp
+801062d4 vector37
+801069a3 vector205
+80106793 vector161
+80113d80 tickslock
 801035d0 pipewrite
-801047c0 strncpy
-80105f96 vector71
-80106f30 copyuvm
+80104b20 strncpy
+80106406 vector71
+801073a0 copyuvm
 8010ef60 ftable
-80106317 vector160
-80104970 argptr
-801065ab vector215
-801062f3 vector157
-80104c70 sys_dup
-80106107 vector112
+80106787 vector160
+80104cd0 argptr
+80106a1b vector215
+80106763 vector157
+80104fd0 sys_dup
+80106577 vector112
 80100380 panic
-80103880 forkret
-8010641f vector182
-80105d8b vector12
-801046b0 memcmp
+801038c0 forkret
+8010688f vector182
+801061fb vector12
+80104a10 memcmp
 801026f0 kbdgetc
-801060ec vector109
-80105dcb vector20
-80103b10 fork
-80105ef4 vector53
-80105db9 vector18
+8010655c vector109
+8010623b vector20
+80103b50 fork
+80106364 vector53
+80106229 vector18
 0000008a _binary_entryother_size
 801117a0 cpus
-80104340 releasesleep
-8010606e vector95
-80104500 holding
+801046a0 releasesleep
+801064de vector95
+80104860 holding
 801115b4 sb
-801045a0 acquire
-8010662f vector226
+80104900 acquire
+80106a9f vector226
 801020c0 nameiparent
-80105ed0 vector49
-80105ea3 vector44
+80106340 vector49
+80106313 vector44
 80111680 lapic
-80105fd5 vector78
-8010583a alltraps
-801063b3 vector173
-80106134 vector117
-80105ff9 vector82
-801065ff vector222
-80105d6d vector8
-80106293 vector149
+80106445 vector78
+80105ca7 alltraps
+80106823 vector173
+801065a4 vector117
+80106469 vector82
+80106a6f vector222
+801061dd vector8
+80106703 vector149
 801016d0 iupdate
 80108000 data
-80104660 memset
-80106677 vector232
+801049c0 memset
+80106ae7 vector232
 80103060 main
-801069d0 switchkvm
-801060d1 vector106
-801065e7 vector220
-80106041 vector90
-8010633b vector163
-8010668f vector234
+80106e40 switchkvm
+80106541 vector106
+80106a57 vector220
+801064b1 vector90
+801067ab vector163
+80106aff vector234
 80102f40 log_write
-801042e0 acquiresleep
-80105010 sys_unlink
-80105f45 vector62
-80105df8 vector25
-801064df vector198
-8010614f vector120
+80104640 acquiresleep
+80105370 sys_unlink
+801063b5 vector62
+80106268 vector25
+8010694f vector198
+801065bf vector120
 8010a48c _binary_entryother_start
 80102610 kinit1
-80105ed9 vector50
-80105da0 vector15
-801062ab vector151
-80106002 vector83
-80106038 vector89
-8010602f vector88
-80105910 trap
-80105810 sys_uptime
-801063fb vector179
-80105e49 vector34
-80105eb5 vector46
-801061df vector134
-8010660b vector223
-80113cc0 idt
-801065cf vector218
-801038d0 pinit
-80106d90 deallocuvm
-80106623 vector225
+80106349 vector50
+80106210 vector15
+8010671b vector151
+80106472 vector83
+801064a8 vector89
+8010649f vector88
+80105d80 trap
+80105b70 sys_uptime
+8010686b vector179
+801062b9 vector34
+80106325 vector46
+8010664f vector134
+80106a7b vector223
+80113dc0 idt
+80106a3f vector218
+80103910 pinit
+80107200 deallocuvm
+80106a93 vector225
 801028f0 lapicid
-8010645b vector187
-80103a90 growproc
-80104380 holdingsleep
+801068cb vector187
+80103ad0 growproc
+801046e0 holdingsleep
 80111784 ncpu
-80105e25 vector30
-801039a0 userinit
+80106295 vector30
+801039e0 userinit
 801000d0 bread
-8010618e vector127
+801065fe vector127
 801036d0 piperead
-80113c60 ticks
-80106497 vector192
-8010635f vector166
+80113d60 ticks
+80106907 vector192
+801067cf vector166
 80100a60 consoleinit
-80105fc3 vector76
-80105fba vector75
+80106433 vector76
+8010642a vector75
 80102240 ideintr
-801064bb vector195
-8010629f vector150
-80105f21 vector58
-80106737 vector248
-8010616a vector123
-80106077 vector96
-80105e2e vector31
-8010651b vector203
-8010621b vector139
-801062c3 vector153
-80106347 vector164
-801041e0 procdump
-80106158 vector121
-80105cb0 uartputc
-80105d52 vector5
-8010636b vector167
-801062db vector155
-80106743 vector249
+8010692b vector195
+8010670f vector150
+80106391 vector58
+80106ba7 vector248
+801065da vector123
+801064e7 vector96
+8010629e vector31
+8010698b vector203
+8010668b vector139
+80106733 vector153
+801067b7 vector164
+801041f0 procdump
+801065c8 vector121
+80106120 uartputc
+801061c2 vector5
+801067db vector167
+8010674b vector155
+80106bb3 vector249
 801001f0 brelse
-8010674f vector250
-80106173 vector124
-801060f5 vector110
-80106527 vector204
+80106bbf vector250
+801065e3 vector124
+80106565 vector110
+80106997 vector204
 80101780 ilock
-801054d0 sys_exec
-80106203 vector137
+80105830 sys_exec
+80106673 vector137
 8010a460 _binary_initcode_start
-8010487b swtch
-8010672b vector247
-80105ddd vector22
-8010650f vector202
-80106940 seginit
+80104bdb swtch
+80106b9b vector247
+8010624d vector22
+8010697f vector202
+80106db0 seginit
 80101a10 iunlockput
-80105f9f vector72
-80105f06 vector55
-80106185 vector126
-80105f60 vector65
-80105e13 vector28
+8010640f vector72
+80106376 vector55
+801065f5 vector126
+801063d0 vector65
+80106283 vector28
 8010a516 _binary_entryother_end
-80106383 vector169
+801067f3 vector169
 801001b0 bwrite
-80106683 vector233
-801058e0 idtinit
-80103d90 exit
-801056b0 sys_wait
-801056a0 sys_exit
+80106af3 vector233
+80105d50 idtinit
+80103dd0 exit
+80105a10 sys_wait
+80105a00 sys_exit
 80101fe0 dirlink
 0000002c _binary_initcode_size
-8010627b vector147
-801042a0 initsleeplock
+801066eb vector147
+80104600 initsleeplock
 801021c0 ideinit
-80106b70 loaduvm
-801060bf vector104
-8010612b vector116
+80106fe0 loaduvm
+8010652f vector104
+8010659b vector116
 80111d20 ptable
 80102480 ioapicenable
-801044a0 popcli
+80104800 popcli
 8010a008 vectors
-80105eeb vector52
-80105db2 vector17
-80106437 vector184
-80104860 strlen
-801055c0 sys_pipe
+8010635b vector52
+80106222 vector17
+801068a7 vector184
+80104bc0 strlen
+80105920 sys_pipe
 80101560 iinit
 80103410 picinit
-8010654b vector207
-80106af0 inituvm
-8010647f vector190
-801066cb vector239
-80106065 vector94
-8010605c vector93
+801069bb vector207
+80106f60 inituvm
+801068ef vector190
+80105bf0 sys_thread_join
+80106b3b vector239
+801064d5 vector94
+801064cc vector93
 80102cc0 initlog
-80106467 vector188
-80105ec7 vector48
+801068d7 vector188
+801042b0 thread_create
+80106337 vector48
 801022e0 iderw
-801065db vector219
-80106287 vector148
-801065f3 vector221
+80105c00 sys_thread_exit
+80106a4b vector219
+801066f7 vector148
+80106a63 vector221
 80102680 kalloc
 8010f900 devsw
-80105700 sys_getpid
-80105fe7 vector80
-8010639b vector171
-801062cf vector154
-80105e5b vector36
+80105a60 sys_getpid
+80105c10 sys_draw
+80106457 vector80
+8010680b vector171
+8010673f vector154
+801062cb vector36
 80103430 pipealloc
-8010669b vector235
-801060c8 vector105
-80105420 sys_chdir
+80106b0b vector235
+80106538 vector105
+80105780 sys_chdir
 8010f960 icache
-8010626f vector146
-8010648b vector191
-801060b6 vector103
-80105390 sys_mknod
+801066df vector146
+801068fb vector191
+80106526 vector103
+801043e0 thread_join
+801056f0 sys_mknod
 80102940 lapicstartap
-801069e0 switchuvm
-80104450 pushcli
+80106e50 switchuvm
+801047b0 pushcli
 801025b0 kinit2
-80105d84 vector11
-80105d99 vector14
+801061f4 vector11
+80106209 vector14
 80100fd0 filestat
Binary files xv6-public-org/_kill and xv6-public/_kill differ
diff -u xv6-public-org/kill.asm xv6-public/kill.asm
--- xv6-public-org/kill.asm	2022-09-04 11:47:11.245899203 +0530
+++ xv6-public/kill.asm	2022-09-05 23:16:36.625928728 +0530
@@ -53,9 +53,9 @@
     printf(2, "usage: kill pid...\n");
   4a:	50                   	push   %eax
   4b:	50                   	push   %eax
-  4c:	68 38 07 00 00       	push   $0x738
+  4c:	68 58 07 00 00       	push   $0x758
   51:	6a 02                	push   $0x2
-  53:	e8 b8 03 00 00       	call   410 <printf>
+  53:	e8 d8 03 00 00       	call   430 <printf>
     exit();
   58:	e8 56 02 00 00       	call   2b3 <exit>
   5d:	66 90                	xchg   %ax,%ax
@@ -585,569 +585,592 @@
  34b:	b8 0e 00 00 00       	mov    $0xe,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
- 353:	66 90                	xchg   %ax,%ax
- 355:	66 90                	xchg   %ax,%ax
- 357:	66 90                	xchg   %ax,%ax
- 359:	66 90                	xchg   %ax,%ax
- 35b:	66 90                	xchg   %ax,%ax
- 35d:	66 90                	xchg   %ax,%ax
- 35f:	90                   	nop
 
-00000360 <printint>:
+00000353 <thread_create>:
+SYSCALL(thread_create)
+ 353:	b8 16 00 00 00       	mov    $0x16,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <thread_join>:
+SYSCALL(thread_join)
+ 35b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <thread_exit>:
+SYSCALL(thread_exit)
+ 363:	b8 17 00 00 00       	mov    $0x17,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <draw>:
+ 36b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 360:	55                   	push   %ebp
- 361:	89 e5                	mov    %esp,%ebp
- 363:	57                   	push   %edi
- 364:	56                   	push   %esi
- 365:	53                   	push   %ebx
- 366:	83 ec 3c             	sub    $0x3c,%esp
- 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 36c:	89 d1                	mov    %edx,%ecx
+ 38c:	89 d1                	mov    %edx,%ecx
 {
- 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 371:	85 d2                	test   %edx,%edx
- 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
- 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 37d:	74 79                	je     3f8 <printint+0x98>
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
     neg = 1;
- 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 386:	f7 d9                	neg    %ecx
+ 3a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 388:	31 db                	xor    %ebx,%ebx
- 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 38d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 390:	89 c8                	mov    %ecx,%eax
- 392:	31 d2                	xor    %edx,%edx
- 394:	89 cf                	mov    %ecx,%edi
- 396:	f7 75 c4             	divl   -0x3c(%ebp)
- 399:	0f b6 92 ac 07 00 00 	movzbl 0x7ac(%edx),%edx
- 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3a3:	89 d8                	mov    %ebx,%eax
- 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 cc 07 00 00 	movzbl 0x7cc(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3b1:	76 dd                	jbe    390 <printint+0x30>
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
   if(neg)
- 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3b6:	85 c9                	test   %ecx,%ecx
- 3b8:	74 0c                	je     3c6 <printint+0x66>
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
     buf[i++] = '-';
- 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3bf:	89 d8                	mov    %ebx,%eax
+ 3df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3cd:	eb 07                	jmp    3d6 <printint+0x76>
- 3cf:	90                   	nop
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
     putc(fd, buf[i]);
- 3d0:	0f b6 13             	movzbl (%ebx),%edx
- 3d3:	83 eb 01             	sub    $0x1,%ebx
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3d6:	83 ec 04             	sub    $0x4,%esp
- 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3dc:	6a 01                	push   $0x1
- 3de:	56                   	push   %esi
- 3df:	57                   	push   %edi
- 3e0:	e8 ee fe ff ff       	call   2d3 <write>
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ce fe ff ff       	call   2d3 <write>
   while(--i >= 0)
- 3e5:	83 c4 10             	add    $0x10,%esp
- 3e8:	39 de                	cmp    %ebx,%esi
- 3ea:	75 e4                	jne    3d0 <printint+0x70>
-}
- 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ef:	5b                   	pop    %ebx
- 3f0:	5e                   	pop    %esi
- 3f1:	5f                   	pop    %edi
- 3f2:	5d                   	pop    %ebp
- 3f3:	c3                   	ret    
- 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3ff:	eb 87                	jmp    388 <printint+0x28>
- 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 40f:	90                   	nop
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
 
-00000410 <printf>:
+00000430 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 2c             	sub    $0x2c,%esp
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 419:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 41c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 41f:	0f b6 13             	movzbl (%ebx),%edx
- 422:	84 d2                	test   %dl,%dl
- 424:	74 6a                	je     490 <printf+0x80>
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 426:	8d 45 10             	lea    0x10(%ebp),%eax
- 429:	83 c3 01             	add    $0x1,%ebx
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 42c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 42f:	31 c9                	xor    %ecx,%ecx
+ 44f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 431:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 434:	eb 36                	jmp    46c <printf+0x5c>
- 436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43d:	8d 76 00             	lea    0x0(%esi),%esi
- 440:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 443:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 448:	83 f8 25             	cmp    $0x25,%eax
- 44b:	74 15                	je     462 <printf+0x52>
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
   write(fd, &c, 1);
- 44d:	83 ec 04             	sub    $0x4,%esp
- 450:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 453:	6a 01                	push   $0x1
- 455:	57                   	push   %edi
- 456:	56                   	push   %esi
- 457:	e8 77 fe ff ff       	call   2d3 <write>
- 45c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 57 fe ff ff       	call   2d3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 45f:	83 c4 10             	add    $0x10,%esp
+ 47f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 462:	0f b6 13             	movzbl (%ebx),%edx
- 465:	83 c3 01             	add    $0x1,%ebx
- 468:	84 d2                	test   %dl,%dl
- 46a:	74 24                	je     490 <printf+0x80>
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
     c = fmt[i] & 0xff;
- 46c:	0f b6 c2             	movzbl %dl,%eax
+ 48c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 46f:	85 c9                	test   %ecx,%ecx
- 471:	74 cd                	je     440 <printf+0x30>
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
       }
     } else if(state == '%'){
- 473:	83 f9 25             	cmp    $0x25,%ecx
- 476:	75 ea                	jne    462 <printf+0x52>
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
       if(c == 'd'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	0f 84 07 01 00 00    	je     588 <printf+0x178>
- 481:	83 e8 63             	sub    $0x63,%eax
- 484:	83 f8 15             	cmp    $0x15,%eax
- 487:	77 17                	ja     4a0 <printf+0x90>
- 489:	ff 24 85 54 07 00 00 	jmp    *0x754(,%eax,4)
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 74 07 00 00 	jmp    *0x774(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 493:	5b                   	pop    %ebx
- 494:	5e                   	pop    %esi
- 495:	5f                   	pop    %edi
- 496:	5d                   	pop    %ebp
- 497:	c3                   	ret    
- 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 49f:	90                   	nop
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
   write(fd, &c, 1);
- 4a0:	83 ec 04             	sub    $0x4,%esp
- 4a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4a6:	6a 01                	push   $0x1
- 4a8:	57                   	push   %edi
- 4a9:	56                   	push   %esi
- 4aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ae:	e8 20 fe ff ff       	call   2d3 <write>
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 00 fe ff ff       	call   2d3 <write>
         putc(fd, c);
- 4b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4b7:	83 c4 0c             	add    $0xc,%esp
- 4ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4bd:	6a 01                	push   $0x1
- 4bf:	57                   	push   %edi
- 4c0:	56                   	push   %esi
- 4c1:	e8 0d fe ff ff       	call   2d3 <write>
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 ed fd ff ff       	call   2d3 <write>
         putc(fd, c);
- 4c6:	83 c4 10             	add    $0x10,%esp
+ 4e6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4c9:	31 c9                	xor    %ecx,%ecx
- 4cb:	eb 95                	jmp    462 <printf+0x52>
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4d0:	83 ec 0c             	sub    $0xc,%esp
- 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4d8:	6a 00                	push   $0x0
- 4da:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4dd:	8b 10                	mov    (%eax),%edx
- 4df:	89 f0                	mov    %esi,%eax
- 4e1:	e8 7a fe ff ff       	call   360 <printint>
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
         ap++;
- 4e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 4ea:	83 c4 10             	add    $0x10,%esp
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4ed:	31 c9                	xor    %ecx,%ecx
- 4ef:	e9 6e ff ff ff       	jmp    462 <printf+0x52>
- 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 4f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4fb:	8b 10                	mov    (%eax),%edx
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
         ap++;
- 4fd:	83 c0 04             	add    $0x4,%eax
- 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 503:	85 d2                	test   %edx,%edx
- 505:	0f 84 8d 00 00 00    	je     598 <printf+0x188>
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
         while(*s != 0){
- 50b:	0f b6 02             	movzbl (%edx),%eax
+ 52b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 50e:	31 c9                	xor    %ecx,%ecx
+ 52e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 510:	84 c0                	test   %al,%al
- 512:	0f 84 4a ff ff ff    	je     462 <printf+0x52>
- 518:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 51b:	89 d3                	mov    %edx,%ebx
- 51d:	8d 76 00             	lea    0x0(%esi),%esi
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 520:	83 ec 04             	sub    $0x4,%esp
+ 540:	83 ec 04             	sub    $0x4,%esp
           s++;
- 523:	83 c3 01             	add    $0x1,%ebx
- 526:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 529:	6a 01                	push   $0x1
- 52b:	57                   	push   %edi
- 52c:	56                   	push   %esi
- 52d:	e8 a1 fd ff ff       	call   2d3 <write>
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 81 fd ff ff       	call   2d3 <write>
         while(*s != 0){
- 532:	0f b6 03             	movzbl (%ebx),%eax
- 535:	83 c4 10             	add    $0x10,%esp
- 538:	84 c0                	test   %al,%al
- 53a:	75 e4                	jne    520 <printf+0x110>
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
       state = 0;
- 53c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 53f:	31 c9                	xor    %ecx,%ecx
- 541:	e9 1c ff ff ff       	jmp    462 <printf+0x52>
- 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54d:	8d 76 00             	lea    0x0(%esi),%esi
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	e9 7b ff ff ff       	jmp    4da <printf+0xca>
- 55f:	90                   	nop
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
         putc(fd, *ap);
- 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 583:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 00                	mov    (%eax),%eax
+ 586:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
- 56a:	57                   	push   %edi
- 56b:	56                   	push   %esi
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
         putc(fd, *ap);
- 56c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 56f:	e8 5f fd ff ff       	call   2d3 <write>
+ 58f:	e8 3f fd ff ff       	call   2d3 <write>
         ap++;
- 574:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 578:	83 c4 10             	add    $0x10,%esp
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57b:	31 c9                	xor    %ecx,%ecx
- 57d:	e9 e0 fe ff ff       	jmp    462 <printf+0x52>
- 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 588:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 58b:	83 ec 04             	sub    $0x4,%esp
- 58e:	e9 2a ff ff ff       	jmp    4bd <printf+0xad>
- 593:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 597:	90                   	nop
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
           s = "(null)";
- 598:	ba 4c 07 00 00       	mov    $0x74c,%edx
+ 5b8:	ba 6c 07 00 00       	mov    $0x76c,%edx
         while(*s != 0){
- 59d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5a0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5a5:	89 d3                	mov    %edx,%ebx
- 5a7:	e9 74 ff ff ff       	jmp    520 <printf+0x110>
- 5ac:	66 90                	xchg   %ax,%ax
- 5ae:	66 90                	xchg   %ax,%ax
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
 
-000005b0 <free>:
+000005d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5b0:	55                   	push   %ebp
+ 5d0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b1:	a1 64 0a 00 00       	mov    0xa64,%eax
+ 5d1:	a1 84 0a 00 00       	mov    0xa84,%eax
 {
- 5b6:	89 e5                	mov    %esp,%ebp
- 5b8:	57                   	push   %edi
- 5b9:	56                   	push   %esi
- 5ba:	53                   	push   %ebx
- 5bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5c8:	89 c2                	mov    %eax,%edx
- 5ca:	8b 00                	mov    (%eax),%eax
- 5cc:	39 ca                	cmp    %ecx,%edx
- 5ce:	73 30                	jae    600 <free+0x50>
- 5d0:	39 c1                	cmp    %eax,%ecx
- 5d2:	72 04                	jb     5d8 <free+0x28>
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5d4:	39 c2                	cmp    %eax,%edx
- 5d6:	72 f0                	jb     5c8 <free+0x18>
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5de:	39 f8                	cmp    %edi,%eax
- 5e0:	74 30                	je     612 <free+0x62>
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 5e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 5e5:	8b 42 04             	mov    0x4(%edx),%eax
- 5e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5eb:	39 f1                	cmp    %esi,%ecx
- 5ed:	74 3a                	je     629 <free+0x79>
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 5ef:	89 0a                	mov    %ecx,(%edx)
+ 60f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 5f1:	5b                   	pop    %ebx
+ 611:	5b                   	pop    %ebx
   freep = p;
- 5f2:	89 15 64 0a 00 00    	mov    %edx,0xa64
+ 612:	89 15 84 0a 00 00    	mov    %edx,0xa84
 }
- 5f8:	5e                   	pop    %esi
- 5f9:	5f                   	pop    %edi
- 5fa:	5d                   	pop    %ebp
- 5fb:	c3                   	ret    
- 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 600:	39 c2                	cmp    %eax,%edx
- 602:	72 c4                	jb     5c8 <free+0x18>
- 604:	39 c1                	cmp    %eax,%ecx
- 606:	73 c0                	jae    5c8 <free+0x18>
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 60e:	39 f8                	cmp    %edi,%eax
- 610:	75 d0                	jne    5e2 <free+0x32>
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 612:	03 70 04             	add    0x4(%eax),%esi
- 615:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 618:	8b 02                	mov    (%edx),%eax
- 61a:	8b 00                	mov    (%eax),%eax
- 61c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 61f:	8b 42 04             	mov    0x4(%edx),%eax
- 622:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 625:	39 f1                	cmp    %esi,%ecx
- 627:	75 c6                	jne    5ef <free+0x3f>
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
     p->s.size += bp->s.size;
- 629:	03 43 fc             	add    -0x4(%ebx),%eax
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 62c:	89 15 64 0a 00 00    	mov    %edx,0xa64
+ 64c:	89 15 84 0a 00 00    	mov    %edx,0xa84
     p->s.size += bp->s.size;
- 632:	89 42 04             	mov    %eax,0x4(%edx)
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 635:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 638:	89 0a                	mov    %ecx,(%edx)
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
 }
- 63a:	5b                   	pop    %ebx
- 63b:	5e                   	pop    %esi
- 63c:	5f                   	pop    %edi
- 63d:	5d                   	pop    %ebp
- 63e:	c3                   	ret    
- 63f:	90                   	nop
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
 
-00000640 <malloc>:
+00000660 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 640:	55                   	push   %ebp
- 641:	89 e5                	mov    %esp,%ebp
- 643:	57                   	push   %edi
- 644:	56                   	push   %esi
- 645:	53                   	push   %ebx
- 646:	83 ec 1c             	sub    $0x1c,%esp
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 649:	8b 45 08             	mov    0x8(%ebp),%eax
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 64c:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
+ 66c:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 652:	8d 70 07             	lea    0x7(%eax),%esi
- 655:	c1 ee 03             	shr    $0x3,%esi
- 658:	83 c6 01             	add    $0x1,%esi
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 65b:	85 ff                	test   %edi,%edi
- 65d:	0f 84 9d 00 00 00    	je     700 <malloc+0xc0>
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 663:	8b 17                	mov    (%edi),%edx
+ 683:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 665:	8b 4a 04             	mov    0x4(%edx),%ecx
- 668:	39 f1                	cmp    %esi,%ecx
- 66a:	73 6a                	jae    6d6 <malloc+0x96>
- 66c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 671:	39 de                	cmp    %ebx,%esi
- 673:	0f 43 de             	cmovae %esi,%ebx
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 676:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 67d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 680:	eb 17                	jmp    699 <malloc+0x59>
- 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 688:	8b 02                	mov    (%edx),%eax
+ 6a8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 68a:	8b 48 04             	mov    0x4(%eax),%ecx
- 68d:	39 f1                	cmp    %esi,%ecx
- 68f:	73 4f                	jae    6e0 <malloc+0xa0>
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 691:	8b 3d 64 0a 00 00    	mov    0xa64,%edi
- 697:	89 c2                	mov    %eax,%edx
- 699:	39 d7                	cmp    %edx,%edi
- 69b:	75 eb                	jne    688 <malloc+0x48>
+ 6b1:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 69d:	83 ec 0c             	sub    $0xc,%esp
- 6a0:	ff 75 e4             	push   -0x1c(%ebp)
- 6a3:	e8 93 fc ff ff       	call   33b <sbrk>
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 73 fc ff ff       	call   33b <sbrk>
   if(p == (char*)-1)
- 6a8:	83 c4 10             	add    $0x10,%esp
- 6ab:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ae:	74 1c                	je     6cc <malloc+0x8c>
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
   hp->s.size = nu;
- 6b0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6b3:	83 ec 0c             	sub    $0xc,%esp
- 6b6:	83 c0 08             	add    $0x8,%eax
- 6b9:	50                   	push   %eax
- 6ba:	e8 f1 fe ff ff       	call   5b0 <free>
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
   return freep;
- 6bf:	8b 15 64 0a 00 00    	mov    0xa64,%edx
+ 6df:	8b 15 84 0a 00 00    	mov    0xa84,%edx
       if((p = morecore(nunits)) == 0)
- 6c5:	83 c4 10             	add    $0x10,%esp
- 6c8:	85 d2                	test   %edx,%edx
- 6ca:	75 bc                	jne    688 <malloc+0x48>
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
         return 0;
   }
 }
- 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6cf:	31 c0                	xor    %eax,%eax
+ 6ef:	31 c0                	xor    %eax,%eax
 }
- 6d1:	5b                   	pop    %ebx
- 6d2:	5e                   	pop    %esi
- 6d3:	5f                   	pop    %edi
- 6d4:	5d                   	pop    %ebp
- 6d5:	c3                   	ret    
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
     if(p->s.size >= nunits){
- 6d6:	89 d0                	mov    %edx,%eax
- 6d8:	89 fa                	mov    %edi,%edx
- 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6e0:	39 ce                	cmp    %ecx,%esi
- 6e2:	74 4c                	je     730 <malloc+0xf0>
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
         p->s.size -= nunits;
- 6e4:	29 f1                	sub    %esi,%ecx
- 6e6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6ec:	89 70 04             	mov    %esi,0x4(%eax)
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6ef:	89 15 64 0a 00 00    	mov    %edx,0xa64
+ 70f:	89 15 84 0a 00 00    	mov    %edx,0xa84
 }
- 6f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 6f8:	83 c0 08             	add    $0x8,%eax
+ 718:	83 c0 08             	add    $0x8,%eax
 }
- 6fb:	5b                   	pop    %ebx
- 6fc:	5e                   	pop    %esi
- 6fd:	5f                   	pop    %edi
- 6fe:	5d                   	pop    %ebp
- 6ff:	c3                   	ret    
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 700:	c7 05 64 0a 00 00 68 	movl   $0xa68,0xa64
- 707:	0a 00 00 
+ 720:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 727:	0a 00 00 
     base.s.size = 0;
- 70a:	bf 68 0a 00 00       	mov    $0xa68,%edi
+ 72a:	bf 88 0a 00 00       	mov    $0xa88,%edi
     base.s.ptr = freep = prevp = &base;
- 70f:	c7 05 68 0a 00 00 68 	movl   $0xa68,0xa68
- 716:	0a 00 00 
+ 72f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 736:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 719:	89 fa                	mov    %edi,%edx
+ 739:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 71b:	c7 05 6c 0a 00 00 00 	movl   $0x0,0xa6c
- 722:	00 00 00 
+ 73b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 742:	00 00 00 
     if(p->s.size >= nunits){
- 725:	e9 42 ff ff ff       	jmp    66c <malloc+0x2c>
- 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 730:	8b 08                	mov    (%eax),%ecx
- 732:	89 0a                	mov    %ecx,(%edx)
- 734:	eb b9                	jmp    6ef <malloc+0xaf>
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
Binary files xv6-public-org/kill.o and xv6-public/kill.o differ
diff -u xv6-public-org/kill.sym xv6-public/kill.sym
--- xv6-public-org/kill.sym	2022-09-04 11:47:11.249901204 +0530
+++ xv6-public/kill.sym	2022-09-05 23:16:36.629928738 +0530
@@ -1,18 +1,19 @@
 00000000 kill.c
 00000000 ulib.c
 00000000 printf.c
-00000360 printint
-000007ac digits.0
+00000380 printint
+000007cc digits.0
 00000000 umalloc.c
-00000a64 freep
-00000a68 base
+00000a84 freep
+00000a88 base
 00000060 strcpy
-00000410 printf
+00000430 printf
+00000363 thread_exit
 00000280 memmove
 000002fb mknod
 00000180 gets
 00000333 getpid
-00000640 malloc
+00000660 malloc
 00000343 sleep
 000002c3 pipe
 000002d3 write
@@ -26,20 +27,23 @@
 000002ab fork
 0000033b sbrk
 0000034b uptime
-00000a64 __bss_start
+00000a84 __bss_start
 00000120 memset
 00000000 main
 00000090 strcmp
 0000032b dup
 000001f0 stat
-00000a64 _edata
-00000a70 _end
+00000a84 _edata
+00000a90 _end
 00000313 link
 000002b3 exit
 00000240 atoi
+0000036b draw
 000000f0 strlen
 000002f3 open
 00000140 strchr
+00000353 thread_create
 0000031b mkdir
 000002db close
-000005b0 free
+0000035b thread_join
+000005d0 free
Binary files xv6-public-org/lapic.o and xv6-public/lapic.o differ
Binary files xv6-public-org/_ln and xv6-public/_ln differ
diff -u xv6-public-org/ln.asm xv6-public/ln.asm
--- xv6-public-org/ln.asm	2022-09-04 11:47:11.313933205 +0530
+++ xv6-public/ln.asm	2022-09-05 23:16:36.713928920 +0530
@@ -27,9 +27,9 @@
     printf(2, "Usage: ln old new\n");
   17:	52                   	push   %edx
   18:	52                   	push   %edx
-  19:	68 38 07 00 00       	push   $0x738
+  19:	68 58 07 00 00       	push   $0x758
   1e:	6a 02                	push   $0x2
-  20:	e8 eb 03 00 00       	call   410 <printf>
+  20:	e8 0b 04 00 00       	call   430 <printf>
     exit();
   25:	e8 89 02 00 00       	call   2b3 <exit>
   }
@@ -48,9 +48,9 @@
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
   43:	ff 73 08             	push   0x8(%ebx)
   46:	ff 73 04             	push   0x4(%ebx)
-  49:	68 4b 07 00 00       	push   $0x74b
+  49:	68 6b 07 00 00       	push   $0x76b
   4e:	6a 02                	push   $0x2
-  50:	e8 bb 03 00 00       	call   410 <printf>
+  50:	e8 db 03 00 00       	call   430 <printf>
   55:	83 c4 10             	add    $0x10,%esp
   58:	eb e4                	jmp    3e <main+0x3e>
   5a:	66 90                	xchg   %ax,%ax
@@ -581,569 +581,592 @@
  34b:	b8 0e 00 00 00       	mov    $0xe,%eax
  350:	cd 40                	int    $0x40
  352:	c3                   	ret    
- 353:	66 90                	xchg   %ax,%ax
- 355:	66 90                	xchg   %ax,%ax
- 357:	66 90                	xchg   %ax,%ax
- 359:	66 90                	xchg   %ax,%ax
- 35b:	66 90                	xchg   %ax,%ax
- 35d:	66 90                	xchg   %ax,%ax
- 35f:	90                   	nop
 
-00000360 <printint>:
+00000353 <thread_create>:
+SYSCALL(thread_create)
+ 353:	b8 16 00 00 00       	mov    $0x16,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <thread_join>:
+SYSCALL(thread_join)
+ 35b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <thread_exit>:
+SYSCALL(thread_exit)
+ 363:	b8 17 00 00 00       	mov    $0x17,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <draw>:
+ 36b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 360:	55                   	push   %ebp
- 361:	89 e5                	mov    %esp,%ebp
- 363:	57                   	push   %edi
- 364:	56                   	push   %esi
- 365:	53                   	push   %ebx
- 366:	83 ec 3c             	sub    $0x3c,%esp
- 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 36c:	89 d1                	mov    %edx,%ecx
+ 38c:	89 d1                	mov    %edx,%ecx
 {
- 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 371:	85 d2                	test   %edx,%edx
- 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
- 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 37d:	74 79                	je     3f8 <printint+0x98>
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
     neg = 1;
- 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 386:	f7 d9                	neg    %ecx
+ 3a6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 388:	31 db                	xor    %ebx,%ebx
- 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 38d:	8d 76 00             	lea    0x0(%esi),%esi
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 390:	89 c8                	mov    %ecx,%eax
- 392:	31 d2                	xor    %edx,%edx
- 394:	89 cf                	mov    %ecx,%edi
- 396:	f7 75 c4             	divl   -0x3c(%ebp)
- 399:	0f b6 92 c0 07 00 00 	movzbl 0x7c0(%edx),%edx
- 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3a3:	89 d8                	mov    %ebx,%eax
- 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 e0 07 00 00 	movzbl 0x7e0(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3b1:	76 dd                	jbe    390 <printint+0x30>
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
   if(neg)
- 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3b6:	85 c9                	test   %ecx,%ecx
- 3b8:	74 0c                	je     3c6 <printint+0x66>
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
     buf[i++] = '-';
- 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3bf:	89 d8                	mov    %ebx,%eax
+ 3df:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3cd:	eb 07                	jmp    3d6 <printint+0x76>
- 3cf:	90                   	nop
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
     putc(fd, buf[i]);
- 3d0:	0f b6 13             	movzbl (%ebx),%edx
- 3d3:	83 eb 01             	sub    $0x1,%ebx
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3d6:	83 ec 04             	sub    $0x4,%esp
- 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3dc:	6a 01                	push   $0x1
- 3de:	56                   	push   %esi
- 3df:	57                   	push   %edi
- 3e0:	e8 ee fe ff ff       	call   2d3 <write>
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ce fe ff ff       	call   2d3 <write>
   while(--i >= 0)
- 3e5:	83 c4 10             	add    $0x10,%esp
- 3e8:	39 de                	cmp    %ebx,%esi
- 3ea:	75 e4                	jne    3d0 <printint+0x70>
-}
- 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ef:	5b                   	pop    %ebx
- 3f0:	5e                   	pop    %esi
- 3f1:	5f                   	pop    %edi
- 3f2:	5d                   	pop    %ebp
- 3f3:	c3                   	ret    
- 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3ff:	eb 87                	jmp    388 <printint+0x28>
- 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 40f:	90                   	nop
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
 
-00000410 <printf>:
+00000430 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 2c             	sub    $0x2c,%esp
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 419:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 41c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 41f:	0f b6 13             	movzbl (%ebx),%edx
- 422:	84 d2                	test   %dl,%dl
- 424:	74 6a                	je     490 <printf+0x80>
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 426:	8d 45 10             	lea    0x10(%ebp),%eax
- 429:	83 c3 01             	add    $0x1,%ebx
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 42c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 42f:	31 c9                	xor    %ecx,%ecx
+ 44f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 431:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 434:	eb 36                	jmp    46c <printf+0x5c>
- 436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43d:	8d 76 00             	lea    0x0(%esi),%esi
- 440:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 443:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 448:	83 f8 25             	cmp    $0x25,%eax
- 44b:	74 15                	je     462 <printf+0x52>
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
   write(fd, &c, 1);
- 44d:	83 ec 04             	sub    $0x4,%esp
- 450:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 453:	6a 01                	push   $0x1
- 455:	57                   	push   %edi
- 456:	56                   	push   %esi
- 457:	e8 77 fe ff ff       	call   2d3 <write>
- 45c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 57 fe ff ff       	call   2d3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 45f:	83 c4 10             	add    $0x10,%esp
+ 47f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 462:	0f b6 13             	movzbl (%ebx),%edx
- 465:	83 c3 01             	add    $0x1,%ebx
- 468:	84 d2                	test   %dl,%dl
- 46a:	74 24                	je     490 <printf+0x80>
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
     c = fmt[i] & 0xff;
- 46c:	0f b6 c2             	movzbl %dl,%eax
+ 48c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 46f:	85 c9                	test   %ecx,%ecx
- 471:	74 cd                	je     440 <printf+0x30>
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
       }
     } else if(state == '%'){
- 473:	83 f9 25             	cmp    $0x25,%ecx
- 476:	75 ea                	jne    462 <printf+0x52>
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
       if(c == 'd'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	0f 84 07 01 00 00    	je     588 <printf+0x178>
- 481:	83 e8 63             	sub    $0x63,%eax
- 484:	83 f8 15             	cmp    $0x15,%eax
- 487:	77 17                	ja     4a0 <printf+0x90>
- 489:	ff 24 85 68 07 00 00 	jmp    *0x768(,%eax,4)
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 88 07 00 00 	jmp    *0x788(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 493:	5b                   	pop    %ebx
- 494:	5e                   	pop    %esi
- 495:	5f                   	pop    %edi
- 496:	5d                   	pop    %ebp
- 497:	c3                   	ret    
- 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 49f:	90                   	nop
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
   write(fd, &c, 1);
- 4a0:	83 ec 04             	sub    $0x4,%esp
- 4a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4a6:	6a 01                	push   $0x1
- 4a8:	57                   	push   %edi
- 4a9:	56                   	push   %esi
- 4aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ae:	e8 20 fe ff ff       	call   2d3 <write>
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 00 fe ff ff       	call   2d3 <write>
         putc(fd, c);
- 4b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4b7:	83 c4 0c             	add    $0xc,%esp
- 4ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4bd:	6a 01                	push   $0x1
- 4bf:	57                   	push   %edi
- 4c0:	56                   	push   %esi
- 4c1:	e8 0d fe ff ff       	call   2d3 <write>
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 ed fd ff ff       	call   2d3 <write>
         putc(fd, c);
- 4c6:	83 c4 10             	add    $0x10,%esp
+ 4e6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4c9:	31 c9                	xor    %ecx,%ecx
- 4cb:	eb 95                	jmp    462 <printf+0x52>
- 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4d0:	83 ec 0c             	sub    $0xc,%esp
- 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4d8:	6a 00                	push   $0x0
- 4da:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4dd:	8b 10                	mov    (%eax),%edx
- 4df:	89 f0                	mov    %esi,%eax
- 4e1:	e8 7a fe ff ff       	call   360 <printint>
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
         ap++;
- 4e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 4ea:	83 c4 10             	add    $0x10,%esp
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4ed:	31 c9                	xor    %ecx,%ecx
- 4ef:	e9 6e ff ff ff       	jmp    462 <printf+0x52>
- 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 4f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4fb:	8b 10                	mov    (%eax),%edx
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
         ap++;
- 4fd:	83 c0 04             	add    $0x4,%eax
- 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 503:	85 d2                	test   %edx,%edx
- 505:	0f 84 8d 00 00 00    	je     598 <printf+0x188>
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
         while(*s != 0){
- 50b:	0f b6 02             	movzbl (%edx),%eax
+ 52b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 50e:	31 c9                	xor    %ecx,%ecx
+ 52e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 510:	84 c0                	test   %al,%al
- 512:	0f 84 4a ff ff ff    	je     462 <printf+0x52>
- 518:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 51b:	89 d3                	mov    %edx,%ebx
- 51d:	8d 76 00             	lea    0x0(%esi),%esi
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 520:	83 ec 04             	sub    $0x4,%esp
+ 540:	83 ec 04             	sub    $0x4,%esp
           s++;
- 523:	83 c3 01             	add    $0x1,%ebx
- 526:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 529:	6a 01                	push   $0x1
- 52b:	57                   	push   %edi
- 52c:	56                   	push   %esi
- 52d:	e8 a1 fd ff ff       	call   2d3 <write>
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 81 fd ff ff       	call   2d3 <write>
         while(*s != 0){
- 532:	0f b6 03             	movzbl (%ebx),%eax
- 535:	83 c4 10             	add    $0x10,%esp
- 538:	84 c0                	test   %al,%al
- 53a:	75 e4                	jne    520 <printf+0x110>
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
       state = 0;
- 53c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 53f:	31 c9                	xor    %ecx,%ecx
- 541:	e9 1c ff ff ff       	jmp    462 <printf+0x52>
- 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54d:	8d 76 00             	lea    0x0(%esi),%esi
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	e9 7b ff ff ff       	jmp    4da <printf+0xca>
- 55f:	90                   	nop
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
         putc(fd, *ap);
- 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
+ 583:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 566:	8b 00                	mov    (%eax),%eax
+ 586:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
- 56a:	57                   	push   %edi
- 56b:	56                   	push   %esi
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
         putc(fd, *ap);
- 56c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 56f:	e8 5f fd ff ff       	call   2d3 <write>
+ 58f:	e8 3f fd ff ff       	call   2d3 <write>
         ap++;
- 574:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 578:	83 c4 10             	add    $0x10,%esp
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 57b:	31 c9                	xor    %ecx,%ecx
- 57d:	e9 e0 fe ff ff       	jmp    462 <printf+0x52>
- 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 588:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 58b:	83 ec 04             	sub    $0x4,%esp
- 58e:	e9 2a ff ff ff       	jmp    4bd <printf+0xad>
- 593:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 597:	90                   	nop
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
           s = "(null)";
- 598:	ba 5f 07 00 00       	mov    $0x75f,%edx
+ 5b8:	ba 7f 07 00 00       	mov    $0x77f,%edx
         while(*s != 0){
- 59d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5a0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5a5:	89 d3                	mov    %edx,%ebx
- 5a7:	e9 74 ff ff ff       	jmp    520 <printf+0x110>
- 5ac:	66 90                	xchg   %ax,%ax
- 5ae:	66 90                	xchg   %ax,%ax
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
 
-000005b0 <free>:
+000005d0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5b0:	55                   	push   %ebp
+ 5d0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b1:	a1 6c 0a 00 00       	mov    0xa6c,%eax
+ 5d1:	a1 8c 0a 00 00       	mov    0xa8c,%eax
 {
- 5b6:	89 e5                	mov    %esp,%ebp
- 5b8:	57                   	push   %edi
- 5b9:	56                   	push   %esi
- 5ba:	53                   	push   %ebx
- 5bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5c8:	89 c2                	mov    %eax,%edx
- 5ca:	8b 00                	mov    (%eax),%eax
- 5cc:	39 ca                	cmp    %ecx,%edx
- 5ce:	73 30                	jae    600 <free+0x50>
- 5d0:	39 c1                	cmp    %eax,%ecx
- 5d2:	72 04                	jb     5d8 <free+0x28>
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5d4:	39 c2                	cmp    %eax,%edx
- 5d6:	72 f0                	jb     5c8 <free+0x18>
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5de:	39 f8                	cmp    %edi,%eax
- 5e0:	74 30                	je     612 <free+0x62>
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 5e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 5e5:	8b 42 04             	mov    0x4(%edx),%eax
- 5e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5eb:	39 f1                	cmp    %esi,%ecx
- 5ed:	74 3a                	je     629 <free+0x79>
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 5ef:	89 0a                	mov    %ecx,(%edx)
+ 60f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 5f1:	5b                   	pop    %ebx
+ 611:	5b                   	pop    %ebx
   freep = p;
- 5f2:	89 15 6c 0a 00 00    	mov    %edx,0xa6c
+ 612:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
 }
- 5f8:	5e                   	pop    %esi
- 5f9:	5f                   	pop    %edi
- 5fa:	5d                   	pop    %ebp
- 5fb:	c3                   	ret    
- 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 600:	39 c2                	cmp    %eax,%edx
- 602:	72 c4                	jb     5c8 <free+0x18>
- 604:	39 c1                	cmp    %eax,%ecx
- 606:	73 c0                	jae    5c8 <free+0x18>
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 60e:	39 f8                	cmp    %edi,%eax
- 610:	75 d0                	jne    5e2 <free+0x32>
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 612:	03 70 04             	add    0x4(%eax),%esi
- 615:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 618:	8b 02                	mov    (%edx),%eax
- 61a:	8b 00                	mov    (%eax),%eax
- 61c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 61f:	8b 42 04             	mov    0x4(%edx),%eax
- 622:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 625:	39 f1                	cmp    %esi,%ecx
- 627:	75 c6                	jne    5ef <free+0x3f>
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
     p->s.size += bp->s.size;
- 629:	03 43 fc             	add    -0x4(%ebx),%eax
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 62c:	89 15 6c 0a 00 00    	mov    %edx,0xa6c
+ 64c:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
     p->s.size += bp->s.size;
- 632:	89 42 04             	mov    %eax,0x4(%edx)
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 635:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 638:	89 0a                	mov    %ecx,(%edx)
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
 }
- 63a:	5b                   	pop    %ebx
- 63b:	5e                   	pop    %esi
- 63c:	5f                   	pop    %edi
- 63d:	5d                   	pop    %ebp
- 63e:	c3                   	ret    
- 63f:	90                   	nop
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
 
-00000640 <malloc>:
+00000660 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 640:	55                   	push   %ebp
- 641:	89 e5                	mov    %esp,%ebp
- 643:	57                   	push   %edi
- 644:	56                   	push   %esi
- 645:	53                   	push   %ebx
- 646:	83 ec 1c             	sub    $0x1c,%esp
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 649:	8b 45 08             	mov    0x8(%ebp),%eax
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 64c:	8b 3d 6c 0a 00 00    	mov    0xa6c,%edi
+ 66c:	8b 3d 8c 0a 00 00    	mov    0xa8c,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 652:	8d 70 07             	lea    0x7(%eax),%esi
- 655:	c1 ee 03             	shr    $0x3,%esi
- 658:	83 c6 01             	add    $0x1,%esi
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 65b:	85 ff                	test   %edi,%edi
- 65d:	0f 84 9d 00 00 00    	je     700 <malloc+0xc0>
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 663:	8b 17                	mov    (%edi),%edx
+ 683:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 665:	8b 4a 04             	mov    0x4(%edx),%ecx
- 668:	39 f1                	cmp    %esi,%ecx
- 66a:	73 6a                	jae    6d6 <malloc+0x96>
- 66c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 671:	39 de                	cmp    %ebx,%esi
- 673:	0f 43 de             	cmovae %esi,%ebx
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 676:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 67d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 680:	eb 17                	jmp    699 <malloc+0x59>
- 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 688:	8b 02                	mov    (%edx),%eax
+ 6a8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 68a:	8b 48 04             	mov    0x4(%eax),%ecx
- 68d:	39 f1                	cmp    %esi,%ecx
- 68f:	73 4f                	jae    6e0 <malloc+0xa0>
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 691:	8b 3d 6c 0a 00 00    	mov    0xa6c,%edi
- 697:	89 c2                	mov    %eax,%edx
- 699:	39 d7                	cmp    %edx,%edi
- 69b:	75 eb                	jne    688 <malloc+0x48>
+ 6b1:	8b 3d 8c 0a 00 00    	mov    0xa8c,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 69d:	83 ec 0c             	sub    $0xc,%esp
- 6a0:	ff 75 e4             	push   -0x1c(%ebp)
- 6a3:	e8 93 fc ff ff       	call   33b <sbrk>
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 73 fc ff ff       	call   33b <sbrk>
   if(p == (char*)-1)
- 6a8:	83 c4 10             	add    $0x10,%esp
- 6ab:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ae:	74 1c                	je     6cc <malloc+0x8c>
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
   hp->s.size = nu;
- 6b0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6b3:	83 ec 0c             	sub    $0xc,%esp
- 6b6:	83 c0 08             	add    $0x8,%eax
- 6b9:	50                   	push   %eax
- 6ba:	e8 f1 fe ff ff       	call   5b0 <free>
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
   return freep;
- 6bf:	8b 15 6c 0a 00 00    	mov    0xa6c,%edx
+ 6df:	8b 15 8c 0a 00 00    	mov    0xa8c,%edx
       if((p = morecore(nunits)) == 0)
- 6c5:	83 c4 10             	add    $0x10,%esp
- 6c8:	85 d2                	test   %edx,%edx
- 6ca:	75 bc                	jne    688 <malloc+0x48>
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
         return 0;
   }
 }
- 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6cf:	31 c0                	xor    %eax,%eax
+ 6ef:	31 c0                	xor    %eax,%eax
 }
- 6d1:	5b                   	pop    %ebx
- 6d2:	5e                   	pop    %esi
- 6d3:	5f                   	pop    %edi
- 6d4:	5d                   	pop    %ebp
- 6d5:	c3                   	ret    
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
     if(p->s.size >= nunits){
- 6d6:	89 d0                	mov    %edx,%eax
- 6d8:	89 fa                	mov    %edi,%edx
- 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6e0:	39 ce                	cmp    %ecx,%esi
- 6e2:	74 4c                	je     730 <malloc+0xf0>
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
         p->s.size -= nunits;
- 6e4:	29 f1                	sub    %esi,%ecx
- 6e6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6ec:	89 70 04             	mov    %esi,0x4(%eax)
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6ef:	89 15 6c 0a 00 00    	mov    %edx,0xa6c
+ 70f:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
 }
- 6f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 6f8:	83 c0 08             	add    $0x8,%eax
+ 718:	83 c0 08             	add    $0x8,%eax
 }
- 6fb:	5b                   	pop    %ebx
- 6fc:	5e                   	pop    %esi
- 6fd:	5f                   	pop    %edi
- 6fe:	5d                   	pop    %ebp
- 6ff:	c3                   	ret    
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 700:	c7 05 6c 0a 00 00 70 	movl   $0xa70,0xa6c
- 707:	0a 00 00 
+ 720:	c7 05 8c 0a 00 00 90 	movl   $0xa90,0xa8c
+ 727:	0a 00 00 
     base.s.size = 0;
- 70a:	bf 70 0a 00 00       	mov    $0xa70,%edi
+ 72a:	bf 90 0a 00 00       	mov    $0xa90,%edi
     base.s.ptr = freep = prevp = &base;
- 70f:	c7 05 70 0a 00 00 70 	movl   $0xa70,0xa70
- 716:	0a 00 00 
+ 72f:	c7 05 90 0a 00 00 90 	movl   $0xa90,0xa90
+ 736:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 719:	89 fa                	mov    %edi,%edx
+ 739:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 71b:	c7 05 74 0a 00 00 00 	movl   $0x0,0xa74
- 722:	00 00 00 
+ 73b:	c7 05 94 0a 00 00 00 	movl   $0x0,0xa94
+ 742:	00 00 00 
     if(p->s.size >= nunits){
- 725:	e9 42 ff ff ff       	jmp    66c <malloc+0x2c>
- 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 730:	8b 08                	mov    (%eax),%ecx
- 732:	89 0a                	mov    %ecx,(%edx)
- 734:	eb b9                	jmp    6ef <malloc+0xaf>
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
Binary files xv6-public-org/ln.o and xv6-public/ln.o differ
diff -u xv6-public-org/ln.sym xv6-public/ln.sym
--- xv6-public-org/ln.sym	2022-09-04 11:47:11.329941205 +0530
+++ xv6-public/ln.sym	2022-09-05 23:16:36.733928965 +0530
@@ -1,18 +1,19 @@
 00000000 ln.c
 00000000 ulib.c
 00000000 printf.c
-00000360 printint
-000007c0 digits.0
+00000380 printint
+000007e0 digits.0
 00000000 umalloc.c
-00000a6c freep
-00000a70 base
+00000a8c freep
+00000a90 base
 00000060 strcpy
-00000410 printf
+00000430 printf
+00000363 thread_exit
 00000280 memmove
 000002fb mknod
 00000180 gets
 00000333 getpid
-00000640 malloc
+00000660 malloc
 00000343 sleep
 000002c3 pipe
 000002d3 write
@@ -26,20 +27,23 @@
 000002ab fork
 0000033b sbrk
 0000034b uptime
-00000a6c __bss_start
+00000a8c __bss_start
 00000120 memset
 00000000 main
 00000090 strcmp
 0000032b dup
 000001f0 stat
-00000a6c _edata
-00000a78 _end
+00000a8c _edata
+00000a98 _end
 00000313 link
 000002b3 exit
 00000240 atoi
+0000036b draw
 000000f0 strlen
 000002f3 open
 00000140 strchr
+00000353 thread_create
 0000031b mkdir
 000002db close
-000005b0 free
+0000035b thread_join
+000005d0 free
Binary files xv6-public-org/log.o and xv6-public/log.o differ
Binary files xv6-public-org/_ls and xv6-public/_ls differ
diff -u xv6-public-org/ls.asm xv6-public/ls.asm
--- xv6-public-org/ls.asm	2022-09-04 11:47:11.409981206 +0530
+++ xv6-public/ls.asm	2022-09-05 23:16:36.905929341 +0530
@@ -50,7 +50,7 @@
   3d:	e8 51 05 00 00       	call   593 <exit>
     ls(".");
   42:	83 ec 0c             	sub    $0xc,%esp
-  45:	68 60 0a 00 00       	push   $0xa60
+  45:	68 80 0a 00 00       	push   $0xa80
   4a:	e8 b1 00 00 00       	call   100 <ls>
     exit();
   4f:	e8 3f 05 00 00       	call   593 <exit>
@@ -100,21 +100,21 @@
   ab:	83 c4 0c             	add    $0xc,%esp
   ae:	50                   	push   %eax
   af:	53                   	push   %ebx
-  b0:	68 f4 0d 00 00       	push   $0xdf4
+  b0:	68 14 0e 00 00       	push   $0xe14
   b5:	e8 a6 04 00 00       	call   560 <memmove>
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ba:	89 1c 24             	mov    %ebx,(%esp)
   bd:	e8 0e 03 00 00       	call   3d0 <strlen>
   c2:	89 1c 24             	mov    %ebx,(%esp)
   return buf;
-  c5:	bb f4 0d 00 00       	mov    $0xdf4,%ebx
+  c5:	bb 14 0e 00 00       	mov    $0xe14,%ebx
   memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
   ca:	89 c6                	mov    %eax,%esi
   cc:	e8 ff 02 00 00       	call   3d0 <strlen>
   d1:	ba 0e 00 00 00       	mov    $0xe,%edx
   d6:	83 c4 0c             	add    $0xc,%esp
   d9:	29 f2                	sub    %esi,%edx
-  db:	05 f4 0d 00 00       	add    $0xdf4,%eax
+  db:	05 14 0e 00 00       	add    $0xe14,%eax
   e0:	52                   	push   %edx
   e1:	6a 20                	push   $0x20
   e3:	50                   	push   %eax
@@ -191,9 +191,9 @@
  194:	56                   	push   %esi
  195:	6a 02                	push   $0x2
  197:	50                   	push   %eax
- 198:	68 40 0a 00 00       	push   $0xa40
+ 198:	68 60 0a 00 00       	push   $0xa60
  19d:	6a 01                	push   $0x1
- 19f:	e8 4c 05 00 00       	call   6f0 <printf>
+ 19f:	e8 6c 05 00 00       	call   710 <printf>
     break;
  1a4:	83 c4 20             	add    $0x20,%esp
  1a7:	eb a9                	jmp    152 <ls+0x52>
@@ -278,9 +278,9 @@
  29a:	52                   	push   %edx
  29b:	ff b5 b4 fd ff ff    	push   -0x24c(%ebp)
  2a1:	50                   	push   %eax
- 2a2:	68 40 0a 00 00       	push   $0xa40
+ 2a2:	68 60 0a 00 00       	push   $0xa60
  2a7:	6a 01                	push   $0x1
- 2a9:	e8 42 04 00 00       	call   6f0 <printf>
+ 2a9:	e8 62 04 00 00       	call   710 <printf>
  2ae:	83 c4 20             	add    $0x20,%esp
  2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
  2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -288,9 +288,9 @@
     printf(2, "ls: cannot open %s\n", path);
  2c0:	83 ec 04             	sub    $0x4,%esp
  2c3:	57                   	push   %edi
- 2c4:	68 18 0a 00 00       	push   $0xa18
+ 2c4:	68 38 0a 00 00       	push   $0xa38
  2c9:	6a 02                	push   $0x2
- 2cb:	e8 20 04 00 00       	call   6f0 <printf>
+ 2cb:	e8 40 04 00 00       	call   710 <printf>
     return;
  2d0:	83 c4 10             	add    $0x10,%esp
 }
@@ -304,9 +304,9 @@
  2df:	90                   	nop
       printf(1, "ls: path too long\n");
  2e0:	83 ec 08             	sub    $0x8,%esp
- 2e3:	68 4d 0a 00 00       	push   $0xa4d
+ 2e3:	68 6d 0a 00 00       	push   $0xa6d
  2e8:	6a 01                	push   $0x1
- 2ea:	e8 01 04 00 00       	call   6f0 <printf>
+ 2ea:	e8 21 04 00 00       	call   710 <printf>
       break;
  2ef:	83 c4 10             	add    $0x10,%esp
  2f2:	e9 5b fe ff ff       	jmp    152 <ls+0x52>
@@ -315,9 +315,9 @@
     printf(2, "ls: cannot stat %s\n", path);
  300:	83 ec 04             	sub    $0x4,%esp
  303:	57                   	push   %edi
- 304:	68 2c 0a 00 00       	push   $0xa2c
+ 304:	68 4c 0a 00 00       	push   $0xa4c
  309:	6a 02                	push   $0x2
- 30b:	e8 e0 03 00 00       	call   6f0 <printf>
+ 30b:	e8 00 04 00 00       	call   710 <printf>
     close(fd);
  310:	89 1c 24             	mov    %ebx,(%esp)
  313:	e8 a3 02 00 00       	call   5bb <close>
@@ -335,9 +335,9 @@
         printf(1, "ls: cannot stat %s\n", buf);
  328:	83 ec 04             	sub    $0x4,%esp
  32b:	57                   	push   %edi
- 32c:	68 2c 0a 00 00       	push   $0xa2c
+ 32c:	68 4c 0a 00 00       	push   $0xa4c
  331:	6a 01                	push   $0x1
- 333:	e8 b8 03 00 00       	call   6f0 <printf>
+ 333:	e8 d8 03 00 00       	call   710 <printf>
         continue;
  338:	83 c4 10             	add    $0x10,%esp
  33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
@@ -866,569 +866,592 @@
  62b:	b8 0e 00 00 00       	mov    $0xe,%eax
  630:	cd 40                	int    $0x40
  632:	c3                   	ret    
- 633:	66 90                	xchg   %ax,%ax
- 635:	66 90                	xchg   %ax,%ax
- 637:	66 90                	xchg   %ax,%ax
- 639:	66 90                	xchg   %ax,%ax
- 63b:	66 90                	xchg   %ax,%ax
- 63d:	66 90                	xchg   %ax,%ax
- 63f:	90                   	nop
 
-00000640 <printint>:
+00000633 <thread_create>:
+SYSCALL(thread_create)
+ 633:	b8 16 00 00 00       	mov    $0x16,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <thread_join>:
+SYSCALL(thread_join)
+ 63b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <thread_exit>:
+SYSCALL(thread_exit)
+ 643:	b8 17 00 00 00       	mov    $0x17,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <draw>:
+ 64b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+ 653:	66 90                	xchg   %ax,%ax
+ 655:	66 90                	xchg   %ax,%ax
+ 657:	66 90                	xchg   %ax,%ax
+ 659:	66 90                	xchg   %ax,%ax
+ 65b:	66 90                	xchg   %ax,%ax
+ 65d:	66 90                	xchg   %ax,%ax
+ 65f:	90                   	nop
+
+00000660 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 640:	55                   	push   %ebp
- 641:	89 e5                	mov    %esp,%ebp
- 643:	57                   	push   %edi
- 644:	56                   	push   %esi
- 645:	53                   	push   %ebx
- 646:	83 ec 3c             	sub    $0x3c,%esp
- 649:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 3c             	sub    $0x3c,%esp
+ 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 64c:	89 d1                	mov    %edx,%ecx
+ 66c:	89 d1                	mov    %edx,%ecx
 {
- 64e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 651:	85 d2                	test   %edx,%edx
- 653:	0f 89 7f 00 00 00    	jns    6d8 <printint+0x98>
- 659:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 65d:	74 79                	je     6d8 <printint+0x98>
+ 671:	85 d2                	test   %edx,%edx
+ 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
+ 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 67d:	74 79                	je     6f8 <printint+0x98>
     neg = 1;
- 65f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 666:	f7 d9                	neg    %ecx
+ 686:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 668:	31 db                	xor    %ebx,%ebx
- 66a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 66d:	8d 76 00             	lea    0x0(%esi),%esi
+ 688:	31 db                	xor    %ebx,%ebx
+ 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 670:	89 c8                	mov    %ecx,%eax
- 672:	31 d2                	xor    %edx,%edx
- 674:	89 cf                	mov    %ecx,%edi
- 676:	f7 75 c4             	divl   -0x3c(%ebp)
- 679:	0f b6 92 c4 0a 00 00 	movzbl 0xac4(%edx),%edx
- 680:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 683:	89 d8                	mov    %ebx,%eax
- 685:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 690:	89 c8                	mov    %ecx,%eax
+ 692:	31 d2                	xor    %edx,%edx
+ 694:	89 cf                	mov    %ecx,%edi
+ 696:	f7 75 c4             	divl   -0x3c(%ebp)
+ 699:	0f b6 92 e4 0a 00 00 	movzbl 0xae4(%edx),%edx
+ 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6a3:	89 d8                	mov    %ebx,%eax
+ 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 688:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 68b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 68e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 691:	76 dd                	jbe    670 <printint+0x30>
+ 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6b1:	76 dd                	jbe    690 <printint+0x30>
   if(neg)
- 693:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 696:	85 c9                	test   %ecx,%ecx
- 698:	74 0c                	je     6a6 <printint+0x66>
+ 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6b6:	85 c9                	test   %ecx,%ecx
+ 6b8:	74 0c                	je     6c6 <printint+0x66>
     buf[i++] = '-';
- 69a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 69f:	89 d8                	mov    %ebx,%eax
+ 6bf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 6a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 6a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6ad:	eb 07                	jmp    6b6 <printint+0x76>
- 6af:	90                   	nop
+ 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6cd:	eb 07                	jmp    6d6 <printint+0x76>
+ 6cf:	90                   	nop
     putc(fd, buf[i]);
- 6b0:	0f b6 13             	movzbl (%ebx),%edx
- 6b3:	83 eb 01             	sub    $0x1,%ebx
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 6b6:	83 ec 04             	sub    $0x4,%esp
- 6b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6bc:	6a 01                	push   $0x1
- 6be:	56                   	push   %esi
- 6bf:	57                   	push   %edi
- 6c0:	e8 ee fe ff ff       	call   5b3 <write>
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 ce fe ff ff       	call   5b3 <write>
   while(--i >= 0)
- 6c5:	83 c4 10             	add    $0x10,%esp
- 6c8:	39 de                	cmp    %ebx,%esi
- 6ca:	75 e4                	jne    6b0 <printint+0x70>
-}
- 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6cf:	5b                   	pop    %ebx
- 6d0:	5e                   	pop    %esi
- 6d1:	5f                   	pop    %edi
- 6d2:	5d                   	pop    %ebp
- 6d3:	c3                   	ret    
- 6d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x70>
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 6d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 6df:	eb 87                	jmp    668 <printint+0x28>
- 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6ef:	90                   	nop
+ 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ff:	eb 87                	jmp    688 <printint+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
 
-000006f0 <printf>:
+00000710 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 6f0:	55                   	push   %ebp
- 6f1:	89 e5                	mov    %esp,%ebp
- 6f3:	57                   	push   %edi
- 6f4:	56                   	push   %esi
- 6f5:	53                   	push   %ebx
- 6f6:	83 ec 2c             	sub    $0x2c,%esp
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 6f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 719:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 6fc:	8b 75 08             	mov    0x8(%ebp),%esi
+ 71c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 6ff:	0f b6 13             	movzbl (%ebx),%edx
- 702:	84 d2                	test   %dl,%dl
- 704:	74 6a                	je     770 <printf+0x80>
+ 71f:	0f b6 13             	movzbl (%ebx),%edx
+ 722:	84 d2                	test   %dl,%dl
+ 724:	74 6a                	je     790 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 706:	8d 45 10             	lea    0x10(%ebp),%eax
- 709:	83 c3 01             	add    $0x1,%ebx
+ 726:	8d 45 10             	lea    0x10(%ebp),%eax
+ 729:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 70c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 72c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 70f:	31 c9                	xor    %ecx,%ecx
+ 72f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 711:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 714:	eb 36                	jmp    74c <printf+0x5c>
- 716:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71d:	8d 76 00             	lea    0x0(%esi),%esi
- 720:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 731:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 734:	eb 36                	jmp    76c <printf+0x5c>
+ 736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73d:	8d 76 00             	lea    0x0(%esi),%esi
+ 740:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 723:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 743:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 728:	83 f8 25             	cmp    $0x25,%eax
- 72b:	74 15                	je     742 <printf+0x52>
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 15                	je     762 <printf+0x52>
   write(fd, &c, 1);
- 72d:	83 ec 04             	sub    $0x4,%esp
- 730:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 733:	6a 01                	push   $0x1
- 735:	57                   	push   %edi
- 736:	56                   	push   %esi
- 737:	e8 77 fe ff ff       	call   5b3 <write>
- 73c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	56                   	push   %esi
+ 757:	e8 57 fe ff ff       	call   5b3 <write>
+ 75c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 73f:	83 c4 10             	add    $0x10,%esp
+ 75f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 742:	0f b6 13             	movzbl (%ebx),%edx
- 745:	83 c3 01             	add    $0x1,%ebx
- 748:	84 d2                	test   %dl,%dl
- 74a:	74 24                	je     770 <printf+0x80>
+ 762:	0f b6 13             	movzbl (%ebx),%edx
+ 765:	83 c3 01             	add    $0x1,%ebx
+ 768:	84 d2                	test   %dl,%dl
+ 76a:	74 24                	je     790 <printf+0x80>
     c = fmt[i] & 0xff;
- 74c:	0f b6 c2             	movzbl %dl,%eax
+ 76c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 74f:	85 c9                	test   %ecx,%ecx
- 751:	74 cd                	je     720 <printf+0x30>
+ 76f:	85 c9                	test   %ecx,%ecx
+ 771:	74 cd                	je     740 <printf+0x30>
       }
     } else if(state == '%'){
- 753:	83 f9 25             	cmp    $0x25,%ecx
- 756:	75 ea                	jne    742 <printf+0x52>
+ 773:	83 f9 25             	cmp    $0x25,%ecx
+ 776:	75 ea                	jne    762 <printf+0x52>
       if(c == 'd'){
- 758:	83 f8 25             	cmp    $0x25,%eax
- 75b:	0f 84 07 01 00 00    	je     868 <printf+0x178>
- 761:	83 e8 63             	sub    $0x63,%eax
- 764:	83 f8 15             	cmp    $0x15,%eax
- 767:	77 17                	ja     780 <printf+0x90>
- 769:	ff 24 85 6c 0a 00 00 	jmp    *0xa6c(,%eax,4)
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	0f 84 07 01 00 00    	je     888 <printf+0x178>
+ 781:	83 e8 63             	sub    $0x63,%eax
+ 784:	83 f8 15             	cmp    $0x15,%eax
+ 787:	77 17                	ja     7a0 <printf+0x90>
+ 789:	ff 24 85 8c 0a 00 00 	jmp    *0xa8c(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 770:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 773:	5b                   	pop    %ebx
- 774:	5e                   	pop    %esi
- 775:	5f                   	pop    %edi
- 776:	5d                   	pop    %ebp
- 777:	c3                   	ret    
- 778:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 77f:	90                   	nop
+ 790:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 793:	5b                   	pop    %ebx
+ 794:	5e                   	pop    %esi
+ 795:	5f                   	pop    %edi
+ 796:	5d                   	pop    %ebp
+ 797:	c3                   	ret    
+ 798:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79f:	90                   	nop
   write(fd, &c, 1);
- 780:	83 ec 04             	sub    $0x4,%esp
- 783:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 786:	6a 01                	push   $0x1
- 788:	57                   	push   %edi
- 789:	56                   	push   %esi
- 78a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 78e:	e8 20 fe ff ff       	call   5b3 <write>
+ 7a0:	83 ec 04             	sub    $0x4,%esp
+ 7a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 7a6:	6a 01                	push   $0x1
+ 7a8:	57                   	push   %edi
+ 7a9:	56                   	push   %esi
+ 7aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7ae:	e8 00 fe ff ff       	call   5b3 <write>
         putc(fd, c);
- 793:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 7b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 797:	83 c4 0c             	add    $0xc,%esp
- 79a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 79d:	6a 01                	push   $0x1
- 79f:	57                   	push   %edi
- 7a0:	56                   	push   %esi
- 7a1:	e8 0d fe ff ff       	call   5b3 <write>
+ 7b7:	83 c4 0c             	add    $0xc,%esp
+ 7ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7bd:	6a 01                	push   $0x1
+ 7bf:	57                   	push   %edi
+ 7c0:	56                   	push   %esi
+ 7c1:	e8 ed fd ff ff       	call   5b3 <write>
         putc(fd, c);
- 7a6:	83 c4 10             	add    $0x10,%esp
+ 7c6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7a9:	31 c9                	xor    %ecx,%ecx
- 7ab:	eb 95                	jmp    742 <printf+0x52>
- 7ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 7c9:	31 c9                	xor    %ecx,%ecx
+ 7cb:	eb 95                	jmp    762 <printf+0x52>
+ 7cd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 7b0:	83 ec 0c             	sub    $0xc,%esp
- 7b3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7b8:	6a 00                	push   $0x0
- 7ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7bd:	8b 10                	mov    (%eax),%edx
- 7bf:	89 f0                	mov    %esi,%eax
- 7c1:	e8 7a fe ff ff       	call   640 <printint>
+ 7d0:	83 ec 0c             	sub    $0xc,%esp
+ 7d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7d8:	6a 00                	push   $0x0
+ 7da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7dd:	8b 10                	mov    (%eax),%edx
+ 7df:	89 f0                	mov    %esi,%eax
+ 7e1:	e8 7a fe ff ff       	call   660 <printint>
         ap++;
- 7c6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 7ca:	83 c4 10             	add    $0x10,%esp
+ 7e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 7ea:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 7cd:	31 c9                	xor    %ecx,%ecx
- 7cf:	e9 6e ff ff ff       	jmp    742 <printf+0x52>
- 7d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7ed:	31 c9                	xor    %ecx,%ecx
+ 7ef:	e9 6e ff ff ff       	jmp    762 <printf+0x52>
+ 7f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 7d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7db:	8b 10                	mov    (%eax),%edx
+ 7f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7fb:	8b 10                	mov    (%eax),%edx
         ap++;
- 7dd:	83 c0 04             	add    $0x4,%eax
- 7e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 7fd:	83 c0 04             	add    $0x4,%eax
+ 800:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 7e3:	85 d2                	test   %edx,%edx
- 7e5:	0f 84 8d 00 00 00    	je     878 <printf+0x188>
+ 803:	85 d2                	test   %edx,%edx
+ 805:	0f 84 8d 00 00 00    	je     898 <printf+0x188>
         while(*s != 0){
- 7eb:	0f b6 02             	movzbl (%edx),%eax
+ 80b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 7ee:	31 c9                	xor    %ecx,%ecx
+ 80e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 7f0:	84 c0                	test   %al,%al
- 7f2:	0f 84 4a ff ff ff    	je     742 <printf+0x52>
- 7f8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 7fb:	89 d3                	mov    %edx,%ebx
- 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 810:	84 c0                	test   %al,%al
+ 812:	0f 84 4a ff ff ff    	je     762 <printf+0x52>
+ 818:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 81b:	89 d3                	mov    %edx,%ebx
+ 81d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 800:	83 ec 04             	sub    $0x4,%esp
+ 820:	83 ec 04             	sub    $0x4,%esp
           s++;
- 803:	83 c3 01             	add    $0x1,%ebx
- 806:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 823:	83 c3 01             	add    $0x1,%ebx
+ 826:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 809:	6a 01                	push   $0x1
- 80b:	57                   	push   %edi
- 80c:	56                   	push   %esi
- 80d:	e8 a1 fd ff ff       	call   5b3 <write>
+ 829:	6a 01                	push   $0x1
+ 82b:	57                   	push   %edi
+ 82c:	56                   	push   %esi
+ 82d:	e8 81 fd ff ff       	call   5b3 <write>
         while(*s != 0){
- 812:	0f b6 03             	movzbl (%ebx),%eax
- 815:	83 c4 10             	add    $0x10,%esp
- 818:	84 c0                	test   %al,%al
- 81a:	75 e4                	jne    800 <printf+0x110>
+ 832:	0f b6 03             	movzbl (%ebx),%eax
+ 835:	83 c4 10             	add    $0x10,%esp
+ 838:	84 c0                	test   %al,%al
+ 83a:	75 e4                	jne    820 <printf+0x110>
       state = 0;
- 81c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 81f:	31 c9                	xor    %ecx,%ecx
- 821:	e9 1c ff ff ff       	jmp    742 <printf+0x52>
- 826:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 82d:	8d 76 00             	lea    0x0(%esi),%esi
+ 83c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 83f:	31 c9                	xor    %ecx,%ecx
+ 841:	e9 1c ff ff ff       	jmp    762 <printf+0x52>
+ 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 830:	83 ec 0c             	sub    $0xc,%esp
- 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 838:	6a 01                	push   $0x1
- 83a:	e9 7b ff ff ff       	jmp    7ba <printf+0xca>
- 83f:	90                   	nop
+ 850:	83 ec 0c             	sub    $0xc,%esp
+ 853:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 858:	6a 01                	push   $0x1
+ 85a:	e9 7b ff ff ff       	jmp    7da <printf+0xca>
+ 85f:	90                   	nop
         putc(fd, *ap);
- 840:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 843:	83 ec 04             	sub    $0x4,%esp
+ 863:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 846:	8b 00                	mov    (%eax),%eax
+ 866:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 848:	6a 01                	push   $0x1
- 84a:	57                   	push   %edi
- 84b:	56                   	push   %esi
+ 868:	6a 01                	push   $0x1
+ 86a:	57                   	push   %edi
+ 86b:	56                   	push   %esi
         putc(fd, *ap);
- 84c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 86c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 84f:	e8 5f fd ff ff       	call   5b3 <write>
+ 86f:	e8 3f fd ff ff       	call   5b3 <write>
         ap++;
- 854:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 858:	83 c4 10             	add    $0x10,%esp
+ 874:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 878:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 85b:	31 c9                	xor    %ecx,%ecx
- 85d:	e9 e0 fe ff ff       	jmp    742 <printf+0x52>
- 862:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 87b:	31 c9                	xor    %ecx,%ecx
+ 87d:	e9 e0 fe ff ff       	jmp    762 <printf+0x52>
+ 882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 868:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 888:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 86b:	83 ec 04             	sub    $0x4,%esp
- 86e:	e9 2a ff ff ff       	jmp    79d <printf+0xad>
- 873:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 877:	90                   	nop
+ 88b:	83 ec 04             	sub    $0x4,%esp
+ 88e:	e9 2a ff ff ff       	jmp    7bd <printf+0xad>
+ 893:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 897:	90                   	nop
           s = "(null)";
- 878:	ba 62 0a 00 00       	mov    $0xa62,%edx
+ 898:	ba 82 0a 00 00       	mov    $0xa82,%edx
         while(*s != 0){
- 87d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 880:	b8 28 00 00 00       	mov    $0x28,%eax
- 885:	89 d3                	mov    %edx,%ebx
- 887:	e9 74 ff ff ff       	jmp    800 <printf+0x110>
- 88c:	66 90                	xchg   %ax,%ax
- 88e:	66 90                	xchg   %ax,%ax
+ 89d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 8a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a5:	89 d3                	mov    %edx,%ebx
+ 8a7:	e9 74 ff ff ff       	jmp    820 <printf+0x110>
+ 8ac:	66 90                	xchg   %ax,%ax
+ 8ae:	66 90                	xchg   %ax,%ax
 
-00000890 <free>:
+000008b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 890:	55                   	push   %ebp
+ 8b0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 891:	a1 04 0e 00 00       	mov    0xe04,%eax
+ 8b1:	a1 24 0e 00 00       	mov    0xe24,%eax
 {
- 896:	89 e5                	mov    %esp,%ebp
- 898:	57                   	push   %edi
- 899:	56                   	push   %esi
- 89a:	53                   	push   %ebx
- 89b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b6:	89 e5                	mov    %esp,%ebp
+ 8b8:	57                   	push   %edi
+ 8b9:	56                   	push   %esi
+ 8ba:	53                   	push   %ebx
+ 8bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 89e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 8be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 8a8:	89 c2                	mov    %eax,%edx
- 8aa:	8b 00                	mov    (%eax),%eax
- 8ac:	39 ca                	cmp    %ecx,%edx
- 8ae:	73 30                	jae    8e0 <free+0x50>
- 8b0:	39 c1                	cmp    %eax,%ecx
- 8b2:	72 04                	jb     8b8 <free+0x28>
+ 8c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8c8:	89 c2                	mov    %eax,%edx
+ 8ca:	8b 00                	mov    (%eax),%eax
+ 8cc:	39 ca                	cmp    %ecx,%edx
+ 8ce:	73 30                	jae    900 <free+0x50>
+ 8d0:	39 c1                	cmp    %eax,%ecx
+ 8d2:	72 04                	jb     8d8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8b4:	39 c2                	cmp    %eax,%edx
- 8b6:	72 f0                	jb     8a8 <free+0x18>
+ 8d4:	39 c2                	cmp    %eax,%edx
+ 8d6:	72 f0                	jb     8c8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 8b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8be:	39 f8                	cmp    %edi,%eax
- 8c0:	74 30                	je     8f2 <free+0x62>
+ 8d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8de:	39 f8                	cmp    %edi,%eax
+ 8e0:	74 30                	je     912 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 8c2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 8e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 8c5:	8b 42 04             	mov    0x4(%edx),%eax
- 8c8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 8cb:	39 f1                	cmp    %esi,%ecx
- 8cd:	74 3a                	je     909 <free+0x79>
+ 8e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 8e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 8eb:	39 f1                	cmp    %esi,%ecx
+ 8ed:	74 3a                	je     929 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 8cf:	89 0a                	mov    %ecx,(%edx)
+ 8ef:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 8d1:	5b                   	pop    %ebx
+ 8f1:	5b                   	pop    %ebx
   freep = p;
- 8d2:	89 15 04 0e 00 00    	mov    %edx,0xe04
+ 8f2:	89 15 24 0e 00 00    	mov    %edx,0xe24
 }
- 8d8:	5e                   	pop    %esi
- 8d9:	5f                   	pop    %edi
- 8da:	5d                   	pop    %ebp
- 8db:	c3                   	ret    
- 8dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8f8:	5e                   	pop    %esi
+ 8f9:	5f                   	pop    %edi
+ 8fa:	5d                   	pop    %ebp
+ 8fb:	c3                   	ret    
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8e0:	39 c2                	cmp    %eax,%edx
- 8e2:	72 c4                	jb     8a8 <free+0x18>
- 8e4:	39 c1                	cmp    %eax,%ecx
- 8e6:	73 c0                	jae    8a8 <free+0x18>
+ 900:	39 c2                	cmp    %eax,%edx
+ 902:	72 c4                	jb     8c8 <free+0x18>
+ 904:	39 c1                	cmp    %eax,%ecx
+ 906:	73 c0                	jae    8c8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 8e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8ee:	39 f8                	cmp    %edi,%eax
- 8f0:	75 d0                	jne    8c2 <free+0x32>
+ 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90e:	39 f8                	cmp    %edi,%eax
+ 910:	75 d0                	jne    8e2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 8f2:	03 70 04             	add    0x4(%eax),%esi
- 8f5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 912:	03 70 04             	add    0x4(%eax),%esi
+ 915:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 8f8:	8b 02                	mov    (%edx),%eax
- 8fa:	8b 00                	mov    (%eax),%eax
- 8fc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 918:	8b 02                	mov    (%edx),%eax
+ 91a:	8b 00                	mov    (%eax),%eax
+ 91c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 8ff:	8b 42 04             	mov    0x4(%edx),%eax
- 902:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 905:	39 f1                	cmp    %esi,%ecx
- 907:	75 c6                	jne    8cf <free+0x3f>
+ 91f:	8b 42 04             	mov    0x4(%edx),%eax
+ 922:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 925:	39 f1                	cmp    %esi,%ecx
+ 927:	75 c6                	jne    8ef <free+0x3f>
     p->s.size += bp->s.size;
- 909:	03 43 fc             	add    -0x4(%ebx),%eax
+ 929:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 90c:	89 15 04 0e 00 00    	mov    %edx,0xe04
+ 92c:	89 15 24 0e 00 00    	mov    %edx,0xe24
     p->s.size += bp->s.size;
- 912:	89 42 04             	mov    %eax,0x4(%edx)
+ 932:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 915:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 918:	89 0a                	mov    %ecx,(%edx)
+ 935:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 938:	89 0a                	mov    %ecx,(%edx)
 }
- 91a:	5b                   	pop    %ebx
- 91b:	5e                   	pop    %esi
- 91c:	5f                   	pop    %edi
- 91d:	5d                   	pop    %ebp
- 91e:	c3                   	ret    
- 91f:	90                   	nop
+ 93a:	5b                   	pop    %ebx
+ 93b:	5e                   	pop    %esi
+ 93c:	5f                   	pop    %edi
+ 93d:	5d                   	pop    %ebp
+ 93e:	c3                   	ret    
+ 93f:	90                   	nop
 
-00000920 <malloc>:
+00000940 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 920:	55                   	push   %ebp
- 921:	89 e5                	mov    %esp,%ebp
- 923:	57                   	push   %edi
- 924:	56                   	push   %esi
- 925:	53                   	push   %ebx
- 926:	83 ec 1c             	sub    $0x1c,%esp
+ 940:	55                   	push   %ebp
+ 941:	89 e5                	mov    %esp,%ebp
+ 943:	57                   	push   %edi
+ 944:	56                   	push   %esi
+ 945:	53                   	push   %ebx
+ 946:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 929:	8b 45 08             	mov    0x8(%ebp),%eax
+ 949:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 92c:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
+ 94c:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 932:	8d 70 07             	lea    0x7(%eax),%esi
- 935:	c1 ee 03             	shr    $0x3,%esi
- 938:	83 c6 01             	add    $0x1,%esi
+ 952:	8d 70 07             	lea    0x7(%eax),%esi
+ 955:	c1 ee 03             	shr    $0x3,%esi
+ 958:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 93b:	85 ff                	test   %edi,%edi
- 93d:	0f 84 9d 00 00 00    	je     9e0 <malloc+0xc0>
+ 95b:	85 ff                	test   %edi,%edi
+ 95d:	0f 84 9d 00 00 00    	je     a00 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 943:	8b 17                	mov    (%edi),%edx
+ 963:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 945:	8b 4a 04             	mov    0x4(%edx),%ecx
- 948:	39 f1                	cmp    %esi,%ecx
- 94a:	73 6a                	jae    9b6 <malloc+0x96>
- 94c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 951:	39 de                	cmp    %ebx,%esi
- 953:	0f 43 de             	cmovae %esi,%ebx
+ 965:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 968:	39 f1                	cmp    %esi,%ecx
+ 96a:	73 6a                	jae    9d6 <malloc+0x96>
+ 96c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 971:	39 de                	cmp    %ebx,%esi
+ 973:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 956:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 95d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 960:	eb 17                	jmp    979 <malloc+0x59>
- 962:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 976:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 97d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 980:	eb 17                	jmp    999 <malloc+0x59>
+ 982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 968:	8b 02                	mov    (%edx),%eax
+ 988:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 96a:	8b 48 04             	mov    0x4(%eax),%ecx
- 96d:	39 f1                	cmp    %esi,%ecx
- 96f:	73 4f                	jae    9c0 <malloc+0xa0>
+ 98a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 98d:	39 f1                	cmp    %esi,%ecx
+ 98f:	73 4f                	jae    9e0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 971:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
- 977:	89 c2                	mov    %eax,%edx
- 979:	39 d7                	cmp    %edx,%edi
- 97b:	75 eb                	jne    968 <malloc+0x48>
+ 991:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
+ 997:	89 c2                	mov    %eax,%edx
+ 999:	39 d7                	cmp    %edx,%edi
+ 99b:	75 eb                	jne    988 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 97d:	83 ec 0c             	sub    $0xc,%esp
- 980:	ff 75 e4             	push   -0x1c(%ebp)
- 983:	e8 93 fc ff ff       	call   61b <sbrk>
+ 99d:	83 ec 0c             	sub    $0xc,%esp
+ 9a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 9a3:	e8 73 fc ff ff       	call   61b <sbrk>
   if(p == (char*)-1)
- 988:	83 c4 10             	add    $0x10,%esp
- 98b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 98e:	74 1c                	je     9ac <malloc+0x8c>
+ 9a8:	83 c4 10             	add    $0x10,%esp
+ 9ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9ae:	74 1c                	je     9cc <malloc+0x8c>
   hp->s.size = nu;
- 990:	89 58 04             	mov    %ebx,0x4(%eax)
+ 9b0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 993:	83 ec 0c             	sub    $0xc,%esp
- 996:	83 c0 08             	add    $0x8,%eax
- 999:	50                   	push   %eax
- 99a:	e8 f1 fe ff ff       	call   890 <free>
+ 9b3:	83 ec 0c             	sub    $0xc,%esp
+ 9b6:	83 c0 08             	add    $0x8,%eax
+ 9b9:	50                   	push   %eax
+ 9ba:	e8 f1 fe ff ff       	call   8b0 <free>
   return freep;
- 99f:	8b 15 04 0e 00 00    	mov    0xe04,%edx
+ 9bf:	8b 15 24 0e 00 00    	mov    0xe24,%edx
       if((p = morecore(nunits)) == 0)
- 9a5:	83 c4 10             	add    $0x10,%esp
- 9a8:	85 d2                	test   %edx,%edx
- 9aa:	75 bc                	jne    968 <malloc+0x48>
+ 9c5:	83 c4 10             	add    $0x10,%esp
+ 9c8:	85 d2                	test   %edx,%edx
+ 9ca:	75 bc                	jne    988 <malloc+0x48>
         return 0;
   }
 }
- 9ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 9af:	31 c0                	xor    %eax,%eax
+ 9cf:	31 c0                	xor    %eax,%eax
 }
- 9b1:	5b                   	pop    %ebx
- 9b2:	5e                   	pop    %esi
- 9b3:	5f                   	pop    %edi
- 9b4:	5d                   	pop    %ebp
- 9b5:	c3                   	ret    
+ 9d1:	5b                   	pop    %ebx
+ 9d2:	5e                   	pop    %esi
+ 9d3:	5f                   	pop    %edi
+ 9d4:	5d                   	pop    %ebp
+ 9d5:	c3                   	ret    
     if(p->s.size >= nunits){
- 9b6:	89 d0                	mov    %edx,%eax
- 9b8:	89 fa                	mov    %edi,%edx
- 9ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 9d6:	89 d0                	mov    %edx,%eax
+ 9d8:	89 fa                	mov    %edi,%edx
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 9c0:	39 ce                	cmp    %ecx,%esi
- 9c2:	74 4c                	je     a10 <malloc+0xf0>
+ 9e0:	39 ce                	cmp    %ecx,%esi
+ 9e2:	74 4c                	je     a30 <malloc+0xf0>
         p->s.size -= nunits;
- 9c4:	29 f1                	sub    %esi,%ecx
- 9c6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 9e4:	29 f1                	sub    %esi,%ecx
+ 9e6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 9c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 9e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 9cc:	89 70 04             	mov    %esi,0x4(%eax)
+ 9ec:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 9cf:	89 15 04 0e 00 00    	mov    %edx,0xe04
+ 9ef:	89 15 24 0e 00 00    	mov    %edx,0xe24
 }
- 9d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 9d8:	83 c0 08             	add    $0x8,%eax
+ 9f8:	83 c0 08             	add    $0x8,%eax
 }
- 9db:	5b                   	pop    %ebx
- 9dc:	5e                   	pop    %esi
- 9dd:	5f                   	pop    %edi
- 9de:	5d                   	pop    %ebp
- 9df:	c3                   	ret    
+ 9fb:	5b                   	pop    %ebx
+ 9fc:	5e                   	pop    %esi
+ 9fd:	5f                   	pop    %edi
+ 9fe:	5d                   	pop    %ebp
+ 9ff:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 9e0:	c7 05 04 0e 00 00 08 	movl   $0xe08,0xe04
- 9e7:	0e 00 00 
+ a00:	c7 05 24 0e 00 00 28 	movl   $0xe28,0xe24
+ a07:	0e 00 00 
     base.s.size = 0;
- 9ea:	bf 08 0e 00 00       	mov    $0xe08,%edi
+ a0a:	bf 28 0e 00 00       	mov    $0xe28,%edi
     base.s.ptr = freep = prevp = &base;
- 9ef:	c7 05 08 0e 00 00 08 	movl   $0xe08,0xe08
- 9f6:	0e 00 00 
+ a0f:	c7 05 28 0e 00 00 28 	movl   $0xe28,0xe28
+ a16:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9f9:	89 fa                	mov    %edi,%edx
+ a19:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 9fb:	c7 05 0c 0e 00 00 00 	movl   $0x0,0xe0c
- a02:	00 00 00 
+ a1b:	c7 05 2c 0e 00 00 00 	movl   $0x0,0xe2c
+ a22:	00 00 00 
     if(p->s.size >= nunits){
- a05:	e9 42 ff ff ff       	jmp    94c <malloc+0x2c>
- a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ a25:	e9 42 ff ff ff       	jmp    96c <malloc+0x2c>
+ a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- a10:	8b 08                	mov    (%eax),%ecx
- a12:	89 0a                	mov    %ecx,(%edx)
- a14:	eb b9                	jmp    9cf <malloc+0xaf>
+ a30:	8b 08                	mov    (%eax),%ecx
+ a32:	89 0a                	mov    %ecx,(%edx)
+ a34:	eb b9                	jmp    9ef <malloc+0xaf>
Binary files xv6-public-org/ls.o and xv6-public/ls.o differ
diff -u xv6-public-org/ls.sym xv6-public/ls.sym
--- xv6-public-org/ls.sym	2022-09-04 11:47:11.413983207 +0530
+++ xv6-public/ls.sym	2022-09-05 23:16:36.909929349 +0530
@@ -1,20 +1,21 @@
 00000000 ls.c
-00000df4 buf.0
+00000e14 buf.0
 00000000 ulib.c
 00000000 printf.c
-00000640 printint
-00000ac4 digits.0
+00000660 printint
+00000ae4 digits.0
 00000000 umalloc.c
-00000e04 freep
-00000e08 base
+00000e24 freep
+00000e28 base
 00000340 strcpy
 00000060 fmtname
-000006f0 printf
+00000710 printf
+00000643 thread_exit
 00000560 memmove
 000005db mknod
 00000460 gets
 00000613 getpid
-00000920 malloc
+00000940 malloc
 00000623 sleep
 000005a3 pipe
 000005b3 write
@@ -28,21 +29,24 @@
 0000058b fork
 0000061b sbrk
 0000062b uptime
-00000df4 __bss_start
+00000e14 __bss_start
 00000400 memset
 00000000 main
 00000370 strcmp
 0000060b dup
 000004d0 stat
-00000df4 _edata
-00000e10 _end
+00000e14 _edata
+00000e30 _end
 000005f3 link
 00000100 ls
 00000593 exit
 00000520 atoi
+0000064b draw
 000003d0 strlen
 000005d3 open
 00000420 strchr
+00000633 thread_create
 000005fb mkdir
 000005bb close
-00000890 free
+0000063b thread_join
+000008b0 free
Binary files xv6-public-org/main.o and xv6-public/main.o differ
diff -u xv6-public-org/Makefile xv6-public/Makefile
--- xv6-public-org/Makefile	2022-09-04 11:44:03.844244000 +0530
+++ xv6-public/Makefile	2022-09-05 21:49:13.165538015 +0530
@@ -178,10 +178,11 @@
 	_rm\
 	_sh\
 	_stressfs\
-	_usertests\
 	_wc\
 	_zombie\
-
+	_thread\
+	_Drawtest\
+	
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
 
@@ -249,7 +250,7 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c  wc.c zombie.c thread.c Drawtest.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
Only in xv6-public-org: make-output.txt
Binary files xv6-public-org/_mkdir and xv6-public/_mkdir differ
diff -u xv6-public-org/mkdir.asm xv6-public/mkdir.asm
--- xv6-public-org/mkdir.asm	2022-09-04 11:47:11.482017207 +0530
+++ xv6-public/mkdir.asm	2022-09-05 23:16:36.977929498 +0530
@@ -59,18 +59,18 @@
       printf(2, "mkdir: %s failed to create\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	push   (%ebx)
-  53:	68 6f 07 00 00       	push   $0x76f
+  53:	68 8f 07 00 00       	push   $0x78f
   58:	6a 02                	push   $0x2
-  5a:	e8 d1 03 00 00       	call   430 <printf>
+  5a:	e8 f1 03 00 00       	call   450 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: mkdir files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 58 07 00 00       	push   $0x758
+  66:	68 78 07 00 00       	push   $0x778
   6b:	6a 02                	push   $0x2
-  6d:	e8 be 03 00 00       	call   430 <printf>
+  6d:	e8 de 03 00 00       	call   450 <printf>
     exit();
   72:	e8 5c 02 00 00       	call   2d3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -603,569 +603,592 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
- 373:	66 90                	xchg   %ax,%ax
- 375:	66 90                	xchg   %ax,%ax
- 377:	66 90                	xchg   %ax,%ax
- 379:	66 90                	xchg   %ax,%ax
- 37b:	66 90                	xchg   %ax,%ax
- 37d:	66 90                	xchg   %ax,%ax
- 37f:	90                   	nop
 
-00000380 <printint>:
+00000373 <thread_create>:
+SYSCALL(thread_create)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <thread_join>:
+SYSCALL(thread_join)
+ 37b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <thread_exit>:
+SYSCALL(thread_exit)
+ 383:	b8 17 00 00 00       	mov    $0x17,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <draw>:
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+ 393:	66 90                	xchg   %ax,%ax
+ 395:	66 90                	xchg   %ax,%ax
+ 397:	66 90                	xchg   %ax,%ax
+ 399:	66 90                	xchg   %ax,%ax
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
- 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 38c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 391:	85 d2                	test   %edx,%edx
- 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
- 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 39d:	74 79                	je     418 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3a6:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3a8:	31 db                	xor    %ebx,%ebx
- 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 c8                	mov    %ecx,%eax
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	89 cf                	mov    %ecx,%edi
- 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 ec 07 00 00 	movzbl 0x7ec(%edx),%edx
- 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3c3:	89 d8                	mov    %ebx,%eax
- 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 0c 08 00 00 	movzbl 0x80c(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3d6:	85 c9                	test   %ecx,%ecx
- 3d8:	74 0c                	je     3e6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3df:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ed:	eb 07                	jmp    3f6 <printint+0x76>
- 3ef:	90                   	nop
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
     putc(fd, buf[i]);
- 3f0:	0f b6 13             	movzbl (%ebx),%edx
- 3f3:	83 eb 01             	sub    $0x1,%ebx
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3f6:	83 ec 04             	sub    $0x4,%esp
- 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3fc:	6a 01                	push   $0x1
- 3fe:	56                   	push   %esi
- 3ff:	57                   	push   %edi
- 400:	e8 ee fe ff ff       	call   2f3 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x70>
-}
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 41f:	eb 87                	jmp    3a8 <printint+0x28>
- 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000430 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 45c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 43f:	0f b6 13             	movzbl (%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	74 6a                	je     4b0 <printf+0x80>
+ 45f:	0f b6 13             	movzbl (%ebx),%edx
+ 462:	84 d2                	test   %dl,%dl
+ 464:	74 6a                	je     4d0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 446:	8d 45 10             	lea    0x10(%ebp),%eax
- 449:	83 c3 01             	add    $0x1,%ebx
+ 466:	8d 45 10             	lea    0x10(%ebp),%eax
+ 469:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 44f:	31 c9                	xor    %ecx,%ecx
+ 46f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 454:	eb 36                	jmp    48c <printf+0x5c>
- 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45d:	8d 76 00             	lea    0x0(%esi),%esi
- 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 474:	eb 36                	jmp    4ac <printf+0x5c>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 483:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	74 15                	je     482 <printf+0x52>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 15                	je     4a2 <printf+0x52>
   write(fd, &c, 1);
- 46d:	83 ec 04             	sub    $0x4,%esp
- 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 473:	6a 01                	push   $0x1
- 475:	57                   	push   %edi
- 476:	56                   	push   %esi
- 477:	e8 77 fe ff ff       	call   2f3 <write>
- 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	56                   	push   %esi
+ 497:	e8 57 fe ff ff       	call   2f3 <write>
+ 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 47f:	83 c4 10             	add    $0x10,%esp
+ 49f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 482:	0f b6 13             	movzbl (%ebx),%edx
- 485:	83 c3 01             	add    $0x1,%ebx
- 488:	84 d2                	test   %dl,%dl
- 48a:	74 24                	je     4b0 <printf+0x80>
+ 4a2:	0f b6 13             	movzbl (%ebx),%edx
+ 4a5:	83 c3 01             	add    $0x1,%ebx
+ 4a8:	84 d2                	test   %dl,%dl
+ 4aa:	74 24                	je     4d0 <printf+0x80>
     c = fmt[i] & 0xff;
- 48c:	0f b6 c2             	movzbl %dl,%eax
+ 4ac:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 48f:	85 c9                	test   %ecx,%ecx
- 491:	74 cd                	je     460 <printf+0x30>
+ 4af:	85 c9                	test   %ecx,%ecx
+ 4b1:	74 cd                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 493:	83 f9 25             	cmp    $0x25,%ecx
- 496:	75 ea                	jne    482 <printf+0x52>
+ 4b3:	83 f9 25             	cmp    $0x25,%ecx
+ 4b6:	75 ea                	jne    4a2 <printf+0x52>
       if(c == 'd'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
- 4a1:	83 e8 63             	sub    $0x63,%eax
- 4a4:	83 f8 15             	cmp    $0x15,%eax
- 4a7:	77 17                	ja     4c0 <printf+0x90>
- 4a9:	ff 24 85 94 07 00 00 	jmp    *0x794(,%eax,4)
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
+ 4c1:	83 e8 63             	sub    $0x63,%eax
+ 4c4:	83 f8 15             	cmp    $0x15,%eax
+ 4c7:	77 17                	ja     4e0 <printf+0x90>
+ 4c9:	ff 24 85 b4 07 00 00 	jmp    *0x7b4(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4b3:	5b                   	pop    %ebx
- 4b4:	5e                   	pop    %esi
- 4b5:	5f                   	pop    %edi
- 4b6:	5d                   	pop    %ebp
- 4b7:	c3                   	ret    
- 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4bf:	90                   	nop
+ 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d3:	5b                   	pop    %ebx
+ 4d4:	5e                   	pop    %esi
+ 4d5:	5f                   	pop    %edi
+ 4d6:	5d                   	pop    %ebp
+ 4d7:	c3                   	ret    
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
   write(fd, &c, 1);
- 4c0:	83 ec 04             	sub    $0x4,%esp
- 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4c6:	6a 01                	push   $0x1
- 4c8:	57                   	push   %edi
- 4c9:	56                   	push   %esi
- 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ce:	e8 20 fe ff ff       	call   2f3 <write>
+ 4e0:	83 ec 04             	sub    $0x4,%esp
+ 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4e6:	6a 01                	push   $0x1
+ 4e8:	57                   	push   %edi
+ 4e9:	56                   	push   %esi
+ 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ee:	e8 00 fe ff ff       	call   2f3 <write>
         putc(fd, c);
- 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4d7:	83 c4 0c             	add    $0xc,%esp
- 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4dd:	6a 01                	push   $0x1
- 4df:	57                   	push   %edi
- 4e0:	56                   	push   %esi
- 4e1:	e8 0d fe ff ff       	call   2f3 <write>
+ 4f7:	83 c4 0c             	add    $0xc,%esp
+ 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4fd:	6a 01                	push   $0x1
+ 4ff:	57                   	push   %edi
+ 500:	56                   	push   %esi
+ 501:	e8 ed fd ff ff       	call   2f3 <write>
         putc(fd, c);
- 4e6:	83 c4 10             	add    $0x10,%esp
+ 506:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4e9:	31 c9                	xor    %ecx,%ecx
- 4eb:	eb 95                	jmp    482 <printf+0x52>
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 509:	31 c9                	xor    %ecx,%ecx
+ 50b:	eb 95                	jmp    4a2 <printf+0x52>
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	83 ec 0c             	sub    $0xc,%esp
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4f8:	6a 00                	push   $0x0
- 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4fd:	8b 10                	mov    (%eax),%edx
- 4ff:	89 f0                	mov    %esi,%eax
- 501:	e8 7a fe ff ff       	call   380 <printint>
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51d:	8b 10                	mov    (%eax),%edx
+ 51f:	89 f0                	mov    %esi,%eax
+ 521:	e8 7a fe ff ff       	call   3a0 <printint>
         ap++;
- 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 50a:	83 c4 10             	add    $0x10,%esp
+ 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 52a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 50d:	31 c9                	xor    %ecx,%ecx
- 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 52d:	31 c9                	xor    %ecx,%ecx
+ 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 51b:	8b 10                	mov    (%eax),%edx
+ 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53b:	8b 10                	mov    (%eax),%edx
         ap++;
- 51d:	83 c0 04             	add    $0x4,%eax
- 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 523:	85 d2                	test   %edx,%edx
- 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+ 543:	85 d2                	test   %edx,%edx
+ 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
         while(*s != 0){
- 52b:	0f b6 02             	movzbl (%edx),%eax
+ 54b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 52e:	31 c9                	xor    %ecx,%ecx
+ 54e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 530:	84 c0                	test   %al,%al
- 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
- 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 53b:	89 d3                	mov    %edx,%ebx
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 550:	84 c0                	test   %al,%al
+ 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
+ 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 55b:	89 d3                	mov    %edx,%ebx
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 540:	83 ec 04             	sub    $0x4,%esp
+ 560:	83 ec 04             	sub    $0x4,%esp
           s++;
- 543:	83 c3 01             	add    $0x1,%ebx
- 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 563:	83 c3 01             	add    $0x1,%ebx
+ 566:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 549:	6a 01                	push   $0x1
- 54b:	57                   	push   %edi
- 54c:	56                   	push   %esi
- 54d:	e8 a1 fd ff ff       	call   2f3 <write>
+ 569:	6a 01                	push   $0x1
+ 56b:	57                   	push   %edi
+ 56c:	56                   	push   %esi
+ 56d:	e8 81 fd ff ff       	call   2f3 <write>
         while(*s != 0){
- 552:	0f b6 03             	movzbl (%ebx),%eax
- 555:	83 c4 10             	add    $0x10,%esp
- 558:	84 c0                	test   %al,%al
- 55a:	75 e4                	jne    540 <printf+0x110>
+ 572:	0f b6 03             	movzbl (%ebx),%eax
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	84 c0                	test   %al,%al
+ 57a:	75 e4                	jne    560 <printf+0x110>
       state = 0;
- 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 55f:	31 c9                	xor    %ecx,%ecx
- 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
- 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 57f:	31 c9                	xor    %ecx,%ecx
+ 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
- 57f:	90                   	nop
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
+ 59f:	90                   	nop
         putc(fd, *ap);
- 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 586:	8b 00                	mov    (%eax),%eax
+ 5a6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
- 58a:	57                   	push   %edi
- 58b:	56                   	push   %esi
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	57                   	push   %edi
+ 5ab:	56                   	push   %esi
         putc(fd, *ap);
- 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 58f:	e8 5f fd ff ff       	call   2f3 <write>
+ 5af:	e8 3f fd ff ff       	call   2f3 <write>
         ap++;
- 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 598:	83 c4 10             	add    $0x10,%esp
+ 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5b8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 59b:	31 c9                	xor    %ecx,%ecx
- 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
- 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5bb:	31 c9                	xor    %ecx,%ecx
+ 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5ab:	83 ec 04             	sub    $0x4,%esp
- 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
- 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5b7:	90                   	nop
+ 5cb:	83 ec 04             	sub    $0x4,%esp
+ 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
+ 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d7:	90                   	nop
           s = "(null)";
- 5b8:	ba 8b 07 00 00       	mov    $0x78b,%edx
+ 5d8:	ba ab 07 00 00       	mov    $0x7ab,%edx
         while(*s != 0){
- 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5c5:	89 d3                	mov    %edx,%ebx
- 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
- 5cc:	66 90                	xchg   %ax,%ax
- 5ce:	66 90                	xchg   %ax,%ax
+ 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e5:	89 d3                	mov    %edx,%ebx
+ 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005d0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5d0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	a1 a4 0a 00 00       	mov    0xaa4,%eax
+ 5f1:	a1 c4 0a 00 00       	mov    0xac4,%eax
 {
- 5d6:	89 e5                	mov    %esp,%ebp
- 5d8:	57                   	push   %edi
- 5d9:	56                   	push   %esi
- 5da:	53                   	push   %ebx
- 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5e8:	89 c2                	mov    %eax,%edx
- 5ea:	8b 00                	mov    (%eax),%eax
- 5ec:	39 ca                	cmp    %ecx,%edx
- 5ee:	73 30                	jae    620 <free+0x50>
- 5f0:	39 c1                	cmp    %eax,%ecx
- 5f2:	72 04                	jb     5f8 <free+0x28>
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 608:	89 c2                	mov    %eax,%edx
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	73 30                	jae    640 <free+0x50>
+ 610:	39 c1                	cmp    %eax,%ecx
+ 612:	72 04                	jb     618 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f4:	39 c2                	cmp    %eax,%edx
- 5f6:	72 f0                	jb     5e8 <free+0x18>
+ 614:	39 c2                	cmp    %eax,%edx
+ 616:	72 f0                	jb     608 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 f8                	cmp    %edi,%eax
- 600:	74 30                	je     632 <free+0x62>
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	74 30                	je     652 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 605:	8b 42 04             	mov    0x4(%edx),%eax
- 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 3a                	je     649 <free+0x79>
+ 625:	8b 42 04             	mov    0x4(%edx),%eax
+ 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 3a                	je     669 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 60f:	89 0a                	mov    %ecx,(%edx)
+ 62f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 631:	5b                   	pop    %ebx
   freep = p;
- 612:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+ 632:	89 15 c4 0a 00 00    	mov    %edx,0xac4
 }
- 618:	5e                   	pop    %esi
- 619:	5f                   	pop    %edi
- 61a:	5d                   	pop    %ebp
- 61b:	c3                   	ret    
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 638:	5e                   	pop    %esi
+ 639:	5f                   	pop    %edi
+ 63a:	5d                   	pop    %ebp
+ 63b:	c3                   	ret    
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 620:	39 c2                	cmp    %eax,%edx
- 622:	72 c4                	jb     5e8 <free+0x18>
- 624:	39 c1                	cmp    %eax,%ecx
- 626:	73 c0                	jae    5e8 <free+0x18>
+ 640:	39 c2                	cmp    %eax,%edx
+ 642:	72 c4                	jb     608 <free+0x18>
+ 644:	39 c1                	cmp    %eax,%ecx
+ 646:	73 c0                	jae    608 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62e:	39 f8                	cmp    %edi,%eax
- 630:	75 d0                	jne    602 <free+0x32>
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	75 d0                	jne    622 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 632:	03 70 04             	add    0x4(%eax),%esi
- 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 652:	03 70 04             	add    0x4(%eax),%esi
+ 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 638:	8b 02                	mov    (%edx),%eax
- 63a:	8b 00                	mov    (%eax),%eax
- 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 658:	8b 02                	mov    (%edx),%eax
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 63f:	8b 42 04             	mov    0x4(%edx),%eax
- 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 645:	39 f1                	cmp    %esi,%ecx
- 647:	75 c6                	jne    60f <free+0x3f>
+ 65f:	8b 42 04             	mov    0x4(%edx),%eax
+ 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 665:	39 f1                	cmp    %esi,%ecx
+ 667:	75 c6                	jne    62f <free+0x3f>
     p->s.size += bp->s.size;
- 649:	03 43 fc             	add    -0x4(%ebx),%eax
+ 669:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 64c:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+ 66c:	89 15 c4 0a 00 00    	mov    %edx,0xac4
     p->s.size += bp->s.size;
- 652:	89 42 04             	mov    %eax,0x4(%edx)
+ 672:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 658:	89 0a                	mov    %ecx,(%edx)
+ 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 678:	89 0a                	mov    %ecx,(%edx)
 }
- 65a:	5b                   	pop    %ebx
- 65b:	5e                   	pop    %esi
- 65c:	5f                   	pop    %edi
- 65d:	5d                   	pop    %ebp
- 65e:	c3                   	ret    
- 65f:	90                   	nop
+ 67a:	5b                   	pop    %ebx
+ 67b:	5e                   	pop    %esi
+ 67c:	5f                   	pop    %edi
+ 67d:	5d                   	pop    %ebp
+ 67e:	c3                   	ret    
+ 67f:	90                   	nop
 
-00000660 <malloc>:
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 669:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 66c:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
+ 68c:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 672:	8d 70 07             	lea    0x7(%eax),%esi
- 675:	c1 ee 03             	shr    $0x3,%esi
- 678:	83 c6 01             	add    $0x1,%esi
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 67b:	85 ff                	test   %edi,%edi
- 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 683:	8b 17                	mov    (%edi),%edx
+ 6a3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 685:	8b 4a 04             	mov    0x4(%edx),%ecx
- 688:	39 f1                	cmp    %esi,%ecx
- 68a:	73 6a                	jae    6f6 <malloc+0x96>
- 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 691:	39 de                	cmp    %ebx,%esi
- 693:	0f 43 de             	cmovae %esi,%ebx
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 6a                	jae    716 <malloc+0x96>
+ 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b1:	39 de                	cmp    %ebx,%esi
+ 6b3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
- 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a8:	8b 02                	mov    (%edx),%eax
+ 6c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ad:	39 f1                	cmp    %esi,%ecx
- 6af:	73 4f                	jae    700 <malloc+0xa0>
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f1                	cmp    %esi,%ecx
+ 6cf:	73 4f                	jae    720 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
- 6b7:	89 c2                	mov    %eax,%edx
- 6b9:	39 d7                	cmp    %edx,%edi
- 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+ 6d1:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	39 d7                	cmp    %edx,%edi
+ 6db:	75 eb                	jne    6c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6bd:	83 ec 0c             	sub    $0xc,%esp
- 6c0:	ff 75 e4             	push   -0x1c(%ebp)
- 6c3:	e8 93 fc ff ff       	call   35b <sbrk>
+ 6dd:	83 ec 0c             	sub    $0xc,%esp
+ 6e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6e3:	e8 73 fc ff ff       	call   35b <sbrk>
   if(p == (char*)-1)
- 6c8:	83 c4 10             	add    $0x10,%esp
- 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ce:	74 1c                	je     6ec <malloc+0x8c>
+ 6e8:	83 c4 10             	add    $0x10,%esp
+ 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ee:	74 1c                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6d3:	83 ec 0c             	sub    $0xc,%esp
- 6d6:	83 c0 08             	add    $0x8,%eax
- 6d9:	50                   	push   %eax
- 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+ 6f3:	83 ec 0c             	sub    $0xc,%esp
+ 6f6:	83 c0 08             	add    $0x8,%eax
+ 6f9:	50                   	push   %eax
+ 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
   return freep;
- 6df:	8b 15 a4 0a 00 00    	mov    0xaa4,%edx
+ 6ff:	8b 15 c4 0a 00 00    	mov    0xac4,%edx
       if((p = morecore(nunits)) == 0)
- 6e5:	83 c4 10             	add    $0x10,%esp
- 6e8:	85 d2                	test   %edx,%edx
- 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 bc                	jne    6c8 <malloc+0x48>
         return 0;
   }
 }
- 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6ef:	31 c0                	xor    %eax,%eax
+ 70f:	31 c0                	xor    %eax,%eax
 }
- 6f1:	5b                   	pop    %ebx
- 6f2:	5e                   	pop    %esi
- 6f3:	5f                   	pop    %edi
- 6f4:	5d                   	pop    %ebp
- 6f5:	c3                   	ret    
+ 711:	5b                   	pop    %ebx
+ 712:	5e                   	pop    %esi
+ 713:	5f                   	pop    %edi
+ 714:	5d                   	pop    %ebp
+ 715:	c3                   	ret    
     if(p->s.size >= nunits){
- 6f6:	89 d0                	mov    %edx,%eax
- 6f8:	89 fa                	mov    %edi,%edx
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 716:	89 d0                	mov    %edx,%eax
+ 718:	89 fa                	mov    %edi,%edx
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 700:	39 ce                	cmp    %ecx,%esi
- 702:	74 4c                	je     750 <malloc+0xf0>
+ 720:	39 ce                	cmp    %ecx,%esi
+ 722:	74 4c                	je     770 <malloc+0xf0>
         p->s.size -= nunits;
- 704:	29 f1                	sub    %esi,%ecx
- 706:	89 48 04             	mov    %ecx,0x4(%eax)
+ 724:	29 f1                	sub    %esi,%ecx
+ 726:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 70c:	89 70 04             	mov    %esi,0x4(%eax)
+ 72c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 70f:	89 15 a4 0a 00 00    	mov    %edx,0xaa4
+ 72f:	89 15 c4 0a 00 00    	mov    %edx,0xac4
 }
- 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 718:	83 c0 08             	add    $0x8,%eax
+ 738:	83 c0 08             	add    $0x8,%eax
 }
- 71b:	5b                   	pop    %ebx
- 71c:	5e                   	pop    %esi
- 71d:	5f                   	pop    %edi
- 71e:	5d                   	pop    %ebp
- 71f:	c3                   	ret    
+ 73b:	5b                   	pop    %ebx
+ 73c:	5e                   	pop    %esi
+ 73d:	5f                   	pop    %edi
+ 73e:	5d                   	pop    %ebp
+ 73f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 a4 0a 00 00 a8 	movl   $0xaa8,0xaa4
- 727:	0a 00 00 
+ 740:	c7 05 c4 0a 00 00 c8 	movl   $0xac8,0xac4
+ 747:	0a 00 00 
     base.s.size = 0;
- 72a:	bf a8 0a 00 00       	mov    $0xaa8,%edi
+ 74a:	bf c8 0a 00 00       	mov    $0xac8,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 a8 0a 00 00 a8 	movl   $0xaa8,0xaa8
- 736:	0a 00 00 
+ 74f:	c7 05 c8 0a 00 00 c8 	movl   $0xac8,0xac8
+ 756:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 fa                	mov    %edi,%edx
+ 759:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 73b:	c7 05 ac 0a 00 00 00 	movl   $0x0,0xaac
- 742:	00 00 00 
+ 75b:	c7 05 cc 0a 00 00 00 	movl   $0x0,0xacc
+ 762:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 08                	mov    (%eax),%ecx
- 752:	89 0a                	mov    %ecx,(%edx)
- 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b9                	jmp    72f <malloc+0xaf>
Binary files xv6-public-org/mkdir.o and xv6-public/mkdir.o differ
diff -u xv6-public-org/mkdir.sym xv6-public/mkdir.sym
--- xv6-public-org/mkdir.sym	2022-09-04 11:47:11.486019207 +0530
+++ xv6-public/mkdir.sym	2022-09-05 23:16:36.985929516 +0530
@@ -1,18 +1,19 @@
 00000000 mkdir.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007ec digits.0
+000003a0 printint
+0000080c digits.0
 00000000 umalloc.c
-00000aa4 freep
-00000aa8 base
+00000ac4 freep
+00000ac8 base
 00000080 strcpy
-00000430 printf
+00000450 printf
+00000383 thread_exit
 000002a0 memmove
 0000031b mknod
 000001a0 gets
 00000353 getpid
-00000660 malloc
+00000680 malloc
 00000363 sleep
 000002e3 pipe
 000002f3 write
@@ -26,20 +27,23 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000aa4 __bss_start
+00000ac4 __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000034b dup
 00000210 stat
-00000aa4 _edata
-00000ab0 _end
+00000ac4 _edata
+00000ad0 _end
 00000333 link
 000002d3 exit
 00000260 atoi
+0000038b draw
 00000110 strlen
 00000313 open
 00000160 strchr
+00000373 thread_create
 0000033b mkdir
 000002fb close
-000005d0 free
+0000037b thread_join
+000005f0 free
Binary files xv6-public-org/mp.o and xv6-public/mp.o differ
Binary files xv6-public-org/pipe.o and xv6-public/pipe.o differ
diff -u xv6-public-org/proc.c xv6-public/proc.c
--- xv6-public-org/proc.c	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/proc.c	2022-09-05 21:26:26.380271737 +0530
@@ -532,3 +532,119 @@
     cprintf("\n");
   }
 }
+
+// implemented by us
+
+int thread_create(void (*fcn)(void *),void *arg,void* stack){
+  if((uint)stack==0) // if no memory is allocated to the stack return -1
+  {
+    return -1;
+  }
+  int i,pid;  // pid is the process id 
+  struct proc *newproc;			//new process / child process
+  struct proc *current_proc = myproc();  //Current process in which thread is being created
+
+  if((newproc=allocproc())==0)return -1;  // allocating a new process to child if not successful return -1
+  newproc->pgdir = current_proc->pgdir;        // making sure both have same page directory
+  newproc->sz = current_proc->sz;              // making sure both have same size
+  newproc->parent = current_proc;              // pointing parent to child
+  *newproc->tf = *current_proc->tf;            // same trap frame
+
+  newproc->isThread = 1;                  // telling new process it is a thread
+
+  newproc->tf->eax = 0;                   // when new process gets finished 0 will be returned
+
+  newproc->tf->eip = (int)fcn;            // this is the function on which thread will work
+
+  newproc->tf->esp = (int) stack + 4096;  
+  newproc->tf->esp -= 4;
+  *((int*)(newproc->tf->esp)) = (int) arg;
+  newproc->tf->esp-=4;
+  *((int*)(newproc->tf->esp)) = 0xffffffff;
+  for(i=0;i<NOFILE;++i)
+  {
+  	if(current_proc->ofile[i])
+	{
+		newproc->ofile[i] = filedup(current_proc->ofile[i]); // copying all opened files from current process to new process
+	}	
+  }	
+  newproc->cwd = idup(current_proc->cwd);
+  safestrcpy(newproc->name,current_proc->name,sizeof(current_proc->name));
+  pid = newproc->pid;
+  acquire(&ptable.lock);
+  newproc->state = RUNNABLE;
+  release(&ptable.lock);
+  return pid;	
+}
+
+int thread_join(void){
+	struct proc *i;
+	int havekids; // havekids is the boolean value to check if the thread has any child or not 
+	int pid;
+	struct proc *current_proc = myproc(); //Current process in which thread is being created
+
+	acquire(&ptable.lock);
+	while(1){
+		havekids = 0;  
+		for(i = ptable.proc;i< &ptable.proc[NPROC];++i){
+			if(i->isThread!=0 && i->parent==current_proc){ //if the process is a thread and child of the current process
+				havekids = 1;
+				if(i->state==ZOMBIE){ //if it's in zombie state then re-initialiaze to make it available to be  used by other processes and return 
+					pid = i->pid;
+					i->kstack = 0;
+					i->pid = 0;
+					i->parent = 0;
+					i->name[0] = 0;
+					i->killed = 0;
+					i->state = UNUSED;
+					release(&ptable.lock);
+					return pid;
+				}
+			}	
+			
+		}
+		if(!havekids||current_proc->killed){// if it doesn't have any child or the current process itself is aborted then return -1
+			release(&ptable.lock);
+			return -1;
+		}
+		sleep(current_proc,&ptable.lock); // wait for any thread to complete its execution
+	}
+
+}
+
+
+int thread_exit(){
+	struct proc *current_proc = myproc();
+	struct proc *i;
+	int file;
+
+	if(current_proc==initproc)
+	{
+		panic("exit init");
+	}
+	for(file = 0;file<NOFILE;file++){
+		if(current_proc->ofile[file]){ 
+			fileclose(current_proc->ofile[file]); // closing all opened files of current process
+			current_proc->ofile[file] = 0;
+		}
+	}
+	begin_op();
+	iput(current_proc->cwd);
+	end_op();
+	current_proc->cwd = 0;
+	acquire(&ptable.lock);
+
+	wakeup1(current_proc->parent);
+	
+	for(i=ptable.proc;i<&ptable.proc[NPROC];++i){
+		if(i->parent==current_proc){
+			i->parent = initproc;
+			if(i->state==ZOMBIE){
+				wakeup1(initproc);
+			}
+		}
+	}
+	current_proc->state = ZOMBIE;
+	sched();
+	panic("exit zombie");
+}
diff -u xv6-public-org/proc.h xv6-public/proc.h
--- xv6-public-org/proc.h	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/proc.h	2022-09-05 12:34:58.465656045 +0530
@@ -48,7 +48,8 @@
   int killed;                  // If non-zero, have been killed
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
-  char name[16];               // Process name (debugging)
+  char name[16];
+  int isThread;               // Process name (debugging) // implemented by us denotes whether the process is thread or not
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files xv6-public-org/proc.o and xv6-public/proc.o differ
Binary files xv6-public-org/_rm and xv6-public/_rm differ
diff -u xv6-public-org/rm.asm xv6-public/rm.asm
--- xv6-public-org/rm.asm	2022-09-04 11:47:11.554053207 +0530
+++ xv6-public/rm.asm	2022-09-05 23:16:37.081929725 +0530
@@ -59,18 +59,18 @@
       printf(2, "rm: %s failed to delete\n", argv[i]);
   50:	50                   	push   %eax
   51:	ff 33                	push   (%ebx)
-  53:	68 6c 07 00 00       	push   $0x76c
+  53:	68 8c 07 00 00       	push   $0x78c
   58:	6a 02                	push   $0x2
-  5a:	e8 d1 03 00 00       	call   430 <printf>
+  5a:	e8 f1 03 00 00       	call   450 <printf>
       break;
   5f:	83 c4 10             	add    $0x10,%esp
   62:	eb e7                	jmp    4b <main+0x4b>
     printf(2, "Usage: rm files...\n");
   64:	52                   	push   %edx
   65:	52                   	push   %edx
-  66:	68 58 07 00 00       	push   $0x758
+  66:	68 78 07 00 00       	push   $0x778
   6b:	6a 02                	push   $0x2
-  6d:	e8 be 03 00 00       	call   430 <printf>
+  6d:	e8 de 03 00 00       	call   450 <printf>
     exit();
   72:	e8 5c 02 00 00       	call   2d3 <exit>
   77:	66 90                	xchg   %ax,%ax
@@ -603,569 +603,592 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
- 373:	66 90                	xchg   %ax,%ax
- 375:	66 90                	xchg   %ax,%ax
- 377:	66 90                	xchg   %ax,%ax
- 379:	66 90                	xchg   %ax,%ax
- 37b:	66 90                	xchg   %ax,%ax
- 37d:	66 90                	xchg   %ax,%ax
- 37f:	90                   	nop
 
-00000380 <printint>:
+00000373 <thread_create>:
+SYSCALL(thread_create)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <thread_join>:
+SYSCALL(thread_join)
+ 37b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <thread_exit>:
+SYSCALL(thread_exit)
+ 383:	b8 17 00 00 00       	mov    $0x17,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <draw>:
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+ 393:	66 90                	xchg   %ax,%ax
+ 395:	66 90                	xchg   %ax,%ax
+ 397:	66 90                	xchg   %ax,%ax
+ 399:	66 90                	xchg   %ax,%ax
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 380:	55                   	push   %ebp
- 381:	89 e5                	mov    %esp,%ebp
- 383:	57                   	push   %edi
- 384:	56                   	push   %esi
- 385:	53                   	push   %ebx
- 386:	83 ec 3c             	sub    $0x3c,%esp
- 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 38c:	89 d1                	mov    %edx,%ecx
+ 3ac:	89 d1                	mov    %edx,%ecx
 {
- 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 391:	85 d2                	test   %edx,%edx
- 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
- 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 39d:	74 79                	je     418 <printint+0x98>
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
     neg = 1;
- 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 3a6:	f7 d9                	neg    %ecx
+ 3c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 3a8:	31 db                	xor    %ebx,%ebx
- 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 3b0:	89 c8                	mov    %ecx,%eax
- 3b2:	31 d2                	xor    %edx,%edx
- 3b4:	89 cf                	mov    %ecx,%edi
- 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3b9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
- 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3c3:	89 d8                	mov    %ebx,%eax
- 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 04 08 00 00 	movzbl 0x804(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
   if(neg)
- 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3d6:	85 c9                	test   %ecx,%ecx
- 3d8:	74 0c                	je     3e6 <printint+0x66>
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
     buf[i++] = '-';
- 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 3df:	89 d8                	mov    %ebx,%eax
+ 3ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3ed:	eb 07                	jmp    3f6 <printint+0x76>
- 3ef:	90                   	nop
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
     putc(fd, buf[i]);
- 3f0:	0f b6 13             	movzbl (%ebx),%edx
- 3f3:	83 eb 01             	sub    $0x1,%ebx
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3f6:	83 ec 04             	sub    $0x4,%esp
- 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3fc:	6a 01                	push   $0x1
- 3fe:	56                   	push   %esi
- 3ff:	57                   	push   %edi
- 400:	e8 ee fe ff ff       	call   2f3 <write>
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
   while(--i >= 0)
- 405:	83 c4 10             	add    $0x10,%esp
- 408:	39 de                	cmp    %ebx,%esi
- 40a:	75 e4                	jne    3f0 <printint+0x70>
-}
- 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 40f:	5b                   	pop    %ebx
- 410:	5e                   	pop    %esi
- 411:	5f                   	pop    %edi
- 412:	5d                   	pop    %ebp
- 413:	c3                   	ret    
- 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 41f:	eb 87                	jmp    3a8 <printint+0x28>
- 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 42f:	90                   	nop
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
 
-00000430 <printf>:
+00000450 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	57                   	push   %edi
- 434:	56                   	push   %esi
- 435:	53                   	push   %ebx
- 436:	83 ec 2c             	sub    $0x2c,%esp
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 45c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 43f:	0f b6 13             	movzbl (%ebx),%edx
- 442:	84 d2                	test   %dl,%dl
- 444:	74 6a                	je     4b0 <printf+0x80>
+ 45f:	0f b6 13             	movzbl (%ebx),%edx
+ 462:	84 d2                	test   %dl,%dl
+ 464:	74 6a                	je     4d0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 446:	8d 45 10             	lea    0x10(%ebp),%eax
- 449:	83 c3 01             	add    $0x1,%ebx
+ 466:	8d 45 10             	lea    0x10(%ebp),%eax
+ 469:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 44f:	31 c9                	xor    %ecx,%ecx
+ 46f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 454:	eb 36                	jmp    48c <printf+0x5c>
- 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45d:	8d 76 00             	lea    0x0(%esi),%esi
- 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 474:	eb 36                	jmp    4ac <printf+0x5c>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 483:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 468:	83 f8 25             	cmp    $0x25,%eax
- 46b:	74 15                	je     482 <printf+0x52>
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 15                	je     4a2 <printf+0x52>
   write(fd, &c, 1);
- 46d:	83 ec 04             	sub    $0x4,%esp
- 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 473:	6a 01                	push   $0x1
- 475:	57                   	push   %edi
- 476:	56                   	push   %esi
- 477:	e8 77 fe ff ff       	call   2f3 <write>
- 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	56                   	push   %esi
+ 497:	e8 57 fe ff ff       	call   2f3 <write>
+ 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 47f:	83 c4 10             	add    $0x10,%esp
+ 49f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 482:	0f b6 13             	movzbl (%ebx),%edx
- 485:	83 c3 01             	add    $0x1,%ebx
- 488:	84 d2                	test   %dl,%dl
- 48a:	74 24                	je     4b0 <printf+0x80>
+ 4a2:	0f b6 13             	movzbl (%ebx),%edx
+ 4a5:	83 c3 01             	add    $0x1,%ebx
+ 4a8:	84 d2                	test   %dl,%dl
+ 4aa:	74 24                	je     4d0 <printf+0x80>
     c = fmt[i] & 0xff;
- 48c:	0f b6 c2             	movzbl %dl,%eax
+ 4ac:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 48f:	85 c9                	test   %ecx,%ecx
- 491:	74 cd                	je     460 <printf+0x30>
+ 4af:	85 c9                	test   %ecx,%ecx
+ 4b1:	74 cd                	je     480 <printf+0x30>
       }
     } else if(state == '%'){
- 493:	83 f9 25             	cmp    $0x25,%ecx
- 496:	75 ea                	jne    482 <printf+0x52>
+ 4b3:	83 f9 25             	cmp    $0x25,%ecx
+ 4b6:	75 ea                	jne    4a2 <printf+0x52>
       if(c == 'd'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
- 4a1:	83 e8 63             	sub    $0x63,%eax
- 4a4:	83 f8 15             	cmp    $0x15,%eax
- 4a7:	77 17                	ja     4c0 <printf+0x90>
- 4a9:	ff 24 85 8c 07 00 00 	jmp    *0x78c(,%eax,4)
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
+ 4c1:	83 e8 63             	sub    $0x63,%eax
+ 4c4:	83 f8 15             	cmp    $0x15,%eax
+ 4c7:	77 17                	ja     4e0 <printf+0x90>
+ 4c9:	ff 24 85 ac 07 00 00 	jmp    *0x7ac(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4b3:	5b                   	pop    %ebx
- 4b4:	5e                   	pop    %esi
- 4b5:	5f                   	pop    %edi
- 4b6:	5d                   	pop    %ebp
- 4b7:	c3                   	ret    
- 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4bf:	90                   	nop
+ 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d3:	5b                   	pop    %ebx
+ 4d4:	5e                   	pop    %esi
+ 4d5:	5f                   	pop    %edi
+ 4d6:	5d                   	pop    %ebp
+ 4d7:	c3                   	ret    
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
   write(fd, &c, 1);
- 4c0:	83 ec 04             	sub    $0x4,%esp
- 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 4c6:	6a 01                	push   $0x1
- 4c8:	57                   	push   %edi
- 4c9:	56                   	push   %esi
- 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4ce:	e8 20 fe ff ff       	call   2f3 <write>
+ 4e0:	83 ec 04             	sub    $0x4,%esp
+ 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4e6:	6a 01                	push   $0x1
+ 4e8:	57                   	push   %edi
+ 4e9:	56                   	push   %esi
+ 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ee:	e8 00 fe ff ff       	call   2f3 <write>
         putc(fd, c);
- 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 4d7:	83 c4 0c             	add    $0xc,%esp
- 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 4dd:	6a 01                	push   $0x1
- 4df:	57                   	push   %edi
- 4e0:	56                   	push   %esi
- 4e1:	e8 0d fe ff ff       	call   2f3 <write>
+ 4f7:	83 c4 0c             	add    $0xc,%esp
+ 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4fd:	6a 01                	push   $0x1
+ 4ff:	57                   	push   %edi
+ 500:	56                   	push   %esi
+ 501:	e8 ed fd ff ff       	call   2f3 <write>
         putc(fd, c);
- 4e6:	83 c4 10             	add    $0x10,%esp
+ 506:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4e9:	31 c9                	xor    %ecx,%ecx
- 4eb:	eb 95                	jmp    482 <printf+0x52>
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 509:	31 c9                	xor    %ecx,%ecx
+ 50b:	eb 95                	jmp    4a2 <printf+0x52>
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4f0:	83 ec 0c             	sub    $0xc,%esp
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4f8:	6a 00                	push   $0x0
- 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4fd:	8b 10                	mov    (%eax),%edx
- 4ff:	89 f0                	mov    %esi,%eax
- 501:	e8 7a fe ff ff       	call   380 <printint>
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51d:	8b 10                	mov    (%eax),%edx
+ 51f:	89 f0                	mov    %esi,%eax
+ 521:	e8 7a fe ff ff       	call   3a0 <printint>
         ap++;
- 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 50a:	83 c4 10             	add    $0x10,%esp
+ 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 52a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 50d:	31 c9                	xor    %ecx,%ecx
- 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 52d:	31 c9                	xor    %ecx,%ecx
+ 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 51b:	8b 10                	mov    (%eax),%edx
+ 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53b:	8b 10                	mov    (%eax),%edx
         ap++;
- 51d:	83 c0 04             	add    $0x4,%eax
- 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 523:	85 d2                	test   %edx,%edx
- 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+ 543:	85 d2                	test   %edx,%edx
+ 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
         while(*s != 0){
- 52b:	0f b6 02             	movzbl (%edx),%eax
+ 54b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 52e:	31 c9                	xor    %ecx,%ecx
+ 54e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 530:	84 c0                	test   %al,%al
- 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
- 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 53b:	89 d3                	mov    %edx,%ebx
- 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 550:	84 c0                	test   %al,%al
+ 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
+ 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 55b:	89 d3                	mov    %edx,%ebx
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 540:	83 ec 04             	sub    $0x4,%esp
+ 560:	83 ec 04             	sub    $0x4,%esp
           s++;
- 543:	83 c3 01             	add    $0x1,%ebx
- 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 563:	83 c3 01             	add    $0x1,%ebx
+ 566:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 549:	6a 01                	push   $0x1
- 54b:	57                   	push   %edi
- 54c:	56                   	push   %esi
- 54d:	e8 a1 fd ff ff       	call   2f3 <write>
+ 569:	6a 01                	push   $0x1
+ 56b:	57                   	push   %edi
+ 56c:	56                   	push   %esi
+ 56d:	e8 81 fd ff ff       	call   2f3 <write>
         while(*s != 0){
- 552:	0f b6 03             	movzbl (%ebx),%eax
- 555:	83 c4 10             	add    $0x10,%esp
- 558:	84 c0                	test   %al,%al
- 55a:	75 e4                	jne    540 <printf+0x110>
+ 572:	0f b6 03             	movzbl (%ebx),%eax
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	84 c0                	test   %al,%al
+ 57a:	75 e4                	jne    560 <printf+0x110>
       state = 0;
- 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 55f:	31 c9                	xor    %ecx,%ecx
- 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
- 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56d:	8d 76 00             	lea    0x0(%esi),%esi
+ 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 57f:	31 c9                	xor    %ecx,%ecx
+ 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
- 57f:	90                   	nop
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
+ 59f:	90                   	nop
         putc(fd, *ap);
- 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 586:	8b 00                	mov    (%eax),%eax
+ 5a6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
- 58a:	57                   	push   %edi
- 58b:	56                   	push   %esi
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	57                   	push   %edi
+ 5ab:	56                   	push   %esi
         putc(fd, *ap);
- 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 58f:	e8 5f fd ff ff       	call   2f3 <write>
+ 5af:	e8 3f fd ff ff       	call   2f3 <write>
         ap++;
- 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 598:	83 c4 10             	add    $0x10,%esp
+ 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5b8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 59b:	31 c9                	xor    %ecx,%ecx
- 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
- 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 5bb:	31 c9                	xor    %ecx,%ecx
+ 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 5ab:	83 ec 04             	sub    $0x4,%esp
- 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
- 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5b7:	90                   	nop
+ 5cb:	83 ec 04             	sub    $0x4,%esp
+ 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
+ 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d7:	90                   	nop
           s = "(null)";
- 5b8:	ba 85 07 00 00       	mov    $0x785,%edx
+ 5d8:	ba a5 07 00 00       	mov    $0x7a5,%edx
         while(*s != 0){
- 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
- 5c5:	89 d3                	mov    %edx,%ebx
- 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
- 5cc:	66 90                	xchg   %ax,%ax
- 5ce:	66 90                	xchg   %ax,%ax
+ 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e5:	89 d3                	mov    %edx,%ebx
+ 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
 
-000005d0 <free>:
+000005f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 5d0:	55                   	push   %ebp
+ 5f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5d1:	a1 9c 0a 00 00       	mov    0xa9c,%eax
+ 5f1:	a1 bc 0a 00 00       	mov    0xabc,%eax
 {
- 5d6:	89 e5                	mov    %esp,%ebp
- 5d8:	57                   	push   %edi
- 5d9:	56                   	push   %esi
- 5da:	53                   	push   %ebx
- 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5e8:	89 c2                	mov    %eax,%edx
- 5ea:	8b 00                	mov    (%eax),%eax
- 5ec:	39 ca                	cmp    %ecx,%edx
- 5ee:	73 30                	jae    620 <free+0x50>
- 5f0:	39 c1                	cmp    %eax,%ecx
- 5f2:	72 04                	jb     5f8 <free+0x28>
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 608:	89 c2                	mov    %eax,%edx
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	73 30                	jae    640 <free+0x50>
+ 610:	39 c1                	cmp    %eax,%ecx
+ 612:	72 04                	jb     618 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f4:	39 c2                	cmp    %eax,%edx
- 5f6:	72 f0                	jb     5e8 <free+0x18>
+ 614:	39 c2                	cmp    %eax,%edx
+ 616:	72 f0                	jb     608 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5fe:	39 f8                	cmp    %edi,%eax
- 600:	74 30                	je     632 <free+0x62>
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	74 30                	je     652 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 605:	8b 42 04             	mov    0x4(%edx),%eax
- 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 60b:	39 f1                	cmp    %esi,%ecx
- 60d:	74 3a                	je     649 <free+0x79>
+ 625:	8b 42 04             	mov    0x4(%edx),%eax
+ 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 3a                	je     669 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 60f:	89 0a                	mov    %ecx,(%edx)
+ 62f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 611:	5b                   	pop    %ebx
+ 631:	5b                   	pop    %ebx
   freep = p;
- 612:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+ 632:	89 15 bc 0a 00 00    	mov    %edx,0xabc
 }
- 618:	5e                   	pop    %esi
- 619:	5f                   	pop    %edi
- 61a:	5d                   	pop    %ebp
- 61b:	c3                   	ret    
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 638:	5e                   	pop    %esi
+ 639:	5f                   	pop    %edi
+ 63a:	5d                   	pop    %ebp
+ 63b:	c3                   	ret    
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 620:	39 c2                	cmp    %eax,%edx
- 622:	72 c4                	jb     5e8 <free+0x18>
- 624:	39 c1                	cmp    %eax,%ecx
- 626:	73 c0                	jae    5e8 <free+0x18>
+ 640:	39 c2                	cmp    %eax,%edx
+ 642:	72 c4                	jb     608 <free+0x18>
+ 644:	39 c1                	cmp    %eax,%ecx
+ 646:	73 c0                	jae    608 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 62e:	39 f8                	cmp    %edi,%eax
- 630:	75 d0                	jne    602 <free+0x32>
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	75 d0                	jne    622 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 632:	03 70 04             	add    0x4(%eax),%esi
- 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 652:	03 70 04             	add    0x4(%eax),%esi
+ 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 638:	8b 02                	mov    (%edx),%eax
- 63a:	8b 00                	mov    (%eax),%eax
- 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 658:	8b 02                	mov    (%edx),%eax
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 63f:	8b 42 04             	mov    0x4(%edx),%eax
- 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 645:	39 f1                	cmp    %esi,%ecx
- 647:	75 c6                	jne    60f <free+0x3f>
+ 65f:	8b 42 04             	mov    0x4(%edx),%eax
+ 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 665:	39 f1                	cmp    %esi,%ecx
+ 667:	75 c6                	jne    62f <free+0x3f>
     p->s.size += bp->s.size;
- 649:	03 43 fc             	add    -0x4(%ebx),%eax
+ 669:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 64c:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+ 66c:	89 15 bc 0a 00 00    	mov    %edx,0xabc
     p->s.size += bp->s.size;
- 652:	89 42 04             	mov    %eax,0x4(%edx)
+ 672:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 658:	89 0a                	mov    %ecx,(%edx)
+ 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 678:	89 0a                	mov    %ecx,(%edx)
 }
- 65a:	5b                   	pop    %ebx
- 65b:	5e                   	pop    %esi
- 65c:	5f                   	pop    %edi
- 65d:	5d                   	pop    %ebp
- 65e:	c3                   	ret    
- 65f:	90                   	nop
+ 67a:	5b                   	pop    %ebx
+ 67b:	5e                   	pop    %esi
+ 67c:	5f                   	pop    %edi
+ 67d:	5d                   	pop    %ebp
+ 67e:	c3                   	ret    
+ 67f:	90                   	nop
 
-00000660 <malloc>:
+00000680 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 660:	55                   	push   %ebp
- 661:	89 e5                	mov    %esp,%ebp
- 663:	57                   	push   %edi
- 664:	56                   	push   %esi
- 665:	53                   	push   %ebx
- 666:	83 ec 1c             	sub    $0x1c,%esp
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 669:	8b 45 08             	mov    0x8(%ebp),%eax
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 66c:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
+ 68c:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 672:	8d 70 07             	lea    0x7(%eax),%esi
- 675:	c1 ee 03             	shr    $0x3,%esi
- 678:	83 c6 01             	add    $0x1,%esi
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 67b:	85 ff                	test   %edi,%edi
- 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 683:	8b 17                	mov    (%edi),%edx
+ 6a3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 685:	8b 4a 04             	mov    0x4(%edx),%ecx
- 688:	39 f1                	cmp    %esi,%ecx
- 68a:	73 6a                	jae    6f6 <malloc+0x96>
- 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 691:	39 de                	cmp    %ebx,%esi
- 693:	0f 43 de             	cmovae %esi,%ebx
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 6a                	jae    716 <malloc+0x96>
+ 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b1:	39 de                	cmp    %ebx,%esi
+ 6b3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
- 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6a8:	8b 02                	mov    (%edx),%eax
+ 6c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ad:	39 f1                	cmp    %esi,%ecx
- 6af:	73 4f                	jae    700 <malloc+0xa0>
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f1                	cmp    %esi,%ecx
+ 6cf:	73 4f                	jae    720 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 6b1:	8b 3d 9c 0a 00 00    	mov    0xa9c,%edi
- 6b7:	89 c2                	mov    %eax,%edx
- 6b9:	39 d7                	cmp    %edx,%edi
- 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+ 6d1:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	39 d7                	cmp    %edx,%edi
+ 6db:	75 eb                	jne    6c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 6bd:	83 ec 0c             	sub    $0xc,%esp
- 6c0:	ff 75 e4             	push   -0x1c(%ebp)
- 6c3:	e8 93 fc ff ff       	call   35b <sbrk>
+ 6dd:	83 ec 0c             	sub    $0xc,%esp
+ 6e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6e3:	e8 73 fc ff ff       	call   35b <sbrk>
   if(p == (char*)-1)
- 6c8:	83 c4 10             	add    $0x10,%esp
- 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6ce:	74 1c                	je     6ec <malloc+0x8c>
+ 6e8:	83 c4 10             	add    $0x10,%esp
+ 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ee:	74 1c                	je     70c <malloc+0x8c>
   hp->s.size = nu;
- 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 6d3:	83 ec 0c             	sub    $0xc,%esp
- 6d6:	83 c0 08             	add    $0x8,%eax
- 6d9:	50                   	push   %eax
- 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+ 6f3:	83 ec 0c             	sub    $0xc,%esp
+ 6f6:	83 c0 08             	add    $0x8,%eax
+ 6f9:	50                   	push   %eax
+ 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
   return freep;
- 6df:	8b 15 9c 0a 00 00    	mov    0xa9c,%edx
+ 6ff:	8b 15 bc 0a 00 00    	mov    0xabc,%edx
       if((p = morecore(nunits)) == 0)
- 6e5:	83 c4 10             	add    $0x10,%esp
- 6e8:	85 d2                	test   %edx,%edx
- 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 bc                	jne    6c8 <malloc+0x48>
         return 0;
   }
 }
- 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 6ef:	31 c0                	xor    %eax,%eax
+ 70f:	31 c0                	xor    %eax,%eax
 }
- 6f1:	5b                   	pop    %ebx
- 6f2:	5e                   	pop    %esi
- 6f3:	5f                   	pop    %edi
- 6f4:	5d                   	pop    %ebp
- 6f5:	c3                   	ret    
+ 711:	5b                   	pop    %ebx
+ 712:	5e                   	pop    %esi
+ 713:	5f                   	pop    %edi
+ 714:	5d                   	pop    %ebp
+ 715:	c3                   	ret    
     if(p->s.size >= nunits){
- 6f6:	89 d0                	mov    %edx,%eax
- 6f8:	89 fa                	mov    %edi,%edx
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 716:	89 d0                	mov    %edx,%eax
+ 718:	89 fa                	mov    %edi,%edx
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 700:	39 ce                	cmp    %ecx,%esi
- 702:	74 4c                	je     750 <malloc+0xf0>
+ 720:	39 ce                	cmp    %ecx,%esi
+ 722:	74 4c                	je     770 <malloc+0xf0>
         p->s.size -= nunits;
- 704:	29 f1                	sub    %esi,%ecx
- 706:	89 48 04             	mov    %ecx,0x4(%eax)
+ 724:	29 f1                	sub    %esi,%ecx
+ 726:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 70c:	89 70 04             	mov    %esi,0x4(%eax)
+ 72c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 70f:	89 15 9c 0a 00 00    	mov    %edx,0xa9c
+ 72f:	89 15 bc 0a 00 00    	mov    %edx,0xabc
 }
- 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 718:	83 c0 08             	add    $0x8,%eax
+ 738:	83 c0 08             	add    $0x8,%eax
 }
- 71b:	5b                   	pop    %ebx
- 71c:	5e                   	pop    %esi
- 71d:	5f                   	pop    %edi
- 71e:	5d                   	pop    %ebp
- 71f:	c3                   	ret    
+ 73b:	5b                   	pop    %ebx
+ 73c:	5e                   	pop    %esi
+ 73d:	5f                   	pop    %edi
+ 73e:	5d                   	pop    %ebp
+ 73f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 720:	c7 05 9c 0a 00 00 a0 	movl   $0xaa0,0xa9c
- 727:	0a 00 00 
+ 740:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
+ 747:	0a 00 00 
     base.s.size = 0;
- 72a:	bf a0 0a 00 00       	mov    $0xaa0,%edi
+ 74a:	bf c0 0a 00 00       	mov    $0xac0,%edi
     base.s.ptr = freep = prevp = &base;
- 72f:	c7 05 a0 0a 00 00 a0 	movl   $0xaa0,0xaa0
- 736:	0a 00 00 
+ 74f:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
+ 756:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 739:	89 fa                	mov    %edi,%edx
+ 759:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 73b:	c7 05 a4 0a 00 00 00 	movl   $0x0,0xaa4
- 742:	00 00 00 
+ 75b:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
+ 762:	00 00 00 
     if(p->s.size >= nunits){
- 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 750:	8b 08                	mov    (%eax),%ecx
- 752:	89 0a                	mov    %ecx,(%edx)
- 754:	eb b9                	jmp    70f <malloc+0xaf>
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b9                	jmp    72f <malloc+0xaf>
Binary files xv6-public-org/rm.o and xv6-public/rm.o differ
diff -u xv6-public-org/rm.sym xv6-public/rm.sym
--- xv6-public-org/rm.sym	2022-09-04 11:47:11.566059208 +0530
+++ xv6-public/rm.sym	2022-09-05 23:16:37.105929777 +0530
@@ -1,18 +1,19 @@
 00000000 rm.c
 00000000 ulib.c
 00000000 printf.c
-00000380 printint
-000007e4 digits.0
+000003a0 printint
+00000804 digits.0
 00000000 umalloc.c
-00000a9c freep
-00000aa0 base
+00000abc freep
+00000ac0 base
 00000080 strcpy
-00000430 printf
+00000450 printf
+00000383 thread_exit
 000002a0 memmove
 0000031b mknod
 000001a0 gets
 00000353 getpid
-00000660 malloc
+00000680 malloc
 00000363 sleep
 000002e3 pipe
 000002f3 write
@@ -26,20 +27,23 @@
 000002cb fork
 0000035b sbrk
 0000036b uptime
-00000a9c __bss_start
+00000abc __bss_start
 00000140 memset
 00000000 main
 000000b0 strcmp
 0000034b dup
 00000210 stat
-00000a9c _edata
-00000aa8 _end
+00000abc _edata
+00000ac8 _end
 00000333 link
 000002d3 exit
 00000260 atoi
+0000038b draw
 00000110 strlen
 00000313 open
 00000160 strchr
+00000373 thread_create
 0000033b mkdir
 000002fb close
-000005d0 free
+0000037b thread_join
+000005f0 free
Binary files xv6-public-org/_sh and xv6-public/_sh differ
diff -u xv6-public-org/sh.asm xv6-public/sh.asm
--- xv6-public-org/sh.asm	2022-09-04 11:47:11.734143209 +0530
+++ xv6-public/sh.asm	2022-09-05 23:16:37.421930470 +0530
@@ -32,7 +32,7 @@
   while((fd = open("console", O_RDWR)) >= 0){
       21:	83 ec 08             	sub    $0x8,%esp
       24:	6a 02                	push   $0x2
-      26:	68 49 13 00 00       	push   $0x1349
+      26:	68 69 13 00 00       	push   $0x1369
       2b:	e8 33 0e 00 00       	call   e63 <open>
       30:	83 c4 10             	add    $0x10,%esp
       33:	85 c0                	test   %eax,%eax
@@ -45,7 +45,7 @@
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      40:	80 3d e2 19 00 00 20 	cmpb   $0x20,0x19e2
+      40:	80 3d 02 1a 00 00 20 	cmpb   $0x20,0x1a02
       47:	0f 84 88 00 00 00    	je     d5 <main+0xd5>
       4d:	8d 76 00             	lea    0x0(%esi),%esi
 int
@@ -65,30 +65,30 @@
       62:	e8 c4 0d 00 00       	call   e2b <wait>
   printf(2, "$ ");
       67:	83 ec 08             	sub    $0x8,%esp
-      6a:	68 a8 12 00 00       	push   $0x12a8
+      6a:	68 c8 12 00 00       	push   $0x12c8
       6f:	6a 02                	push   $0x2
-      71:	e8 0a 0f 00 00       	call   f80 <printf>
+      71:	e8 2a 0f 00 00       	call   fa0 <printf>
   memset(buf, 0, nbuf);
       76:	83 c4 0c             	add    $0xc,%esp
       79:	6a 64                	push   $0x64
       7b:	6a 00                	push   $0x0
-      7d:	68 e0 19 00 00       	push   $0x19e0
+      7d:	68 00 1a 00 00       	push   $0x1a00
       82:	e8 09 0c 00 00       	call   c90 <memset>
   gets(buf, nbuf);
       87:	58                   	pop    %eax
       88:	5a                   	pop    %edx
       89:	6a 64                	push   $0x64
-      8b:	68 e0 19 00 00       	push   $0x19e0
+      8b:	68 00 1a 00 00       	push   $0x1a00
       90:	e8 5b 0c 00 00       	call   cf0 <gets>
   if(buf[0] == 0) // EOF
-      95:	0f b6 05 e0 19 00 00 	movzbl 0x19e0,%eax
+      95:	0f b6 05 00 1a 00 00 	movzbl 0x1a00,%eax
       9c:	83 c4 10             	add    $0x10,%esp
       9f:	84 c0                	test   %al,%al
       a1:	74 77                	je     11a <main+0x11a>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
       a3:	3c 63                	cmp    $0x63,%al
       a5:	75 a9                	jne    50 <main+0x50>
-      a7:	80 3d e1 19 00 00 64 	cmpb   $0x64,0x19e1
+      a7:	80 3d 01 1a 00 00 64 	cmpb   $0x64,0x1a01
       ae:	75 a0                	jne    50 <main+0x50>
       b0:	eb 8e                	jmp    40 <main+0x40>
       close(fd);
@@ -100,18 +100,18 @@
       be:	eb a7                	jmp    67 <main+0x67>
       runcmd(parsecmd(buf));
       c0:	83 ec 0c             	sub    $0xc,%esp
-      c3:	68 e0 19 00 00       	push   $0x19e0
+      c3:	68 00 1a 00 00       	push   $0x1a00
       c8:	e8 93 0a 00 00       	call   b60 <parsecmd>
       cd:	89 04 24             	mov    %eax,(%esp)
       d0:	e8 db 00 00 00       	call   1b0 <runcmd>
       buf[strlen(buf)-1] = 0;  // chop \n
       d5:	83 ec 0c             	sub    $0xc,%esp
-      d8:	68 e0 19 00 00       	push   $0x19e0
+      d8:	68 00 1a 00 00       	push   $0x1a00
       dd:	e8 7e 0b 00 00       	call   c60 <strlen>
       if(chdir(buf+3) < 0)
-      e2:	c7 04 24 e3 19 00 00 	movl   $0x19e3,(%esp)
+      e2:	c7 04 24 03 1a 00 00 	movl   $0x1a03,(%esp)
       buf[strlen(buf)-1] = 0;  // chop \n
-      e9:	c6 80 df 19 00 00 00 	movb   $0x0,0x19df(%eax)
+      e9:	c6 80 ff 19 00 00 00 	movb   $0x0,0x19ff(%eax)
       if(chdir(buf+3) < 0)
       f0:	e8 9e 0d 00 00       	call   e93 <chdir>
       f5:	83 c4 10             	add    $0x10,%esp
@@ -119,17 +119,17 @@
       fa:	0f 89 67 ff ff ff    	jns    67 <main+0x67>
         printf(2, "cannot cd %s\n", buf+3);
      100:	51                   	push   %ecx
-     101:	68 e3 19 00 00       	push   $0x19e3
-     106:	68 51 13 00 00       	push   $0x1351
+     101:	68 03 1a 00 00       	push   $0x1a03
+     106:	68 71 13 00 00       	push   $0x1371
      10b:	6a 02                	push   $0x2
-     10d:	e8 6e 0e 00 00       	call   f80 <printf>
+     10d:	e8 8e 0e 00 00       	call   fa0 <printf>
      112:	83 c4 10             	add    $0x10,%esp
      115:	e9 4d ff ff ff       	jmp    67 <main+0x67>
   exit();
      11a:	e8 04 0d 00 00       	call   e23 <exit>
     panic("fork");
      11f:	83 ec 0c             	sub    $0xc,%esp
-     122:	68 ab 12 00 00       	push   $0x12ab
+     122:	68 cb 12 00 00       	push   $0x12cb
      127:	e8 44 00 00 00       	call   170 <panic>
      12c:	66 90                	xchg   %ax,%ax
      12e:	66 90                	xchg   %ax,%ax
@@ -144,9 +144,9 @@
      138:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
      13b:	83 ec 08             	sub    $0x8,%esp
-     13e:	68 a8 12 00 00       	push   $0x12a8
+     13e:	68 c8 12 00 00       	push   $0x12c8
      143:	6a 02                	push   $0x2
-     145:	e8 36 0e 00 00       	call   f80 <printf>
+     145:	e8 56 0e 00 00       	call   fa0 <printf>
   memset(buf, 0, nbuf);
      14a:	83 c4 0c             	add    $0xc,%esp
      14d:	56                   	push   %esi
@@ -178,9 +178,9 @@
      173:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
      176:	ff 75 08             	push   0x8(%ebp)
-     179:	68 45 13 00 00       	push   $0x1345
+     179:	68 65 13 00 00       	push   $0x1365
      17e:	6a 02                	push   $0x2
-     180:	e8 fb 0d 00 00       	call   f80 <printf>
+     180:	e8 1b 0e 00 00       	call   fa0 <printf>
   exit();
      185:	e8 99 0c 00 00       	call   e23 <exit>
      18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -201,7 +201,7 @@
      1a1:	c3                   	ret    
     panic("fork");
      1a2:	83 ec 0c             	sub    $0xc,%esp
-     1a5:	68 ab 12 00 00       	push   $0x12ab
+     1a5:	68 cb 12 00 00       	push   $0x12cb
      1aa:	e8 c1 ff ff ff       	call   170 <panic>
      1af:	90                   	nop
 
@@ -219,7 +219,7 @@
      1be:	83 3b 05             	cmpl   $0x5,(%ebx)
      1c1:	0f 87 e3 00 00 00    	ja     2aa <runcmd+0xfa>
      1c7:	8b 03                	mov    (%ebx),%eax
-     1c9:	ff 24 85 60 13 00 00 	jmp    *0x1360(,%eax,4)
+     1c9:	ff 24 85 80 13 00 00 	jmp    *0x1380(,%eax,4)
     if(ecmd->argv[0] == 0)
      1d0:	8b 43 04             	mov    0x4(%ebx),%eax
      1d3:	85 c0                	test   %eax,%eax
@@ -234,9 +234,9 @@
     printf(2, "exec %s failed\n", ecmd->argv[0]);
      1e3:	83 c4 0c             	add    $0xc,%esp
      1e6:	ff 73 04             	push   0x4(%ebx)
-     1e9:	68 b7 12 00 00       	push   $0x12b7
+     1e9:	68 d7 12 00 00       	push   $0x12d7
      1ee:	6a 02                	push   $0x2
-     1f0:	e8 8b 0d 00 00       	call   f80 <printf>
+     1f0:	e8 ab 0d 00 00       	call   fa0 <printf>
     break;
      1f5:	83 c4 10             	add    $0x10,%esp
      1f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -308,19 +308,19 @@
      2a5:	e8 06 ff ff ff       	call   1b0 <runcmd>
     panic("runcmd");
      2aa:	83 ec 0c             	sub    $0xc,%esp
-     2ad:	68 b0 12 00 00       	push   $0x12b0
+     2ad:	68 d0 12 00 00       	push   $0x12d0
      2b2:	e8 b9 fe ff ff       	call   170 <panic>
       printf(2, "open %s failed\n", rcmd->file);
      2b7:	51                   	push   %ecx
      2b8:	ff 73 08             	push   0x8(%ebx)
-     2bb:	68 c7 12 00 00       	push   $0x12c7
+     2bb:	68 e7 12 00 00       	push   $0x12e7
      2c0:	6a 02                	push   $0x2
-     2c2:	e8 b9 0c 00 00       	call   f80 <printf>
+     2c2:	e8 d9 0c 00 00       	call   fa0 <printf>
       exit();
      2c7:	e8 57 0b 00 00       	call   e23 <exit>
       panic("pipe");
      2cc:	83 ec 0c             	sub    $0xc,%esp
-     2cf:	68 d7 12 00 00       	push   $0x12d7
+     2cf:	68 f7 12 00 00       	push   $0x12f7
      2d4:	e8 97 fe ff ff       	call   170 <panic>
       close(1);
      2d9:	83 ec 0c             	sub    $0xc,%esp
@@ -380,7 +380,7 @@
 
   cmd = malloc(sizeof(*cmd));
      347:	6a 54                	push   $0x54
-     349:	e8 62 0e 00 00       	call   11b0 <malloc>
+     349:	e8 82 0e 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      34e:	83 c4 0c             	add    $0xc,%esp
      351:	6a 54                	push   $0x54
@@ -413,7 +413,7 @@
 
   cmd = malloc(sizeof(*cmd));
      377:	6a 18                	push   $0x18
-     379:	e8 32 0e 00 00       	call   11b0 <malloc>
+     379:	e8 52 0e 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      37e:	83 c4 0c             	add    $0xc,%esp
      381:	6a 18                	push   $0x18
@@ -464,7 +464,7 @@
 
   cmd = malloc(sizeof(*cmd));
      3c7:	6a 0c                	push   $0xc
-     3c9:	e8 e2 0d 00 00       	call   11b0 <malloc>
+     3c9:	e8 02 0e 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      3ce:	83 c4 0c             	add    $0xc,%esp
      3d1:	6a 0c                	push   $0xc
@@ -506,7 +506,7 @@
 
   cmd = malloc(sizeof(*cmd));
      407:	6a 0c                	push   $0xc
-     409:	e8 a2 0d 00 00       	call   11b0 <malloc>
+     409:	e8 c2 0d 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      40e:	83 c4 0c             	add    $0xc,%esp
      411:	6a 0c                	push   $0xc
@@ -548,7 +548,7 @@
 
   cmd = malloc(sizeof(*cmd));
      447:	6a 08                	push   $0x8
-     449:	e8 62 0d 00 00       	call   11b0 <malloc>
+     449:	e8 82 0d 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      44e:	83 c4 0c             	add    $0xc,%esp
      451:	6a 08                	push   $0x8
@@ -608,7 +608,7 @@
      497:	0f be 07             	movsbl (%edi),%eax
      49a:	83 ec 08             	sub    $0x8,%esp
      49d:	50                   	push   %eax
-     49e:	68 cc 19 00 00       	push   $0x19cc
+     49e:	68 ec 19 00 00       	push   $0x19ec
      4a3:	e8 08 08 00 00       	call   cb0 <strchr>
      4a8:	83 c4 10             	add    $0x10,%esp
      4ab:	85 c0                	test   %eax,%eax
@@ -653,7 +653,7 @@
      4e7:	0f be 07             	movsbl (%edi),%eax
      4ea:	83 ec 08             	sub    $0x8,%esp
      4ed:	50                   	push   %eax
-     4ee:	68 cc 19 00 00       	push   $0x19cc
+     4ee:	68 ec 19 00 00       	push   $0x19ec
      4f3:	e8 b8 07 00 00       	call   cb0 <strchr>
      4f8:	83 c4 10             	add    $0x10,%esp
      4fb:	85 c0                	test   %eax,%eax
@@ -687,7 +687,7 @@
      528:	0f be 07             	movsbl (%edi),%eax
      52b:	83 ec 08             	sub    $0x8,%esp
      52e:	50                   	push   %eax
-     52f:	68 c4 19 00 00       	push   $0x19c4
+     52f:	68 e4 19 00 00       	push   $0x19e4
      534:	e8 77 07 00 00       	call   cb0 <strchr>
      539:	83 c4 10             	add    $0x10,%esp
      53c:	85 c0                	test   %eax,%eax
@@ -701,7 +701,7 @@
      54a:	83 ec 08             	sub    $0x8,%esp
      54d:	0f be f0             	movsbl %al,%esi
      550:	56                   	push   %esi
-     551:	68 cc 19 00 00       	push   $0x19cc
+     551:	68 ec 19 00 00       	push   $0x19ec
      556:	e8 55 07 00 00       	call   cb0 <strchr>
      55b:	83 c4 10             	add    $0x10,%esp
      55e:	85 c0                	test   %eax,%eax
@@ -781,7 +781,7 @@
      5f7:	0f be 03             	movsbl (%ebx),%eax
      5fa:	83 ec 08             	sub    $0x8,%esp
      5fd:	50                   	push   %eax
-     5fe:	68 cc 19 00 00       	push   $0x19cc
+     5fe:	68 ec 19 00 00       	push   $0x19ec
      603:	e8 a8 06 00 00       	call   cb0 <strchr>
      608:	83 c4 10             	add    $0x10,%esp
      60b:	85 c0                	test   %eax,%eax
@@ -843,7 +843,7 @@
   while(peek(ps, es, "<>")){
      65f:	90                   	nop
      660:	83 ec 04             	sub    $0x4,%esp
-     663:	68 f9 12 00 00       	push   $0x12f9
+     663:	68 19 13 00 00       	push   $0x1319
      668:	53                   	push   %ebx
      669:	56                   	push   %esi
      66a:	e8 61 ff ff ff       	call   5d0 <peek>
@@ -892,7 +892,7 @@
      6bc:	89 55 d0             	mov    %edx,-0x30(%ebp)
      6bf:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
   cmd = malloc(sizeof(*cmd));
-     6c2:	e8 e9 0a 00 00       	call   11b0 <malloc>
+     6c2:	e8 09 0b 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      6c7:	83 c4 0c             	add    $0xc,%esp
      6ca:	6a 18                	push   $0x18
@@ -937,7 +937,7 @@
      71b:	89 55 d0             	mov    %edx,-0x30(%ebp)
      71e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
   cmd = malloc(sizeof(*cmd));
-     721:	e8 8a 0a 00 00       	call   11b0 <malloc>
+     721:	e8 aa 0a 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      726:	83 c4 0c             	add    $0xc,%esp
      729:	6a 18                	push   $0x18
@@ -986,7 +986,7 @@
      77a:	c3                   	ret    
       panic("missing file for redirection");
      77b:	83 ec 0c             	sub    $0xc,%esp
-     77e:	68 dc 12 00 00       	push   $0x12dc
+     77e:	68 fc 12 00 00       	push   $0x12fc
      783:	e8 e8 f9 ff ff       	call   170 <panic>
      788:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      78f:	90                   	nop
@@ -1012,7 +1012,7 @@
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     79f:	68 fc 12 00 00       	push   $0x12fc
+     79f:	68 1c 13 00 00       	push   $0x131c
      7a4:	57                   	push   %edi
      7a5:	56                   	push   %esi
      7a6:	e8 25 fe ff ff       	call   5d0 <peek>
@@ -1023,7 +1023,7 @@
      7b6:	83 ec 0c             	sub    $0xc,%esp
      7b9:	89 c3                	mov    %eax,%ebx
      7bb:	6a 54                	push   $0x54
-     7bd:	e8 ee 09 00 00       	call   11b0 <malloc>
+     7bd:	e8 0e 0a 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      7c2:	83 c4 0c             	add    $0xc,%esp
      7c5:	6a 54                	push   $0x54
@@ -1069,7 +1069,7 @@
      800:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
      803:	83 ec 04             	sub    $0x4,%esp
-     806:	68 13 13 00 00       	push   $0x1313
+     806:	68 33 13 00 00       	push   $0x1333
      80b:	57                   	push   %edi
      80c:	56                   	push   %esi
      80d:	e8 be fd ff ff       	call   5d0 <peek>
@@ -1104,7 +1104,7 @@
      84b:	75 a3                	jne    7f0 <parseexec+0x60>
       panic("too many args");
      84d:	83 ec 0c             	sub    $0xc,%esp
-     850:	68 05 13 00 00       	push   $0x1305
+     850:	68 25 13 00 00       	push   $0x1325
      855:	e8 16 f9 ff ff       	call   170 <panic>
      85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
@@ -1140,7 +1140,7 @@
      895:	c3                   	ret    
       panic("syntax");
      896:	83 ec 0c             	sub    $0xc,%esp
-     899:	68 fe 12 00 00       	push   $0x12fe
+     899:	68 1e 13 00 00       	push   $0x131e
      89e:	e8 cd f8 ff ff       	call   170 <panic>
      8a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -1161,7 +1161,7 @@
      8c1:	e8 ca fe ff ff       	call   790 <parseexec>
   if(peek(ps, es, "|")){
      8c6:	83 c4 0c             	add    $0xc,%esp
-     8c9:	68 18 13 00 00       	push   $0x1318
+     8c9:	68 38 13 00 00       	push   $0x1338
   cmd = parseexec(ps, es);
      8ce:	89 c3                	mov    %eax,%ebx
   if(peek(ps, es, "|")){
@@ -1198,7 +1198,7 @@
     cmd = pipecmd(cmd, parsepipe(ps, es));
      90b:	89 c7                	mov    %eax,%edi
   cmd = malloc(sizeof(*cmd));
-     90d:	e8 9e 08 00 00       	call   11b0 <malloc>
+     90d:	e8 be 08 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      912:	83 c4 0c             	add    $0xc,%esp
      915:	6a 0c                	push   $0xc
@@ -1257,7 +1257,7 @@
      966:	e8 05 fb ff ff       	call   470 <gettoken>
   cmd = malloc(sizeof(*cmd));
      96b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-     972:	e8 39 08 00 00       	call   11b0 <malloc>
+     972:	e8 59 08 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      977:	83 c4 0c             	add    $0xc,%esp
      97a:	6a 08                	push   $0x8
@@ -1276,7 +1276,7 @@
      996:	89 d3                	mov    %edx,%ebx
   while(peek(ps, es, "&")){
      998:	83 ec 04             	sub    $0x4,%esp
-     99b:	68 1a 13 00 00       	push   $0x131a
+     99b:	68 3a 13 00 00       	push   $0x133a
      9a0:	57                   	push   %edi
      9a1:	56                   	push   %esi
      9a2:	e8 29 fc ff ff       	call   5d0 <peek>
@@ -1285,7 +1285,7 @@
      9ac:	75 b2                	jne    960 <parseline+0x20>
   if(peek(ps, es, ";")){
      9ae:	83 ec 04             	sub    $0x4,%esp
-     9b1:	68 16 13 00 00       	push   $0x1316
+     9b1:	68 36 13 00 00       	push   $0x1336
      9b6:	57                   	push   %edi
      9b7:	56                   	push   %esi
      9b8:	e8 13 fc ff ff       	call   5d0 <peek>
@@ -1318,7 +1318,7 @@
     cmd = listcmd(cmd, parseline(ps, es));
      9eb:	89 c7                	mov    %eax,%edi
   cmd = malloc(sizeof(*cmd));
-     9ed:	e8 be 07 00 00       	call   11b0 <malloc>
+     9ed:	e8 de 07 00 00       	call   11d0 <malloc>
   memset(cmd, 0, sizeof(*cmd));
      9f2:	83 c4 0c             	add    $0xc,%esp
      9f5:	6a 0c                	push   $0xc
@@ -1359,7 +1359,7 @@
      a29:	8b 5d 08             	mov    0x8(%ebp),%ebx
      a2c:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     a2f:	68 fc 12 00 00       	push   $0x12fc
+     a2f:	68 1c 13 00 00       	push   $0x131c
      a34:	56                   	push   %esi
      a35:	53                   	push   %ebx
      a36:	e8 95 fb ff ff       	call   5d0 <peek>
@@ -1380,7 +1380,7 @@
      a51:	e8 ea fe ff ff       	call   940 <parseline>
   if(!peek(ps, es, ")"))
      a56:	83 c4 0c             	add    $0xc,%esp
-     a59:	68 38 13 00 00       	push   $0x1338
+     a59:	68 58 13 00 00       	push   $0x1358
   cmd = parseline(ps, es);
      a5e:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
@@ -1411,11 +1411,11 @@
      a8b:	c3                   	ret    
     panic("parseblock");
      a8c:	83 ec 0c             	sub    $0xc,%esp
-     a8f:	68 1c 13 00 00       	push   $0x131c
+     a8f:	68 3c 13 00 00       	push   $0x133c
      a94:	e8 d7 f6 ff ff       	call   170 <panic>
     panic("syntax - missing )");
      a99:	83 ec 0c             	sub    $0xc,%esp
-     a9c:	68 27 13 00 00       	push   $0x1327
+     a9c:	68 47 13 00 00       	push   $0x1347
      aa1:	e8 ca f6 ff ff       	call   170 <panic>
      aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
      aad:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1445,7 +1445,7 @@
      ac2:	83 3b 05             	cmpl   $0x5,(%ebx)
      ac5:	77 61                	ja     b28 <nulterminate+0x78>
      ac7:	8b 03                	mov    (%ebx),%eax
-     ac9:	ff 24 85 78 13 00 00 	jmp    *0x1378(,%eax,4)
+     ac9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)
     nulterminate(pcmd->right);
     break;
 
@@ -1558,7 +1558,7 @@
      b7b:	e8 c0 fd ff ff       	call   940 <parseline>
   peek(&s, es, "");
      b80:	83 c4 0c             	add    $0xc,%esp
-     b83:	68 c6 12 00 00       	push   $0x12c6
+     b83:	68 e6 12 00 00       	push   $0x12e6
   cmd = parseline(&s, es);
      b88:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
@@ -1585,11 +1585,11 @@
     printf(2, "leftovers: %s\n", s);
      bae:	52                   	push   %edx
      baf:	50                   	push   %eax
-     bb0:	68 3a 13 00 00       	push   $0x133a
+     bb0:	68 5a 13 00 00       	push   $0x135a
      bb5:	6a 02                	push   $0x2
-     bb7:	e8 c4 03 00 00       	call   f80 <printf>
+     bb7:	e8 e4 03 00 00       	call   fa0 <printf>
     panic("syntax");
-     bbc:	c7 04 24 fe 12 00 00 	movl   $0x12fe,(%esp)
+     bbc:	c7 04 24 1e 13 00 00 	movl   $0x131e,(%esp)
      bc3:	e8 a8 f5 ff ff       	call   170 <panic>
      bc8:	66 90                	xchg   %ax,%ax
      bca:	66 90                	xchg   %ax,%ax
@@ -2120,569 +2120,592 @@
      ebb:	b8 0e 00 00 00       	mov    $0xe,%eax
      ec0:	cd 40                	int    $0x40
      ec2:	c3                   	ret    
-     ec3:	66 90                	xchg   %ax,%ax
-     ec5:	66 90                	xchg   %ax,%ax
-     ec7:	66 90                	xchg   %ax,%ax
-     ec9:	66 90                	xchg   %ax,%ax
-     ecb:	66 90                	xchg   %ax,%ax
-     ecd:	66 90                	xchg   %ax,%ax
-     ecf:	90                   	nop
 
-00000ed0 <printint>:
+00000ec3 <thread_create>:
+SYSCALL(thread_create)
+     ec3:	b8 16 00 00 00       	mov    $0x16,%eax
+     ec8:	cd 40                	int    $0x40
+     eca:	c3                   	ret    
+
+00000ecb <thread_join>:
+SYSCALL(thread_join)
+     ecb:	b8 18 00 00 00       	mov    $0x18,%eax
+     ed0:	cd 40                	int    $0x40
+     ed2:	c3                   	ret    
+
+00000ed3 <thread_exit>:
+SYSCALL(thread_exit)
+     ed3:	b8 17 00 00 00       	mov    $0x17,%eax
+     ed8:	cd 40                	int    $0x40
+     eda:	c3                   	ret    
+
+00000edb <draw>:
+     edb:	b8 19 00 00 00       	mov    $0x19,%eax
+     ee0:	cd 40                	int    $0x40
+     ee2:	c3                   	ret    
+     ee3:	66 90                	xchg   %ax,%ax
+     ee5:	66 90                	xchg   %ax,%ax
+     ee7:	66 90                	xchg   %ax,%ax
+     ee9:	66 90                	xchg   %ax,%ax
+     eeb:	66 90                	xchg   %ax,%ax
+     eed:	66 90                	xchg   %ax,%ax
+     eef:	90                   	nop
+
+00000ef0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     ed0:	55                   	push   %ebp
-     ed1:	89 e5                	mov    %esp,%ebp
-     ed3:	57                   	push   %edi
-     ed4:	56                   	push   %esi
-     ed5:	53                   	push   %ebx
-     ed6:	83 ec 3c             	sub    $0x3c,%esp
-     ed9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+     ef0:	55                   	push   %ebp
+     ef1:	89 e5                	mov    %esp,%ebp
+     ef3:	57                   	push   %edi
+     ef4:	56                   	push   %esi
+     ef5:	53                   	push   %ebx
+     ef6:	83 ec 3c             	sub    $0x3c,%esp
+     ef9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-     edc:	89 d1                	mov    %edx,%ecx
+     efc:	89 d1                	mov    %edx,%ecx
 {
-     ede:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     efe:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-     ee1:	85 d2                	test   %edx,%edx
-     ee3:	0f 89 7f 00 00 00    	jns    f68 <printint+0x98>
-     ee9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     eed:	74 79                	je     f68 <printint+0x98>
+     f01:	85 d2                	test   %edx,%edx
+     f03:	0f 89 7f 00 00 00    	jns    f88 <printint+0x98>
+     f09:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     f0d:	74 79                	je     f88 <printint+0x98>
     neg = 1;
-     eef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+     f0f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-     ef6:	f7 d9                	neg    %ecx
+     f16:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-     ef8:	31 db                	xor    %ebx,%ebx
-     efa:	8d 75 d7             	lea    -0x29(%ebp),%esi
-     efd:	8d 76 00             	lea    0x0(%esi),%esi
+     f18:	31 db                	xor    %ebx,%ebx
+     f1a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     f1d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-     f00:	89 c8                	mov    %ecx,%eax
-     f02:	31 d2                	xor    %edx,%edx
-     f04:	89 cf                	mov    %ecx,%edi
-     f06:	f7 75 c4             	divl   -0x3c(%ebp)
-     f09:	0f b6 92 f0 13 00 00 	movzbl 0x13f0(%edx),%edx
-     f10:	89 45 c0             	mov    %eax,-0x40(%ebp)
-     f13:	89 d8                	mov    %ebx,%eax
-     f15:	8d 5b 01             	lea    0x1(%ebx),%ebx
+     f20:	89 c8                	mov    %ecx,%eax
+     f22:	31 d2                	xor    %edx,%edx
+     f24:	89 cf                	mov    %ecx,%edi
+     f26:	f7 75 c4             	divl   -0x3c(%ebp)
+     f29:	0f b6 92 10 14 00 00 	movzbl 0x1410(%edx),%edx
+     f30:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     f33:	89 d8                	mov    %ebx,%eax
+     f35:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-     f18:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+     f38:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-     f1b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+     f3b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-     f1e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-     f21:	76 dd                	jbe    f00 <printint+0x30>
+     f3e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     f41:	76 dd                	jbe    f20 <printint+0x30>
   if(neg)
-     f23:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-     f26:	85 c9                	test   %ecx,%ecx
-     f28:	74 0c                	je     f36 <printint+0x66>
+     f43:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     f46:	85 c9                	test   %ecx,%ecx
+     f48:	74 0c                	je     f56 <printint+0x66>
     buf[i++] = '-';
-     f2a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+     f4a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-     f2f:	89 d8                	mov    %ebx,%eax
+     f4f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-     f31:	ba 2d 00 00 00       	mov    $0x2d,%edx
+     f51:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-     f36:	8b 7d b8             	mov    -0x48(%ebp),%edi
-     f39:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-     f3d:	eb 07                	jmp    f46 <printint+0x76>
-     f3f:	90                   	nop
+     f56:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     f59:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     f5d:	eb 07                	jmp    f66 <printint+0x76>
+     f5f:	90                   	nop
     putc(fd, buf[i]);
-     f40:	0f b6 13             	movzbl (%ebx),%edx
-     f43:	83 eb 01             	sub    $0x1,%ebx
+     f60:	0f b6 13             	movzbl (%ebx),%edx
+     f63:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-     f46:	83 ec 04             	sub    $0x4,%esp
-     f49:	88 55 d7             	mov    %dl,-0x29(%ebp)
-     f4c:	6a 01                	push   $0x1
-     f4e:	56                   	push   %esi
-     f4f:	57                   	push   %edi
-     f50:	e8 ee fe ff ff       	call   e43 <write>
+     f66:	83 ec 04             	sub    $0x4,%esp
+     f69:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     f6c:	6a 01                	push   $0x1
+     f6e:	56                   	push   %esi
+     f6f:	57                   	push   %edi
+     f70:	e8 ce fe ff ff       	call   e43 <write>
   while(--i >= 0)
-     f55:	83 c4 10             	add    $0x10,%esp
-     f58:	39 de                	cmp    %ebx,%esi
-     f5a:	75 e4                	jne    f40 <printint+0x70>
-}
-     f5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     f5f:	5b                   	pop    %ebx
-     f60:	5e                   	pop    %esi
-     f61:	5f                   	pop    %edi
-     f62:	5d                   	pop    %ebp
-     f63:	c3                   	ret    
-     f64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f75:	83 c4 10             	add    $0x10,%esp
+     f78:	39 de                	cmp    %ebx,%esi
+     f7a:	75 e4                	jne    f60 <printint+0x70>
+}
+     f7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f7f:	5b                   	pop    %ebx
+     f80:	5e                   	pop    %esi
+     f81:	5f                   	pop    %edi
+     f82:	5d                   	pop    %ebp
+     f83:	c3                   	ret    
+     f84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-     f68:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-     f6f:	eb 87                	jmp    ef8 <printint+0x28>
-     f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f7f:	90                   	nop
+     f88:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     f8f:	eb 87                	jmp    f18 <printint+0x28>
+     f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f9f:	90                   	nop
 
-00000f80 <printf>:
+00000fa0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     f80:	55                   	push   %ebp
-     f81:	89 e5                	mov    %esp,%ebp
-     f83:	57                   	push   %edi
-     f84:	56                   	push   %esi
-     f85:	53                   	push   %ebx
-     f86:	83 ec 2c             	sub    $0x2c,%esp
+     fa0:	55                   	push   %ebp
+     fa1:	89 e5                	mov    %esp,%ebp
+     fa3:	57                   	push   %edi
+     fa4:	56                   	push   %esi
+     fa5:	53                   	push   %ebx
+     fa6:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     f89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     fa9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
-     f8c:	8b 75 08             	mov    0x8(%ebp),%esi
+     fac:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
-     f8f:	0f b6 13             	movzbl (%ebx),%edx
-     f92:	84 d2                	test   %dl,%dl
-     f94:	74 6a                	je     1000 <printf+0x80>
+     faf:	0f b6 13             	movzbl (%ebx),%edx
+     fb2:	84 d2                	test   %dl,%dl
+     fb4:	74 6a                	je     1020 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
-     f96:	8d 45 10             	lea    0x10(%ebp),%eax
-     f99:	83 c3 01             	add    $0x1,%ebx
+     fb6:	8d 45 10             	lea    0x10(%ebp),%eax
+     fb9:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
-     f9c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+     fbc:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-     f9f:	31 c9                	xor    %ecx,%ecx
+     fbf:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
-     fa1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     fa4:	eb 36                	jmp    fdc <printf+0x5c>
-     fa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fad:	8d 76 00             	lea    0x0(%esi),%esi
-     fb0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+     fc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     fc4:	eb 36                	jmp    ffc <printf+0x5c>
+     fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fcd:	8d 76 00             	lea    0x0(%esi),%esi
+     fd0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-     fb3:	b9 25 00 00 00       	mov    $0x25,%ecx
+     fd3:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
-     fb8:	83 f8 25             	cmp    $0x25,%eax
-     fbb:	74 15                	je     fd2 <printf+0x52>
+     fd8:	83 f8 25             	cmp    $0x25,%eax
+     fdb:	74 15                	je     ff2 <printf+0x52>
   write(fd, &c, 1);
-     fbd:	83 ec 04             	sub    $0x4,%esp
-     fc0:	88 55 e7             	mov    %dl,-0x19(%ebp)
-     fc3:	6a 01                	push   $0x1
-     fc5:	57                   	push   %edi
-     fc6:	56                   	push   %esi
-     fc7:	e8 77 fe ff ff       	call   e43 <write>
-     fcc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     fdd:	83 ec 04             	sub    $0x4,%esp
+     fe0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+     fe3:	6a 01                	push   $0x1
+     fe5:	57                   	push   %edi
+     fe6:	56                   	push   %esi
+     fe7:	e8 57 fe ff ff       	call   e43 <write>
+     fec:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
-     fcf:	83 c4 10             	add    $0x10,%esp
+     fef:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-     fd2:	0f b6 13             	movzbl (%ebx),%edx
-     fd5:	83 c3 01             	add    $0x1,%ebx
-     fd8:	84 d2                	test   %dl,%dl
-     fda:	74 24                	je     1000 <printf+0x80>
+     ff2:	0f b6 13             	movzbl (%ebx),%edx
+     ff5:	83 c3 01             	add    $0x1,%ebx
+     ff8:	84 d2                	test   %dl,%dl
+     ffa:	74 24                	je     1020 <printf+0x80>
     c = fmt[i] & 0xff;
-     fdc:	0f b6 c2             	movzbl %dl,%eax
+     ffc:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
-     fdf:	85 c9                	test   %ecx,%ecx
-     fe1:	74 cd                	je     fb0 <printf+0x30>
+     fff:	85 c9                	test   %ecx,%ecx
+    1001:	74 cd                	je     fd0 <printf+0x30>
       }
     } else if(state == '%'){
-     fe3:	83 f9 25             	cmp    $0x25,%ecx
-     fe6:	75 ea                	jne    fd2 <printf+0x52>
+    1003:	83 f9 25             	cmp    $0x25,%ecx
+    1006:	75 ea                	jne    ff2 <printf+0x52>
       if(c == 'd'){
-     fe8:	83 f8 25             	cmp    $0x25,%eax
-     feb:	0f 84 07 01 00 00    	je     10f8 <printf+0x178>
-     ff1:	83 e8 63             	sub    $0x63,%eax
-     ff4:	83 f8 15             	cmp    $0x15,%eax
-     ff7:	77 17                	ja     1010 <printf+0x90>
-     ff9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)
+    1008:	83 f8 25             	cmp    $0x25,%eax
+    100b:	0f 84 07 01 00 00    	je     1118 <printf+0x178>
+    1011:	83 e8 63             	sub    $0x63,%eax
+    1014:	83 f8 15             	cmp    $0x15,%eax
+    1017:	77 17                	ja     1030 <printf+0x90>
+    1019:	ff 24 85 b8 13 00 00 	jmp    *0x13b8(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
-    1000:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1003:	5b                   	pop    %ebx
-    1004:	5e                   	pop    %esi
-    1005:	5f                   	pop    %edi
-    1006:	5d                   	pop    %ebp
-    1007:	c3                   	ret    
-    1008:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    100f:	90                   	nop
+    1020:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1023:	5b                   	pop    %ebx
+    1024:	5e                   	pop    %esi
+    1025:	5f                   	pop    %edi
+    1026:	5d                   	pop    %ebp
+    1027:	c3                   	ret    
+    1028:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    102f:	90                   	nop
   write(fd, &c, 1);
-    1010:	83 ec 04             	sub    $0x4,%esp
-    1013:	88 55 d4             	mov    %dl,-0x2c(%ebp)
-    1016:	6a 01                	push   $0x1
-    1018:	57                   	push   %edi
-    1019:	56                   	push   %esi
-    101a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    101e:	e8 20 fe ff ff       	call   e43 <write>
+    1030:	83 ec 04             	sub    $0x4,%esp
+    1033:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+    1036:	6a 01                	push   $0x1
+    1038:	57                   	push   %edi
+    1039:	56                   	push   %esi
+    103a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    103e:	e8 00 fe ff ff       	call   e43 <write>
         putc(fd, c);
-    1023:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+    1043:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
-    1027:	83 c4 0c             	add    $0xc,%esp
-    102a:	88 55 e7             	mov    %dl,-0x19(%ebp)
-    102d:	6a 01                	push   $0x1
-    102f:	57                   	push   %edi
-    1030:	56                   	push   %esi
-    1031:	e8 0d fe ff ff       	call   e43 <write>
+    1047:	83 c4 0c             	add    $0xc,%esp
+    104a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    104d:	6a 01                	push   $0x1
+    104f:	57                   	push   %edi
+    1050:	56                   	push   %esi
+    1051:	e8 ed fd ff ff       	call   e43 <write>
         putc(fd, c);
-    1036:	83 c4 10             	add    $0x10,%esp
+    1056:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    1039:	31 c9                	xor    %ecx,%ecx
-    103b:	eb 95                	jmp    fd2 <printf+0x52>
-    103d:	8d 76 00             	lea    0x0(%esi),%esi
+    1059:	31 c9                	xor    %ecx,%ecx
+    105b:	eb 95                	jmp    ff2 <printf+0x52>
+    105d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
-    1040:	83 ec 0c             	sub    $0xc,%esp
-    1043:	b9 10 00 00 00       	mov    $0x10,%ecx
-    1048:	6a 00                	push   $0x0
-    104a:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    104d:	8b 10                	mov    (%eax),%edx
-    104f:	89 f0                	mov    %esi,%eax
-    1051:	e8 7a fe ff ff       	call   ed0 <printint>
+    1060:	83 ec 0c             	sub    $0xc,%esp
+    1063:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1068:	6a 00                	push   $0x0
+    106a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    106d:	8b 10                	mov    (%eax),%edx
+    106f:	89 f0                	mov    %esi,%eax
+    1071:	e8 7a fe ff ff       	call   ef0 <printint>
         ap++;
-    1056:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
-    105a:	83 c4 10             	add    $0x10,%esp
+    1076:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    107a:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    105d:	31 c9                	xor    %ecx,%ecx
-    105f:	e9 6e ff ff ff       	jmp    fd2 <printf+0x52>
-    1064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    107d:	31 c9                	xor    %ecx,%ecx
+    107f:	e9 6e ff ff ff       	jmp    ff2 <printf+0x52>
+    1084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
-    1068:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    106b:	8b 10                	mov    (%eax),%edx
+    1088:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    108b:	8b 10                	mov    (%eax),%edx
         ap++;
-    106d:	83 c0 04             	add    $0x4,%eax
-    1070:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    108d:	83 c0 04             	add    $0x4,%eax
+    1090:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    1073:	85 d2                	test   %edx,%edx
-    1075:	0f 84 8d 00 00 00    	je     1108 <printf+0x188>
+    1093:	85 d2                	test   %edx,%edx
+    1095:	0f 84 8d 00 00 00    	je     1128 <printf+0x188>
         while(*s != 0){
-    107b:	0f b6 02             	movzbl (%edx),%eax
+    109b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
-    107e:	31 c9                	xor    %ecx,%ecx
+    109e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
-    1080:	84 c0                	test   %al,%al
-    1082:	0f 84 4a ff ff ff    	je     fd2 <printf+0x52>
-    1088:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
-    108b:	89 d3                	mov    %edx,%ebx
-    108d:	8d 76 00             	lea    0x0(%esi),%esi
+    10a0:	84 c0                	test   %al,%al
+    10a2:	0f 84 4a ff ff ff    	je     ff2 <printf+0x52>
+    10a8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    10ab:	89 d3                	mov    %edx,%ebx
+    10ad:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
-    1090:	83 ec 04             	sub    $0x4,%esp
+    10b0:	83 ec 04             	sub    $0x4,%esp
           s++;
-    1093:	83 c3 01             	add    $0x1,%ebx
-    1096:	88 45 e7             	mov    %al,-0x19(%ebp)
+    10b3:	83 c3 01             	add    $0x1,%ebx
+    10b6:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1099:	6a 01                	push   $0x1
-    109b:	57                   	push   %edi
-    109c:	56                   	push   %esi
-    109d:	e8 a1 fd ff ff       	call   e43 <write>
+    10b9:	6a 01                	push   $0x1
+    10bb:	57                   	push   %edi
+    10bc:	56                   	push   %esi
+    10bd:	e8 81 fd ff ff       	call   e43 <write>
         while(*s != 0){
-    10a2:	0f b6 03             	movzbl (%ebx),%eax
-    10a5:	83 c4 10             	add    $0x10,%esp
-    10a8:	84 c0                	test   %al,%al
-    10aa:	75 e4                	jne    1090 <printf+0x110>
+    10c2:	0f b6 03             	movzbl (%ebx),%eax
+    10c5:	83 c4 10             	add    $0x10,%esp
+    10c8:	84 c0                	test   %al,%al
+    10ca:	75 e4                	jne    10b0 <printf+0x110>
       state = 0;
-    10ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
-    10af:	31 c9                	xor    %ecx,%ecx
-    10b1:	e9 1c ff ff ff       	jmp    fd2 <printf+0x52>
-    10b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    10bd:	8d 76 00             	lea    0x0(%esi),%esi
+    10cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+    10cf:	31 c9                	xor    %ecx,%ecx
+    10d1:	e9 1c ff ff ff       	jmp    ff2 <printf+0x52>
+    10d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10dd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
-    10c0:	83 ec 0c             	sub    $0xc,%esp
-    10c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    10c8:	6a 01                	push   $0x1
-    10ca:	e9 7b ff ff ff       	jmp    104a <printf+0xca>
-    10cf:	90                   	nop
+    10e0:	83 ec 0c             	sub    $0xc,%esp
+    10e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    10e8:	6a 01                	push   $0x1
+    10ea:	e9 7b ff ff ff       	jmp    106a <printf+0xca>
+    10ef:	90                   	nop
         putc(fd, *ap);
-    10d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    10f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
-    10d3:	83 ec 04             	sub    $0x4,%esp
+    10f3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    10d6:	8b 00                	mov    (%eax),%eax
+    10f6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
-    10d8:	6a 01                	push   $0x1
-    10da:	57                   	push   %edi
-    10db:	56                   	push   %esi
+    10f8:	6a 01                	push   $0x1
+    10fa:	57                   	push   %edi
+    10fb:	56                   	push   %esi
         putc(fd, *ap);
-    10dc:	88 45 e7             	mov    %al,-0x19(%ebp)
+    10fc:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    10df:	e8 5f fd ff ff       	call   e43 <write>
+    10ff:	e8 3f fd ff ff       	call   e43 <write>
         ap++;
-    10e4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
-    10e8:	83 c4 10             	add    $0x10,%esp
+    1104:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    1108:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    10eb:	31 c9                	xor    %ecx,%ecx
-    10ed:	e9 e0 fe ff ff       	jmp    fd2 <printf+0x52>
-    10f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    110b:	31 c9                	xor    %ecx,%ecx
+    110d:	e9 e0 fe ff ff       	jmp    ff2 <printf+0x52>
+    1112:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
-    10f8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    1118:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
-    10fb:	83 ec 04             	sub    $0x4,%esp
-    10fe:	e9 2a ff ff ff       	jmp    102d <printf+0xad>
-    1103:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    1107:	90                   	nop
+    111b:	83 ec 04             	sub    $0x4,%esp
+    111e:	e9 2a ff ff ff       	jmp    104d <printf+0xad>
+    1123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1127:	90                   	nop
           s = "(null)";
-    1108:	ba 90 13 00 00       	mov    $0x1390,%edx
+    1128:	ba b0 13 00 00       	mov    $0x13b0,%edx
         while(*s != 0){
-    110d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
-    1110:	b8 28 00 00 00       	mov    $0x28,%eax
-    1115:	89 d3                	mov    %edx,%ebx
-    1117:	e9 74 ff ff ff       	jmp    1090 <printf+0x110>
-    111c:	66 90                	xchg   %ax,%ax
-    111e:	66 90                	xchg   %ax,%ax
+    112d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    1130:	b8 28 00 00 00       	mov    $0x28,%eax
+    1135:	89 d3                	mov    %edx,%ebx
+    1137:	e9 74 ff ff ff       	jmp    10b0 <printf+0x110>
+    113c:	66 90                	xchg   %ax,%ax
+    113e:	66 90                	xchg   %ax,%ax
 
-00001120 <free>:
+00001140 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    1120:	55                   	push   %ebp
+    1140:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1121:	a1 44 1a 00 00       	mov    0x1a44,%eax
+    1141:	a1 64 1a 00 00       	mov    0x1a64,%eax
 {
-    1126:	89 e5                	mov    %esp,%ebp
-    1128:	57                   	push   %edi
-    1129:	56                   	push   %esi
-    112a:	53                   	push   %ebx
-    112b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1146:	89 e5                	mov    %esp,%ebp
+    1148:	57                   	push   %edi
+    1149:	56                   	push   %esi
+    114a:	53                   	push   %ebx
+    114b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
-    112e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    114e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    1131:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    1138:	89 c2                	mov    %eax,%edx
-    113a:	8b 00                	mov    (%eax),%eax
-    113c:	39 ca                	cmp    %ecx,%edx
-    113e:	73 30                	jae    1170 <free+0x50>
-    1140:	39 c1                	cmp    %eax,%ecx
-    1142:	72 04                	jb     1148 <free+0x28>
+    1151:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1158:	89 c2                	mov    %eax,%edx
+    115a:	8b 00                	mov    (%eax),%eax
+    115c:	39 ca                	cmp    %ecx,%edx
+    115e:	73 30                	jae    1190 <free+0x50>
+    1160:	39 c1                	cmp    %eax,%ecx
+    1162:	72 04                	jb     1168 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1144:	39 c2                	cmp    %eax,%edx
-    1146:	72 f0                	jb     1138 <free+0x18>
+    1164:	39 c2                	cmp    %eax,%edx
+    1166:	72 f0                	jb     1158 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    1148:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    114b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    114e:	39 f8                	cmp    %edi,%eax
-    1150:	74 30                	je     1182 <free+0x62>
+    1168:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    116b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    116e:	39 f8                	cmp    %edi,%eax
+    1170:	74 30                	je     11a2 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
-    1152:	89 43 f8             	mov    %eax,-0x8(%ebx)
+    1172:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
-    1155:	8b 42 04             	mov    0x4(%edx),%eax
-    1158:	8d 34 c2             	lea    (%edx,%eax,8),%esi
-    115b:	39 f1                	cmp    %esi,%ecx
-    115d:	74 3a                	je     1199 <free+0x79>
+    1175:	8b 42 04             	mov    0x4(%edx),%eax
+    1178:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    117b:	39 f1                	cmp    %esi,%ecx
+    117d:	74 3a                	je     11b9 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
-    115f:	89 0a                	mov    %ecx,(%edx)
+    117f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
-    1161:	5b                   	pop    %ebx
+    1181:	5b                   	pop    %ebx
   freep = p;
-    1162:	89 15 44 1a 00 00    	mov    %edx,0x1a44
+    1182:	89 15 64 1a 00 00    	mov    %edx,0x1a64
 }
-    1168:	5e                   	pop    %esi
-    1169:	5f                   	pop    %edi
-    116a:	5d                   	pop    %ebp
-    116b:	c3                   	ret    
-    116c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1188:	5e                   	pop    %esi
+    1189:	5f                   	pop    %edi
+    118a:	5d                   	pop    %ebp
+    118b:	c3                   	ret    
+    118c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1170:	39 c2                	cmp    %eax,%edx
-    1172:	72 c4                	jb     1138 <free+0x18>
-    1174:	39 c1                	cmp    %eax,%ecx
-    1176:	73 c0                	jae    1138 <free+0x18>
+    1190:	39 c2                	cmp    %eax,%edx
+    1192:	72 c4                	jb     1158 <free+0x18>
+    1194:	39 c1                	cmp    %eax,%ecx
+    1196:	73 c0                	jae    1158 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
-    1178:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    117b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    117e:	39 f8                	cmp    %edi,%eax
-    1180:	75 d0                	jne    1152 <free+0x32>
+    1198:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    119b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    119e:	39 f8                	cmp    %edi,%eax
+    11a0:	75 d0                	jne    1172 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
-    1182:	03 70 04             	add    0x4(%eax),%esi
-    1185:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    11a2:	03 70 04             	add    0x4(%eax),%esi
+    11a5:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    1188:	8b 02                	mov    (%edx),%eax
-    118a:	8b 00                	mov    (%eax),%eax
-    118c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+    11a8:	8b 02                	mov    (%edx),%eax
+    11aa:	8b 00                	mov    (%eax),%eax
+    11ac:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
-    118f:	8b 42 04             	mov    0x4(%edx),%eax
-    1192:	8d 34 c2             	lea    (%edx,%eax,8),%esi
-    1195:	39 f1                	cmp    %esi,%ecx
-    1197:	75 c6                	jne    115f <free+0x3f>
+    11af:	8b 42 04             	mov    0x4(%edx),%eax
+    11b2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    11b5:	39 f1                	cmp    %esi,%ecx
+    11b7:	75 c6                	jne    117f <free+0x3f>
     p->s.size += bp->s.size;
-    1199:	03 43 fc             	add    -0x4(%ebx),%eax
+    11b9:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
-    119c:	89 15 44 1a 00 00    	mov    %edx,0x1a44
+    11bc:	89 15 64 1a 00 00    	mov    %edx,0x1a64
     p->s.size += bp->s.size;
-    11a2:	89 42 04             	mov    %eax,0x4(%edx)
+    11c2:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
-    11a5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
-    11a8:	89 0a                	mov    %ecx,(%edx)
+    11c5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+    11c8:	89 0a                	mov    %ecx,(%edx)
 }
-    11aa:	5b                   	pop    %ebx
-    11ab:	5e                   	pop    %esi
-    11ac:	5f                   	pop    %edi
-    11ad:	5d                   	pop    %ebp
-    11ae:	c3                   	ret    
-    11af:	90                   	nop
+    11ca:	5b                   	pop    %ebx
+    11cb:	5e                   	pop    %esi
+    11cc:	5f                   	pop    %edi
+    11cd:	5d                   	pop    %ebp
+    11ce:	c3                   	ret    
+    11cf:	90                   	nop
 
-000011b0 <malloc>:
+000011d0 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    11b0:	55                   	push   %ebp
-    11b1:	89 e5                	mov    %esp,%ebp
-    11b3:	57                   	push   %edi
-    11b4:	56                   	push   %esi
-    11b5:	53                   	push   %ebx
-    11b6:	83 ec 1c             	sub    $0x1c,%esp
+    11d0:	55                   	push   %ebp
+    11d1:	89 e5                	mov    %esp,%ebp
+    11d3:	57                   	push   %edi
+    11d4:	56                   	push   %esi
+    11d5:	53                   	push   %ebx
+    11d6:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11b9:	8b 45 08             	mov    0x8(%ebp),%eax
+    11d9:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    11bc:	8b 3d 44 1a 00 00    	mov    0x1a44,%edi
+    11dc:	8b 3d 64 1a 00 00    	mov    0x1a64,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    11c2:	8d 70 07             	lea    0x7(%eax),%esi
-    11c5:	c1 ee 03             	shr    $0x3,%esi
-    11c8:	83 c6 01             	add    $0x1,%esi
+    11e2:	8d 70 07             	lea    0x7(%eax),%esi
+    11e5:	c1 ee 03             	shr    $0x3,%esi
+    11e8:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    11cb:	85 ff                	test   %edi,%edi
-    11cd:	0f 84 9d 00 00 00    	je     1270 <malloc+0xc0>
+    11eb:	85 ff                	test   %edi,%edi
+    11ed:	0f 84 9d 00 00 00    	je     1290 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11d3:	8b 17                	mov    (%edi),%edx
+    11f3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
-    11d5:	8b 4a 04             	mov    0x4(%edx),%ecx
-    11d8:	39 f1                	cmp    %esi,%ecx
-    11da:	73 6a                	jae    1246 <malloc+0x96>
-    11dc:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    11e1:	39 de                	cmp    %ebx,%esi
-    11e3:	0f 43 de             	cmovae %esi,%ebx
+    11f5:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11f8:	39 f1                	cmp    %esi,%ecx
+    11fa:	73 6a                	jae    1266 <malloc+0x96>
+    11fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    1201:	39 de                	cmp    %ebx,%esi
+    1203:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    11e6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
-    11ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    11f0:	eb 17                	jmp    1209 <malloc+0x59>
-    11f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1206:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    120d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    1210:	eb 17                	jmp    1229 <malloc+0x59>
+    1212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11f8:	8b 02                	mov    (%edx),%eax
+    1218:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
-    11fa:	8b 48 04             	mov    0x4(%eax),%ecx
-    11fd:	39 f1                	cmp    %esi,%ecx
-    11ff:	73 4f                	jae    1250 <malloc+0xa0>
+    121a:	8b 48 04             	mov    0x4(%eax),%ecx
+    121d:	39 f1                	cmp    %esi,%ecx
+    121f:	73 4f                	jae    1270 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    1201:	8b 3d 44 1a 00 00    	mov    0x1a44,%edi
-    1207:	89 c2                	mov    %eax,%edx
-    1209:	39 d7                	cmp    %edx,%edi
-    120b:	75 eb                	jne    11f8 <malloc+0x48>
+    1221:	8b 3d 64 1a 00 00    	mov    0x1a64,%edi
+    1227:	89 c2                	mov    %eax,%edx
+    1229:	39 d7                	cmp    %edx,%edi
+    122b:	75 eb                	jne    1218 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
-    120d:	83 ec 0c             	sub    $0xc,%esp
-    1210:	ff 75 e4             	push   -0x1c(%ebp)
-    1213:	e8 93 fc ff ff       	call   eab <sbrk>
+    122d:	83 ec 0c             	sub    $0xc,%esp
+    1230:	ff 75 e4             	push   -0x1c(%ebp)
+    1233:	e8 73 fc ff ff       	call   eab <sbrk>
   if(p == (char*)-1)
-    1218:	83 c4 10             	add    $0x10,%esp
-    121b:	83 f8 ff             	cmp    $0xffffffff,%eax
-    121e:	74 1c                	je     123c <malloc+0x8c>
+    1238:	83 c4 10             	add    $0x10,%esp
+    123b:	83 f8 ff             	cmp    $0xffffffff,%eax
+    123e:	74 1c                	je     125c <malloc+0x8c>
   hp->s.size = nu;
-    1220:	89 58 04             	mov    %ebx,0x4(%eax)
+    1240:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    1223:	83 ec 0c             	sub    $0xc,%esp
-    1226:	83 c0 08             	add    $0x8,%eax
-    1229:	50                   	push   %eax
-    122a:	e8 f1 fe ff ff       	call   1120 <free>
+    1243:	83 ec 0c             	sub    $0xc,%esp
+    1246:	83 c0 08             	add    $0x8,%eax
+    1249:	50                   	push   %eax
+    124a:	e8 f1 fe ff ff       	call   1140 <free>
   return freep;
-    122f:	8b 15 44 1a 00 00    	mov    0x1a44,%edx
+    124f:	8b 15 64 1a 00 00    	mov    0x1a64,%edx
       if((p = morecore(nunits)) == 0)
-    1235:	83 c4 10             	add    $0x10,%esp
-    1238:	85 d2                	test   %edx,%edx
-    123a:	75 bc                	jne    11f8 <malloc+0x48>
+    1255:	83 c4 10             	add    $0x10,%esp
+    1258:	85 d2                	test   %edx,%edx
+    125a:	75 bc                	jne    1218 <malloc+0x48>
         return 0;
   }
 }
-    123c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    125c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    123f:	31 c0                	xor    %eax,%eax
+    125f:	31 c0                	xor    %eax,%eax
 }
-    1241:	5b                   	pop    %ebx
-    1242:	5e                   	pop    %esi
-    1243:	5f                   	pop    %edi
-    1244:	5d                   	pop    %ebp
-    1245:	c3                   	ret    
+    1261:	5b                   	pop    %ebx
+    1262:	5e                   	pop    %esi
+    1263:	5f                   	pop    %edi
+    1264:	5d                   	pop    %ebp
+    1265:	c3                   	ret    
     if(p->s.size >= nunits){
-    1246:	89 d0                	mov    %edx,%eax
-    1248:	89 fa                	mov    %edi,%edx
-    124a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1266:	89 d0                	mov    %edx,%eax
+    1268:	89 fa                	mov    %edi,%edx
+    126a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
-    1250:	39 ce                	cmp    %ecx,%esi
-    1252:	74 4c                	je     12a0 <malloc+0xf0>
+    1270:	39 ce                	cmp    %ecx,%esi
+    1272:	74 4c                	je     12c0 <malloc+0xf0>
         p->s.size -= nunits;
-    1254:	29 f1                	sub    %esi,%ecx
-    1256:	89 48 04             	mov    %ecx,0x4(%eax)
+    1274:	29 f1                	sub    %esi,%ecx
+    1276:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
-    1259:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+    1279:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
-    125c:	89 70 04             	mov    %esi,0x4(%eax)
+    127c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
-    125f:	89 15 44 1a 00 00    	mov    %edx,0x1a44
+    127f:	89 15 64 1a 00 00    	mov    %edx,0x1a64
 }
-    1265:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1285:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    1268:	83 c0 08             	add    $0x8,%eax
+    1288:	83 c0 08             	add    $0x8,%eax
 }
-    126b:	5b                   	pop    %ebx
-    126c:	5e                   	pop    %esi
-    126d:	5f                   	pop    %edi
-    126e:	5d                   	pop    %ebp
-    126f:	c3                   	ret    
+    128b:	5b                   	pop    %ebx
+    128c:	5e                   	pop    %esi
+    128d:	5f                   	pop    %edi
+    128e:	5d                   	pop    %ebp
+    128f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
-    1270:	c7 05 44 1a 00 00 48 	movl   $0x1a48,0x1a44
-    1277:	1a 00 00 
+    1290:	c7 05 64 1a 00 00 68 	movl   $0x1a68,0x1a64
+    1297:	1a 00 00 
     base.s.size = 0;
-    127a:	bf 48 1a 00 00       	mov    $0x1a48,%edi
+    129a:	bf 68 1a 00 00       	mov    $0x1a68,%edi
     base.s.ptr = freep = prevp = &base;
-    127f:	c7 05 48 1a 00 00 48 	movl   $0x1a48,0x1a48
-    1286:	1a 00 00 
+    129f:	c7 05 68 1a 00 00 68 	movl   $0x1a68,0x1a68
+    12a6:	1a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1289:	89 fa                	mov    %edi,%edx
+    12a9:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
-    128b:	c7 05 4c 1a 00 00 00 	movl   $0x0,0x1a4c
-    1292:	00 00 00 
+    12ab:	c7 05 6c 1a 00 00 00 	movl   $0x0,0x1a6c
+    12b2:	00 00 00 
     if(p->s.size >= nunits){
-    1295:	e9 42 ff ff ff       	jmp    11dc <malloc+0x2c>
-    129a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    12b5:	e9 42 ff ff ff       	jmp    11fc <malloc+0x2c>
+    12ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    12a0:	8b 08                	mov    (%eax),%ecx
-    12a2:	89 0a                	mov    %ecx,(%edx)
-    12a4:	eb b9                	jmp    125f <malloc+0xaf>
+    12c0:	8b 08                	mov    (%eax),%ecx
+    12c2:	89 0a                	mov    %ecx,(%edx)
+    12c4:	eb b9                	jmp    127f <malloc+0xaf>
Binary files xv6-public-org/sh.o and xv6-public/sh.o differ
diff -u xv6-public-org/sh.sym xv6-public/sh.sym
--- xv6-public-org/sh.sym	2022-09-04 11:47:11.738145209 +0530
+++ xv6-public/sh.sym	2022-09-05 23:16:37.421930470 +0530
@@ -1,14 +1,15 @@
 00000000 sh.c
-000019e0 buf.0
+00001a00 buf.0
 00000000 ulib.c
 00000000 printf.c
-00000ed0 printint
-000013f0 digits.0
+00000ef0 printint
+00001410 digits.0
 00000000 umalloc.c
-00001a44 freep
-00001a48 base
+00001a64 freep
+00001a68 base
 00000bd0 strcpy
-00000f80 printf
+00000fa0 printf
+00000ed3 thread_exit
 00000df0 memmove
 00000e6b mknod
 00000340 execcmd
@@ -20,9 +21,9 @@
 000005d0 peek
 00000650 parseredirs
 00000470 gettoken
-000011b0 malloc
+000011d0 malloc
 00000eb3 sleep
-000019cc whitespace
+000019ec whitespace
 00000190 fork1
 00000ab0 nulterminate
 00000e33 pipe
@@ -36,7 +37,7 @@
 00000a20 parseblock
 00000e5b exec
 00000e2b wait
-000019c4 symbols
+000019e4 symbols
 00000e3b read
 00000790 parseexec
 00000e73 unlink
@@ -44,7 +45,7 @@
 00000e1b fork
 00000eab sbrk
 00000ebb uptime
-000019d2 __bss_start
+000019f2 __bss_start
 00000c90 memset
 00000000 main
 00000c00 strcmp
@@ -52,15 +53,18 @@
 000003c0 pipecmd
 00000370 redircmd
 00000d60 stat
-000019d2 _edata
-00001a50 _end
+000019f2 _edata
+00001a70 _end
 00000e83 link
 00000e23 exit
 00000db0 atoi
+00000edb draw
 00000c60 strlen
 00000e63 open
 00000cb0 strchr
+00000ec3 thread_create
 00000e8b mkdir
 00000e4b close
+00000ecb thread_join
 00000400 listcmd
-00001120 free
+00001140 free
Binary files xv6-public-org/sleeplock.o and xv6-public/sleeplock.o differ
Binary files xv6-public-org/spinlock.o and xv6-public/spinlock.o differ
Binary files xv6-public-org/_stressfs and xv6-public/_stressfs differ
diff -u xv6-public-org/stressfs.asm xv6-public/stressfs.asm
--- xv6-public-org/stressfs.asm	2022-09-04 11:47:11.814183209 +0530
+++ xv6-public/stressfs.asm	2022-09-05 23:16:37.485930609 +0530
@@ -38,7 +38,7 @@
   char path[] = "stressfs0";
   24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
   printf(1, "stressfs starting\n");
-  2b:	68 18 08 00 00       	push   $0x818
+  2b:	68 38 08 00 00       	push   $0x838
   30:	6a 01                	push   $0x1
   char path[] = "stressfs0";
   32:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
@@ -46,7 +46,7 @@
   3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
   43:	73 66 73 
   printf(1, "stressfs starting\n");
-  46:	e8 a5 04 00 00       	call   4f0 <printf>
+  46:	e8 c5 04 00 00       	call   510 <printf>
   memset(data, 'a', sizeof(data));
   4b:	83 c4 0c             	add    $0xc,%esp
   4e:	68 00 02 00 00       	push   $0x200
@@ -73,9 +73,9 @@
   fd = open(path, O_CREATE | O_RDWR);
   7c:	bb 14 00 00 00       	mov    $0x14,%ebx
   printf(1, "write %d\n", i);
-  81:	68 2b 08 00 00       	push   $0x82b
+  81:	68 4b 08 00 00       	push   $0x84b
   86:	6a 01                	push   $0x1
-  88:	e8 63 04 00 00       	call   4f0 <printf>
+  88:	e8 83 04 00 00       	call   510 <printf>
   path[8] += i;
   8d:	89 f8                	mov    %edi,%eax
   fd = open(path, O_CREATE | O_RDWR);
@@ -111,9 +111,9 @@
   printf(1, "read\n");
   d0:	58                   	pop    %eax
   d1:	5a                   	pop    %edx
-  d2:	68 35 08 00 00       	push   $0x835
+  d2:	68 55 08 00 00       	push   $0x855
   d7:	6a 01                	push   $0x1
-  d9:	e8 12 04 00 00       	call   4f0 <printf>
+  d9:	e8 32 04 00 00       	call   510 <printf>
 
   fd = open(path, O_RDONLY);
   de:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
@@ -684,569 +684,592 @@
  42b:	b8 0e 00 00 00       	mov    $0xe,%eax
  430:	cd 40                	int    $0x40
  432:	c3                   	ret    
- 433:	66 90                	xchg   %ax,%ax
- 435:	66 90                	xchg   %ax,%ax
- 437:	66 90                	xchg   %ax,%ax
- 439:	66 90                	xchg   %ax,%ax
- 43b:	66 90                	xchg   %ax,%ax
- 43d:	66 90                	xchg   %ax,%ax
- 43f:	90                   	nop
 
-00000440 <printint>:
+00000433 <thread_create>:
+SYSCALL(thread_create)
+ 433:	b8 16 00 00 00       	mov    $0x16,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <thread_join>:
+SYSCALL(thread_join)
+ 43b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <thread_exit>:
+SYSCALL(thread_exit)
+ 443:	b8 17 00 00 00       	mov    $0x17,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <draw>:
+ 44b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+ 453:	66 90                	xchg   %ax,%ax
+ 455:	66 90                	xchg   %ax,%ax
+ 457:	66 90                	xchg   %ax,%ax
+ 459:	66 90                	xchg   %ax,%ax
+ 45b:	66 90                	xchg   %ax,%ax
+ 45d:	66 90                	xchg   %ax,%ax
+ 45f:	90                   	nop
+
+00000460 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 440:	55                   	push   %ebp
- 441:	89 e5                	mov    %esp,%ebp
- 443:	57                   	push   %edi
- 444:	56                   	push   %esi
- 445:	53                   	push   %ebx
- 446:	83 ec 3c             	sub    $0x3c,%esp
- 449:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+ 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 44c:	89 d1                	mov    %edx,%ecx
+ 46c:	89 d1                	mov    %edx,%ecx
 {
- 44e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 451:	85 d2                	test   %edx,%edx
- 453:	0f 89 7f 00 00 00    	jns    4d8 <printint+0x98>
- 459:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 45d:	74 79                	je     4d8 <printint+0x98>
+ 471:	85 d2                	test   %edx,%edx
+ 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
+ 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 47d:	74 79                	je     4f8 <printint+0x98>
     neg = 1;
- 45f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 466:	f7 d9                	neg    %ecx
+ 486:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 468:	31 db                	xor    %ebx,%ebx
- 46a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 46d:	8d 76 00             	lea    0x0(%esi),%esi
+ 488:	31 db                	xor    %ebx,%ebx
+ 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 470:	89 c8                	mov    %ecx,%eax
- 472:	31 d2                	xor    %edx,%edx
- 474:	89 cf                	mov    %ecx,%edi
- 476:	f7 75 c4             	divl   -0x3c(%ebp)
- 479:	0f b6 92 9c 08 00 00 	movzbl 0x89c(%edx),%edx
- 480:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 483:	89 d8                	mov    %ebx,%eax
- 485:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 490:	89 c8                	mov    %ecx,%eax
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	89 cf                	mov    %ecx,%edi
+ 496:	f7 75 c4             	divl   -0x3c(%ebp)
+ 499:	0f b6 92 bc 08 00 00 	movzbl 0x8bc(%edx),%edx
+ 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4a3:	89 d8                	mov    %ebx,%eax
+ 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 488:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 48b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 48e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 491:	76 dd                	jbe    470 <printint+0x30>
+ 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4b1:	76 dd                	jbe    490 <printint+0x30>
   if(neg)
- 493:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 496:	85 c9                	test   %ecx,%ecx
- 498:	74 0c                	je     4a6 <printint+0x66>
+ 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4b6:	85 c9                	test   %ecx,%ecx
+ 4b8:	74 0c                	je     4c6 <printint+0x66>
     buf[i++] = '-';
- 49a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 49f:	89 d8                	mov    %ebx,%eax
+ 4bf:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 4a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 4a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4ad:	eb 07                	jmp    4b6 <printint+0x76>
- 4af:	90                   	nop
+ 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4cd:	eb 07                	jmp    4d6 <printint+0x76>
+ 4cf:	90                   	nop
     putc(fd, buf[i]);
- 4b0:	0f b6 13             	movzbl (%ebx),%edx
- 4b3:	83 eb 01             	sub    $0x1,%ebx
+ 4d0:	0f b6 13             	movzbl (%ebx),%edx
+ 4d3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 4b6:	83 ec 04             	sub    $0x4,%esp
- 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4bc:	6a 01                	push   $0x1
- 4be:	56                   	push   %esi
- 4bf:	57                   	push   %edi
- 4c0:	e8 ee fe ff ff       	call   3b3 <write>
+ 4d6:	83 ec 04             	sub    $0x4,%esp
+ 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4dc:	6a 01                	push   $0x1
+ 4de:	56                   	push   %esi
+ 4df:	57                   	push   %edi
+ 4e0:	e8 ce fe ff ff       	call   3b3 <write>
   while(--i >= 0)
- 4c5:	83 c4 10             	add    $0x10,%esp
- 4c8:	39 de                	cmp    %ebx,%esi
- 4ca:	75 e4                	jne    4b0 <printint+0x70>
-}
- 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4cf:	5b                   	pop    %ebx
- 4d0:	5e                   	pop    %esi
- 4d1:	5f                   	pop    %edi
- 4d2:	5d                   	pop    %ebp
- 4d3:	c3                   	ret    
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x70>
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 4d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4df:	eb 87                	jmp    468 <printint+0x28>
- 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ef:	90                   	nop
+ 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ff:	eb 87                	jmp    488 <printint+0x28>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
 
-000004f0 <printf>:
+00000510 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 4f0:	55                   	push   %ebp
- 4f1:	89 e5                	mov    %esp,%ebp
- 4f3:	57                   	push   %edi
- 4f4:	56                   	push   %esi
- 4f5:	53                   	push   %ebx
- 4f6:	83 ec 2c             	sub    $0x2c,%esp
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 4f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 519:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 4fc:	8b 75 08             	mov    0x8(%ebp),%esi
+ 51c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 4ff:	0f b6 13             	movzbl (%ebx),%edx
- 502:	84 d2                	test   %dl,%dl
- 504:	74 6a                	je     570 <printf+0x80>
+ 51f:	0f b6 13             	movzbl (%ebx),%edx
+ 522:	84 d2                	test   %dl,%dl
+ 524:	74 6a                	je     590 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 506:	8d 45 10             	lea    0x10(%ebp),%eax
- 509:	83 c3 01             	add    $0x1,%ebx
+ 526:	8d 45 10             	lea    0x10(%ebp),%eax
+ 529:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 50c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 52c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 50f:	31 c9                	xor    %ecx,%ecx
+ 52f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 514:	eb 36                	jmp    54c <printf+0x5c>
- 516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51d:	8d 76 00             	lea    0x0(%esi),%esi
- 520:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	eb 36                	jmp    56c <printf+0x5c>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 540:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 523:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 543:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 528:	83 f8 25             	cmp    $0x25,%eax
- 52b:	74 15                	je     542 <printf+0x52>
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	74 15                	je     562 <printf+0x52>
   write(fd, &c, 1);
- 52d:	83 ec 04             	sub    $0x4,%esp
- 530:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 533:	6a 01                	push   $0x1
- 535:	57                   	push   %edi
- 536:	56                   	push   %esi
- 537:	e8 77 fe ff ff       	call   3b3 <write>
- 53c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	56                   	push   %esi
+ 557:	e8 57 fe ff ff       	call   3b3 <write>
+ 55c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 53f:	83 c4 10             	add    $0x10,%esp
+ 55f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 542:	0f b6 13             	movzbl (%ebx),%edx
- 545:	83 c3 01             	add    $0x1,%ebx
- 548:	84 d2                	test   %dl,%dl
- 54a:	74 24                	je     570 <printf+0x80>
+ 562:	0f b6 13             	movzbl (%ebx),%edx
+ 565:	83 c3 01             	add    $0x1,%ebx
+ 568:	84 d2                	test   %dl,%dl
+ 56a:	74 24                	je     590 <printf+0x80>
     c = fmt[i] & 0xff;
- 54c:	0f b6 c2             	movzbl %dl,%eax
+ 56c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 54f:	85 c9                	test   %ecx,%ecx
- 551:	74 cd                	je     520 <printf+0x30>
+ 56f:	85 c9                	test   %ecx,%ecx
+ 571:	74 cd                	je     540 <printf+0x30>
       }
     } else if(state == '%'){
- 553:	83 f9 25             	cmp    $0x25,%ecx
- 556:	75 ea                	jne    542 <printf+0x52>
+ 573:	83 f9 25             	cmp    $0x25,%ecx
+ 576:	75 ea                	jne    562 <printf+0x52>
       if(c == 'd'){
- 558:	83 f8 25             	cmp    $0x25,%eax
- 55b:	0f 84 07 01 00 00    	je     668 <printf+0x178>
- 561:	83 e8 63             	sub    $0x63,%eax
- 564:	83 f8 15             	cmp    $0x15,%eax
- 567:	77 17                	ja     580 <printf+0x90>
- 569:	ff 24 85 44 08 00 00 	jmp    *0x844(,%eax,4)
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	0f 84 07 01 00 00    	je     688 <printf+0x178>
+ 581:	83 e8 63             	sub    $0x63,%eax
+ 584:	83 f8 15             	cmp    $0x15,%eax
+ 587:	77 17                	ja     5a0 <printf+0x90>
+ 589:	ff 24 85 64 08 00 00 	jmp    *0x864(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 570:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 573:	5b                   	pop    %ebx
- 574:	5e                   	pop    %esi
- 575:	5f                   	pop    %edi
- 576:	5d                   	pop    %ebp
- 577:	c3                   	ret    
- 578:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 57f:	90                   	nop
+ 590:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 593:	5b                   	pop    %ebx
+ 594:	5e                   	pop    %esi
+ 595:	5f                   	pop    %edi
+ 596:	5d                   	pop    %ebp
+ 597:	c3                   	ret    
+ 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
   write(fd, &c, 1);
- 580:	83 ec 04             	sub    $0x4,%esp
- 583:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 586:	6a 01                	push   $0x1
- 588:	57                   	push   %edi
- 589:	56                   	push   %esi
- 58a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 58e:	e8 20 fe ff ff       	call   3b3 <write>
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5a6:	6a 01                	push   $0x1
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ae:	e8 00 fe ff ff       	call   3b3 <write>
         putc(fd, c);
- 593:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 5b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 597:	83 c4 0c             	add    $0xc,%esp
- 59a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 59d:	6a 01                	push   $0x1
- 59f:	57                   	push   %edi
- 5a0:	56                   	push   %esi
- 5a1:	e8 0d fe ff ff       	call   3b3 <write>
+ 5b7:	83 c4 0c             	add    $0xc,%esp
+ 5ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5bd:	6a 01                	push   $0x1
+ 5bf:	57                   	push   %edi
+ 5c0:	56                   	push   %esi
+ 5c1:	e8 ed fd ff ff       	call   3b3 <write>
         putc(fd, c);
- 5a6:	83 c4 10             	add    $0x10,%esp
+ 5c6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5a9:	31 c9                	xor    %ecx,%ecx
- 5ab:	eb 95                	jmp    542 <printf+0x52>
- 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 5c9:	31 c9                	xor    %ecx,%ecx
+ 5cb:	eb 95                	jmp    562 <printf+0x52>
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5b0:	83 ec 0c             	sub    $0xc,%esp
- 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5b8:	6a 00                	push   $0x0
- 5ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5bd:	8b 10                	mov    (%eax),%edx
- 5bf:	89 f0                	mov    %esi,%eax
- 5c1:	e8 7a fe ff ff       	call   440 <printint>
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d8:	6a 00                	push   $0x0
+ 5da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5dd:	8b 10                	mov    (%eax),%edx
+ 5df:	89 f0                	mov    %esi,%eax
+ 5e1:	e8 7a fe ff ff       	call   460 <printint>
         ap++;
- 5c6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 5ca:	83 c4 10             	add    $0x10,%esp
+ 5e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ea:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5cd:	31 c9                	xor    %ecx,%ecx
- 5cf:	e9 6e ff ff ff       	jmp    542 <printf+0x52>
- 5d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ed:	31 c9                	xor    %ecx,%ecx
+ 5ef:	e9 6e ff ff ff       	jmp    562 <printf+0x52>
+ 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 5d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5db:	8b 10                	mov    (%eax),%edx
+ 5f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5fb:	8b 10                	mov    (%eax),%edx
         ap++;
- 5dd:	83 c0 04             	add    $0x4,%eax
- 5e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5fd:	83 c0 04             	add    $0x4,%eax
+ 600:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 5e3:	85 d2                	test   %edx,%edx
- 5e5:	0f 84 8d 00 00 00    	je     678 <printf+0x188>
+ 603:	85 d2                	test   %edx,%edx
+ 605:	0f 84 8d 00 00 00    	je     698 <printf+0x188>
         while(*s != 0){
- 5eb:	0f b6 02             	movzbl (%edx),%eax
+ 60b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 5ee:	31 c9                	xor    %ecx,%ecx
+ 60e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 5f0:	84 c0                	test   %al,%al
- 5f2:	0f 84 4a ff ff ff    	je     542 <printf+0x52>
- 5f8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 5fb:	89 d3                	mov    %edx,%ebx
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 610:	84 c0                	test   %al,%al
+ 612:	0f 84 4a ff ff ff    	je     562 <printf+0x52>
+ 618:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 61b:	89 d3                	mov    %edx,%ebx
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 600:	83 ec 04             	sub    $0x4,%esp
+ 620:	83 ec 04             	sub    $0x4,%esp
           s++;
- 603:	83 c3 01             	add    $0x1,%ebx
- 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 623:	83 c3 01             	add    $0x1,%ebx
+ 626:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 609:	6a 01                	push   $0x1
- 60b:	57                   	push   %edi
- 60c:	56                   	push   %esi
- 60d:	e8 a1 fd ff ff       	call   3b3 <write>
+ 629:	6a 01                	push   $0x1
+ 62b:	57                   	push   %edi
+ 62c:	56                   	push   %esi
+ 62d:	e8 81 fd ff ff       	call   3b3 <write>
         while(*s != 0){
- 612:	0f b6 03             	movzbl (%ebx),%eax
- 615:	83 c4 10             	add    $0x10,%esp
- 618:	84 c0                	test   %al,%al
- 61a:	75 e4                	jne    600 <printf+0x110>
+ 632:	0f b6 03             	movzbl (%ebx),%eax
+ 635:	83 c4 10             	add    $0x10,%esp
+ 638:	84 c0                	test   %al,%al
+ 63a:	75 e4                	jne    620 <printf+0x110>
       state = 0;
- 61c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 61f:	31 c9                	xor    %ecx,%ecx
- 621:	e9 1c ff ff ff       	jmp    542 <printf+0x52>
- 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 62d:	8d 76 00             	lea    0x0(%esi),%esi
+ 63c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 63f:	31 c9                	xor    %ecx,%ecx
+ 641:	e9 1c ff ff ff       	jmp    562 <printf+0x52>
+ 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 630:	83 ec 0c             	sub    $0xc,%esp
- 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 638:	6a 01                	push   $0x1
- 63a:	e9 7b ff ff ff       	jmp    5ba <printf+0xca>
- 63f:	90                   	nop
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 658:	6a 01                	push   $0x1
+ 65a:	e9 7b ff ff ff       	jmp    5da <printf+0xca>
+ 65f:	90                   	nop
         putc(fd, *ap);
- 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 643:	83 ec 04             	sub    $0x4,%esp
+ 663:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 646:	8b 00                	mov    (%eax),%eax
+ 666:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 648:	6a 01                	push   $0x1
- 64a:	57                   	push   %edi
- 64b:	56                   	push   %esi
+ 668:	6a 01                	push   $0x1
+ 66a:	57                   	push   %edi
+ 66b:	56                   	push   %esi
         putc(fd, *ap);
- 64c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 66c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 64f:	e8 5f fd ff ff       	call   3b3 <write>
+ 66f:	e8 3f fd ff ff       	call   3b3 <write>
         ap++;
- 654:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 658:	83 c4 10             	add    $0x10,%esp
+ 674:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 678:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 65b:	31 c9                	xor    %ecx,%ecx
- 65d:	e9 e0 fe ff ff       	jmp    542 <printf+0x52>
- 662:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 67b:	31 c9                	xor    %ecx,%ecx
+ 67d:	e9 e0 fe ff ff       	jmp    562 <printf+0x52>
+ 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 668:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 688:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 66b:	83 ec 04             	sub    $0x4,%esp
- 66e:	e9 2a ff ff ff       	jmp    59d <printf+0xad>
- 673:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 677:	90                   	nop
+ 68b:	83 ec 04             	sub    $0x4,%esp
+ 68e:	e9 2a ff ff ff       	jmp    5bd <printf+0xad>
+ 693:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 697:	90                   	nop
           s = "(null)";
- 678:	ba 3b 08 00 00       	mov    $0x83b,%edx
+ 698:	ba 5b 08 00 00       	mov    $0x85b,%edx
         while(*s != 0){
- 67d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 680:	b8 28 00 00 00       	mov    $0x28,%eax
- 685:	89 d3                	mov    %edx,%ebx
- 687:	e9 74 ff ff ff       	jmp    600 <printf+0x110>
- 68c:	66 90                	xchg   %ax,%ax
- 68e:	66 90                	xchg   %ax,%ax
+ 69d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a5:	89 d3                	mov    %edx,%ebx
+ 6a7:	e9 74 ff ff ff       	jmp    620 <printf+0x110>
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
 
-00000690 <free>:
+000006b0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 690:	55                   	push   %ebp
+ 6b0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 691:	a1 54 0b 00 00       	mov    0xb54,%eax
+ 6b1:	a1 74 0b 00 00       	mov    0xb74,%eax
 {
- 696:	89 e5                	mov    %esp,%ebp
- 698:	57                   	push   %edi
- 699:	56                   	push   %esi
- 69a:	53                   	push   %ebx
- 69b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b6:	89 e5                	mov    %esp,%ebp
+ 6b8:	57                   	push   %edi
+ 6b9:	56                   	push   %esi
+ 6ba:	53                   	push   %ebx
+ 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 69e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6a8:	89 c2                	mov    %eax,%edx
- 6aa:	8b 00                	mov    (%eax),%eax
- 6ac:	39 ca                	cmp    %ecx,%edx
- 6ae:	73 30                	jae    6e0 <free+0x50>
- 6b0:	39 c1                	cmp    %eax,%ecx
- 6b2:	72 04                	jb     6b8 <free+0x28>
+ 6c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6c8:	89 c2                	mov    %eax,%edx
+ 6ca:	8b 00                	mov    (%eax),%eax
+ 6cc:	39 ca                	cmp    %ecx,%edx
+ 6ce:	73 30                	jae    700 <free+0x50>
+ 6d0:	39 c1                	cmp    %eax,%ecx
+ 6d2:	72 04                	jb     6d8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b4:	39 c2                	cmp    %eax,%edx
- 6b6:	72 f0                	jb     6a8 <free+0x18>
+ 6d4:	39 c2                	cmp    %eax,%edx
+ 6d6:	72 f0                	jb     6c8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6be:	39 f8                	cmp    %edi,%eax
- 6c0:	74 30                	je     6f2 <free+0x62>
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 f8                	cmp    %edi,%eax
+ 6e0:	74 30                	je     712 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 6c2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 6e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 6c5:	8b 42 04             	mov    0x4(%edx),%eax
- 6c8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 6cb:	39 f1                	cmp    %esi,%ecx
- 6cd:	74 3a                	je     709 <free+0x79>
+ 6e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6eb:	39 f1                	cmp    %esi,%ecx
+ 6ed:	74 3a                	je     729 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 6cf:	89 0a                	mov    %ecx,(%edx)
+ 6ef:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 6d1:	5b                   	pop    %ebx
+ 6f1:	5b                   	pop    %ebx
   freep = p;
- 6d2:	89 15 54 0b 00 00    	mov    %edx,0xb54
+ 6f2:	89 15 74 0b 00 00    	mov    %edx,0xb74
 }
- 6d8:	5e                   	pop    %esi
- 6d9:	5f                   	pop    %edi
- 6da:	5d                   	pop    %ebp
- 6db:	c3                   	ret    
- 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6f8:	5e                   	pop    %esi
+ 6f9:	5f                   	pop    %edi
+ 6fa:	5d                   	pop    %ebp
+ 6fb:	c3                   	ret    
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6e0:	39 c2                	cmp    %eax,%edx
- 6e2:	72 c4                	jb     6a8 <free+0x18>
- 6e4:	39 c1                	cmp    %eax,%ecx
- 6e6:	73 c0                	jae    6a8 <free+0x18>
+ 700:	39 c2                	cmp    %eax,%edx
+ 702:	72 c4                	jb     6c8 <free+0x18>
+ 704:	39 c1                	cmp    %eax,%ecx
+ 706:	73 c0                	jae    6c8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6ee:	39 f8                	cmp    %edi,%eax
- 6f0:	75 d0                	jne    6c2 <free+0x32>
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 f8                	cmp    %edi,%eax
+ 710:	75 d0                	jne    6e2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 6f2:	03 70 04             	add    0x4(%eax),%esi
- 6f5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 712:	03 70 04             	add    0x4(%eax),%esi
+ 715:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 6f8:	8b 02                	mov    (%edx),%eax
- 6fa:	8b 00                	mov    (%eax),%eax
- 6fc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 718:	8b 02                	mov    (%edx),%eax
+ 71a:	8b 00                	mov    (%eax),%eax
+ 71c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 6ff:	8b 42 04             	mov    0x4(%edx),%eax
- 702:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 705:	39 f1                	cmp    %esi,%ecx
- 707:	75 c6                	jne    6cf <free+0x3f>
+ 71f:	8b 42 04             	mov    0x4(%edx),%eax
+ 722:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	75 c6                	jne    6ef <free+0x3f>
     p->s.size += bp->s.size;
- 709:	03 43 fc             	add    -0x4(%ebx),%eax
+ 729:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 70c:	89 15 54 0b 00 00    	mov    %edx,0xb54
+ 72c:	89 15 74 0b 00 00    	mov    %edx,0xb74
     p->s.size += bp->s.size;
- 712:	89 42 04             	mov    %eax,0x4(%edx)
+ 732:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 715:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 718:	89 0a                	mov    %ecx,(%edx)
+ 735:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 738:	89 0a                	mov    %ecx,(%edx)
 }
- 71a:	5b                   	pop    %ebx
- 71b:	5e                   	pop    %esi
- 71c:	5f                   	pop    %edi
- 71d:	5d                   	pop    %ebp
- 71e:	c3                   	ret    
- 71f:	90                   	nop
+ 73a:	5b                   	pop    %ebx
+ 73b:	5e                   	pop    %esi
+ 73c:	5f                   	pop    %edi
+ 73d:	5d                   	pop    %ebp
+ 73e:	c3                   	ret    
+ 73f:	90                   	nop
 
-00000720 <malloc>:
+00000740 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 720:	55                   	push   %ebp
- 721:	89 e5                	mov    %esp,%ebp
- 723:	57                   	push   %edi
- 724:	56                   	push   %esi
- 725:	53                   	push   %ebx
- 726:	83 ec 1c             	sub    $0x1c,%esp
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 729:	8b 45 08             	mov    0x8(%ebp),%eax
+ 749:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 72c:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
+ 74c:	8b 3d 74 0b 00 00    	mov    0xb74,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 732:	8d 70 07             	lea    0x7(%eax),%esi
- 735:	c1 ee 03             	shr    $0x3,%esi
- 738:	83 c6 01             	add    $0x1,%esi
+ 752:	8d 70 07             	lea    0x7(%eax),%esi
+ 755:	c1 ee 03             	shr    $0x3,%esi
+ 758:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 73b:	85 ff                	test   %edi,%edi
- 73d:	0f 84 9d 00 00 00    	je     7e0 <malloc+0xc0>
+ 75b:	85 ff                	test   %edi,%edi
+ 75d:	0f 84 9d 00 00 00    	je     800 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 743:	8b 17                	mov    (%edi),%edx
+ 763:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 745:	8b 4a 04             	mov    0x4(%edx),%ecx
- 748:	39 f1                	cmp    %esi,%ecx
- 74a:	73 6a                	jae    7b6 <malloc+0x96>
- 74c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 751:	39 de                	cmp    %ebx,%esi
- 753:	0f 43 de             	cmovae %esi,%ebx
+ 765:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 768:	39 f1                	cmp    %esi,%ecx
+ 76a:	73 6a                	jae    7d6 <malloc+0x96>
+ 76c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 771:	39 de                	cmp    %ebx,%esi
+ 773:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 756:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 75d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 760:	eb 17                	jmp    779 <malloc+0x59>
- 762:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 776:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 77d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 780:	eb 17                	jmp    799 <malloc+0x59>
+ 782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 768:	8b 02                	mov    (%edx),%eax
+ 788:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 76a:	8b 48 04             	mov    0x4(%eax),%ecx
- 76d:	39 f1                	cmp    %esi,%ecx
- 76f:	73 4f                	jae    7c0 <malloc+0xa0>
+ 78a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 78d:	39 f1                	cmp    %esi,%ecx
+ 78f:	73 4f                	jae    7e0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 771:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
- 777:	89 c2                	mov    %eax,%edx
- 779:	39 d7                	cmp    %edx,%edi
- 77b:	75 eb                	jne    768 <malloc+0x48>
+ 791:	8b 3d 74 0b 00 00    	mov    0xb74,%edi
+ 797:	89 c2                	mov    %eax,%edx
+ 799:	39 d7                	cmp    %edx,%edi
+ 79b:	75 eb                	jne    788 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 77d:	83 ec 0c             	sub    $0xc,%esp
- 780:	ff 75 e4             	push   -0x1c(%ebp)
- 783:	e8 93 fc ff ff       	call   41b <sbrk>
+ 79d:	83 ec 0c             	sub    $0xc,%esp
+ 7a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7a3:	e8 73 fc ff ff       	call   41b <sbrk>
   if(p == (char*)-1)
- 788:	83 c4 10             	add    $0x10,%esp
- 78b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 78e:	74 1c                	je     7ac <malloc+0x8c>
+ 7a8:	83 c4 10             	add    $0x10,%esp
+ 7ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ae:	74 1c                	je     7cc <malloc+0x8c>
   hp->s.size = nu;
- 790:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7b0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 793:	83 ec 0c             	sub    $0xc,%esp
- 796:	83 c0 08             	add    $0x8,%eax
- 799:	50                   	push   %eax
- 79a:	e8 f1 fe ff ff       	call   690 <free>
+ 7b3:	83 ec 0c             	sub    $0xc,%esp
+ 7b6:	83 c0 08             	add    $0x8,%eax
+ 7b9:	50                   	push   %eax
+ 7ba:	e8 f1 fe ff ff       	call   6b0 <free>
   return freep;
- 79f:	8b 15 54 0b 00 00    	mov    0xb54,%edx
+ 7bf:	8b 15 74 0b 00 00    	mov    0xb74,%edx
       if((p = morecore(nunits)) == 0)
- 7a5:	83 c4 10             	add    $0x10,%esp
- 7a8:	85 d2                	test   %edx,%edx
- 7aa:	75 bc                	jne    768 <malloc+0x48>
+ 7c5:	83 c4 10             	add    $0x10,%esp
+ 7c8:	85 d2                	test   %edx,%edx
+ 7ca:	75 bc                	jne    788 <malloc+0x48>
         return 0;
   }
 }
- 7ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7af:	31 c0                	xor    %eax,%eax
+ 7cf:	31 c0                	xor    %eax,%eax
 }
- 7b1:	5b                   	pop    %ebx
- 7b2:	5e                   	pop    %esi
- 7b3:	5f                   	pop    %edi
- 7b4:	5d                   	pop    %ebp
- 7b5:	c3                   	ret    
+ 7d1:	5b                   	pop    %ebx
+ 7d2:	5e                   	pop    %esi
+ 7d3:	5f                   	pop    %edi
+ 7d4:	5d                   	pop    %ebp
+ 7d5:	c3                   	ret    
     if(p->s.size >= nunits){
- 7b6:	89 d0                	mov    %edx,%eax
- 7b8:	89 fa                	mov    %edi,%edx
- 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7d6:	89 d0                	mov    %edx,%eax
+ 7d8:	89 fa                	mov    %edi,%edx
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 7c0:	39 ce                	cmp    %ecx,%esi
- 7c2:	74 4c                	je     810 <malloc+0xf0>
+ 7e0:	39 ce                	cmp    %ecx,%esi
+ 7e2:	74 4c                	je     830 <malloc+0xf0>
         p->s.size -= nunits;
- 7c4:	29 f1                	sub    %esi,%ecx
- 7c6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 7e4:	29 f1                	sub    %esi,%ecx
+ 7e6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 7c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 7e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 7cc:	89 70 04             	mov    %esi,0x4(%eax)
+ 7ec:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 7cf:	89 15 54 0b 00 00    	mov    %edx,0xb54
+ 7ef:	89 15 74 0b 00 00    	mov    %edx,0xb74
 }
- 7d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 7d8:	83 c0 08             	add    $0x8,%eax
+ 7f8:	83 c0 08             	add    $0x8,%eax
 }
- 7db:	5b                   	pop    %ebx
- 7dc:	5e                   	pop    %esi
- 7dd:	5f                   	pop    %edi
- 7de:	5d                   	pop    %ebp
- 7df:	c3                   	ret    
+ 7fb:	5b                   	pop    %ebx
+ 7fc:	5e                   	pop    %esi
+ 7fd:	5f                   	pop    %edi
+ 7fe:	5d                   	pop    %ebp
+ 7ff:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 7e0:	c7 05 54 0b 00 00 58 	movl   $0xb58,0xb54
- 7e7:	0b 00 00 
+ 800:	c7 05 74 0b 00 00 78 	movl   $0xb78,0xb74
+ 807:	0b 00 00 
     base.s.size = 0;
- 7ea:	bf 58 0b 00 00       	mov    $0xb58,%edi
+ 80a:	bf 78 0b 00 00       	mov    $0xb78,%edi
     base.s.ptr = freep = prevp = &base;
- 7ef:	c7 05 58 0b 00 00 58 	movl   $0xb58,0xb58
- 7f6:	0b 00 00 
+ 80f:	c7 05 78 0b 00 00 78 	movl   $0xb78,0xb78
+ 816:	0b 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f9:	89 fa                	mov    %edi,%edx
+ 819:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 7fb:	c7 05 5c 0b 00 00 00 	movl   $0x0,0xb5c
- 802:	00 00 00 
+ 81b:	c7 05 7c 0b 00 00 00 	movl   $0x0,0xb7c
+ 822:	00 00 00 
     if(p->s.size >= nunits){
- 805:	e9 42 ff ff ff       	jmp    74c <malloc+0x2c>
- 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 825:	e9 42 ff ff ff       	jmp    76c <malloc+0x2c>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 810:	8b 08                	mov    (%eax),%ecx
- 812:	89 0a                	mov    %ecx,(%edx)
- 814:	eb b9                	jmp    7cf <malloc+0xaf>
+ 830:	8b 08                	mov    (%eax),%ecx
+ 832:	89 0a                	mov    %ecx,(%edx)
+ 834:	eb b9                	jmp    7ef <malloc+0xaf>
Binary files xv6-public-org/stressfs.o and xv6-public/stressfs.o differ
diff -u xv6-public-org/stressfs.sym xv6-public/stressfs.sym
--- xv6-public-org/stressfs.sym	2022-09-04 11:47:11.822187209 +0530
+++ xv6-public/stressfs.sym	2022-09-05 23:16:37.501930644 +0530
@@ -1,18 +1,19 @@
 00000000 stressfs.c
 00000000 ulib.c
 00000000 printf.c
-00000440 printint
-0000089c digits.0
+00000460 printint
+000008bc digits.0
 00000000 umalloc.c
-00000b54 freep
-00000b58 base
+00000b74 freep
+00000b78 base
 00000140 strcpy
-000004f0 printf
+00000510 printf
+00000443 thread_exit
 00000360 memmove
 000003db mknod
 00000260 gets
 00000413 getpid
-00000720 malloc
+00000740 malloc
 00000423 sleep
 000003a3 pipe
 000003b3 write
@@ -26,20 +27,23 @@
 0000038b fork
 0000041b sbrk
 0000042b uptime
-00000b54 __bss_start
+00000b74 __bss_start
 00000200 memset
 00000000 main
 00000170 strcmp
 0000040b dup
 000002d0 stat
-00000b54 _edata
-00000b60 _end
+00000b74 _edata
+00000b80 _end
 000003f3 link
 00000393 exit
 00000320 atoi
+0000044b draw
 000001d0 strlen
 000003d3 open
 00000220 strchr
+00000433 thread_create
 000003fb mkdir
 000003bb close
-00000690 free
+0000043b thread_join
+000006b0 free
diff -u xv6-public-org/syscall.c xv6-public/syscall.c
--- xv6-public-org/syscall.c	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/syscall.c	2022-09-03 13:44:42.000000000 +0530
@@ -103,6 +103,10 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_thread_create(void);
+extern int sys_thread_join(void);
+extern int sys_thread_exit(void);
+extern int sys_draw(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +130,10 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]    sys_thread_create,
+[SYS_thread_join]    sys_thread_join,
+[SYS_thread_exit]    sys_thread_exit,
+[SYS_draw]    sys_draw,
 };
 
 void
diff -u xv6-public-org/syscall.h xv6-public/syscall.h
--- xv6-public-org/syscall.h	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/syscall.h	2022-09-03 13:45:22.000000000 +0530
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_exit 23
+#define SYS_thread_join 24
+#define SYS_draw   25
\ No newline at end of file
Binary files xv6-public-org/syscall.o and xv6-public/syscall.o differ
Binary files xv6-public-org/sysfile.o and xv6-public/sysfile.o differ
diff -u xv6-public-org/sysproc.c xv6-public/sysproc.c
--- xv6-public-org/sysproc.c	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/sysproc.c	2022-09-05 23:15:59.225843679 +0530
@@ -89,3 +89,33 @@
   release(&tickslock);
   return xticks;
 }
+
+int sys_thread_create(void){
+  void (*fcn)(void*),*arg,*stack;
+  argptr(0,(void*) &fcn, sizeof(void(*)(void *)));
+  argptr(1, (void*) &arg, sizeof(void*));
+  argptr(2, (void*) &stack, sizeof(void *));
+  return thread_create(fcn,arg,stack);
+}
+
+int sys_thread_join(void){
+  return thread_join();
+}
+
+
+int sys_thread_exit(void){
+  return thread_exit();
+}
+
+int 
+sys_draw(void){
+  void* buf;
+  uint size;
+  argptr(0,(void*)&buf,sizeof(buf));
+  argptr(1,(void*)&size,sizeof(size));
+  char figure[] = "\n\
+     			---------------------- \n";
+  if(sizeof(figure)>size)return -1;
+  strncpy((char *)buf,figure,size);
+  return sizeof(figure);                
+}
Binary files xv6-public-org/sysproc.o and xv6-public/sysproc.o differ
Only in xv6-public: _thread
Only in xv6-public: thread.asm
Only in xv6-public: thread.c
Only in xv6-public: thread.d
Only in xv6-public: thread.o
Only in xv6-public: thread.sym
Binary files xv6-public-org/trap.o and xv6-public/trap.o differ
diff -u xv6-public-org/user.h xv6-public/user.h
--- xv6-public-org/user.h	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/user.h	2022-09-03 13:43:06.000000000 +0530
@@ -23,6 +23,10 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int draw(void*,uint);
+int thread_create(void (*)(void*),void*,void*);
+int thread_join(void);
+int thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
Only in xv6-public-org: _usertests
Only in xv6-public-org: usertests.asm
diff -u xv6-public-org/usertests.c xv6-public/usertests.c
--- xv6-public-org/usertests.c	2022-09-04 11:46:48.786675149 +0530
+++ xv6-public/usertests.c	2022-08-11 19:48:39.000000000 +0530
@@ -1415,7 +1415,7 @@
 sbrktest(void)
 {
   int fds[2], pid, pids[10], ppid;
-  char *a, *b, *c, *oldbrk, *p, scratch;
+  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
   uint amt;
 
   printf(stdout, "sbrk test\n");
@@ -1457,8 +1457,8 @@
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
     exit();
   }
-  /*lastaddr = (char*) (BIG-1);
-  *lastaddr = 99;*/
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
 
   // can one de-allocate?
   a = sbrk(0);
@@ -1480,11 +1480,11 @@
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
     exit();
   }
-  /*if(*lastaddr == 99){
+  if(*lastaddr == 99){
     // should be zero
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
     exit();
-  }*/
+  }
 
   a = sbrk(0);
   c = sbrk(-(sbrk(0) - oldbrk));
Only in xv6-public-org: usertests.d
Only in xv6-public-org: usertests.o
Only in xv6-public-org: usertests.sym
Binary files xv6-public-org/usys.o and xv6-public/usys.o differ
diff -u xv6-public-org/usys.S xv6-public/usys.S
--- xv6-public-org/usys.S	2022-09-04 11:44:03.848246000 +0530
+++ xv6-public/usys.S	2022-09-03 13:43:44.000000000 +0530
@@ -29,3 +29,7 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(thread_create)
+SYSCALL(thread_join)
+SYSCALL(thread_exit)
+SYSCALL(draw)
\ No newline at end of file
Binary files xv6-public-org/vm.o and xv6-public/vm.o differ
Binary files xv6-public-org/_wc and xv6-public/_wc differ
diff -u xv6-public-org/wc.asm xv6-public/wc.asm
--- xv6-public-org/wc.asm	2022-09-04 11:47:12.282417204 +0530
+++ xv6-public/wc.asm	2022-09-05 23:16:37.645930958 +0530
@@ -71,15 +71,15 @@
       printf(1, "wc: cannot open %s\n", argv[i]);
   6b:	50                   	push   %eax
   6c:	ff 33                	push   (%ebx)
-  6e:	68 7b 08 00 00       	push   $0x87b
+  6e:	68 9b 08 00 00       	push   $0x89b
   73:	6a 01                	push   $0x1
-  75:	e8 b6 04 00 00       	call   530 <printf>
+  75:	e8 d6 04 00 00       	call   550 <printf>
       exit();
   7a:	e8 54 03 00 00       	call   3d3 <exit>
     wc(0, "");
   7f:	52                   	push   %edx
   80:	52                   	push   %edx
-  81:	68 6d 08 00 00       	push   $0x86d
+  81:	68 8d 08 00 00       	push   $0x88d
   86:	6a 00                	push   $0x0
   88:	e8 13 00 00 00       	call   a0 <wc>
     exit();
@@ -111,7 +111,7 @@
   while((n = read(fd, buf, sizeof(buf))) > 0){
   c0:	83 ec 04             	sub    $0x4,%esp
   c3:	68 00 02 00 00       	push   $0x200
-  c8:	68 e0 0b 00 00       	push   $0xbe0
+  c8:	68 00 0c 00 00       	push   $0xc00
   cd:	ff 75 08             	push   0x8(%ebp)
   d0:	e8 16 03 00 00       	call   3eb <read>
   d5:	83 c4 10             	add    $0x10,%esp
@@ -129,7 +129,7 @@
   f2:	39 fe                	cmp    %edi,%esi
   f4:	74 42                	je     138 <wc+0x98>
       if(buf[i] == '\n')
-  f6:	0f be 87 e0 0b 00 00 	movsbl 0xbe0(%edi),%eax
+  f6:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
         l++;
   fd:	31 c9                	xor    %ecx,%ecx
   ff:	3c 0a                	cmp    $0xa,%al
@@ -140,7 +140,7 @@
         l++;
  108:	01 cb                	add    %ecx,%ebx
       if(strchr(" \r\t\n\v", buf[i]))
- 10a:	68 58 08 00 00       	push   $0x858
+ 10a:	68 78 08 00 00       	push   $0x878
  10f:	e8 4c 01 00 00       	call   260 <strchr>
  114:	83 c4 10             	add    $0x10,%esp
  117:	85 c0                	test   %eax,%eax
@@ -171,9 +171,9 @@
  148:	ff 75 dc             	push   -0x24(%ebp)
  14b:	ff 75 e0             	push   -0x20(%ebp)
  14e:	53                   	push   %ebx
- 14f:	68 6e 08 00 00       	push   $0x86e
+ 14f:	68 8e 08 00 00       	push   $0x88e
  154:	6a 01                	push   $0x1
- 156:	e8 d5 03 00 00       	call   530 <printf>
+ 156:	e8 f5 03 00 00       	call   550 <printf>
 }
  15b:	83 c4 20             	add    $0x20,%esp
  15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -185,9 +185,9 @@
     printf(1, "wc: read error\n");
  166:	50                   	push   %eax
  167:	50                   	push   %eax
- 168:	68 5e 08 00 00       	push   $0x85e
+ 168:	68 7e 08 00 00       	push   $0x87e
  16d:	6a 01                	push   $0x1
- 16f:	e8 bc 03 00 00       	call   530 <printf>
+ 16f:	e8 dc 03 00 00       	call   550 <printf>
     exit();
  174:	e8 5a 02 00 00       	call   3d3 <exit>
  179:	66 90                	xchg   %ax,%ax
@@ -719,569 +719,592 @@
  46b:	b8 0e 00 00 00       	mov    $0xe,%eax
  470:	cd 40                	int    $0x40
  472:	c3                   	ret    
- 473:	66 90                	xchg   %ax,%ax
- 475:	66 90                	xchg   %ax,%ax
- 477:	66 90                	xchg   %ax,%ax
- 479:	66 90                	xchg   %ax,%ax
- 47b:	66 90                	xchg   %ax,%ax
- 47d:	66 90                	xchg   %ax,%ax
- 47f:	90                   	nop
 
-00000480 <printint>:
+00000473 <thread_create>:
+SYSCALL(thread_create)
+ 473:	b8 16 00 00 00       	mov    $0x16,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <thread_join>:
+SYSCALL(thread_join)
+ 47b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <thread_exit>:
+SYSCALL(thread_exit)
+ 483:	b8 17 00 00 00       	mov    $0x17,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <draw>:
+ 48b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+ 493:	66 90                	xchg   %ax,%ax
+ 495:	66 90                	xchg   %ax,%ax
+ 497:	66 90                	xchg   %ax,%ax
+ 499:	66 90                	xchg   %ax,%ax
+ 49b:	66 90                	xchg   %ax,%ax
+ 49d:	66 90                	xchg   %ax,%ax
+ 49f:	90                   	nop
+
+000004a0 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 480:	55                   	push   %ebp
- 481:	89 e5                	mov    %esp,%ebp
- 483:	57                   	push   %edi
- 484:	56                   	push   %esi
- 485:	53                   	push   %ebx
- 486:	83 ec 3c             	sub    $0x3c,%esp
- 489:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
+ 4a4:	56                   	push   %esi
+ 4a5:	53                   	push   %ebx
+ 4a6:	83 ec 3c             	sub    $0x3c,%esp
+ 4a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 48c:	89 d1                	mov    %edx,%ecx
+ 4ac:	89 d1                	mov    %edx,%ecx
 {
- 48e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 491:	85 d2                	test   %edx,%edx
- 493:	0f 89 7f 00 00 00    	jns    518 <printint+0x98>
- 499:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 49d:	74 79                	je     518 <printint+0x98>
+ 4b1:	85 d2                	test   %edx,%edx
+ 4b3:	0f 89 7f 00 00 00    	jns    538 <printint+0x98>
+ 4b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4bd:	74 79                	je     538 <printint+0x98>
     neg = 1;
- 49f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 4bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 4a6:	f7 d9                	neg    %ecx
+ 4c6:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 4a8:	31 db                	xor    %ebx,%ebx
- 4aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4c8:	31 db                	xor    %ebx,%ebx
+ 4ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 4b0:	89 c8                	mov    %ecx,%eax
- 4b2:	31 d2                	xor    %edx,%edx
- 4b4:	89 cf                	mov    %ecx,%edi
- 4b6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4b9:	0f b6 92 f0 08 00 00 	movzbl 0x8f0(%edx),%edx
- 4c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4c3:	89 d8                	mov    %ebx,%eax
- 4c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 4d0:	89 c8                	mov    %ecx,%eax
+ 4d2:	31 d2                	xor    %edx,%edx
+ 4d4:	89 cf                	mov    %ecx,%edi
+ 4d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4d9:	0f b6 92 10 09 00 00 	movzbl 0x910(%edx),%edx
+ 4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4e3:	89 d8                	mov    %ebx,%eax
+ 4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 4c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 4e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 4cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 4eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 4ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4d1:	76 dd                	jbe    4b0 <printint+0x30>
+ 4ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4f1:	76 dd                	jbe    4d0 <printint+0x30>
   if(neg)
- 4d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4d6:	85 c9                	test   %ecx,%ecx
- 4d8:	74 0c                	je     4e6 <printint+0x66>
+ 4f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4f6:	85 c9                	test   %ecx,%ecx
+ 4f8:	74 0c                	je     506 <printint+0x66>
     buf[i++] = '-';
- 4da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 4fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 4df:	89 d8                	mov    %ebx,%eax
+ 4ff:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 4e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 501:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 4e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4ed:	eb 07                	jmp    4f6 <printint+0x76>
- 4ef:	90                   	nop
+ 506:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 509:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 50d:	eb 07                	jmp    516 <printint+0x76>
+ 50f:	90                   	nop
     putc(fd, buf[i]);
- 4f0:	0f b6 13             	movzbl (%ebx),%edx
- 4f3:	83 eb 01             	sub    $0x1,%ebx
+ 510:	0f b6 13             	movzbl (%ebx),%edx
+ 513:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 4f6:	83 ec 04             	sub    $0x4,%esp
- 4f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4fc:	6a 01                	push   $0x1
- 4fe:	56                   	push   %esi
- 4ff:	57                   	push   %edi
- 500:	e8 ee fe ff ff       	call   3f3 <write>
+ 516:	83 ec 04             	sub    $0x4,%esp
+ 519:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 51c:	6a 01                	push   $0x1
+ 51e:	56                   	push   %esi
+ 51f:	57                   	push   %edi
+ 520:	e8 ce fe ff ff       	call   3f3 <write>
   while(--i >= 0)
- 505:	83 c4 10             	add    $0x10,%esp
- 508:	39 de                	cmp    %ebx,%esi
- 50a:	75 e4                	jne    4f0 <printint+0x70>
-}
- 50c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 50f:	5b                   	pop    %ebx
- 510:	5e                   	pop    %esi
- 511:	5f                   	pop    %edi
- 512:	5d                   	pop    %ebp
- 513:	c3                   	ret    
- 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 525:	83 c4 10             	add    $0x10,%esp
+ 528:	39 de                	cmp    %ebx,%esi
+ 52a:	75 e4                	jne    510 <printint+0x70>
+}
+ 52c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 52f:	5b                   	pop    %ebx
+ 530:	5e                   	pop    %esi
+ 531:	5f                   	pop    %edi
+ 532:	5d                   	pop    %ebp
+ 533:	c3                   	ret    
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 518:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 51f:	eb 87                	jmp    4a8 <printint+0x28>
- 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 52f:	90                   	nop
+ 538:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 53f:	eb 87                	jmp    4c8 <printint+0x28>
+ 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
 
-00000530 <printf>:
+00000550 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 530:	55                   	push   %ebp
- 531:	89 e5                	mov    %esp,%ebp
- 533:	57                   	push   %edi
- 534:	56                   	push   %esi
- 535:	53                   	push   %ebx
- 536:	83 ec 2c             	sub    $0x2c,%esp
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	57                   	push   %edi
+ 554:	56                   	push   %esi
+ 555:	53                   	push   %ebx
+ 556:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 539:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 559:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 53c:	8b 75 08             	mov    0x8(%ebp),%esi
+ 55c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 53f:	0f b6 13             	movzbl (%ebx),%edx
- 542:	84 d2                	test   %dl,%dl
- 544:	74 6a                	je     5b0 <printf+0x80>
+ 55f:	0f b6 13             	movzbl (%ebx),%edx
+ 562:	84 d2                	test   %dl,%dl
+ 564:	74 6a                	je     5d0 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 546:	8d 45 10             	lea    0x10(%ebp),%eax
- 549:	83 c3 01             	add    $0x1,%ebx
+ 566:	8d 45 10             	lea    0x10(%ebp),%eax
+ 569:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 54c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 56c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 54f:	31 c9                	xor    %ecx,%ecx
+ 56f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 554:	eb 36                	jmp    58c <printf+0x5c>
- 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
- 560:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	eb 36                	jmp    5ac <printf+0x5c>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 580:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 563:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 583:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 568:	83 f8 25             	cmp    $0x25,%eax
- 56b:	74 15                	je     582 <printf+0x52>
+ 588:	83 f8 25             	cmp    $0x25,%eax
+ 58b:	74 15                	je     5a2 <printf+0x52>
   write(fd, &c, 1);
- 56d:	83 ec 04             	sub    $0x4,%esp
- 570:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 573:	6a 01                	push   $0x1
- 575:	57                   	push   %edi
- 576:	56                   	push   %esi
- 577:	e8 77 fe ff ff       	call   3f3 <write>
- 57c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 58d:	83 ec 04             	sub    $0x4,%esp
+ 590:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 593:	6a 01                	push   $0x1
+ 595:	57                   	push   %edi
+ 596:	56                   	push   %esi
+ 597:	e8 57 fe ff ff       	call   3f3 <write>
+ 59c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 57f:	83 c4 10             	add    $0x10,%esp
+ 59f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 582:	0f b6 13             	movzbl (%ebx),%edx
- 585:	83 c3 01             	add    $0x1,%ebx
- 588:	84 d2                	test   %dl,%dl
- 58a:	74 24                	je     5b0 <printf+0x80>
+ 5a2:	0f b6 13             	movzbl (%ebx),%edx
+ 5a5:	83 c3 01             	add    $0x1,%ebx
+ 5a8:	84 d2                	test   %dl,%dl
+ 5aa:	74 24                	je     5d0 <printf+0x80>
     c = fmt[i] & 0xff;
- 58c:	0f b6 c2             	movzbl %dl,%eax
+ 5ac:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 58f:	85 c9                	test   %ecx,%ecx
- 591:	74 cd                	je     560 <printf+0x30>
+ 5af:	85 c9                	test   %ecx,%ecx
+ 5b1:	74 cd                	je     580 <printf+0x30>
       }
     } else if(state == '%'){
- 593:	83 f9 25             	cmp    $0x25,%ecx
- 596:	75 ea                	jne    582 <printf+0x52>
+ 5b3:	83 f9 25             	cmp    $0x25,%ecx
+ 5b6:	75 ea                	jne    5a2 <printf+0x52>
       if(c == 'd'){
- 598:	83 f8 25             	cmp    $0x25,%eax
- 59b:	0f 84 07 01 00 00    	je     6a8 <printf+0x178>
- 5a1:	83 e8 63             	sub    $0x63,%eax
- 5a4:	83 f8 15             	cmp    $0x15,%eax
- 5a7:	77 17                	ja     5c0 <printf+0x90>
- 5a9:	ff 24 85 98 08 00 00 	jmp    *0x898(,%eax,4)
+ 5b8:	83 f8 25             	cmp    $0x25,%eax
+ 5bb:	0f 84 07 01 00 00    	je     6c8 <printf+0x178>
+ 5c1:	83 e8 63             	sub    $0x63,%eax
+ 5c4:	83 f8 15             	cmp    $0x15,%eax
+ 5c7:	77 17                	ja     5e0 <printf+0x90>
+ 5c9:	ff 24 85 b8 08 00 00 	jmp    *0x8b8(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 5b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5b3:	5b                   	pop    %ebx
- 5b4:	5e                   	pop    %esi
- 5b5:	5f                   	pop    %edi
- 5b6:	5d                   	pop    %ebp
- 5b7:	c3                   	ret    
- 5b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5bf:	90                   	nop
+ 5d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5d3:	5b                   	pop    %ebx
+ 5d4:	5e                   	pop    %esi
+ 5d5:	5f                   	pop    %edi
+ 5d6:	5d                   	pop    %ebp
+ 5d7:	c3                   	ret    
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
   write(fd, &c, 1);
- 5c0:	83 ec 04             	sub    $0x4,%esp
- 5c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 5c6:	6a 01                	push   $0x1
- 5c8:	57                   	push   %edi
- 5c9:	56                   	push   %esi
- 5ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5ce:	e8 20 fe ff ff       	call   3f3 <write>
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5e6:	6a 01                	push   $0x1
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ee:	e8 00 fe ff ff       	call   3f3 <write>
         putc(fd, c);
- 5d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 5f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 5d7:	83 c4 0c             	add    $0xc,%esp
- 5da:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 5dd:	6a 01                	push   $0x1
- 5df:	57                   	push   %edi
- 5e0:	56                   	push   %esi
- 5e1:	e8 0d fe ff ff       	call   3f3 <write>
+ 5f7:	83 c4 0c             	add    $0xc,%esp
+ 5fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5fd:	6a 01                	push   $0x1
+ 5ff:	57                   	push   %edi
+ 600:	56                   	push   %esi
+ 601:	e8 ed fd ff ff       	call   3f3 <write>
         putc(fd, c);
- 5e6:	83 c4 10             	add    $0x10,%esp
+ 606:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 5e9:	31 c9                	xor    %ecx,%ecx
- 5eb:	eb 95                	jmp    582 <printf+0x52>
- 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 609:	31 c9                	xor    %ecx,%ecx
+ 60b:	eb 95                	jmp    5a2 <printf+0x52>
+ 60d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 5f0:	83 ec 0c             	sub    $0xc,%esp
- 5f3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5f8:	6a 00                	push   $0x0
- 5fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5fd:	8b 10                	mov    (%eax),%edx
- 5ff:	89 f0                	mov    %esi,%eax
- 601:	e8 7a fe ff ff       	call   480 <printint>
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 618:	6a 00                	push   $0x0
+ 61a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 61d:	8b 10                	mov    (%eax),%edx
+ 61f:	89 f0                	mov    %esi,%eax
+ 621:	e8 7a fe ff ff       	call   4a0 <printint>
         ap++;
- 606:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 60a:	83 c4 10             	add    $0x10,%esp
+ 626:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 62a:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 60d:	31 c9                	xor    %ecx,%ecx
- 60f:	e9 6e ff ff ff       	jmp    582 <printf+0x52>
- 614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	31 c9                	xor    %ecx,%ecx
+ 62f:	e9 6e ff ff ff       	jmp    5a2 <printf+0x52>
+ 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 618:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 61b:	8b 10                	mov    (%eax),%edx
+ 638:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 63b:	8b 10                	mov    (%eax),%edx
         ap++;
- 61d:	83 c0 04             	add    $0x4,%eax
- 620:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 63d:	83 c0 04             	add    $0x4,%eax
+ 640:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 623:	85 d2                	test   %edx,%edx
- 625:	0f 84 8d 00 00 00    	je     6b8 <printf+0x188>
+ 643:	85 d2                	test   %edx,%edx
+ 645:	0f 84 8d 00 00 00    	je     6d8 <printf+0x188>
         while(*s != 0){
- 62b:	0f b6 02             	movzbl (%edx),%eax
+ 64b:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 62e:	31 c9                	xor    %ecx,%ecx
+ 64e:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 630:	84 c0                	test   %al,%al
- 632:	0f 84 4a ff ff ff    	je     582 <printf+0x52>
- 638:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 63b:	89 d3                	mov    %edx,%ebx
- 63d:	8d 76 00             	lea    0x0(%esi),%esi
+ 650:	84 c0                	test   %al,%al
+ 652:	0f 84 4a ff ff ff    	je     5a2 <printf+0x52>
+ 658:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 65b:	89 d3                	mov    %edx,%ebx
+ 65d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 640:	83 ec 04             	sub    $0x4,%esp
+ 660:	83 ec 04             	sub    $0x4,%esp
           s++;
- 643:	83 c3 01             	add    $0x1,%ebx
- 646:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 663:	83 c3 01             	add    $0x1,%ebx
+ 666:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 649:	6a 01                	push   $0x1
- 64b:	57                   	push   %edi
- 64c:	56                   	push   %esi
- 64d:	e8 a1 fd ff ff       	call   3f3 <write>
+ 669:	6a 01                	push   $0x1
+ 66b:	57                   	push   %edi
+ 66c:	56                   	push   %esi
+ 66d:	e8 81 fd ff ff       	call   3f3 <write>
         while(*s != 0){
- 652:	0f b6 03             	movzbl (%ebx),%eax
- 655:	83 c4 10             	add    $0x10,%esp
- 658:	84 c0                	test   %al,%al
- 65a:	75 e4                	jne    640 <printf+0x110>
+ 672:	0f b6 03             	movzbl (%ebx),%eax
+ 675:	83 c4 10             	add    $0x10,%esp
+ 678:	84 c0                	test   %al,%al
+ 67a:	75 e4                	jne    660 <printf+0x110>
       state = 0;
- 65c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 65f:	31 c9                	xor    %ecx,%ecx
- 661:	e9 1c ff ff ff       	jmp    582 <printf+0x52>
- 666:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 66d:	8d 76 00             	lea    0x0(%esi),%esi
+ 67c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 67f:	31 c9                	xor    %ecx,%ecx
+ 681:	e9 1c ff ff ff       	jmp    5a2 <printf+0x52>
+ 686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 670:	83 ec 0c             	sub    $0xc,%esp
- 673:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 678:	6a 01                	push   $0x1
- 67a:	e9 7b ff ff ff       	jmp    5fa <printf+0xca>
- 67f:	90                   	nop
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	e9 7b ff ff ff       	jmp    61a <printf+0xca>
+ 69f:	90                   	nop
         putc(fd, *ap);
- 680:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 683:	83 ec 04             	sub    $0x4,%esp
+ 6a3:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 686:	8b 00                	mov    (%eax),%eax
+ 6a6:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 688:	6a 01                	push   $0x1
- 68a:	57                   	push   %edi
- 68b:	56                   	push   %esi
+ 6a8:	6a 01                	push   $0x1
+ 6aa:	57                   	push   %edi
+ 6ab:	56                   	push   %esi
         putc(fd, *ap);
- 68c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 6ac:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 68f:	e8 5f fd ff ff       	call   3f3 <write>
+ 6af:	e8 3f fd ff ff       	call   3f3 <write>
         ap++;
- 694:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 698:	83 c4 10             	add    $0x10,%esp
+ 6b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 6b8:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 69b:	31 c9                	xor    %ecx,%ecx
- 69d:	e9 e0 fe ff ff       	jmp    582 <printf+0x52>
- 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6bb:	31 c9                	xor    %ecx,%ecx
+ 6bd:	e9 e0 fe ff ff       	jmp    5a2 <printf+0x52>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 6a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 6c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 6ab:	83 ec 04             	sub    $0x4,%esp
- 6ae:	e9 2a ff ff ff       	jmp    5dd <printf+0xad>
- 6b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6b7:	90                   	nop
+ 6cb:	83 ec 04             	sub    $0x4,%esp
+ 6ce:	e9 2a ff ff ff       	jmp    5fd <printf+0xad>
+ 6d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6d7:	90                   	nop
           s = "(null)";
- 6b8:	ba 8f 08 00 00       	mov    $0x88f,%edx
+ 6d8:	ba af 08 00 00       	mov    $0x8af,%edx
         while(*s != 0){
- 6bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 6c0:	b8 28 00 00 00       	mov    $0x28,%eax
- 6c5:	89 d3                	mov    %edx,%ebx
- 6c7:	e9 74 ff ff ff       	jmp    640 <printf+0x110>
- 6cc:	66 90                	xchg   %ax,%ax
- 6ce:	66 90                	xchg   %ax,%ax
+ 6dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6e5:	89 d3                	mov    %edx,%ebx
+ 6e7:	e9 74 ff ff ff       	jmp    660 <printf+0x110>
+ 6ec:	66 90                	xchg   %ax,%ax
+ 6ee:	66 90                	xchg   %ax,%ax
 
-000006d0 <free>:
+000006f0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 6d0:	55                   	push   %ebp
+ 6f0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6d1:	a1 e0 0d 00 00       	mov    0xde0,%eax
+ 6f1:	a1 00 0e 00 00       	mov    0xe00,%eax
 {
- 6d6:	89 e5                	mov    %esp,%ebp
- 6d8:	57                   	push   %edi
- 6d9:	56                   	push   %esi
- 6da:	53                   	push   %ebx
- 6db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f6:	89 e5                	mov    %esp,%ebp
+ 6f8:	57                   	push   %edi
+ 6f9:	56                   	push   %esi
+ 6fa:	53                   	push   %ebx
+ 6fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 6de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 6fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6e8:	89 c2                	mov    %eax,%edx
- 6ea:	8b 00                	mov    (%eax),%eax
- 6ec:	39 ca                	cmp    %ecx,%edx
- 6ee:	73 30                	jae    720 <free+0x50>
- 6f0:	39 c1                	cmp    %eax,%ecx
- 6f2:	72 04                	jb     6f8 <free+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	89 c2                	mov    %eax,%edx
+ 70a:	8b 00                	mov    (%eax),%eax
+ 70c:	39 ca                	cmp    %ecx,%edx
+ 70e:	73 30                	jae    740 <free+0x50>
+ 710:	39 c1                	cmp    %eax,%ecx
+ 712:	72 04                	jb     718 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f4:	39 c2                	cmp    %eax,%edx
- 6f6:	72 f0                	jb     6e8 <free+0x18>
+ 714:	39 c2                	cmp    %eax,%edx
+ 716:	72 f0                	jb     708 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6fe:	39 f8                	cmp    %edi,%eax
- 700:	74 30                	je     732 <free+0x62>
+ 718:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 71b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71e:	39 f8                	cmp    %edi,%eax
+ 720:	74 30                	je     752 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 702:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 722:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 705:	8b 42 04             	mov    0x4(%edx),%eax
- 708:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 70b:	39 f1                	cmp    %esi,%ecx
- 70d:	74 3a                	je     749 <free+0x79>
+ 725:	8b 42 04             	mov    0x4(%edx),%eax
+ 728:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 72b:	39 f1                	cmp    %esi,%ecx
+ 72d:	74 3a                	je     769 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 70f:	89 0a                	mov    %ecx,(%edx)
+ 72f:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 711:	5b                   	pop    %ebx
+ 731:	5b                   	pop    %ebx
   freep = p;
- 712:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+ 732:	89 15 00 0e 00 00    	mov    %edx,0xe00
 }
- 718:	5e                   	pop    %esi
- 719:	5f                   	pop    %edi
- 71a:	5d                   	pop    %ebp
- 71b:	c3                   	ret    
- 71c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 720:	39 c2                	cmp    %eax,%edx
- 722:	72 c4                	jb     6e8 <free+0x18>
- 724:	39 c1                	cmp    %eax,%ecx
- 726:	73 c0                	jae    6e8 <free+0x18>
+ 740:	39 c2                	cmp    %eax,%edx
+ 742:	72 c4                	jb     708 <free+0x18>
+ 744:	39 c1                	cmp    %eax,%ecx
+ 746:	73 c0                	jae    708 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 728:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 72b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 72e:	39 f8                	cmp    %edi,%eax
- 730:	75 d0                	jne    702 <free+0x32>
+ 748:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 74b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 74e:	39 f8                	cmp    %edi,%eax
+ 750:	75 d0                	jne    722 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 732:	03 70 04             	add    0x4(%eax),%esi
- 735:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 752:	03 70 04             	add    0x4(%eax),%esi
+ 755:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 738:	8b 02                	mov    (%edx),%eax
- 73a:	8b 00                	mov    (%eax),%eax
- 73c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 758:	8b 02                	mov    (%edx),%eax
+ 75a:	8b 00                	mov    (%eax),%eax
+ 75c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 73f:	8b 42 04             	mov    0x4(%edx),%eax
- 742:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 745:	39 f1                	cmp    %esi,%ecx
- 747:	75 c6                	jne    70f <free+0x3f>
+ 75f:	8b 42 04             	mov    0x4(%edx),%eax
+ 762:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 765:	39 f1                	cmp    %esi,%ecx
+ 767:	75 c6                	jne    72f <free+0x3f>
     p->s.size += bp->s.size;
- 749:	03 43 fc             	add    -0x4(%ebx),%eax
+ 769:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 74c:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+ 76c:	89 15 00 0e 00 00    	mov    %edx,0xe00
     p->s.size += bp->s.size;
- 752:	89 42 04             	mov    %eax,0x4(%edx)
+ 772:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 755:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 758:	89 0a                	mov    %ecx,(%edx)
+ 775:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 778:	89 0a                	mov    %ecx,(%edx)
 }
- 75a:	5b                   	pop    %ebx
- 75b:	5e                   	pop    %esi
- 75c:	5f                   	pop    %edi
- 75d:	5d                   	pop    %ebp
- 75e:	c3                   	ret    
- 75f:	90                   	nop
+ 77a:	5b                   	pop    %ebx
+ 77b:	5e                   	pop    %esi
+ 77c:	5f                   	pop    %edi
+ 77d:	5d                   	pop    %ebp
+ 77e:	c3                   	ret    
+ 77f:	90                   	nop
 
-00000760 <malloc>:
+00000780 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 760:	55                   	push   %ebp
- 761:	89 e5                	mov    %esp,%ebp
- 763:	57                   	push   %edi
- 764:	56                   	push   %esi
- 765:	53                   	push   %ebx
- 766:	83 ec 1c             	sub    $0x1c,%esp
+ 780:	55                   	push   %ebp
+ 781:	89 e5                	mov    %esp,%ebp
+ 783:	57                   	push   %edi
+ 784:	56                   	push   %esi
+ 785:	53                   	push   %ebx
+ 786:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 769:	8b 45 08             	mov    0x8(%ebp),%eax
+ 789:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 76c:	8b 3d e0 0d 00 00    	mov    0xde0,%edi
+ 78c:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 772:	8d 70 07             	lea    0x7(%eax),%esi
- 775:	c1 ee 03             	shr    $0x3,%esi
- 778:	83 c6 01             	add    $0x1,%esi
+ 792:	8d 70 07             	lea    0x7(%eax),%esi
+ 795:	c1 ee 03             	shr    $0x3,%esi
+ 798:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 77b:	85 ff                	test   %edi,%edi
- 77d:	0f 84 9d 00 00 00    	je     820 <malloc+0xc0>
+ 79b:	85 ff                	test   %edi,%edi
+ 79d:	0f 84 9d 00 00 00    	je     840 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 783:	8b 17                	mov    (%edi),%edx
+ 7a3:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 785:	8b 4a 04             	mov    0x4(%edx),%ecx
- 788:	39 f1                	cmp    %esi,%ecx
- 78a:	73 6a                	jae    7f6 <malloc+0x96>
- 78c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 791:	39 de                	cmp    %ebx,%esi
- 793:	0f 43 de             	cmovae %esi,%ebx
+ 7a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7a8:	39 f1                	cmp    %esi,%ecx
+ 7aa:	73 6a                	jae    816 <malloc+0x96>
+ 7ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7b1:	39 de                	cmp    %ebx,%esi
+ 7b3:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 796:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 79d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 7a0:	eb 17                	jmp    7b9 <malloc+0x59>
- 7a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 7b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7c0:	eb 17                	jmp    7d9 <malloc+0x59>
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a8:	8b 02                	mov    (%edx),%eax
+ 7c8:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 7aa:	8b 48 04             	mov    0x4(%eax),%ecx
- 7ad:	39 f1                	cmp    %esi,%ecx
- 7af:	73 4f                	jae    800 <malloc+0xa0>
+ 7ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7cd:	39 f1                	cmp    %esi,%ecx
+ 7cf:	73 4f                	jae    820 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 7b1:	8b 3d e0 0d 00 00    	mov    0xde0,%edi
- 7b7:	89 c2                	mov    %eax,%edx
- 7b9:	39 d7                	cmp    %edx,%edi
- 7bb:	75 eb                	jne    7a8 <malloc+0x48>
+ 7d1:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
+ 7d7:	89 c2                	mov    %eax,%edx
+ 7d9:	39 d7                	cmp    %edx,%edi
+ 7db:	75 eb                	jne    7c8 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 7bd:	83 ec 0c             	sub    $0xc,%esp
- 7c0:	ff 75 e4             	push   -0x1c(%ebp)
- 7c3:	e8 93 fc ff ff       	call   45b <sbrk>
+ 7dd:	83 ec 0c             	sub    $0xc,%esp
+ 7e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7e3:	e8 73 fc ff ff       	call   45b <sbrk>
   if(p == (char*)-1)
- 7c8:	83 c4 10             	add    $0x10,%esp
- 7cb:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7ce:	74 1c                	je     7ec <malloc+0x8c>
+ 7e8:	83 c4 10             	add    $0x10,%esp
+ 7eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ee:	74 1c                	je     80c <malloc+0x8c>
   hp->s.size = nu;
- 7d0:	89 58 04             	mov    %ebx,0x4(%eax)
+ 7f0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 7d3:	83 ec 0c             	sub    $0xc,%esp
- 7d6:	83 c0 08             	add    $0x8,%eax
- 7d9:	50                   	push   %eax
- 7da:	e8 f1 fe ff ff       	call   6d0 <free>
+ 7f3:	83 ec 0c             	sub    $0xc,%esp
+ 7f6:	83 c0 08             	add    $0x8,%eax
+ 7f9:	50                   	push   %eax
+ 7fa:	e8 f1 fe ff ff       	call   6f0 <free>
   return freep;
- 7df:	8b 15 e0 0d 00 00    	mov    0xde0,%edx
+ 7ff:	8b 15 00 0e 00 00    	mov    0xe00,%edx
       if((p = morecore(nunits)) == 0)
- 7e5:	83 c4 10             	add    $0x10,%esp
- 7e8:	85 d2                	test   %edx,%edx
- 7ea:	75 bc                	jne    7a8 <malloc+0x48>
+ 805:	83 c4 10             	add    $0x10,%esp
+ 808:	85 d2                	test   %edx,%edx
+ 80a:	75 bc                	jne    7c8 <malloc+0x48>
         return 0;
   }
 }
- 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 80c:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 7ef:	31 c0                	xor    %eax,%eax
+ 80f:	31 c0                	xor    %eax,%eax
 }
- 7f1:	5b                   	pop    %ebx
- 7f2:	5e                   	pop    %esi
- 7f3:	5f                   	pop    %edi
- 7f4:	5d                   	pop    %ebp
- 7f5:	c3                   	ret    
+ 811:	5b                   	pop    %ebx
+ 812:	5e                   	pop    %esi
+ 813:	5f                   	pop    %edi
+ 814:	5d                   	pop    %ebp
+ 815:	c3                   	ret    
     if(p->s.size >= nunits){
- 7f6:	89 d0                	mov    %edx,%eax
- 7f8:	89 fa                	mov    %edi,%edx
- 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 816:	89 d0                	mov    %edx,%eax
+ 818:	89 fa                	mov    %edi,%edx
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 800:	39 ce                	cmp    %ecx,%esi
- 802:	74 4c                	je     850 <malloc+0xf0>
+ 820:	39 ce                	cmp    %ecx,%esi
+ 822:	74 4c                	je     870 <malloc+0xf0>
         p->s.size -= nunits;
- 804:	29 f1                	sub    %esi,%ecx
- 806:	89 48 04             	mov    %ecx,0x4(%eax)
+ 824:	29 f1                	sub    %esi,%ecx
+ 826:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 809:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 829:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 80c:	89 70 04             	mov    %esi,0x4(%eax)
+ 82c:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 80f:	89 15 e0 0d 00 00    	mov    %edx,0xde0
+ 82f:	89 15 00 0e 00 00    	mov    %edx,0xe00
 }
- 815:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 835:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 818:	83 c0 08             	add    $0x8,%eax
+ 838:	83 c0 08             	add    $0x8,%eax
 }
- 81b:	5b                   	pop    %ebx
- 81c:	5e                   	pop    %esi
- 81d:	5f                   	pop    %edi
- 81e:	5d                   	pop    %ebp
- 81f:	c3                   	ret    
+ 83b:	5b                   	pop    %ebx
+ 83c:	5e                   	pop    %esi
+ 83d:	5f                   	pop    %edi
+ 83e:	5d                   	pop    %ebp
+ 83f:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 820:	c7 05 e0 0d 00 00 e4 	movl   $0xde4,0xde0
- 827:	0d 00 00 
+ 840:	c7 05 00 0e 00 00 04 	movl   $0xe04,0xe00
+ 847:	0e 00 00 
     base.s.size = 0;
- 82a:	bf e4 0d 00 00       	mov    $0xde4,%edi
+ 84a:	bf 04 0e 00 00       	mov    $0xe04,%edi
     base.s.ptr = freep = prevp = &base;
- 82f:	c7 05 e4 0d 00 00 e4 	movl   $0xde4,0xde4
- 836:	0d 00 00 
+ 84f:	c7 05 04 0e 00 00 04 	movl   $0xe04,0xe04
+ 856:	0e 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 839:	89 fa                	mov    %edi,%edx
+ 859:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 83b:	c7 05 e8 0d 00 00 00 	movl   $0x0,0xde8
- 842:	00 00 00 
+ 85b:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08
+ 862:	00 00 00 
     if(p->s.size >= nunits){
- 845:	e9 42 ff ff ff       	jmp    78c <malloc+0x2c>
- 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 865:	e9 42 ff ff ff       	jmp    7ac <malloc+0x2c>
+ 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 850:	8b 08                	mov    (%eax),%ecx
- 852:	89 0a                	mov    %ecx,(%edx)
- 854:	eb b9                	jmp    80f <malloc+0xaf>
+ 870:	8b 08                	mov    (%eax),%ecx
+ 872:	89 0a                	mov    %ecx,(%edx)
+ 874:	eb b9                	jmp    82f <malloc+0xaf>
Binary files xv6-public-org/wc.o and xv6-public/wc.o differ
diff -u xv6-public-org/wc.sym xv6-public/wc.sym
--- xv6-public-org/wc.sym	2022-09-04 11:47:12.290421205 +0530
+++ xv6-public/wc.sym	2022-09-05 23:16:37.657930983 +0530
@@ -1,18 +1,19 @@
 00000000 wc.c
 00000000 ulib.c
 00000000 printf.c
-00000480 printint
-000008f0 digits.0
+000004a0 printint
+00000910 digits.0
 00000000 umalloc.c
-00000de0 freep
-00000de4 base
+00000e00 freep
+00000e04 base
 00000180 strcpy
-00000530 printf
+00000550 printf
+00000483 thread_exit
 000003a0 memmove
 0000041b mknod
 000002a0 gets
 00000453 getpid
-00000760 malloc
+00000780 malloc
 00000463 sleep
 000003e3 pipe
 000003f3 write
@@ -27,21 +28,24 @@
 000003cb fork
 0000045b sbrk
 0000046b uptime
-00000bd8 __bss_start
+00000bf8 __bss_start
 00000240 memset
 00000000 main
 000001b0 strcmp
 0000044b dup
-00000be0 buf
+00000c00 buf
 00000310 stat
-00000bd8 _edata
-00000dec _end
+00000bf8 _edata
+00000e0c _end
 00000433 link
 000003d3 exit
 00000360 atoi
+0000048b draw
 00000210 strlen
 00000413 open
 00000260 strchr
+00000473 thread_create
 0000043b mkdir
 000003fb close
-000006d0 free
+0000047b thread_join
+000006f0 free
Binary files xv6-public-org/xv6.img and xv6-public/xv6.img differ
Binary files xv6-public-org/_zombie and xv6-public/_zombie differ
diff -u xv6-public-org/zombie.asm xv6-public/zombie.asm
--- xv6-public-org/zombie.asm	2022-09-04 11:47:12.342447205 +0530
+++ xv6-public/zombie.asm	2022-09-05 23:16:37.713931107 +0530
@@ -556,569 +556,592 @@
  31b:	b8 0e 00 00 00       	mov    $0xe,%eax
  320:	cd 40                	int    $0x40
  322:	c3                   	ret    
- 323:	66 90                	xchg   %ax,%ax
- 325:	66 90                	xchg   %ax,%ax
- 327:	66 90                	xchg   %ax,%ax
- 329:	66 90                	xchg   %ax,%ax
- 32b:	66 90                	xchg   %ax,%ax
- 32d:	66 90                	xchg   %ax,%ax
- 32f:	90                   	nop
 
-00000330 <printint>:
+00000323 <thread_create>:
+SYSCALL(thread_create)
+ 323:	b8 16 00 00 00       	mov    $0x16,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <thread_join>:
+SYSCALL(thread_join)
+ 32b:	b8 18 00 00 00       	mov    $0x18,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <thread_exit>:
+SYSCALL(thread_exit)
+ 333:	b8 17 00 00 00       	mov    $0x17,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <draw>:
+ 33b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+ 343:	66 90                	xchg   %ax,%ax
+ 345:	66 90                	xchg   %ax,%ax
+ 347:	66 90                	xchg   %ax,%ax
+ 349:	66 90                	xchg   %ax,%ax
+ 34b:	66 90                	xchg   %ax,%ax
+ 34d:	66 90                	xchg   %ax,%ax
+ 34f:	90                   	nop
+
+00000350 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
- 330:	55                   	push   %ebp
- 331:	89 e5                	mov    %esp,%ebp
- 333:	57                   	push   %edi
- 334:	56                   	push   %esi
- 335:	53                   	push   %ebx
- 336:	83 ec 3c             	sub    $0x3c,%esp
- 339:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	53                   	push   %ebx
+ 356:	83 ec 3c             	sub    $0x3c,%esp
+ 359:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
- 33c:	89 d1                	mov    %edx,%ecx
+ 35c:	89 d1                	mov    %edx,%ecx
 {
- 33e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+ 35e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
- 341:	85 d2                	test   %edx,%edx
- 343:	0f 89 7f 00 00 00    	jns    3c8 <printint+0x98>
- 349:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 34d:	74 79                	je     3c8 <printint+0x98>
+ 361:	85 d2                	test   %edx,%edx
+ 363:	0f 89 7f 00 00 00    	jns    3e8 <printint+0x98>
+ 369:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 36d:	74 79                	je     3e8 <printint+0x98>
     neg = 1;
- 34f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+ 36f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
- 356:	f7 d9                	neg    %ecx
+ 376:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
- 358:	31 db                	xor    %ebx,%ebx
- 35a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 35d:	8d 76 00             	lea    0x0(%esi),%esi
+ 378:	31 db                	xor    %ebx,%ebx
+ 37a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
- 360:	89 c8                	mov    %ecx,%eax
- 362:	31 d2                	xor    %edx,%edx
- 364:	89 cf                	mov    %ecx,%edi
- 366:	f7 75 c4             	divl   -0x3c(%ebp)
- 369:	0f b6 92 68 07 00 00 	movzbl 0x768(%edx),%edx
- 370:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 373:	89 d8                	mov    %ebx,%eax
- 375:	8d 5b 01             	lea    0x1(%ebx),%ebx
+ 380:	89 c8                	mov    %ecx,%eax
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	89 cf                	mov    %ecx,%edi
+ 386:	f7 75 c4             	divl   -0x3c(%ebp)
+ 389:	0f b6 92 88 07 00 00 	movzbl 0x788(%edx),%edx
+ 390:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 393:	89 d8                	mov    %ebx,%eax
+ 395:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
- 378:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+ 398:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
- 37b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+ 39b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
- 37e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 381:	76 dd                	jbe    360 <printint+0x30>
+ 39e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3a1:	76 dd                	jbe    380 <printint+0x30>
   if(neg)
- 383:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 386:	85 c9                	test   %ecx,%ecx
- 388:	74 0c                	je     396 <printint+0x66>
+ 3a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3a6:	85 c9                	test   %ecx,%ecx
+ 3a8:	74 0c                	je     3b6 <printint+0x66>
     buf[i++] = '-';
- 38a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+ 3aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
- 38f:	89 d8                	mov    %ebx,%eax
+ 3af:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
- 391:	ba 2d 00 00 00       	mov    $0x2d,%edx
+ 3b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
- 396:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 399:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 39d:	eb 07                	jmp    3a6 <printint+0x76>
- 39f:	90                   	nop
+ 3b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3bd:	eb 07                	jmp    3c6 <printint+0x76>
+ 3bf:	90                   	nop
     putc(fd, buf[i]);
- 3a0:	0f b6 13             	movzbl (%ebx),%edx
- 3a3:	83 eb 01             	sub    $0x1,%ebx
+ 3c0:	0f b6 13             	movzbl (%ebx),%edx
+ 3c3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
- 3a6:	83 ec 04             	sub    $0x4,%esp
- 3a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3ac:	6a 01                	push   $0x1
- 3ae:	56                   	push   %esi
- 3af:	57                   	push   %edi
- 3b0:	e8 ee fe ff ff       	call   2a3 <write>
+ 3c6:	83 ec 04             	sub    $0x4,%esp
+ 3c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3cc:	6a 01                	push   $0x1
+ 3ce:	56                   	push   %esi
+ 3cf:	57                   	push   %edi
+ 3d0:	e8 ce fe ff ff       	call   2a3 <write>
   while(--i >= 0)
- 3b5:	83 c4 10             	add    $0x10,%esp
- 3b8:	39 de                	cmp    %ebx,%esi
- 3ba:	75 e4                	jne    3a0 <printint+0x70>
-}
- 3bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3bf:	5b                   	pop    %ebx
- 3c0:	5e                   	pop    %esi
- 3c1:	5f                   	pop    %edi
- 3c2:	5d                   	pop    %ebp
- 3c3:	c3                   	ret    
- 3c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x70>
+}
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
- 3c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3cf:	eb 87                	jmp    358 <printint+0x28>
- 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3df:	90                   	nop
+ 3e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ef:	eb 87                	jmp    378 <printint+0x28>
+ 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
 
-000003e0 <printf>:
+00000400 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
- 3e0:	55                   	push   %ebp
- 3e1:	89 e5                	mov    %esp,%ebp
- 3e3:	57                   	push   %edi
- 3e4:	56                   	push   %esi
- 3e5:	53                   	push   %ebx
- 3e6:	83 ec 2c             	sub    $0x2c,%esp
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+ 406:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
- 3e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 409:	8b 5d 0c             	mov    0xc(%ebp),%ebx
 {
- 3ec:	8b 75 08             	mov    0x8(%ebp),%esi
+ 40c:	8b 75 08             	mov    0x8(%ebp),%esi
   for(i = 0; fmt[i]; i++){
- 3ef:	0f b6 13             	movzbl (%ebx),%edx
- 3f2:	84 d2                	test   %dl,%dl
- 3f4:	74 6a                	je     460 <printf+0x80>
+ 40f:	0f b6 13             	movzbl (%ebx),%edx
+ 412:	84 d2                	test   %dl,%dl
+ 414:	74 6a                	je     480 <printf+0x80>
   ap = (uint*)(void*)&fmt + 1;
- 3f6:	8d 45 10             	lea    0x10(%ebp),%eax
- 3f9:	83 c3 01             	add    $0x1,%ebx
+ 416:	8d 45 10             	lea    0x10(%ebp),%eax
+ 419:	83 c3 01             	add    $0x1,%ebx
   write(fd, &c, 1);
- 3fc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+ 41c:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
- 3ff:	31 c9                	xor    %ecx,%ecx
+ 41f:	31 c9                	xor    %ecx,%ecx
   ap = (uint*)(void*)&fmt + 1;
- 401:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 404:	eb 36                	jmp    43c <printf+0x5c>
- 406:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 40d:	8d 76 00             	lea    0x0(%esi),%esi
- 410:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+ 421:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 424:	eb 36                	jmp    45c <printf+0x5c>
+ 426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+ 430:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
- 413:	b9 25 00 00 00       	mov    $0x25,%ecx
+ 433:	b9 25 00 00 00       	mov    $0x25,%ecx
       if(c == '%'){
- 418:	83 f8 25             	cmp    $0x25,%eax
- 41b:	74 15                	je     432 <printf+0x52>
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	74 15                	je     452 <printf+0x52>
   write(fd, &c, 1);
- 41d:	83 ec 04             	sub    $0x4,%esp
- 420:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 423:	6a 01                	push   $0x1
- 425:	57                   	push   %edi
- 426:	56                   	push   %esi
- 427:	e8 77 fe ff ff       	call   2a3 <write>
- 42c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 43d:	83 ec 04             	sub    $0x4,%esp
+ 440:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 443:	6a 01                	push   $0x1
+ 445:	57                   	push   %edi
+ 446:	56                   	push   %esi
+ 447:	e8 57 fe ff ff       	call   2a3 <write>
+ 44c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
       } else {
         putc(fd, c);
- 42f:	83 c4 10             	add    $0x10,%esp
+ 44f:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
- 432:	0f b6 13             	movzbl (%ebx),%edx
- 435:	83 c3 01             	add    $0x1,%ebx
- 438:	84 d2                	test   %dl,%dl
- 43a:	74 24                	je     460 <printf+0x80>
+ 452:	0f b6 13             	movzbl (%ebx),%edx
+ 455:	83 c3 01             	add    $0x1,%ebx
+ 458:	84 d2                	test   %dl,%dl
+ 45a:	74 24                	je     480 <printf+0x80>
     c = fmt[i] & 0xff;
- 43c:	0f b6 c2             	movzbl %dl,%eax
+ 45c:	0f b6 c2             	movzbl %dl,%eax
     if(state == 0){
- 43f:	85 c9                	test   %ecx,%ecx
- 441:	74 cd                	je     410 <printf+0x30>
+ 45f:	85 c9                	test   %ecx,%ecx
+ 461:	74 cd                	je     430 <printf+0x30>
       }
     } else if(state == '%'){
- 443:	83 f9 25             	cmp    $0x25,%ecx
- 446:	75 ea                	jne    432 <printf+0x52>
+ 463:	83 f9 25             	cmp    $0x25,%ecx
+ 466:	75 ea                	jne    452 <printf+0x52>
       if(c == 'd'){
- 448:	83 f8 25             	cmp    $0x25,%eax
- 44b:	0f 84 07 01 00 00    	je     558 <printf+0x178>
- 451:	83 e8 63             	sub    $0x63,%eax
- 454:	83 f8 15             	cmp    $0x15,%eax
- 457:	77 17                	ja     470 <printf+0x90>
- 459:	ff 24 85 10 07 00 00 	jmp    *0x710(,%eax,4)
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	0f 84 07 01 00 00    	je     578 <printf+0x178>
+ 471:	83 e8 63             	sub    $0x63,%eax
+ 474:	83 f8 15             	cmp    $0x15,%eax
+ 477:	77 17                	ja     490 <printf+0x90>
+ 479:	ff 24 85 30 07 00 00 	jmp    *0x730(,%eax,4)
         putc(fd, c);
       }
       state = 0;
     }
   }
 }
- 460:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 463:	5b                   	pop    %ebx
- 464:	5e                   	pop    %esi
- 465:	5f                   	pop    %edi
- 466:	5d                   	pop    %ebp
- 467:	c3                   	ret    
- 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
-  write(fd, &c, 1);
- 470:	83 ec 04             	sub    $0x4,%esp
- 473:	88 55 d4             	mov    %dl,-0x2c(%ebp)
- 476:	6a 01                	push   $0x1
- 478:	57                   	push   %edi
- 479:	56                   	push   %esi
- 47a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 47e:	e8 20 fe ff ff       	call   2a3 <write>
+ 480:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 483:	5b                   	pop    %ebx
+ 484:	5e                   	pop    %esi
+ 485:	5f                   	pop    %edi
+ 486:	5d                   	pop    %ebp
+ 487:	c3                   	ret    
+ 488:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+  write(fd, &c, 1);
+ 490:	83 ec 04             	sub    $0x4,%esp
+ 493:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 496:	6a 01                	push   $0x1
+ 498:	57                   	push   %edi
+ 499:	56                   	push   %esi
+ 49a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 49e:	e8 00 fe ff ff       	call   2a3 <write>
         putc(fd, c);
- 483:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+ 4a3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
   write(fd, &c, 1);
- 487:	83 c4 0c             	add    $0xc,%esp
- 48a:	88 55 e7             	mov    %dl,-0x19(%ebp)
- 48d:	6a 01                	push   $0x1
- 48f:	57                   	push   %edi
- 490:	56                   	push   %esi
- 491:	e8 0d fe ff ff       	call   2a3 <write>
+ 4a7:	83 c4 0c             	add    $0xc,%esp
+ 4aa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4ad:	6a 01                	push   $0x1
+ 4af:	57                   	push   %edi
+ 4b0:	56                   	push   %esi
+ 4b1:	e8 ed fd ff ff       	call   2a3 <write>
         putc(fd, c);
- 496:	83 c4 10             	add    $0x10,%esp
+ 4b6:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 499:	31 c9                	xor    %ecx,%ecx
- 49b:	eb 95                	jmp    432 <printf+0x52>
- 49d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b9:	31 c9                	xor    %ecx,%ecx
+ 4bb:	eb 95                	jmp    452 <printf+0x52>
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 16, 0);
- 4a0:	83 ec 0c             	sub    $0xc,%esp
- 4a3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4a8:	6a 00                	push   $0x0
- 4aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4ad:	8b 10                	mov    (%eax),%edx
- 4af:	89 f0                	mov    %esi,%eax
- 4b1:	e8 7a fe ff ff       	call   330 <printint>
+ 4c0:	83 ec 0c             	sub    $0xc,%esp
+ 4c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4cd:	8b 10                	mov    (%eax),%edx
+ 4cf:	89 f0                	mov    %esi,%eax
+ 4d1:	e8 7a fe ff ff       	call   350 <printint>
         ap++;
- 4b6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 4ba:	83 c4 10             	add    $0x10,%esp
+ 4d6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4da:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 4bd:	31 c9                	xor    %ecx,%ecx
- 4bf:	e9 6e ff ff ff       	jmp    432 <printf+0x52>
- 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4dd:	31 c9                	xor    %ecx,%ecx
+ 4df:	e9 6e ff ff ff       	jmp    452 <printf+0x52>
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         s = (char*)*ap;
- 4c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4cb:	8b 10                	mov    (%eax),%edx
+ 4e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4eb:	8b 10                	mov    (%eax),%edx
         ap++;
- 4cd:	83 c0 04             	add    $0x4,%eax
- 4d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4ed:	83 c0 04             	add    $0x4,%eax
+ 4f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
- 4d3:	85 d2                	test   %edx,%edx
- 4d5:	0f 84 8d 00 00 00    	je     568 <printf+0x188>
+ 4f3:	85 d2                	test   %edx,%edx
+ 4f5:	0f 84 8d 00 00 00    	je     588 <printf+0x188>
         while(*s != 0){
- 4db:	0f b6 02             	movzbl (%edx),%eax
+ 4fb:	0f b6 02             	movzbl (%edx),%eax
       state = 0;
- 4de:	31 c9                	xor    %ecx,%ecx
+ 4fe:	31 c9                	xor    %ecx,%ecx
         while(*s != 0){
- 4e0:	84 c0                	test   %al,%al
- 4e2:	0f 84 4a ff ff ff    	je     432 <printf+0x52>
- 4e8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 4eb:	89 d3                	mov    %edx,%ebx
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 500:	84 c0                	test   %al,%al
+ 502:	0f 84 4a ff ff ff    	je     452 <printf+0x52>
+ 508:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 50b:	89 d3                	mov    %edx,%ebx
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
   write(fd, &c, 1);
- 4f0:	83 ec 04             	sub    $0x4,%esp
+ 510:	83 ec 04             	sub    $0x4,%esp
           s++;
- 4f3:	83 c3 01             	add    $0x1,%ebx
- 4f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 513:	83 c3 01             	add    $0x1,%ebx
+ 516:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 4f9:	6a 01                	push   $0x1
- 4fb:	57                   	push   %edi
- 4fc:	56                   	push   %esi
- 4fd:	e8 a1 fd ff ff       	call   2a3 <write>
+ 519:	6a 01                	push   $0x1
+ 51b:	57                   	push   %edi
+ 51c:	56                   	push   %esi
+ 51d:	e8 81 fd ff ff       	call   2a3 <write>
         while(*s != 0){
- 502:	0f b6 03             	movzbl (%ebx),%eax
- 505:	83 c4 10             	add    $0x10,%esp
- 508:	84 c0                	test   %al,%al
- 50a:	75 e4                	jne    4f0 <printf+0x110>
+ 522:	0f b6 03             	movzbl (%ebx),%eax
+ 525:	83 c4 10             	add    $0x10,%esp
+ 528:	84 c0                	test   %al,%al
+ 52a:	75 e4                	jne    510 <printf+0x110>
       state = 0;
- 50c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
- 50f:	31 c9                	xor    %ecx,%ecx
- 511:	e9 1c ff ff ff       	jmp    432 <printf+0x52>
- 516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51d:	8d 76 00             	lea    0x0(%esi),%esi
+ 52c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 52f:	31 c9                	xor    %ecx,%ecx
+ 531:	e9 1c ff ff ff       	jmp    452 <printf+0x52>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
         printint(fd, *ap, 10, 1);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 528:	6a 01                	push   $0x1
- 52a:	e9 7b ff ff ff       	jmp    4aa <printf+0xca>
- 52f:	90                   	nop
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	e9 7b ff ff ff       	jmp    4ca <printf+0xca>
+ 54f:	90                   	nop
         putc(fd, *ap);
- 530:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
   write(fd, &c, 1);
- 533:	83 ec 04             	sub    $0x4,%esp
+ 553:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
- 536:	8b 00                	mov    (%eax),%eax
+ 556:	8b 00                	mov    (%eax),%eax
   write(fd, &c, 1);
- 538:	6a 01                	push   $0x1
- 53a:	57                   	push   %edi
- 53b:	56                   	push   %esi
+ 558:	6a 01                	push   $0x1
+ 55a:	57                   	push   %edi
+ 55b:	56                   	push   %esi
         putc(fd, *ap);
- 53c:	88 45 e7             	mov    %al,-0x19(%ebp)
+ 55c:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
- 53f:	e8 5f fd ff ff       	call   2a3 <write>
+ 55f:	e8 3f fd ff ff       	call   2a3 <write>
         ap++;
- 544:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
- 548:	83 c4 10             	add    $0x10,%esp
+ 564:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 568:	83 c4 10             	add    $0x10,%esp
       state = 0;
- 54b:	31 c9                	xor    %ecx,%ecx
- 54d:	e9 e0 fe ff ff       	jmp    432 <printf+0x52>
- 552:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 56b:	31 c9                	xor    %ecx,%ecx
+ 56d:	e9 e0 fe ff ff       	jmp    452 <printf+0x52>
+ 572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         putc(fd, c);
- 558:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 578:	88 55 e7             	mov    %dl,-0x19(%ebp)
   write(fd, &c, 1);
- 55b:	83 ec 04             	sub    $0x4,%esp
- 55e:	e9 2a ff ff ff       	jmp    48d <printf+0xad>
- 563:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 567:	90                   	nop
+ 57b:	83 ec 04             	sub    $0x4,%esp
+ 57e:	e9 2a ff ff ff       	jmp    4ad <printf+0xad>
+ 583:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 587:	90                   	nop
           s = "(null)";
- 568:	ba 08 07 00 00       	mov    $0x708,%edx
+ 588:	ba 28 07 00 00       	mov    $0x728,%edx
         while(*s != 0){
- 56d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
- 570:	b8 28 00 00 00       	mov    $0x28,%eax
- 575:	89 d3                	mov    %edx,%ebx
- 577:	e9 74 ff ff ff       	jmp    4f0 <printf+0x110>
- 57c:	66 90                	xchg   %ax,%ax
- 57e:	66 90                	xchg   %ax,%ax
+ 58d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 590:	b8 28 00 00 00       	mov    $0x28,%eax
+ 595:	89 d3                	mov    %edx,%ebx
+ 597:	e9 74 ff ff ff       	jmp    510 <printf+0x110>
+ 59c:	66 90                	xchg   %ax,%ax
+ 59e:	66 90                	xchg   %ax,%ax
 
-00000580 <free>:
+000005a0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
- 580:	55                   	push   %ebp
+ 5a0:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 581:	a1 10 0a 00 00       	mov    0xa10,%eax
+ 5a1:	a1 30 0a 00 00       	mov    0xa30,%eax
 {
- 586:	89 e5                	mov    %esp,%ebp
- 588:	57                   	push   %edi
- 589:	56                   	push   %esi
- 58a:	53                   	push   %ebx
- 58b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = (Header*)ap - 1;
- 58e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+ 5ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 598:	89 c2                	mov    %eax,%edx
- 59a:	8b 00                	mov    (%eax),%eax
- 59c:	39 ca                	cmp    %ecx,%edx
- 59e:	73 30                	jae    5d0 <free+0x50>
- 5a0:	39 c1                	cmp    %eax,%ecx
- 5a2:	72 04                	jb     5a8 <free+0x28>
+ 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5b8:	89 c2                	mov    %eax,%edx
+ 5ba:	8b 00                	mov    (%eax),%eax
+ 5bc:	39 ca                	cmp    %ecx,%edx
+ 5be:	73 30                	jae    5f0 <free+0x50>
+ 5c0:	39 c1                	cmp    %eax,%ecx
+ 5c2:	72 04                	jb     5c8 <free+0x28>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a4:	39 c2                	cmp    %eax,%edx
- 5a6:	72 f0                	jb     598 <free+0x18>
+ 5c4:	39 c2                	cmp    %eax,%edx
+ 5c6:	72 f0                	jb     5b8 <free+0x18>
       break;
   if(bp + bp->s.size == p->s.ptr){
- 5a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ae:	39 f8                	cmp    %edi,%eax
- 5b0:	74 30                	je     5e2 <free+0x62>
+ 5c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ce:	39 f8                	cmp    %edi,%eax
+ 5d0:	74 30                	je     602 <free+0x62>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
- 5b2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 5d2:	89 43 f8             	mov    %eax,-0x8(%ebx)
   } else
     bp->s.ptr = p->s.ptr;
   if(p + p->s.size == bp){
- 5b5:	8b 42 04             	mov    0x4(%edx),%eax
- 5b8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5bb:	39 f1                	cmp    %esi,%ecx
- 5bd:	74 3a                	je     5f9 <free+0x79>
+ 5d5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5d8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5db:	39 f1                	cmp    %esi,%ecx
+ 5dd:	74 3a                	je     619 <free+0x79>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
- 5bf:	89 0a                	mov    %ecx,(%edx)
+ 5df:	89 0a                	mov    %ecx,(%edx)
   } else
     p->s.ptr = bp;
   freep = p;
 }
- 5c1:	5b                   	pop    %ebx
+ 5e1:	5b                   	pop    %ebx
   freep = p;
- 5c2:	89 15 10 0a 00 00    	mov    %edx,0xa10
+ 5e2:	89 15 30 0a 00 00    	mov    %edx,0xa30
 }
- 5c8:	5e                   	pop    %esi
- 5c9:	5f                   	pop    %edi
- 5ca:	5d                   	pop    %ebp
- 5cb:	c3                   	ret    
- 5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	5e                   	pop    %esi
+ 5e9:	5f                   	pop    %edi
+ 5ea:	5d                   	pop    %ebp
+ 5eb:	c3                   	ret    
+ 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5d0:	39 c2                	cmp    %eax,%edx
- 5d2:	72 c4                	jb     598 <free+0x18>
- 5d4:	39 c1                	cmp    %eax,%ecx
- 5d6:	73 c0                	jae    598 <free+0x18>
+ 5f0:	39 c2                	cmp    %eax,%edx
+ 5f2:	72 c4                	jb     5b8 <free+0x18>
+ 5f4:	39 c1                	cmp    %eax,%ecx
+ 5f6:	73 c0                	jae    5b8 <free+0x18>
   if(bp + bp->s.size == p->s.ptr){
- 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5de:	39 f8                	cmp    %edi,%eax
- 5e0:	75 d0                	jne    5b2 <free+0x32>
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	75 d0                	jne    5d2 <free+0x32>
     bp->s.size += p->s.ptr->s.size;
- 5e2:	03 70 04             	add    0x4(%eax),%esi
- 5e5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+ 602:	03 70 04             	add    0x4(%eax),%esi
+ 605:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
- 5e8:	8b 02                	mov    (%edx),%eax
- 5ea:	8b 00                	mov    (%eax),%eax
- 5ec:	89 43 f8             	mov    %eax,-0x8(%ebx)
+ 608:	8b 02                	mov    (%edx),%eax
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	89 43 f8             	mov    %eax,-0x8(%ebx)
   if(p + p->s.size == bp){
- 5ef:	8b 42 04             	mov    0x4(%edx),%eax
- 5f2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
- 5f5:	39 f1                	cmp    %esi,%ecx
- 5f7:	75 c6                	jne    5bf <free+0x3f>
+ 60f:	8b 42 04             	mov    0x4(%edx),%eax
+ 612:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 615:	39 f1                	cmp    %esi,%ecx
+ 617:	75 c6                	jne    5df <free+0x3f>
     p->s.size += bp->s.size;
- 5f9:	03 43 fc             	add    -0x4(%ebx),%eax
+ 619:	03 43 fc             	add    -0x4(%ebx),%eax
   freep = p;
- 5fc:	89 15 10 0a 00 00    	mov    %edx,0xa10
+ 61c:	89 15 30 0a 00 00    	mov    %edx,0xa30
     p->s.size += bp->s.size;
- 602:	89 42 04             	mov    %eax,0x4(%edx)
+ 622:	89 42 04             	mov    %eax,0x4(%edx)
     p->s.ptr = bp->s.ptr;
- 605:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 608:	89 0a                	mov    %ecx,(%edx)
+ 625:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 628:	89 0a                	mov    %ecx,(%edx)
 }
- 60a:	5b                   	pop    %ebx
- 60b:	5e                   	pop    %esi
- 60c:	5f                   	pop    %edi
- 60d:	5d                   	pop    %ebp
- 60e:	c3                   	ret    
- 60f:	90                   	nop
+ 62a:	5b                   	pop    %ebx
+ 62b:	5e                   	pop    %esi
+ 62c:	5f                   	pop    %edi
+ 62d:	5d                   	pop    %ebp
+ 62e:	c3                   	ret    
+ 62f:	90                   	nop
 
-00000610 <malloc>:
+00000630 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
- 610:	55                   	push   %ebp
- 611:	89 e5                	mov    %esp,%ebp
- 613:	57                   	push   %edi
- 614:	56                   	push   %esi
- 615:	53                   	push   %ebx
- 616:	83 ec 1c             	sub    $0x1c,%esp
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 619:	8b 45 08             	mov    0x8(%ebp),%eax
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
- 61c:	8b 3d 10 0a 00 00    	mov    0xa10,%edi
+ 63c:	8b 3d 30 0a 00 00    	mov    0xa30,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 622:	8d 70 07             	lea    0x7(%eax),%esi
- 625:	c1 ee 03             	shr    $0x3,%esi
- 628:	83 c6 01             	add    $0x1,%esi
+ 642:	8d 70 07             	lea    0x7(%eax),%esi
+ 645:	c1 ee 03             	shr    $0x3,%esi
+ 648:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
- 62b:	85 ff                	test   %edi,%edi
- 62d:	0f 84 9d 00 00 00    	je     6d0 <malloc+0xc0>
+ 64b:	85 ff                	test   %edi,%edi
+ 64d:	0f 84 9d 00 00 00    	je     6f0 <malloc+0xc0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 633:	8b 17                	mov    (%edi),%edx
+ 653:	8b 17                	mov    (%edi),%edx
     if(p->s.size >= nunits){
- 635:	8b 4a 04             	mov    0x4(%edx),%ecx
- 638:	39 f1                	cmp    %esi,%ecx
- 63a:	73 6a                	jae    6a6 <malloc+0x96>
- 63c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 641:	39 de                	cmp    %ebx,%esi
- 643:	0f 43 de             	cmovae %esi,%ebx
+ 655:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 658:	39 f1                	cmp    %esi,%ecx
+ 65a:	73 6a                	jae    6c6 <malloc+0x96>
+ 65c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 661:	39 de                	cmp    %ebx,%esi
+ 663:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
- 646:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
- 64d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
- 650:	eb 17                	jmp    669 <malloc+0x59>
- 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 666:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 66d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 670:	eb 17                	jmp    689 <malloc+0x59>
+ 672:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 658:	8b 02                	mov    (%edx),%eax
+ 678:	8b 02                	mov    (%edx),%eax
     if(p->s.size >= nunits){
- 65a:	8b 48 04             	mov    0x4(%eax),%ecx
- 65d:	39 f1                	cmp    %esi,%ecx
- 65f:	73 4f                	jae    6b0 <malloc+0xa0>
+ 67a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 67d:	39 f1                	cmp    %esi,%ecx
+ 67f:	73 4f                	jae    6d0 <malloc+0xa0>
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
- 661:	8b 3d 10 0a 00 00    	mov    0xa10,%edi
- 667:	89 c2                	mov    %eax,%edx
- 669:	39 d7                	cmp    %edx,%edi
- 66b:	75 eb                	jne    658 <malloc+0x48>
+ 681:	8b 3d 30 0a 00 00    	mov    0xa30,%edi
+ 687:	89 c2                	mov    %eax,%edx
+ 689:	39 d7                	cmp    %edx,%edi
+ 68b:	75 eb                	jne    678 <malloc+0x48>
   p = sbrk(nu * sizeof(Header));
- 66d:	83 ec 0c             	sub    $0xc,%esp
- 670:	ff 75 e4             	push   -0x1c(%ebp)
- 673:	e8 93 fc ff ff       	call   30b <sbrk>
+ 68d:	83 ec 0c             	sub    $0xc,%esp
+ 690:	ff 75 e4             	push   -0x1c(%ebp)
+ 693:	e8 73 fc ff ff       	call   30b <sbrk>
   if(p == (char*)-1)
- 678:	83 c4 10             	add    $0x10,%esp
- 67b:	83 f8 ff             	cmp    $0xffffffff,%eax
- 67e:	74 1c                	je     69c <malloc+0x8c>
+ 698:	83 c4 10             	add    $0x10,%esp
+ 69b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 69e:	74 1c                	je     6bc <malloc+0x8c>
   hp->s.size = nu;
- 680:	89 58 04             	mov    %ebx,0x4(%eax)
+ 6a0:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
- 683:	83 ec 0c             	sub    $0xc,%esp
- 686:	83 c0 08             	add    $0x8,%eax
- 689:	50                   	push   %eax
- 68a:	e8 f1 fe ff ff       	call   580 <free>
+ 6a3:	83 ec 0c             	sub    $0xc,%esp
+ 6a6:	83 c0 08             	add    $0x8,%eax
+ 6a9:	50                   	push   %eax
+ 6aa:	e8 f1 fe ff ff       	call   5a0 <free>
   return freep;
- 68f:	8b 15 10 0a 00 00    	mov    0xa10,%edx
+ 6af:	8b 15 30 0a 00 00    	mov    0xa30,%edx
       if((p = morecore(nunits)) == 0)
- 695:	83 c4 10             	add    $0x10,%esp
- 698:	85 d2                	test   %edx,%edx
- 69a:	75 bc                	jne    658 <malloc+0x48>
+ 6b5:	83 c4 10             	add    $0x10,%esp
+ 6b8:	85 d2                	test   %edx,%edx
+ 6ba:	75 bc                	jne    678 <malloc+0x48>
         return 0;
   }
 }
- 69c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
- 69f:	31 c0                	xor    %eax,%eax
+ 6bf:	31 c0                	xor    %eax,%eax
 }
- 6a1:	5b                   	pop    %ebx
- 6a2:	5e                   	pop    %esi
- 6a3:	5f                   	pop    %edi
- 6a4:	5d                   	pop    %ebp
- 6a5:	c3                   	ret    
+ 6c1:	5b                   	pop    %ebx
+ 6c2:	5e                   	pop    %esi
+ 6c3:	5f                   	pop    %edi
+ 6c4:	5d                   	pop    %ebp
+ 6c5:	c3                   	ret    
     if(p->s.size >= nunits){
- 6a6:	89 d0                	mov    %edx,%eax
- 6a8:	89 fa                	mov    %edi,%edx
- 6aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 6c6:	89 d0                	mov    %edx,%eax
+ 6c8:	89 fa                	mov    %edi,%edx
+ 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       if(p->s.size == nunits)
- 6b0:	39 ce                	cmp    %ecx,%esi
- 6b2:	74 4c                	je     700 <malloc+0xf0>
+ 6d0:	39 ce                	cmp    %ecx,%esi
+ 6d2:	74 4c                	je     720 <malloc+0xf0>
         p->s.size -= nunits;
- 6b4:	29 f1                	sub    %esi,%ecx
- 6b6:	89 48 04             	mov    %ecx,0x4(%eax)
+ 6d4:	29 f1                	sub    %esi,%ecx
+ 6d6:	89 48 04             	mov    %ecx,0x4(%eax)
         p += p->s.size;
- 6b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+ 6d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
         p->s.size = nunits;
- 6bc:	89 70 04             	mov    %esi,0x4(%eax)
+ 6dc:	89 70 04             	mov    %esi,0x4(%eax)
       freep = prevp;
- 6bf:	89 15 10 0a 00 00    	mov    %edx,0xa10
+ 6df:	89 15 30 0a 00 00    	mov    %edx,0xa30
 }
- 6c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
- 6c8:	83 c0 08             	add    $0x8,%eax
+ 6e8:	83 c0 08             	add    $0x8,%eax
 }
- 6cb:	5b                   	pop    %ebx
- 6cc:	5e                   	pop    %esi
- 6cd:	5f                   	pop    %edi
- 6ce:	5d                   	pop    %ebp
- 6cf:	c3                   	ret    
+ 6eb:	5b                   	pop    %ebx
+ 6ec:	5e                   	pop    %esi
+ 6ed:	5f                   	pop    %edi
+ 6ee:	5d                   	pop    %ebp
+ 6ef:	c3                   	ret    
     base.s.ptr = freep = prevp = &base;
- 6d0:	c7 05 10 0a 00 00 14 	movl   $0xa14,0xa10
- 6d7:	0a 00 00 
+ 6f0:	c7 05 30 0a 00 00 34 	movl   $0xa34,0xa30
+ 6f7:	0a 00 00 
     base.s.size = 0;
- 6da:	bf 14 0a 00 00       	mov    $0xa14,%edi
+ 6fa:	bf 34 0a 00 00       	mov    $0xa34,%edi
     base.s.ptr = freep = prevp = &base;
- 6df:	c7 05 14 0a 00 00 14 	movl   $0xa14,0xa14
- 6e6:	0a 00 00 
+ 6ff:	c7 05 34 0a 00 00 34 	movl   $0xa34,0xa34
+ 706:	0a 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e9:	89 fa                	mov    %edi,%edx
+ 709:	89 fa                	mov    %edi,%edx
     base.s.size = 0;
- 6eb:	c7 05 18 0a 00 00 00 	movl   $0x0,0xa18
- 6f2:	00 00 00 
+ 70b:	c7 05 38 0a 00 00 00 	movl   $0x0,0xa38
+ 712:	00 00 00 
     if(p->s.size >= nunits){
- 6f5:	e9 42 ff ff ff       	jmp    63c <malloc+0x2c>
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 715:	e9 42 ff ff ff       	jmp    65c <malloc+0x2c>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
- 700:	8b 08                	mov    (%eax),%ecx
- 702:	89 0a                	mov    %ecx,(%edx)
- 704:	eb b9                	jmp    6bf <malloc+0xaf>
+ 720:	8b 08                	mov    (%eax),%ecx
+ 722:	89 0a                	mov    %ecx,(%edx)
+ 724:	eb b9                	jmp    6df <malloc+0xaf>
diff -u xv6-public-org/zombie.sym xv6-public/zombie.sym
--- xv6-public-org/zombie.sym	2022-09-04 11:47:12.346449204 +0530
+++ xv6-public/zombie.sym	2022-09-05 23:16:37.725931133 +0530
@@ -1,18 +1,19 @@
 00000000 zombie.c
 00000000 ulib.c
 00000000 printf.c
-00000330 printint
-00000768 digits.0
+00000350 printint
+00000788 digits.0
 00000000 umalloc.c
-00000a10 freep
-00000a14 base
+00000a30 freep
+00000a34 base
 00000030 strcpy
-000003e0 printf
+00000400 printf
+00000333 thread_exit
 00000250 memmove
 000002cb mknod
 00000150 gets
 00000303 getpid
-00000610 malloc
+00000630 malloc
 00000313 sleep
 00000293 pipe
 000002a3 write
@@ -26,20 +27,23 @@
 0000027b fork
 0000030b sbrk
 0000031b uptime
-00000a10 __bss_start
+00000a30 __bss_start
 000000f0 memset
 00000000 main
 00000060 strcmp
 000002fb dup
 000001c0 stat
-00000a10 _edata
-00000a1c _end
+00000a30 _edata
+00000a3c _end
 000002e3 link
 00000283 exit
 00000210 atoi
+0000033b draw
 000000c0 strlen
 000002c3 open
 00000110 strchr
+00000323 thread_create
 000002eb mkdir
 000002ab close
-00000580 free
+0000032b thread_join
+000005a0 free
